// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.privateca_v1.enums.CertificateAuthorityType;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateConfigArgs;
import io.pulumi.googlenative.privateca_v1.inputs.KeyVersionSpecArgs;
import io.pulumi.googlenative.privateca_v1.inputs.SubordinateConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateAuthorityArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityArgs Empty = new CertificateAuthorityArgs();

    @InputImport(name="caPoolId", required=true)
    private final Input<String> caPoolId;

    public Input<String> getCaPoolId() {
        return this.caPoolId;
    }

    @InputImport(name="certificateAuthorityId", required=true)
    private final Input<String> certificateAuthorityId;

    public Input<String> getCertificateAuthorityId() {
        return this.certificateAuthorityId;
    }

    @InputImport(name="config", required=true)
    private final Input<CertificateConfigArgs> config;

    public Input<CertificateConfigArgs> getConfig() {
        return this.config;
    }

    @InputImport(name="gcsBucket")
    private final @Nullable Input<String> gcsBucket;

    public Input<String> getGcsBucket() {
        return this.gcsBucket == null ? Input.empty() : this.gcsBucket;
    }

    @InputImport(name="keySpec", required=true)
    private final Input<KeyVersionSpecArgs> keySpec;

    public Input<KeyVersionSpecArgs> getKeySpec() {
        return this.keySpec;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="lifetime", required=true)
    private final Input<String> lifetime;

    public Input<String> getLifetime() {
        return this.lifetime;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="requestId")
    private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    @InputImport(name="subordinateConfig")
    private final @Nullable Input<SubordinateConfigArgs> subordinateConfig;

    public Input<SubordinateConfigArgs> getSubordinateConfig() {
        return this.subordinateConfig == null ? Input.empty() : this.subordinateConfig;
    }

    @InputImport(name="type", required=true)
    private final Input<CertificateAuthorityType> type;

    public Input<CertificateAuthorityType> getType() {
        return this.type;
    }

    public CertificateAuthorityArgs(
        Input<String> caPoolId,
        Input<String> certificateAuthorityId,
        Input<CertificateConfigArgs> config,
        @Nullable Input<String> gcsBucket,
        Input<KeyVersionSpecArgs> keySpec,
        @Nullable Input<Map<String,String>> labels,
        Input<String> lifetime,
        @Nullable Input<String> location,
        @Nullable Input<String> project,
        @Nullable Input<String> requestId,
        @Nullable Input<SubordinateConfigArgs> subordinateConfig,
        Input<CertificateAuthorityType> type) {
        this.caPoolId = Objects.requireNonNull(caPoolId, "expected parameter 'caPoolId' to be non-null");
        this.certificateAuthorityId = Objects.requireNonNull(certificateAuthorityId, "expected parameter 'certificateAuthorityId' to be non-null");
        this.config = Objects.requireNonNull(config, "expected parameter 'config' to be non-null");
        this.gcsBucket = gcsBucket;
        this.keySpec = Objects.requireNonNull(keySpec, "expected parameter 'keySpec' to be non-null");
        this.labels = labels;
        this.lifetime = Objects.requireNonNull(lifetime, "expected parameter 'lifetime' to be non-null");
        this.location = location;
        this.project = project;
        this.requestId = requestId;
        this.subordinateConfig = subordinateConfig;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private CertificateAuthorityArgs() {
        this.caPoolId = Input.empty();
        this.certificateAuthorityId = Input.empty();
        this.config = Input.empty();
        this.gcsBucket = Input.empty();
        this.keySpec = Input.empty();
        this.labels = Input.empty();
        this.lifetime = Input.empty();
        this.location = Input.empty();
        this.project = Input.empty();
        this.requestId = Input.empty();
        this.subordinateConfig = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> caPoolId;
        private Input<String> certificateAuthorityId;
        private Input<CertificateConfigArgs> config;
        private @Nullable Input<String> gcsBucket;
        private Input<KeyVersionSpecArgs> keySpec;
        private @Nullable Input<Map<String,String>> labels;
        private Input<String> lifetime;
        private @Nullable Input<String> location;
        private @Nullable Input<String> project;
        private @Nullable Input<String> requestId;
        private @Nullable Input<SubordinateConfigArgs> subordinateConfig;
        private Input<CertificateAuthorityType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateAuthorityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caPoolId = defaults.caPoolId;
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.config = defaults.config;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.keySpec = defaults.keySpec;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.subordinateConfig = defaults.subordinateConfig;
    	      this.type = defaults.type;
        }

        public Builder setCaPoolId(Input<String> caPoolId) {
            this.caPoolId = Objects.requireNonNull(caPoolId);
            return this;
        }

        public Builder setCaPoolId(String caPoolId) {
            this.caPoolId = Input.of(Objects.requireNonNull(caPoolId));
            return this;
        }

        public Builder setCertificateAuthorityId(Input<String> certificateAuthorityId) {
            this.certificateAuthorityId = Objects.requireNonNull(certificateAuthorityId);
            return this;
        }

        public Builder setCertificateAuthorityId(String certificateAuthorityId) {
            this.certificateAuthorityId = Input.of(Objects.requireNonNull(certificateAuthorityId));
            return this;
        }

        public Builder setConfig(Input<CertificateConfigArgs> config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }

        public Builder setConfig(CertificateConfigArgs config) {
            this.config = Input.of(Objects.requireNonNull(config));
            return this;
        }

        public Builder setGcsBucket(@Nullable Input<String> gcsBucket) {
            this.gcsBucket = gcsBucket;
            return this;
        }

        public Builder setGcsBucket(@Nullable String gcsBucket) {
            this.gcsBucket = Input.ofNullable(gcsBucket);
            return this;
        }

        public Builder setKeySpec(Input<KeyVersionSpecArgs> keySpec) {
            this.keySpec = Objects.requireNonNull(keySpec);
            return this;
        }

        public Builder setKeySpec(KeyVersionSpecArgs keySpec) {
            this.keySpec = Input.of(Objects.requireNonNull(keySpec));
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLifetime(Input<String> lifetime) {
            this.lifetime = Objects.requireNonNull(lifetime);
            return this;
        }

        public Builder setLifetime(String lifetime) {
            this.lifetime = Input.of(Objects.requireNonNull(lifetime));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRequestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder setRequestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public Builder setSubordinateConfig(@Nullable Input<SubordinateConfigArgs> subordinateConfig) {
            this.subordinateConfig = subordinateConfig;
            return this;
        }

        public Builder setSubordinateConfig(@Nullable SubordinateConfigArgs subordinateConfig) {
            this.subordinateConfig = Input.ofNullable(subordinateConfig);
            return this;
        }

        public Builder setType(Input<CertificateAuthorityType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(CertificateAuthorityType type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public CertificateAuthorityArgs build() {
            return new CertificateAuthorityArgs(caPoolId, certificateAuthorityId, config, gcsBucket, keySpec, labels, lifetime, location, project, requestId, subordinateConfig, type);
        }
    }
}
