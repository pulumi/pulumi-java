// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.inputs.AppBundleResponse;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import io.pulumi.googlenative.testing_v1.inputs.ShardingOptionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AndroidInstrumentationTestResponse extends io.pulumi.resources.InvokeArgs {

    public static final AndroidInstrumentationTestResponse Empty = new AndroidInstrumentationTestResponse();

    @InputImport(name="appApk", required=true)
    private final FileReferenceResponse appApk;

    public FileReferenceResponse getAppApk() {
        return this.appApk;
    }

    @InputImport(name="appBundle", required=true)
    private final AppBundleResponse appBundle;

    public AppBundleResponse getAppBundle() {
        return this.appBundle;
    }

    @InputImport(name="appPackageId", required=true)
    private final String appPackageId;

    public String getAppPackageId() {
        return this.appPackageId;
    }

    @InputImport(name="orchestratorOption", required=true)
    private final String orchestratorOption;

    public String getOrchestratorOption() {
        return this.orchestratorOption;
    }

    @InputImport(name="shardingOption", required=true)
    private final ShardingOptionResponse shardingOption;

    public ShardingOptionResponse getShardingOption() {
        return this.shardingOption;
    }

    @InputImport(name="testApk", required=true)
    private final FileReferenceResponse testApk;

    public FileReferenceResponse getTestApk() {
        return this.testApk;
    }

    @InputImport(name="testPackageId", required=true)
    private final String testPackageId;

    public String getTestPackageId() {
        return this.testPackageId;
    }

    @InputImport(name="testRunnerClass", required=true)
    private final String testRunnerClass;

    public String getTestRunnerClass() {
        return this.testRunnerClass;
    }

    @InputImport(name="testTargets", required=true)
    private final List<String> testTargets;

    public List<String> getTestTargets() {
        return this.testTargets;
    }

    public AndroidInstrumentationTestResponse(
        FileReferenceResponse appApk,
        AppBundleResponse appBundle,
        String appPackageId,
        String orchestratorOption,
        ShardingOptionResponse shardingOption,
        FileReferenceResponse testApk,
        String testPackageId,
        String testRunnerClass,
        List<String> testTargets) {
        this.appApk = Objects.requireNonNull(appApk, "expected parameter 'appApk' to be non-null");
        this.appBundle = Objects.requireNonNull(appBundle, "expected parameter 'appBundle' to be non-null");
        this.appPackageId = Objects.requireNonNull(appPackageId, "expected parameter 'appPackageId' to be non-null");
        this.orchestratorOption = Objects.requireNonNull(orchestratorOption, "expected parameter 'orchestratorOption' to be non-null");
        this.shardingOption = Objects.requireNonNull(shardingOption, "expected parameter 'shardingOption' to be non-null");
        this.testApk = Objects.requireNonNull(testApk, "expected parameter 'testApk' to be non-null");
        this.testPackageId = Objects.requireNonNull(testPackageId, "expected parameter 'testPackageId' to be non-null");
        this.testRunnerClass = Objects.requireNonNull(testRunnerClass, "expected parameter 'testRunnerClass' to be non-null");
        this.testTargets = Objects.requireNonNull(testTargets, "expected parameter 'testTargets' to be non-null");
    }

    private AndroidInstrumentationTestResponse() {
        this.appApk = null;
        this.appBundle = null;
        this.appPackageId = null;
        this.orchestratorOption = null;
        this.shardingOption = null;
        this.testApk = null;
        this.testPackageId = null;
        this.testRunnerClass = null;
        this.testTargets = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidInstrumentationTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileReferenceResponse appApk;
        private AppBundleResponse appBundle;
        private String appPackageId;
        private String orchestratorOption;
        private ShardingOptionResponse shardingOption;
        private FileReferenceResponse testApk;
        private String testPackageId;
        private String testRunnerClass;
        private List<String> testTargets;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidInstrumentationTestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appApk = defaults.appApk;
    	      this.appBundle = defaults.appBundle;
    	      this.appPackageId = defaults.appPackageId;
    	      this.orchestratorOption = defaults.orchestratorOption;
    	      this.shardingOption = defaults.shardingOption;
    	      this.testApk = defaults.testApk;
    	      this.testPackageId = defaults.testPackageId;
    	      this.testRunnerClass = defaults.testRunnerClass;
    	      this.testTargets = defaults.testTargets;
        }

        public Builder setAppApk(FileReferenceResponse appApk) {
            this.appApk = Objects.requireNonNull(appApk);
            return this;
        }

        public Builder setAppBundle(AppBundleResponse appBundle) {
            this.appBundle = Objects.requireNonNull(appBundle);
            return this;
        }

        public Builder setAppPackageId(String appPackageId) {
            this.appPackageId = Objects.requireNonNull(appPackageId);
            return this;
        }

        public Builder setOrchestratorOption(String orchestratorOption) {
            this.orchestratorOption = Objects.requireNonNull(orchestratorOption);
            return this;
        }

        public Builder setShardingOption(ShardingOptionResponse shardingOption) {
            this.shardingOption = Objects.requireNonNull(shardingOption);
            return this;
        }

        public Builder setTestApk(FileReferenceResponse testApk) {
            this.testApk = Objects.requireNonNull(testApk);
            return this;
        }

        public Builder setTestPackageId(String testPackageId) {
            this.testPackageId = Objects.requireNonNull(testPackageId);
            return this;
        }

        public Builder setTestRunnerClass(String testRunnerClass) {
            this.testRunnerClass = Objects.requireNonNull(testRunnerClass);
            return this;
        }

        public Builder setTestTargets(List<String> testTargets) {
            this.testTargets = Objects.requireNonNull(testTargets);
            return this;
        }

        public AndroidInstrumentationTestResponse build() {
            return new AndroidInstrumentationTestResponse(appApk, appBundle, appPackageId, orchestratorOption, shardingOption, testApk, testPackageId, testRunnerClass, testTargets);
        }
    }
}
