// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.run_v1alpha1.inputs.InstanceTemplateSpecResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class JobSpecResponse extends io.pulumi.resources.InvokeArgs {

    public static final JobSpecResponse Empty = new JobSpecResponse();

    @InputImport(name="activeDeadlineSeconds", required=true)
    private final String activeDeadlineSeconds;

    public String getActiveDeadlineSeconds() {
        return this.activeDeadlineSeconds;
    }

    @InputImport(name="backoffLimit", required=true)
    private final Integer backoffLimit;

    public Integer getBackoffLimit() {
        return this.backoffLimit;
    }

    @InputImport(name="completions", required=true)
    private final Integer completions;

    public Integer getCompletions() {
        return this.completions;
    }

    @InputImport(name="parallelism", required=true)
    private final Integer parallelism;

    public Integer getParallelism() {
        return this.parallelism;
    }

    @InputImport(name="template", required=true)
    private final InstanceTemplateSpecResponse template;

    public InstanceTemplateSpecResponse getTemplate() {
        return this.template;
    }

    @InputImport(name="ttlSecondsAfterFinished", required=true)
    private final Integer ttlSecondsAfterFinished;

    public Integer getTtlSecondsAfterFinished() {
        return this.ttlSecondsAfterFinished;
    }

    public JobSpecResponse(
        String activeDeadlineSeconds,
        Integer backoffLimit,
        Integer completions,
        Integer parallelism,
        InstanceTemplateSpecResponse template,
        Integer ttlSecondsAfterFinished) {
        this.activeDeadlineSeconds = Objects.requireNonNull(activeDeadlineSeconds, "expected parameter 'activeDeadlineSeconds' to be non-null");
        this.backoffLimit = Objects.requireNonNull(backoffLimit, "expected parameter 'backoffLimit' to be non-null");
        this.completions = Objects.requireNonNull(completions, "expected parameter 'completions' to be non-null");
        this.parallelism = Objects.requireNonNull(parallelism, "expected parameter 'parallelism' to be non-null");
        this.template = Objects.requireNonNull(template, "expected parameter 'template' to be non-null");
        this.ttlSecondsAfterFinished = Objects.requireNonNull(ttlSecondsAfterFinished, "expected parameter 'ttlSecondsAfterFinished' to be non-null");
    }

    private JobSpecResponse() {
        this.activeDeadlineSeconds = null;
        this.backoffLimit = null;
        this.completions = null;
        this.parallelism = null;
        this.template = null;
        this.ttlSecondsAfterFinished = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String activeDeadlineSeconds;
        private Integer backoffLimit;
        private Integer completions;
        private Integer parallelism;
        private InstanceTemplateSpecResponse template;
        private Integer ttlSecondsAfterFinished;

        public Builder() {
    	      // Empty
        }

        public Builder(JobSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeadlineSeconds = defaults.activeDeadlineSeconds;
    	      this.backoffLimit = defaults.backoffLimit;
    	      this.completions = defaults.completions;
    	      this.parallelism = defaults.parallelism;
    	      this.template = defaults.template;
    	      this.ttlSecondsAfterFinished = defaults.ttlSecondsAfterFinished;
        }

        public Builder setActiveDeadlineSeconds(String activeDeadlineSeconds) {
            this.activeDeadlineSeconds = Objects.requireNonNull(activeDeadlineSeconds);
            return this;
        }

        public Builder setBackoffLimit(Integer backoffLimit) {
            this.backoffLimit = Objects.requireNonNull(backoffLimit);
            return this;
        }

        public Builder setCompletions(Integer completions) {
            this.completions = Objects.requireNonNull(completions);
            return this;
        }

        public Builder setParallelism(Integer parallelism) {
            this.parallelism = Objects.requireNonNull(parallelism);
            return this;
        }

        public Builder setTemplate(InstanceTemplateSpecResponse template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }

        public Builder setTtlSecondsAfterFinished(Integer ttlSecondsAfterFinished) {
            this.ttlSecondsAfterFinished = Objects.requireNonNull(ttlSecondsAfterFinished);
            return this;
        }

        public JobSpecResponse build() {
            return new JobSpecResponse(activeDeadlineSeconds, backoffLimit, completions, parallelism, template, ttlSecondsAfterFinished);
        }
    }
}
