// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storagetransfer_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.storagetransfer_v1.outputs.AwsS3DataResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.AzureBlobStorageDataResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.GcsDataResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.HttpDataResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.ObjectConditionsResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.PosixFilesystemResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.TransferManifestResponse;
import io.pulumi.googlenative.storagetransfer_v1.outputs.TransferOptionsResponse;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class TransferSpecResponse {
    /**
     * An AWS S3 data source.
     * 
     */
    private final AwsS3DataResponse awsS3DataSource;
    /**
     * An Azure Blob Storage data source.
     * 
     */
    private final AzureBlobStorageDataResponse azureBlobStorageDataSource;
    /**
     * A Cloud Storage data sink.
     * 
     */
    private final GcsDataResponse gcsDataSink;
    /**
     * A Cloud Storage data source.
     * 
     */
    private final GcsDataResponse gcsDataSource;
    /**
     * Cloud Storage intermediate data location.
     * 
     */
    private final GcsDataResponse gcsIntermediateDataLocation;
    /**
     * An HTTP URL data source.
     * 
     */
    private final HttpDataResponse httpDataSource;
    /**
     * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' "last modification time" do not exclude objects in a data sink.
     * 
     */
    private final ObjectConditionsResponse objectConditions;
    /**
     * A POSIX Filesystem data sink.
     * 
     */
    private final PosixFilesystemResponse posixDataSink;
    /**
     * A POSIX Filesystem data source.
     * 
     */
    private final PosixFilesystemResponse posixDataSource;
    /**
     * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    private final String sinkAgentPoolName;
    /**
     * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    private final String sourceAgentPoolName;
    /**
     * A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    private final TransferManifestResponse transferManifest;
    /**
     * If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as 'last modification time' are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    private final TransferOptionsResponse transferOptions;

    @OutputCustomType.Constructor({"awsS3DataSource","azureBlobStorageDataSource","gcsDataSink","gcsDataSource","gcsIntermediateDataLocation","httpDataSource","objectConditions","posixDataSink","posixDataSource","sinkAgentPoolName","sourceAgentPoolName","transferManifest","transferOptions"})
    private TransferSpecResponse(
        AwsS3DataResponse awsS3DataSource,
        AzureBlobStorageDataResponse azureBlobStorageDataSource,
        GcsDataResponse gcsDataSink,
        GcsDataResponse gcsDataSource,
        GcsDataResponse gcsIntermediateDataLocation,
        HttpDataResponse httpDataSource,
        ObjectConditionsResponse objectConditions,
        PosixFilesystemResponse posixDataSink,
        PosixFilesystemResponse posixDataSource,
        String sinkAgentPoolName,
        String sourceAgentPoolName,
        TransferManifestResponse transferManifest,
        TransferOptionsResponse transferOptions) {
        this.awsS3DataSource = Objects.requireNonNull(awsS3DataSource);
        this.azureBlobStorageDataSource = Objects.requireNonNull(azureBlobStorageDataSource);
        this.gcsDataSink = Objects.requireNonNull(gcsDataSink);
        this.gcsDataSource = Objects.requireNonNull(gcsDataSource);
        this.gcsIntermediateDataLocation = Objects.requireNonNull(gcsIntermediateDataLocation);
        this.httpDataSource = Objects.requireNonNull(httpDataSource);
        this.objectConditions = Objects.requireNonNull(objectConditions);
        this.posixDataSink = Objects.requireNonNull(posixDataSink);
        this.posixDataSource = Objects.requireNonNull(posixDataSource);
        this.sinkAgentPoolName = Objects.requireNonNull(sinkAgentPoolName);
        this.sourceAgentPoolName = Objects.requireNonNull(sourceAgentPoolName);
        this.transferManifest = Objects.requireNonNull(transferManifest);
        this.transferOptions = Objects.requireNonNull(transferOptions);
    }

    /**
     * An AWS S3 data source.
     * 
     */
    public AwsS3DataResponse getAwsS3DataSource() {
        return this.awsS3DataSource;
    }
    /**
     * An Azure Blob Storage data source.
     * 
     */
    public AzureBlobStorageDataResponse getAzureBlobStorageDataSource() {
        return this.azureBlobStorageDataSource;
    }
    /**
     * A Cloud Storage data sink.
     * 
     */
    public GcsDataResponse getGcsDataSink() {
        return this.gcsDataSink;
    }
    /**
     * A Cloud Storage data source.
     * 
     */
    public GcsDataResponse getGcsDataSource() {
        return this.gcsDataSource;
    }
    /**
     * Cloud Storage intermediate data location.
     * 
     */
    public GcsDataResponse getGcsIntermediateDataLocation() {
        return this.gcsIntermediateDataLocation;
    }
    /**
     * An HTTP URL data source.
     * 
     */
    public HttpDataResponse getHttpDataSource() {
        return this.httpDataSource;
    }
    /**
     * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' "last modification time" do not exclude objects in a data sink.
     * 
     */
    public ObjectConditionsResponse getObjectConditions() {
        return this.objectConditions;
    }
    /**
     * A POSIX Filesystem data sink.
     * 
     */
    public PosixFilesystemResponse getPosixDataSink() {
        return this.posixDataSink;
    }
    /**
     * A POSIX Filesystem data source.
     * 
     */
    public PosixFilesystemResponse getPosixDataSource() {
        return this.posixDataSource;
    }
    /**
     * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    public String getSinkAgentPoolName() {
        return this.sinkAgentPoolName;
    }
    /**
     * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    public String getSourceAgentPoolName() {
        return this.sourceAgentPoolName;
    }
    /**
     * A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    public TransferManifestResponse getTransferManifest() {
        return this.transferManifest;
    }
    /**
     * If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as 'last modification time' are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    public TransferOptionsResponse getTransferOptions() {
        return this.transferOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsS3DataResponse awsS3DataSource;
        private AzureBlobStorageDataResponse azureBlobStorageDataSource;
        private GcsDataResponse gcsDataSink;
        private GcsDataResponse gcsDataSource;
        private GcsDataResponse gcsIntermediateDataLocation;
        private HttpDataResponse httpDataSource;
        private ObjectConditionsResponse objectConditions;
        private PosixFilesystemResponse posixDataSink;
        private PosixFilesystemResponse posixDataSource;
        private String sinkAgentPoolName;
        private String sourceAgentPoolName;
        private TransferManifestResponse transferManifest;
        private TransferOptionsResponse transferOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsS3DataSource = defaults.awsS3DataSource;
    	      this.azureBlobStorageDataSource = defaults.azureBlobStorageDataSource;
    	      this.gcsDataSink = defaults.gcsDataSink;
    	      this.gcsDataSource = defaults.gcsDataSource;
    	      this.gcsIntermediateDataLocation = defaults.gcsIntermediateDataLocation;
    	      this.httpDataSource = defaults.httpDataSource;
    	      this.objectConditions = defaults.objectConditions;
    	      this.posixDataSink = defaults.posixDataSink;
    	      this.posixDataSource = defaults.posixDataSource;
    	      this.sinkAgentPoolName = defaults.sinkAgentPoolName;
    	      this.sourceAgentPoolName = defaults.sourceAgentPoolName;
    	      this.transferManifest = defaults.transferManifest;
    	      this.transferOptions = defaults.transferOptions;
        }

        public Builder setAwsS3DataSource(AwsS3DataResponse awsS3DataSource) {
            this.awsS3DataSource = Objects.requireNonNull(awsS3DataSource);
            return this;
        }

        public Builder setAzureBlobStorageDataSource(AzureBlobStorageDataResponse azureBlobStorageDataSource) {
            this.azureBlobStorageDataSource = Objects.requireNonNull(azureBlobStorageDataSource);
            return this;
        }

        public Builder setGcsDataSink(GcsDataResponse gcsDataSink) {
            this.gcsDataSink = Objects.requireNonNull(gcsDataSink);
            return this;
        }

        public Builder setGcsDataSource(GcsDataResponse gcsDataSource) {
            this.gcsDataSource = Objects.requireNonNull(gcsDataSource);
            return this;
        }

        public Builder setGcsIntermediateDataLocation(GcsDataResponse gcsIntermediateDataLocation) {
            this.gcsIntermediateDataLocation = Objects.requireNonNull(gcsIntermediateDataLocation);
            return this;
        }

        public Builder setHttpDataSource(HttpDataResponse httpDataSource) {
            this.httpDataSource = Objects.requireNonNull(httpDataSource);
            return this;
        }

        public Builder setObjectConditions(ObjectConditionsResponse objectConditions) {
            this.objectConditions = Objects.requireNonNull(objectConditions);
            return this;
        }

        public Builder setPosixDataSink(PosixFilesystemResponse posixDataSink) {
            this.posixDataSink = Objects.requireNonNull(posixDataSink);
            return this;
        }

        public Builder setPosixDataSource(PosixFilesystemResponse posixDataSource) {
            this.posixDataSource = Objects.requireNonNull(posixDataSource);
            return this;
        }

        public Builder setSinkAgentPoolName(String sinkAgentPoolName) {
            this.sinkAgentPoolName = Objects.requireNonNull(sinkAgentPoolName);
            return this;
        }

        public Builder setSourceAgentPoolName(String sourceAgentPoolName) {
            this.sourceAgentPoolName = Objects.requireNonNull(sourceAgentPoolName);
            return this;
        }

        public Builder setTransferManifest(TransferManifestResponse transferManifest) {
            this.transferManifest = Objects.requireNonNull(transferManifest);
            return this;
        }

        public Builder setTransferOptions(TransferOptionsResponse transferOptions) {
            this.transferOptions = Objects.requireNonNull(transferOptions);
            return this;
        }

        public TransferSpecResponse build() {
            return new TransferSpecResponse(awsS3DataSource, azureBlobStorageDataSource, gcsDataSink, gcsDataSource, gcsIntermediateDataLocation, httpDataSource, objectConditions, posixDataSink, posixDataSource, sinkAgentPoolName, sourceAgentPoolName, transferManifest, transferOptions);
        }
    }
}
