// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.servicemanagement_v1.outputs.AuthRequirementResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.OAuthRequirementsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class AuthenticationRuleResponse {
    private final Boolean allowWithoutCredential;
    private final OAuthRequirementsResponse oauth;
    private final List<AuthRequirementResponse> requirements;
    private final String selector;

    @OutputCustomType.Constructor({"allowWithoutCredential","oauth","requirements","selector"})
    private AuthenticationRuleResponse(
        Boolean allowWithoutCredential,
        OAuthRequirementsResponse oauth,
        List<AuthRequirementResponse> requirements,
        String selector) {
        this.allowWithoutCredential = Objects.requireNonNull(allowWithoutCredential);
        this.oauth = Objects.requireNonNull(oauth);
        this.requirements = Objects.requireNonNull(requirements);
        this.selector = Objects.requireNonNull(selector);
    }

    public Boolean getAllowWithoutCredential() {
        return this.allowWithoutCredential;
    }
    public OAuthRequirementsResponse getOauth() {
        return this.oauth;
    }
    public List<AuthRequirementResponse> getRequirements() {
        return this.requirements;
    }
    public String getSelector() {
        return this.selector;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthenticationRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowWithoutCredential;
        private OAuthRequirementsResponse oauth;
        private List<AuthRequirementResponse> requirements;
        private String selector;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthenticationRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowWithoutCredential = defaults.allowWithoutCredential;
    	      this.oauth = defaults.oauth;
    	      this.requirements = defaults.requirements;
    	      this.selector = defaults.selector;
        }

        public Builder setAllowWithoutCredential(Boolean allowWithoutCredential) {
            this.allowWithoutCredential = Objects.requireNonNull(allowWithoutCredential);
            return this;
        }

        public Builder setOauth(OAuthRequirementsResponse oauth) {
            this.oauth = Objects.requireNonNull(oauth);
            return this;
        }

        public Builder setRequirements(List<AuthRequirementResponse> requirements) {
            this.requirements = Objects.requireNonNull(requirements);
            return this;
        }

        public Builder setSelector(String selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }

        public AuthenticationRuleResponse build() {
            return new AuthenticationRuleResponse(allowWithoutCredential, oauth, requirements, selector);
        }
    }
}
