// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vpcaccess_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.vpcaccess_v1.inputs.SubnetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectorArgs Empty = new ConnectorArgs();

    @InputImport(name="connectorId", required=true)
    private final Input<String> connectorId;

    public Input<String> getConnectorId() {
        return this.connectorId;
    }

    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     * 
     */
    @InputImport(name="ipCidrRange")
    private final @Nullable Input<String> ipCidrRange;

    public Input<String> getIpCidrRange() {
        return this.ipCidrRange == null ? Input.empty() : this.ipCidrRange;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     * 
     */
    @InputImport(name="machineType")
    private final @Nullable Input<String> machineType;

    public Input<String> getMachineType() {
        return this.machineType == null ? Input.empty() : this.machineType;
    }

    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     * 
     */
    @InputImport(name="maxInstances")
    private final @Nullable Input<Integer> maxInstances;

    public Input<Integer> getMaxInstances() {
        return this.maxInstances == null ? Input.empty() : this.maxInstances;
    }

    /**
     * Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
     * 
     */
    @InputImport(name="maxThroughput")
    private final @Nullable Input<Integer> maxThroughput;

    public Input<Integer> getMaxThroughput() {
        return this.maxThroughput == null ? Input.empty() : this.maxThroughput;
    }

    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     * 
     */
    @InputImport(name="minInstances")
    private final @Nullable Input<Integer> minInstances;

    public Input<Integer> getMinInstances() {
        return this.minInstances == null ? Input.empty() : this.minInstances;
    }

    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     * 
     */
    @InputImport(name="minThroughput")
    private final @Nullable Input<Integer> minThroughput;

    public Input<Integer> getMinThroughput() {
        return this.minThroughput == null ? Input.empty() : this.minThroughput;
    }

    /**
     * The resource name in the format `projects/*{@literal /}locations/*{@literal /}connectors/*`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Name of a VPC network.
     * 
     */
    @InputImport(name="network")
    private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The subnet in which to house the VPC Access Connector.
     * 
     */
    @InputImport(name="subnet")
    private final @Nullable Input<SubnetArgs> subnet;

    public Input<SubnetArgs> getSubnet() {
        return this.subnet == null ? Input.empty() : this.subnet;
    }

    public ConnectorArgs(
        Input<String> connectorId,
        @Nullable Input<String> ipCidrRange,
        @Nullable Input<String> location,
        @Nullable Input<String> machineType,
        @Nullable Input<Integer> maxInstances,
        @Nullable Input<Integer> maxThroughput,
        @Nullable Input<Integer> minInstances,
        @Nullable Input<Integer> minThroughput,
        @Nullable Input<String> name,
        @Nullable Input<String> network,
        @Nullable Input<String> project,
        @Nullable Input<SubnetArgs> subnet) {
        this.connectorId = Objects.requireNonNull(connectorId, "expected parameter 'connectorId' to be non-null");
        this.ipCidrRange = ipCidrRange;
        this.location = location;
        this.machineType = machineType;
        this.maxInstances = maxInstances;
        this.maxThroughput = maxThroughput;
        this.minInstances = minInstances;
        this.minThroughput = minThroughput;
        this.name = name;
        this.network = network;
        this.project = project;
        this.subnet = subnet;
    }

    private ConnectorArgs() {
        this.connectorId = Input.empty();
        this.ipCidrRange = Input.empty();
        this.location = Input.empty();
        this.machineType = Input.empty();
        this.maxInstances = Input.empty();
        this.maxThroughput = Input.empty();
        this.minInstances = Input.empty();
        this.minThroughput = Input.empty();
        this.name = Input.empty();
        this.network = Input.empty();
        this.project = Input.empty();
        this.subnet = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> connectorId;
        private @Nullable Input<String> ipCidrRange;
        private @Nullable Input<String> location;
        private @Nullable Input<String> machineType;
        private @Nullable Input<Integer> maxInstances;
        private @Nullable Input<Integer> maxThroughput;
        private @Nullable Input<Integer> minInstances;
        private @Nullable Input<Integer> minThroughput;
        private @Nullable Input<String> name;
        private @Nullable Input<String> network;
        private @Nullable Input<String> project;
        private @Nullable Input<SubnetArgs> subnet;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.location = defaults.location;
    	      this.machineType = defaults.machineType;
    	      this.maxInstances = defaults.maxInstances;
    	      this.maxThroughput = defaults.maxThroughput;
    	      this.minInstances = defaults.minInstances;
    	      this.minThroughput = defaults.minThroughput;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.subnet = defaults.subnet;
        }

        public Builder setConnectorId(Input<String> connectorId) {
            this.connectorId = Objects.requireNonNull(connectorId);
            return this;
        }

        public Builder setConnectorId(String connectorId) {
            this.connectorId = Input.of(Objects.requireNonNull(connectorId));
            return this;
        }

        public Builder setIpCidrRange(@Nullable Input<String> ipCidrRange) {
            this.ipCidrRange = ipCidrRange;
            return this;
        }

        public Builder setIpCidrRange(@Nullable String ipCidrRange) {
            this.ipCidrRange = Input.ofNullable(ipCidrRange);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMachineType(@Nullable Input<String> machineType) {
            this.machineType = machineType;
            return this;
        }

        public Builder setMachineType(@Nullable String machineType) {
            this.machineType = Input.ofNullable(machineType);
            return this;
        }

        public Builder setMaxInstances(@Nullable Input<Integer> maxInstances) {
            this.maxInstances = maxInstances;
            return this;
        }

        public Builder setMaxInstances(@Nullable Integer maxInstances) {
            this.maxInstances = Input.ofNullable(maxInstances);
            return this;
        }

        public Builder setMaxThroughput(@Nullable Input<Integer> maxThroughput) {
            this.maxThroughput = maxThroughput;
            return this;
        }

        public Builder setMaxThroughput(@Nullable Integer maxThroughput) {
            this.maxThroughput = Input.ofNullable(maxThroughput);
            return this;
        }

        public Builder setMinInstances(@Nullable Input<Integer> minInstances) {
            this.minInstances = minInstances;
            return this;
        }

        public Builder setMinInstances(@Nullable Integer minInstances) {
            this.minInstances = Input.ofNullable(minInstances);
            return this;
        }

        public Builder setMinThroughput(@Nullable Input<Integer> minThroughput) {
            this.minThroughput = minThroughput;
            return this;
        }

        public Builder setMinThroughput(@Nullable Integer minThroughput) {
            this.minThroughput = Input.ofNullable(minThroughput);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNetwork(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSubnet(@Nullable Input<SubnetArgs> subnet) {
            this.subnet = subnet;
            return this;
        }

        public Builder setSubnet(@Nullable SubnetArgs subnet) {
            this.subnet = Input.ofNullable(subnet);
            return this;
        }

        public ConnectorArgs build() {
            return new ConnectorArgs(connectorId, ipCidrRange, location, machineType, maxInstances, maxThroughput, minInstances, minThroughput, name, network, project, subnet);
        }
    }
}
