// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.UserDefinedFunctionResourceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ViewDefinitionResponse extends io.pulumi.resources.InvokeArgs {

    public static final ViewDefinitionResponse Empty = new ViewDefinitionResponse();

    /**
     * [Required] A query that BigQuery executes when the view is referenced.
     * 
     */
    @InputImport(name="query", required=true)
    private final String query;

    public String getQuery() {
        return this.query;
    }

    /**
     * True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
     * 
     */
    @InputImport(name="useExplicitColumnNames", required=true)
    private final Boolean useExplicitColumnNames;

    public Boolean getUseExplicitColumnNames() {
        return this.useExplicitColumnNames;
    }

    /**
     * Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
     * 
     */
    @InputImport(name="useLegacySql", required=true)
    private final Boolean useLegacySql;

    public Boolean getUseLegacySql() {
        return this.useLegacySql;
    }

    /**
     * Describes user-defined function resources used in the query.
     * 
     */
    @InputImport(name="userDefinedFunctionResources", required=true)
    private final List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;

    public List<UserDefinedFunctionResourceResponse> getUserDefinedFunctionResources() {
        return this.userDefinedFunctionResources;
    }

    public ViewDefinitionResponse(
        String query,
        Boolean useExplicitColumnNames,
        Boolean useLegacySql,
        List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources) {
        this.query = Objects.requireNonNull(query, "expected parameter 'query' to be non-null");
        this.useExplicitColumnNames = Objects.requireNonNull(useExplicitColumnNames, "expected parameter 'useExplicitColumnNames' to be non-null");
        this.useLegacySql = Objects.requireNonNull(useLegacySql, "expected parameter 'useLegacySql' to be non-null");
        this.userDefinedFunctionResources = Objects.requireNonNull(userDefinedFunctionResources, "expected parameter 'userDefinedFunctionResources' to be non-null");
    }

    private ViewDefinitionResponse() {
        this.query = null;
        this.useExplicitColumnNames = null;
        this.useLegacySql = null;
        this.userDefinedFunctionResources = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ViewDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String query;
        private Boolean useExplicitColumnNames;
        private Boolean useLegacySql;
        private List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;

        public Builder() {
    	      // Empty
        }

        public Builder(ViewDefinitionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.query = defaults.query;
    	      this.useExplicitColumnNames = defaults.useExplicitColumnNames;
    	      this.useLegacySql = defaults.useLegacySql;
    	      this.userDefinedFunctionResources = defaults.userDefinedFunctionResources;
        }

        public Builder setQuery(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }

        public Builder setUseExplicitColumnNames(Boolean useExplicitColumnNames) {
            this.useExplicitColumnNames = Objects.requireNonNull(useExplicitColumnNames);
            return this;
        }

        public Builder setUseLegacySql(Boolean useLegacySql) {
            this.useLegacySql = Objects.requireNonNull(useLegacySql);
            return this;
        }

        public Builder setUserDefinedFunctionResources(List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = Objects.requireNonNull(userDefinedFunctionResources);
            return this;
        }

        public ViewDefinitionResponse build() {
            return new ViewDefinitionResponse(query, useExplicitColumnNames, useLegacySql, userDefinedFunctionResources);
        }
    }
}
