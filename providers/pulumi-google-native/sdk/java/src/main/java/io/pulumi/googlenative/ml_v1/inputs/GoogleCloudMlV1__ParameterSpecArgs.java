// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ml_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.ml_v1.enums.GoogleCloudMlV1__ParameterSpecScaleType;
import io.pulumi.googlenative.ml_v1.enums.GoogleCloudMlV1__ParameterSpecType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a single hyperparameter to optimize.
 * 
 */
public final class GoogleCloudMlV1__ParameterSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__ParameterSpecArgs Empty = new GoogleCloudMlV1__ParameterSpecArgs();

    /**
     * Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    @Import(name="categoricalValues")
      private final @Nullable Output<List<String>> categoricalValues;

    public Output<List<String>> categoricalValues() {
        return this.categoricalValues == null ? Codegen.empty() : this.categoricalValues;
    }

    /**
     * Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    @Import(name="discreteValues")
      private final @Nullable Output<List<Double>> discreteValues;

    public Output<List<Double>> discreteValues() {
        return this.discreteValues == null ? Codegen.empty() : this.discreteValues;
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    @Import(name="maxValue")
      private final @Nullable Output<Double> maxValue;

    public Output<Double> maxValue() {
        return this.maxValue == null ? Codegen.empty() : this.maxValue;
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    @Import(name="minValue")
      private final @Nullable Output<Double> minValue;

    public Output<Double> minValue() {
        return this.minValue == null ? Codegen.empty() : this.minValue;
    }

    /**
     * The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., "learning_rate".
     * 
     */
    @Import(name="parameterName", required=true)
      private final Output<String> parameterName;

    public Output<String> parameterName() {
        return this.parameterName;
    }

    /**
     * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    @Import(name="scaleType")
      private final @Nullable Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType;

    public Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType() {
        return this.scaleType == null ? Codegen.empty() : this.scaleType;
    }

    /**
     * The type of the parameter.
     * 
     */
    @Import(name="type", required=true)
      private final Output<GoogleCloudMlV1__ParameterSpecType> type;

    public Output<GoogleCloudMlV1__ParameterSpecType> type() {
        return this.type;
    }

    public GoogleCloudMlV1__ParameterSpecArgs(
        @Nullable Output<List<String>> categoricalValues,
        @Nullable Output<List<Double>> discreteValues,
        @Nullable Output<Double> maxValue,
        @Nullable Output<Double> minValue,
        Output<String> parameterName,
        @Nullable Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType,
        Output<GoogleCloudMlV1__ParameterSpecType> type) {
        this.categoricalValues = categoricalValues;
        this.discreteValues = discreteValues;
        this.maxValue = maxValue;
        this.minValue = minValue;
        this.parameterName = Objects.requireNonNull(parameterName, "expected parameter 'parameterName' to be non-null");
        this.scaleType = scaleType;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private GoogleCloudMlV1__ParameterSpecArgs() {
        this.categoricalValues = Codegen.empty();
        this.discreteValues = Codegen.empty();
        this.maxValue = Codegen.empty();
        this.minValue = Codegen.empty();
        this.parameterName = Codegen.empty();
        this.scaleType = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudMlV1__ParameterSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> categoricalValues;
        private @Nullable Output<List<Double>> discreteValues;
        private @Nullable Output<Double> maxValue;
        private @Nullable Output<Double> minValue;
        private Output<String> parameterName;
        private @Nullable Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType;
        private Output<GoogleCloudMlV1__ParameterSpecType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudMlV1__ParameterSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoricalValues = defaults.categoricalValues;
    	      this.discreteValues = defaults.discreteValues;
    	      this.maxValue = defaults.maxValue;
    	      this.minValue = defaults.minValue;
    	      this.parameterName = defaults.parameterName;
    	      this.scaleType = defaults.scaleType;
    	      this.type = defaults.type;
        }

        public Builder categoricalValues(@Nullable Output<List<String>> categoricalValues) {
            this.categoricalValues = categoricalValues;
            return this;
        }
        public Builder categoricalValues(@Nullable List<String> categoricalValues) {
            this.categoricalValues = Codegen.ofNullable(categoricalValues);
            return this;
        }
        public Builder categoricalValues(String... categoricalValues) {
            return categoricalValues(List.of(categoricalValues));
        }
        public Builder discreteValues(@Nullable Output<List<Double>> discreteValues) {
            this.discreteValues = discreteValues;
            return this;
        }
        public Builder discreteValues(@Nullable List<Double> discreteValues) {
            this.discreteValues = Codegen.ofNullable(discreteValues);
            return this;
        }
        public Builder discreteValues(Double... discreteValues) {
            return discreteValues(List.of(discreteValues));
        }
        public Builder maxValue(@Nullable Output<Double> maxValue) {
            this.maxValue = maxValue;
            return this;
        }
        public Builder maxValue(@Nullable Double maxValue) {
            this.maxValue = Codegen.ofNullable(maxValue);
            return this;
        }
        public Builder minValue(@Nullable Output<Double> minValue) {
            this.minValue = minValue;
            return this;
        }
        public Builder minValue(@Nullable Double minValue) {
            this.minValue = Codegen.ofNullable(minValue);
            return this;
        }
        public Builder parameterName(Output<String> parameterName) {
            this.parameterName = Objects.requireNonNull(parameterName);
            return this;
        }
        public Builder parameterName(String parameterName) {
            this.parameterName = Output.of(Objects.requireNonNull(parameterName));
            return this;
        }
        public Builder scaleType(@Nullable Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType) {
            this.scaleType = scaleType;
            return this;
        }
        public Builder scaleType(@Nullable GoogleCloudMlV1__ParameterSpecScaleType scaleType) {
            this.scaleType = Codegen.ofNullable(scaleType);
            return this;
        }
        public Builder type(Output<GoogleCloudMlV1__ParameterSpecType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(GoogleCloudMlV1__ParameterSpecType type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public GoogleCloudMlV1__ParameterSpecArgs build() {
            return new GoogleCloudMlV1__ParameterSpecArgs(categoricalValues, discreteValues, maxValue, minValue, parameterName, scaleType, type);
        }
    }
}
