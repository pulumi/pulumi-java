// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ml_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.ml_v1.enums.GoogleCloudMlV1__ParameterSpecScaleType;
import io.pulumi.googlenative.ml_v1.enums.GoogleCloudMlV1__ParameterSpecType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a single hyperparameter to optimize.
 * 
 */
public final class GoogleCloudMlV1__ParameterSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__ParameterSpecArgs Empty = new GoogleCloudMlV1__ParameterSpecArgs();

    /**
     * Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    @InputImport(name="categoricalValues")
    private final @Nullable Input<List<String>> categoricalValues;

    public Input<List<String>> getCategoricalValues() {
        return this.categoricalValues == null ? Input.empty() : this.categoricalValues;
    }

    /**
     * Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    @InputImport(name="discreteValues")
    private final @Nullable Input<List<Double>> discreteValues;

    public Input<List<Double>> getDiscreteValues() {
        return this.discreteValues == null ? Input.empty() : this.discreteValues;
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    @InputImport(name="maxValue")
    private final @Nullable Input<Double> maxValue;

    public Input<Double> getMaxValue() {
        return this.maxValue == null ? Input.empty() : this.maxValue;
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    @InputImport(name="minValue")
    private final @Nullable Input<Double> minValue;

    public Input<Double> getMinValue() {
        return this.minValue == null ? Input.empty() : this.minValue;
    }

    /**
     * The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., "learning_rate".
     * 
     */
    @InputImport(name="parameterName", required=true)
    private final Input<String> parameterName;

    public Input<String> getParameterName() {
        return this.parameterName;
    }

    /**
     * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    @InputImport(name="scaleType")
    private final @Nullable Input<GoogleCloudMlV1__ParameterSpecScaleType> scaleType;

    public Input<GoogleCloudMlV1__ParameterSpecScaleType> getScaleType() {
        return this.scaleType == null ? Input.empty() : this.scaleType;
    }

    /**
     * The type of the parameter.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<GoogleCloudMlV1__ParameterSpecType> type;

    public Input<GoogleCloudMlV1__ParameterSpecType> getType() {
        return this.type;
    }

    public GoogleCloudMlV1__ParameterSpecArgs(
        @Nullable Input<List<String>> categoricalValues,
        @Nullable Input<List<Double>> discreteValues,
        @Nullable Input<Double> maxValue,
        @Nullable Input<Double> minValue,
        Input<String> parameterName,
        @Nullable Input<GoogleCloudMlV1__ParameterSpecScaleType> scaleType,
        Input<GoogleCloudMlV1__ParameterSpecType> type) {
        this.categoricalValues = categoricalValues;
        this.discreteValues = discreteValues;
        this.maxValue = maxValue;
        this.minValue = minValue;
        this.parameterName = Objects.requireNonNull(parameterName, "expected parameter 'parameterName' to be non-null");
        this.scaleType = scaleType;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private GoogleCloudMlV1__ParameterSpecArgs() {
        this.categoricalValues = Input.empty();
        this.discreteValues = Input.empty();
        this.maxValue = Input.empty();
        this.minValue = Input.empty();
        this.parameterName = Input.empty();
        this.scaleType = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudMlV1__ParameterSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> categoricalValues;
        private @Nullable Input<List<Double>> discreteValues;
        private @Nullable Input<Double> maxValue;
        private @Nullable Input<Double> minValue;
        private Input<String> parameterName;
        private @Nullable Input<GoogleCloudMlV1__ParameterSpecScaleType> scaleType;
        private Input<GoogleCloudMlV1__ParameterSpecType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudMlV1__ParameterSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoricalValues = defaults.categoricalValues;
    	      this.discreteValues = defaults.discreteValues;
    	      this.maxValue = defaults.maxValue;
    	      this.minValue = defaults.minValue;
    	      this.parameterName = defaults.parameterName;
    	      this.scaleType = defaults.scaleType;
    	      this.type = defaults.type;
        }

        public Builder setCategoricalValues(@Nullable Input<List<String>> categoricalValues) {
            this.categoricalValues = categoricalValues;
            return this;
        }

        public Builder setCategoricalValues(@Nullable List<String> categoricalValues) {
            this.categoricalValues = Input.ofNullable(categoricalValues);
            return this;
        }

        public Builder setDiscreteValues(@Nullable Input<List<Double>> discreteValues) {
            this.discreteValues = discreteValues;
            return this;
        }

        public Builder setDiscreteValues(@Nullable List<Double> discreteValues) {
            this.discreteValues = Input.ofNullable(discreteValues);
            return this;
        }

        public Builder setMaxValue(@Nullable Input<Double> maxValue) {
            this.maxValue = maxValue;
            return this;
        }

        public Builder setMaxValue(@Nullable Double maxValue) {
            this.maxValue = Input.ofNullable(maxValue);
            return this;
        }

        public Builder setMinValue(@Nullable Input<Double> minValue) {
            this.minValue = minValue;
            return this;
        }

        public Builder setMinValue(@Nullable Double minValue) {
            this.minValue = Input.ofNullable(minValue);
            return this;
        }

        public Builder setParameterName(Input<String> parameterName) {
            this.parameterName = Objects.requireNonNull(parameterName);
            return this;
        }

        public Builder setParameterName(String parameterName) {
            this.parameterName = Input.of(Objects.requireNonNull(parameterName));
            return this;
        }

        public Builder setScaleType(@Nullable Input<GoogleCloudMlV1__ParameterSpecScaleType> scaleType) {
            this.scaleType = scaleType;
            return this;
        }

        public Builder setScaleType(@Nullable GoogleCloudMlV1__ParameterSpecScaleType scaleType) {
            this.scaleType = Input.ofNullable(scaleType);
            return this;
        }

        public Builder setType(Input<GoogleCloudMlV1__ParameterSpecType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(GoogleCloudMlV1__ParameterSpecType type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public GoogleCloudMlV1__ParameterSpecArgs build() {
            return new GoogleCloudMlV1__ParameterSpecArgs(categoricalValues, discreteValues, maxValue, minValue, parameterName, scaleType, type);
        }
    }
}
