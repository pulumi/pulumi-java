// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceArgs Empty = new RouterInterfaceArgs();

    /**
     * IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
     * 
     */
    @InputImport(name="ipRange")
      private final @Nullable Input<String> ipRange;

    public Input<String> getIpRange() {
        return this.ipRange == null ? Input.empty() : this.ipRange;
    }

    /**
     * URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
     * 
     */
    @InputImport(name="linkedInterconnectAttachment")
      private final @Nullable Input<String> linkedInterconnectAttachment;

    public Input<String> getLinkedInterconnectAttachment() {
        return this.linkedInterconnectAttachment == null ? Input.empty() : this.linkedInterconnectAttachment;
    }

    /**
     * URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
     * 
     */
    @InputImport(name="linkedVpnTunnel")
      private final @Nullable Input<String> linkedVpnTunnel;

    public Input<String> getLinkedVpnTunnel() {
        return this.linkedVpnTunnel == null ? Input.empty() : this.linkedVpnTunnel;
    }

    /**
     * Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM.
     * 
     */
    @InputImport(name="privateIpAddress")
      private final @Nullable Input<String> privateIpAddress;

    public Input<String> getPrivateIpAddress() {
        return this.privateIpAddress == null ? Input.empty() : this.privateIpAddress;
    }

    /**
     * Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @InputImport(name="redundantInterface")
      private final @Nullable Input<String> redundantInterface;

    public Input<String> getRedundantInterface() {
        return this.redundantInterface == null ? Input.empty() : this.redundantInterface;
    }

    /**
     * The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here.
     * 
     */
    @InputImport(name="subnetwork")
      private final @Nullable Input<String> subnetwork;

    public Input<String> getSubnetwork() {
        return this.subnetwork == null ? Input.empty() : this.subnetwork;
    }

    public RouterInterfaceArgs(
        @Nullable Input<String> ipRange,
        @Nullable Input<String> linkedInterconnectAttachment,
        @Nullable Input<String> linkedVpnTunnel,
        @Nullable Input<String> name,
        @Nullable Input<String> privateIpAddress,
        @Nullable Input<String> redundantInterface,
        @Nullable Input<String> subnetwork) {
        this.ipRange = ipRange;
        this.linkedInterconnectAttachment = linkedInterconnectAttachment;
        this.linkedVpnTunnel = linkedVpnTunnel;
        this.name = name;
        this.privateIpAddress = privateIpAddress;
        this.redundantInterface = redundantInterface;
        this.subnetwork = subnetwork;
    }

    private RouterInterfaceArgs() {
        this.ipRange = Input.empty();
        this.linkedInterconnectAttachment = Input.empty();
        this.linkedVpnTunnel = Input.empty();
        this.name = Input.empty();
        this.privateIpAddress = Input.empty();
        this.redundantInterface = Input.empty();
        this.subnetwork = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> ipRange;
        private @Nullable Input<String> linkedInterconnectAttachment;
        private @Nullable Input<String> linkedVpnTunnel;
        private @Nullable Input<String> name;
        private @Nullable Input<String> privateIpAddress;
        private @Nullable Input<String> redundantInterface;
        private @Nullable Input<String> subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipRange = defaults.ipRange;
    	      this.linkedInterconnectAttachment = defaults.linkedInterconnectAttachment;
    	      this.linkedVpnTunnel = defaults.linkedVpnTunnel;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.redundantInterface = defaults.redundantInterface;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder ipRange(@Nullable Input<String> ipRange) {
            this.ipRange = ipRange;
            return this;
        }

        public Builder ipRange(@Nullable String ipRange) {
            this.ipRange = Input.ofNullable(ipRange);
            return this;
        }

        public Builder linkedInterconnectAttachment(@Nullable Input<String> linkedInterconnectAttachment) {
            this.linkedInterconnectAttachment = linkedInterconnectAttachment;
            return this;
        }

        public Builder linkedInterconnectAttachment(@Nullable String linkedInterconnectAttachment) {
            this.linkedInterconnectAttachment = Input.ofNullable(linkedInterconnectAttachment);
            return this;
        }

        public Builder linkedVpnTunnel(@Nullable Input<String> linkedVpnTunnel) {
            this.linkedVpnTunnel = linkedVpnTunnel;
            return this;
        }

        public Builder linkedVpnTunnel(@Nullable String linkedVpnTunnel) {
            this.linkedVpnTunnel = Input.ofNullable(linkedVpnTunnel);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder privateIpAddress(@Nullable Input<String> privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = Input.ofNullable(privateIpAddress);
            return this;
        }

        public Builder redundantInterface(@Nullable Input<String> redundantInterface) {
            this.redundantInterface = redundantInterface;
            return this;
        }

        public Builder redundantInterface(@Nullable String redundantInterface) {
            this.redundantInterface = Input.ofNullable(redundantInterface);
            return this;
        }

        public Builder subnetwork(@Nullable Input<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder subnetwork(@Nullable String subnetwork) {
            this.subnetwork = Input.ofNullable(subnetwork);
            return this;
        }
        public RouterInterfaceArgs build() {
            return new RouterInterfaceArgs(ipRange, linkedInterconnectAttachment, linkedVpnTunnel, name, privateIpAddress, redundantInterface, subnetwork);
        }
    }
}
