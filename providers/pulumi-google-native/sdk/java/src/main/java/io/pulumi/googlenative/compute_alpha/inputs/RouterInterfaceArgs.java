// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceArgs Empty = new RouterInterfaceArgs();

    @InputImport(name="ipRange")
    private final @Nullable Input<String> ipRange;

    public Input<String> getIpRange() {
        return this.ipRange == null ? Input.empty() : this.ipRange;
    }

    @InputImport(name="linkedInterconnectAttachment")
    private final @Nullable Input<String> linkedInterconnectAttachment;

    public Input<String> getLinkedInterconnectAttachment() {
        return this.linkedInterconnectAttachment == null ? Input.empty() : this.linkedInterconnectAttachment;
    }

    @InputImport(name="linkedVpnTunnel")
    private final @Nullable Input<String> linkedVpnTunnel;

    public Input<String> getLinkedVpnTunnel() {
        return this.linkedVpnTunnel == null ? Input.empty() : this.linkedVpnTunnel;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="privateIpAddress")
    private final @Nullable Input<String> privateIpAddress;

    public Input<String> getPrivateIpAddress() {
        return this.privateIpAddress == null ? Input.empty() : this.privateIpAddress;
    }

    @InputImport(name="redundantInterface")
    private final @Nullable Input<String> redundantInterface;

    public Input<String> getRedundantInterface() {
        return this.redundantInterface == null ? Input.empty() : this.redundantInterface;
    }

    @InputImport(name="subnetwork")
    private final @Nullable Input<String> subnetwork;

    public Input<String> getSubnetwork() {
        return this.subnetwork == null ? Input.empty() : this.subnetwork;
    }

    public RouterInterfaceArgs(
        @Nullable Input<String> ipRange,
        @Nullable Input<String> linkedInterconnectAttachment,
        @Nullable Input<String> linkedVpnTunnel,
        @Nullable Input<String> name,
        @Nullable Input<String> privateIpAddress,
        @Nullable Input<String> redundantInterface,
        @Nullable Input<String> subnetwork) {
        this.ipRange = ipRange;
        this.linkedInterconnectAttachment = linkedInterconnectAttachment;
        this.linkedVpnTunnel = linkedVpnTunnel;
        this.name = name;
        this.privateIpAddress = privateIpAddress;
        this.redundantInterface = redundantInterface;
        this.subnetwork = subnetwork;
    }

    private RouterInterfaceArgs() {
        this.ipRange = Input.empty();
        this.linkedInterconnectAttachment = Input.empty();
        this.linkedVpnTunnel = Input.empty();
        this.name = Input.empty();
        this.privateIpAddress = Input.empty();
        this.redundantInterface = Input.empty();
        this.subnetwork = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> ipRange;
        private @Nullable Input<String> linkedInterconnectAttachment;
        private @Nullable Input<String> linkedVpnTunnel;
        private @Nullable Input<String> name;
        private @Nullable Input<String> privateIpAddress;
        private @Nullable Input<String> redundantInterface;
        private @Nullable Input<String> subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipRange = defaults.ipRange;
    	      this.linkedInterconnectAttachment = defaults.linkedInterconnectAttachment;
    	      this.linkedVpnTunnel = defaults.linkedVpnTunnel;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.redundantInterface = defaults.redundantInterface;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder setIpRange(@Nullable Input<String> ipRange) {
            this.ipRange = ipRange;
            return this;
        }

        public Builder setIpRange(@Nullable String ipRange) {
            this.ipRange = Input.ofNullable(ipRange);
            return this;
        }

        public Builder setLinkedInterconnectAttachment(@Nullable Input<String> linkedInterconnectAttachment) {
            this.linkedInterconnectAttachment = linkedInterconnectAttachment;
            return this;
        }

        public Builder setLinkedInterconnectAttachment(@Nullable String linkedInterconnectAttachment) {
            this.linkedInterconnectAttachment = Input.ofNullable(linkedInterconnectAttachment);
            return this;
        }

        public Builder setLinkedVpnTunnel(@Nullable Input<String> linkedVpnTunnel) {
            this.linkedVpnTunnel = linkedVpnTunnel;
            return this;
        }

        public Builder setLinkedVpnTunnel(@Nullable String linkedVpnTunnel) {
            this.linkedVpnTunnel = Input.ofNullable(linkedVpnTunnel);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable Input<String> privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = Input.ofNullable(privateIpAddress);
            return this;
        }

        public Builder setRedundantInterface(@Nullable Input<String> redundantInterface) {
            this.redundantInterface = redundantInterface;
            return this;
        }

        public Builder setRedundantInterface(@Nullable String redundantInterface) {
            this.redundantInterface = Input.ofNullable(redundantInterface);
            return this;
        }

        public Builder setSubnetwork(@Nullable Input<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder setSubnetwork(@Nullable String subnetwork) {
            this.subnetwork = Input.ofNullable(subnetwork);
            return this;
        }

        public RouterInterfaceArgs build() {
            return new RouterInterfaceArgs(ipRange, linkedInterconnectAttachment, linkedVpnTunnel, name, privateIpAddress, redundantInterface, subnetwork);
        }
    }
}
