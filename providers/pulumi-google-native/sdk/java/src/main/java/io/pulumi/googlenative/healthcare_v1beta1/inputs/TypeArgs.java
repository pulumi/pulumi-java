// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.healthcare_v1beta1.enums.TypePrimitive;
import io.pulumi.googlenative.healthcare_v1beta1.inputs.FieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A type definition for some HL7v2 type (incl. Segments and Datatypes).
 * 
 */
public final class TypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final TypeArgs Empty = new TypeArgs();

    /**
     * The (sub) fields this type has (if not primitive).
     * 
     */
    @InputImport(name="fields")
    private final @Nullable Input<List<FieldArgs>> fields;

    public Input<List<FieldArgs>> getFields() {
        return this.fields == null ? Input.empty() : this.fields;
    }

    /**
     * The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
     * 
     */
    @InputImport(name="primitive")
    private final @Nullable Input<TypePrimitive> primitive;

    public Input<TypePrimitive> getPrimitive() {
        return this.primitive == null ? Input.empty() : this.primitive;
    }

    public TypeArgs(
        @Nullable Input<List<FieldArgs>> fields,
        @Nullable Input<String> name,
        @Nullable Input<TypePrimitive> primitive) {
        this.fields = fields;
        this.name = name;
        this.primitive = primitive;
    }

    private TypeArgs() {
        this.fields = Input.empty();
        this.name = Input.empty();
        this.primitive = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<FieldArgs>> fields;
        private @Nullable Input<String> name;
        private @Nullable Input<TypePrimitive> primitive;

        public Builder() {
    	      // Empty
        }

        public Builder(TypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.primitive = defaults.primitive;
        }

        public Builder setFields(@Nullable Input<List<FieldArgs>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder setFields(@Nullable List<FieldArgs> fields) {
            this.fields = Input.ofNullable(fields);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPrimitive(@Nullable Input<TypePrimitive> primitive) {
            this.primitive = primitive;
            return this;
        }

        public Builder setPrimitive(@Nullable TypePrimitive primitive) {
            this.primitive = Input.ofNullable(primitive);
            return this;
        }

        public TypeArgs build() {
            return new TypeArgs(fields, name, primitive);
        }
    }
}
