// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storage_v1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The owner of the object. This will always be the uploader of the object.
 * 
 */
public final class BucketObjectOwnerResponse extends io.pulumi.resources.InvokeArgs {

    public static final BucketObjectOwnerResponse Empty = new BucketObjectOwnerResponse();

    /**
     * The entity, in the form user-userId.
     * 
     */
    @Import(name="entity", required=true)
      private final String entity;

    public String entity() {
        return this.entity;
    }

    /**
     * The ID for the entity.
     * 
     */
    @Import(name="entityId", required=true)
      private final String entityId;

    public String entityId() {
        return this.entityId;
    }

    public BucketObjectOwnerResponse(
        String entity,
        String entityId) {
        this.entity = Objects.requireNonNull(entity, "expected parameter 'entity' to be non-null");
        this.entityId = Objects.requireNonNull(entityId, "expected parameter 'entityId' to be non-null");
    }

    private BucketObjectOwnerResponse() {
        this.entity = null;
        this.entityId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketObjectOwnerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String entity;
        private String entityId;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketObjectOwnerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entity = defaults.entity;
    	      this.entityId = defaults.entityId;
        }

        public Builder entity(String entity) {
            this.entity = Objects.requireNonNull(entity);
            return this;
        }
        public Builder entityId(String entityId) {
            this.entityId = Objects.requireNonNull(entityId);
            return this;
        }        public BucketObjectOwnerResponse build() {
            return new BucketObjectOwnerResponse(entity, entityId);
        }
    }
}
