// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networkconnectivity_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.networkconnectivity_v1.inputs.LinkedInterconnectAttachmentsArgs;
import io.pulumi.googlenative.networkconnectivity_v1.inputs.LinkedRouterApplianceInstancesArgs;
import io.pulumi.googlenative.networkconnectivity_v1.inputs.LinkedVpnTunnelsArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SpokeArgs extends io.pulumi.resources.ResourceArgs {

    public static final SpokeArgs Empty = new SpokeArgs();

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="hub")
    private final @Nullable Input<String> hub;

    public Input<String> getHub() {
        return this.hub == null ? Input.empty() : this.hub;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="linkedInterconnectAttachments")
    private final @Nullable Input<LinkedInterconnectAttachmentsArgs> linkedInterconnectAttachments;

    public Input<LinkedInterconnectAttachmentsArgs> getLinkedInterconnectAttachments() {
        return this.linkedInterconnectAttachments == null ? Input.empty() : this.linkedInterconnectAttachments;
    }

    @InputImport(name="linkedRouterApplianceInstances")
    private final @Nullable Input<LinkedRouterApplianceInstancesArgs> linkedRouterApplianceInstances;

    public Input<LinkedRouterApplianceInstancesArgs> getLinkedRouterApplianceInstances() {
        return this.linkedRouterApplianceInstances == null ? Input.empty() : this.linkedRouterApplianceInstances;
    }

    @InputImport(name="linkedVpnTunnels")
    private final @Nullable Input<LinkedVpnTunnelsArgs> linkedVpnTunnels;

    public Input<LinkedVpnTunnelsArgs> getLinkedVpnTunnels() {
        return this.linkedVpnTunnels == null ? Input.empty() : this.linkedVpnTunnels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="requestId")
    private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    @InputImport(name="spokeId", required=true)
    private final Input<String> spokeId;

    public Input<String> getSpokeId() {
        return this.spokeId;
    }

    public SpokeArgs(
        @Nullable Input<String> description,
        @Nullable Input<String> hub,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<LinkedInterconnectAttachmentsArgs> linkedInterconnectAttachments,
        @Nullable Input<LinkedRouterApplianceInstancesArgs> linkedRouterApplianceInstances,
        @Nullable Input<LinkedVpnTunnelsArgs> linkedVpnTunnels,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> requestId,
        Input<String> spokeId) {
        this.description = description;
        this.hub = hub;
        this.labels = labels;
        this.linkedInterconnectAttachments = linkedInterconnectAttachments;
        this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
        this.linkedVpnTunnels = linkedVpnTunnels;
        this.location = location;
        this.name = name;
        this.project = project;
        this.requestId = requestId;
        this.spokeId = Objects.requireNonNull(spokeId, "expected parameter 'spokeId' to be non-null");
    }

    private SpokeArgs() {
        this.description = Input.empty();
        this.hub = Input.empty();
        this.labels = Input.empty();
        this.linkedInterconnectAttachments = Input.empty();
        this.linkedRouterApplianceInstances = Input.empty();
        this.linkedVpnTunnels = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.requestId = Input.empty();
        this.spokeId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpokeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> hub;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<LinkedInterconnectAttachmentsArgs> linkedInterconnectAttachments;
        private @Nullable Input<LinkedRouterApplianceInstancesArgs> linkedRouterApplianceInstances;
        private @Nullable Input<LinkedVpnTunnelsArgs> linkedVpnTunnels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> requestId;
        private Input<String> spokeId;

        public Builder() {
    	      // Empty
        }

        public Builder(SpokeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.hub = defaults.hub;
    	      this.labels = defaults.labels;
    	      this.linkedInterconnectAttachments = defaults.linkedInterconnectAttachments;
    	      this.linkedRouterApplianceInstances = defaults.linkedRouterApplianceInstances;
    	      this.linkedVpnTunnels = defaults.linkedVpnTunnels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.spokeId = defaults.spokeId;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setHub(@Nullable Input<String> hub) {
            this.hub = hub;
            return this;
        }

        public Builder setHub(@Nullable String hub) {
            this.hub = Input.ofNullable(hub);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLinkedInterconnectAttachments(@Nullable Input<LinkedInterconnectAttachmentsArgs> linkedInterconnectAttachments) {
            this.linkedInterconnectAttachments = linkedInterconnectAttachments;
            return this;
        }

        public Builder setLinkedInterconnectAttachments(@Nullable LinkedInterconnectAttachmentsArgs linkedInterconnectAttachments) {
            this.linkedInterconnectAttachments = Input.ofNullable(linkedInterconnectAttachments);
            return this;
        }

        public Builder setLinkedRouterApplianceInstances(@Nullable Input<LinkedRouterApplianceInstancesArgs> linkedRouterApplianceInstances) {
            this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
            return this;
        }

        public Builder setLinkedRouterApplianceInstances(@Nullable LinkedRouterApplianceInstancesArgs linkedRouterApplianceInstances) {
            this.linkedRouterApplianceInstances = Input.ofNullable(linkedRouterApplianceInstances);
            return this;
        }

        public Builder setLinkedVpnTunnels(@Nullable Input<LinkedVpnTunnelsArgs> linkedVpnTunnels) {
            this.linkedVpnTunnels = linkedVpnTunnels;
            return this;
        }

        public Builder setLinkedVpnTunnels(@Nullable LinkedVpnTunnelsArgs linkedVpnTunnels) {
            this.linkedVpnTunnels = Input.ofNullable(linkedVpnTunnels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRequestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder setRequestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public Builder setSpokeId(Input<String> spokeId) {
            this.spokeId = Objects.requireNonNull(spokeId);
            return this;
        }

        public Builder setSpokeId(String spokeId) {
            this.spokeId = Input.of(Objects.requireNonNull(spokeId));
            return this;
        }

        public SpokeArgs build() {
            return new SpokeArgs(description, hub, labels, linkedInterconnectAttachments, linkedRouterApplianceInstances, linkedVpnTunnels, location, name, project, requestId, spokeId);
        }
    }
}
