// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.pubsub_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.pubsub_v1.inputs.DeadLetterPolicyArgs;
import io.pulumi.googlenative.pubsub_v1.inputs.ExpirationPolicyArgs;
import io.pulumi.googlenative.pubsub_v1.inputs.PushConfigArgs;
import io.pulumi.googlenative.pubsub_v1.inputs.RetryPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    @InputImport(name="ackDeadlineSeconds")
    private final @Nullable Input<Integer> ackDeadlineSeconds;

    public Input<Integer> getAckDeadlineSeconds() {
        return this.ackDeadlineSeconds == null ? Input.empty() : this.ackDeadlineSeconds;
    }

    @InputImport(name="deadLetterPolicy")
    private final @Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy;

    public Input<DeadLetterPolicyArgs> getDeadLetterPolicy() {
        return this.deadLetterPolicy == null ? Input.empty() : this.deadLetterPolicy;
    }

    @InputImport(name="detached")
    private final @Nullable Input<Boolean> detached;

    public Input<Boolean> getDetached() {
        return this.detached == null ? Input.empty() : this.detached;
    }

    @InputImport(name="enableMessageOrdering")
    private final @Nullable Input<Boolean> enableMessageOrdering;

    public Input<Boolean> getEnableMessageOrdering() {
        return this.enableMessageOrdering == null ? Input.empty() : this.enableMessageOrdering;
    }

    @InputImport(name="expirationPolicy")
    private final @Nullable Input<ExpirationPolicyArgs> expirationPolicy;

    public Input<ExpirationPolicyArgs> getExpirationPolicy() {
        return this.expirationPolicy == null ? Input.empty() : this.expirationPolicy;
    }

    @InputImport(name="filter")
    private final @Nullable Input<String> filter;

    public Input<String> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="messageRetentionDuration")
    private final @Nullable Input<String> messageRetentionDuration;

    public Input<String> getMessageRetentionDuration() {
        return this.messageRetentionDuration == null ? Input.empty() : this.messageRetentionDuration;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="pushConfig")
    private final @Nullable Input<PushConfigArgs> pushConfig;

    public Input<PushConfigArgs> getPushConfig() {
        return this.pushConfig == null ? Input.empty() : this.pushConfig;
    }

    @InputImport(name="retainAckedMessages")
    private final @Nullable Input<Boolean> retainAckedMessages;

    public Input<Boolean> getRetainAckedMessages() {
        return this.retainAckedMessages == null ? Input.empty() : this.retainAckedMessages;
    }

    @InputImport(name="retryPolicy")
    private final @Nullable Input<RetryPolicyArgs> retryPolicy;

    public Input<RetryPolicyArgs> getRetryPolicy() {
        return this.retryPolicy == null ? Input.empty() : this.retryPolicy;
    }

    @InputImport(name="subscriptionId", required=true)
    private final Input<String> subscriptionId;

    public Input<String> getSubscriptionId() {
        return this.subscriptionId;
    }

    @InputImport(name="topic", required=true)
    private final Input<String> topic;

    public Input<String> getTopic() {
        return this.topic;
    }

    public SubscriptionArgs(
        @Nullable Input<Integer> ackDeadlineSeconds,
        @Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy,
        @Nullable Input<Boolean> detached,
        @Nullable Input<Boolean> enableMessageOrdering,
        @Nullable Input<ExpirationPolicyArgs> expirationPolicy,
        @Nullable Input<String> filter,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> messageRetentionDuration,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<PushConfigArgs> pushConfig,
        @Nullable Input<Boolean> retainAckedMessages,
        @Nullable Input<RetryPolicyArgs> retryPolicy,
        Input<String> subscriptionId,
        Input<String> topic) {
        this.ackDeadlineSeconds = ackDeadlineSeconds;
        this.deadLetterPolicy = deadLetterPolicy;
        this.detached = detached;
        this.enableMessageOrdering = enableMessageOrdering;
        this.expirationPolicy = expirationPolicy;
        this.filter = filter;
        this.labels = labels;
        this.messageRetentionDuration = messageRetentionDuration;
        this.name = name;
        this.project = project;
        this.pushConfig = pushConfig;
        this.retainAckedMessages = retainAckedMessages;
        this.retryPolicy = retryPolicy;
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "expected parameter 'subscriptionId' to be non-null");
        this.topic = Objects.requireNonNull(topic, "expected parameter 'topic' to be non-null");
    }

    private SubscriptionArgs() {
        this.ackDeadlineSeconds = Input.empty();
        this.deadLetterPolicy = Input.empty();
        this.detached = Input.empty();
        this.enableMessageOrdering = Input.empty();
        this.expirationPolicy = Input.empty();
        this.filter = Input.empty();
        this.labels = Input.empty();
        this.messageRetentionDuration = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.pushConfig = Input.empty();
        this.retainAckedMessages = Input.empty();
        this.retryPolicy = Input.empty();
        this.subscriptionId = Input.empty();
        this.topic = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> ackDeadlineSeconds;
        private @Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy;
        private @Nullable Input<Boolean> detached;
        private @Nullable Input<Boolean> enableMessageOrdering;
        private @Nullable Input<ExpirationPolicyArgs> expirationPolicy;
        private @Nullable Input<String> filter;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> messageRetentionDuration;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<PushConfigArgs> pushConfig;
        private @Nullable Input<Boolean> retainAckedMessages;
        private @Nullable Input<RetryPolicyArgs> retryPolicy;
        private Input<String> subscriptionId;
        private Input<String> topic;

        public Builder() {
    	      // Empty
        }

        public Builder(SubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackDeadlineSeconds = defaults.ackDeadlineSeconds;
    	      this.deadLetterPolicy = defaults.deadLetterPolicy;
    	      this.detached = defaults.detached;
    	      this.enableMessageOrdering = defaults.enableMessageOrdering;
    	      this.expirationPolicy = defaults.expirationPolicy;
    	      this.filter = defaults.filter;
    	      this.labels = defaults.labels;
    	      this.messageRetentionDuration = defaults.messageRetentionDuration;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pushConfig = defaults.pushConfig;
    	      this.retainAckedMessages = defaults.retainAckedMessages;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.topic = defaults.topic;
        }

        public Builder setAckDeadlineSeconds(@Nullable Input<Integer> ackDeadlineSeconds) {
            this.ackDeadlineSeconds = ackDeadlineSeconds;
            return this;
        }

        public Builder setAckDeadlineSeconds(@Nullable Integer ackDeadlineSeconds) {
            this.ackDeadlineSeconds = Input.ofNullable(ackDeadlineSeconds);
            return this;
        }

        public Builder setDeadLetterPolicy(@Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy) {
            this.deadLetterPolicy = deadLetterPolicy;
            return this;
        }

        public Builder setDeadLetterPolicy(@Nullable DeadLetterPolicyArgs deadLetterPolicy) {
            this.deadLetterPolicy = Input.ofNullable(deadLetterPolicy);
            return this;
        }

        public Builder setDetached(@Nullable Input<Boolean> detached) {
            this.detached = detached;
            return this;
        }

        public Builder setDetached(@Nullable Boolean detached) {
            this.detached = Input.ofNullable(detached);
            return this;
        }

        public Builder setEnableMessageOrdering(@Nullable Input<Boolean> enableMessageOrdering) {
            this.enableMessageOrdering = enableMessageOrdering;
            return this;
        }

        public Builder setEnableMessageOrdering(@Nullable Boolean enableMessageOrdering) {
            this.enableMessageOrdering = Input.ofNullable(enableMessageOrdering);
            return this;
        }

        public Builder setExpirationPolicy(@Nullable Input<ExpirationPolicyArgs> expirationPolicy) {
            this.expirationPolicy = expirationPolicy;
            return this;
        }

        public Builder setExpirationPolicy(@Nullable ExpirationPolicyArgs expirationPolicy) {
            this.expirationPolicy = Input.ofNullable(expirationPolicy);
            return this;
        }

        public Builder setFilter(@Nullable Input<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder setFilter(@Nullable String filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMessageRetentionDuration(@Nullable Input<String> messageRetentionDuration) {
            this.messageRetentionDuration = messageRetentionDuration;
            return this;
        }

        public Builder setMessageRetentionDuration(@Nullable String messageRetentionDuration) {
            this.messageRetentionDuration = Input.ofNullable(messageRetentionDuration);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setPushConfig(@Nullable Input<PushConfigArgs> pushConfig) {
            this.pushConfig = pushConfig;
            return this;
        }

        public Builder setPushConfig(@Nullable PushConfigArgs pushConfig) {
            this.pushConfig = Input.ofNullable(pushConfig);
            return this;
        }

        public Builder setRetainAckedMessages(@Nullable Input<Boolean> retainAckedMessages) {
            this.retainAckedMessages = retainAckedMessages;
            return this;
        }

        public Builder setRetainAckedMessages(@Nullable Boolean retainAckedMessages) {
            this.retainAckedMessages = Input.ofNullable(retainAckedMessages);
            return this;
        }

        public Builder setRetryPolicy(@Nullable Input<RetryPolicyArgs> retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }

        public Builder setRetryPolicy(@Nullable RetryPolicyArgs retryPolicy) {
            this.retryPolicy = Input.ofNullable(retryPolicy);
            return this;
        }

        public Builder setSubscriptionId(Input<String> subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }

        public Builder setSubscriptionId(String subscriptionId) {
            this.subscriptionId = Input.of(Objects.requireNonNull(subscriptionId));
            return this;
        }

        public Builder setTopic(Input<String> topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }

        public Builder setTopic(String topic) {
            this.topic = Input.of(Objects.requireNonNull(topic));
            return this;
        }

        public SubscriptionArgs build() {
            return new SubscriptionArgs(ackDeadlineSeconds, deadLetterPolicy, detached, enableMessageOrdering, expirationPolicy, filter, labels, messageRetentionDuration, name, project, pushConfig, retainAckedMessages, retryPolicy, subscriptionId, topic);
        }
    }
}
