// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.pubsub_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.pubsub_v1.inputs.DeadLetterPolicyArgs;
import io.pulumi.googlenative.pubsub_v1.inputs.ExpirationPolicyArgs;
import io.pulumi.googlenative.pubsub_v1.inputs.PushConfigArgs;
import io.pulumi.googlenative.pubsub_v1.inputs.RetryPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * The approximate amount of time (on a best-effort basis) Pub/Sub waits for the subscriber to acknowledge receipt before resending the message. In the interval after the message is delivered and before it is acknowledged, it is considered to be *outstanding*. During that time period, the message will not be redelivered (on a best-effort basis). For pull subscriptions, this value is used as the initial value for the ack deadline. To override this value for a given message, call `ModifyAckDeadline` with the corresponding `ack_id` if using non-streaming pull or send the `ack_id` in a `StreamingModifyAckDeadlineRequest` if using streaming pull. The minimum custom deadline you can specify is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the message.
     * 
     */
    @InputImport(name="ackDeadlineSeconds")
      private final @Nullable Input<Integer> ackDeadlineSeconds;

    public Input<Integer> getAckDeadlineSeconds() {
        return this.ackDeadlineSeconds == null ? Input.empty() : this.ackDeadlineSeconds;
    }

    /**
     * A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscriptions's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on this subscription.
     * 
     */
    @InputImport(name="deadLetterPolicy")
      private final @Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy;

    public Input<DeadLetterPolicyArgs> getDeadLetterPolicy() {
        return this.deadLetterPolicy == null ? Input.empty() : this.deadLetterPolicy;
    }

    /**
     * Indicates whether the subscription is detached from its topic. Detached subscriptions don't receive messages from their topic and don't retain any backlog. `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will not be made.
     * 
     */
    @InputImport(name="detached")
      private final @Nullable Input<Boolean> detached;

    public Input<Boolean> getDetached() {
        return this.detached == null ? Input.empty() : this.detached;
    }

    /**
     * If true, messages published with the same `ordering_key` in `PubsubMessage` will be delivered to the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
     * 
     */
    @InputImport(name="enableMessageOrdering")
      private final @Nullable Input<Boolean> enableMessageOrdering;

    public Input<Boolean> getEnableMessageOrdering() {
        return this.enableMessageOrdering == null ? Input.empty() : this.enableMessageOrdering;
    }

    /**
     * A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the subscription. If `expiration_policy` is not set, a *default policy* with `ttl` of 31 days will be used. The minimum allowed value for `expiration_policy.ttl` is 1 day. If `expiration_policy` is set, but `expiration_policy.ttl` is not set, the subscription never expires.
     * 
     */
    @InputImport(name="expirationPolicy")
      private final @Nullable Input<ExpirationPolicyArgs> expirationPolicy;

    public Input<ExpirationPolicyArgs> getExpirationPolicy() {
        return this.expirationPolicy == null ? Input.empty() : this.expirationPolicy;
    }

    /**
     * An expression written in the Pub/Sub [filter language](https://cloud.google.com/pubsub/docs/filtering). If non-empty, then only `PubsubMessage`s whose `attributes` field matches the filter are delivered on this subscription. If empty, then no messages are filtered out.
     * 
     */
    @InputImport(name="filter")
      private final @Nullable Input<String> filter;

    public Input<String> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    /**
     * See Creating and managing labels.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If `retain_acked_messages` is true, then this also configures the retention of acknowledged messages, and thus configures how far back in time a `Seek` can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10 minutes.
     * 
     */
    @InputImport(name="messageRetentionDuration")
      private final @Nullable Input<String> messageRetentionDuration;

    public Input<String> getMessageRetentionDuration() {
        return this.messageRetentionDuration == null ? Input.empty() : this.messageRetentionDuration;
    }

    /**
     * The name of the subscription. It must have the format `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `"goog"`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * If push delivery is used with this subscription, this field is used to configure it. At most one of `pushConfig` and `bigQueryConfig` can be set. If both are empty, then the subscriber will pull and ack messages using API methods.
     * 
     */
    @InputImport(name="pushConfig")
      private final @Nullable Input<PushConfigArgs> pushConfig;

    public Input<PushConfigArgs> getPushConfig() {
        return this.pushConfig == null ? Input.empty() : this.pushConfig;
    }

    /**
     * Indicates whether to retain acknowledged messages. If true, then messages are not expunged from the subscription's backlog, even if they are acknowledged, until they fall out of the `message_retention_duration` window. This must be true if you would like to [`Seek` to a timestamp] (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) in the past to replay previously-acknowledged messages.
     * 
     */
    @InputImport(name="retainAckedMessages")
      private final @Nullable Input<Boolean> retainAckedMessages;

    public Input<Boolean> getRetainAckedMessages() {
        return this.retainAckedMessages == null ? Input.empty() : this.retainAckedMessages;
    }

    /**
     * A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message.
     * 
     */
    @InputImport(name="retryPolicy")
      private final @Nullable Input<RetryPolicyArgs> retryPolicy;

    public Input<RetryPolicyArgs> getRetryPolicy() {
        return this.retryPolicy == null ? Input.empty() : this.retryPolicy;
    }

    @InputImport(name="subscriptionId", required=true)
      private final Input<String> subscriptionId;

    public Input<String> getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`. The value of this field will be `_deleted-topic_` if the topic has been deleted.
     * 
     */
    @InputImport(name="topic", required=true)
      private final Input<String> topic;

    public Input<String> getTopic() {
        return this.topic;
    }

    public SubscriptionArgs(
        @Nullable Input<Integer> ackDeadlineSeconds,
        @Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy,
        @Nullable Input<Boolean> detached,
        @Nullable Input<Boolean> enableMessageOrdering,
        @Nullable Input<ExpirationPolicyArgs> expirationPolicy,
        @Nullable Input<String> filter,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> messageRetentionDuration,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<PushConfigArgs> pushConfig,
        @Nullable Input<Boolean> retainAckedMessages,
        @Nullable Input<RetryPolicyArgs> retryPolicy,
        Input<String> subscriptionId,
        Input<String> topic) {
        this.ackDeadlineSeconds = ackDeadlineSeconds;
        this.deadLetterPolicy = deadLetterPolicy;
        this.detached = detached;
        this.enableMessageOrdering = enableMessageOrdering;
        this.expirationPolicy = expirationPolicy;
        this.filter = filter;
        this.labels = labels;
        this.messageRetentionDuration = messageRetentionDuration;
        this.name = name;
        this.project = project;
        this.pushConfig = pushConfig;
        this.retainAckedMessages = retainAckedMessages;
        this.retryPolicy = retryPolicy;
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "expected parameter 'subscriptionId' to be non-null");
        this.topic = Objects.requireNonNull(topic, "expected parameter 'topic' to be non-null");
    }

    private SubscriptionArgs() {
        this.ackDeadlineSeconds = Input.empty();
        this.deadLetterPolicy = Input.empty();
        this.detached = Input.empty();
        this.enableMessageOrdering = Input.empty();
        this.expirationPolicy = Input.empty();
        this.filter = Input.empty();
        this.labels = Input.empty();
        this.messageRetentionDuration = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.pushConfig = Input.empty();
        this.retainAckedMessages = Input.empty();
        this.retryPolicy = Input.empty();
        this.subscriptionId = Input.empty();
        this.topic = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> ackDeadlineSeconds;
        private @Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy;
        private @Nullable Input<Boolean> detached;
        private @Nullable Input<Boolean> enableMessageOrdering;
        private @Nullable Input<ExpirationPolicyArgs> expirationPolicy;
        private @Nullable Input<String> filter;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> messageRetentionDuration;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<PushConfigArgs> pushConfig;
        private @Nullable Input<Boolean> retainAckedMessages;
        private @Nullable Input<RetryPolicyArgs> retryPolicy;
        private Input<String> subscriptionId;
        private Input<String> topic;

        public Builder() {
    	      // Empty
        }

        public Builder(SubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackDeadlineSeconds = defaults.ackDeadlineSeconds;
    	      this.deadLetterPolicy = defaults.deadLetterPolicy;
    	      this.detached = defaults.detached;
    	      this.enableMessageOrdering = defaults.enableMessageOrdering;
    	      this.expirationPolicy = defaults.expirationPolicy;
    	      this.filter = defaults.filter;
    	      this.labels = defaults.labels;
    	      this.messageRetentionDuration = defaults.messageRetentionDuration;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pushConfig = defaults.pushConfig;
    	      this.retainAckedMessages = defaults.retainAckedMessages;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.topic = defaults.topic;
        }

        public Builder ackDeadlineSeconds(@Nullable Input<Integer> ackDeadlineSeconds) {
            this.ackDeadlineSeconds = ackDeadlineSeconds;
            return this;
        }

        public Builder ackDeadlineSeconds(@Nullable Integer ackDeadlineSeconds) {
            this.ackDeadlineSeconds = Input.ofNullable(ackDeadlineSeconds);
            return this;
        }

        public Builder deadLetterPolicy(@Nullable Input<DeadLetterPolicyArgs> deadLetterPolicy) {
            this.deadLetterPolicy = deadLetterPolicy;
            return this;
        }

        public Builder deadLetterPolicy(@Nullable DeadLetterPolicyArgs deadLetterPolicy) {
            this.deadLetterPolicy = Input.ofNullable(deadLetterPolicy);
            return this;
        }

        public Builder detached(@Nullable Input<Boolean> detached) {
            this.detached = detached;
            return this;
        }

        public Builder detached(@Nullable Boolean detached) {
            this.detached = Input.ofNullable(detached);
            return this;
        }

        public Builder enableMessageOrdering(@Nullable Input<Boolean> enableMessageOrdering) {
            this.enableMessageOrdering = enableMessageOrdering;
            return this;
        }

        public Builder enableMessageOrdering(@Nullable Boolean enableMessageOrdering) {
            this.enableMessageOrdering = Input.ofNullable(enableMessageOrdering);
            return this;
        }

        public Builder expirationPolicy(@Nullable Input<ExpirationPolicyArgs> expirationPolicy) {
            this.expirationPolicy = expirationPolicy;
            return this;
        }

        public Builder expirationPolicy(@Nullable ExpirationPolicyArgs expirationPolicy) {
            this.expirationPolicy = Input.ofNullable(expirationPolicy);
            return this;
        }

        public Builder filter(@Nullable Input<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder filter(@Nullable String filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder messageRetentionDuration(@Nullable Input<String> messageRetentionDuration) {
            this.messageRetentionDuration = messageRetentionDuration;
            return this;
        }

        public Builder messageRetentionDuration(@Nullable String messageRetentionDuration) {
            this.messageRetentionDuration = Input.ofNullable(messageRetentionDuration);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder pushConfig(@Nullable Input<PushConfigArgs> pushConfig) {
            this.pushConfig = pushConfig;
            return this;
        }

        public Builder pushConfig(@Nullable PushConfigArgs pushConfig) {
            this.pushConfig = Input.ofNullable(pushConfig);
            return this;
        }

        public Builder retainAckedMessages(@Nullable Input<Boolean> retainAckedMessages) {
            this.retainAckedMessages = retainAckedMessages;
            return this;
        }

        public Builder retainAckedMessages(@Nullable Boolean retainAckedMessages) {
            this.retainAckedMessages = Input.ofNullable(retainAckedMessages);
            return this;
        }

        public Builder retryPolicy(@Nullable Input<RetryPolicyArgs> retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }

        public Builder retryPolicy(@Nullable RetryPolicyArgs retryPolicy) {
            this.retryPolicy = Input.ofNullable(retryPolicy);
            return this;
        }

        public Builder subscriptionId(Input<String> subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Input.of(Objects.requireNonNull(subscriptionId));
            return this;
        }

        public Builder topic(Input<String> topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }

        public Builder topic(String topic) {
            this.topic = Input.of(Objects.requireNonNull(topic));
            return this;
        }
        public SubscriptionArgs build() {
            return new SubscriptionArgs(ackDeadlineSeconds, deadLetterPolicy, detached, enableMessageOrdering, expirationPolicy, filter, labels, messageRetentionDuration, name, project, pushConfig, retainAckedMessages, retryPolicy, subscriptionId, topic);
        }
    }
}
