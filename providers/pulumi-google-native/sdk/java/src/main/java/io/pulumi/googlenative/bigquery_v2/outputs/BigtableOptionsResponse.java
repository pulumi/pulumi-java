// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.bigquery_v2.outputs.BigtableColumnFamilyResponse;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class BigtableOptionsResponse {
    /**
     * [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
     * 
     */
    private final List<BigtableColumnFamilyResponse> columnFamilies;
    /**
     * [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
     */
    private final Boolean ignoreUnspecifiedColumnFamilies;
    /**
     * [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
     */
    private final Boolean readRowkeyAsString;

    @CustomType.Constructor
    private BigtableOptionsResponse(
        @CustomType.Parameter("columnFamilies") List<BigtableColumnFamilyResponse> columnFamilies,
        @CustomType.Parameter("ignoreUnspecifiedColumnFamilies") Boolean ignoreUnspecifiedColumnFamilies,
        @CustomType.Parameter("readRowkeyAsString") Boolean readRowkeyAsString) {
        this.columnFamilies = columnFamilies;
        this.ignoreUnspecifiedColumnFamilies = ignoreUnspecifiedColumnFamilies;
        this.readRowkeyAsString = readRowkeyAsString;
    }

    /**
     * [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
     * 
    */
    public List<BigtableColumnFamilyResponse> getColumnFamilies() {
        return this.columnFamilies;
    }
    /**
     * [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
    */
    public Boolean getIgnoreUnspecifiedColumnFamilies() {
        return this.ignoreUnspecifiedColumnFamilies;
    }
    /**
     * [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
    */
    public Boolean getReadRowkeyAsString() {
        return this.readRowkeyAsString;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigtableOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<BigtableColumnFamilyResponse> columnFamilies;
        private Boolean ignoreUnspecifiedColumnFamilies;
        private Boolean readRowkeyAsString;

        public Builder() {
    	      // Empty
        }

        public Builder(BigtableOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnFamilies = defaults.columnFamilies;
    	      this.ignoreUnspecifiedColumnFamilies = defaults.ignoreUnspecifiedColumnFamilies;
    	      this.readRowkeyAsString = defaults.readRowkeyAsString;
        }

        public Builder columnFamilies(List<BigtableColumnFamilyResponse> columnFamilies) {
            this.columnFamilies = Objects.requireNonNull(columnFamilies);
            return this;
        }

        public Builder ignoreUnspecifiedColumnFamilies(Boolean ignoreUnspecifiedColumnFamilies) {
            this.ignoreUnspecifiedColumnFamilies = Objects.requireNonNull(ignoreUnspecifiedColumnFamilies);
            return this;
        }

        public Builder readRowkeyAsString(Boolean readRowkeyAsString) {
            this.readRowkeyAsString = Objects.requireNonNull(readRowkeyAsString);
            return this;
        }
        public BigtableOptionsResponse build() {
            return new BigtableOptionsResponse(columnFamilies, ignoreUnspecifiedColumnFamilies, readRowkeyAsString);
        }
    }
}
