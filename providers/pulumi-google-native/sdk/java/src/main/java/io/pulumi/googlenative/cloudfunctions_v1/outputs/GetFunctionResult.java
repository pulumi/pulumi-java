// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudfunctions_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.EventTriggerResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.HttpsTriggerResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.SecretEnvVarResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.SecretVolumeResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.SourceRepositoryResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetFunctionResult {
    private final Integer availableMemoryMb;
    private final Map<String,String> buildEnvironmentVariables;
    private final String buildId;
    private final String buildName;
    private final String buildWorkerPool;
    private final String description;
    private final String dockerRepository;
    private final String entryPoint;
    private final Map<String,String> environmentVariables;
    private final EventTriggerResponse eventTrigger;
    private final HttpsTriggerResponse httpsTrigger;
    private final String ingressSettings;
    private final String kmsKeyName;
    private final Map<String,String> labels;
    private final Integer maxInstances;
    private final Integer minInstances;
    private final String name;
    private final String network;
    private final String runtime;
    private final List<SecretEnvVarResponse> secretEnvironmentVariables;
    private final List<SecretVolumeResponse> secretVolumes;
    private final String serviceAccountEmail;
    private final String sourceArchiveUrl;
    private final SourceRepositoryResponse sourceRepository;
    private final String sourceToken;
    private final String sourceUploadUrl;
    private final String status;
    private final String timeout;
    private final String updateTime;
    private final String versionId;
    private final String vpcConnector;
    private final String vpcConnectorEgressSettings;

    @OutputCustomType.Constructor({"availableMemoryMb","buildEnvironmentVariables","buildId","buildName","buildWorkerPool","description","dockerRepository","entryPoint","environmentVariables","eventTrigger","httpsTrigger","ingressSettings","kmsKeyName","labels","maxInstances","minInstances","name","network","runtime","secretEnvironmentVariables","secretVolumes","serviceAccountEmail","sourceArchiveUrl","sourceRepository","sourceToken","sourceUploadUrl","status","timeout","updateTime","versionId","vpcConnector","vpcConnectorEgressSettings"})
    private GetFunctionResult(
        Integer availableMemoryMb,
        Map<String,String> buildEnvironmentVariables,
        String buildId,
        String buildName,
        String buildWorkerPool,
        String description,
        String dockerRepository,
        String entryPoint,
        Map<String,String> environmentVariables,
        EventTriggerResponse eventTrigger,
        HttpsTriggerResponse httpsTrigger,
        String ingressSettings,
        String kmsKeyName,
        Map<String,String> labels,
        Integer maxInstances,
        Integer minInstances,
        String name,
        String network,
        String runtime,
        List<SecretEnvVarResponse> secretEnvironmentVariables,
        List<SecretVolumeResponse> secretVolumes,
        String serviceAccountEmail,
        String sourceArchiveUrl,
        SourceRepositoryResponse sourceRepository,
        String sourceToken,
        String sourceUploadUrl,
        String status,
        String timeout,
        String updateTime,
        String versionId,
        String vpcConnector,
        String vpcConnectorEgressSettings) {
        this.availableMemoryMb = Objects.requireNonNull(availableMemoryMb);
        this.buildEnvironmentVariables = Objects.requireNonNull(buildEnvironmentVariables);
        this.buildId = Objects.requireNonNull(buildId);
        this.buildName = Objects.requireNonNull(buildName);
        this.buildWorkerPool = Objects.requireNonNull(buildWorkerPool);
        this.description = Objects.requireNonNull(description);
        this.dockerRepository = Objects.requireNonNull(dockerRepository);
        this.entryPoint = Objects.requireNonNull(entryPoint);
        this.environmentVariables = Objects.requireNonNull(environmentVariables);
        this.eventTrigger = Objects.requireNonNull(eventTrigger);
        this.httpsTrigger = Objects.requireNonNull(httpsTrigger);
        this.ingressSettings = Objects.requireNonNull(ingressSettings);
        this.kmsKeyName = Objects.requireNonNull(kmsKeyName);
        this.labels = Objects.requireNonNull(labels);
        this.maxInstances = Objects.requireNonNull(maxInstances);
        this.minInstances = Objects.requireNonNull(minInstances);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.runtime = Objects.requireNonNull(runtime);
        this.secretEnvironmentVariables = Objects.requireNonNull(secretEnvironmentVariables);
        this.secretVolumes = Objects.requireNonNull(secretVolumes);
        this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
        this.sourceArchiveUrl = Objects.requireNonNull(sourceArchiveUrl);
        this.sourceRepository = Objects.requireNonNull(sourceRepository);
        this.sourceToken = Objects.requireNonNull(sourceToken);
        this.sourceUploadUrl = Objects.requireNonNull(sourceUploadUrl);
        this.status = Objects.requireNonNull(status);
        this.timeout = Objects.requireNonNull(timeout);
        this.updateTime = Objects.requireNonNull(updateTime);
        this.versionId = Objects.requireNonNull(versionId);
        this.vpcConnector = Objects.requireNonNull(vpcConnector);
        this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
    }

    public Integer getAvailableMemoryMb() {
        return this.availableMemoryMb;
    }
    public Map<String,String> getBuildEnvironmentVariables() {
        return this.buildEnvironmentVariables;
    }
    public String getBuildId() {
        return this.buildId;
    }
    public String getBuildName() {
        return this.buildName;
    }
    public String getBuildWorkerPool() {
        return this.buildWorkerPool;
    }
    public String getDescription() {
        return this.description;
    }
    public String getDockerRepository() {
        return this.dockerRepository;
    }
    public String getEntryPoint() {
        return this.entryPoint;
    }
    public Map<String,String> getEnvironmentVariables() {
        return this.environmentVariables;
    }
    public EventTriggerResponse getEventTrigger() {
        return this.eventTrigger;
    }
    public HttpsTriggerResponse getHttpsTrigger() {
        return this.httpsTrigger;
    }
    public String getIngressSettings() {
        return this.ingressSettings;
    }
    public String getKmsKeyName() {
        return this.kmsKeyName;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public Integer getMaxInstances() {
        return this.maxInstances;
    }
    public Integer getMinInstances() {
        return this.minInstances;
    }
    public String getName() {
        return this.name;
    }
    public String getNetwork() {
        return this.network;
    }
    public String getRuntime() {
        return this.runtime;
    }
    public List<SecretEnvVarResponse> getSecretEnvironmentVariables() {
        return this.secretEnvironmentVariables;
    }
    public List<SecretVolumeResponse> getSecretVolumes() {
        return this.secretVolumes;
    }
    public String getServiceAccountEmail() {
        return this.serviceAccountEmail;
    }
    public String getSourceArchiveUrl() {
        return this.sourceArchiveUrl;
    }
    public SourceRepositoryResponse getSourceRepository() {
        return this.sourceRepository;
    }
    public String getSourceToken() {
        return this.sourceToken;
    }
    public String getSourceUploadUrl() {
        return this.sourceUploadUrl;
    }
    public String getStatus() {
        return this.status;
    }
    public String getTimeout() {
        return this.timeout;
    }
    public String getUpdateTime() {
        return this.updateTime;
    }
    public String getVersionId() {
        return this.versionId;
    }
    public String getVpcConnector() {
        return this.vpcConnector;
    }
    public String getVpcConnectorEgressSettings() {
        return this.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer availableMemoryMb;
        private Map<String,String> buildEnvironmentVariables;
        private String buildId;
        private String buildName;
        private String buildWorkerPool;
        private String description;
        private String dockerRepository;
        private String entryPoint;
        private Map<String,String> environmentVariables;
        private EventTriggerResponse eventTrigger;
        private HttpsTriggerResponse httpsTrigger;
        private String ingressSettings;
        private String kmsKeyName;
        private Map<String,String> labels;
        private Integer maxInstances;
        private Integer minInstances;
        private String name;
        private String network;
        private String runtime;
        private List<SecretEnvVarResponse> secretEnvironmentVariables;
        private List<SecretVolumeResponse> secretVolumes;
        private String serviceAccountEmail;
        private String sourceArchiveUrl;
        private SourceRepositoryResponse sourceRepository;
        private String sourceToken;
        private String sourceUploadUrl;
        private String status;
        private String timeout;
        private String updateTime;
        private String versionId;
        private String vpcConnector;
        private String vpcConnectorEgressSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableMemoryMb = defaults.availableMemoryMb;
    	      this.buildEnvironmentVariables = defaults.buildEnvironmentVariables;
    	      this.buildId = defaults.buildId;
    	      this.buildName = defaults.buildName;
    	      this.buildWorkerPool = defaults.buildWorkerPool;
    	      this.description = defaults.description;
    	      this.dockerRepository = defaults.dockerRepository;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.eventTrigger = defaults.eventTrigger;
    	      this.httpsTrigger = defaults.httpsTrigger;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.labels = defaults.labels;
    	      this.maxInstances = defaults.maxInstances;
    	      this.minInstances = defaults.minInstances;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.runtime = defaults.runtime;
    	      this.secretEnvironmentVariables = defaults.secretEnvironmentVariables;
    	      this.secretVolumes = defaults.secretVolumes;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.sourceArchiveUrl = defaults.sourceArchiveUrl;
    	      this.sourceRepository = defaults.sourceRepository;
    	      this.sourceToken = defaults.sourceToken;
    	      this.sourceUploadUrl = defaults.sourceUploadUrl;
    	      this.status = defaults.status;
    	      this.timeout = defaults.timeout;
    	      this.updateTime = defaults.updateTime;
    	      this.versionId = defaults.versionId;
    	      this.vpcConnector = defaults.vpcConnector;
    	      this.vpcConnectorEgressSettings = defaults.vpcConnectorEgressSettings;
        }

        public Builder setAvailableMemoryMb(Integer availableMemoryMb) {
            this.availableMemoryMb = Objects.requireNonNull(availableMemoryMb);
            return this;
        }

        public Builder setBuildEnvironmentVariables(Map<String,String> buildEnvironmentVariables) {
            this.buildEnvironmentVariables = Objects.requireNonNull(buildEnvironmentVariables);
            return this;
        }

        public Builder setBuildId(String buildId) {
            this.buildId = Objects.requireNonNull(buildId);
            return this;
        }

        public Builder setBuildName(String buildName) {
            this.buildName = Objects.requireNonNull(buildName);
            return this;
        }

        public Builder setBuildWorkerPool(String buildWorkerPool) {
            this.buildWorkerPool = Objects.requireNonNull(buildWorkerPool);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDockerRepository(String dockerRepository) {
            this.dockerRepository = Objects.requireNonNull(dockerRepository);
            return this;
        }

        public Builder setEntryPoint(String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint);
            return this;
        }

        public Builder setEnvironmentVariables(Map<String,String> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }

        public Builder setEventTrigger(EventTriggerResponse eventTrigger) {
            this.eventTrigger = Objects.requireNonNull(eventTrigger);
            return this;
        }

        public Builder setHttpsTrigger(HttpsTriggerResponse httpsTrigger) {
            this.httpsTrigger = Objects.requireNonNull(httpsTrigger);
            return this;
        }

        public Builder setIngressSettings(String ingressSettings) {
            this.ingressSettings = Objects.requireNonNull(ingressSettings);
            return this;
        }

        public Builder setKmsKeyName(String kmsKeyName) {
            this.kmsKeyName = Objects.requireNonNull(kmsKeyName);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMaxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }

        public Builder setMinInstances(Integer minInstances) {
            this.minInstances = Objects.requireNonNull(minInstances);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setRuntime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }

        public Builder setSecretEnvironmentVariables(List<SecretEnvVarResponse> secretEnvironmentVariables) {
            this.secretEnvironmentVariables = Objects.requireNonNull(secretEnvironmentVariables);
            return this;
        }

        public Builder setSecretVolumes(List<SecretVolumeResponse> secretVolumes) {
            this.secretVolumes = Objects.requireNonNull(secretVolumes);
            return this;
        }

        public Builder setServiceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }

        public Builder setSourceArchiveUrl(String sourceArchiveUrl) {
            this.sourceArchiveUrl = Objects.requireNonNull(sourceArchiveUrl);
            return this;
        }

        public Builder setSourceRepository(SourceRepositoryResponse sourceRepository) {
            this.sourceRepository = Objects.requireNonNull(sourceRepository);
            return this;
        }

        public Builder setSourceToken(String sourceToken) {
            this.sourceToken = Objects.requireNonNull(sourceToken);
            return this;
        }

        public Builder setSourceUploadUrl(String sourceUploadUrl) {
            this.sourceUploadUrl = Objects.requireNonNull(sourceUploadUrl);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTimeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }

        public Builder setVersionId(String versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }

        public Builder setVpcConnector(String vpcConnector) {
            this.vpcConnector = Objects.requireNonNull(vpcConnector);
            return this;
        }

        public Builder setVpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
            return this;
        }

        public GetFunctionResult build() {
            return new GetFunctionResult(availableMemoryMb, buildEnvironmentVariables, buildId, buildName, buildWorkerPool, description, dockerRepository, entryPoint, environmentVariables, eventTrigger, httpsTrigger, ingressSettings, kmsKeyName, labels, maxInstances, minInstances, name, network, runtime, secretEnvironmentVariables, secretVolumes, serviceAccountEmail, sourceArchiveUrl, sourceRepository, sourceToken, sourceUploadUrl, status, timeout, updateTime, versionId, vpcConnector, vpcConnectorEgressSettings);
        }
    }
}
