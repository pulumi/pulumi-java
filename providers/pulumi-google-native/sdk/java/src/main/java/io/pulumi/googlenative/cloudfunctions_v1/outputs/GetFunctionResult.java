// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudfunctions_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.EventTriggerResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.HttpsTriggerResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.SecretEnvVarResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.SecretVolumeResponse;
import io.pulumi.googlenative.cloudfunctions_v1.outputs.SourceRepositoryResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetFunctionResult {
    /**
     * The amount of memory in MB available for a function. Defaults to 256MB.
     * 
     */
    private final Integer availableMemoryMb;
    /**
     * Build environment variables that shall be available during build time.
     * 
     */
    private final Map<String,String> buildEnvironmentVariables;
    /**
     * The Cloud Build ID of the latest successful deployment of the function.
     * 
     */
    private final String buildId;
    /**
     * The Cloud Build Name of the function deployment. `projects//locations//builds/`.
     * 
     */
    private final String buildName;
    /**
     * Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
     * 
     */
    private final String buildWorkerPool;
    /**
     * User-provided description of a function.
     * 
     */
    private final String description;
    /**
     * User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.
     * 
     */
    private final String dockerRepository;
    /**
     * The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named "function". For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    private final String entryPoint;
    /**
     * Environment variables that shall be available during function execution.
     * 
     */
    private final Map<String,String> environmentVariables;
    /**
     * A source that fires events in response to a condition in another service.
     * 
     */
    private final EventTriggerResponse eventTrigger;
    /**
     * An HTTPS endpoint type of source that can be triggered via URL.
     * 
     */
    private final HttpsTriggerResponse httpsTrigger;
    /**
     * The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    private final String ingressSettings;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
     * 
     */
    private final String kmsKeyName;
    /**
     * Labels associated with this Cloud Function.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    private final Integer maxInstances;
    /**
     * A lower bound for the number function instances that may coexist at a given time.
     * 
     */
    private final Integer minInstances;
    /**
     * A user-defined name of the function. Function names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`
     * 
     */
    private final String name;
    /**
     * The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where `{project}` is a project id where the network is defined, and `{network}` is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    private final String network;
    /**
     * The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    private final String runtime;
    /**
     * Secret environment variables configuration.
     * 
     */
    private final List<SecretEnvVarResponse> secretEnvironmentVariables;
    /**
     * Secret volumes configuration.
     * 
     */
    private final List<SecretVolumeResponse> secretVolumes;
    /**
     * The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
     * 
     */
    private final String serviceAccountEmail;
    /**
     * The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
     * 
     */
    private final String sourceArchiveUrl;
    /**
     * **Beta Feature** The source repository where a function is hosted.
     * 
     */
    private final SourceRepositoryResponse sourceRepository;
    /**
     * Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
     * 
     */
    private final String sourceToken;
    /**
     * The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
     * 
     */
    private final String sourceUploadUrl;
    /**
     * Status of the function deployment.
     * 
     */
    private final String status;
    /**
     * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    private final String timeout;
    /**
     * The last update timestamp of a Cloud Function.
     * 
     */
    private final String updateTime;
    /**
     * The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
     * 
     */
    private final String versionId;
    /**
     * The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    private final String vpcConnector;
    /**
     * The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    private final String vpcConnectorEgressSettings;

    @OutputCustomType.Constructor({"availableMemoryMb","buildEnvironmentVariables","buildId","buildName","buildWorkerPool","description","dockerRepository","entryPoint","environmentVariables","eventTrigger","httpsTrigger","ingressSettings","kmsKeyName","labels","maxInstances","minInstances","name","network","runtime","secretEnvironmentVariables","secretVolumes","serviceAccountEmail","sourceArchiveUrl","sourceRepository","sourceToken","sourceUploadUrl","status","timeout","updateTime","versionId","vpcConnector","vpcConnectorEgressSettings"})
    private GetFunctionResult(
        Integer availableMemoryMb,
        Map<String,String> buildEnvironmentVariables,
        String buildId,
        String buildName,
        String buildWorkerPool,
        String description,
        String dockerRepository,
        String entryPoint,
        Map<String,String> environmentVariables,
        EventTriggerResponse eventTrigger,
        HttpsTriggerResponse httpsTrigger,
        String ingressSettings,
        String kmsKeyName,
        Map<String,String> labels,
        Integer maxInstances,
        Integer minInstances,
        String name,
        String network,
        String runtime,
        List<SecretEnvVarResponse> secretEnvironmentVariables,
        List<SecretVolumeResponse> secretVolumes,
        String serviceAccountEmail,
        String sourceArchiveUrl,
        SourceRepositoryResponse sourceRepository,
        String sourceToken,
        String sourceUploadUrl,
        String status,
        String timeout,
        String updateTime,
        String versionId,
        String vpcConnector,
        String vpcConnectorEgressSettings) {
        this.availableMemoryMb = Objects.requireNonNull(availableMemoryMb);
        this.buildEnvironmentVariables = Objects.requireNonNull(buildEnvironmentVariables);
        this.buildId = Objects.requireNonNull(buildId);
        this.buildName = Objects.requireNonNull(buildName);
        this.buildWorkerPool = Objects.requireNonNull(buildWorkerPool);
        this.description = Objects.requireNonNull(description);
        this.dockerRepository = Objects.requireNonNull(dockerRepository);
        this.entryPoint = Objects.requireNonNull(entryPoint);
        this.environmentVariables = Objects.requireNonNull(environmentVariables);
        this.eventTrigger = Objects.requireNonNull(eventTrigger);
        this.httpsTrigger = Objects.requireNonNull(httpsTrigger);
        this.ingressSettings = Objects.requireNonNull(ingressSettings);
        this.kmsKeyName = Objects.requireNonNull(kmsKeyName);
        this.labels = Objects.requireNonNull(labels);
        this.maxInstances = Objects.requireNonNull(maxInstances);
        this.minInstances = Objects.requireNonNull(minInstances);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.runtime = Objects.requireNonNull(runtime);
        this.secretEnvironmentVariables = Objects.requireNonNull(secretEnvironmentVariables);
        this.secretVolumes = Objects.requireNonNull(secretVolumes);
        this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
        this.sourceArchiveUrl = Objects.requireNonNull(sourceArchiveUrl);
        this.sourceRepository = Objects.requireNonNull(sourceRepository);
        this.sourceToken = Objects.requireNonNull(sourceToken);
        this.sourceUploadUrl = Objects.requireNonNull(sourceUploadUrl);
        this.status = Objects.requireNonNull(status);
        this.timeout = Objects.requireNonNull(timeout);
        this.updateTime = Objects.requireNonNull(updateTime);
        this.versionId = Objects.requireNonNull(versionId);
        this.vpcConnector = Objects.requireNonNull(vpcConnector);
        this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
    }

    /**
     * The amount of memory in MB available for a function. Defaults to 256MB.
     * 
     */
    public Integer getAvailableMemoryMb() {
        return this.availableMemoryMb;
    }
    /**
     * Build environment variables that shall be available during build time.
     * 
     */
    public Map<String,String> getBuildEnvironmentVariables() {
        return this.buildEnvironmentVariables;
    }
    /**
     * The Cloud Build ID of the latest successful deployment of the function.
     * 
     */
    public String getBuildId() {
        return this.buildId;
    }
    /**
     * The Cloud Build Name of the function deployment. `projects//locations//builds/`.
     * 
     */
    public String getBuildName() {
        return this.buildName;
    }
    /**
     * Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
     * 
     */
    public String getBuildWorkerPool() {
        return this.buildWorkerPool;
    }
    /**
     * User-provided description of a function.
     * 
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.
     * 
     */
    public String getDockerRepository() {
        return this.dockerRepository;
    }
    /**
     * The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named "function". For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    public String getEntryPoint() {
        return this.entryPoint;
    }
    /**
     * Environment variables that shall be available during function execution.
     * 
     */
    public Map<String,String> getEnvironmentVariables() {
        return this.environmentVariables;
    }
    /**
     * A source that fires events in response to a condition in another service.
     * 
     */
    public EventTriggerResponse getEventTrigger() {
        return this.eventTrigger;
    }
    /**
     * An HTTPS endpoint type of source that can be triggered via URL.
     * 
     */
    public HttpsTriggerResponse getHttpsTrigger() {
        return this.httpsTrigger;
    }
    /**
     * The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    public String getIngressSettings() {
        return this.ingressSettings;
    }
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
     * 
     */
    public String getKmsKeyName() {
        return this.kmsKeyName;
    }
    /**
     * Labels associated with this Cloud Function.
     * 
     */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    public Integer getMaxInstances() {
        return this.maxInstances;
    }
    /**
     * A lower bound for the number function instances that may coexist at a given time.
     * 
     */
    public Integer getMinInstances() {
        return this.minInstances;
    }
    /**
     * A user-defined name of the function. Function names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where `{project}` is a project id where the network is defined, and `{network}` is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    public String getNetwork() {
        return this.network;
    }
    /**
     * The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    public String getRuntime() {
        return this.runtime;
    }
    /**
     * Secret environment variables configuration.
     * 
     */
    public List<SecretEnvVarResponse> getSecretEnvironmentVariables() {
        return this.secretEnvironmentVariables;
    }
    /**
     * Secret volumes configuration.
     * 
     */
    public List<SecretVolumeResponse> getSecretVolumes() {
        return this.secretVolumes;
    }
    /**
     * The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
     * 
     */
    public String getServiceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
     * 
     */
    public String getSourceArchiveUrl() {
        return this.sourceArchiveUrl;
    }
    /**
     * **Beta Feature** The source repository where a function is hosted.
     * 
     */
    public SourceRepositoryResponse getSourceRepository() {
        return this.sourceRepository;
    }
    /**
     * Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
     * 
     */
    public String getSourceToken() {
        return this.sourceToken;
    }
    /**
     * The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
     * 
     */
    public String getSourceUploadUrl() {
        return this.sourceUploadUrl;
    }
    /**
     * Status of the function deployment.
     * 
     */
    public String getStatus() {
        return this.status;
    }
    /**
     * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    public String getTimeout() {
        return this.timeout;
    }
    /**
     * The last update timestamp of a Cloud Function.
     * 
     */
    public String getUpdateTime() {
        return this.updateTime;
    }
    /**
     * The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
     * 
     */
    public String getVersionId() {
        return this.versionId;
    }
    /**
     * The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    public String getVpcConnector() {
        return this.vpcConnector;
    }
    /**
     * The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    public String getVpcConnectorEgressSettings() {
        return this.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer availableMemoryMb;
        private Map<String,String> buildEnvironmentVariables;
        private String buildId;
        private String buildName;
        private String buildWorkerPool;
        private String description;
        private String dockerRepository;
        private String entryPoint;
        private Map<String,String> environmentVariables;
        private EventTriggerResponse eventTrigger;
        private HttpsTriggerResponse httpsTrigger;
        private String ingressSettings;
        private String kmsKeyName;
        private Map<String,String> labels;
        private Integer maxInstances;
        private Integer minInstances;
        private String name;
        private String network;
        private String runtime;
        private List<SecretEnvVarResponse> secretEnvironmentVariables;
        private List<SecretVolumeResponse> secretVolumes;
        private String serviceAccountEmail;
        private String sourceArchiveUrl;
        private SourceRepositoryResponse sourceRepository;
        private String sourceToken;
        private String sourceUploadUrl;
        private String status;
        private String timeout;
        private String updateTime;
        private String versionId;
        private String vpcConnector;
        private String vpcConnectorEgressSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableMemoryMb = defaults.availableMemoryMb;
    	      this.buildEnvironmentVariables = defaults.buildEnvironmentVariables;
    	      this.buildId = defaults.buildId;
    	      this.buildName = defaults.buildName;
    	      this.buildWorkerPool = defaults.buildWorkerPool;
    	      this.description = defaults.description;
    	      this.dockerRepository = defaults.dockerRepository;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.eventTrigger = defaults.eventTrigger;
    	      this.httpsTrigger = defaults.httpsTrigger;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.labels = defaults.labels;
    	      this.maxInstances = defaults.maxInstances;
    	      this.minInstances = defaults.minInstances;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.runtime = defaults.runtime;
    	      this.secretEnvironmentVariables = defaults.secretEnvironmentVariables;
    	      this.secretVolumes = defaults.secretVolumes;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.sourceArchiveUrl = defaults.sourceArchiveUrl;
    	      this.sourceRepository = defaults.sourceRepository;
    	      this.sourceToken = defaults.sourceToken;
    	      this.sourceUploadUrl = defaults.sourceUploadUrl;
    	      this.status = defaults.status;
    	      this.timeout = defaults.timeout;
    	      this.updateTime = defaults.updateTime;
    	      this.versionId = defaults.versionId;
    	      this.vpcConnector = defaults.vpcConnector;
    	      this.vpcConnectorEgressSettings = defaults.vpcConnectorEgressSettings;
        }

        public Builder setAvailableMemoryMb(Integer availableMemoryMb) {
            this.availableMemoryMb = Objects.requireNonNull(availableMemoryMb);
            return this;
        }

        public Builder setBuildEnvironmentVariables(Map<String,String> buildEnvironmentVariables) {
            this.buildEnvironmentVariables = Objects.requireNonNull(buildEnvironmentVariables);
            return this;
        }

        public Builder setBuildId(String buildId) {
            this.buildId = Objects.requireNonNull(buildId);
            return this;
        }

        public Builder setBuildName(String buildName) {
            this.buildName = Objects.requireNonNull(buildName);
            return this;
        }

        public Builder setBuildWorkerPool(String buildWorkerPool) {
            this.buildWorkerPool = Objects.requireNonNull(buildWorkerPool);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDockerRepository(String dockerRepository) {
            this.dockerRepository = Objects.requireNonNull(dockerRepository);
            return this;
        }

        public Builder setEntryPoint(String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint);
            return this;
        }

        public Builder setEnvironmentVariables(Map<String,String> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }

        public Builder setEventTrigger(EventTriggerResponse eventTrigger) {
            this.eventTrigger = Objects.requireNonNull(eventTrigger);
            return this;
        }

        public Builder setHttpsTrigger(HttpsTriggerResponse httpsTrigger) {
            this.httpsTrigger = Objects.requireNonNull(httpsTrigger);
            return this;
        }

        public Builder setIngressSettings(String ingressSettings) {
            this.ingressSettings = Objects.requireNonNull(ingressSettings);
            return this;
        }

        public Builder setKmsKeyName(String kmsKeyName) {
            this.kmsKeyName = Objects.requireNonNull(kmsKeyName);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMaxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }

        public Builder setMinInstances(Integer minInstances) {
            this.minInstances = Objects.requireNonNull(minInstances);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setRuntime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }

        public Builder setSecretEnvironmentVariables(List<SecretEnvVarResponse> secretEnvironmentVariables) {
            this.secretEnvironmentVariables = Objects.requireNonNull(secretEnvironmentVariables);
            return this;
        }

        public Builder setSecretVolumes(List<SecretVolumeResponse> secretVolumes) {
            this.secretVolumes = Objects.requireNonNull(secretVolumes);
            return this;
        }

        public Builder setServiceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }

        public Builder setSourceArchiveUrl(String sourceArchiveUrl) {
            this.sourceArchiveUrl = Objects.requireNonNull(sourceArchiveUrl);
            return this;
        }

        public Builder setSourceRepository(SourceRepositoryResponse sourceRepository) {
            this.sourceRepository = Objects.requireNonNull(sourceRepository);
            return this;
        }

        public Builder setSourceToken(String sourceToken) {
            this.sourceToken = Objects.requireNonNull(sourceToken);
            return this;
        }

        public Builder setSourceUploadUrl(String sourceUploadUrl) {
            this.sourceUploadUrl = Objects.requireNonNull(sourceUploadUrl);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTimeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }

        public Builder setVersionId(String versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }

        public Builder setVpcConnector(String vpcConnector) {
            this.vpcConnector = Objects.requireNonNull(vpcConnector);
            return this;
        }

        public Builder setVpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
            return this;
        }
        public GetFunctionResult build() {
            return new GetFunctionResult(availableMemoryMb, buildEnvironmentVariables, buildId, buildName, buildWorkerPool, description, dockerRepository, entryPoint, environmentVariables, eventTrigger, httpsTrigger, ingressSettings, kmsKeyName, labels, maxInstances, minInstances, name, network, runtime, secretEnvironmentVariables, secretVolumes, serviceAccountEmail, sourceArchiveUrl, sourceRepository, sourceToken, sourceUploadUrl, status, timeout, updateTime, versionId, vpcConnector, vpcConnectorEgressSettings);
        }
    }
}
