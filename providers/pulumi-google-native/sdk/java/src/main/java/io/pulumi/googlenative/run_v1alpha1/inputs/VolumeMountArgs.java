// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * VolumeMount describes a mounting of a Volume within a container.
 * 
 */
public final class VolumeMountArgs extends io.pulumi.resources.ResourceArgs {

    public static final VolumeMountArgs Empty = new VolumeMountArgs();

    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     * 
     */
    @InputImport(name="mountPath")
      private final @Nullable Output<String> mountPath;

    public Output<String> getMountPath() {
        return this.mountPath == null ? Output.empty() : this.mountPath;
    }

    /**
     * The name of the volume. There must be a corresponding Volume with the same name.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * (Optional) Only true is accepted. Defaults to true.
     * 
     */
    @InputImport(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> getReadOnly() {
        return this.readOnly == null ? Output.empty() : this.readOnly;
    }

    /**
     * (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     * 
     */
    @InputImport(name="subPath")
      private final @Nullable Output<String> subPath;

    public Output<String> getSubPath() {
        return this.subPath == null ? Output.empty() : this.subPath;
    }

    public VolumeMountArgs(
        @Nullable Output<String> mountPath,
        @Nullable Output<String> name,
        @Nullable Output<Boolean> readOnly,
        @Nullable Output<String> subPath) {
        this.mountPath = mountPath;
        this.name = name;
        this.readOnly = readOnly;
        this.subPath = subPath;
    }

    private VolumeMountArgs() {
        this.mountPath = Output.empty();
        this.name = Output.empty();
        this.readOnly = Output.empty();
        this.subPath = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> mountPath;
        private @Nullable Output<String> name;
        private @Nullable Output<Boolean> readOnly;
        private @Nullable Output<String> subPath;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeMountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountPath = defaults.mountPath;
    	      this.name = defaults.name;
    	      this.readOnly = defaults.readOnly;
    	      this.subPath = defaults.subPath;
        }

        public Builder mountPath(@Nullable Output<String> mountPath) {
            this.mountPath = mountPath;
            return this;
        }

        public Builder mountPath(@Nullable String mountPath) {
            this.mountPath = Output.ofNullable(mountPath);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Output.ofNullable(readOnly);
            return this;
        }

        public Builder subPath(@Nullable Output<String> subPath) {
            this.subPath = subPath;
            return this;
        }

        public Builder subPath(@Nullable String subPath) {
            this.subPath = Output.ofNullable(subPath);
            return this;
        }
        public VolumeMountArgs build() {
            return new VolumeMountArgs(mountPath, name, readOnly, subPath);
        }
    }
}
