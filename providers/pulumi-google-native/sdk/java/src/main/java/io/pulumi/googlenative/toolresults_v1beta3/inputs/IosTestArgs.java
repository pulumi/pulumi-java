// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.DurationArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.IosAppInfoArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.IosRoboTestArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.IosTestLoopArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.IosXcTestArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A iOS mobile test specification
 * 
 */
public final class IosTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final IosTestArgs Empty = new IosTestArgs();

    /**
     * Information about the application under test.
     * 
     */
    @InputImport(name="iosAppInfo")
      private final @Nullable Input<IosAppInfoArgs> iosAppInfo;

    public Input<IosAppInfoArgs> getIosAppInfo() {
        return this.iosAppInfo == null ? Input.empty() : this.iosAppInfo;
    }

    /**
     * An iOS Robo test.
     * 
     */
    @InputImport(name="iosRoboTest")
      private final @Nullable Input<IosRoboTestArgs> iosRoboTest;

    public Input<IosRoboTestArgs> getIosRoboTest() {
        return this.iosRoboTest == null ? Input.empty() : this.iosRoboTest;
    }

    /**
     * An iOS test loop.
     * 
     */
    @InputImport(name="iosTestLoop")
      private final @Nullable Input<IosTestLoopArgs> iosTestLoop;

    public Input<IosTestLoopArgs> getIosTestLoop() {
        return this.iosTestLoop == null ? Input.empty() : this.iosTestLoop;
    }

    /**
     * An iOS XCTest.
     * 
     */
    @InputImport(name="iosXcTest")
      private final @Nullable Input<IosXcTestArgs> iosXcTest;

    public Input<IosXcTestArgs> getIosXcTest() {
        return this.iosXcTest == null ? Input.empty() : this.iosXcTest;
    }

    /**
     * Max time a test is allowed to run before it is automatically cancelled.
     * 
     */
    @InputImport(name="testTimeout")
      private final @Nullable Input<DurationArgs> testTimeout;

    public Input<DurationArgs> getTestTimeout() {
        return this.testTimeout == null ? Input.empty() : this.testTimeout;
    }

    public IosTestArgs(
        @Nullable Input<IosAppInfoArgs> iosAppInfo,
        @Nullable Input<IosRoboTestArgs> iosRoboTest,
        @Nullable Input<IosTestLoopArgs> iosTestLoop,
        @Nullable Input<IosXcTestArgs> iosXcTest,
        @Nullable Input<DurationArgs> testTimeout) {
        this.iosAppInfo = iosAppInfo;
        this.iosRoboTest = iosRoboTest;
        this.iosTestLoop = iosTestLoop;
        this.iosXcTest = iosXcTest;
        this.testTimeout = testTimeout;
    }

    private IosTestArgs() {
        this.iosAppInfo = Input.empty();
        this.iosRoboTest = Input.empty();
        this.iosTestLoop = Input.empty();
        this.iosXcTest = Input.empty();
        this.testTimeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IosTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<IosAppInfoArgs> iosAppInfo;
        private @Nullable Input<IosRoboTestArgs> iosRoboTest;
        private @Nullable Input<IosTestLoopArgs> iosTestLoop;
        private @Nullable Input<IosXcTestArgs> iosXcTest;
        private @Nullable Input<DurationArgs> testTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(IosTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.iosAppInfo = defaults.iosAppInfo;
    	      this.iosRoboTest = defaults.iosRoboTest;
    	      this.iosTestLoop = defaults.iosTestLoop;
    	      this.iosXcTest = defaults.iosXcTest;
    	      this.testTimeout = defaults.testTimeout;
        }

        public Builder iosAppInfo(@Nullable Input<IosAppInfoArgs> iosAppInfo) {
            this.iosAppInfo = iosAppInfo;
            return this;
        }

        public Builder iosAppInfo(@Nullable IosAppInfoArgs iosAppInfo) {
            this.iosAppInfo = Input.ofNullable(iosAppInfo);
            return this;
        }

        public Builder iosRoboTest(@Nullable Input<IosRoboTestArgs> iosRoboTest) {
            this.iosRoboTest = iosRoboTest;
            return this;
        }

        public Builder iosRoboTest(@Nullable IosRoboTestArgs iosRoboTest) {
            this.iosRoboTest = Input.ofNullable(iosRoboTest);
            return this;
        }

        public Builder iosTestLoop(@Nullable Input<IosTestLoopArgs> iosTestLoop) {
            this.iosTestLoop = iosTestLoop;
            return this;
        }

        public Builder iosTestLoop(@Nullable IosTestLoopArgs iosTestLoop) {
            this.iosTestLoop = Input.ofNullable(iosTestLoop);
            return this;
        }

        public Builder iosXcTest(@Nullable Input<IosXcTestArgs> iosXcTest) {
            this.iosXcTest = iosXcTest;
            return this;
        }

        public Builder iosXcTest(@Nullable IosXcTestArgs iosXcTest) {
            this.iosXcTest = Input.ofNullable(iosXcTest);
            return this;
        }

        public Builder testTimeout(@Nullable Input<DurationArgs> testTimeout) {
            this.testTimeout = testTimeout;
            return this;
        }

        public Builder testTimeout(@Nullable DurationArgs testTimeout) {
            this.testTimeout = Input.ofNullable(testTimeout);
            return this;
        }
        public IosTestArgs build() {
            return new IosTestArgs(iosAppInfo, iosRoboTest, iosTestLoop, iosXcTest, testTimeout);
        }
    }
}
