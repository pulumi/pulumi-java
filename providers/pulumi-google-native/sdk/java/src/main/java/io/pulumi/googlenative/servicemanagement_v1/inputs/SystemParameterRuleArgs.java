// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.SystemParameterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Define a system parameter rule mapping system parameter definitions to methods.
 * 
 */
public final class SystemParameterRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final SystemParameterRuleArgs Empty = new SystemParameterRuleArgs();

    /**
     * Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<List<SystemParameterArgs>> parameters;

    public Input<List<SystemParameterArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
     * 
     */
    @InputImport(name="selector")
      private final @Nullable Input<String> selector;

    public Input<String> getSelector() {
        return this.selector == null ? Input.empty() : this.selector;
    }

    public SystemParameterRuleArgs(
        @Nullable Input<List<SystemParameterArgs>> parameters,
        @Nullable Input<String> selector) {
        this.parameters = parameters;
        this.selector = selector;
    }

    private SystemParameterRuleArgs() {
        this.parameters = Input.empty();
        this.selector = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SystemParameterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<SystemParameterArgs>> parameters;
        private @Nullable Input<String> selector;

        public Builder() {
    	      // Empty
        }

        public Builder(SystemParameterRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.parameters = defaults.parameters;
    	      this.selector = defaults.selector;
        }

        public Builder parameters(@Nullable Input<List<SystemParameterArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable List<SystemParameterArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder selector(@Nullable Input<String> selector) {
            this.selector = selector;
            return this;
        }

        public Builder selector(@Nullable String selector) {
            this.selector = Input.ofNullable(selector);
            return this;
        }
        public SystemParameterRuleArgs build() {
            return new SystemParameterRuleArgs(parameters, selector);
        }
    }
}
