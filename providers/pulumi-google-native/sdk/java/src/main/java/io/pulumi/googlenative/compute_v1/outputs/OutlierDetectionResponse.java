// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_v1.outputs.DurationResponse;
import java.lang.Integer;
import java.util.Objects;

@OutputCustomType
public final class OutlierDetectionResponse {
    private final DurationResponse baseEjectionTime;
    private final Integer consecutiveErrors;
    private final Integer consecutiveGatewayFailure;
    private final Integer enforcingConsecutiveErrors;
    private final Integer enforcingConsecutiveGatewayFailure;
    private final Integer enforcingSuccessRate;
    private final DurationResponse interval;
    private final Integer maxEjectionPercent;
    private final Integer successRateMinimumHosts;
    private final Integer successRateRequestVolume;
    private final Integer successRateStdevFactor;

    @OutputCustomType.Constructor({"baseEjectionTime","consecutiveErrors","consecutiveGatewayFailure","enforcingConsecutiveErrors","enforcingConsecutiveGatewayFailure","enforcingSuccessRate","interval","maxEjectionPercent","successRateMinimumHosts","successRateRequestVolume","successRateStdevFactor"})
    private OutlierDetectionResponse(
        DurationResponse baseEjectionTime,
        Integer consecutiveErrors,
        Integer consecutiveGatewayFailure,
        Integer enforcingConsecutiveErrors,
        Integer enforcingConsecutiveGatewayFailure,
        Integer enforcingSuccessRate,
        DurationResponse interval,
        Integer maxEjectionPercent,
        Integer successRateMinimumHosts,
        Integer successRateRequestVolume,
        Integer successRateStdevFactor) {
        this.baseEjectionTime = Objects.requireNonNull(baseEjectionTime);
        this.consecutiveErrors = Objects.requireNonNull(consecutiveErrors);
        this.consecutiveGatewayFailure = Objects.requireNonNull(consecutiveGatewayFailure);
        this.enforcingConsecutiveErrors = Objects.requireNonNull(enforcingConsecutiveErrors);
        this.enforcingConsecutiveGatewayFailure = Objects.requireNonNull(enforcingConsecutiveGatewayFailure);
        this.enforcingSuccessRate = Objects.requireNonNull(enforcingSuccessRate);
        this.interval = Objects.requireNonNull(interval);
        this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent);
        this.successRateMinimumHosts = Objects.requireNonNull(successRateMinimumHosts);
        this.successRateRequestVolume = Objects.requireNonNull(successRateRequestVolume);
        this.successRateStdevFactor = Objects.requireNonNull(successRateStdevFactor);
    }

    public DurationResponse getBaseEjectionTime() {
        return this.baseEjectionTime;
    }
    public Integer getConsecutiveErrors() {
        return this.consecutiveErrors;
    }
    public Integer getConsecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure;
    }
    public Integer getEnforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors;
    }
    public Integer getEnforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure;
    }
    public Integer getEnforcingSuccessRate() {
        return this.enforcingSuccessRate;
    }
    public DurationResponse getInterval() {
        return this.interval;
    }
    public Integer getMaxEjectionPercent() {
        return this.maxEjectionPercent;
    }
    public Integer getSuccessRateMinimumHosts() {
        return this.successRateMinimumHosts;
    }
    public Integer getSuccessRateRequestVolume() {
        return this.successRateRequestVolume;
    }
    public Integer getSuccessRateStdevFactor() {
        return this.successRateStdevFactor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OutlierDetectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DurationResponse baseEjectionTime;
        private Integer consecutiveErrors;
        private Integer consecutiveGatewayFailure;
        private Integer enforcingConsecutiveErrors;
        private Integer enforcingConsecutiveGatewayFailure;
        private Integer enforcingSuccessRate;
        private DurationResponse interval;
        private Integer maxEjectionPercent;
        private Integer successRateMinimumHosts;
        private Integer successRateRequestVolume;
        private Integer successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(OutlierDetectionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder setBaseEjectionTime(DurationResponse baseEjectionTime) {
            this.baseEjectionTime = Objects.requireNonNull(baseEjectionTime);
            return this;
        }

        public Builder setConsecutiveErrors(Integer consecutiveErrors) {
            this.consecutiveErrors = Objects.requireNonNull(consecutiveErrors);
            return this;
        }

        public Builder setConsecutiveGatewayFailure(Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = Objects.requireNonNull(consecutiveGatewayFailure);
            return this;
        }

        public Builder setEnforcingConsecutiveErrors(Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = Objects.requireNonNull(enforcingConsecutiveErrors);
            return this;
        }

        public Builder setEnforcingConsecutiveGatewayFailure(Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = Objects.requireNonNull(enforcingConsecutiveGatewayFailure);
            return this;
        }

        public Builder setEnforcingSuccessRate(Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = Objects.requireNonNull(enforcingSuccessRate);
            return this;
        }

        public Builder setInterval(DurationResponse interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder setMaxEjectionPercent(Integer maxEjectionPercent) {
            this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent);
            return this;
        }

        public Builder setSuccessRateMinimumHosts(Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = Objects.requireNonNull(successRateMinimumHosts);
            return this;
        }

        public Builder setSuccessRateRequestVolume(Integer successRateRequestVolume) {
            this.successRateRequestVolume = Objects.requireNonNull(successRateRequestVolume);
            return this;
        }

        public Builder setSuccessRateStdevFactor(Integer successRateStdevFactor) {
            this.successRateStdevFactor = Objects.requireNonNull(successRateStdevFactor);
            return this;
        }

        public OutlierDetectionResponse build() {
            return new OutlierDetectionResponse(baseEjectionTime, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, interval, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
