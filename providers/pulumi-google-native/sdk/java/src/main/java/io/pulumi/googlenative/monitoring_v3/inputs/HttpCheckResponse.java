// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v3.inputs.BasicAuthenticationResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class HttpCheckResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpCheckResponse Empty = new HttpCheckResponse();

    @InputImport(name="authInfo", required=true)
    private final BasicAuthenticationResponse authInfo;

    public BasicAuthenticationResponse getAuthInfo() {
        return this.authInfo;
    }

    @InputImport(name="body", required=true)
    private final String body;

    public String getBody() {
        return this.body;
    }

    @InputImport(name="contentType", required=true)
    private final String contentType;

    public String getContentType() {
        return this.contentType;
    }

    @InputImport(name="headers", required=true)
    private final Map<String,String> headers;

    public Map<String,String> getHeaders() {
        return this.headers;
    }

    @InputImport(name="maskHeaders", required=true)
    private final Boolean maskHeaders;

    public Boolean getMaskHeaders() {
        return this.maskHeaders;
    }

    @InputImport(name="path", required=true)
    private final String path;

    public String getPath() {
        return this.path;
    }

    @InputImport(name="port", required=true)
    private final Integer port;

    public Integer getPort() {
        return this.port;
    }

    @InputImport(name="requestMethod", required=true)
    private final String requestMethod;

    public String getRequestMethod() {
        return this.requestMethod;
    }

    @InputImport(name="useSsl", required=true)
    private final Boolean useSsl;

    public Boolean getUseSsl() {
        return this.useSsl;
    }

    @InputImport(name="validateSsl", required=true)
    private final Boolean validateSsl;

    public Boolean getValidateSsl() {
        return this.validateSsl;
    }

    public HttpCheckResponse(
        BasicAuthenticationResponse authInfo,
        String body,
        String contentType,
        Map<String,String> headers,
        Boolean maskHeaders,
        String path,
        Integer port,
        String requestMethod,
        Boolean useSsl,
        Boolean validateSsl) {
        this.authInfo = Objects.requireNonNull(authInfo, "expected parameter 'authInfo' to be non-null");
        this.body = Objects.requireNonNull(body, "expected parameter 'body' to be non-null");
        this.contentType = Objects.requireNonNull(contentType, "expected parameter 'contentType' to be non-null");
        this.headers = Objects.requireNonNull(headers, "expected parameter 'headers' to be non-null");
        this.maskHeaders = Objects.requireNonNull(maskHeaders, "expected parameter 'maskHeaders' to be non-null");
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.requestMethod = Objects.requireNonNull(requestMethod, "expected parameter 'requestMethod' to be non-null");
        this.useSsl = Objects.requireNonNull(useSsl, "expected parameter 'useSsl' to be non-null");
        this.validateSsl = Objects.requireNonNull(validateSsl, "expected parameter 'validateSsl' to be non-null");
    }

    private HttpCheckResponse() {
        this.authInfo = null;
        this.body = null;
        this.contentType = null;
        this.headers = Map.of();
        this.maskHeaders = null;
        this.path = null;
        this.port = null;
        this.requestMethod = null;
        this.useSsl = null;
        this.validateSsl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpCheckResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicAuthenticationResponse authInfo;
        private String body;
        private String contentType;
        private Map<String,String> headers;
        private Boolean maskHeaders;
        private String path;
        private Integer port;
        private String requestMethod;
        private Boolean useSsl;
        private Boolean validateSsl;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpCheckResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authInfo = defaults.authInfo;
    	      this.body = defaults.body;
    	      this.contentType = defaults.contentType;
    	      this.headers = defaults.headers;
    	      this.maskHeaders = defaults.maskHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.requestMethod = defaults.requestMethod;
    	      this.useSsl = defaults.useSsl;
    	      this.validateSsl = defaults.validateSsl;
        }

        public Builder setAuthInfo(BasicAuthenticationResponse authInfo) {
            this.authInfo = Objects.requireNonNull(authInfo);
            return this;
        }

        public Builder setBody(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }

        public Builder setContentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }

        public Builder setHeaders(Map<String,String> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }

        public Builder setMaskHeaders(Boolean maskHeaders) {
            this.maskHeaders = Objects.requireNonNull(maskHeaders);
            return this;
        }

        public Builder setPath(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setRequestMethod(String requestMethod) {
            this.requestMethod = Objects.requireNonNull(requestMethod);
            return this;
        }

        public Builder setUseSsl(Boolean useSsl) {
            this.useSsl = Objects.requireNonNull(useSsl);
            return this;
        }

        public Builder setValidateSsl(Boolean validateSsl) {
            this.validateSsl = Objects.requireNonNull(validateSsl);
            return this;
        }

        public HttpCheckResponse build() {
            return new HttpCheckResponse(authInfo, body, contentType, headers, maskHeaders, path, port, requestMethod, useSsl, validateSsl);
        }
    }
}
