// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.compute_beta.outputs.SecurityPolicyRuleRateLimitOptionsThresholdResponse;
import io.pulumi.googlenative.compute_beta.outputs.SecurityPolicyRuleRedirectOptionsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SecurityPolicyRuleRateLimitOptionsResponse {
    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    private final Integer banDurationSec;
    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
     * 
     */
    private final SecurityPolicyRuleRateLimitOptionsThresholdResponse banThreshold;
    /**
     * Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.
     * 
     */
    private final String conformAction;
    /**
     * Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if this field 'enforce_on_key' is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key type defaults to ALL. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * 
     */
    private final String enforceOnKey;
    /**
     * Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    private final String enforceOnKeyName;
    /**
     * Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are "deny()" where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceed_redirect_options below.
     * 
     */
    private final String exceedAction;
    /**
     * Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
     * 
     */
    private final SecurityPolicyRuleRedirectOptionsResponse exceedRedirectOptions;
    /**
     * Threshold at which to begin ratelimiting.
     * 
     */
    private final SecurityPolicyRuleRateLimitOptionsThresholdResponse rateLimitThreshold;

    @CustomType.Constructor
    private SecurityPolicyRuleRateLimitOptionsResponse(
        @CustomType.Parameter("banDurationSec") Integer banDurationSec,
        @CustomType.Parameter("banThreshold") SecurityPolicyRuleRateLimitOptionsThresholdResponse banThreshold,
        @CustomType.Parameter("conformAction") String conformAction,
        @CustomType.Parameter("enforceOnKey") String enforceOnKey,
        @CustomType.Parameter("enforceOnKeyName") String enforceOnKeyName,
        @CustomType.Parameter("exceedAction") String exceedAction,
        @CustomType.Parameter("exceedRedirectOptions") SecurityPolicyRuleRedirectOptionsResponse exceedRedirectOptions,
        @CustomType.Parameter("rateLimitThreshold") SecurityPolicyRuleRateLimitOptionsThresholdResponse rateLimitThreshold) {
        this.banDurationSec = banDurationSec;
        this.banThreshold = banThreshold;
        this.conformAction = conformAction;
        this.enforceOnKey = enforceOnKey;
        this.enforceOnKeyName = enforceOnKeyName;
        this.exceedAction = exceedAction;
        this.exceedRedirectOptions = exceedRedirectOptions;
        this.rateLimitThreshold = rateLimitThreshold;
    }

    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
    */
    public Integer banDurationSec() {
        return this.banDurationSec;
    }
    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
     * 
    */
    public SecurityPolicyRuleRateLimitOptionsThresholdResponse banThreshold() {
        return this.banThreshold;
    }
    /**
     * Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.
     * 
    */
    public String conformAction() {
        return this.conformAction;
    }
    /**
     * Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if this field 'enforce_on_key' is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key type defaults to ALL. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * 
    */
    public String enforceOnKey() {
        return this.enforceOnKey;
    }
    /**
     * Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
    */
    public String enforceOnKeyName() {
        return this.enforceOnKeyName;
    }
    /**
     * Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are "deny()" where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceed_redirect_options below.
     * 
    */
    public String exceedAction() {
        return this.exceedAction;
    }
    /**
     * Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
     * 
    */
    public SecurityPolicyRuleRedirectOptionsResponse exceedRedirectOptions() {
        return this.exceedRedirectOptions;
    }
    /**
     * Threshold at which to begin ratelimiting.
     * 
    */
    public SecurityPolicyRuleRateLimitOptionsThresholdResponse rateLimitThreshold() {
        return this.rateLimitThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleRateLimitOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer banDurationSec;
        private SecurityPolicyRuleRateLimitOptionsThresholdResponse banThreshold;
        private String conformAction;
        private String enforceOnKey;
        private String enforceOnKeyName;
        private String exceedAction;
        private SecurityPolicyRuleRedirectOptionsResponse exceedRedirectOptions;
        private SecurityPolicyRuleRateLimitOptionsThresholdResponse rateLimitThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityPolicyRuleRateLimitOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banDurationSec = defaults.banDurationSec;
    	      this.banThreshold = defaults.banThreshold;
    	      this.conformAction = defaults.conformAction;
    	      this.enforceOnKey = defaults.enforceOnKey;
    	      this.enforceOnKeyName = defaults.enforceOnKeyName;
    	      this.exceedAction = defaults.exceedAction;
    	      this.exceedRedirectOptions = defaults.exceedRedirectOptions;
    	      this.rateLimitThreshold = defaults.rateLimitThreshold;
        }

        public Builder banDurationSec(Integer banDurationSec) {
            this.banDurationSec = Objects.requireNonNull(banDurationSec);
            return this;
        }
        public Builder banThreshold(SecurityPolicyRuleRateLimitOptionsThresholdResponse banThreshold) {
            this.banThreshold = Objects.requireNonNull(banThreshold);
            return this;
        }
        public Builder conformAction(String conformAction) {
            this.conformAction = Objects.requireNonNull(conformAction);
            return this;
        }
        public Builder enforceOnKey(String enforceOnKey) {
            this.enforceOnKey = Objects.requireNonNull(enforceOnKey);
            return this;
        }
        public Builder enforceOnKeyName(String enforceOnKeyName) {
            this.enforceOnKeyName = Objects.requireNonNull(enforceOnKeyName);
            return this;
        }
        public Builder exceedAction(String exceedAction) {
            this.exceedAction = Objects.requireNonNull(exceedAction);
            return this;
        }
        public Builder exceedRedirectOptions(SecurityPolicyRuleRedirectOptionsResponse exceedRedirectOptions) {
            this.exceedRedirectOptions = Objects.requireNonNull(exceedRedirectOptions);
            return this;
        }
        public Builder rateLimitThreshold(SecurityPolicyRuleRateLimitOptionsThresholdResponse rateLimitThreshold) {
            this.rateLimitThreshold = Objects.requireNonNull(rateLimitThreshold);
            return this;
        }        public SecurityPolicyRuleRateLimitOptionsResponse build() {
            return new SecurityPolicyRuleRateLimitOptionsResponse(banDurationSec, banThreshold, conformAction, enforceOnKey, enforceOnKeyName, exceedAction, exceedRedirectOptions, rateLimitThreshold);
        }
    }
}
