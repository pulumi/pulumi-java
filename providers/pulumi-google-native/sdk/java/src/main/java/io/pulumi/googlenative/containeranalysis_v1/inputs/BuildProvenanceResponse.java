// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1.inputs.ArtifactResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.CommandResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.SourceResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class BuildProvenanceResponse extends io.pulumi.resources.InvokeArgs {

    public static final BuildProvenanceResponse Empty = new BuildProvenanceResponse();

    @InputImport(name="buildOptions", required=true)
    private final Map<String,String> buildOptions;

    public Map<String,String> getBuildOptions() {
        return this.buildOptions;
    }

    @InputImport(name="builderVersion", required=true)
    private final String builderVersion;

    public String getBuilderVersion() {
        return this.builderVersion;
    }

    @InputImport(name="builtArtifacts", required=true)
    private final List<ArtifactResponse> builtArtifacts;

    public List<ArtifactResponse> getBuiltArtifacts() {
        return this.builtArtifacts;
    }

    @InputImport(name="commands", required=true)
    private final List<CommandResponse> commands;

    public List<CommandResponse> getCommands() {
        return this.commands;
    }

    @InputImport(name="createTime", required=true)
    private final String createTime;

    public String getCreateTime() {
        return this.createTime;
    }

    @InputImport(name="creator", required=true)
    private final String creator;

    public String getCreator() {
        return this.creator;
    }

    @InputImport(name="endTime", required=true)
    private final String endTime;

    public String getEndTime() {
        return this.endTime;
    }

    @InputImport(name="logsUri", required=true)
    private final String logsUri;

    public String getLogsUri() {
        return this.logsUri;
    }

    @InputImport(name="project", required=true)
    private final String project;

    public String getProject() {
        return this.project;
    }

    @InputImport(name="sourceProvenance", required=true)
    private final SourceResponse sourceProvenance;

    public SourceResponse getSourceProvenance() {
        return this.sourceProvenance;
    }

    @InputImport(name="startTime", required=true)
    private final String startTime;

    public String getStartTime() {
        return this.startTime;
    }

    @InputImport(name="triggerId", required=true)
    private final String triggerId;

    public String getTriggerId() {
        return this.triggerId;
    }

    public BuildProvenanceResponse(
        Map<String,String> buildOptions,
        String builderVersion,
        List<ArtifactResponse> builtArtifacts,
        List<CommandResponse> commands,
        String createTime,
        String creator,
        String endTime,
        String logsUri,
        String project,
        SourceResponse sourceProvenance,
        String startTime,
        String triggerId) {
        this.buildOptions = Objects.requireNonNull(buildOptions, "expected parameter 'buildOptions' to be non-null");
        this.builderVersion = Objects.requireNonNull(builderVersion, "expected parameter 'builderVersion' to be non-null");
        this.builtArtifacts = Objects.requireNonNull(builtArtifacts, "expected parameter 'builtArtifacts' to be non-null");
        this.commands = Objects.requireNonNull(commands, "expected parameter 'commands' to be non-null");
        this.createTime = Objects.requireNonNull(createTime, "expected parameter 'createTime' to be non-null");
        this.creator = Objects.requireNonNull(creator, "expected parameter 'creator' to be non-null");
        this.endTime = Objects.requireNonNull(endTime, "expected parameter 'endTime' to be non-null");
        this.logsUri = Objects.requireNonNull(logsUri, "expected parameter 'logsUri' to be non-null");
        this.project = Objects.requireNonNull(project, "expected parameter 'project' to be non-null");
        this.sourceProvenance = Objects.requireNonNull(sourceProvenance, "expected parameter 'sourceProvenance' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.triggerId = Objects.requireNonNull(triggerId, "expected parameter 'triggerId' to be non-null");
    }

    private BuildProvenanceResponse() {
        this.buildOptions = Map.of();
        this.builderVersion = null;
        this.builtArtifacts = List.of();
        this.commands = List.of();
        this.createTime = null;
        this.creator = null;
        this.endTime = null;
        this.logsUri = null;
        this.project = null;
        this.sourceProvenance = null;
        this.startTime = null;
        this.triggerId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> buildOptions;
        private String builderVersion;
        private List<ArtifactResponse> builtArtifacts;
        private List<CommandResponse> commands;
        private String createTime;
        private String creator;
        private String endTime;
        private String logsUri;
        private String project;
        private SourceResponse sourceProvenance;
        private String startTime;
        private String triggerId;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildProvenanceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildOptions = defaults.buildOptions;
    	      this.builderVersion = defaults.builderVersion;
    	      this.builtArtifacts = defaults.builtArtifacts;
    	      this.commands = defaults.commands;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.endTime = defaults.endTime;
    	      this.logsUri = defaults.logsUri;
    	      this.project = defaults.project;
    	      this.sourceProvenance = defaults.sourceProvenance;
    	      this.startTime = defaults.startTime;
    	      this.triggerId = defaults.triggerId;
        }

        public Builder setBuildOptions(Map<String,String> buildOptions) {
            this.buildOptions = Objects.requireNonNull(buildOptions);
            return this;
        }

        public Builder setBuilderVersion(String builderVersion) {
            this.builderVersion = Objects.requireNonNull(builderVersion);
            return this;
        }

        public Builder setBuiltArtifacts(List<ArtifactResponse> builtArtifacts) {
            this.builtArtifacts = Objects.requireNonNull(builtArtifacts);
            return this;
        }

        public Builder setCommands(List<CommandResponse> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCreator(String creator) {
            this.creator = Objects.requireNonNull(creator);
            return this;
        }

        public Builder setEndTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }

        public Builder setLogsUri(String logsUri) {
            this.logsUri = Objects.requireNonNull(logsUri);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setSourceProvenance(SourceResponse sourceProvenance) {
            this.sourceProvenance = Objects.requireNonNull(sourceProvenance);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setTriggerId(String triggerId) {
            this.triggerId = Objects.requireNonNull(triggerId);
            return this;
        }

        public BuildProvenanceResponse build() {
            return new BuildProvenanceResponse(buildOptions, builderVersion, builtArtifacts, commands, createTime, creator, endTime, logsUri, project, sourceProvenance, startTime, triggerId);
        }
    }
}
