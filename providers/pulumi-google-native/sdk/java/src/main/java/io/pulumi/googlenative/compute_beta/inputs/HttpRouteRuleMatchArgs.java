// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_beta.inputs.HttpHeaderMatchArgs;
import io.pulumi.googlenative.compute_beta.inputs.HttpQueryParameterMatchArgs;
import io.pulumi.googlenative.compute_beta.inputs.MetadataFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HttpRouteRuleMatchArgs extends io.pulumi.resources.ResourceArgs {

    public static final HttpRouteRuleMatchArgs Empty = new HttpRouteRuleMatchArgs();

    @InputImport(name="fullPathMatch")
    private final @Nullable Input<String> fullPathMatch;

    public Input<String> getFullPathMatch() {
        return this.fullPathMatch == null ? Input.empty() : this.fullPathMatch;
    }

    @InputImport(name="headerMatches")
    private final @Nullable Input<List<HttpHeaderMatchArgs>> headerMatches;

    public Input<List<HttpHeaderMatchArgs>> getHeaderMatches() {
        return this.headerMatches == null ? Input.empty() : this.headerMatches;
    }

    @InputImport(name="ignoreCase")
    private final @Nullable Input<Boolean> ignoreCase;

    public Input<Boolean> getIgnoreCase() {
        return this.ignoreCase == null ? Input.empty() : this.ignoreCase;
    }

    @InputImport(name="metadataFilters")
    private final @Nullable Input<List<MetadataFilterArgs>> metadataFilters;

    public Input<List<MetadataFilterArgs>> getMetadataFilters() {
        return this.metadataFilters == null ? Input.empty() : this.metadataFilters;
    }

    @InputImport(name="prefixMatch")
    private final @Nullable Input<String> prefixMatch;

    public Input<String> getPrefixMatch() {
        return this.prefixMatch == null ? Input.empty() : this.prefixMatch;
    }

    @InputImport(name="queryParameterMatches")
    private final @Nullable Input<List<HttpQueryParameterMatchArgs>> queryParameterMatches;

    public Input<List<HttpQueryParameterMatchArgs>> getQueryParameterMatches() {
        return this.queryParameterMatches == null ? Input.empty() : this.queryParameterMatches;
    }

    @InputImport(name="regexMatch")
    private final @Nullable Input<String> regexMatch;

    public Input<String> getRegexMatch() {
        return this.regexMatch == null ? Input.empty() : this.regexMatch;
    }

    public HttpRouteRuleMatchArgs(
        @Nullable Input<String> fullPathMatch,
        @Nullable Input<List<HttpHeaderMatchArgs>> headerMatches,
        @Nullable Input<Boolean> ignoreCase,
        @Nullable Input<List<MetadataFilterArgs>> metadataFilters,
        @Nullable Input<String> prefixMatch,
        @Nullable Input<List<HttpQueryParameterMatchArgs>> queryParameterMatches,
        @Nullable Input<String> regexMatch) {
        this.fullPathMatch = fullPathMatch;
        this.headerMatches = headerMatches;
        this.ignoreCase = ignoreCase;
        this.metadataFilters = metadataFilters;
        this.prefixMatch = prefixMatch;
        this.queryParameterMatches = queryParameterMatches;
        this.regexMatch = regexMatch;
    }

    private HttpRouteRuleMatchArgs() {
        this.fullPathMatch = Input.empty();
        this.headerMatches = Input.empty();
        this.ignoreCase = Input.empty();
        this.metadataFilters = Input.empty();
        this.prefixMatch = Input.empty();
        this.queryParameterMatches = Input.empty();
        this.regexMatch = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRuleMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> fullPathMatch;
        private @Nullable Input<List<HttpHeaderMatchArgs>> headerMatches;
        private @Nullable Input<Boolean> ignoreCase;
        private @Nullable Input<List<MetadataFilterArgs>> metadataFilters;
        private @Nullable Input<String> prefixMatch;
        private @Nullable Input<List<HttpQueryParameterMatchArgs>> queryParameterMatches;
        private @Nullable Input<String> regexMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRouteRuleMatchArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fullPathMatch = defaults.fullPathMatch;
    	      this.headerMatches = defaults.headerMatches;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.metadataFilters = defaults.metadataFilters;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.queryParameterMatches = defaults.queryParameterMatches;
    	      this.regexMatch = defaults.regexMatch;
        }

        public Builder setFullPathMatch(@Nullable Input<String> fullPathMatch) {
            this.fullPathMatch = fullPathMatch;
            return this;
        }

        public Builder setFullPathMatch(@Nullable String fullPathMatch) {
            this.fullPathMatch = Input.ofNullable(fullPathMatch);
            return this;
        }

        public Builder setHeaderMatches(@Nullable Input<List<HttpHeaderMatchArgs>> headerMatches) {
            this.headerMatches = headerMatches;
            return this;
        }

        public Builder setHeaderMatches(@Nullable List<HttpHeaderMatchArgs> headerMatches) {
            this.headerMatches = Input.ofNullable(headerMatches);
            return this;
        }

        public Builder setIgnoreCase(@Nullable Input<Boolean> ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }

        public Builder setIgnoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = Input.ofNullable(ignoreCase);
            return this;
        }

        public Builder setMetadataFilters(@Nullable Input<List<MetadataFilterArgs>> metadataFilters) {
            this.metadataFilters = metadataFilters;
            return this;
        }

        public Builder setMetadataFilters(@Nullable List<MetadataFilterArgs> metadataFilters) {
            this.metadataFilters = Input.ofNullable(metadataFilters);
            return this;
        }

        public Builder setPrefixMatch(@Nullable Input<String> prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }

        public Builder setPrefixMatch(@Nullable String prefixMatch) {
            this.prefixMatch = Input.ofNullable(prefixMatch);
            return this;
        }

        public Builder setQueryParameterMatches(@Nullable Input<List<HttpQueryParameterMatchArgs>> queryParameterMatches) {
            this.queryParameterMatches = queryParameterMatches;
            return this;
        }

        public Builder setQueryParameterMatches(@Nullable List<HttpQueryParameterMatchArgs> queryParameterMatches) {
            this.queryParameterMatches = Input.ofNullable(queryParameterMatches);
            return this;
        }

        public Builder setRegexMatch(@Nullable Input<String> regexMatch) {
            this.regexMatch = regexMatch;
            return this;
        }

        public Builder setRegexMatch(@Nullable String regexMatch) {
            this.regexMatch = Input.ofNullable(regexMatch);
            return this;
        }

        public HttpRouteRuleMatchArgs build() {
            return new HttpRouteRuleMatchArgs(fullPathMatch, headerMatches, ignoreCase, metadataFilters, prefixMatch, queryParameterMatches, regexMatch);
        }
    }
}
