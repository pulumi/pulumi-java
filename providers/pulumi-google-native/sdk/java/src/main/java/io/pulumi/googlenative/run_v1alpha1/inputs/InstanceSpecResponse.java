// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.run_v1alpha1.inputs.ContainerResponse;
import io.pulumi.googlenative.run_v1alpha1.inputs.VolumeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * InstanceSpec is a description of an instance.
 * 
 */
public final class InstanceSpecResponse extends io.pulumi.resources.InvokeArgs {

    public static final InstanceSpecResponse Empty = new InstanceSpecResponse();

    /**
     * Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
     * 
     */
    @InputImport(name="activeDeadlineSeconds", required=true)
    private final String activeDeadlineSeconds;

    public String getActiveDeadlineSeconds() {
        return this.activeDeadlineSeconds;
    }

    /**
     * Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
     * 
     */
    @InputImport(name="containers", required=true)
    private final List<ContainerResponse> containers;

    public List<ContainerResponse> getContainers() {
        return this.containers;
    }

    /**
     * Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
     * 
     */
    @InputImport(name="restartPolicy", required=true)
    private final String restartPolicy;

    public String getRestartPolicy() {
        return this.restartPolicy;
    }

    /**
     * Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
     * 
     */
    @InputImport(name="serviceAccountName", required=true)
    private final String serviceAccountName;

    public String getServiceAccountName() {
        return this.serviceAccountName;
    }

    /**
     * Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
     * 
     */
    @InputImport(name="terminationGracePeriodSeconds", required=true)
    private final String terminationGracePeriodSeconds;

    public String getTerminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds;
    }

    /**
     * Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
     * 
     */
    @InputImport(name="volumes", required=true)
    private final List<VolumeResponse> volumes;

    public List<VolumeResponse> getVolumes() {
        return this.volumes;
    }

    public InstanceSpecResponse(
        String activeDeadlineSeconds,
        List<ContainerResponse> containers,
        String restartPolicy,
        String serviceAccountName,
        String terminationGracePeriodSeconds,
        List<VolumeResponse> volumes) {
        this.activeDeadlineSeconds = Objects.requireNonNull(activeDeadlineSeconds, "expected parameter 'activeDeadlineSeconds' to be non-null");
        this.containers = Objects.requireNonNull(containers, "expected parameter 'containers' to be non-null");
        this.restartPolicy = Objects.requireNonNull(restartPolicy, "expected parameter 'restartPolicy' to be non-null");
        this.serviceAccountName = Objects.requireNonNull(serviceAccountName, "expected parameter 'serviceAccountName' to be non-null");
        this.terminationGracePeriodSeconds = Objects.requireNonNull(terminationGracePeriodSeconds, "expected parameter 'terminationGracePeriodSeconds' to be non-null");
        this.volumes = Objects.requireNonNull(volumes, "expected parameter 'volumes' to be non-null");
    }

    private InstanceSpecResponse() {
        this.activeDeadlineSeconds = null;
        this.containers = List.of();
        this.restartPolicy = null;
        this.serviceAccountName = null;
        this.terminationGracePeriodSeconds = null;
        this.volumes = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String activeDeadlineSeconds;
        private List<ContainerResponse> containers;
        private String restartPolicy;
        private String serviceAccountName;
        private String terminationGracePeriodSeconds;
        private List<VolumeResponse> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeadlineSeconds = defaults.activeDeadlineSeconds;
    	      this.containers = defaults.containers;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder setActiveDeadlineSeconds(String activeDeadlineSeconds) {
            this.activeDeadlineSeconds = Objects.requireNonNull(activeDeadlineSeconds);
            return this;
        }

        public Builder setContainers(List<ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }

        public Builder setRestartPolicy(String restartPolicy) {
            this.restartPolicy = Objects.requireNonNull(restartPolicy);
            return this;
        }

        public Builder setServiceAccountName(String serviceAccountName) {
            this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
            return this;
        }

        public Builder setTerminationGracePeriodSeconds(String terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = Objects.requireNonNull(terminationGracePeriodSeconds);
            return this;
        }

        public Builder setVolumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }

        public InstanceSpecResponse build() {
            return new InstanceSpecResponse(activeDeadlineSeconds, containers, restartPolicy, serviceAccountName, terminationGracePeriodSeconds, volumes);
        }
    }
}
