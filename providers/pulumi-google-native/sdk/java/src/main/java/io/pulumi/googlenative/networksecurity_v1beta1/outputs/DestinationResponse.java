// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networksecurity_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.networksecurity_v1beta1.outputs.HttpHeaderMatchResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class DestinationResponse {
    /**
     * List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example // *.myorg.com") or a presence(any) match "*".
     * 
     */
    private final List<String> hosts;
    /**
     * Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
     * 
     */
    private final HttpHeaderMatchResponse httpHeaderMatch;
    /**
     * Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
     * 
     */
    private final List<String> methods;
    /**
     * List of destination ports to match. At least one port should match.
     * 
     */
    private final List<Integer> ports;

    @OutputCustomType.Constructor({"hosts","httpHeaderMatch","methods","ports"})
    private DestinationResponse(
        List<String> hosts,
        HttpHeaderMatchResponse httpHeaderMatch,
        List<String> methods,
        List<Integer> ports) {
        this.hosts = Objects.requireNonNull(hosts);
        this.httpHeaderMatch = Objects.requireNonNull(httpHeaderMatch);
        this.methods = Objects.requireNonNull(methods);
        this.ports = Objects.requireNonNull(ports);
    }

    /**
     * List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example // *.myorg.com") or a presence(any) match "*".
     * 
    */
    public List<String> getHosts() {
        return this.hosts;
    }
    /**
     * Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
     * 
    */
    public HttpHeaderMatchResponse getHttpHeaderMatch() {
        return this.httpHeaderMatch;
    }
    /**
     * Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
     * 
    */
    public List<String> getMethods() {
        return this.methods;
    }
    /**
     * List of destination ports to match. At least one port should match.
     * 
    */
    public List<Integer> getPorts() {
        return this.ports;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DestinationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> hosts;
        private HttpHeaderMatchResponse httpHeaderMatch;
        private List<String> methods;
        private List<Integer> ports;

        public Builder() {
    	      // Empty
        }

        public Builder(DestinationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hosts = defaults.hosts;
    	      this.httpHeaderMatch = defaults.httpHeaderMatch;
    	      this.methods = defaults.methods;
    	      this.ports = defaults.ports;
        }

        public Builder setHosts(List<String> hosts) {
            this.hosts = Objects.requireNonNull(hosts);
            return this;
        }

        public Builder setHttpHeaderMatch(HttpHeaderMatchResponse httpHeaderMatch) {
            this.httpHeaderMatch = Objects.requireNonNull(httpHeaderMatch);
            return this;
        }

        public Builder setMethods(List<String> methods) {
            this.methods = Objects.requireNonNull(methods);
            return this;
        }

        public Builder setPorts(List<Integer> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public DestinationResponse build() {
            return new DestinationResponse(hosts, httpHeaderMatch, methods, ports);
        }
    }
}
