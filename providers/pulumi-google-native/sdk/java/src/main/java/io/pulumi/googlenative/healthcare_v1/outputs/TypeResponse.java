// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.healthcare_v1.outputs.FieldResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class TypeResponse {
    private final List<FieldResponse> fields;
    private final String name;
    private final String primitive;

    @OutputCustomType.Constructor({"fields","name","primitive"})
    private TypeResponse(
        List<FieldResponse> fields,
        String name,
        String primitive) {
        this.fields = Objects.requireNonNull(fields);
        this.name = Objects.requireNonNull(name);
        this.primitive = Objects.requireNonNull(primitive);
    }

    public List<FieldResponse> getFields() {
        return this.fields;
    }
    public String getName() {
        return this.name;
    }
    public String getPrimitive() {
        return this.primitive;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<FieldResponse> fields;
        private String name;
        private String primitive;

        public Builder() {
    	      // Empty
        }

        public Builder(TypeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.primitive = defaults.primitive;
        }

        public Builder setFields(List<FieldResponse> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPrimitive(String primitive) {
            this.primitive = Objects.requireNonNull(primitive);
            return this;
        }

        public TypeResponse build() {
            return new TypeResponse(fields, name, primitive);
        }
    }
}
