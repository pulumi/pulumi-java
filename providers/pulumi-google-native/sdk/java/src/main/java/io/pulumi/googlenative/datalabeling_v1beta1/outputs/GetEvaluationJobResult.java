// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datalabeling_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.datalabeling_v1beta1.outputs.GoogleCloudDatalabelingV1beta1AttemptResponse;
import io.pulumi.googlenative.datalabeling_v1beta1.outputs.GoogleCloudDatalabelingV1beta1EvaluationJobConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetEvaluationJobResult {
    /**
     * Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: "projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}"
     * 
     */
    private final String annotationSpecSet;
    /**
     * Every time the evaluation job runs and an error occurs, the failed attempt is appended to this array.
     * 
     */
    private final List<GoogleCloudDatalabelingV1beta1AttemptResponse> attempts;
    /**
     * Timestamp of when this evaluation job was created.
     * 
     */
    private final String createTime;
    /**
     * Description of the job. The description can be up to 25,000 characters long.
     * 
     */
    private final String description;
    /**
     * Configuration details for the evaluation job.
     * 
     */
    private final GoogleCloudDatalabelingV1beta1EvaluationJobConfigResponse evaluationJobConfig;
    /**
     * Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.
     * 
     */
    private final Boolean labelMissingGroundTruth;
    /**
     * The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: "projects/{project_id}/models/{model_name}/versions/{version_name}" There can only be one evaluation job per model version.
     * 
     */
    private final String modelVersion;
    /**
     * After you create a job, Data Labeling Service assigns a name to the job with the following format: "projects/{project_id}/evaluationJobs/ {evaluation_job_id}"
     * 
     */
    private final String name;
    /**
     * Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
     * 
     */
    private final String schedule;
    /**
     * Describes the current state of the job.
     * 
     */
    private final String state;

    @OutputCustomType.Constructor({"annotationSpecSet","attempts","createTime","description","evaluationJobConfig","labelMissingGroundTruth","modelVersion","name","schedule","state"})
    private GetEvaluationJobResult(
        String annotationSpecSet,
        List<GoogleCloudDatalabelingV1beta1AttemptResponse> attempts,
        String createTime,
        String description,
        GoogleCloudDatalabelingV1beta1EvaluationJobConfigResponse evaluationJobConfig,
        Boolean labelMissingGroundTruth,
        String modelVersion,
        String name,
        String schedule,
        String state) {
        this.annotationSpecSet = Objects.requireNonNull(annotationSpecSet);
        this.attempts = Objects.requireNonNull(attempts);
        this.createTime = Objects.requireNonNull(createTime);
        this.description = Objects.requireNonNull(description);
        this.evaluationJobConfig = Objects.requireNonNull(evaluationJobConfig);
        this.labelMissingGroundTruth = Objects.requireNonNull(labelMissingGroundTruth);
        this.modelVersion = Objects.requireNonNull(modelVersion);
        this.name = Objects.requireNonNull(name);
        this.schedule = Objects.requireNonNull(schedule);
        this.state = Objects.requireNonNull(state);
    }

    /**
     * Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: "projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}"
     * 
    */
    public String getAnnotationSpecSet() {
        return this.annotationSpecSet;
    }
    /**
     * Every time the evaluation job runs and an error occurs, the failed attempt is appended to this array.
     * 
    */
    public List<GoogleCloudDatalabelingV1beta1AttemptResponse> getAttempts() {
        return this.attempts;
    }
    /**
     * Timestamp of when this evaluation job was created.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * Description of the job. The description can be up to 25,000 characters long.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * Configuration details for the evaluation job.
     * 
    */
    public GoogleCloudDatalabelingV1beta1EvaluationJobConfigResponse getEvaluationJobConfig() {
        return this.evaluationJobConfig;
    }
    /**
     * Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.
     * 
    */
    public Boolean getLabelMissingGroundTruth() {
        return this.labelMissingGroundTruth;
    }
    /**
     * The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: "projects/{project_id}/models/{model_name}/versions/{version_name}" There can only be one evaluation job per model version.
     * 
    */
    public String getModelVersion() {
        return this.modelVersion;
    }
    /**
     * After you create a job, Data Labeling Service assigns a name to the job with the following format: "projects/{project_id}/evaluationJobs/ {evaluation_job_id}"
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
     * 
    */
    public String getSchedule() {
        return this.schedule;
    }
    /**
     * Describes the current state of the job.
     * 
    */
    public String getState() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEvaluationJobResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String annotationSpecSet;
        private List<GoogleCloudDatalabelingV1beta1AttemptResponse> attempts;
        private String createTime;
        private String description;
        private GoogleCloudDatalabelingV1beta1EvaluationJobConfigResponse evaluationJobConfig;
        private Boolean labelMissingGroundTruth;
        private String modelVersion;
        private String name;
        private String schedule;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEvaluationJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotationSpecSet = defaults.annotationSpecSet;
    	      this.attempts = defaults.attempts;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.evaluationJobConfig = defaults.evaluationJobConfig;
    	      this.labelMissingGroundTruth = defaults.labelMissingGroundTruth;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.schedule = defaults.schedule;
    	      this.state = defaults.state;
        }

        public Builder setAnnotationSpecSet(String annotationSpecSet) {
            this.annotationSpecSet = Objects.requireNonNull(annotationSpecSet);
            return this;
        }

        public Builder setAttempts(List<GoogleCloudDatalabelingV1beta1AttemptResponse> attempts) {
            this.attempts = Objects.requireNonNull(attempts);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEvaluationJobConfig(GoogleCloudDatalabelingV1beta1EvaluationJobConfigResponse evaluationJobConfig) {
            this.evaluationJobConfig = Objects.requireNonNull(evaluationJobConfig);
            return this;
        }

        public Builder setLabelMissingGroundTruth(Boolean labelMissingGroundTruth) {
            this.labelMissingGroundTruth = Objects.requireNonNull(labelMissingGroundTruth);
            return this;
        }

        public Builder setModelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setSchedule(String schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public GetEvaluationJobResult build() {
            return new GetEvaluationJobResult(annotationSpecSet, attempts, createTime, description, evaluationJobConfig, labelMissingGroundTruth, modelVersion, name, schedule, state);
        }
    }
}
