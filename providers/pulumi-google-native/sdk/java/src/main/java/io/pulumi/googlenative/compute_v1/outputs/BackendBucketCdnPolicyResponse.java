// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_v1.outputs.BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendBucketCdnPolicyCacheKeyPolicyResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendBucketCdnPolicyNegativeCachingPolicyResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class BackendBucketCdnPolicyResponse {
    private final List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse> bypassCacheOnRequestHeaders;
    private final BackendBucketCdnPolicyCacheKeyPolicyResponse cacheKeyPolicy;
    private final String cacheMode;
    private final Integer clientTtl;
    private final Integer defaultTtl;
    private final Integer maxTtl;
    private final Boolean negativeCaching;
    private final List<BackendBucketCdnPolicyNegativeCachingPolicyResponse> negativeCachingPolicy;
    private final Boolean requestCoalescing;
    private final Integer serveWhileStale;
    private final String signedUrlCacheMaxAgeSec;
    private final List<String> signedUrlKeyNames;

    @OutputCustomType.Constructor({"bypassCacheOnRequestHeaders","cacheKeyPolicy","cacheMode","clientTtl","defaultTtl","maxTtl","negativeCaching","negativeCachingPolicy","requestCoalescing","serveWhileStale","signedUrlCacheMaxAgeSec","signedUrlKeyNames"})
    private BackendBucketCdnPolicyResponse(
        List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse> bypassCacheOnRequestHeaders,
        BackendBucketCdnPolicyCacheKeyPolicyResponse cacheKeyPolicy,
        String cacheMode,
        Integer clientTtl,
        Integer defaultTtl,
        Integer maxTtl,
        Boolean negativeCaching,
        List<BackendBucketCdnPolicyNegativeCachingPolicyResponse> negativeCachingPolicy,
        Boolean requestCoalescing,
        Integer serveWhileStale,
        String signedUrlCacheMaxAgeSec,
        List<String> signedUrlKeyNames) {
        this.bypassCacheOnRequestHeaders = Objects.requireNonNull(bypassCacheOnRequestHeaders);
        this.cacheKeyPolicy = Objects.requireNonNull(cacheKeyPolicy);
        this.cacheMode = Objects.requireNonNull(cacheMode);
        this.clientTtl = Objects.requireNonNull(clientTtl);
        this.defaultTtl = Objects.requireNonNull(defaultTtl);
        this.maxTtl = Objects.requireNonNull(maxTtl);
        this.negativeCaching = Objects.requireNonNull(negativeCaching);
        this.negativeCachingPolicy = Objects.requireNonNull(negativeCachingPolicy);
        this.requestCoalescing = Objects.requireNonNull(requestCoalescing);
        this.serveWhileStale = Objects.requireNonNull(serveWhileStale);
        this.signedUrlCacheMaxAgeSec = Objects.requireNonNull(signedUrlCacheMaxAgeSec);
        this.signedUrlKeyNames = Objects.requireNonNull(signedUrlKeyNames);
    }

    public List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse> getBypassCacheOnRequestHeaders() {
        return this.bypassCacheOnRequestHeaders;
    }
    public BackendBucketCdnPolicyCacheKeyPolicyResponse getCacheKeyPolicy() {
        return this.cacheKeyPolicy;
    }
    public String getCacheMode() {
        return this.cacheMode;
    }
    public Integer getClientTtl() {
        return this.clientTtl;
    }
    public Integer getDefaultTtl() {
        return this.defaultTtl;
    }
    public Integer getMaxTtl() {
        return this.maxTtl;
    }
    public Boolean getNegativeCaching() {
        return this.negativeCaching;
    }
    public List<BackendBucketCdnPolicyNegativeCachingPolicyResponse> getNegativeCachingPolicy() {
        return this.negativeCachingPolicy;
    }
    public Boolean getRequestCoalescing() {
        return this.requestCoalescing;
    }
    public Integer getServeWhileStale() {
        return this.serveWhileStale;
    }
    public String getSignedUrlCacheMaxAgeSec() {
        return this.signedUrlCacheMaxAgeSec;
    }
    public List<String> getSignedUrlKeyNames() {
        return this.signedUrlKeyNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendBucketCdnPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse> bypassCacheOnRequestHeaders;
        private BackendBucketCdnPolicyCacheKeyPolicyResponse cacheKeyPolicy;
        private String cacheMode;
        private Integer clientTtl;
        private Integer defaultTtl;
        private Integer maxTtl;
        private Boolean negativeCaching;
        private List<BackendBucketCdnPolicyNegativeCachingPolicyResponse> negativeCachingPolicy;
        private Boolean requestCoalescing;
        private Integer serveWhileStale;
        private String signedUrlCacheMaxAgeSec;
        private List<String> signedUrlKeyNames;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendBucketCdnPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypassCacheOnRequestHeaders = defaults.bypassCacheOnRequestHeaders;
    	      this.cacheKeyPolicy = defaults.cacheKeyPolicy;
    	      this.cacheMode = defaults.cacheMode;
    	      this.clientTtl = defaults.clientTtl;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.maxTtl = defaults.maxTtl;
    	      this.negativeCaching = defaults.negativeCaching;
    	      this.negativeCachingPolicy = defaults.negativeCachingPolicy;
    	      this.requestCoalescing = defaults.requestCoalescing;
    	      this.serveWhileStale = defaults.serveWhileStale;
    	      this.signedUrlCacheMaxAgeSec = defaults.signedUrlCacheMaxAgeSec;
    	      this.signedUrlKeyNames = defaults.signedUrlKeyNames;
        }

        public Builder setBypassCacheOnRequestHeaders(List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse> bypassCacheOnRequestHeaders) {
            this.bypassCacheOnRequestHeaders = Objects.requireNonNull(bypassCacheOnRequestHeaders);
            return this;
        }

        public Builder setCacheKeyPolicy(BackendBucketCdnPolicyCacheKeyPolicyResponse cacheKeyPolicy) {
            this.cacheKeyPolicy = Objects.requireNonNull(cacheKeyPolicy);
            return this;
        }

        public Builder setCacheMode(String cacheMode) {
            this.cacheMode = Objects.requireNonNull(cacheMode);
            return this;
        }

        public Builder setClientTtl(Integer clientTtl) {
            this.clientTtl = Objects.requireNonNull(clientTtl);
            return this;
        }

        public Builder setDefaultTtl(Integer defaultTtl) {
            this.defaultTtl = Objects.requireNonNull(defaultTtl);
            return this;
        }

        public Builder setMaxTtl(Integer maxTtl) {
            this.maxTtl = Objects.requireNonNull(maxTtl);
            return this;
        }

        public Builder setNegativeCaching(Boolean negativeCaching) {
            this.negativeCaching = Objects.requireNonNull(negativeCaching);
            return this;
        }

        public Builder setNegativeCachingPolicy(List<BackendBucketCdnPolicyNegativeCachingPolicyResponse> negativeCachingPolicy) {
            this.negativeCachingPolicy = Objects.requireNonNull(negativeCachingPolicy);
            return this;
        }

        public Builder setRequestCoalescing(Boolean requestCoalescing) {
            this.requestCoalescing = Objects.requireNonNull(requestCoalescing);
            return this;
        }

        public Builder setServeWhileStale(Integer serveWhileStale) {
            this.serveWhileStale = Objects.requireNonNull(serveWhileStale);
            return this;
        }

        public Builder setSignedUrlCacheMaxAgeSec(String signedUrlCacheMaxAgeSec) {
            this.signedUrlCacheMaxAgeSec = Objects.requireNonNull(signedUrlCacheMaxAgeSec);
            return this;
        }

        public Builder setSignedUrlKeyNames(List<String> signedUrlKeyNames) {
            this.signedUrlKeyNames = Objects.requireNonNull(signedUrlKeyNames);
            return this;
        }

        public BackendBucketCdnPolicyResponse build() {
            return new BackendBucketCdnPolicyResponse(bypassCacheOnRequestHeaders, cacheKeyPolicy, cacheMode, clientTtl, defaultTtl, maxTtl, negativeCaching, negativeCachingPolicy, requestCoalescing, serveWhileStale, signedUrlCacheMaxAgeSec, signedUrlKeyNames);
        }
    }
}
