// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sourcerepo_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration to automatically mirror a repository from another hosting service, for example GitHub or Bitbucket.
 * 
 */
public final class MirrorConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final MirrorConfigArgs Empty = new MirrorConfigArgs();

    /**
     * ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.
     * 
     */
    @Import(name="deployKeyId")
      private final @Nullable Output<String> deployKeyId;

    public Output<String> getDeployKeyId() {
        return this.deployKeyId == null ? Codegen.empty() : this.deployKeyId;
    }

    /**
     * URL of the main repository at the other hosting service.
     * 
     */
    @Import(name="url")
      private final @Nullable Output<String> url;

    public Output<String> getUrl() {
        return this.url == null ? Codegen.empty() : this.url;
    }

    /**
     * ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.
     * 
     */
    @Import(name="webhookId")
      private final @Nullable Output<String> webhookId;

    public Output<String> getWebhookId() {
        return this.webhookId == null ? Codegen.empty() : this.webhookId;
    }

    public MirrorConfigArgs(
        @Nullable Output<String> deployKeyId,
        @Nullable Output<String> url,
        @Nullable Output<String> webhookId) {
        this.deployKeyId = deployKeyId;
        this.url = url;
        this.webhookId = webhookId;
    }

    private MirrorConfigArgs() {
        this.deployKeyId = Codegen.empty();
        this.url = Codegen.empty();
        this.webhookId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MirrorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> deployKeyId;
        private @Nullable Output<String> url;
        private @Nullable Output<String> webhookId;

        public Builder() {
    	      // Empty
        }

        public Builder(MirrorConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deployKeyId = defaults.deployKeyId;
    	      this.url = defaults.url;
    	      this.webhookId = defaults.webhookId;
        }

        public Builder deployKeyId(@Nullable Output<String> deployKeyId) {
            this.deployKeyId = deployKeyId;
            return this;
        }
        public Builder deployKeyId(@Nullable String deployKeyId) {
            this.deployKeyId = Codegen.ofNullable(deployKeyId);
            return this;
        }
        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }
        public Builder url(@Nullable String url) {
            this.url = Codegen.ofNullable(url);
            return this;
        }
        public Builder webhookId(@Nullable Output<String> webhookId) {
            this.webhookId = webhookId;
            return this;
        }
        public Builder webhookId(@Nullable String webhookId) {
            this.webhookId = Codegen.ofNullable(webhookId);
            return this;
        }        public MirrorConfigArgs build() {
            return new MirrorConfigArgs(deployKeyId, url, webhookId);
        }
    }
}
