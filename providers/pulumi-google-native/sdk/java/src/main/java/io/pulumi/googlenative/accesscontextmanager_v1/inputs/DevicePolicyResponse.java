// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.accesscontextmanager_v1.inputs.OsConstraintResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DevicePolicyResponse extends io.pulumi.resources.InvokeArgs {

    public static final DevicePolicyResponse Empty = new DevicePolicyResponse();

    @InputImport(name="allowedDeviceManagementLevels", required=true)
    private final List<String> allowedDeviceManagementLevels;

    public List<String> getAllowedDeviceManagementLevels() {
        return this.allowedDeviceManagementLevels;
    }

    @InputImport(name="allowedEncryptionStatuses", required=true)
    private final List<String> allowedEncryptionStatuses;

    public List<String> getAllowedEncryptionStatuses() {
        return this.allowedEncryptionStatuses;
    }

    @InputImport(name="osConstraints", required=true)
    private final List<OsConstraintResponse> osConstraints;

    public List<OsConstraintResponse> getOsConstraints() {
        return this.osConstraints;
    }

    @InputImport(name="requireAdminApproval", required=true)
    private final Boolean requireAdminApproval;

    public Boolean getRequireAdminApproval() {
        return this.requireAdminApproval;
    }

    @InputImport(name="requireCorpOwned", required=true)
    private final Boolean requireCorpOwned;

    public Boolean getRequireCorpOwned() {
        return this.requireCorpOwned;
    }

    @InputImport(name="requireScreenlock", required=true)
    private final Boolean requireScreenlock;

    public Boolean getRequireScreenlock() {
        return this.requireScreenlock;
    }

    public DevicePolicyResponse(
        List<String> allowedDeviceManagementLevels,
        List<String> allowedEncryptionStatuses,
        List<OsConstraintResponse> osConstraints,
        Boolean requireAdminApproval,
        Boolean requireCorpOwned,
        Boolean requireScreenlock) {
        this.allowedDeviceManagementLevels = Objects.requireNonNull(allowedDeviceManagementLevels, "expected parameter 'allowedDeviceManagementLevels' to be non-null");
        this.allowedEncryptionStatuses = Objects.requireNonNull(allowedEncryptionStatuses, "expected parameter 'allowedEncryptionStatuses' to be non-null");
        this.osConstraints = Objects.requireNonNull(osConstraints, "expected parameter 'osConstraints' to be non-null");
        this.requireAdminApproval = Objects.requireNonNull(requireAdminApproval, "expected parameter 'requireAdminApproval' to be non-null");
        this.requireCorpOwned = Objects.requireNonNull(requireCorpOwned, "expected parameter 'requireCorpOwned' to be non-null");
        this.requireScreenlock = Objects.requireNonNull(requireScreenlock, "expected parameter 'requireScreenlock' to be non-null");
    }

    private DevicePolicyResponse() {
        this.allowedDeviceManagementLevels = List.of();
        this.allowedEncryptionStatuses = List.of();
        this.osConstraints = List.of();
        this.requireAdminApproval = null;
        this.requireCorpOwned = null;
        this.requireScreenlock = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DevicePolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> allowedDeviceManagementLevels;
        private List<String> allowedEncryptionStatuses;
        private List<OsConstraintResponse> osConstraints;
        private Boolean requireAdminApproval;
        private Boolean requireCorpOwned;
        private Boolean requireScreenlock;

        public Builder() {
    	      // Empty
        }

        public Builder(DevicePolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedDeviceManagementLevels = defaults.allowedDeviceManagementLevels;
    	      this.allowedEncryptionStatuses = defaults.allowedEncryptionStatuses;
    	      this.osConstraints = defaults.osConstraints;
    	      this.requireAdminApproval = defaults.requireAdminApproval;
    	      this.requireCorpOwned = defaults.requireCorpOwned;
    	      this.requireScreenlock = defaults.requireScreenlock;
        }

        public Builder setAllowedDeviceManagementLevels(List<String> allowedDeviceManagementLevels) {
            this.allowedDeviceManagementLevels = Objects.requireNonNull(allowedDeviceManagementLevels);
            return this;
        }

        public Builder setAllowedEncryptionStatuses(List<String> allowedEncryptionStatuses) {
            this.allowedEncryptionStatuses = Objects.requireNonNull(allowedEncryptionStatuses);
            return this;
        }

        public Builder setOsConstraints(List<OsConstraintResponse> osConstraints) {
            this.osConstraints = Objects.requireNonNull(osConstraints);
            return this;
        }

        public Builder setRequireAdminApproval(Boolean requireAdminApproval) {
            this.requireAdminApproval = Objects.requireNonNull(requireAdminApproval);
            return this;
        }

        public Builder setRequireCorpOwned(Boolean requireCorpOwned) {
            this.requireCorpOwned = Objects.requireNonNull(requireCorpOwned);
            return this;
        }

        public Builder setRequireScreenlock(Boolean requireScreenlock) {
            this.requireScreenlock = Objects.requireNonNull(requireScreenlock);
            return this;
        }

        public DevicePolicyResponse build() {
            return new DevicePolicyResponse(allowedDeviceManagementLevels, allowedEncryptionStatuses, osConstraints, requireAdminApproval, requireCorpOwned, requireScreenlock);
        }
    }
}
