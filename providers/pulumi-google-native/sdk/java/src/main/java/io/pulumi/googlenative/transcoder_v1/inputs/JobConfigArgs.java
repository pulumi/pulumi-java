// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.transcoder_v1.inputs.AdBreakArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.EditAtomArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.ElementaryStreamArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.InputArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.ManifestArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.MuxStreamArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.OutputArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.OverlayArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.PubsubDestinationArgs;
import io.pulumi.googlenative.transcoder_v1.inputs.SpriteSheetArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Job configuration
 * 
 */
public final class JobConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobConfigArgs Empty = new JobConfigArgs();

    /**
     * List of ad breaks. Specifies where to insert ad break tags in the output manifests.
     * 
     */
    @InputImport(name="adBreaks")
      private final @Nullable Output<List<AdBreakArgs>> adBreaks;

    public Output<List<AdBreakArgs>> getAdBreaks() {
        return this.adBreaks == null ? Output.empty() : this.adBreaks;
    }

    /**
     * List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
     * 
     */
    @InputImport(name="editList")
      private final @Nullable Output<List<EditAtomArgs>> editList;

    public Output<List<EditAtomArgs>> getEditList() {
        return this.editList == null ? Output.empty() : this.editList;
    }

    /**
     * List of elementary streams.
     * 
     */
    @InputImport(name="elementaryStreams")
      private final @Nullable Output<List<ElementaryStreamArgs>> elementaryStreams;

    public Output<List<ElementaryStreamArgs>> getElementaryStreams() {
        return this.elementaryStreams == null ? Output.empty() : this.elementaryStreams;
    }

    /**
     * List of input assets stored in Cloud Storage.
     * 
     */
    @InputImport(name="inputs")
      private final @Nullable Output<List<InputArgs>> inputs;

    public Output<List<InputArgs>> getInputs() {
        return this.inputs == null ? Output.empty() : this.inputs;
    }

    /**
     * List of output manifests.
     * 
     */
    @InputImport(name="manifests")
      private final @Nullable Output<List<ManifestArgs>> manifests;

    public Output<List<ManifestArgs>> getManifests() {
        return this.manifests == null ? Output.empty() : this.manifests;
    }

    /**
     * List of multiplexing settings for output streams.
     * 
     */
    @InputImport(name="muxStreams")
      private final @Nullable Output<List<MuxStreamArgs>> muxStreams;

    public Output<List<MuxStreamArgs>> getMuxStreams() {
        return this.muxStreams == null ? Output.empty() : this.muxStreams;
    }

    /**
     * Output configuration.
     * 
     */
    @InputImport(name="output")
      private final @Nullable Output<OutputArgs> output;

    public Output<OutputArgs> getOutput() {
        return this.output == null ? Output.empty() : this.output;
    }

    /**
     * List of overlays on the output video, in descending Z-order.
     * 
     */
    @InputImport(name="overlays")
      private final @Nullable Output<List<OverlayArgs>> overlays;

    public Output<List<OverlayArgs>> getOverlays() {
        return this.overlays == null ? Output.empty() : this.overlays;
    }

    /**
     * Destination on Pub/Sub.
     * 
     */
    @InputImport(name="pubsubDestination")
      private final @Nullable Output<PubsubDestinationArgs> pubsubDestination;

    public Output<PubsubDestinationArgs> getPubsubDestination() {
        return this.pubsubDestination == null ? Output.empty() : this.pubsubDestination;
    }

    /**
     * List of output sprite sheets.
     * 
     */
    @InputImport(name="spriteSheets")
      private final @Nullable Output<List<SpriteSheetArgs>> spriteSheets;

    public Output<List<SpriteSheetArgs>> getSpriteSheets() {
        return this.spriteSheets == null ? Output.empty() : this.spriteSheets;
    }

    public JobConfigArgs(
        @Nullable Output<List<AdBreakArgs>> adBreaks,
        @Nullable Output<List<EditAtomArgs>> editList,
        @Nullable Output<List<ElementaryStreamArgs>> elementaryStreams,
        @Nullable Output<List<InputArgs>> inputs,
        @Nullable Output<List<ManifestArgs>> manifests,
        @Nullable Output<List<MuxStreamArgs>> muxStreams,
        @Nullable Output<OutputArgs> output,
        @Nullable Output<List<OverlayArgs>> overlays,
        @Nullable Output<PubsubDestinationArgs> pubsubDestination,
        @Nullable Output<List<SpriteSheetArgs>> spriteSheets) {
        this.adBreaks = adBreaks;
        this.editList = editList;
        this.elementaryStreams = elementaryStreams;
        this.inputs = inputs;
        this.manifests = manifests;
        this.muxStreams = muxStreams;
        this.output = output;
        this.overlays = overlays;
        this.pubsubDestination = pubsubDestination;
        this.spriteSheets = spriteSheets;
    }

    private JobConfigArgs() {
        this.adBreaks = Output.empty();
        this.editList = Output.empty();
        this.elementaryStreams = Output.empty();
        this.inputs = Output.empty();
        this.manifests = Output.empty();
        this.muxStreams = Output.empty();
        this.output = Output.empty();
        this.overlays = Output.empty();
        this.pubsubDestination = Output.empty();
        this.spriteSheets = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AdBreakArgs>> adBreaks;
        private @Nullable Output<List<EditAtomArgs>> editList;
        private @Nullable Output<List<ElementaryStreamArgs>> elementaryStreams;
        private @Nullable Output<List<InputArgs>> inputs;
        private @Nullable Output<List<ManifestArgs>> manifests;
        private @Nullable Output<List<MuxStreamArgs>> muxStreams;
        private @Nullable Output<OutputArgs> output;
        private @Nullable Output<List<OverlayArgs>> overlays;
        private @Nullable Output<PubsubDestinationArgs> pubsubDestination;
        private @Nullable Output<List<SpriteSheetArgs>> spriteSheets;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adBreaks = defaults.adBreaks;
    	      this.editList = defaults.editList;
    	      this.elementaryStreams = defaults.elementaryStreams;
    	      this.inputs = defaults.inputs;
    	      this.manifests = defaults.manifests;
    	      this.muxStreams = defaults.muxStreams;
    	      this.output = defaults.output;
    	      this.overlays = defaults.overlays;
    	      this.pubsubDestination = defaults.pubsubDestination;
    	      this.spriteSheets = defaults.spriteSheets;
        }

        public Builder adBreaks(@Nullable Output<List<AdBreakArgs>> adBreaks) {
            this.adBreaks = adBreaks;
            return this;
        }

        public Builder adBreaks(@Nullable List<AdBreakArgs> adBreaks) {
            this.adBreaks = Output.ofNullable(adBreaks);
            return this;
        }

        public Builder editList(@Nullable Output<List<EditAtomArgs>> editList) {
            this.editList = editList;
            return this;
        }

        public Builder editList(@Nullable List<EditAtomArgs> editList) {
            this.editList = Output.ofNullable(editList);
            return this;
        }

        public Builder elementaryStreams(@Nullable Output<List<ElementaryStreamArgs>> elementaryStreams) {
            this.elementaryStreams = elementaryStreams;
            return this;
        }

        public Builder elementaryStreams(@Nullable List<ElementaryStreamArgs> elementaryStreams) {
            this.elementaryStreams = Output.ofNullable(elementaryStreams);
            return this;
        }

        public Builder inputs(@Nullable Output<List<InputArgs>> inputs) {
            this.inputs = inputs;
            return this;
        }

        public Builder inputs(@Nullable List<InputArgs> inputs) {
            this.inputs = Output.ofNullable(inputs);
            return this;
        }

        public Builder manifests(@Nullable Output<List<ManifestArgs>> manifests) {
            this.manifests = manifests;
            return this;
        }

        public Builder manifests(@Nullable List<ManifestArgs> manifests) {
            this.manifests = Output.ofNullable(manifests);
            return this;
        }

        public Builder muxStreams(@Nullable Output<List<MuxStreamArgs>> muxStreams) {
            this.muxStreams = muxStreams;
            return this;
        }

        public Builder muxStreams(@Nullable List<MuxStreamArgs> muxStreams) {
            this.muxStreams = Output.ofNullable(muxStreams);
            return this;
        }

        public Builder output(@Nullable Output<OutputArgs> output) {
            this.output = output;
            return this;
        }

        public Builder output(@Nullable OutputArgs output) {
            this.output = Output.ofNullable(output);
            return this;
        }

        public Builder overlays(@Nullable Output<List<OverlayArgs>> overlays) {
            this.overlays = overlays;
            return this;
        }

        public Builder overlays(@Nullable List<OverlayArgs> overlays) {
            this.overlays = Output.ofNullable(overlays);
            return this;
        }

        public Builder pubsubDestination(@Nullable Output<PubsubDestinationArgs> pubsubDestination) {
            this.pubsubDestination = pubsubDestination;
            return this;
        }

        public Builder pubsubDestination(@Nullable PubsubDestinationArgs pubsubDestination) {
            this.pubsubDestination = Output.ofNullable(pubsubDestination);
            return this;
        }

        public Builder spriteSheets(@Nullable Output<List<SpriteSheetArgs>> spriteSheets) {
            this.spriteSheets = spriteSheets;
            return this;
        }

        public Builder spriteSheets(@Nullable List<SpriteSheetArgs> spriteSheets) {
            this.spriteSheets = Output.ofNullable(spriteSheets);
            return this;
        }
        public JobConfigArgs build() {
            return new JobConfigArgs(adBreaks, editList, elementaryStreams, inputs, manifests, muxStreams, output, overlays, pubsubDestination, spriteSheets);
        }
    }
}
