// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ids_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.ids_v1.enums.EndpointSeverity;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * User-provided description of the endpoint
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="endpointId", required=true)
      private final Input<String> endpointId;

    public Input<String> getEndpointId() {
        return this.endpointId;
    }

    /**
     * The labels of the endpoint.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The fully qualified URL of the network to which the IDS Endpoint is attached.
     * 
     */
    @InputImport(name="network", required=true)
      private final Input<String> network;

    public Input<String> getNetwork() {
        return this.network;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="requestId")
      private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    /**
     * Lowest threat severity that this endpoint will alert on.
     * 
     */
    @InputImport(name="severity", required=true)
      private final Input<EndpointSeverity> severity;

    public Input<EndpointSeverity> getSeverity() {
        return this.severity;
    }

    /**
     * Whether the endpoint should report traffic logs in addition to threat logs.
     * 
     */
    @InputImport(name="trafficLogs")
      private final @Nullable Input<Boolean> trafficLogs;

    public Input<Boolean> getTrafficLogs() {
        return this.trafficLogs == null ? Input.empty() : this.trafficLogs;
    }

    public EndpointArgs(
        @Nullable Input<String> description,
        Input<String> endpointId,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        Input<String> network,
        @Nullable Input<String> project,
        @Nullable Input<String> requestId,
        Input<EndpointSeverity> severity,
        @Nullable Input<Boolean> trafficLogs) {
        this.description = description;
        this.endpointId = Objects.requireNonNull(endpointId, "expected parameter 'endpointId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.project = project;
        this.requestId = requestId;
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.trafficLogs = trafficLogs;
    }

    private EndpointArgs() {
        this.description = Input.empty();
        this.endpointId = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.network = Input.empty();
        this.project = Input.empty();
        this.requestId = Input.empty();
        this.severity = Input.empty();
        this.trafficLogs = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private Input<String> endpointId;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private Input<String> network;
        private @Nullable Input<String> project;
        private @Nullable Input<String> requestId;
        private Input<EndpointSeverity> severity;
        private @Nullable Input<Boolean> trafficLogs;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.endpointId = defaults.endpointId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.severity = defaults.severity;
    	      this.trafficLogs = defaults.trafficLogs;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder endpointId(Input<String> endpointId) {
            this.endpointId = Objects.requireNonNull(endpointId);
            return this;
        }

        public Builder endpointId(String endpointId) {
            this.endpointId = Input.of(Objects.requireNonNull(endpointId));
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder network(Input<String> network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder network(String network) {
            this.network = Input.of(Objects.requireNonNull(network));
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder requestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public Builder severity(Input<EndpointSeverity> severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }

        public Builder severity(EndpointSeverity severity) {
            this.severity = Input.of(Objects.requireNonNull(severity));
            return this;
        }

        public Builder trafficLogs(@Nullable Input<Boolean> trafficLogs) {
            this.trafficLogs = trafficLogs;
            return this;
        }

        public Builder trafficLogs(@Nullable Boolean trafficLogs) {
            this.trafficLogs = Input.ofNullable(trafficLogs);
            return this;
        }
        public EndpointArgs build() {
            return new EndpointArgs(description, endpointId, labels, location, network, project, requestId, severity, trafficLogs);
        }
    }
}
