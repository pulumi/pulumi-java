// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.DisplayDataResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.ExecutionStageSummaryResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.TransformSummaryResponse;
import java.util.List;
import java.util.Objects;

@CustomType
public final class PipelineDescriptionResponse {
    /**
     * Pipeline level display data.
     * 
     */
    private final List<DisplayDataResponse> displayData;
    /**
     * Description of each stage of execution of the pipeline.
     * 
     */
    private final List<ExecutionStageSummaryResponse> executionPipelineStage;
    /**
     * Description of each transform in the pipeline and collections between them.
     * 
     */
    private final List<TransformSummaryResponse> originalPipelineTransform;

    @CustomType.Constructor
    private PipelineDescriptionResponse(
        @CustomType.Parameter("displayData") List<DisplayDataResponse> displayData,
        @CustomType.Parameter("executionPipelineStage") List<ExecutionStageSummaryResponse> executionPipelineStage,
        @CustomType.Parameter("originalPipelineTransform") List<TransformSummaryResponse> originalPipelineTransform) {
        this.displayData = displayData;
        this.executionPipelineStage = executionPipelineStage;
        this.originalPipelineTransform = originalPipelineTransform;
    }

    /**
     * Pipeline level display data.
     * 
    */
    public List<DisplayDataResponse> displayData() {
        return this.displayData;
    }
    /**
     * Description of each stage of execution of the pipeline.
     * 
    */
    public List<ExecutionStageSummaryResponse> executionPipelineStage() {
        return this.executionPipelineStage;
    }
    /**
     * Description of each transform in the pipeline and collections between them.
     * 
    */
    public List<TransformSummaryResponse> originalPipelineTransform() {
        return this.originalPipelineTransform;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<DisplayDataResponse> displayData;
        private List<ExecutionStageSummaryResponse> executionPipelineStage;
        private List<TransformSummaryResponse> originalPipelineTransform;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayData = defaults.displayData;
    	      this.executionPipelineStage = defaults.executionPipelineStage;
    	      this.originalPipelineTransform = defaults.originalPipelineTransform;
        }

        public Builder displayData(List<DisplayDataResponse> displayData) {
            this.displayData = Objects.requireNonNull(displayData);
            return this;
        }
        public Builder displayData(DisplayDataResponse... displayData) {
            return displayData(List.of(displayData));
        }
        public Builder executionPipelineStage(List<ExecutionStageSummaryResponse> executionPipelineStage) {
            this.executionPipelineStage = Objects.requireNonNull(executionPipelineStage);
            return this;
        }
        public Builder executionPipelineStage(ExecutionStageSummaryResponse... executionPipelineStage) {
            return executionPipelineStage(List.of(executionPipelineStage));
        }
        public Builder originalPipelineTransform(List<TransformSummaryResponse> originalPipelineTransform) {
            this.originalPipelineTransform = Objects.requireNonNull(originalPipelineTransform);
            return this;
        }
        public Builder originalPipelineTransform(TransformSummaryResponse... originalPipelineTransform) {
            return originalPipelineTransform(List.of(originalPipelineTransform));
        }        public PipelineDescriptionResponse build() {
            return new PipelineDescriptionResponse(displayData, executionPipelineStage, originalPipelineTransform);
        }
    }
}
