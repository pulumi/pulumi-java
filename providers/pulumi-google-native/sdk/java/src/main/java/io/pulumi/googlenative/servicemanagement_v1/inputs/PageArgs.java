// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a documentation page. A page can contain subpages to represent nested documentation set structure.
 * 
 */
public final class PageArgs extends io.pulumi.resources.ResourceArgs {

    public static final PageArgs Empty = new PageArgs();

    /**
     * The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file. The content can be used to produce the documentation page such as HTML format page.
     * 
     */
    @Import(name="content")
      private final @Nullable Output<String> content;

    public Output<String> getContent() {
        return this.content == null ? Codegen.empty() : this.content;
    }

    /**
     * The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Subpages of this page. The order of subpages specified here will be honored in the generated docset.
     * 
     */
    @Import(name="subpages")
      private final @Nullable Output<List<PageArgs>> subpages;

    public Output<List<PageArgs>> getSubpages() {
        return this.subpages == null ? Codegen.empty() : this.subpages;
    }

    public PageArgs(
        @Nullable Output<String> content,
        @Nullable Output<String> name,
        @Nullable Output<List<PageArgs>> subpages) {
        this.content = content;
        this.name = name;
        this.subpages = subpages;
    }

    private PageArgs() {
        this.content = Codegen.empty();
        this.name = Codegen.empty();
        this.subpages = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> content;
        private @Nullable Output<String> name;
        private @Nullable Output<List<PageArgs>> subpages;

        public Builder() {
    	      // Empty
        }

        public Builder(PageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.name = defaults.name;
    	      this.subpages = defaults.subpages;
        }

        public Builder content(@Nullable Output<String> content) {
            this.content = content;
            return this;
        }
        public Builder content(@Nullable String content) {
            this.content = Codegen.ofNullable(content);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder subpages(@Nullable Output<List<PageArgs>> subpages) {
            this.subpages = subpages;
            return this;
        }
        public Builder subpages(@Nullable List<PageArgs> subpages) {
            this.subpages = Codegen.ofNullable(subpages);
            return this;
        }
        public Builder subpages(PageArgs... subpages) {
            return subpages(List.of(subpages));
        }        public PageArgs build() {
            return new PageArgs(content, name, subpages);
        }
    }
}
