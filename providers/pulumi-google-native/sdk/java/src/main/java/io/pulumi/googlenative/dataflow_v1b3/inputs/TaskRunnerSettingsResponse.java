// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.dataflow_v1b3.inputs.WorkerSettingsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Taskrunner configuration settings.
 * 
 */
public final class TaskRunnerSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final TaskRunnerSettingsResponse Empty = new TaskRunnerSettingsResponse();

    /**
     * Whether to also send taskrunner log info to stderr.
     * 
     */
    @InputImport(name="alsologtostderr", required=true)
      private final Boolean alsologtostderr;

    public Boolean getAlsologtostderr() {
        return this.alsologtostderr;
    }

    /**
     * The location on the worker for task-specific subdirectories.
     * 
     */
    @InputImport(name="baseTaskDir", required=true)
      private final String baseTaskDir;

    public String getBaseTaskDir() {
        return this.baseTaskDir;
    }

    /**
     * The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
     * 
     */
    @InputImport(name="baseUrl", required=true)
      private final String baseUrl;

    public String getBaseUrl() {
        return this.baseUrl;
    }

    /**
     * The file to store preprocessing commands in.
     * 
     */
    @InputImport(name="commandlinesFileName", required=true)
      private final String commandlinesFileName;

    public String getCommandlinesFileName() {
        return this.commandlinesFileName;
    }

    /**
     * Whether to continue taskrunner if an exception is hit.
     * 
     */
    @InputImport(name="continueOnException", required=true)
      private final Boolean continueOnException;

    public Boolean getContinueOnException() {
        return this.continueOnException;
    }

    /**
     * The API version of endpoint, e.g. "v1b3"
     * 
     */
    @InputImport(name="dataflowApiVersion", required=true)
      private final String dataflowApiVersion;

    public String getDataflowApiVersion() {
        return this.dataflowApiVersion;
    }

    /**
     * The command to launch the worker harness.
     * 
     */
    @InputImport(name="harnessCommand", required=true)
      private final String harnessCommand;

    public String getHarnessCommand() {
        return this.harnessCommand;
    }

    /**
     * The suggested backend language.
     * 
     */
    @InputImport(name="languageHint", required=true)
      private final String languageHint;

    public String getLanguageHint() {
        return this.languageHint;
    }

    /**
     * The directory on the VM to store logs.
     * 
     */
    @InputImport(name="logDir", required=true)
      private final String logDir;

    public String getLogDir() {
        return this.logDir;
    }

    /**
     * Whether to send taskrunner log info to Google Compute Engine VM serial console.
     * 
     */
    @InputImport(name="logToSerialconsole", required=true)
      private final Boolean logToSerialconsole;

    public Boolean getLogToSerialconsole() {
        return this.logToSerialconsole;
    }

    /**
     * Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    @InputImport(name="logUploadLocation", required=true)
      private final String logUploadLocation;

    public String getLogUploadLocation() {
        return this.logUploadLocation;
    }

    /**
     * The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
     * 
     */
    @InputImport(name="oauthScopes", required=true)
      private final List<String> oauthScopes;

    public List<String> getOauthScopes() {
        return this.oauthScopes;
    }

    /**
     * The settings to pass to the parallel worker harness.
     * 
     */
    @InputImport(name="parallelWorkerSettings", required=true)
      private final WorkerSettingsResponse parallelWorkerSettings;

    public WorkerSettingsResponse getParallelWorkerSettings() {
        return this.parallelWorkerSettings;
    }

    /**
     * The streaming worker main class name.
     * 
     */
    @InputImport(name="streamingWorkerMainClass", required=true)
      private final String streamingWorkerMainClass;

    public String getStreamingWorkerMainClass() {
        return this.streamingWorkerMainClass;
    }

    /**
     * The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
     * 
     */
    @InputImport(name="taskGroup", required=true)
      private final String taskGroup;

    public String getTaskGroup() {
        return this.taskGroup;
    }

    /**
     * The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
     * 
     */
    @InputImport(name="taskUser", required=true)
      private final String taskUser;

    public String getTaskUser() {
        return this.taskUser;
    }

    /**
     * The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    @InputImport(name="tempStoragePrefix", required=true)
      private final String tempStoragePrefix;

    public String getTempStoragePrefix() {
        return this.tempStoragePrefix;
    }

    /**
     * The ID string of the VM.
     * 
     */
    @InputImport(name="vmId", required=true)
      private final String vmId;

    public String getVmId() {
        return this.vmId;
    }

    /**
     * The file to store the workflow in.
     * 
     */
    @InputImport(name="workflowFileName", required=true)
      private final String workflowFileName;

    public String getWorkflowFileName() {
        return this.workflowFileName;
    }

    public TaskRunnerSettingsResponse(
        Boolean alsologtostderr,
        String baseTaskDir,
        String baseUrl,
        String commandlinesFileName,
        Boolean continueOnException,
        String dataflowApiVersion,
        String harnessCommand,
        String languageHint,
        String logDir,
        Boolean logToSerialconsole,
        String logUploadLocation,
        List<String> oauthScopes,
        WorkerSettingsResponse parallelWorkerSettings,
        String streamingWorkerMainClass,
        String taskGroup,
        String taskUser,
        String tempStoragePrefix,
        String vmId,
        String workflowFileName) {
        this.alsologtostderr = Objects.requireNonNull(alsologtostderr, "expected parameter 'alsologtostderr' to be non-null");
        this.baseTaskDir = Objects.requireNonNull(baseTaskDir, "expected parameter 'baseTaskDir' to be non-null");
        this.baseUrl = Objects.requireNonNull(baseUrl, "expected parameter 'baseUrl' to be non-null");
        this.commandlinesFileName = Objects.requireNonNull(commandlinesFileName, "expected parameter 'commandlinesFileName' to be non-null");
        this.continueOnException = Objects.requireNonNull(continueOnException, "expected parameter 'continueOnException' to be non-null");
        this.dataflowApiVersion = Objects.requireNonNull(dataflowApiVersion, "expected parameter 'dataflowApiVersion' to be non-null");
        this.harnessCommand = Objects.requireNonNull(harnessCommand, "expected parameter 'harnessCommand' to be non-null");
        this.languageHint = Objects.requireNonNull(languageHint, "expected parameter 'languageHint' to be non-null");
        this.logDir = Objects.requireNonNull(logDir, "expected parameter 'logDir' to be non-null");
        this.logToSerialconsole = Objects.requireNonNull(logToSerialconsole, "expected parameter 'logToSerialconsole' to be non-null");
        this.logUploadLocation = Objects.requireNonNull(logUploadLocation, "expected parameter 'logUploadLocation' to be non-null");
        this.oauthScopes = Objects.requireNonNull(oauthScopes, "expected parameter 'oauthScopes' to be non-null");
        this.parallelWorkerSettings = Objects.requireNonNull(parallelWorkerSettings, "expected parameter 'parallelWorkerSettings' to be non-null");
        this.streamingWorkerMainClass = Objects.requireNonNull(streamingWorkerMainClass, "expected parameter 'streamingWorkerMainClass' to be non-null");
        this.taskGroup = Objects.requireNonNull(taskGroup, "expected parameter 'taskGroup' to be non-null");
        this.taskUser = Objects.requireNonNull(taskUser, "expected parameter 'taskUser' to be non-null");
        this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix, "expected parameter 'tempStoragePrefix' to be non-null");
        this.vmId = Objects.requireNonNull(vmId, "expected parameter 'vmId' to be non-null");
        this.workflowFileName = Objects.requireNonNull(workflowFileName, "expected parameter 'workflowFileName' to be non-null");
    }

    private TaskRunnerSettingsResponse() {
        this.alsologtostderr = null;
        this.baseTaskDir = null;
        this.baseUrl = null;
        this.commandlinesFileName = null;
        this.continueOnException = null;
        this.dataflowApiVersion = null;
        this.harnessCommand = null;
        this.languageHint = null;
        this.logDir = null;
        this.logToSerialconsole = null;
        this.logUploadLocation = null;
        this.oauthScopes = List.of();
        this.parallelWorkerSettings = null;
        this.streamingWorkerMainClass = null;
        this.taskGroup = null;
        this.taskUser = null;
        this.tempStoragePrefix = null;
        this.vmId = null;
        this.workflowFileName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskRunnerSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean alsologtostderr;
        private String baseTaskDir;
        private String baseUrl;
        private String commandlinesFileName;
        private Boolean continueOnException;
        private String dataflowApiVersion;
        private String harnessCommand;
        private String languageHint;
        private String logDir;
        private Boolean logToSerialconsole;
        private String logUploadLocation;
        private List<String> oauthScopes;
        private WorkerSettingsResponse parallelWorkerSettings;
        private String streamingWorkerMainClass;
        private String taskGroup;
        private String taskUser;
        private String tempStoragePrefix;
        private String vmId;
        private String workflowFileName;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskRunnerSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alsologtostderr = defaults.alsologtostderr;
    	      this.baseTaskDir = defaults.baseTaskDir;
    	      this.baseUrl = defaults.baseUrl;
    	      this.commandlinesFileName = defaults.commandlinesFileName;
    	      this.continueOnException = defaults.continueOnException;
    	      this.dataflowApiVersion = defaults.dataflowApiVersion;
    	      this.harnessCommand = defaults.harnessCommand;
    	      this.languageHint = defaults.languageHint;
    	      this.logDir = defaults.logDir;
    	      this.logToSerialconsole = defaults.logToSerialconsole;
    	      this.logUploadLocation = defaults.logUploadLocation;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.parallelWorkerSettings = defaults.parallelWorkerSettings;
    	      this.streamingWorkerMainClass = defaults.streamingWorkerMainClass;
    	      this.taskGroup = defaults.taskGroup;
    	      this.taskUser = defaults.taskUser;
    	      this.tempStoragePrefix = defaults.tempStoragePrefix;
    	      this.vmId = defaults.vmId;
    	      this.workflowFileName = defaults.workflowFileName;
        }

        public Builder alsologtostderr(Boolean alsologtostderr) {
            this.alsologtostderr = Objects.requireNonNull(alsologtostderr);
            return this;
        }

        public Builder baseTaskDir(String baseTaskDir) {
            this.baseTaskDir = Objects.requireNonNull(baseTaskDir);
            return this;
        }

        public Builder baseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }

        public Builder commandlinesFileName(String commandlinesFileName) {
            this.commandlinesFileName = Objects.requireNonNull(commandlinesFileName);
            return this;
        }

        public Builder continueOnException(Boolean continueOnException) {
            this.continueOnException = Objects.requireNonNull(continueOnException);
            return this;
        }

        public Builder dataflowApiVersion(String dataflowApiVersion) {
            this.dataflowApiVersion = Objects.requireNonNull(dataflowApiVersion);
            return this;
        }

        public Builder harnessCommand(String harnessCommand) {
            this.harnessCommand = Objects.requireNonNull(harnessCommand);
            return this;
        }

        public Builder languageHint(String languageHint) {
            this.languageHint = Objects.requireNonNull(languageHint);
            return this;
        }

        public Builder logDir(String logDir) {
            this.logDir = Objects.requireNonNull(logDir);
            return this;
        }

        public Builder logToSerialconsole(Boolean logToSerialconsole) {
            this.logToSerialconsole = Objects.requireNonNull(logToSerialconsole);
            return this;
        }

        public Builder logUploadLocation(String logUploadLocation) {
            this.logUploadLocation = Objects.requireNonNull(logUploadLocation);
            return this;
        }

        public Builder oauthScopes(List<String> oauthScopes) {
            this.oauthScopes = Objects.requireNonNull(oauthScopes);
            return this;
        }

        public Builder parallelWorkerSettings(WorkerSettingsResponse parallelWorkerSettings) {
            this.parallelWorkerSettings = Objects.requireNonNull(parallelWorkerSettings);
            return this;
        }

        public Builder streamingWorkerMainClass(String streamingWorkerMainClass) {
            this.streamingWorkerMainClass = Objects.requireNonNull(streamingWorkerMainClass);
            return this;
        }

        public Builder taskGroup(String taskGroup) {
            this.taskGroup = Objects.requireNonNull(taskGroup);
            return this;
        }

        public Builder taskUser(String taskUser) {
            this.taskUser = Objects.requireNonNull(taskUser);
            return this;
        }

        public Builder tempStoragePrefix(String tempStoragePrefix) {
            this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix);
            return this;
        }

        public Builder vmId(String vmId) {
            this.vmId = Objects.requireNonNull(vmId);
            return this;
        }

        public Builder workflowFileName(String workflowFileName) {
            this.workflowFileName = Objects.requireNonNull(workflowFileName);
            return this;
        }
        public TaskRunnerSettingsResponse build() {
            return new TaskRunnerSettingsResponse(alsologtostderr, baseTaskDir, baseUrl, commandlinesFileName, continueOnException, dataflowApiVersion, harnessCommand, languageHint, logDir, logToSerialconsole, logUploadLocation, oauthScopes, parallelWorkerSettings, streamingWorkerMainClass, taskGroup, taskUser, tempStoragePrefix, vmId, workflowFileName);
        }
    }
}
