// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
 * 
 */
public final class PySparkBatchResponse extends io.pulumi.resources.InvokeArgs {

    public static final PySparkBatchResponse Empty = new PySparkBatchResponse();

    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    @InputImport(name="archiveUris", required=true)
    private final List<String> archiveUris;

    public List<String> getArchiveUris() {
        return this.archiveUris;
    }

    /**
     * Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
     * 
     */
    @InputImport(name="args", required=true)
    private final List<String> args;

    public List<String> getArgs() {
        return this.args;
    }

    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor.
     * 
     */
    @InputImport(name="fileUris", required=true)
    private final List<String> fileUris;

    public List<String> getFileUris() {
        return this.fileUris;
    }

    /**
     * Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
     * 
     */
    @InputImport(name="jarFileUris", required=true)
    private final List<String> jarFileUris;

    public List<String> getJarFileUris() {
        return this.jarFileUris;
    }

    /**
     * The HCFS URI of the main Python file to use as the Spark driver. Must be a .py file.
     * 
     */
    @InputImport(name="mainPythonFileUri", required=true)
    private final String mainPythonFileUri;

    public String getMainPythonFileUri() {
        return this.mainPythonFileUri;
    }

    /**
     * Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
     * 
     */
    @InputImport(name="pythonFileUris", required=true)
    private final List<String> pythonFileUris;

    public List<String> getPythonFileUris() {
        return this.pythonFileUris;
    }

    public PySparkBatchResponse(
        List<String> archiveUris,
        List<String> args,
        List<String> fileUris,
        List<String> jarFileUris,
        String mainPythonFileUri,
        List<String> pythonFileUris) {
        this.archiveUris = Objects.requireNonNull(archiveUris, "expected parameter 'archiveUris' to be non-null");
        this.args = Objects.requireNonNull(args, "expected parameter 'args' to be non-null");
        this.fileUris = Objects.requireNonNull(fileUris, "expected parameter 'fileUris' to be non-null");
        this.jarFileUris = Objects.requireNonNull(jarFileUris, "expected parameter 'jarFileUris' to be non-null");
        this.mainPythonFileUri = Objects.requireNonNull(mainPythonFileUri, "expected parameter 'mainPythonFileUri' to be non-null");
        this.pythonFileUris = Objects.requireNonNull(pythonFileUris, "expected parameter 'pythonFileUris' to be non-null");
    }

    private PySparkBatchResponse() {
        this.archiveUris = List.of();
        this.args = List.of();
        this.fileUris = List.of();
        this.jarFileUris = List.of();
        this.mainPythonFileUri = null;
        this.pythonFileUris = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PySparkBatchResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> archiveUris;
        private List<String> args;
        private List<String> fileUris;
        private List<String> jarFileUris;
        private String mainPythonFileUri;
        private List<String> pythonFileUris;

        public Builder() {
    	      // Empty
        }

        public Builder(PySparkBatchResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveUris = defaults.archiveUris;
    	      this.args = defaults.args;
    	      this.fileUris = defaults.fileUris;
    	      this.jarFileUris = defaults.jarFileUris;
    	      this.mainPythonFileUri = defaults.mainPythonFileUri;
    	      this.pythonFileUris = defaults.pythonFileUris;
        }

        public Builder setArchiveUris(List<String> archiveUris) {
            this.archiveUris = Objects.requireNonNull(archiveUris);
            return this;
        }

        public Builder setArgs(List<String> args) {
            this.args = Objects.requireNonNull(args);
            return this;
        }

        public Builder setFileUris(List<String> fileUris) {
            this.fileUris = Objects.requireNonNull(fileUris);
            return this;
        }

        public Builder setJarFileUris(List<String> jarFileUris) {
            this.jarFileUris = Objects.requireNonNull(jarFileUris);
            return this;
        }

        public Builder setMainPythonFileUri(String mainPythonFileUri) {
            this.mainPythonFileUri = Objects.requireNonNull(mainPythonFileUri);
            return this;
        }

        public Builder setPythonFileUris(List<String> pythonFileUris) {
            this.pythonFileUris = Objects.requireNonNull(pythonFileUris);
            return this;
        }

        public PySparkBatchResponse build() {
            return new PySparkBatchResponse(archiveUris, args, fileUris, jarFileUris, mainPythonFileUri, pythonFileUris);
        }
    }
}
