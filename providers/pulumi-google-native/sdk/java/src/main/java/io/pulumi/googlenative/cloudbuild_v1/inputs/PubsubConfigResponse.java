// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
 * 
 */
public final class PubsubConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final PubsubConfigResponse Empty = new PubsubConfigResponse();

    /**
     * Service account that will make the push request.
     * 
     */
    @Import(name="serviceAccountEmail", required=true)
      private final String serviceAccountEmail;

    public String getServiceAccountEmail() {
        return this.serviceAccountEmail;
    }

    /**
     * Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
     * 
     */
    @Import(name="state", required=true)
      private final String state;

    public String getState() {
        return this.state;
    }

    /**
     * Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
     * 
     */
    @Import(name="subscription", required=true)
      private final String subscription;

    public String getSubscription() {
        return this.subscription;
    }

    /**
     * The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
     * 
     */
    @Import(name="topic", required=true)
      private final String topic;

    public String getTopic() {
        return this.topic;
    }

    public PubsubConfigResponse(
        String serviceAccountEmail,
        String state,
        String subscription,
        String topic) {
        this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail, "expected parameter 'serviceAccountEmail' to be non-null");
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
        this.subscription = Objects.requireNonNull(subscription, "expected parameter 'subscription' to be non-null");
        this.topic = Objects.requireNonNull(topic, "expected parameter 'topic' to be non-null");
    }

    private PubsubConfigResponse() {
        this.serviceAccountEmail = null;
        this.state = null;
        this.subscription = null;
        this.topic = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PubsubConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String serviceAccountEmail;
        private String state;
        private String subscription;
        private String topic;

        public Builder() {
    	      // Empty
        }

        public Builder(PubsubConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.state = defaults.state;
    	      this.subscription = defaults.subscription;
    	      this.topic = defaults.topic;
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }

        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder subscription(String subscription) {
            this.subscription = Objects.requireNonNull(subscription);
            return this;
        }

        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        public PubsubConfigResponse build() {
            return new PubsubConfigResponse(serviceAccountEmail, state, subscription, topic);
        }
    }
}
