// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.inputs.AccessConfigResponse;
import io.pulumi.googlenative.compute_v1.inputs.AliasIpRangeResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class NetworkInterfaceResponse extends io.pulumi.resources.InvokeArgs {

    public static final NetworkInterfaceResponse Empty = new NetworkInterfaceResponse();

    @InputImport(name="accessConfigs", required=true)
    private final List<AccessConfigResponse> accessConfigs;

    public List<AccessConfigResponse> getAccessConfigs() {
        return this.accessConfigs;
    }

    @InputImport(name="aliasIpRanges", required=true)
    private final List<AliasIpRangeResponse> aliasIpRanges;

    public List<AliasIpRangeResponse> getAliasIpRanges() {
        return this.aliasIpRanges;
    }

    @InputImport(name="fingerprint", required=true)
    private final String fingerprint;

    public String getFingerprint() {
        return this.fingerprint;
    }

    @InputImport(name="ipv6AccessConfigs", required=true)
    private final List<AccessConfigResponse> ipv6AccessConfigs;

    public List<AccessConfigResponse> getIpv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }

    @InputImport(name="ipv6AccessType", required=true)
    private final String ipv6AccessType;

    public String getIpv6AccessType() {
        return this.ipv6AccessType;
    }

    @InputImport(name="ipv6Address", required=true)
    private final String ipv6Address;

    public String getIpv6Address() {
        return this.ipv6Address;
    }

    @InputImport(name="kind", required=true)
    private final String kind;

    public String getKind() {
        return this.kind;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="network", required=true)
    private final String network;

    public String getNetwork() {
        return this.network;
    }

    @InputImport(name="networkIP", required=true)
    private final String networkIP;

    public String getNetworkIP() {
        return this.networkIP;
    }

    @InputImport(name="nicType", required=true)
    private final String nicType;

    public String getNicType() {
        return this.nicType;
    }

    @InputImport(name="queueCount", required=true)
    private final Integer queueCount;

    public Integer getQueueCount() {
        return this.queueCount;
    }

    @InputImport(name="stackType", required=true)
    private final String stackType;

    public String getStackType() {
        return this.stackType;
    }

    @InputImport(name="subnetwork", required=true)
    private final String subnetwork;

    public String getSubnetwork() {
        return this.subnetwork;
    }

    public NetworkInterfaceResponse(
        List<AccessConfigResponse> accessConfigs,
        List<AliasIpRangeResponse> aliasIpRanges,
        String fingerprint,
        List<AccessConfigResponse> ipv6AccessConfigs,
        String ipv6AccessType,
        String ipv6Address,
        String kind,
        String name,
        String network,
        String networkIP,
        String nicType,
        Integer queueCount,
        String stackType,
        String subnetwork) {
        this.accessConfigs = Objects.requireNonNull(accessConfigs, "expected parameter 'accessConfigs' to be non-null");
        this.aliasIpRanges = Objects.requireNonNull(aliasIpRanges, "expected parameter 'aliasIpRanges' to be non-null");
        this.fingerprint = Objects.requireNonNull(fingerprint, "expected parameter 'fingerprint' to be non-null");
        this.ipv6AccessConfigs = Objects.requireNonNull(ipv6AccessConfigs, "expected parameter 'ipv6AccessConfigs' to be non-null");
        this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType, "expected parameter 'ipv6AccessType' to be non-null");
        this.ipv6Address = Objects.requireNonNull(ipv6Address, "expected parameter 'ipv6Address' to be non-null");
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.networkIP = Objects.requireNonNull(networkIP, "expected parameter 'networkIP' to be non-null");
        this.nicType = Objects.requireNonNull(nicType, "expected parameter 'nicType' to be non-null");
        this.queueCount = Objects.requireNonNull(queueCount, "expected parameter 'queueCount' to be non-null");
        this.stackType = Objects.requireNonNull(stackType, "expected parameter 'stackType' to be non-null");
        this.subnetwork = Objects.requireNonNull(subnetwork, "expected parameter 'subnetwork' to be non-null");
    }

    private NetworkInterfaceResponse() {
        this.accessConfigs = List.of();
        this.aliasIpRanges = List.of();
        this.fingerprint = null;
        this.ipv6AccessConfigs = List.of();
        this.ipv6AccessType = null;
        this.ipv6Address = null;
        this.kind = null;
        this.name = null;
        this.network = null;
        this.networkIP = null;
        this.nicType = null;
        this.queueCount = null;
        this.stackType = null;
        this.subnetwork = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AccessConfigResponse> accessConfigs;
        private List<AliasIpRangeResponse> aliasIpRanges;
        private String fingerprint;
        private List<AccessConfigResponse> ipv6AccessConfigs;
        private String ipv6AccessType;
        private String ipv6Address;
        private String kind;
        private String name;
        private String network;
        private String networkIP;
        private String nicType;
        private Integer queueCount;
        private String stackType;
        private String subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.fingerprint = defaults.fingerprint;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkIP = defaults.networkIP;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder setAccessConfigs(List<AccessConfigResponse> accessConfigs) {
            this.accessConfigs = Objects.requireNonNull(accessConfigs);
            return this;
        }

        public Builder setAliasIpRanges(List<AliasIpRangeResponse> aliasIpRanges) {
            this.aliasIpRanges = Objects.requireNonNull(aliasIpRanges);
            return this;
        }

        public Builder setFingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }

        public Builder setIpv6AccessConfigs(List<AccessConfigResponse> ipv6AccessConfigs) {
            this.ipv6AccessConfigs = Objects.requireNonNull(ipv6AccessConfigs);
            return this;
        }

        public Builder setIpv6AccessType(String ipv6AccessType) {
            this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
            return this;
        }

        public Builder setIpv6Address(String ipv6Address) {
            this.ipv6Address = Objects.requireNonNull(ipv6Address);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setNetworkIP(String networkIP) {
            this.networkIP = Objects.requireNonNull(networkIP);
            return this;
        }

        public Builder setNicType(String nicType) {
            this.nicType = Objects.requireNonNull(nicType);
            return this;
        }

        public Builder setQueueCount(Integer queueCount) {
            this.queueCount = Objects.requireNonNull(queueCount);
            return this;
        }

        public Builder setStackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public NetworkInterfaceResponse build() {
            return new NetworkInterfaceResponse(accessConfigs, aliasIpRanges, fingerprint, ipv6AccessConfigs, ipv6AccessType, ipv6Address, kind, name, network, networkIP, nicType, queueCount, stackType, subnetwork);
        }
    }
}
