// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.genomics_v1alpha2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * LocalCopy defines how a remote file should be copied to and from the VM.
 * 
 */
public final class LocalCopyArgs extends io.pulumi.resources.ResourceArgs {

    public static final LocalCopyArgs Empty = new LocalCopyArgs();

    /**
     * The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
     * 
     */
    @InputImport(name="disk", required=true)
    private final Input<String> disk;

    public Input<String> getDisk() {
        return this.disk;
    }

    /**
     * The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
     * 
     */
    @InputImport(name="path", required=true)
    private final Input<String> path;

    public Input<String> getPath() {
        return this.path;
    }

    public LocalCopyArgs(
        Input<String> disk,
        Input<String> path) {
        this.disk = Objects.requireNonNull(disk, "expected parameter 'disk' to be non-null");
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
    }

    private LocalCopyArgs() {
        this.disk = Input.empty();
        this.path = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocalCopyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> disk;
        private Input<String> path;

        public Builder() {
    	      // Empty
        }

        public Builder(LocalCopyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disk = defaults.disk;
    	      this.path = defaults.path;
        }

        public Builder setDisk(Input<String> disk) {
            this.disk = Objects.requireNonNull(disk);
            return this;
        }

        public Builder setDisk(String disk) {
            this.disk = Input.of(Objects.requireNonNull(disk));
            return this;
        }

        public Builder setPath(Input<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setPath(String path) {
            this.path = Input.of(Objects.requireNonNull(path));
            return this;
        }

        public LocalCopyArgs build() {
            return new LocalCopyArgs(disk, path);
        }
    }
}
