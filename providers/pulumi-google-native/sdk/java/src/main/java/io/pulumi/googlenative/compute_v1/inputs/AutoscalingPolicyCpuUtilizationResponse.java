// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class AutoscalingPolicyCpuUtilizationResponse extends io.pulumi.resources.InvokeArgs {

    public static final AutoscalingPolicyCpuUtilizationResponse Empty = new AutoscalingPolicyCpuUtilizationResponse();

    @InputImport(name="predictiveMethod", required=true)
    private final String predictiveMethod;

    public String getPredictiveMethod() {
        return this.predictiveMethod;
    }

    @InputImport(name="utilizationTarget", required=true)
    private final Double utilizationTarget;

    public Double getUtilizationTarget() {
        return this.utilizationTarget;
    }

    public AutoscalingPolicyCpuUtilizationResponse(
        String predictiveMethod,
        Double utilizationTarget) {
        this.predictiveMethod = Objects.requireNonNull(predictiveMethod, "expected parameter 'predictiveMethod' to be non-null");
        this.utilizationTarget = Objects.requireNonNull(utilizationTarget, "expected parameter 'utilizationTarget' to be non-null");
    }

    private AutoscalingPolicyCpuUtilizationResponse() {
        this.predictiveMethod = null;
        this.utilizationTarget = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscalingPolicyCpuUtilizationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String predictiveMethod;
        private Double utilizationTarget;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoscalingPolicyCpuUtilizationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.predictiveMethod = defaults.predictiveMethod;
    	      this.utilizationTarget = defaults.utilizationTarget;
        }

        public Builder setPredictiveMethod(String predictiveMethod) {
            this.predictiveMethod = Objects.requireNonNull(predictiveMethod);
            return this;
        }

        public Builder setUtilizationTarget(Double utilizationTarget) {
            this.utilizationTarget = Objects.requireNonNull(utilizationTarget);
            return this;
        }

        public AutoscalingPolicyCpuUtilizationResponse build() {
            return new AutoscalingPolicyCpuUtilizationResponse(predictiveMethod, utilizationTarget);
        }
    }
}
