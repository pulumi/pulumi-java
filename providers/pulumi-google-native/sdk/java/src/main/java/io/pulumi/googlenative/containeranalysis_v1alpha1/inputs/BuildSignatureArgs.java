// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.containeranalysis_v1alpha1.enums.BuildSignatureKeyType;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Message encapsulating the signature of the verified build.
 * 
 */
public final class BuildSignatureArgs extends io.pulumi.resources.ResourceArgs {

    public static final BuildSignatureArgs Empty = new BuildSignatureArgs();

    /**
     * An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
     * 
     */
    @Import(name="keyId")
      private final @Nullable Output<String> keyId;

    public Output<String> getKeyId() {
        return this.keyId == null ? Codegen.empty() : this.keyId;
    }

    /**
     * The type of the key, either stored in `public_key` or referenced in `key_id`
     * 
     */
    @Import(name="keyType")
      private final @Nullable Output<BuildSignatureKeyType> keyType;

    public Output<BuildSignatureKeyType> getKeyType() {
        return this.keyType == null ? Codegen.empty() : this.keyType;
    }

    /**
     * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     * 
     */
    @Import(name="publicKey")
      private final @Nullable Output<String> publicKey;

    public Output<String> getPublicKey() {
        return this.publicKey == null ? Codegen.empty() : this.publicKey;
    }

    /**
     * Signature of the related `BuildProvenance`, encoded in a base64 string.
     * 
     */
    @Import(name="signature")
      private final @Nullable Output<String> signature;

    public Output<String> getSignature() {
        return this.signature == null ? Codegen.empty() : this.signature;
    }

    public BuildSignatureArgs(
        @Nullable Output<String> keyId,
        @Nullable Output<BuildSignatureKeyType> keyType,
        @Nullable Output<String> publicKey,
        @Nullable Output<String> signature) {
        this.keyId = keyId;
        this.keyType = keyType;
        this.publicKey = publicKey;
        this.signature = signature;
    }

    private BuildSignatureArgs() {
        this.keyId = Codegen.empty();
        this.keyType = Codegen.empty();
        this.publicKey = Codegen.empty();
        this.signature = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildSignatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> keyId;
        private @Nullable Output<BuildSignatureKeyType> keyType;
        private @Nullable Output<String> publicKey;
        private @Nullable Output<String> signature;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildSignatureArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyId = defaults.keyId;
    	      this.keyType = defaults.keyType;
    	      this.publicKey = defaults.publicKey;
    	      this.signature = defaults.signature;
        }

        public Builder keyId(@Nullable Output<String> keyId) {
            this.keyId = keyId;
            return this;
        }
        public Builder keyId(@Nullable String keyId) {
            this.keyId = Codegen.ofNullable(keyId);
            return this;
        }
        public Builder keyType(@Nullable Output<BuildSignatureKeyType> keyType) {
            this.keyType = keyType;
            return this;
        }
        public Builder keyType(@Nullable BuildSignatureKeyType keyType) {
            this.keyType = Codegen.ofNullable(keyType);
            return this;
        }
        public Builder publicKey(@Nullable Output<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }
        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Codegen.ofNullable(publicKey);
            return this;
        }
        public Builder signature(@Nullable Output<String> signature) {
            this.signature = signature;
            return this;
        }
        public Builder signature(@Nullable String signature) {
            this.signature = Codegen.ofNullable(signature);
            return this;
        }        public BuildSignatureArgs build() {
            return new BuildSignatureArgs(keyId, keyType, publicKey, signature);
        }
    }
}
