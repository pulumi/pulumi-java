// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.notebooks_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.notebooks_v1.outputs.AcceleratorConfigResponse;
import io.pulumi.googlenative.notebooks_v1.outputs.ContainerImageResponse;
import io.pulumi.googlenative.notebooks_v1.outputs.DiskResponse;
import io.pulumi.googlenative.notebooks_v1.outputs.ReservationAffinityResponse;
import io.pulumi.googlenative.notebooks_v1.outputs.ShieldedInstanceConfigResponse;
import io.pulumi.googlenative.notebooks_v1.outputs.UpgradeHistoryEntryResponse;
import io.pulumi.googlenative.notebooks_v1.outputs.VmImageResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetInstanceResult {
    /**
     * The hardware accelerator used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).
     * 
     */
    private final AcceleratorConfigResponse acceleratorConfig;
    /**
     * Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
     * 
     */
    private final String bootDiskSizeGb;
    /**
     * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
     */
    private final String bootDiskType;
    /**
     * Use a container image to start the notebook instance.
     * 
     */
    private final ContainerImageResponse containerImage;
    /**
     * Instance creation time.
     * 
     */
    private final String createTime;
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
     * 
     */
    private final String customGpuDriverPath;
    /**
     * Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
     * 
     */
    private final String dataDiskSizeGb;
    /**
     * Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
     */
    private final String dataDiskType;
    /**
     * Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
     * 
     */
    private final String diskEncryption;
    /**
     * Attached disks to notebook instance.
     * 
     */
    private final List<DiskResponse> disks;
    /**
     * Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
     * 
     */
    private final Boolean installGpuDriver;
    /**
     * Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
     * 
     */
    private final List<String> instanceOwners;
    /**
     * Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
     * 
     */
    private final String kmsKey;
    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The [Compute Engine machine type](/compute/docs/machine-types) of this instance.
     * 
     */
    private final String machineType;
    /**
     * Custom metadata to apply to this instance.
     * 
     */
    private final Map<String,String> metadata;
    /**
     * The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * 
     */
    private final String name;
    /**
     * The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
     * 
     */
    private final String network;
    /**
     * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
     */
    private final String nicType;
    /**
     * If true, the notebook instance will not register with the proxy.
     * 
     */
    private final Boolean noProxyAccess;
    /**
     * If true, no public IP will be assigned to this instance.
     * 
     */
    private final Boolean noPublicIp;
    /**
     * Input only. If true, the data disk will not be auto deleted when deleting the instance.
     * 
     */
    private final Boolean noRemoveDataDisk;
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
     */
    private final String postStartupScript;
    /**
     * The proxy endpoint that is used to access the Jupyter notebook.
     * 
     */
    private final String proxyUri;
    /**
     * Optional. The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this notebook instance.
     * 
     */
    private final ReservationAffinityResponse reservationAffinity;
    /**
     * The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     * 
     */
    private final String serviceAccount;
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
     * 
     */
    private final List<String> serviceAccountScopes;
    /**
     * Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
     * 
     */
    private final ShieldedInstanceConfigResponse shieldedInstanceConfig;
    /**
     * The state of this instance.
     * 
     */
    private final String state;
    /**
     * The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
     * 
     */
    private final String subnet;
    /**
     * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     * 
     */
    private final List<String> tags;
    /**
     * Instance update time.
     * 
     */
    private final String updateTime;
    /**
     * The upgrade history of this instance.
     * 
     */
    private final List<UpgradeHistoryEntryResponse> upgradeHistory;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * 
     */
    private final VmImageResponse vmImage;

    @OutputCustomType.Constructor
    private GetInstanceResult(
        @OutputCustomType.Parameter("acceleratorConfig") AcceleratorConfigResponse acceleratorConfig,
        @OutputCustomType.Parameter("bootDiskSizeGb") String bootDiskSizeGb,
        @OutputCustomType.Parameter("bootDiskType") String bootDiskType,
        @OutputCustomType.Parameter("containerImage") ContainerImageResponse containerImage,
        @OutputCustomType.Parameter("createTime") String createTime,
        @OutputCustomType.Parameter("customGpuDriverPath") String customGpuDriverPath,
        @OutputCustomType.Parameter("dataDiskSizeGb") String dataDiskSizeGb,
        @OutputCustomType.Parameter("dataDiskType") String dataDiskType,
        @OutputCustomType.Parameter("diskEncryption") String diskEncryption,
        @OutputCustomType.Parameter("disks") List<DiskResponse> disks,
        @OutputCustomType.Parameter("installGpuDriver") Boolean installGpuDriver,
        @OutputCustomType.Parameter("instanceOwners") List<String> instanceOwners,
        @OutputCustomType.Parameter("kmsKey") String kmsKey,
        @OutputCustomType.Parameter("labels") Map<String,String> labels,
        @OutputCustomType.Parameter("machineType") String machineType,
        @OutputCustomType.Parameter("metadata") Map<String,String> metadata,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("network") String network,
        @OutputCustomType.Parameter("nicType") String nicType,
        @OutputCustomType.Parameter("noProxyAccess") Boolean noProxyAccess,
        @OutputCustomType.Parameter("noPublicIp") Boolean noPublicIp,
        @OutputCustomType.Parameter("noRemoveDataDisk") Boolean noRemoveDataDisk,
        @OutputCustomType.Parameter("postStartupScript") String postStartupScript,
        @OutputCustomType.Parameter("proxyUri") String proxyUri,
        @OutputCustomType.Parameter("reservationAffinity") ReservationAffinityResponse reservationAffinity,
        @OutputCustomType.Parameter("serviceAccount") String serviceAccount,
        @OutputCustomType.Parameter("serviceAccountScopes") List<String> serviceAccountScopes,
        @OutputCustomType.Parameter("shieldedInstanceConfig") ShieldedInstanceConfigResponse shieldedInstanceConfig,
        @OutputCustomType.Parameter("state") String state,
        @OutputCustomType.Parameter("subnet") String subnet,
        @OutputCustomType.Parameter("tags") List<String> tags,
        @OutputCustomType.Parameter("updateTime") String updateTime,
        @OutputCustomType.Parameter("upgradeHistory") List<UpgradeHistoryEntryResponse> upgradeHistory,
        @OutputCustomType.Parameter("vmImage") VmImageResponse vmImage) {
        this.acceleratorConfig = acceleratorConfig;
        this.bootDiskSizeGb = bootDiskSizeGb;
        this.bootDiskType = bootDiskType;
        this.containerImage = containerImage;
        this.createTime = createTime;
        this.customGpuDriverPath = customGpuDriverPath;
        this.dataDiskSizeGb = dataDiskSizeGb;
        this.dataDiskType = dataDiskType;
        this.diskEncryption = diskEncryption;
        this.disks = disks;
        this.installGpuDriver = installGpuDriver;
        this.instanceOwners = instanceOwners;
        this.kmsKey = kmsKey;
        this.labels = labels;
        this.machineType = machineType;
        this.metadata = metadata;
        this.name = name;
        this.network = network;
        this.nicType = nicType;
        this.noProxyAccess = noProxyAccess;
        this.noPublicIp = noPublicIp;
        this.noRemoveDataDisk = noRemoveDataDisk;
        this.postStartupScript = postStartupScript;
        this.proxyUri = proxyUri;
        this.reservationAffinity = reservationAffinity;
        this.serviceAccount = serviceAccount;
        this.serviceAccountScopes = serviceAccountScopes;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.state = state;
        this.subnet = subnet;
        this.tags = tags;
        this.updateTime = updateTime;
        this.upgradeHistory = upgradeHistory;
        this.vmImage = vmImage;
    }

    /**
     * The hardware accelerator used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).
     * 
    */
    public AcceleratorConfigResponse getAcceleratorConfig() {
        return this.acceleratorConfig;
    }
    /**
     * Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
     * 
    */
    public String getBootDiskSizeGb() {
        return this.bootDiskSizeGb;
    }
    /**
     * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
    */
    public String getBootDiskType() {
        return this.bootDiskType;
    }
    /**
     * Use a container image to start the notebook instance.
     * 
    */
    public ContainerImageResponse getContainerImage() {
        return this.containerImage;
    }
    /**
     * Instance creation time.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
     * 
    */
    public String getCustomGpuDriverPath() {
        return this.customGpuDriverPath;
    }
    /**
     * Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
     * 
    */
    public String getDataDiskSizeGb() {
        return this.dataDiskSizeGb;
    }
    /**
     * Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
    */
    public String getDataDiskType() {
        return this.dataDiskType;
    }
    /**
     * Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
     * 
    */
    public String getDiskEncryption() {
        return this.diskEncryption;
    }
    /**
     * Attached disks to notebook instance.
     * 
    */
    public List<DiskResponse> getDisks() {
        return this.disks;
    }
    /**
     * Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
     * 
    */
    public Boolean getInstallGpuDriver() {
        return this.installGpuDriver;
    }
    /**
     * Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
     * 
    */
    public List<String> getInstanceOwners() {
        return this.instanceOwners;
    }
    /**
     * Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
     * 
    */
    public String getKmsKey() {
        return this.kmsKey;
    }
    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The [Compute Engine machine type](/compute/docs/machine-types) of this instance.
     * 
    */
    public String getMachineType() {
        return this.machineType;
    }
    /**
     * Custom metadata to apply to this instance.
     * 
    */
    public Map<String,String> getMetadata() {
        return this.metadata;
    }
    /**
     * The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
     * 
    */
    public String getNetwork() {
        return this.network;
    }
    /**
     * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
    */
    public String getNicType() {
        return this.nicType;
    }
    /**
     * If true, the notebook instance will not register with the proxy.
     * 
    */
    public Boolean getNoProxyAccess() {
        return this.noProxyAccess;
    }
    /**
     * If true, no public IP will be assigned to this instance.
     * 
    */
    public Boolean getNoPublicIp() {
        return this.noPublicIp;
    }
    /**
     * Input only. If true, the data disk will not be auto deleted when deleting the instance.
     * 
    */
    public Boolean getNoRemoveDataDisk() {
        return this.noRemoveDataDisk;
    }
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
    */
    public String getPostStartupScript() {
        return this.postStartupScript;
    }
    /**
     * The proxy endpoint that is used to access the Jupyter notebook.
     * 
    */
    public String getProxyUri() {
        return this.proxyUri;
    }
    /**
     * Optional. The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this notebook instance.
     * 
    */
    public ReservationAffinityResponse getReservationAffinity() {
        return this.reservationAffinity;
    }
    /**
     * The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     * 
    */
    public String getServiceAccount() {
        return this.serviceAccount;
    }
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
     * 
    */
    public List<String> getServiceAccountScopes() {
        return this.serviceAccountScopes;
    }
    /**
     * Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
     * 
    */
    public ShieldedInstanceConfigResponse getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }
    /**
     * The state of this instance.
     * 
    */
    public String getState() {
        return this.state;
    }
    /**
     * The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
     * 
    */
    public String getSubnet() {
        return this.subnet;
    }
    /**
     * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     * 
    */
    public List<String> getTags() {
        return this.tags;
    }
    /**
     * Instance update time.
     * 
    */
    public String getUpdateTime() {
        return this.updateTime;
    }
    /**
     * The upgrade history of this instance.
     * 
    */
    public List<UpgradeHistoryEntryResponse> getUpgradeHistory() {
        return this.upgradeHistory;
    }
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * 
    */
    public VmImageResponse getVmImage() {
        return this.vmImage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AcceleratorConfigResponse acceleratorConfig;
        private String bootDiskSizeGb;
        private String bootDiskType;
        private ContainerImageResponse containerImage;
        private String createTime;
        private String customGpuDriverPath;
        private String dataDiskSizeGb;
        private String dataDiskType;
        private String diskEncryption;
        private List<DiskResponse> disks;
        private Boolean installGpuDriver;
        private List<String> instanceOwners;
        private String kmsKey;
        private Map<String,String> labels;
        private String machineType;
        private Map<String,String> metadata;
        private String name;
        private String network;
        private String nicType;
        private Boolean noProxyAccess;
        private Boolean noPublicIp;
        private Boolean noRemoveDataDisk;
        private String postStartupScript;
        private String proxyUri;
        private ReservationAffinityResponse reservationAffinity;
        private String serviceAccount;
        private List<String> serviceAccountScopes;
        private ShieldedInstanceConfigResponse shieldedInstanceConfig;
        private String state;
        private String subnet;
        private List<String> tags;
        private String updateTime;
        private List<UpgradeHistoryEntryResponse> upgradeHistory;
        private VmImageResponse vmImage;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.bootDiskType = defaults.bootDiskType;
    	      this.containerImage = defaults.containerImage;
    	      this.createTime = defaults.createTime;
    	      this.customGpuDriverPath = defaults.customGpuDriverPath;
    	      this.dataDiskSizeGb = defaults.dataDiskSizeGb;
    	      this.dataDiskType = defaults.dataDiskType;
    	      this.diskEncryption = defaults.diskEncryption;
    	      this.disks = defaults.disks;
    	      this.installGpuDriver = defaults.installGpuDriver;
    	      this.instanceOwners = defaults.instanceOwners;
    	      this.kmsKey = defaults.kmsKey;
    	      this.labels = defaults.labels;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.nicType = defaults.nicType;
    	      this.noProxyAccess = defaults.noProxyAccess;
    	      this.noPublicIp = defaults.noPublicIp;
    	      this.noRemoveDataDisk = defaults.noRemoveDataDisk;
    	      this.postStartupScript = defaults.postStartupScript;
    	      this.proxyUri = defaults.proxyUri;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountScopes = defaults.serviceAccountScopes;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.state = defaults.state;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
    	      this.upgradeHistory = defaults.upgradeHistory;
    	      this.vmImage = defaults.vmImage;
        }

        public Builder setAcceleratorConfig(AcceleratorConfigResponse acceleratorConfig) {
            this.acceleratorConfig = Objects.requireNonNull(acceleratorConfig);
            return this;
        }

        public Builder setBootDiskSizeGb(String bootDiskSizeGb) {
            this.bootDiskSizeGb = Objects.requireNonNull(bootDiskSizeGb);
            return this;
        }

        public Builder setBootDiskType(String bootDiskType) {
            this.bootDiskType = Objects.requireNonNull(bootDiskType);
            return this;
        }

        public Builder setContainerImage(ContainerImageResponse containerImage) {
            this.containerImage = Objects.requireNonNull(containerImage);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCustomGpuDriverPath(String customGpuDriverPath) {
            this.customGpuDriverPath = Objects.requireNonNull(customGpuDriverPath);
            return this;
        }

        public Builder setDataDiskSizeGb(String dataDiskSizeGb) {
            this.dataDiskSizeGb = Objects.requireNonNull(dataDiskSizeGb);
            return this;
        }

        public Builder setDataDiskType(String dataDiskType) {
            this.dataDiskType = Objects.requireNonNull(dataDiskType);
            return this;
        }

        public Builder setDiskEncryption(String diskEncryption) {
            this.diskEncryption = Objects.requireNonNull(diskEncryption);
            return this;
        }

        public Builder setDisks(List<DiskResponse> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }

        public Builder setInstallGpuDriver(Boolean installGpuDriver) {
            this.installGpuDriver = Objects.requireNonNull(installGpuDriver);
            return this;
        }

        public Builder setInstanceOwners(List<String> instanceOwners) {
            this.instanceOwners = Objects.requireNonNull(instanceOwners);
            return this;
        }

        public Builder setKmsKey(String kmsKey) {
            this.kmsKey = Objects.requireNonNull(kmsKey);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMachineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder setMetadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setNicType(String nicType) {
            this.nicType = Objects.requireNonNull(nicType);
            return this;
        }

        public Builder setNoProxyAccess(Boolean noProxyAccess) {
            this.noProxyAccess = Objects.requireNonNull(noProxyAccess);
            return this;
        }

        public Builder setNoPublicIp(Boolean noPublicIp) {
            this.noPublicIp = Objects.requireNonNull(noPublicIp);
            return this;
        }

        public Builder setNoRemoveDataDisk(Boolean noRemoveDataDisk) {
            this.noRemoveDataDisk = Objects.requireNonNull(noRemoveDataDisk);
            return this;
        }

        public Builder setPostStartupScript(String postStartupScript) {
            this.postStartupScript = Objects.requireNonNull(postStartupScript);
            return this;
        }

        public Builder setProxyUri(String proxyUri) {
            this.proxyUri = Objects.requireNonNull(proxyUri);
            return this;
        }

        public Builder setReservationAffinity(ReservationAffinityResponse reservationAffinity) {
            this.reservationAffinity = Objects.requireNonNull(reservationAffinity);
            return this;
        }

        public Builder setServiceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setServiceAccountScopes(List<String> serviceAccountScopes) {
            this.serviceAccountScopes = Objects.requireNonNull(serviceAccountScopes);
            return this;
        }

        public Builder setShieldedInstanceConfig(ShieldedInstanceConfigResponse shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Objects.requireNonNull(shieldedInstanceConfig);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setSubnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }

        public Builder setUpgradeHistory(List<UpgradeHistoryEntryResponse> upgradeHistory) {
            this.upgradeHistory = Objects.requireNonNull(upgradeHistory);
            return this;
        }

        public Builder setVmImage(VmImageResponse vmImage) {
            this.vmImage = Objects.requireNonNull(vmImage);
            return this;
        }
        public GetInstanceResult build() {
            return new GetInstanceResult(acceleratorConfig, bootDiskSizeGb, bootDiskType, containerImage, createTime, customGpuDriverPath, dataDiskSizeGb, dataDiskType, diskEncryption, disks, installGpuDriver, instanceOwners, kmsKey, labels, machineType, metadata, name, network, nicType, noProxyAccess, noPublicIp, noRemoveDataDisk, postStartupScript, proxyUri, reservationAffinity, serviceAccount, serviceAccountScopes, shieldedInstanceConfig, state, subnet, tags, updateTime, upgradeHistory, vmImage);
        }
    }
}
