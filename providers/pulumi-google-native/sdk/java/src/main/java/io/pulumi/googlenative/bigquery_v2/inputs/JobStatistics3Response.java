// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class JobStatistics3Response extends io.pulumi.resources.InvokeArgs {

    public static final JobStatistics3Response Empty = new JobStatistics3Response();

    @InputImport(name="badRecords", required=true)
    private final String badRecords;

    public String getBadRecords() {
        return this.badRecords;
    }

    @InputImport(name="inputFileBytes", required=true)
    private final String inputFileBytes;

    public String getInputFileBytes() {
        return this.inputFileBytes;
    }

    @InputImport(name="inputFiles", required=true)
    private final String inputFiles;

    public String getInputFiles() {
        return this.inputFiles;
    }

    @InputImport(name="outputBytes", required=true)
    private final String outputBytes;

    public String getOutputBytes() {
        return this.outputBytes;
    }

    @InputImport(name="outputRows", required=true)
    private final String outputRows;

    public String getOutputRows() {
        return this.outputRows;
    }

    public JobStatistics3Response(
        String badRecords,
        String inputFileBytes,
        String inputFiles,
        String outputBytes,
        String outputRows) {
        this.badRecords = Objects.requireNonNull(badRecords, "expected parameter 'badRecords' to be non-null");
        this.inputFileBytes = Objects.requireNonNull(inputFileBytes, "expected parameter 'inputFileBytes' to be non-null");
        this.inputFiles = Objects.requireNonNull(inputFiles, "expected parameter 'inputFiles' to be non-null");
        this.outputBytes = Objects.requireNonNull(outputBytes, "expected parameter 'outputBytes' to be non-null");
        this.outputRows = Objects.requireNonNull(outputRows, "expected parameter 'outputRows' to be non-null");
    }

    private JobStatistics3Response() {
        this.badRecords = null;
        this.inputFileBytes = null;
        this.inputFiles = null;
        this.outputBytes = null;
        this.outputRows = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobStatistics3Response defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String badRecords;
        private String inputFileBytes;
        private String inputFiles;
        private String outputBytes;
        private String outputRows;

        public Builder() {
    	      // Empty
        }

        public Builder(JobStatistics3Response defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.badRecords = defaults.badRecords;
    	      this.inputFileBytes = defaults.inputFileBytes;
    	      this.inputFiles = defaults.inputFiles;
    	      this.outputBytes = defaults.outputBytes;
    	      this.outputRows = defaults.outputRows;
        }

        public Builder setBadRecords(String badRecords) {
            this.badRecords = Objects.requireNonNull(badRecords);
            return this;
        }

        public Builder setInputFileBytes(String inputFileBytes) {
            this.inputFileBytes = Objects.requireNonNull(inputFileBytes);
            return this;
        }

        public Builder setInputFiles(String inputFiles) {
            this.inputFiles = Objects.requireNonNull(inputFiles);
            return this;
        }

        public Builder setOutputBytes(String outputBytes) {
            this.outputBytes = Objects.requireNonNull(outputBytes);
            return this;
        }

        public Builder setOutputRows(String outputRows) {
            this.outputRows = Objects.requireNonNull(outputRows);
            return this;
        }

        public JobStatistics3Response build() {
            return new JobStatistics3Response(badRecords, inputFileBytes, inputFiles, outputBytes, outputRows);
        }
    }
}
