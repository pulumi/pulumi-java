// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomerEncryptionKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomerEncryptionKeyArgs Empty = new CustomerEncryptionKeyArgs();

    /**
     * The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key
     * 
     */
    @Import(name="kmsKeyName")
      private final @Nullable Output<String> kmsKeyName;

    public Output<String> kmsKeyName() {
        return this.kmsKeyName == null ? Codegen.empty() : this.kmsKeyName;
    }

    /**
     * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount": "name@project_id.iam.gserviceaccount.com/
     * 
     */
    @Import(name="kmsKeyServiceAccount")
      private final @Nullable Output<String> kmsKeyServiceAccount;

    public Output<String> kmsKeyServiceAccount() {
        return this.kmsKeyServiceAccount == null ? Codegen.empty() : this.kmsKeyServiceAccount;
    }

    /**
     * Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0="
     * 
     */
    @Import(name="rawKey")
      private final @Nullable Output<String> rawKey;

    public Output<String> rawKey() {
        return this.rawKey == null ? Codegen.empty() : this.rawKey;
    }

    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
     * 
     */
    @Import(name="rsaEncryptedKey")
      private final @Nullable Output<String> rsaEncryptedKey;

    public Output<String> rsaEncryptedKey() {
        return this.rsaEncryptedKey == null ? Codegen.empty() : this.rsaEncryptedKey;
    }

    public CustomerEncryptionKeyArgs(
        @Nullable Output<String> kmsKeyName,
        @Nullable Output<String> kmsKeyServiceAccount,
        @Nullable Output<String> rawKey,
        @Nullable Output<String> rsaEncryptedKey) {
        this.kmsKeyName = kmsKeyName;
        this.kmsKeyServiceAccount = kmsKeyServiceAccount;
        this.rawKey = rawKey;
        this.rsaEncryptedKey = rsaEncryptedKey;
    }

    private CustomerEncryptionKeyArgs() {
        this.kmsKeyName = Codegen.empty();
        this.kmsKeyServiceAccount = Codegen.empty();
        this.rawKey = Codegen.empty();
        this.rsaEncryptedKey = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomerEncryptionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> kmsKeyName;
        private @Nullable Output<String> kmsKeyServiceAccount;
        private @Nullable Output<String> rawKey;
        private @Nullable Output<String> rsaEncryptedKey;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomerEncryptionKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.kmsKeyServiceAccount = defaults.kmsKeyServiceAccount;
    	      this.rawKey = defaults.rawKey;
    	      this.rsaEncryptedKey = defaults.rsaEncryptedKey;
        }

        public Builder kmsKeyName(@Nullable Output<String> kmsKeyName) {
            this.kmsKeyName = kmsKeyName;
            return this;
        }
        public Builder kmsKeyName(@Nullable String kmsKeyName) {
            this.kmsKeyName = Codegen.ofNullable(kmsKeyName);
            return this;
        }
        public Builder kmsKeyServiceAccount(@Nullable Output<String> kmsKeyServiceAccount) {
            this.kmsKeyServiceAccount = kmsKeyServiceAccount;
            return this;
        }
        public Builder kmsKeyServiceAccount(@Nullable String kmsKeyServiceAccount) {
            this.kmsKeyServiceAccount = Codegen.ofNullable(kmsKeyServiceAccount);
            return this;
        }
        public Builder rawKey(@Nullable Output<String> rawKey) {
            this.rawKey = rawKey;
            return this;
        }
        public Builder rawKey(@Nullable String rawKey) {
            this.rawKey = Codegen.ofNullable(rawKey);
            return this;
        }
        public Builder rsaEncryptedKey(@Nullable Output<String> rsaEncryptedKey) {
            this.rsaEncryptedKey = rsaEncryptedKey;
            return this;
        }
        public Builder rsaEncryptedKey(@Nullable String rsaEncryptedKey) {
            this.rsaEncryptedKey = Codegen.ofNullable(rsaEncryptedKey);
            return this;
        }        public CustomerEncryptionKeyArgs build() {
            return new CustomerEncryptionKeyArgs(kmsKeyName, kmsKeyServiceAccount, rawKey, rsaEncryptedKey);
        }
    }
}
