// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.toolresults_v1beta3.enums.OutcomeSummary;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.FailureDetailArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.InconclusiveDetailArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.SkippedDetailArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.SuccessDetailArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Interprets a result so that humans and machines can act on it.
 * 
 */
public final class OutcomeArgs extends io.pulumi.resources.ResourceArgs {

    public static final OutcomeArgs Empty = new OutcomeArgs();

    /**
     * More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE. Optional
     * 
     */
    @Import(name="failureDetail")
      private final @Nullable Output<FailureDetailArgs> failureDetail;

    public Output<FailureDetailArgs> getFailureDetail() {
        return this.failureDetail == null ? Codegen.empty() : this.failureDetail;
    }

    /**
     * More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE. Optional
     * 
     */
    @Import(name="inconclusiveDetail")
      private final @Nullable Output<InconclusiveDetailArgs> inconclusiveDetail;

    public Output<InconclusiveDetailArgs> getInconclusiveDetail() {
        return this.inconclusiveDetail == null ? Codegen.empty() : this.inconclusiveDetail;
    }

    /**
     * More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED. Optional
     * 
     */
    @Import(name="skippedDetail")
      private final @Nullable Output<SkippedDetailArgs> skippedDetail;

    public Output<SkippedDetailArgs> getSkippedDetail() {
        return this.skippedDetail == null ? Codegen.empty() : this.skippedDetail;
    }

    /**
     * More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS. Optional
     * 
     */
    @Import(name="successDetail")
      private final @Nullable Output<SuccessDetailArgs> successDetail;

    public Output<SuccessDetailArgs> getSuccessDetail() {
        return this.successDetail == null ? Codegen.empty() : this.successDetail;
    }

    /**
     * The simplest way to interpret a result. Required
     * 
     */
    @Import(name="summary")
      private final @Nullable Output<OutcomeSummary> summary;

    public Output<OutcomeSummary> getSummary() {
        return this.summary == null ? Codegen.empty() : this.summary;
    }

    public OutcomeArgs(
        @Nullable Output<FailureDetailArgs> failureDetail,
        @Nullable Output<InconclusiveDetailArgs> inconclusiveDetail,
        @Nullable Output<SkippedDetailArgs> skippedDetail,
        @Nullable Output<SuccessDetailArgs> successDetail,
        @Nullable Output<OutcomeSummary> summary) {
        this.failureDetail = failureDetail;
        this.inconclusiveDetail = inconclusiveDetail;
        this.skippedDetail = skippedDetail;
        this.successDetail = successDetail;
        this.summary = summary;
    }

    private OutcomeArgs() {
        this.failureDetail = Codegen.empty();
        this.inconclusiveDetail = Codegen.empty();
        this.skippedDetail = Codegen.empty();
        this.successDetail = Codegen.empty();
        this.summary = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OutcomeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FailureDetailArgs> failureDetail;
        private @Nullable Output<InconclusiveDetailArgs> inconclusiveDetail;
        private @Nullable Output<SkippedDetailArgs> skippedDetail;
        private @Nullable Output<SuccessDetailArgs> successDetail;
        private @Nullable Output<OutcomeSummary> summary;

        public Builder() {
    	      // Empty
        }

        public Builder(OutcomeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureDetail = defaults.failureDetail;
    	      this.inconclusiveDetail = defaults.inconclusiveDetail;
    	      this.skippedDetail = defaults.skippedDetail;
    	      this.successDetail = defaults.successDetail;
    	      this.summary = defaults.summary;
        }

        public Builder failureDetail(@Nullable Output<FailureDetailArgs> failureDetail) {
            this.failureDetail = failureDetail;
            return this;
        }
        public Builder failureDetail(@Nullable FailureDetailArgs failureDetail) {
            this.failureDetail = Codegen.ofNullable(failureDetail);
            return this;
        }
        public Builder inconclusiveDetail(@Nullable Output<InconclusiveDetailArgs> inconclusiveDetail) {
            this.inconclusiveDetail = inconclusiveDetail;
            return this;
        }
        public Builder inconclusiveDetail(@Nullable InconclusiveDetailArgs inconclusiveDetail) {
            this.inconclusiveDetail = Codegen.ofNullable(inconclusiveDetail);
            return this;
        }
        public Builder skippedDetail(@Nullable Output<SkippedDetailArgs> skippedDetail) {
            this.skippedDetail = skippedDetail;
            return this;
        }
        public Builder skippedDetail(@Nullable SkippedDetailArgs skippedDetail) {
            this.skippedDetail = Codegen.ofNullable(skippedDetail);
            return this;
        }
        public Builder successDetail(@Nullable Output<SuccessDetailArgs> successDetail) {
            this.successDetail = successDetail;
            return this;
        }
        public Builder successDetail(@Nullable SuccessDetailArgs successDetail) {
            this.successDetail = Codegen.ofNullable(successDetail);
            return this;
        }
        public Builder summary(@Nullable Output<OutcomeSummary> summary) {
            this.summary = summary;
            return this;
        }
        public Builder summary(@Nullable OutcomeSummary summary) {
            this.summary = Codegen.ofNullable(summary);
            return this;
        }        public OutcomeArgs build() {
            return new OutcomeArgs(failureDetail, inconclusiveDetail, skippedDetail, successDetail, summary);
        }
    }
}
