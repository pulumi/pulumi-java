// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.websecurityscanner_v1beta.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.websecurityscanner_v1beta.outputs.ScanRunErrorTraceResponse;
import io.pulumi.googlenative.websecurityscanner_v1beta.outputs.ScanRunWarningTraceResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class ScanRunResponse {
    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    private final String endTime;
    /**
     * If result_state is an ERROR, this field provides the primary reason for scan's termination and more details, if such are available.
     * 
     */
    private final ScanRunErrorTraceResponse errorTrace;
    /**
     * The execution state of the ScanRun.
     * 
     */
    private final String executionState;
    /**
     * Whether the scan run has found any vulnerabilities.
     * 
     */
    private final Boolean hasVulnerabilities;
    /**
     * The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.
     * 
     */
    private final String name;
    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    private final Integer progressPercent;
    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
     * 
     */
    private final String resultState;
    /**
     * The time at which the ScanRun started.
     * 
     */
    private final String startTime;
    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    private final String urlsCrawledCount;
    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    private final String urlsTestedCount;
    /**
     * A list of warnings, if such are encountered during this scan run.
     * 
     */
    private final List<ScanRunWarningTraceResponse> warningTraces;

    @OutputCustomType.Constructor({"endTime","errorTrace","executionState","hasVulnerabilities","name","progressPercent","resultState","startTime","urlsCrawledCount","urlsTestedCount","warningTraces"})
    private ScanRunResponse(
        String endTime,
        ScanRunErrorTraceResponse errorTrace,
        String executionState,
        Boolean hasVulnerabilities,
        String name,
        Integer progressPercent,
        String resultState,
        String startTime,
        String urlsCrawledCount,
        String urlsTestedCount,
        List<ScanRunWarningTraceResponse> warningTraces) {
        this.endTime = Objects.requireNonNull(endTime);
        this.errorTrace = Objects.requireNonNull(errorTrace);
        this.executionState = Objects.requireNonNull(executionState);
        this.hasVulnerabilities = Objects.requireNonNull(hasVulnerabilities);
        this.name = Objects.requireNonNull(name);
        this.progressPercent = Objects.requireNonNull(progressPercent);
        this.resultState = Objects.requireNonNull(resultState);
        this.startTime = Objects.requireNonNull(startTime);
        this.urlsCrawledCount = Objects.requireNonNull(urlsCrawledCount);
        this.urlsTestedCount = Objects.requireNonNull(urlsTestedCount);
        this.warningTraces = Objects.requireNonNull(warningTraces);
    }

    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
    */
    public String getEndTime() {
        return this.endTime;
    }
    /**
     * If result_state is an ERROR, this field provides the primary reason for scan's termination and more details, if such are available.
     * 
    */
    public ScanRunErrorTraceResponse getErrorTrace() {
        return this.errorTrace;
    }
    /**
     * The execution state of the ScanRun.
     * 
    */
    public String getExecutionState() {
        return this.executionState;
    }
    /**
     * Whether the scan run has found any vulnerabilities.
     * 
    */
    public Boolean getHasVulnerabilities() {
        return this.hasVulnerabilities;
    }
    /**
     * The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
    */
    public Integer getProgressPercent() {
        return this.progressPercent;
    }
    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
     * 
    */
    public String getResultState() {
        return this.resultState;
    }
    /**
     * The time at which the ScanRun started.
     * 
    */
    public String getStartTime() {
        return this.startTime;
    }
    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
    */
    public String getUrlsCrawledCount() {
        return this.urlsCrawledCount;
    }
    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
    */
    public String getUrlsTestedCount() {
        return this.urlsTestedCount;
    }
    /**
     * A list of warnings, if such are encountered during this scan run.
     * 
    */
    public List<ScanRunWarningTraceResponse> getWarningTraces() {
        return this.warningTraces;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScanRunResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String endTime;
        private ScanRunErrorTraceResponse errorTrace;
        private String executionState;
        private Boolean hasVulnerabilities;
        private String name;
        private Integer progressPercent;
        private String resultState;
        private String startTime;
        private String urlsCrawledCount;
        private String urlsTestedCount;
        private List<ScanRunWarningTraceResponse> warningTraces;

        public Builder() {
    	      // Empty
        }

        public Builder(ScanRunResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.errorTrace = defaults.errorTrace;
    	      this.executionState = defaults.executionState;
    	      this.hasVulnerabilities = defaults.hasVulnerabilities;
    	      this.name = defaults.name;
    	      this.progressPercent = defaults.progressPercent;
    	      this.resultState = defaults.resultState;
    	      this.startTime = defaults.startTime;
    	      this.urlsCrawledCount = defaults.urlsCrawledCount;
    	      this.urlsTestedCount = defaults.urlsTestedCount;
    	      this.warningTraces = defaults.warningTraces;
        }

        public Builder setEndTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }

        public Builder setErrorTrace(ScanRunErrorTraceResponse errorTrace) {
            this.errorTrace = Objects.requireNonNull(errorTrace);
            return this;
        }

        public Builder setExecutionState(String executionState) {
            this.executionState = Objects.requireNonNull(executionState);
            return this;
        }

        public Builder setHasVulnerabilities(Boolean hasVulnerabilities) {
            this.hasVulnerabilities = Objects.requireNonNull(hasVulnerabilities);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProgressPercent(Integer progressPercent) {
            this.progressPercent = Objects.requireNonNull(progressPercent);
            return this;
        }

        public Builder setResultState(String resultState) {
            this.resultState = Objects.requireNonNull(resultState);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setUrlsCrawledCount(String urlsCrawledCount) {
            this.urlsCrawledCount = Objects.requireNonNull(urlsCrawledCount);
            return this;
        }

        public Builder setUrlsTestedCount(String urlsTestedCount) {
            this.urlsTestedCount = Objects.requireNonNull(urlsTestedCount);
            return this;
        }

        public Builder setWarningTraces(List<ScanRunWarningTraceResponse> warningTraces) {
            this.warningTraces = Objects.requireNonNull(warningTraces);
            return this;
        }
        public ScanRunResponse build() {
            return new ScanRunResponse(endTime, errorTrace, executionState, hasVulnerabilities, name, progressPercent, resultState, startTime, urlsCrawledCount, urlsTestedCount, warningTraces);
        }
    }
}
