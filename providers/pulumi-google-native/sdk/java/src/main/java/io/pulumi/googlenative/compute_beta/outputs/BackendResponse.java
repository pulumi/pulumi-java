// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class BackendResponse {
    private final String balancingMode;
    private final Double capacityScaler;
    private final String description;
    private final Boolean failover;
    private final String group;
    private final Integer maxConnections;
    private final Integer maxConnectionsPerEndpoint;
    private final Integer maxConnectionsPerInstance;
    private final Integer maxRate;
    private final Double maxRatePerEndpoint;
    private final Double maxRatePerInstance;
    private final Double maxUtilization;

    @OutputCustomType.Constructor({"balancingMode","capacityScaler","description","failover","group","maxConnections","maxConnectionsPerEndpoint","maxConnectionsPerInstance","maxRate","maxRatePerEndpoint","maxRatePerInstance","maxUtilization"})
    private BackendResponse(
        String balancingMode,
        Double capacityScaler,
        String description,
        Boolean failover,
        String group,
        Integer maxConnections,
        Integer maxConnectionsPerEndpoint,
        Integer maxConnectionsPerInstance,
        Integer maxRate,
        Double maxRatePerEndpoint,
        Double maxRatePerInstance,
        Double maxUtilization) {
        this.balancingMode = Objects.requireNonNull(balancingMode);
        this.capacityScaler = Objects.requireNonNull(capacityScaler);
        this.description = Objects.requireNonNull(description);
        this.failover = Objects.requireNonNull(failover);
        this.group = Objects.requireNonNull(group);
        this.maxConnections = Objects.requireNonNull(maxConnections);
        this.maxConnectionsPerEndpoint = Objects.requireNonNull(maxConnectionsPerEndpoint);
        this.maxConnectionsPerInstance = Objects.requireNonNull(maxConnectionsPerInstance);
        this.maxRate = Objects.requireNonNull(maxRate);
        this.maxRatePerEndpoint = Objects.requireNonNull(maxRatePerEndpoint);
        this.maxRatePerInstance = Objects.requireNonNull(maxRatePerInstance);
        this.maxUtilization = Objects.requireNonNull(maxUtilization);
    }

    public String getBalancingMode() {
        return this.balancingMode;
    }
    public Double getCapacityScaler() {
        return this.capacityScaler;
    }
    public String getDescription() {
        return this.description;
    }
    public Boolean getFailover() {
        return this.failover;
    }
    public String getGroup() {
        return this.group;
    }
    public Integer getMaxConnections() {
        return this.maxConnections;
    }
    public Integer getMaxConnectionsPerEndpoint() {
        return this.maxConnectionsPerEndpoint;
    }
    public Integer getMaxConnectionsPerInstance() {
        return this.maxConnectionsPerInstance;
    }
    public Integer getMaxRate() {
        return this.maxRate;
    }
    public Double getMaxRatePerEndpoint() {
        return this.maxRatePerEndpoint;
    }
    public Double getMaxRatePerInstance() {
        return this.maxRatePerInstance;
    }
    public Double getMaxUtilization() {
        return this.maxUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String balancingMode;
        private Double capacityScaler;
        private String description;
        private Boolean failover;
        private String group;
        private Integer maxConnections;
        private Integer maxConnectionsPerEndpoint;
        private Integer maxConnectionsPerInstance;
        private Integer maxRate;
        private Double maxRatePerEndpoint;
        private Double maxRatePerInstance;
        private Double maxUtilization;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balancingMode = defaults.balancingMode;
    	      this.capacityScaler = defaults.capacityScaler;
    	      this.description = defaults.description;
    	      this.failover = defaults.failover;
    	      this.group = defaults.group;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxConnectionsPerEndpoint = defaults.maxConnectionsPerEndpoint;
    	      this.maxConnectionsPerInstance = defaults.maxConnectionsPerInstance;
    	      this.maxRate = defaults.maxRate;
    	      this.maxRatePerEndpoint = defaults.maxRatePerEndpoint;
    	      this.maxRatePerInstance = defaults.maxRatePerInstance;
    	      this.maxUtilization = defaults.maxUtilization;
        }

        public Builder setBalancingMode(String balancingMode) {
            this.balancingMode = Objects.requireNonNull(balancingMode);
            return this;
        }

        public Builder setCapacityScaler(Double capacityScaler) {
            this.capacityScaler = Objects.requireNonNull(capacityScaler);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setFailover(Boolean failover) {
            this.failover = Objects.requireNonNull(failover);
            return this;
        }

        public Builder setGroup(String group) {
            this.group = Objects.requireNonNull(group);
            return this;
        }

        public Builder setMaxConnections(Integer maxConnections) {
            this.maxConnections = Objects.requireNonNull(maxConnections);
            return this;
        }

        public Builder setMaxConnectionsPerEndpoint(Integer maxConnectionsPerEndpoint) {
            this.maxConnectionsPerEndpoint = Objects.requireNonNull(maxConnectionsPerEndpoint);
            return this;
        }

        public Builder setMaxConnectionsPerInstance(Integer maxConnectionsPerInstance) {
            this.maxConnectionsPerInstance = Objects.requireNonNull(maxConnectionsPerInstance);
            return this;
        }

        public Builder setMaxRate(Integer maxRate) {
            this.maxRate = Objects.requireNonNull(maxRate);
            return this;
        }

        public Builder setMaxRatePerEndpoint(Double maxRatePerEndpoint) {
            this.maxRatePerEndpoint = Objects.requireNonNull(maxRatePerEndpoint);
            return this;
        }

        public Builder setMaxRatePerInstance(Double maxRatePerInstance) {
            this.maxRatePerInstance = Objects.requireNonNull(maxRatePerInstance);
            return this;
        }

        public Builder setMaxUtilization(Double maxUtilization) {
            this.maxUtilization = Objects.requireNonNull(maxUtilization);
            return this;
        }

        public BackendResponse build() {
            return new BackendResponse(balancingMode, capacityScaler, description, failover, group, maxConnections, maxConnectionsPerEndpoint, maxConnectionsPerInstance, maxRate, maxRatePerEndpoint, maxRatePerInstance, maxUtilization);
        }
    }
}
