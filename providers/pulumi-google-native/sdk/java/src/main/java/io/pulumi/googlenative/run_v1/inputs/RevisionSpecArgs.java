// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.run_v1.inputs.ContainerArgs;
import io.pulumi.googlenative.run_v1.inputs.LocalObjectReferenceArgs;
import io.pulumi.googlenative.run_v1.inputs.VolumeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * RevisionSpec holds the desired state of the Revision (from the client).
 * 
 */
public final class RevisionSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final RevisionSpecArgs Empty = new RevisionSpecArgs();

    /**
     * ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. Cloud Run fully managed: supported, defaults to 80 Cloud Run for Anthos: supported, defaults to 0, which means concurrency to the application is not limited, and the system decides the target concurrency for the autoscaler.
     * 
     */
    @InputImport(name="containerConcurrency")
      private final @Nullable Input<Integer> containerConcurrency;

    public Input<Integer> getContainerConcurrency() {
        return this.containerConcurrency == null ? Input.empty() : this.containerConcurrency;
    }

    /**
     * Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided. The runtime contract is documented here: https://github.com/knative/serving/blob/main/docs/runtime-contract.md
     * 
     */
    @InputImport(name="containers")
      private final @Nullable Input<List<ContainerArgs>> containers;

    public Input<List<ContainerArgs>> getContainers() {
        return this.containers == null ? Input.empty() : this.containers;
    }

    /**
     * Indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported, defaults to true.
     * 
     */
    @InputImport(name="enableServiceLinks")
      private final @Nullable Input<Boolean> enableServiceLinks;

    public Input<Boolean> getEnableServiceLinks() {
        return this.enableServiceLinks == null ? Input.empty() : this.enableServiceLinks;
    }

    /**
     * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported.
     * 
     */
    @InputImport(name="imagePullSecrets")
      private final @Nullable Input<List<LocalObjectReferenceArgs>> imagePullSecrets;

    public Input<List<LocalObjectReferenceArgs>> getImagePullSecrets() {
        return this.imagePullSecrets == null ? Input.empty() : this.imagePullSecrets;
    }

    /**
     * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
     * 
     */
    @InputImport(name="serviceAccountName")
      private final @Nullable Input<String> serviceAccountName;

    public Input<String> getServiceAccountName() {
        return this.serviceAccountName == null ? Input.empty() : this.serviceAccountName;
    }

    /**
     * TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run fully managed: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour). Cloud Run for Anthos: defaults to 300 seconds (5 minutes). Maximum allowed value is configurable by the cluster operator.
     * 
     */
    @InputImport(name="timeoutSeconds")
      private final @Nullable Input<Integer> timeoutSeconds;

    public Input<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Input.empty() : this.timeoutSeconds;
    }

    @InputImport(name="volumes")
      private final @Nullable Input<List<VolumeArgs>> volumes;

    public Input<List<VolumeArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public RevisionSpecArgs(
        @Nullable Input<Integer> containerConcurrency,
        @Nullable Input<List<ContainerArgs>> containers,
        @Nullable Input<Boolean> enableServiceLinks,
        @Nullable Input<List<LocalObjectReferenceArgs>> imagePullSecrets,
        @Nullable Input<String> serviceAccountName,
        @Nullable Input<Integer> timeoutSeconds,
        @Nullable Input<List<VolumeArgs>> volumes) {
        this.containerConcurrency = containerConcurrency;
        this.containers = containers;
        this.enableServiceLinks = enableServiceLinks;
        this.imagePullSecrets = imagePullSecrets;
        this.serviceAccountName = serviceAccountName;
        this.timeoutSeconds = timeoutSeconds;
        this.volumes = volumes;
    }

    private RevisionSpecArgs() {
        this.containerConcurrency = Input.empty();
        this.containers = Input.empty();
        this.enableServiceLinks = Input.empty();
        this.imagePullSecrets = Input.empty();
        this.serviceAccountName = Input.empty();
        this.timeoutSeconds = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RevisionSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> containerConcurrency;
        private @Nullable Input<List<ContainerArgs>> containers;
        private @Nullable Input<Boolean> enableServiceLinks;
        private @Nullable Input<List<LocalObjectReferenceArgs>> imagePullSecrets;
        private @Nullable Input<String> serviceAccountName;
        private @Nullable Input<Integer> timeoutSeconds;
        private @Nullable Input<List<VolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(RevisionSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerConcurrency = defaults.containerConcurrency;
    	      this.containers = defaults.containers;
    	      this.enableServiceLinks = defaults.enableServiceLinks;
    	      this.imagePullSecrets = defaults.imagePullSecrets;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder setContainerConcurrency(@Nullable Input<Integer> containerConcurrency) {
            this.containerConcurrency = containerConcurrency;
            return this;
        }

        public Builder setContainerConcurrency(@Nullable Integer containerConcurrency) {
            this.containerConcurrency = Input.ofNullable(containerConcurrency);
            return this;
        }

        public Builder setContainers(@Nullable Input<List<ContainerArgs>> containers) {
            this.containers = containers;
            return this;
        }

        public Builder setContainers(@Nullable List<ContainerArgs> containers) {
            this.containers = Input.ofNullable(containers);
            return this;
        }

        public Builder setEnableServiceLinks(@Nullable Input<Boolean> enableServiceLinks) {
            this.enableServiceLinks = enableServiceLinks;
            return this;
        }

        public Builder setEnableServiceLinks(@Nullable Boolean enableServiceLinks) {
            this.enableServiceLinks = Input.ofNullable(enableServiceLinks);
            return this;
        }

        public Builder setImagePullSecrets(@Nullable Input<List<LocalObjectReferenceArgs>> imagePullSecrets) {
            this.imagePullSecrets = imagePullSecrets;
            return this;
        }

        public Builder setImagePullSecrets(@Nullable List<LocalObjectReferenceArgs> imagePullSecrets) {
            this.imagePullSecrets = Input.ofNullable(imagePullSecrets);
            return this;
        }

        public Builder setServiceAccountName(@Nullable Input<String> serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder setServiceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = Input.ofNullable(serviceAccountName);
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Input<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Input.ofNullable(timeoutSeconds);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<VolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<VolumeArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }
        public RevisionSpecArgs build() {
            return new RevisionSpecArgs(containerConcurrency, containers, enableServiceLinks, imagePullSecrets, serviceAccountName, timeoutSeconds, volumes);
        }
    }
}
