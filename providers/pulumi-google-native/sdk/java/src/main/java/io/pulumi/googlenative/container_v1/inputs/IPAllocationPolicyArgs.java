// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IPAllocationPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final IPAllocationPolicyArgs Empty = new IPAllocationPolicyArgs();

    @InputImport(name="clusterIpv4CidrBlock")
    private final @Nullable Input<String> clusterIpv4CidrBlock;

    public Input<String> getClusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock == null ? Input.empty() : this.clusterIpv4CidrBlock;
    }

    @InputImport(name="clusterSecondaryRangeName")
    private final @Nullable Input<String> clusterSecondaryRangeName;

    public Input<String> getClusterSecondaryRangeName() {
        return this.clusterSecondaryRangeName == null ? Input.empty() : this.clusterSecondaryRangeName;
    }

    @InputImport(name="createSubnetwork")
    private final @Nullable Input<Boolean> createSubnetwork;

    public Input<Boolean> getCreateSubnetwork() {
        return this.createSubnetwork == null ? Input.empty() : this.createSubnetwork;
    }

    @InputImport(name="nodeIpv4CidrBlock")
    private final @Nullable Input<String> nodeIpv4CidrBlock;

    public Input<String> getNodeIpv4CidrBlock() {
        return this.nodeIpv4CidrBlock == null ? Input.empty() : this.nodeIpv4CidrBlock;
    }

    @InputImport(name="servicesIpv4CidrBlock")
    private final @Nullable Input<String> servicesIpv4CidrBlock;

    public Input<String> getServicesIpv4CidrBlock() {
        return this.servicesIpv4CidrBlock == null ? Input.empty() : this.servicesIpv4CidrBlock;
    }

    @InputImport(name="servicesSecondaryRangeName")
    private final @Nullable Input<String> servicesSecondaryRangeName;

    public Input<String> getServicesSecondaryRangeName() {
        return this.servicesSecondaryRangeName == null ? Input.empty() : this.servicesSecondaryRangeName;
    }

    @InputImport(name="subnetworkName")
    private final @Nullable Input<String> subnetworkName;

    public Input<String> getSubnetworkName() {
        return this.subnetworkName == null ? Input.empty() : this.subnetworkName;
    }

    @InputImport(name="tpuIpv4CidrBlock")
    private final @Nullable Input<String> tpuIpv4CidrBlock;

    public Input<String> getTpuIpv4CidrBlock() {
        return this.tpuIpv4CidrBlock == null ? Input.empty() : this.tpuIpv4CidrBlock;
    }

    @InputImport(name="useIpAliases")
    private final @Nullable Input<Boolean> useIpAliases;

    public Input<Boolean> getUseIpAliases() {
        return this.useIpAliases == null ? Input.empty() : this.useIpAliases;
    }

    @InputImport(name="useRoutes")
    private final @Nullable Input<Boolean> useRoutes;

    public Input<Boolean> getUseRoutes() {
        return this.useRoutes == null ? Input.empty() : this.useRoutes;
    }

    public IPAllocationPolicyArgs(
        @Nullable Input<String> clusterIpv4CidrBlock,
        @Nullable Input<String> clusterSecondaryRangeName,
        @Nullable Input<Boolean> createSubnetwork,
        @Nullable Input<String> nodeIpv4CidrBlock,
        @Nullable Input<String> servicesIpv4CidrBlock,
        @Nullable Input<String> servicesSecondaryRangeName,
        @Nullable Input<String> subnetworkName,
        @Nullable Input<String> tpuIpv4CidrBlock,
        @Nullable Input<Boolean> useIpAliases,
        @Nullable Input<Boolean> useRoutes) {
        this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
        this.clusterSecondaryRangeName = clusterSecondaryRangeName;
        this.createSubnetwork = createSubnetwork;
        this.nodeIpv4CidrBlock = nodeIpv4CidrBlock;
        this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
        this.servicesSecondaryRangeName = servicesSecondaryRangeName;
        this.subnetworkName = subnetworkName;
        this.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
        this.useIpAliases = useIpAliases;
        this.useRoutes = useRoutes;
    }

    private IPAllocationPolicyArgs() {
        this.clusterIpv4CidrBlock = Input.empty();
        this.clusterSecondaryRangeName = Input.empty();
        this.createSubnetwork = Input.empty();
        this.nodeIpv4CidrBlock = Input.empty();
        this.servicesIpv4CidrBlock = Input.empty();
        this.servicesSecondaryRangeName = Input.empty();
        this.subnetworkName = Input.empty();
        this.tpuIpv4CidrBlock = Input.empty();
        this.useIpAliases = Input.empty();
        this.useRoutes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IPAllocationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> clusterIpv4CidrBlock;
        private @Nullable Input<String> clusterSecondaryRangeName;
        private @Nullable Input<Boolean> createSubnetwork;
        private @Nullable Input<String> nodeIpv4CidrBlock;
        private @Nullable Input<String> servicesIpv4CidrBlock;
        private @Nullable Input<String> servicesSecondaryRangeName;
        private @Nullable Input<String> subnetworkName;
        private @Nullable Input<String> tpuIpv4CidrBlock;
        private @Nullable Input<Boolean> useIpAliases;
        private @Nullable Input<Boolean> useRoutes;

        public Builder() {
    	      // Empty
        }

        public Builder(IPAllocationPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.clusterSecondaryRangeName = defaults.clusterSecondaryRangeName;
    	      this.createSubnetwork = defaults.createSubnetwork;
    	      this.nodeIpv4CidrBlock = defaults.nodeIpv4CidrBlock;
    	      this.servicesIpv4CidrBlock = defaults.servicesIpv4CidrBlock;
    	      this.servicesSecondaryRangeName = defaults.servicesSecondaryRangeName;
    	      this.subnetworkName = defaults.subnetworkName;
    	      this.tpuIpv4CidrBlock = defaults.tpuIpv4CidrBlock;
    	      this.useIpAliases = defaults.useIpAliases;
    	      this.useRoutes = defaults.useRoutes;
        }

        public Builder setClusterIpv4CidrBlock(@Nullable Input<String> clusterIpv4CidrBlock) {
            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }

        public Builder setClusterIpv4CidrBlock(@Nullable String clusterIpv4CidrBlock) {
            this.clusterIpv4CidrBlock = Input.ofNullable(clusterIpv4CidrBlock);
            return this;
        }

        public Builder setClusterSecondaryRangeName(@Nullable Input<String> clusterSecondaryRangeName) {
            this.clusterSecondaryRangeName = clusterSecondaryRangeName;
            return this;
        }

        public Builder setClusterSecondaryRangeName(@Nullable String clusterSecondaryRangeName) {
            this.clusterSecondaryRangeName = Input.ofNullable(clusterSecondaryRangeName);
            return this;
        }

        public Builder setCreateSubnetwork(@Nullable Input<Boolean> createSubnetwork) {
            this.createSubnetwork = createSubnetwork;
            return this;
        }

        public Builder setCreateSubnetwork(@Nullable Boolean createSubnetwork) {
            this.createSubnetwork = Input.ofNullable(createSubnetwork);
            return this;
        }

        public Builder setNodeIpv4CidrBlock(@Nullable Input<String> nodeIpv4CidrBlock) {
            this.nodeIpv4CidrBlock = nodeIpv4CidrBlock;
            return this;
        }

        public Builder setNodeIpv4CidrBlock(@Nullable String nodeIpv4CidrBlock) {
            this.nodeIpv4CidrBlock = Input.ofNullable(nodeIpv4CidrBlock);
            return this;
        }

        public Builder setServicesIpv4CidrBlock(@Nullable Input<String> servicesIpv4CidrBlock) {
            this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            return this;
        }

        public Builder setServicesIpv4CidrBlock(@Nullable String servicesIpv4CidrBlock) {
            this.servicesIpv4CidrBlock = Input.ofNullable(servicesIpv4CidrBlock);
            return this;
        }

        public Builder setServicesSecondaryRangeName(@Nullable Input<String> servicesSecondaryRangeName) {
            this.servicesSecondaryRangeName = servicesSecondaryRangeName;
            return this;
        }

        public Builder setServicesSecondaryRangeName(@Nullable String servicesSecondaryRangeName) {
            this.servicesSecondaryRangeName = Input.ofNullable(servicesSecondaryRangeName);
            return this;
        }

        public Builder setSubnetworkName(@Nullable Input<String> subnetworkName) {
            this.subnetworkName = subnetworkName;
            return this;
        }

        public Builder setSubnetworkName(@Nullable String subnetworkName) {
            this.subnetworkName = Input.ofNullable(subnetworkName);
            return this;
        }

        public Builder setTpuIpv4CidrBlock(@Nullable Input<String> tpuIpv4CidrBlock) {
            this.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
            return this;
        }

        public Builder setTpuIpv4CidrBlock(@Nullable String tpuIpv4CidrBlock) {
            this.tpuIpv4CidrBlock = Input.ofNullable(tpuIpv4CidrBlock);
            return this;
        }

        public Builder setUseIpAliases(@Nullable Input<Boolean> useIpAliases) {
            this.useIpAliases = useIpAliases;
            return this;
        }

        public Builder setUseIpAliases(@Nullable Boolean useIpAliases) {
            this.useIpAliases = Input.ofNullable(useIpAliases);
            return this;
        }

        public Builder setUseRoutes(@Nullable Input<Boolean> useRoutes) {
            this.useRoutes = useRoutes;
            return this;
        }

        public Builder setUseRoutes(@Nullable Boolean useRoutes) {
            this.useRoutes = Input.ofNullable(useRoutes);
            return this;
        }

        public IPAllocationPolicyArgs build() {
            return new IPAllocationPolicyArgs(clusterIpv4CidrBlock, clusterSecondaryRangeName, createSubnetwork, nodeIpv4CidrBlock, servicesIpv4CidrBlock, servicesSecondaryRangeName, subnetworkName, tpuIpv4CidrBlock, useIpAliases, useRoutes);
        }
    }
}
