// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class AutoscalingPolicyCustomMetricUtilizationResponse extends io.pulumi.resources.InvokeArgs {

    public static final AutoscalingPolicyCustomMetricUtilizationResponse Empty = new AutoscalingPolicyCustomMetricUtilizationResponse();

    @InputImport(name="filter", required=true)
    private final String filter;

    public String getFilter() {
        return this.filter;
    }

    @InputImport(name="metric", required=true)
    private final String metric;

    public String getMetric() {
        return this.metric;
    }

    @InputImport(name="singleInstanceAssignment", required=true)
    private final Double singleInstanceAssignment;

    public Double getSingleInstanceAssignment() {
        return this.singleInstanceAssignment;
    }

    @InputImport(name="utilizationTarget", required=true)
    private final Double utilizationTarget;

    public Double getUtilizationTarget() {
        return this.utilizationTarget;
    }

    @InputImport(name="utilizationTargetType", required=true)
    private final String utilizationTargetType;

    public String getUtilizationTargetType() {
        return this.utilizationTargetType;
    }

    public AutoscalingPolicyCustomMetricUtilizationResponse(
        String filter,
        String metric,
        Double singleInstanceAssignment,
        Double utilizationTarget,
        String utilizationTargetType) {
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.metric = Objects.requireNonNull(metric, "expected parameter 'metric' to be non-null");
        this.singleInstanceAssignment = Objects.requireNonNull(singleInstanceAssignment, "expected parameter 'singleInstanceAssignment' to be non-null");
        this.utilizationTarget = Objects.requireNonNull(utilizationTarget, "expected parameter 'utilizationTarget' to be non-null");
        this.utilizationTargetType = Objects.requireNonNull(utilizationTargetType, "expected parameter 'utilizationTargetType' to be non-null");
    }

    private AutoscalingPolicyCustomMetricUtilizationResponse() {
        this.filter = null;
        this.metric = null;
        this.singleInstanceAssignment = null;
        this.utilizationTarget = null;
        this.utilizationTargetType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscalingPolicyCustomMetricUtilizationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String filter;
        private String metric;
        private Double singleInstanceAssignment;
        private Double utilizationTarget;
        private String utilizationTargetType;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoscalingPolicyCustomMetricUtilizationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.metric = defaults.metric;
    	      this.singleInstanceAssignment = defaults.singleInstanceAssignment;
    	      this.utilizationTarget = defaults.utilizationTarget;
    	      this.utilizationTargetType = defaults.utilizationTargetType;
        }

        public Builder setFilter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder setMetric(String metric) {
            this.metric = Objects.requireNonNull(metric);
            return this;
        }

        public Builder setSingleInstanceAssignment(Double singleInstanceAssignment) {
            this.singleInstanceAssignment = Objects.requireNonNull(singleInstanceAssignment);
            return this;
        }

        public Builder setUtilizationTarget(Double utilizationTarget) {
            this.utilizationTarget = Objects.requireNonNull(utilizationTarget);
            return this;
        }

        public Builder setUtilizationTargetType(String utilizationTargetType) {
            this.utilizationTargetType = Objects.requireNonNull(utilizationTargetType);
            return this;
        }

        public AutoscalingPolicyCustomMetricUtilizationResponse build() {
            return new AutoscalingPolicyCustomMetricUtilizationResponse(filter, metric, singleInstanceAssignment, utilizationTarget, utilizationTargetType);
        }
    }
}
