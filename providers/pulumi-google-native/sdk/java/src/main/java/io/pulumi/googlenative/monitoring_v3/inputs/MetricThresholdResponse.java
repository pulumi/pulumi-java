// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v3.inputs.AggregationResponse;
import io.pulumi.googlenative.monitoring_v3.inputs.TriggerResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class MetricThresholdResponse extends io.pulumi.resources.InvokeArgs {

    public static final MetricThresholdResponse Empty = new MetricThresholdResponse();

    @InputImport(name="aggregations", required=true)
    private final List<AggregationResponse> aggregations;

    public List<AggregationResponse> getAggregations() {
        return this.aggregations;
    }

    @InputImport(name="comparison", required=true)
    private final String comparison;

    public String getComparison() {
        return this.comparison;
    }

    @InputImport(name="denominatorAggregations", required=true)
    private final List<AggregationResponse> denominatorAggregations;

    public List<AggregationResponse> getDenominatorAggregations() {
        return this.denominatorAggregations;
    }

    @InputImport(name="denominatorFilter", required=true)
    private final String denominatorFilter;

    public String getDenominatorFilter() {
        return this.denominatorFilter;
    }

    @InputImport(name="duration", required=true)
    private final String duration;

    public String getDuration() {
        return this.duration;
    }

    @InputImport(name="filter", required=true)
    private final String filter;

    public String getFilter() {
        return this.filter;
    }

    @InputImport(name="thresholdValue", required=true)
    private final Double thresholdValue;

    public Double getThresholdValue() {
        return this.thresholdValue;
    }

    @InputImport(name="trigger", required=true)
    private final TriggerResponse trigger;

    public TriggerResponse getTrigger() {
        return this.trigger;
    }

    public MetricThresholdResponse(
        List<AggregationResponse> aggregations,
        String comparison,
        List<AggregationResponse> denominatorAggregations,
        String denominatorFilter,
        String duration,
        String filter,
        Double thresholdValue,
        TriggerResponse trigger) {
        this.aggregations = Objects.requireNonNull(aggregations, "expected parameter 'aggregations' to be non-null");
        this.comparison = Objects.requireNonNull(comparison, "expected parameter 'comparison' to be non-null");
        this.denominatorAggregations = Objects.requireNonNull(denominatorAggregations, "expected parameter 'denominatorAggregations' to be non-null");
        this.denominatorFilter = Objects.requireNonNull(denominatorFilter, "expected parameter 'denominatorFilter' to be non-null");
        this.duration = Objects.requireNonNull(duration, "expected parameter 'duration' to be non-null");
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.thresholdValue = Objects.requireNonNull(thresholdValue, "expected parameter 'thresholdValue' to be non-null");
        this.trigger = Objects.requireNonNull(trigger, "expected parameter 'trigger' to be non-null");
    }

    private MetricThresholdResponse() {
        this.aggregations = List.of();
        this.comparison = null;
        this.denominatorAggregations = List.of();
        this.denominatorFilter = null;
        this.duration = null;
        this.filter = null;
        this.thresholdValue = null;
        this.trigger = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricThresholdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AggregationResponse> aggregations;
        private String comparison;
        private List<AggregationResponse> denominatorAggregations;
        private String denominatorFilter;
        private String duration;
        private String filter;
        private Double thresholdValue;
        private TriggerResponse trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricThresholdResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregations = defaults.aggregations;
    	      this.comparison = defaults.comparison;
    	      this.denominatorAggregations = defaults.denominatorAggregations;
    	      this.denominatorFilter = defaults.denominatorFilter;
    	      this.duration = defaults.duration;
    	      this.filter = defaults.filter;
    	      this.thresholdValue = defaults.thresholdValue;
    	      this.trigger = defaults.trigger;
        }

        public Builder setAggregations(List<AggregationResponse> aggregations) {
            this.aggregations = Objects.requireNonNull(aggregations);
            return this;
        }

        public Builder setComparison(String comparison) {
            this.comparison = Objects.requireNonNull(comparison);
            return this;
        }

        public Builder setDenominatorAggregations(List<AggregationResponse> denominatorAggregations) {
            this.denominatorAggregations = Objects.requireNonNull(denominatorAggregations);
            return this;
        }

        public Builder setDenominatorFilter(String denominatorFilter) {
            this.denominatorFilter = Objects.requireNonNull(denominatorFilter);
            return this;
        }

        public Builder setDuration(String duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }

        public Builder setFilter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder setThresholdValue(Double thresholdValue) {
            this.thresholdValue = Objects.requireNonNull(thresholdValue);
            return this;
        }

        public Builder setTrigger(TriggerResponse trigger) {
            this.trigger = Objects.requireNonNull(trigger);
            return this;
        }

        public MetricThresholdResponse build() {
            return new MetricThresholdResponse(aggregations, comparison, denominatorAggregations, denominatorFilter, duration, filter, thresholdValue, trigger);
        }
    }
}
