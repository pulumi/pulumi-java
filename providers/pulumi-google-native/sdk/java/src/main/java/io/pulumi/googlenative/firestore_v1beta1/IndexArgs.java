// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firestore_v1beta1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.firestore_v1beta1.enums.IndexState;
import io.pulumi.googlenative.firestore_v1beta1.inputs.GoogleFirestoreAdminV1beta1IndexFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IndexArgs extends io.pulumi.resources.ResourceArgs {

    public static final IndexArgs Empty = new IndexArgs();

    /**
     * The collection ID to which this index applies. Required.
     * 
     */
    @InputImport(name="collectionId")
    private final @Nullable Input<String> collectionId;

    public Input<String> getCollectionId() {
        return this.collectionId == null ? Input.empty() : this.collectionId;
    }

    @InputImport(name="databaseId", required=true)
    private final Input<String> databaseId;

    public Input<String> getDatabaseId() {
        return this.databaseId;
    }

    /**
     * The fields to index.
     * 
     */
    @InputImport(name="fields")
    private final @Nullable Input<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields;

    public Input<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> getFields() {
        return this.fields == null ? Input.empty() : this.fields;
    }

    /**
     * The resource name of the index. Output only.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The state of the index. Output only.
     * 
     */
    @InputImport(name="state")
    private final @Nullable Input<IndexState> state;

    public Input<IndexState> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    public IndexArgs(
        @Nullable Input<String> collectionId,
        Input<String> databaseId,
        @Nullable Input<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<IndexState> state) {
        this.collectionId = collectionId;
        this.databaseId = Objects.requireNonNull(databaseId, "expected parameter 'databaseId' to be non-null");
        this.fields = fields;
        this.name = name;
        this.project = project;
        this.state = state;
    }

    private IndexArgs() {
        this.collectionId = Input.empty();
        this.databaseId = Input.empty();
        this.fields = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.state = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> collectionId;
        private Input<String> databaseId;
        private @Nullable Input<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<IndexState> state;

        public Builder() {
    	      // Empty
        }

        public Builder(IndexArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectionId = defaults.collectionId;
    	      this.databaseId = defaults.databaseId;
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
        }

        public Builder setCollectionId(@Nullable Input<String> collectionId) {
            this.collectionId = collectionId;
            return this;
        }

        public Builder setCollectionId(@Nullable String collectionId) {
            this.collectionId = Input.ofNullable(collectionId);
            return this;
        }

        public Builder setDatabaseId(Input<String> databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }

        public Builder setDatabaseId(String databaseId) {
            this.databaseId = Input.of(Objects.requireNonNull(databaseId));
            return this;
        }

        public Builder setFields(@Nullable Input<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder setFields(@Nullable List<GoogleFirestoreAdminV1beta1IndexFieldArgs> fields) {
            this.fields = Input.ofNullable(fields);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setState(@Nullable Input<IndexState> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable IndexState state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public IndexArgs build() {
            return new IndexArgs(collectionId, databaseId, fields, name, project, state);
        }
    }
}
