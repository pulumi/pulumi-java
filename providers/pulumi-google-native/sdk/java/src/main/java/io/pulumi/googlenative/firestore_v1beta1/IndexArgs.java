// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firestore_v1beta1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.firestore_v1beta1.enums.IndexState;
import io.pulumi.googlenative.firestore_v1beta1.inputs.GoogleFirestoreAdminV1beta1IndexFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IndexArgs extends io.pulumi.resources.ResourceArgs {

    public static final IndexArgs Empty = new IndexArgs();

    /**
     * The collection ID to which this index applies. Required.
     * 
     */
    @InputImport(name="collectionId")
      private final @Nullable Output<String> collectionId;

    public Output<String> getCollectionId() {
        return this.collectionId == null ? Output.empty() : this.collectionId;
    }

    @InputImport(name="databaseId", required=true)
      private final Output<String> databaseId;

    public Output<String> getDatabaseId() {
        return this.databaseId;
    }

    /**
     * The fields to index.
     * 
     */
    @InputImport(name="fields")
      private final @Nullable Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields;

    public Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> getFields() {
        return this.fields == null ? Output.empty() : this.fields;
    }

    /**
     * The resource name of the index. Output only.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The state of the index. Output only.
     * 
     */
    @InputImport(name="state")
      private final @Nullable Output<IndexState> state;

    public Output<IndexState> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    public IndexArgs(
        @Nullable Output<String> collectionId,
        Output<String> databaseId,
        @Nullable Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<IndexState> state) {
        this.collectionId = collectionId;
        this.databaseId = Objects.requireNonNull(databaseId, "expected parameter 'databaseId' to be non-null");
        this.fields = fields;
        this.name = name;
        this.project = project;
        this.state = state;
    }

    private IndexArgs() {
        this.collectionId = Output.empty();
        this.databaseId = Output.empty();
        this.fields = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.state = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> collectionId;
        private Output<String> databaseId;
        private @Nullable Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<IndexState> state;

        public Builder() {
    	      // Empty
        }

        public Builder(IndexArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectionId = defaults.collectionId;
    	      this.databaseId = defaults.databaseId;
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
        }

        public Builder collectionId(@Nullable Output<String> collectionId) {
            this.collectionId = collectionId;
            return this;
        }

        public Builder collectionId(@Nullable String collectionId) {
            this.collectionId = Output.ofNullable(collectionId);
            return this;
        }

        public Builder databaseId(Output<String> databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }

        public Builder databaseId(String databaseId) {
            this.databaseId = Output.of(Objects.requireNonNull(databaseId));
            return this;
        }

        public Builder fields(@Nullable Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(@Nullable List<GoogleFirestoreAdminV1beta1IndexFieldArgs> fields) {
            this.fields = Output.ofNullable(fields);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder state(@Nullable Output<IndexState> state) {
            this.state = state;
            return this;
        }

        public Builder state(@Nullable IndexState state) {
            this.state = Output.ofNullable(state);
            return this;
        }
        public IndexArgs build() {
            return new IndexArgs(collectionId, databaseId, fields, name, project, state);
        }
    }
}
