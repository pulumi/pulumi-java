// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.AvroOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.BigtableOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.CsvOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.GoogleSheetsOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.HivePartitioningOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.ParquetOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.TableSchemaResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ExternalDataConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final ExternalDataConfigurationResponse Empty = new ExternalDataConfigurationResponse();

    @InputImport(name="autodetect", required=true)
    private final Boolean autodetect;

    public Boolean getAutodetect() {
        return this.autodetect;
    }

    @InputImport(name="avroOptions", required=true)
    private final AvroOptionsResponse avroOptions;

    public AvroOptionsResponse getAvroOptions() {
        return this.avroOptions;
    }

    @InputImport(name="bigtableOptions", required=true)
    private final BigtableOptionsResponse bigtableOptions;

    public BigtableOptionsResponse getBigtableOptions() {
        return this.bigtableOptions;
    }

    @InputImport(name="compression", required=true)
    private final String compression;

    public String getCompression() {
        return this.compression;
    }

    @InputImport(name="connectionId", required=true)
    private final String connectionId;

    public String getConnectionId() {
        return this.connectionId;
    }

    @InputImport(name="csvOptions", required=true)
    private final CsvOptionsResponse csvOptions;

    public CsvOptionsResponse getCsvOptions() {
        return this.csvOptions;
    }

    @InputImport(name="decimalTargetTypes", required=true)
    private final List<String> decimalTargetTypes;

    public List<String> getDecimalTargetTypes() {
        return this.decimalTargetTypes;
    }

    @InputImport(name="googleSheetsOptions", required=true)
    private final GoogleSheetsOptionsResponse googleSheetsOptions;

    public GoogleSheetsOptionsResponse getGoogleSheetsOptions() {
        return this.googleSheetsOptions;
    }

    @InputImport(name="hivePartitioningOptions", required=true)
    private final HivePartitioningOptionsResponse hivePartitioningOptions;

    public HivePartitioningOptionsResponse getHivePartitioningOptions() {
        return this.hivePartitioningOptions;
    }

    @InputImport(name="ignoreUnknownValues", required=true)
    private final Boolean ignoreUnknownValues;

    public Boolean getIgnoreUnknownValues() {
        return this.ignoreUnknownValues;
    }

    @InputImport(name="maxBadRecords", required=true)
    private final Integer maxBadRecords;

    public Integer getMaxBadRecords() {
        return this.maxBadRecords;
    }

    @InputImport(name="parquetOptions", required=true)
    private final ParquetOptionsResponse parquetOptions;

    public ParquetOptionsResponse getParquetOptions() {
        return this.parquetOptions;
    }

    @InputImport(name="schema", required=true)
    private final TableSchemaResponse schema;

    public TableSchemaResponse getSchema() {
        return this.schema;
    }

    @InputImport(name="sourceFormat", required=true)
    private final String sourceFormat;

    public String getSourceFormat() {
        return this.sourceFormat;
    }

    @InputImport(name="sourceUris", required=true)
    private final List<String> sourceUris;

    public List<String> getSourceUris() {
        return this.sourceUris;
    }

    public ExternalDataConfigurationResponse(
        Boolean autodetect,
        AvroOptionsResponse avroOptions,
        BigtableOptionsResponse bigtableOptions,
        String compression,
        String connectionId,
        CsvOptionsResponse csvOptions,
        List<String> decimalTargetTypes,
        GoogleSheetsOptionsResponse googleSheetsOptions,
        HivePartitioningOptionsResponse hivePartitioningOptions,
        Boolean ignoreUnknownValues,
        Integer maxBadRecords,
        ParquetOptionsResponse parquetOptions,
        TableSchemaResponse schema,
        String sourceFormat,
        List<String> sourceUris) {
        this.autodetect = Objects.requireNonNull(autodetect, "expected parameter 'autodetect' to be non-null");
        this.avroOptions = Objects.requireNonNull(avroOptions, "expected parameter 'avroOptions' to be non-null");
        this.bigtableOptions = Objects.requireNonNull(bigtableOptions, "expected parameter 'bigtableOptions' to be non-null");
        this.compression = Objects.requireNonNull(compression, "expected parameter 'compression' to be non-null");
        this.connectionId = Objects.requireNonNull(connectionId, "expected parameter 'connectionId' to be non-null");
        this.csvOptions = Objects.requireNonNull(csvOptions, "expected parameter 'csvOptions' to be non-null");
        this.decimalTargetTypes = Objects.requireNonNull(decimalTargetTypes, "expected parameter 'decimalTargetTypes' to be non-null");
        this.googleSheetsOptions = Objects.requireNonNull(googleSheetsOptions, "expected parameter 'googleSheetsOptions' to be non-null");
        this.hivePartitioningOptions = Objects.requireNonNull(hivePartitioningOptions, "expected parameter 'hivePartitioningOptions' to be non-null");
        this.ignoreUnknownValues = Objects.requireNonNull(ignoreUnknownValues, "expected parameter 'ignoreUnknownValues' to be non-null");
        this.maxBadRecords = Objects.requireNonNull(maxBadRecords, "expected parameter 'maxBadRecords' to be non-null");
        this.parquetOptions = Objects.requireNonNull(parquetOptions, "expected parameter 'parquetOptions' to be non-null");
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
        this.sourceFormat = Objects.requireNonNull(sourceFormat, "expected parameter 'sourceFormat' to be non-null");
        this.sourceUris = Objects.requireNonNull(sourceUris, "expected parameter 'sourceUris' to be non-null");
    }

    private ExternalDataConfigurationResponse() {
        this.autodetect = null;
        this.avroOptions = null;
        this.bigtableOptions = null;
        this.compression = null;
        this.connectionId = null;
        this.csvOptions = null;
        this.decimalTargetTypes = List.of();
        this.googleSheetsOptions = null;
        this.hivePartitioningOptions = null;
        this.ignoreUnknownValues = null;
        this.maxBadRecords = null;
        this.parquetOptions = null;
        this.schema = null;
        this.sourceFormat = null;
        this.sourceUris = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalDataConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean autodetect;
        private AvroOptionsResponse avroOptions;
        private BigtableOptionsResponse bigtableOptions;
        private String compression;
        private String connectionId;
        private CsvOptionsResponse csvOptions;
        private List<String> decimalTargetTypes;
        private GoogleSheetsOptionsResponse googleSheetsOptions;
        private HivePartitioningOptionsResponse hivePartitioningOptions;
        private Boolean ignoreUnknownValues;
        private Integer maxBadRecords;
        private ParquetOptionsResponse parquetOptions;
        private TableSchemaResponse schema;
        private String sourceFormat;
        private List<String> sourceUris;

        public Builder() {
    	      // Empty
        }

        public Builder(ExternalDataConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodetect = defaults.autodetect;
    	      this.avroOptions = defaults.avroOptions;
    	      this.bigtableOptions = defaults.bigtableOptions;
    	      this.compression = defaults.compression;
    	      this.connectionId = defaults.connectionId;
    	      this.csvOptions = defaults.csvOptions;
    	      this.decimalTargetTypes = defaults.decimalTargetTypes;
    	      this.googleSheetsOptions = defaults.googleSheetsOptions;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.parquetOptions = defaults.parquetOptions;
    	      this.schema = defaults.schema;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
        }

        public Builder setAutodetect(Boolean autodetect) {
            this.autodetect = Objects.requireNonNull(autodetect);
            return this;
        }

        public Builder setAvroOptions(AvroOptionsResponse avroOptions) {
            this.avroOptions = Objects.requireNonNull(avroOptions);
            return this;
        }

        public Builder setBigtableOptions(BigtableOptionsResponse bigtableOptions) {
            this.bigtableOptions = Objects.requireNonNull(bigtableOptions);
            return this;
        }

        public Builder setCompression(String compression) {
            this.compression = Objects.requireNonNull(compression);
            return this;
        }

        public Builder setConnectionId(String connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }

        public Builder setCsvOptions(CsvOptionsResponse csvOptions) {
            this.csvOptions = Objects.requireNonNull(csvOptions);
            return this;
        }

        public Builder setDecimalTargetTypes(List<String> decimalTargetTypes) {
            this.decimalTargetTypes = Objects.requireNonNull(decimalTargetTypes);
            return this;
        }

        public Builder setGoogleSheetsOptions(GoogleSheetsOptionsResponse googleSheetsOptions) {
            this.googleSheetsOptions = Objects.requireNonNull(googleSheetsOptions);
            return this;
        }

        public Builder setHivePartitioningOptions(HivePartitioningOptionsResponse hivePartitioningOptions) {
            this.hivePartitioningOptions = Objects.requireNonNull(hivePartitioningOptions);
            return this;
        }

        public Builder setIgnoreUnknownValues(Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Objects.requireNonNull(ignoreUnknownValues);
            return this;
        }

        public Builder setMaxBadRecords(Integer maxBadRecords) {
            this.maxBadRecords = Objects.requireNonNull(maxBadRecords);
            return this;
        }

        public Builder setParquetOptions(ParquetOptionsResponse parquetOptions) {
            this.parquetOptions = Objects.requireNonNull(parquetOptions);
            return this;
        }

        public Builder setSchema(TableSchemaResponse schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }

        public Builder setSourceFormat(String sourceFormat) {
            this.sourceFormat = Objects.requireNonNull(sourceFormat);
            return this;
        }

        public Builder setSourceUris(List<String> sourceUris) {
            this.sourceUris = Objects.requireNonNull(sourceUris);
            return this;
        }

        public ExternalDataConfigurationResponse build() {
            return new ExternalDataConfigurationResponse(autodetect, avroOptions, bigtableOptions, compression, connectionId, csvOptions, decimalTargetTypes, googleSheetsOptions, hivePartitioningOptions, ignoreUnknownValues, maxBadRecords, parquetOptions, schema, sourceFormat, sourceUris);
        }
    }
}
