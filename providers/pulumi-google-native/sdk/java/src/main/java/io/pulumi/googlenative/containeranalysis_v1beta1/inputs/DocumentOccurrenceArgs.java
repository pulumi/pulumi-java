// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DocumentOccurrenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DocumentOccurrenceArgs Empty = new DocumentOccurrenceArgs();

    @InputImport(name="createTime")
    private final @Nullable Input<String> createTime;

    public Input<String> getCreateTime() {
        return this.createTime == null ? Input.empty() : this.createTime;
    }

    @InputImport(name="creatorComment")
    private final @Nullable Input<String> creatorComment;

    public Input<String> getCreatorComment() {
        return this.creatorComment == null ? Input.empty() : this.creatorComment;
    }

    @InputImport(name="creators")
    private final @Nullable Input<List<String>> creators;

    public Input<List<String>> getCreators() {
        return this.creators == null ? Input.empty() : this.creators;
    }

    @InputImport(name="documentComment")
    private final @Nullable Input<String> documentComment;

    public Input<String> getDocumentComment() {
        return this.documentComment == null ? Input.empty() : this.documentComment;
    }

    @InputImport(name="externalDocumentRefs")
    private final @Nullable Input<List<String>> externalDocumentRefs;

    public Input<List<String>> getExternalDocumentRefs() {
        return this.externalDocumentRefs == null ? Input.empty() : this.externalDocumentRefs;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="licenseListVersion")
    private final @Nullable Input<String> licenseListVersion;

    public Input<String> getLicenseListVersion() {
        return this.licenseListVersion == null ? Input.empty() : this.licenseListVersion;
    }

    @InputImport(name="namespace")
    private final @Nullable Input<String> namespace;

    public Input<String> getNamespace() {
        return this.namespace == null ? Input.empty() : this.namespace;
    }

    @InputImport(name="title")
    private final @Nullable Input<String> title;

    public Input<String> getTitle() {
        return this.title == null ? Input.empty() : this.title;
    }

    public DocumentOccurrenceArgs(
        @Nullable Input<String> createTime,
        @Nullable Input<String> creatorComment,
        @Nullable Input<List<String>> creators,
        @Nullable Input<String> documentComment,
        @Nullable Input<List<String>> externalDocumentRefs,
        @Nullable Input<String> id,
        @Nullable Input<String> licenseListVersion,
        @Nullable Input<String> namespace,
        @Nullable Input<String> title) {
        this.createTime = createTime;
        this.creatorComment = creatorComment;
        this.creators = creators;
        this.documentComment = documentComment;
        this.externalDocumentRefs = externalDocumentRefs;
        this.id = id;
        this.licenseListVersion = licenseListVersion;
        this.namespace = namespace;
        this.title = title;
    }

    private DocumentOccurrenceArgs() {
        this.createTime = Input.empty();
        this.creatorComment = Input.empty();
        this.creators = Input.empty();
        this.documentComment = Input.empty();
        this.externalDocumentRefs = Input.empty();
        this.id = Input.empty();
        this.licenseListVersion = Input.empty();
        this.namespace = Input.empty();
        this.title = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createTime;
        private @Nullable Input<String> creatorComment;
        private @Nullable Input<List<String>> creators;
        private @Nullable Input<String> documentComment;
        private @Nullable Input<List<String>> externalDocumentRefs;
        private @Nullable Input<String> id;
        private @Nullable Input<String> licenseListVersion;
        private @Nullable Input<String> namespace;
        private @Nullable Input<String> title;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentOccurrenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.creatorComment = defaults.creatorComment;
    	      this.creators = defaults.creators;
    	      this.documentComment = defaults.documentComment;
    	      this.externalDocumentRefs = defaults.externalDocumentRefs;
    	      this.id = defaults.id;
    	      this.licenseListVersion = defaults.licenseListVersion;
    	      this.namespace = defaults.namespace;
    	      this.title = defaults.title;
        }

        public Builder setCreateTime(@Nullable Input<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder setCreateTime(@Nullable String createTime) {
            this.createTime = Input.ofNullable(createTime);
            return this;
        }

        public Builder setCreatorComment(@Nullable Input<String> creatorComment) {
            this.creatorComment = creatorComment;
            return this;
        }

        public Builder setCreatorComment(@Nullable String creatorComment) {
            this.creatorComment = Input.ofNullable(creatorComment);
            return this;
        }

        public Builder setCreators(@Nullable Input<List<String>> creators) {
            this.creators = creators;
            return this;
        }

        public Builder setCreators(@Nullable List<String> creators) {
            this.creators = Input.ofNullable(creators);
            return this;
        }

        public Builder setDocumentComment(@Nullable Input<String> documentComment) {
            this.documentComment = documentComment;
            return this;
        }

        public Builder setDocumentComment(@Nullable String documentComment) {
            this.documentComment = Input.ofNullable(documentComment);
            return this;
        }

        public Builder setExternalDocumentRefs(@Nullable Input<List<String>> externalDocumentRefs) {
            this.externalDocumentRefs = externalDocumentRefs;
            return this;
        }

        public Builder setExternalDocumentRefs(@Nullable List<String> externalDocumentRefs) {
            this.externalDocumentRefs = Input.ofNullable(externalDocumentRefs);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setLicenseListVersion(@Nullable Input<String> licenseListVersion) {
            this.licenseListVersion = licenseListVersion;
            return this;
        }

        public Builder setLicenseListVersion(@Nullable String licenseListVersion) {
            this.licenseListVersion = Input.ofNullable(licenseListVersion);
            return this;
        }

        public Builder setNamespace(@Nullable Input<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder setNamespace(@Nullable String namespace) {
            this.namespace = Input.ofNullable(namespace);
            return this;
        }

        public Builder setTitle(@Nullable Input<String> title) {
            this.title = title;
            return this;
        }

        public Builder setTitle(@Nullable String title) {
            this.title = Input.ofNullable(title);
            return this;
        }

        public DocumentOccurrenceArgs build() {
            return new DocumentOccurrenceArgs(createTime, creatorComment, creators, documentComment, externalDocumentRefs, id, licenseListVersion, namespace, title);
        }
    }
}
