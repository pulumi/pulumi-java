// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2beta2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudtasks_v2beta2.inputs.AppEngineRoutingResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class AppEngineHttpRequestResponse extends io.pulumi.resources.InvokeArgs {

    public static final AppEngineHttpRequestResponse Empty = new AppEngineHttpRequestResponse();

    @InputImport(name="appEngineRouting", required=true)
    private final AppEngineRoutingResponse appEngineRouting;

    public AppEngineRoutingResponse getAppEngineRouting() {
        return this.appEngineRouting;
    }

    @InputImport(name="headers", required=true)
    private final Map<String,String> headers;

    public Map<String,String> getHeaders() {
        return this.headers;
    }

    @InputImport(name="httpMethod", required=true)
    private final String httpMethod;

    public String getHttpMethod() {
        return this.httpMethod;
    }

    @InputImport(name="payload", required=true)
    private final String payload;

    public String getPayload() {
        return this.payload;
    }

    @InputImport(name="relativeUrl", required=true)
    private final String relativeUrl;

    public String getRelativeUrl() {
        return this.relativeUrl;
    }

    public AppEngineHttpRequestResponse(
        AppEngineRoutingResponse appEngineRouting,
        Map<String,String> headers,
        String httpMethod,
        String payload,
        String relativeUrl) {
        this.appEngineRouting = Objects.requireNonNull(appEngineRouting, "expected parameter 'appEngineRouting' to be non-null");
        this.headers = Objects.requireNonNull(headers, "expected parameter 'headers' to be non-null");
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.payload = Objects.requireNonNull(payload, "expected parameter 'payload' to be non-null");
        this.relativeUrl = Objects.requireNonNull(relativeUrl, "expected parameter 'relativeUrl' to be non-null");
    }

    private AppEngineHttpRequestResponse() {
        this.appEngineRouting = null;
        this.headers = Map.of();
        this.httpMethod = null;
        this.payload = null;
        this.relativeUrl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppEngineHttpRequestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppEngineRoutingResponse appEngineRouting;
        private Map<String,String> headers;
        private String httpMethod;
        private String payload;
        private String relativeUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(AppEngineHttpRequestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineRouting = defaults.appEngineRouting;
    	      this.headers = defaults.headers;
    	      this.httpMethod = defaults.httpMethod;
    	      this.payload = defaults.payload;
    	      this.relativeUrl = defaults.relativeUrl;
        }

        public Builder setAppEngineRouting(AppEngineRoutingResponse appEngineRouting) {
            this.appEngineRouting = Objects.requireNonNull(appEngineRouting);
            return this;
        }

        public Builder setHeaders(Map<String,String> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }

        public Builder setHttpMethod(String httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }

        public Builder setPayload(String payload) {
            this.payload = Objects.requireNonNull(payload);
            return this;
        }

        public Builder setRelativeUrl(String relativeUrl) {
            this.relativeUrl = Objects.requireNonNull(relativeUrl);
            return this;
        }

        public AppEngineHttpRequestResponse build() {
            return new AppEngineHttpRequestResponse(appEngineRouting, headers, httpMethod, payload, relativeUrl);
        }
    }
}
