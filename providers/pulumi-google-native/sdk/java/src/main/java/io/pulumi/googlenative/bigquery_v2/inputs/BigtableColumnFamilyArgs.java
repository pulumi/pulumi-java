// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.bigquery_v2.inputs.BigtableColumnArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BigtableColumnFamilyArgs extends io.pulumi.resources.ResourceArgs {

    public static final BigtableColumnFamilyArgs Empty = new BigtableColumnFamilyArgs();

    /**
     * [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
     * 
     */
    @Import(name="columns")
      private final @Nullable Output<List<BigtableColumnArgs>> columns;

    public Output<List<BigtableColumnArgs>> columns() {
        return this.columns == null ? Codegen.empty() : this.columns;
    }

    /**
     * [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
     * 
     */
    @Import(name="encoding")
      private final @Nullable Output<String> encoding;

    public Output<String> encoding() {
        return this.encoding == null ? Codegen.empty() : this.encoding;
    }

    /**
     * Identifier of the column family.
     * 
     */
    @Import(name="familyId")
      private final @Nullable Output<String> familyId;

    public Output<String> familyId() {
        return this.familyId == null ? Codegen.empty() : this.familyId;
    }

    /**
     * [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
     * 
     */
    @Import(name="onlyReadLatest")
      private final @Nullable Output<Boolean> onlyReadLatest;

    public Output<Boolean> onlyReadLatest() {
        return this.onlyReadLatest == null ? Codegen.empty() : this.onlyReadLatest;
    }

    /**
     * [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public BigtableColumnFamilyArgs(
        @Nullable Output<List<BigtableColumnArgs>> columns,
        @Nullable Output<String> encoding,
        @Nullable Output<String> familyId,
        @Nullable Output<Boolean> onlyReadLatest,
        @Nullable Output<String> type) {
        this.columns = columns;
        this.encoding = encoding;
        this.familyId = familyId;
        this.onlyReadLatest = onlyReadLatest;
        this.type = type;
    }

    private BigtableColumnFamilyArgs() {
        this.columns = Codegen.empty();
        this.encoding = Codegen.empty();
        this.familyId = Codegen.empty();
        this.onlyReadLatest = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigtableColumnFamilyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BigtableColumnArgs>> columns;
        private @Nullable Output<String> encoding;
        private @Nullable Output<String> familyId;
        private @Nullable Output<Boolean> onlyReadLatest;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(BigtableColumnFamilyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.encoding = defaults.encoding;
    	      this.familyId = defaults.familyId;
    	      this.onlyReadLatest = defaults.onlyReadLatest;
    	      this.type = defaults.type;
        }

        public Builder columns(@Nullable Output<List<BigtableColumnArgs>> columns) {
            this.columns = columns;
            return this;
        }
        public Builder columns(@Nullable List<BigtableColumnArgs> columns) {
            this.columns = Codegen.ofNullable(columns);
            return this;
        }
        public Builder columns(BigtableColumnArgs... columns) {
            return columns(List.of(columns));
        }
        public Builder encoding(@Nullable Output<String> encoding) {
            this.encoding = encoding;
            return this;
        }
        public Builder encoding(@Nullable String encoding) {
            this.encoding = Codegen.ofNullable(encoding);
            return this;
        }
        public Builder familyId(@Nullable Output<String> familyId) {
            this.familyId = familyId;
            return this;
        }
        public Builder familyId(@Nullable String familyId) {
            this.familyId = Codegen.ofNullable(familyId);
            return this;
        }
        public Builder onlyReadLatest(@Nullable Output<Boolean> onlyReadLatest) {
            this.onlyReadLatest = onlyReadLatest;
            return this;
        }
        public Builder onlyReadLatest(@Nullable Boolean onlyReadLatest) {
            this.onlyReadLatest = Codegen.ofNullable(onlyReadLatest);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public BigtableColumnFamilyArgs build() {
            return new BigtableColumnFamilyArgs(columns, encoding, familyId, onlyReadLatest, type);
        }
    }
}
