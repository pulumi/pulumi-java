// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudsearch_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudsearch_v1.enums.CompositeFilterLogicOperator;
import io.pulumi.googlenative.cloudsearch_v1.inputs.FilterArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CompositeFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final CompositeFilterArgs Empty = new CompositeFilterArgs();

    /**
     * The logic operator of the sub filter.
     * 
     */
    @Import(name="logicOperator")
      private final @Nullable Output<CompositeFilterLogicOperator> logicOperator;

    public Output<CompositeFilterLogicOperator> logicOperator() {
        return this.logicOperator == null ? Codegen.empty() : this.logicOperator;
    }

    /**
     * Sub filters.
     * 
     */
    @Import(name="subFilters")
      private final @Nullable Output<List<FilterArgs>> subFilters;

    public Output<List<FilterArgs>> subFilters() {
        return this.subFilters == null ? Codegen.empty() : this.subFilters;
    }

    public CompositeFilterArgs(
        @Nullable Output<CompositeFilterLogicOperator> logicOperator,
        @Nullable Output<List<FilterArgs>> subFilters) {
        this.logicOperator = logicOperator;
        this.subFilters = subFilters;
    }

    private CompositeFilterArgs() {
        this.logicOperator = Codegen.empty();
        this.subFilters = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CompositeFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CompositeFilterLogicOperator> logicOperator;
        private @Nullable Output<List<FilterArgs>> subFilters;

        public Builder() {
    	      // Empty
        }

        public Builder(CompositeFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logicOperator = defaults.logicOperator;
    	      this.subFilters = defaults.subFilters;
        }

        public Builder logicOperator(@Nullable Output<CompositeFilterLogicOperator> logicOperator) {
            this.logicOperator = logicOperator;
            return this;
        }
        public Builder logicOperator(@Nullable CompositeFilterLogicOperator logicOperator) {
            this.logicOperator = Codegen.ofNullable(logicOperator);
            return this;
        }
        public Builder subFilters(@Nullable Output<List<FilterArgs>> subFilters) {
            this.subFilters = subFilters;
            return this;
        }
        public Builder subFilters(@Nullable List<FilterArgs> subFilters) {
            this.subFilters = Codegen.ofNullable(subFilters);
            return this;
        }
        public Builder subFilters(FilterArgs... subFilters) {
            return subFilters(List.of(subFilters));
        }        public CompositeFilterArgs build() {
            return new CompositeFilterArgs(logicOperator, subFilters);
        }
    }
}
