// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
 * 
 */
public final class TextMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final TextMappingArgs Empty = new TextMappingArgs();

    /**
     * The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
     * 
     */
    @InputImport(name="atomKey", required=true)
      private final Input<String> atomKey;

    public Input<String> getAtomKey() {
        return this.atomKey;
    }

    /**
     * The `Input.key` that identifies the input file.
     * 
     */
    @InputImport(name="inputKey", required=true)
      private final Input<String> inputKey;

    public Input<String> getInputKey() {
        return this.inputKey;
    }

    /**
     * The zero-based index of the track in the input file.
     * 
     */
    @InputImport(name="inputTrack", required=true)
      private final Input<Integer> inputTrack;

    public Input<Integer> getInputTrack() {
        return this.inputTrack;
    }

    public TextMappingArgs(
        Input<String> atomKey,
        Input<String> inputKey,
        Input<Integer> inputTrack) {
        this.atomKey = Objects.requireNonNull(atomKey, "expected parameter 'atomKey' to be non-null");
        this.inputKey = Objects.requireNonNull(inputKey, "expected parameter 'inputKey' to be non-null");
        this.inputTrack = Objects.requireNonNull(inputTrack, "expected parameter 'inputTrack' to be non-null");
    }

    private TextMappingArgs() {
        this.atomKey = Input.empty();
        this.inputKey = Input.empty();
        this.inputTrack = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TextMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> atomKey;
        private Input<String> inputKey;
        private Input<Integer> inputTrack;

        public Builder() {
    	      // Empty
        }

        public Builder(TextMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atomKey = defaults.atomKey;
    	      this.inputKey = defaults.inputKey;
    	      this.inputTrack = defaults.inputTrack;
        }

        public Builder setAtomKey(Input<String> atomKey) {
            this.atomKey = Objects.requireNonNull(atomKey);
            return this;
        }

        public Builder setAtomKey(String atomKey) {
            this.atomKey = Input.of(Objects.requireNonNull(atomKey));
            return this;
        }

        public Builder setInputKey(Input<String> inputKey) {
            this.inputKey = Objects.requireNonNull(inputKey);
            return this;
        }

        public Builder setInputKey(String inputKey) {
            this.inputKey = Input.of(Objects.requireNonNull(inputKey));
            return this;
        }

        public Builder setInputTrack(Input<Integer> inputTrack) {
            this.inputTrack = Objects.requireNonNull(inputTrack);
            return this;
        }

        public Builder setInputTrack(Integer inputTrack) {
            this.inputTrack = Input.of(Objects.requireNonNull(inputTrack));
            return this;
        }
        public TextMappingArgs build() {
            return new TextMappingArgs(atomKey, inputKey, inputTrack);
        }
    }
}
