// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.osconfig_v1beta.inputs.AssignmentGroupLabelArgs;
import io.pulumi.googlenative.osconfig_v1beta.inputs.AssignmentOsTypeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
 * 
 */
public final class AssignmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final AssignmentArgs Empty = new AssignmentArgs();

    /**
     * Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".
     * 
     */
    @Import(name="groupLabels")
      private final @Nullable Output<List<AssignmentGroupLabelArgs>> groupLabels;

    public Output<List<AssignmentGroupLabelArgs>> getGroupLabels() {
        return this.groupLabels == null ? Codegen.empty() : this.groupLabels;
    }

    /**
     * Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.
     * 
     */
    @Import(name="instanceNamePrefixes")
      private final @Nullable Output<List<String>> instanceNamePrefixes;

    public Output<List<String>> getInstanceNamePrefixes() {
        return this.instanceNamePrefixes == null ? Codegen.empty() : this.instanceNamePrefixes;
    }

    /**
     * Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
     * 
     */
    @Import(name="instances")
      private final @Nullable Output<List<String>> instances;

    public Output<List<String>> getInstances() {
        return this.instances == null ? Codegen.empty() : this.instances;
    }

    /**
     * Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
     * 
     */
    @Import(name="osTypes")
      private final @Nullable Output<List<AssignmentOsTypeArgs>> osTypes;

    public Output<List<AssignmentOsTypeArgs>> getOsTypes() {
        return this.osTypes == null ? Codegen.empty() : this.osTypes;
    }

    /**
     * Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     * 
     */
    @Import(name="zones")
      private final @Nullable Output<List<String>> zones;

    public Output<List<String>> getZones() {
        return this.zones == null ? Codegen.empty() : this.zones;
    }

    public AssignmentArgs(
        @Nullable Output<List<AssignmentGroupLabelArgs>> groupLabels,
        @Nullable Output<List<String>> instanceNamePrefixes,
        @Nullable Output<List<String>> instances,
        @Nullable Output<List<AssignmentOsTypeArgs>> osTypes,
        @Nullable Output<List<String>> zones) {
        this.groupLabels = groupLabels;
        this.instanceNamePrefixes = instanceNamePrefixes;
        this.instances = instances;
        this.osTypes = osTypes;
        this.zones = zones;
    }

    private AssignmentArgs() {
        this.groupLabels = Codegen.empty();
        this.instanceNamePrefixes = Codegen.empty();
        this.instances = Codegen.empty();
        this.osTypes = Codegen.empty();
        this.zones = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AssignmentGroupLabelArgs>> groupLabels;
        private @Nullable Output<List<String>> instanceNamePrefixes;
        private @Nullable Output<List<String>> instances;
        private @Nullable Output<List<AssignmentOsTypeArgs>> osTypes;
        private @Nullable Output<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(AssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupLabels = defaults.groupLabels;
    	      this.instanceNamePrefixes = defaults.instanceNamePrefixes;
    	      this.instances = defaults.instances;
    	      this.osTypes = defaults.osTypes;
    	      this.zones = defaults.zones;
        }

        public Builder groupLabels(@Nullable Output<List<AssignmentGroupLabelArgs>> groupLabels) {
            this.groupLabels = groupLabels;
            return this;
        }
        public Builder groupLabels(@Nullable List<AssignmentGroupLabelArgs> groupLabels) {
            this.groupLabels = Codegen.ofNullable(groupLabels);
            return this;
        }
        public Builder groupLabels(AssignmentGroupLabelArgs... groupLabels) {
            return groupLabels(List.of(groupLabels));
        }
        public Builder instanceNamePrefixes(@Nullable Output<List<String>> instanceNamePrefixes) {
            this.instanceNamePrefixes = instanceNamePrefixes;
            return this;
        }
        public Builder instanceNamePrefixes(@Nullable List<String> instanceNamePrefixes) {
            this.instanceNamePrefixes = Codegen.ofNullable(instanceNamePrefixes);
            return this;
        }
        public Builder instanceNamePrefixes(String... instanceNamePrefixes) {
            return instanceNamePrefixes(List.of(instanceNamePrefixes));
        }
        public Builder instances(@Nullable Output<List<String>> instances) {
            this.instances = instances;
            return this;
        }
        public Builder instances(@Nullable List<String> instances) {
            this.instances = Codegen.ofNullable(instances);
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        public Builder osTypes(@Nullable Output<List<AssignmentOsTypeArgs>> osTypes) {
            this.osTypes = osTypes;
            return this;
        }
        public Builder osTypes(@Nullable List<AssignmentOsTypeArgs> osTypes) {
            this.osTypes = Codegen.ofNullable(osTypes);
            return this;
        }
        public Builder osTypes(AssignmentOsTypeArgs... osTypes) {
            return osTypes(List.of(osTypes));
        }
        public Builder zones(@Nullable Output<List<String>> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = Codegen.ofNullable(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public AssignmentArgs build() {
            return new AssignmentArgs(groupLabels, instanceNamePrefixes, instances, osTypes, zones);
        }
    }
}
