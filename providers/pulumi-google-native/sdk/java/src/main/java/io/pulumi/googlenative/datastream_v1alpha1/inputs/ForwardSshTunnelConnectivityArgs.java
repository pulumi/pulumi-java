// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datastream_v1alpha1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Forward SSH Tunnel connectivity.
 * 
 */
public final class ForwardSshTunnelConnectivityArgs extends io.pulumi.resources.ResourceArgs {

    public static final ForwardSshTunnelConnectivityArgs Empty = new ForwardSshTunnelConnectivityArgs();

    /**
     * Hostname for the SSH tunnel.
     * 
     */
    @Import(name="hostname", required=true)
      private final Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname;
    }

    /**
     * Input only. SSH password.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> getPassword() {
        return this.password == null ? Output.empty() : this.password;
    }

    /**
     * Port for the SSH tunnel, default value is 22.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * Input only. SSH private key.
     * 
     */
    @Import(name="privateKey")
      private final @Nullable Output<String> privateKey;

    public Output<String> getPrivateKey() {
        return this.privateKey == null ? Output.empty() : this.privateKey;
    }

    /**
     * Username for the SSH tunnel.
     * 
     */
    @Import(name="username", required=true)
      private final Output<String> username;

    public Output<String> getUsername() {
        return this.username;
    }

    public ForwardSshTunnelConnectivityArgs(
        Output<String> hostname,
        @Nullable Output<String> password,
        @Nullable Output<Integer> port,
        @Nullable Output<String> privateKey,
        Output<String> username) {
        this.hostname = Objects.requireNonNull(hostname, "expected parameter 'hostname' to be non-null");
        this.password = password;
        this.port = port;
        this.privateKey = privateKey;
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private ForwardSshTunnelConnectivityArgs() {
        this.hostname = Output.empty();
        this.password = Output.empty();
        this.port = Output.empty();
        this.privateKey = Output.empty();
        this.username = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ForwardSshTunnelConnectivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> hostname;
        private @Nullable Output<String> password;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> privateKey;
        private Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(ForwardSshTunnelConnectivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateKey = defaults.privateKey;
    	      this.username = defaults.username;
        }

        public Builder hostname(Output<String> hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }

        public Builder hostname(String hostname) {
            this.hostname = Output.of(Objects.requireNonNull(hostname));
            return this;
        }

        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }

        public Builder password(@Nullable String password) {
            this.password = Output.ofNullable(password);
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder privateKey(@Nullable Output<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = Output.ofNullable(privateKey);
            return this;
        }

        public Builder username(Output<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder username(String username) {
            this.username = Output.of(Objects.requireNonNull(username));
            return this;
        }
        public ForwardSshTunnelConnectivityArgs build() {
            return new ForwardSshTunnelConnectivityArgs(hostname, password, port, privateKey, username);
        }
    }
}
