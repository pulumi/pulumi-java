// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudresourcemanager_v3;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TagKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final TagKeyArgs Empty = new TagKeyArgs();

    /**
     * Optional. User-assigned description of the TagKey. Must not exceed 256 characters. Read-write.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagKeyRequest for details.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> getEtag() {
        return this.etag == null ? Output.empty() : this.etag;
    }

    /**
     * Immutable. The resource name for a TagKey. Must be in the format `tagKeys/{tag_key_id}`, where `tag_key_id` is the generated numeric id for the TagKey.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Immutable. The resource name of the new TagKey's parent. Must be of the form `organizations/{org_id}`.
     * 
     */
    @Import(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Output.empty() : this.parent;
    }

    /**
     * Immutable. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace. The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="shortName", required=true)
      private final Output<String> shortName;

    public Output<String> getShortName() {
        return this.shortName;
    }

    @Import(name="validateOnly")
      private final @Nullable Output<String> validateOnly;

    public Output<String> getValidateOnly() {
        return this.validateOnly == null ? Output.empty() : this.validateOnly;
    }

    public TagKeyArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> etag,
        @Nullable Output<String> name,
        @Nullable Output<String> parent,
        Output<String> shortName,
        @Nullable Output<String> validateOnly) {
        this.description = description;
        this.etag = etag;
        this.name = name;
        this.parent = parent;
        this.shortName = Objects.requireNonNull(shortName, "expected parameter 'shortName' to be non-null");
        this.validateOnly = validateOnly;
    }

    private TagKeyArgs() {
        this.description = Output.empty();
        this.etag = Output.empty();
        this.name = Output.empty();
        this.parent = Output.empty();
        this.shortName = Output.empty();
        this.validateOnly = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TagKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> etag;
        private @Nullable Output<String> name;
        private @Nullable Output<String> parent;
        private Output<String> shortName;
        private @Nullable Output<String> validateOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(TagKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.shortName = defaults.shortName;
    	      this.validateOnly = defaults.validateOnly;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }

        public Builder etag(@Nullable String etag) {
            this.etag = Output.ofNullable(etag);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder parent(@Nullable String parent) {
            this.parent = Output.ofNullable(parent);
            return this;
        }

        public Builder shortName(Output<String> shortName) {
            this.shortName = Objects.requireNonNull(shortName);
            return this;
        }

        public Builder shortName(String shortName) {
            this.shortName = Output.of(Objects.requireNonNull(shortName));
            return this;
        }

        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            this.validateOnly = validateOnly;
            return this;
        }

        public Builder validateOnly(@Nullable String validateOnly) {
            this.validateOnly = Output.ofNullable(validateOnly);
            return this;
        }
        public TagKeyArgs build() {
            return new TagKeyArgs(description, etag, name, parent, shortName, validateOnly);
        }
    }
}
