// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetAccessEntryArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.RoutineReferenceArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.TableReferenceArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatasetAccessItemArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatasetAccessItemArgs Empty = new DatasetAccessItemArgs();

    /**
     * [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
     * 
     */
    @Import(name="dataset")
      private final @Nullable Output<DatasetAccessEntryArgs> dataset;

    public Output<DatasetAccessEntryArgs> getDataset() {
        return this.dataset == null ? Output.empty() : this.dataset;
    }

    /**
     * [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
     * 
     */
    @Import(name="domain")
      private final @Nullable Output<String> domain;

    public Output<String> getDomain() {
        return this.domain == null ? Output.empty() : this.domain;
    }

    /**
     * [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
     * 
     */
    @Import(name="groupByEmail")
      private final @Nullable Output<String> groupByEmail;

    public Output<String> getGroupByEmail() {
        return this.groupByEmail == null ? Output.empty() : this.groupByEmail;
    }

    /**
     * [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
     * 
     */
    @Import(name="iamMember")
      private final @Nullable Output<String> iamMember;

    public Output<String> getIamMember() {
        return this.iamMember == null ? Output.empty() : this.iamMember;
    }

    /**
     * [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
     * 
     */
    @Import(name="role")
      private final @Nullable Output<String> role;

    public Output<String> getRole() {
        return this.role == null ? Output.empty() : this.role;
    }

    /**
     * [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
     * 
     */
    @Import(name="routine")
      private final @Nullable Output<RoutineReferenceArgs> routine;

    public Output<RoutineReferenceArgs> getRoutine() {
        return this.routine == null ? Output.empty() : this.routine;
    }

    /**
     * [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
     * 
     */
    @Import(name="specialGroup")
      private final @Nullable Output<String> specialGroup;

    public Output<String> getSpecialGroup() {
        return this.specialGroup == null ? Output.empty() : this.specialGroup;
    }

    /**
     * [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
     * 
     */
    @Import(name="userByEmail")
      private final @Nullable Output<String> userByEmail;

    public Output<String> getUserByEmail() {
        return this.userByEmail == null ? Output.empty() : this.userByEmail;
    }

    /**
     * [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
     * 
     */
    @Import(name="view")
      private final @Nullable Output<TableReferenceArgs> view;

    public Output<TableReferenceArgs> getView() {
        return this.view == null ? Output.empty() : this.view;
    }

    public DatasetAccessItemArgs(
        @Nullable Output<DatasetAccessEntryArgs> dataset,
        @Nullable Output<String> domain,
        @Nullable Output<String> groupByEmail,
        @Nullable Output<String> iamMember,
        @Nullable Output<String> role,
        @Nullable Output<RoutineReferenceArgs> routine,
        @Nullable Output<String> specialGroup,
        @Nullable Output<String> userByEmail,
        @Nullable Output<TableReferenceArgs> view) {
        this.dataset = dataset;
        this.domain = domain;
        this.groupByEmail = groupByEmail;
        this.iamMember = iamMember;
        this.role = role;
        this.routine = routine;
        this.specialGroup = specialGroup;
        this.userByEmail = userByEmail;
        this.view = view;
    }

    private DatasetAccessItemArgs() {
        this.dataset = Output.empty();
        this.domain = Output.empty();
        this.groupByEmail = Output.empty();
        this.iamMember = Output.empty();
        this.role = Output.empty();
        this.routine = Output.empty();
        this.specialGroup = Output.empty();
        this.userByEmail = Output.empty();
        this.view = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetAccessItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DatasetAccessEntryArgs> dataset;
        private @Nullable Output<String> domain;
        private @Nullable Output<String> groupByEmail;
        private @Nullable Output<String> iamMember;
        private @Nullable Output<String> role;
        private @Nullable Output<RoutineReferenceArgs> routine;
        private @Nullable Output<String> specialGroup;
        private @Nullable Output<String> userByEmail;
        private @Nullable Output<TableReferenceArgs> view;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetAccessItemArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.domain = defaults.domain;
    	      this.groupByEmail = defaults.groupByEmail;
    	      this.iamMember = defaults.iamMember;
    	      this.role = defaults.role;
    	      this.routine = defaults.routine;
    	      this.specialGroup = defaults.specialGroup;
    	      this.userByEmail = defaults.userByEmail;
    	      this.view = defaults.view;
        }

        public Builder dataset(@Nullable Output<DatasetAccessEntryArgs> dataset) {
            this.dataset = dataset;
            return this;
        }

        public Builder dataset(@Nullable DatasetAccessEntryArgs dataset) {
            this.dataset = Output.ofNullable(dataset);
            return this;
        }

        public Builder domain(@Nullable Output<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder domain(@Nullable String domain) {
            this.domain = Output.ofNullable(domain);
            return this;
        }

        public Builder groupByEmail(@Nullable Output<String> groupByEmail) {
            this.groupByEmail = groupByEmail;
            return this;
        }

        public Builder groupByEmail(@Nullable String groupByEmail) {
            this.groupByEmail = Output.ofNullable(groupByEmail);
            return this;
        }

        public Builder iamMember(@Nullable Output<String> iamMember) {
            this.iamMember = iamMember;
            return this;
        }

        public Builder iamMember(@Nullable String iamMember) {
            this.iamMember = Output.ofNullable(iamMember);
            return this;
        }

        public Builder role(@Nullable Output<String> role) {
            this.role = role;
            return this;
        }

        public Builder role(@Nullable String role) {
            this.role = Output.ofNullable(role);
            return this;
        }

        public Builder routine(@Nullable Output<RoutineReferenceArgs> routine) {
            this.routine = routine;
            return this;
        }

        public Builder routine(@Nullable RoutineReferenceArgs routine) {
            this.routine = Output.ofNullable(routine);
            return this;
        }

        public Builder specialGroup(@Nullable Output<String> specialGroup) {
            this.specialGroup = specialGroup;
            return this;
        }

        public Builder specialGroup(@Nullable String specialGroup) {
            this.specialGroup = Output.ofNullable(specialGroup);
            return this;
        }

        public Builder userByEmail(@Nullable Output<String> userByEmail) {
            this.userByEmail = userByEmail;
            return this;
        }

        public Builder userByEmail(@Nullable String userByEmail) {
            this.userByEmail = Output.ofNullable(userByEmail);
            return this;
        }

        public Builder view(@Nullable Output<TableReferenceArgs> view) {
            this.view = view;
            return this;
        }

        public Builder view(@Nullable TableReferenceArgs view) {
            this.view = Output.ofNullable(view);
            return this;
        }
        public DatasetAccessItemArgs build() {
            return new DatasetAccessItemArgs(dataset, domain, groupByEmail, iamMember, role, routine, specialGroup, userByEmail, view);
        }
    }
}
