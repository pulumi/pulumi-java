// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1beta2.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies the type and number of accelerator cards attached to the instances of an instance group (see GPUs on Compute Engine (https://cloud.google.com/compute/docs/gpus/)).
 * 
 */
public final class AcceleratorConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final AcceleratorConfigResponse Empty = new AcceleratorConfigResponse();

    /**
     * The number of the accelerator cards of this type exposed to this instance.
     * 
     */
    @InputImport(name="acceleratorCount", required=true)
      private final Integer acceleratorCount;

    public Integer getAcceleratorCount() {
        return this.acceleratorCount;
    }

    /**
     * Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See Compute Engine AcceleratorTypes (https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes)Examples * https://www.googleapis.com/compute/beta/projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80 * projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80 * nvidia-tesla-k80Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
     * 
     */
    @InputImport(name="acceleratorTypeUri", required=true)
      private final String acceleratorTypeUri;

    public String getAcceleratorTypeUri() {
        return this.acceleratorTypeUri;
    }

    public AcceleratorConfigResponse(
        Integer acceleratorCount,
        String acceleratorTypeUri) {
        this.acceleratorCount = Objects.requireNonNull(acceleratorCount, "expected parameter 'acceleratorCount' to be non-null");
        this.acceleratorTypeUri = Objects.requireNonNull(acceleratorTypeUri, "expected parameter 'acceleratorTypeUri' to be non-null");
    }

    private AcceleratorConfigResponse() {
        this.acceleratorCount = null;
        this.acceleratorTypeUri = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AcceleratorConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer acceleratorCount;
        private String acceleratorTypeUri;

        public Builder() {
    	      // Empty
        }

        public Builder(AcceleratorConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorCount = defaults.acceleratorCount;
    	      this.acceleratorTypeUri = defaults.acceleratorTypeUri;
        }

        public Builder setAcceleratorCount(Integer acceleratorCount) {
            this.acceleratorCount = Objects.requireNonNull(acceleratorCount);
            return this;
        }

        public Builder setAcceleratorTypeUri(String acceleratorTypeUri) {
            this.acceleratorTypeUri = Objects.requireNonNull(acceleratorTypeUri);
            return this;
        }
        public AcceleratorConfigResponse build() {
            return new AcceleratorConfigResponse(acceleratorCount, acceleratorTypeUri);
        }
    }
}
