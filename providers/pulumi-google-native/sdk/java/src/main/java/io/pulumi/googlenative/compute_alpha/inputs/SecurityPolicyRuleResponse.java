// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.inputs.SecurityPolicyRuleHttpHeaderActionResponse;
import io.pulumi.googlenative.compute_alpha.inputs.SecurityPolicyRuleMatcherResponse;
import io.pulumi.googlenative.compute_alpha.inputs.SecurityPolicyRuleRateLimitOptionsResponse;
import io.pulumi.googlenative.compute_alpha.inputs.SecurityPolicyRuleRedirectOptionsResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SecurityPolicyRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final SecurityPolicyRuleResponse Empty = new SecurityPolicyRuleResponse();

    @InputImport(name="action", required=true)
    private final String action;

    public String getAction() {
        return this.action;
    }

    @InputImport(name="description", required=true)
    private final String description;

    public String getDescription() {
        return this.description;
    }

    @InputImport(name="direction", required=true)
    private final String direction;

    public String getDirection() {
        return this.direction;
    }

    @InputImport(name="enableLogging", required=true)
    private final Boolean enableLogging;

    public Boolean getEnableLogging() {
        return this.enableLogging;
    }

    @InputImport(name="headerAction", required=true)
    private final SecurityPolicyRuleHttpHeaderActionResponse headerAction;

    public SecurityPolicyRuleHttpHeaderActionResponse getHeaderAction() {
        return this.headerAction;
    }

    @InputImport(name="kind", required=true)
    private final String kind;

    public String getKind() {
        return this.kind;
    }

    @InputImport(name="match", required=true)
    private final SecurityPolicyRuleMatcherResponse match;

    public SecurityPolicyRuleMatcherResponse getMatch() {
        return this.match;
    }

    @InputImport(name="preview", required=true)
    private final Boolean preview;

    public Boolean getPreview() {
        return this.preview;
    }

    @InputImport(name="priority", required=true)
    private final Integer priority;

    public Integer getPriority() {
        return this.priority;
    }

    @InputImport(name="rateLimitOptions", required=true)
    private final SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions;

    public SecurityPolicyRuleRateLimitOptionsResponse getRateLimitOptions() {
        return this.rateLimitOptions;
    }

    @InputImport(name="redirectOptions", required=true)
    private final SecurityPolicyRuleRedirectOptionsResponse redirectOptions;

    public SecurityPolicyRuleRedirectOptionsResponse getRedirectOptions() {
        return this.redirectOptions;
    }

    @InputImport(name="redirectTarget", required=true)
    private final String redirectTarget;

    public String getRedirectTarget() {
        return this.redirectTarget;
    }

    @InputImport(name="ruleNumber", required=true)
    private final String ruleNumber;

    public String getRuleNumber() {
        return this.ruleNumber;
    }

    @InputImport(name="ruleTupleCount", required=true)
    private final Integer ruleTupleCount;

    public Integer getRuleTupleCount() {
        return this.ruleTupleCount;
    }

    @InputImport(name="targetResources", required=true)
    private final List<String> targetResources;

    public List<String> getTargetResources() {
        return this.targetResources;
    }

    @InputImport(name="targetServiceAccounts", required=true)
    private final List<String> targetServiceAccounts;

    public List<String> getTargetServiceAccounts() {
        return this.targetServiceAccounts;
    }

    public SecurityPolicyRuleResponse(
        String action,
        String description,
        String direction,
        Boolean enableLogging,
        SecurityPolicyRuleHttpHeaderActionResponse headerAction,
        String kind,
        SecurityPolicyRuleMatcherResponse match,
        Boolean preview,
        Integer priority,
        SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions,
        SecurityPolicyRuleRedirectOptionsResponse redirectOptions,
        String redirectTarget,
        String ruleNumber,
        Integer ruleTupleCount,
        List<String> targetResources,
        List<String> targetServiceAccounts) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.direction = Objects.requireNonNull(direction, "expected parameter 'direction' to be non-null");
        this.enableLogging = Objects.requireNonNull(enableLogging, "expected parameter 'enableLogging' to be non-null");
        this.headerAction = Objects.requireNonNull(headerAction, "expected parameter 'headerAction' to be non-null");
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.match = Objects.requireNonNull(match, "expected parameter 'match' to be non-null");
        this.preview = Objects.requireNonNull(preview, "expected parameter 'preview' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.rateLimitOptions = Objects.requireNonNull(rateLimitOptions, "expected parameter 'rateLimitOptions' to be non-null");
        this.redirectOptions = Objects.requireNonNull(redirectOptions, "expected parameter 'redirectOptions' to be non-null");
        this.redirectTarget = Objects.requireNonNull(redirectTarget, "expected parameter 'redirectTarget' to be non-null");
        this.ruleNumber = Objects.requireNonNull(ruleNumber, "expected parameter 'ruleNumber' to be non-null");
        this.ruleTupleCount = Objects.requireNonNull(ruleTupleCount, "expected parameter 'ruleTupleCount' to be non-null");
        this.targetResources = Objects.requireNonNull(targetResources, "expected parameter 'targetResources' to be non-null");
        this.targetServiceAccounts = Objects.requireNonNull(targetServiceAccounts, "expected parameter 'targetServiceAccounts' to be non-null");
    }

    private SecurityPolicyRuleResponse() {
        this.action = null;
        this.description = null;
        this.direction = null;
        this.enableLogging = null;
        this.headerAction = null;
        this.kind = null;
        this.match = null;
        this.preview = null;
        this.priority = null;
        this.rateLimitOptions = null;
        this.redirectOptions = null;
        this.redirectTarget = null;
        this.ruleNumber = null;
        this.ruleTupleCount = null;
        this.targetResources = List.of();
        this.targetServiceAccounts = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private String description;
        private String direction;
        private Boolean enableLogging;
        private SecurityPolicyRuleHttpHeaderActionResponse headerAction;
        private String kind;
        private SecurityPolicyRuleMatcherResponse match;
        private Boolean preview;
        private Integer priority;
        private SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions;
        private SecurityPolicyRuleRedirectOptionsResponse redirectOptions;
        private String redirectTarget;
        private String ruleNumber;
        private Integer ruleTupleCount;
        private List<String> targetResources;
        private List<String> targetServiceAccounts;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityPolicyRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.enableLogging = defaults.enableLogging;
    	      this.headerAction = defaults.headerAction;
    	      this.kind = defaults.kind;
    	      this.match = defaults.match;
    	      this.preview = defaults.preview;
    	      this.priority = defaults.priority;
    	      this.rateLimitOptions = defaults.rateLimitOptions;
    	      this.redirectOptions = defaults.redirectOptions;
    	      this.redirectTarget = defaults.redirectTarget;
    	      this.ruleNumber = defaults.ruleNumber;
    	      this.ruleTupleCount = defaults.ruleTupleCount;
    	      this.targetResources = defaults.targetResources;
    	      this.targetServiceAccounts = defaults.targetServiceAccounts;
        }

        public Builder setAction(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDirection(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }

        public Builder setEnableLogging(Boolean enableLogging) {
            this.enableLogging = Objects.requireNonNull(enableLogging);
            return this;
        }

        public Builder setHeaderAction(SecurityPolicyRuleHttpHeaderActionResponse headerAction) {
            this.headerAction = Objects.requireNonNull(headerAction);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setMatch(SecurityPolicyRuleMatcherResponse match) {
            this.match = Objects.requireNonNull(match);
            return this;
        }

        public Builder setPreview(Boolean preview) {
            this.preview = Objects.requireNonNull(preview);
            return this;
        }

        public Builder setPriority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }

        public Builder setRateLimitOptions(SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions) {
            this.rateLimitOptions = Objects.requireNonNull(rateLimitOptions);
            return this;
        }

        public Builder setRedirectOptions(SecurityPolicyRuleRedirectOptionsResponse redirectOptions) {
            this.redirectOptions = Objects.requireNonNull(redirectOptions);
            return this;
        }

        public Builder setRedirectTarget(String redirectTarget) {
            this.redirectTarget = Objects.requireNonNull(redirectTarget);
            return this;
        }

        public Builder setRuleNumber(String ruleNumber) {
            this.ruleNumber = Objects.requireNonNull(ruleNumber);
            return this;
        }

        public Builder setRuleTupleCount(Integer ruleTupleCount) {
            this.ruleTupleCount = Objects.requireNonNull(ruleTupleCount);
            return this;
        }

        public Builder setTargetResources(List<String> targetResources) {
            this.targetResources = Objects.requireNonNull(targetResources);
            return this;
        }

        public Builder setTargetServiceAccounts(List<String> targetServiceAccounts) {
            this.targetServiceAccounts = Objects.requireNonNull(targetServiceAccounts);
            return this;
        }

        public SecurityPolicyRuleResponse build() {
            return new SecurityPolicyRuleResponse(action, description, direction, enableLogging, headerAction, kind, match, preview, priority, rateLimitOptions, redirectOptions, redirectTarget, ruleNumber, ruleTupleCount, targetResources, targetServiceAccounts);
        }
    }
}
