// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
 * 
 */
public final class IosXcTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final IosXcTestArgs Empty = new IosXcTestArgs();

    /**
     * The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
     * 
     */
    @Import(name="testSpecialEntitlements")
      private final @Nullable Output<Boolean> testSpecialEntitlements;

    public Output<Boolean> getTestSpecialEntitlements() {
        return this.testSpecialEntitlements == null ? Output.empty() : this.testSpecialEntitlements;
    }

    /**
     * The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
     * 
     */
    @Import(name="testsZip", required=true)
      private final Output<FileReferenceArgs> testsZip;

    public Output<FileReferenceArgs> getTestsZip() {
        return this.testsZip;
    }

    /**
     * The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
     * 
     */
    @Import(name="xcodeVersion")
      private final @Nullable Output<String> xcodeVersion;

    public Output<String> getXcodeVersion() {
        return this.xcodeVersion == null ? Output.empty() : this.xcodeVersion;
    }

    /**
     * An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
     * 
     */
    @Import(name="xctestrun")
      private final @Nullable Output<FileReferenceArgs> xctestrun;

    public Output<FileReferenceArgs> getXctestrun() {
        return this.xctestrun == null ? Output.empty() : this.xctestrun;
    }

    public IosXcTestArgs(
        @Nullable Output<Boolean> testSpecialEntitlements,
        Output<FileReferenceArgs> testsZip,
        @Nullable Output<String> xcodeVersion,
        @Nullable Output<FileReferenceArgs> xctestrun) {
        this.testSpecialEntitlements = testSpecialEntitlements;
        this.testsZip = Objects.requireNonNull(testsZip, "expected parameter 'testsZip' to be non-null");
        this.xcodeVersion = xcodeVersion;
        this.xctestrun = xctestrun;
    }

    private IosXcTestArgs() {
        this.testSpecialEntitlements = Output.empty();
        this.testsZip = Output.empty();
        this.xcodeVersion = Output.empty();
        this.xctestrun = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IosXcTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> testSpecialEntitlements;
        private Output<FileReferenceArgs> testsZip;
        private @Nullable Output<String> xcodeVersion;
        private @Nullable Output<FileReferenceArgs> xctestrun;

        public Builder() {
    	      // Empty
        }

        public Builder(IosXcTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.testSpecialEntitlements = defaults.testSpecialEntitlements;
    	      this.testsZip = defaults.testsZip;
    	      this.xcodeVersion = defaults.xcodeVersion;
    	      this.xctestrun = defaults.xctestrun;
        }

        public Builder testSpecialEntitlements(@Nullable Output<Boolean> testSpecialEntitlements) {
            this.testSpecialEntitlements = testSpecialEntitlements;
            return this;
        }
        public Builder testSpecialEntitlements(@Nullable Boolean testSpecialEntitlements) {
            this.testSpecialEntitlements = Output.ofNullable(testSpecialEntitlements);
            return this;
        }
        public Builder testsZip(Output<FileReferenceArgs> testsZip) {
            this.testsZip = Objects.requireNonNull(testsZip);
            return this;
        }
        public Builder testsZip(FileReferenceArgs testsZip) {
            this.testsZip = Output.of(Objects.requireNonNull(testsZip));
            return this;
        }
        public Builder xcodeVersion(@Nullable Output<String> xcodeVersion) {
            this.xcodeVersion = xcodeVersion;
            return this;
        }
        public Builder xcodeVersion(@Nullable String xcodeVersion) {
            this.xcodeVersion = Output.ofNullable(xcodeVersion);
            return this;
        }
        public Builder xctestrun(@Nullable Output<FileReferenceArgs> xctestrun) {
            this.xctestrun = xctestrun;
            return this;
        }
        public Builder xctestrun(@Nullable FileReferenceArgs xctestrun) {
            this.xctestrun = Output.ofNullable(xctestrun);
            return this;
        }        public IosXcTestArgs build() {
            return new IosXcTestArgs(testSpecialEntitlements, testsZip, xcodeVersion, xctestrun);
        }
    }
}
