// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IosXcTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final IosXcTestArgs Empty = new IosXcTestArgs();

    @InputImport(name="testSpecialEntitlements")
    private final @Nullable Input<Boolean> testSpecialEntitlements;

    public Input<Boolean> getTestSpecialEntitlements() {
        return this.testSpecialEntitlements == null ? Input.empty() : this.testSpecialEntitlements;
    }

    @InputImport(name="testsZip", required=true)
    private final Input<FileReferenceArgs> testsZip;

    public Input<FileReferenceArgs> getTestsZip() {
        return this.testsZip;
    }

    @InputImport(name="xcodeVersion")
    private final @Nullable Input<String> xcodeVersion;

    public Input<String> getXcodeVersion() {
        return this.xcodeVersion == null ? Input.empty() : this.xcodeVersion;
    }

    @InputImport(name="xctestrun")
    private final @Nullable Input<FileReferenceArgs> xctestrun;

    public Input<FileReferenceArgs> getXctestrun() {
        return this.xctestrun == null ? Input.empty() : this.xctestrun;
    }

    public IosXcTestArgs(
        @Nullable Input<Boolean> testSpecialEntitlements,
        Input<FileReferenceArgs> testsZip,
        @Nullable Input<String> xcodeVersion,
        @Nullable Input<FileReferenceArgs> xctestrun) {
        this.testSpecialEntitlements = testSpecialEntitlements;
        this.testsZip = Objects.requireNonNull(testsZip, "expected parameter 'testsZip' to be non-null");
        this.xcodeVersion = xcodeVersion;
        this.xctestrun = xctestrun;
    }

    private IosXcTestArgs() {
        this.testSpecialEntitlements = Input.empty();
        this.testsZip = Input.empty();
        this.xcodeVersion = Input.empty();
        this.xctestrun = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IosXcTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> testSpecialEntitlements;
        private Input<FileReferenceArgs> testsZip;
        private @Nullable Input<String> xcodeVersion;
        private @Nullable Input<FileReferenceArgs> xctestrun;

        public Builder() {
    	      // Empty
        }

        public Builder(IosXcTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.testSpecialEntitlements = defaults.testSpecialEntitlements;
    	      this.testsZip = defaults.testsZip;
    	      this.xcodeVersion = defaults.xcodeVersion;
    	      this.xctestrun = defaults.xctestrun;
        }

        public Builder setTestSpecialEntitlements(@Nullable Input<Boolean> testSpecialEntitlements) {
            this.testSpecialEntitlements = testSpecialEntitlements;
            return this;
        }

        public Builder setTestSpecialEntitlements(@Nullable Boolean testSpecialEntitlements) {
            this.testSpecialEntitlements = Input.ofNullable(testSpecialEntitlements);
            return this;
        }

        public Builder setTestsZip(Input<FileReferenceArgs> testsZip) {
            this.testsZip = Objects.requireNonNull(testsZip);
            return this;
        }

        public Builder setTestsZip(FileReferenceArgs testsZip) {
            this.testsZip = Input.of(Objects.requireNonNull(testsZip));
            return this;
        }

        public Builder setXcodeVersion(@Nullable Input<String> xcodeVersion) {
            this.xcodeVersion = xcodeVersion;
            return this;
        }

        public Builder setXcodeVersion(@Nullable String xcodeVersion) {
            this.xcodeVersion = Input.ofNullable(xcodeVersion);
            return this;
        }

        public Builder setXctestrun(@Nullable Input<FileReferenceArgs> xctestrun) {
            this.xctestrun = xctestrun;
            return this;
        }

        public Builder setXctestrun(@Nullable FileReferenceArgs xctestrun) {
            this.xctestrun = Input.ofNullable(xctestrun);
            return this;
        }

        public IosXcTestArgs build() {
            return new IosXcTestArgs(testSpecialEntitlements, testsZip, xcodeVersion, xctestrun);
        }
    }
}
