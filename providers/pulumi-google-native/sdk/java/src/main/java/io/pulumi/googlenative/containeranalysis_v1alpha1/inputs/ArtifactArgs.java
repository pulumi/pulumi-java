// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Artifact describes a build product.
 * 
 */
public final class ArtifactArgs extends io.pulumi.resources.ResourceArgs {

    public static final ArtifactArgs Empty = new ArtifactArgs();

    /**
     * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
     * 
     */
    @InputImport(name="checksum")
    private final @Nullable Input<String> checksum;

    public Input<String> getChecksum() {
        return this.checksum == null ? Input.empty() : this.checksum;
    }

    /**
     * Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
     * 
     */
    @InputImport(name="names")
    private final @Nullable Input<List<String>> names;

    public Input<List<String>> getNames() {
        return this.names == null ? Input.empty() : this.names;
    }

    public ArtifactArgs(
        @Nullable Input<String> checksum,
        @Nullable Input<String> id,
        @Nullable Input<List<String>> names) {
        this.checksum = checksum;
        this.id = id;
        this.names = names;
    }

    private ArtifactArgs() {
        this.checksum = Input.empty();
        this.id = Input.empty();
        this.names = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> checksum;
        private @Nullable Input<String> id;
        private @Nullable Input<List<String>> names;

        public Builder() {
    	      // Empty
        }

        public Builder(ArtifactArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checksum = defaults.checksum;
    	      this.id = defaults.id;
    	      this.names = defaults.names;
        }

        public Builder setChecksum(@Nullable Input<String> checksum) {
            this.checksum = checksum;
            return this;
        }

        public Builder setChecksum(@Nullable String checksum) {
            this.checksum = Input.ofNullable(checksum);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setNames(@Nullable Input<List<String>> names) {
            this.names = names;
            return this;
        }

        public Builder setNames(@Nullable List<String> names) {
            this.names = Input.ofNullable(names);
            return this;
        }

        public ArtifactArgs build() {
            return new ArtifactArgs(checksum, id, names);
        }
    }
}
