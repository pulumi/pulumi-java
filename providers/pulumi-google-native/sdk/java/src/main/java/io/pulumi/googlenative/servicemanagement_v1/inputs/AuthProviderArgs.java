// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.servicemanagement_v1.inputs.JwtLocationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 * 
 */
public final class AuthProviderArgs extends io.pulumi.resources.ResourceArgs {

    public static final AuthProviderArgs Empty = new AuthProviderArgs();

    /**
     * The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
     * 
     */
    @Import(name="audiences")
      private final @Nullable Output<String> audiences;

    public Output<String> getAudiences() {
        return this.audiences == null ? Output.empty() : this.audiences;
    }

    /**
     * Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
     * 
     */
    @Import(name="authorizationUrl")
      private final @Nullable Output<String> authorizationUrl;

    public Output<String> getAuthorizationUrl() {
        return this.authorizationUrl == null ? Output.empty() : this.authorizationUrl;
    }

    /**
     * The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth".
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
     * 
     */
    @Import(name="issuer")
      private final @Nullable Output<String> issuer;

    public Output<String> getIssuer() {
        return this.issuer == null ? Output.empty() : this.issuer;
    }

    /**
     * URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
     * 
     */
    @Import(name="jwksUri")
      private final @Nullable Output<String> jwksUri;

    public Output<String> getJwksUri() {
        return this.jwksUri == null ? Output.empty() : this.jwksUri;
    }

    /**
     * Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query: access_token
     * 
     */
    @Import(name="jwtLocations")
      private final @Nullable Output<List<JwtLocationArgs>> jwtLocations;

    public Output<List<JwtLocationArgs>> getJwtLocations() {
        return this.jwtLocations == null ? Output.empty() : this.jwtLocations;
    }

    public AuthProviderArgs(
        @Nullable Output<String> audiences,
        @Nullable Output<String> authorizationUrl,
        @Nullable Output<String> id,
        @Nullable Output<String> issuer,
        @Nullable Output<String> jwksUri,
        @Nullable Output<List<JwtLocationArgs>> jwtLocations) {
        this.audiences = audiences;
        this.authorizationUrl = authorizationUrl;
        this.id = id;
        this.issuer = issuer;
        this.jwksUri = jwksUri;
        this.jwtLocations = jwtLocations;
    }

    private AuthProviderArgs() {
        this.audiences = Output.empty();
        this.authorizationUrl = Output.empty();
        this.id = Output.empty();
        this.issuer = Output.empty();
        this.jwksUri = Output.empty();
        this.jwtLocations = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> audiences;
        private @Nullable Output<String> authorizationUrl;
        private @Nullable Output<String> id;
        private @Nullable Output<String> issuer;
        private @Nullable Output<String> jwksUri;
        private @Nullable Output<List<JwtLocationArgs>> jwtLocations;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthProviderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.authorizationUrl = defaults.authorizationUrl;
    	      this.id = defaults.id;
    	      this.issuer = defaults.issuer;
    	      this.jwksUri = defaults.jwksUri;
    	      this.jwtLocations = defaults.jwtLocations;
        }

        public Builder audiences(@Nullable Output<String> audiences) {
            this.audiences = audiences;
            return this;
        }

        public Builder audiences(@Nullable String audiences) {
            this.audiences = Output.ofNullable(audiences);
            return this;
        }

        public Builder authorizationUrl(@Nullable Output<String> authorizationUrl) {
            this.authorizationUrl = authorizationUrl;
            return this;
        }

        public Builder authorizationUrl(@Nullable String authorizationUrl) {
            this.authorizationUrl = Output.ofNullable(authorizationUrl);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder issuer(@Nullable Output<String> issuer) {
            this.issuer = issuer;
            return this;
        }

        public Builder issuer(@Nullable String issuer) {
            this.issuer = Output.ofNullable(issuer);
            return this;
        }

        public Builder jwksUri(@Nullable Output<String> jwksUri) {
            this.jwksUri = jwksUri;
            return this;
        }

        public Builder jwksUri(@Nullable String jwksUri) {
            this.jwksUri = Output.ofNullable(jwksUri);
            return this;
        }

        public Builder jwtLocations(@Nullable Output<List<JwtLocationArgs>> jwtLocations) {
            this.jwtLocations = jwtLocations;
            return this;
        }

        public Builder jwtLocations(@Nullable List<JwtLocationArgs> jwtLocations) {
            this.jwtLocations = Output.ofNullable(jwtLocations);
            return this;
        }
        public AuthProviderArgs build() {
            return new AuthProviderArgs(audiences, authorizationUrl, id, issuer, jwksUri, jwtLocations);
        }
    }
}
