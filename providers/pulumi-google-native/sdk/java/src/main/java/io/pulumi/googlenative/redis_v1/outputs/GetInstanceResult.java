// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.redis_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.redis_v1.outputs.MaintenancePolicyResponse;
import io.pulumi.googlenative.redis_v1.outputs.MaintenanceScheduleResponse;
import io.pulumi.googlenative.redis_v1.outputs.NodeInfoResponse;
import io.pulumi.googlenative.redis_v1.outputs.PersistenceConfigResponse;
import io.pulumi.googlenative.redis_v1.outputs.TlsCertificateResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetInstanceResult {
    private final String alternativeLocationId;
    private final Boolean authEnabled;
    private final String authorizedNetwork;
    private final String connectMode;
    private final String createTime;
    private final String currentLocationId;
    private final String displayName;
    private final String host;
    private final Map<String,String> labels;
    private final String location;
    private final MaintenancePolicyResponse maintenancePolicy;
    private final MaintenanceScheduleResponse maintenanceSchedule;
    private final Integer memorySizeGb;
    private final String name;
    private final List<NodeInfoResponse> nodes;
    private final PersistenceConfigResponse persistenceConfig;
    private final String persistenceIamIdentity;
    private final Integer port;
    private final String readEndpoint;
    private final Integer readEndpointPort;
    private final String readReplicasMode;
    private final Map<String,String> redisConfigs;
    private final String redisVersion;
    private final Integer replicaCount;
    private final String reservedIpRange;
    private final String secondaryIpRange;
    private final List<TlsCertificateResponse> serverCaCerts;
    private final String state;
    private final String statusMessage;
    private final String tier;
    private final String transitEncryptionMode;

    @OutputCustomType.Constructor({"alternativeLocationId","authEnabled","authorizedNetwork","connectMode","createTime","currentLocationId","displayName","host","labels","location","maintenancePolicy","maintenanceSchedule","memorySizeGb","name","nodes","persistenceConfig","persistenceIamIdentity","port","readEndpoint","readEndpointPort","readReplicasMode","redisConfigs","redisVersion","replicaCount","reservedIpRange","secondaryIpRange","serverCaCerts","state","statusMessage","tier","transitEncryptionMode"})
    private GetInstanceResult(
        String alternativeLocationId,
        Boolean authEnabled,
        String authorizedNetwork,
        String connectMode,
        String createTime,
        String currentLocationId,
        String displayName,
        String host,
        Map<String,String> labels,
        String location,
        MaintenancePolicyResponse maintenancePolicy,
        MaintenanceScheduleResponse maintenanceSchedule,
        Integer memorySizeGb,
        String name,
        List<NodeInfoResponse> nodes,
        PersistenceConfigResponse persistenceConfig,
        String persistenceIamIdentity,
        Integer port,
        String readEndpoint,
        Integer readEndpointPort,
        String readReplicasMode,
        Map<String,String> redisConfigs,
        String redisVersion,
        Integer replicaCount,
        String reservedIpRange,
        String secondaryIpRange,
        List<TlsCertificateResponse> serverCaCerts,
        String state,
        String statusMessage,
        String tier,
        String transitEncryptionMode) {
        this.alternativeLocationId = Objects.requireNonNull(alternativeLocationId);
        this.authEnabled = Objects.requireNonNull(authEnabled);
        this.authorizedNetwork = Objects.requireNonNull(authorizedNetwork);
        this.connectMode = Objects.requireNonNull(connectMode);
        this.createTime = Objects.requireNonNull(createTime);
        this.currentLocationId = Objects.requireNonNull(currentLocationId);
        this.displayName = Objects.requireNonNull(displayName);
        this.host = Objects.requireNonNull(host);
        this.labels = Objects.requireNonNull(labels);
        this.location = Objects.requireNonNull(location);
        this.maintenancePolicy = Objects.requireNonNull(maintenancePolicy);
        this.maintenanceSchedule = Objects.requireNonNull(maintenanceSchedule);
        this.memorySizeGb = Objects.requireNonNull(memorySizeGb);
        this.name = Objects.requireNonNull(name);
        this.nodes = Objects.requireNonNull(nodes);
        this.persistenceConfig = Objects.requireNonNull(persistenceConfig);
        this.persistenceIamIdentity = Objects.requireNonNull(persistenceIamIdentity);
        this.port = Objects.requireNonNull(port);
        this.readEndpoint = Objects.requireNonNull(readEndpoint);
        this.readEndpointPort = Objects.requireNonNull(readEndpointPort);
        this.readReplicasMode = Objects.requireNonNull(readReplicasMode);
        this.redisConfigs = Objects.requireNonNull(redisConfigs);
        this.redisVersion = Objects.requireNonNull(redisVersion);
        this.replicaCount = Objects.requireNonNull(replicaCount);
        this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
        this.secondaryIpRange = Objects.requireNonNull(secondaryIpRange);
        this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
        this.state = Objects.requireNonNull(state);
        this.statusMessage = Objects.requireNonNull(statusMessage);
        this.tier = Objects.requireNonNull(tier);
        this.transitEncryptionMode = Objects.requireNonNull(transitEncryptionMode);
    }

    public String getAlternativeLocationId() {
        return this.alternativeLocationId;
    }
    public Boolean getAuthEnabled() {
        return this.authEnabled;
    }
    public String getAuthorizedNetwork() {
        return this.authorizedNetwork;
    }
    public String getConnectMode() {
        return this.connectMode;
    }
    public String getCreateTime() {
        return this.createTime;
    }
    public String getCurrentLocationId() {
        return this.currentLocationId;
    }
    public String getDisplayName() {
        return this.displayName;
    }
    public String getHost() {
        return this.host;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public String getLocation() {
        return this.location;
    }
    public MaintenancePolicyResponse getMaintenancePolicy() {
        return this.maintenancePolicy;
    }
    public MaintenanceScheduleResponse getMaintenanceSchedule() {
        return this.maintenanceSchedule;
    }
    public Integer getMemorySizeGb() {
        return this.memorySizeGb;
    }
    public String getName() {
        return this.name;
    }
    public List<NodeInfoResponse> getNodes() {
        return this.nodes;
    }
    public PersistenceConfigResponse getPersistenceConfig() {
        return this.persistenceConfig;
    }
    public String getPersistenceIamIdentity() {
        return this.persistenceIamIdentity;
    }
    public Integer getPort() {
        return this.port;
    }
    public String getReadEndpoint() {
        return this.readEndpoint;
    }
    public Integer getReadEndpointPort() {
        return this.readEndpointPort;
    }
    public String getReadReplicasMode() {
        return this.readReplicasMode;
    }
    public Map<String,String> getRedisConfigs() {
        return this.redisConfigs;
    }
    public String getRedisVersion() {
        return this.redisVersion;
    }
    public Integer getReplicaCount() {
        return this.replicaCount;
    }
    public String getReservedIpRange() {
        return this.reservedIpRange;
    }
    public String getSecondaryIpRange() {
        return this.secondaryIpRange;
    }
    public List<TlsCertificateResponse> getServerCaCerts() {
        return this.serverCaCerts;
    }
    public String getState() {
        return this.state;
    }
    public String getStatusMessage() {
        return this.statusMessage;
    }
    public String getTier() {
        return this.tier;
    }
    public String getTransitEncryptionMode() {
        return this.transitEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alternativeLocationId;
        private Boolean authEnabled;
        private String authorizedNetwork;
        private String connectMode;
        private String createTime;
        private String currentLocationId;
        private String displayName;
        private String host;
        private Map<String,String> labels;
        private String location;
        private MaintenancePolicyResponse maintenancePolicy;
        private MaintenanceScheduleResponse maintenanceSchedule;
        private Integer memorySizeGb;
        private String name;
        private List<NodeInfoResponse> nodes;
        private PersistenceConfigResponse persistenceConfig;
        private String persistenceIamIdentity;
        private Integer port;
        private String readEndpoint;
        private Integer readEndpointPort;
        private String readReplicasMode;
        private Map<String,String> redisConfigs;
        private String redisVersion;
        private Integer replicaCount;
        private String reservedIpRange;
        private String secondaryIpRange;
        private List<TlsCertificateResponse> serverCaCerts;
        private String state;
        private String statusMessage;
        private String tier;
        private String transitEncryptionMode;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeLocationId = defaults.alternativeLocationId;
    	      this.authEnabled = defaults.authEnabled;
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.connectMode = defaults.connectMode;
    	      this.createTime = defaults.createTime;
    	      this.currentLocationId = defaults.currentLocationId;
    	      this.displayName = defaults.displayName;
    	      this.host = defaults.host;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.maintenancePolicy = defaults.maintenancePolicy;
    	      this.maintenanceSchedule = defaults.maintenanceSchedule;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.name = defaults.name;
    	      this.nodes = defaults.nodes;
    	      this.persistenceConfig = defaults.persistenceConfig;
    	      this.persistenceIamIdentity = defaults.persistenceIamIdentity;
    	      this.port = defaults.port;
    	      this.readEndpoint = defaults.readEndpoint;
    	      this.readEndpointPort = defaults.readEndpointPort;
    	      this.readReplicasMode = defaults.readReplicasMode;
    	      this.redisConfigs = defaults.redisConfigs;
    	      this.redisVersion = defaults.redisVersion;
    	      this.replicaCount = defaults.replicaCount;
    	      this.reservedIpRange = defaults.reservedIpRange;
    	      this.secondaryIpRange = defaults.secondaryIpRange;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.state = defaults.state;
    	      this.statusMessage = defaults.statusMessage;
    	      this.tier = defaults.tier;
    	      this.transitEncryptionMode = defaults.transitEncryptionMode;
        }

        public Builder setAlternativeLocationId(String alternativeLocationId) {
            this.alternativeLocationId = Objects.requireNonNull(alternativeLocationId);
            return this;
        }

        public Builder setAuthEnabled(Boolean authEnabled) {
            this.authEnabled = Objects.requireNonNull(authEnabled);
            return this;
        }

        public Builder setAuthorizedNetwork(String authorizedNetwork) {
            this.authorizedNetwork = Objects.requireNonNull(authorizedNetwork);
            return this;
        }

        public Builder setConnectMode(String connectMode) {
            this.connectMode = Objects.requireNonNull(connectMode);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCurrentLocationId(String currentLocationId) {
            this.currentLocationId = Objects.requireNonNull(currentLocationId);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setHost(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setMaintenancePolicy(MaintenancePolicyResponse maintenancePolicy) {
            this.maintenancePolicy = Objects.requireNonNull(maintenancePolicy);
            return this;
        }

        public Builder setMaintenanceSchedule(MaintenanceScheduleResponse maintenanceSchedule) {
            this.maintenanceSchedule = Objects.requireNonNull(maintenanceSchedule);
            return this;
        }

        public Builder setMemorySizeGb(Integer memorySizeGb) {
            this.memorySizeGb = Objects.requireNonNull(memorySizeGb);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNodes(List<NodeInfoResponse> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }

        public Builder setPersistenceConfig(PersistenceConfigResponse persistenceConfig) {
            this.persistenceConfig = Objects.requireNonNull(persistenceConfig);
            return this;
        }

        public Builder setPersistenceIamIdentity(String persistenceIamIdentity) {
            this.persistenceIamIdentity = Objects.requireNonNull(persistenceIamIdentity);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setReadEndpoint(String readEndpoint) {
            this.readEndpoint = Objects.requireNonNull(readEndpoint);
            return this;
        }

        public Builder setReadEndpointPort(Integer readEndpointPort) {
            this.readEndpointPort = Objects.requireNonNull(readEndpointPort);
            return this;
        }

        public Builder setReadReplicasMode(String readReplicasMode) {
            this.readReplicasMode = Objects.requireNonNull(readReplicasMode);
            return this;
        }

        public Builder setRedisConfigs(Map<String,String> redisConfigs) {
            this.redisConfigs = Objects.requireNonNull(redisConfigs);
            return this;
        }

        public Builder setRedisVersion(String redisVersion) {
            this.redisVersion = Objects.requireNonNull(redisVersion);
            return this;
        }

        public Builder setReplicaCount(Integer replicaCount) {
            this.replicaCount = Objects.requireNonNull(replicaCount);
            return this;
        }

        public Builder setReservedIpRange(String reservedIpRange) {
            this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
            return this;
        }

        public Builder setSecondaryIpRange(String secondaryIpRange) {
            this.secondaryIpRange = Objects.requireNonNull(secondaryIpRange);
            return this;
        }

        public Builder setServerCaCerts(List<TlsCertificateResponse> serverCaCerts) {
            this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStatusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }

        public Builder setTier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }

        public Builder setTransitEncryptionMode(String transitEncryptionMode) {
            this.transitEncryptionMode = Objects.requireNonNull(transitEncryptionMode);
            return this;
        }

        public GetInstanceResult build() {
            return new GetInstanceResult(alternativeLocationId, authEnabled, authorizedNetwork, connectMode, createTime, currentLocationId, displayName, host, labels, location, maintenancePolicy, maintenanceSchedule, memorySizeGb, name, nodes, persistenceConfig, persistenceIamIdentity, port, readEndpoint, readEndpointPort, readReplicasMode, redisConfigs, redisVersion, replicaCount, reservedIpRange, secondaryIpRange, serverCaCerts, state, statusMessage, tier, transitEncryptionMode);
        }
    }
}
