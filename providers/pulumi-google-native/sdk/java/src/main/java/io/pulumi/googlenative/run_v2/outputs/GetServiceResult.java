// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v2.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2BinaryAuthorizationResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2ConditionResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2RevisionTemplateResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2TrafficTargetResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2TrafficTargetStatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetServiceResult {
    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: http://kubernetes.io/docs/user-guide/annotations
     * 
     */
    private final Map<String,String> annotations;
    /**
     * Settings for the Binary Authorization feature.
     * 
     */
    private final GoogleCloudRunOpV2BinaryAuthorizationResponse binaryAuthorization;
    /**
     * Arbitrary identifier for the API client.
     * 
     */
    private final String client;
    /**
     * Arbitrary version identifier for the API client.
     * 
     */
    private final String clientVersion;
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private final List<GoogleCloudRunOpV2ConditionResponse> conditions;
    /**
     * The creation time.
     * 
     */
    private final String createTime;
    /**
     * Email address of the authenticated creator.
     * 
     */
    private final String creator;
    /**
     * The deletion time.
     * 
     */
    private final String deleteTime;
    /**
     * User-provided description of the Service.
     * 
     */
    private final String description;
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    private final String etag;
    /**
     * For a deleted resource, the time after which it will be permamently deleted.
     * 
     */
    private final String expireTime;
    /**
     * A number that monotonically increases every time the user modifies the desired state.
     * 
     */
    private final String generation;
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * 
     */
    private final String ingress;
    /**
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    private final Map<String,String> labels;
    /**
     * Email address of the last authenticated modifier.
     * 
     */
    private final String lastModifier;
    /**
     * Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private final String latestCreatedRevision;
    /**
     * Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private final String latestReadyRevision;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](http://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     * 
     */
    private final String launchStage;
    /**
     * The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     * 
     */
    private final String name;
    /**
     * The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private final String observedGeneration;
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     * 
     */
    private final Boolean reconciling;
    /**
     * The template used to create revisions for this Service.
     * 
     */
    private final GoogleCloudRunOpV2RevisionTemplateResponse template;
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private final GoogleCloudRunOpV2ConditionResponse terminalCondition;
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     * 
     */
    private final List<GoogleCloudRunOpV2TrafficTargetResponse> traffic;
    /**
     * Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private final List<GoogleCloudRunOpV2TrafficTargetStatusResponse> trafficStatuses;
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    private final String uid;
    /**
     * The last-modified time.
     * 
     */
    private final String updateTime;
    /**
     * The main URI in which this Service is serving traffic.
     * 
     */
    private final String uri;

    @OutputCustomType.Constructor
    private GetServiceResult(
        @OutputCustomType.Parameter("annotations") Map<String,String> annotations,
        @OutputCustomType.Parameter("binaryAuthorization") GoogleCloudRunOpV2BinaryAuthorizationResponse binaryAuthorization,
        @OutputCustomType.Parameter("client") String client,
        @OutputCustomType.Parameter("clientVersion") String clientVersion,
        @OutputCustomType.Parameter("conditions") List<GoogleCloudRunOpV2ConditionResponse> conditions,
        @OutputCustomType.Parameter("createTime") String createTime,
        @OutputCustomType.Parameter("creator") String creator,
        @OutputCustomType.Parameter("deleteTime") String deleteTime,
        @OutputCustomType.Parameter("description") String description,
        @OutputCustomType.Parameter("etag") String etag,
        @OutputCustomType.Parameter("expireTime") String expireTime,
        @OutputCustomType.Parameter("generation") String generation,
        @OutputCustomType.Parameter("ingress") String ingress,
        @OutputCustomType.Parameter("labels") Map<String,String> labels,
        @OutputCustomType.Parameter("lastModifier") String lastModifier,
        @OutputCustomType.Parameter("latestCreatedRevision") String latestCreatedRevision,
        @OutputCustomType.Parameter("latestReadyRevision") String latestReadyRevision,
        @OutputCustomType.Parameter("launchStage") String launchStage,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("observedGeneration") String observedGeneration,
        @OutputCustomType.Parameter("reconciling") Boolean reconciling,
        @OutputCustomType.Parameter("template") GoogleCloudRunOpV2RevisionTemplateResponse template,
        @OutputCustomType.Parameter("terminalCondition") GoogleCloudRunOpV2ConditionResponse terminalCondition,
        @OutputCustomType.Parameter("traffic") List<GoogleCloudRunOpV2TrafficTargetResponse> traffic,
        @OutputCustomType.Parameter("trafficStatuses") List<GoogleCloudRunOpV2TrafficTargetStatusResponse> trafficStatuses,
        @OutputCustomType.Parameter("uid") String uid,
        @OutputCustomType.Parameter("updateTime") String updateTime,
        @OutputCustomType.Parameter("uri") String uri) {
        this.annotations = annotations;
        this.binaryAuthorization = binaryAuthorization;
        this.client = client;
        this.clientVersion = clientVersion;
        this.conditions = conditions;
        this.createTime = createTime;
        this.creator = creator;
        this.deleteTime = deleteTime;
        this.description = description;
        this.etag = etag;
        this.expireTime = expireTime;
        this.generation = generation;
        this.ingress = ingress;
        this.labels = labels;
        this.lastModifier = lastModifier;
        this.latestCreatedRevision = latestCreatedRevision;
        this.latestReadyRevision = latestReadyRevision;
        this.launchStage = launchStage;
        this.name = name;
        this.observedGeneration = observedGeneration;
        this.reconciling = reconciling;
        this.template = template;
        this.terminalCondition = terminalCondition;
        this.traffic = traffic;
        this.trafficStatuses = trafficStatuses;
        this.uid = uid;
        this.updateTime = updateTime;
        this.uri = uri;
    }

    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: http://kubernetes.io/docs/user-guide/annotations
     * 
    */
    public Map<String,String> getAnnotations() {
        return this.annotations;
    }
    /**
     * Settings for the Binary Authorization feature.
     * 
    */
    public GoogleCloudRunOpV2BinaryAuthorizationResponse getBinaryAuthorization() {
        return this.binaryAuthorization;
    }
    /**
     * Arbitrary identifier for the API client.
     * 
    */
    public String getClient() {
        return this.client;
    }
    /**
     * Arbitrary version identifier for the API client.
     * 
    */
    public String getClientVersion() {
        return this.clientVersion;
    }
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
    */
    public List<GoogleCloudRunOpV2ConditionResponse> getConditions() {
        return this.conditions;
    }
    /**
     * The creation time.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * Email address of the authenticated creator.
     * 
    */
    public String getCreator() {
        return this.creator;
    }
    /**
     * The deletion time.
     * 
    */
    public String getDeleteTime() {
        return this.deleteTime;
    }
    /**
     * User-provided description of the Service.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * For a deleted resource, the time after which it will be permamently deleted.
     * 
    */
    public String getExpireTime() {
        return this.expireTime;
    }
    /**
     * A number that monotonically increases every time the user modifies the desired state.
     * 
    */
    public String getGeneration() {
        return this.generation;
    }
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * 
    */
    public String getIngress() {
        return this.ingress;
    }
    /**
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * Email address of the last authenticated modifier.
     * 
    */
    public String getLastModifier() {
        return this.lastModifier;
    }
    /**
     * Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
    */
    public String getLatestCreatedRevision() {
        return this.latestCreatedRevision;
    }
    /**
     * Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
    */
    public String getLatestReadyRevision() {
        return this.latestReadyRevision;
    }
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](http://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     * 
    */
    public String getLaunchStage() {
        return this.launchStage;
    }
    /**
     * The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
    */
    public String getObservedGeneration() {
        return this.observedGeneration;
    }
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     * 
    */
    public Boolean getReconciling() {
        return this.reconciling;
    }
    /**
     * The template used to create revisions for this Service.
     * 
    */
    public GoogleCloudRunOpV2RevisionTemplateResponse getTemplate() {
        return this.template;
    }
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
    */
    public GoogleCloudRunOpV2ConditionResponse getTerminalCondition() {
        return this.terminalCondition;
    }
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     * 
    */
    public List<GoogleCloudRunOpV2TrafficTargetResponse> getTraffic() {
        return this.traffic;
    }
    /**
     * Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
    */
    public List<GoogleCloudRunOpV2TrafficTargetStatusResponse> getTrafficStatuses() {
        return this.trafficStatuses;
    }
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
    */
    public String getUid() {
        return this.uid;
    }
    /**
     * The last-modified time.
     * 
    */
    public String getUpdateTime() {
        return this.updateTime;
    }
    /**
     * The main URI in which this Service is serving traffic.
     * 
    */
    public String getUri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> annotations;
        private GoogleCloudRunOpV2BinaryAuthorizationResponse binaryAuthorization;
        private String client;
        private String clientVersion;
        private List<GoogleCloudRunOpV2ConditionResponse> conditions;
        private String createTime;
        private String creator;
        private String deleteTime;
        private String description;
        private String etag;
        private String expireTime;
        private String generation;
        private String ingress;
        private Map<String,String> labels;
        private String lastModifier;
        private String latestCreatedRevision;
        private String latestReadyRevision;
        private String launchStage;
        private String name;
        private String observedGeneration;
        private Boolean reconciling;
        private GoogleCloudRunOpV2RevisionTemplateResponse template;
        private GoogleCloudRunOpV2ConditionResponse terminalCondition;
        private List<GoogleCloudRunOpV2TrafficTargetResponse> traffic;
        private List<GoogleCloudRunOpV2TrafficTargetStatusResponse> trafficStatuses;
        private String uid;
        private String updateTime;
        private String uri;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.binaryAuthorization = defaults.binaryAuthorization;
    	      this.client = defaults.client;
    	      this.clientVersion = defaults.clientVersion;
    	      this.conditions = defaults.conditions;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.deleteTime = defaults.deleteTime;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.expireTime = defaults.expireTime;
    	      this.generation = defaults.generation;
    	      this.ingress = defaults.ingress;
    	      this.labels = defaults.labels;
    	      this.lastModifier = defaults.lastModifier;
    	      this.latestCreatedRevision = defaults.latestCreatedRevision;
    	      this.latestReadyRevision = defaults.latestReadyRevision;
    	      this.launchStage = defaults.launchStage;
    	      this.name = defaults.name;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.reconciling = defaults.reconciling;
    	      this.template = defaults.template;
    	      this.terminalCondition = defaults.terminalCondition;
    	      this.traffic = defaults.traffic;
    	      this.trafficStatuses = defaults.trafficStatuses;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
    	      this.uri = defaults.uri;
        }

        public Builder setAnnotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }

        public Builder setBinaryAuthorization(GoogleCloudRunOpV2BinaryAuthorizationResponse binaryAuthorization) {
            this.binaryAuthorization = Objects.requireNonNull(binaryAuthorization);
            return this;
        }

        public Builder setClient(String client) {
            this.client = Objects.requireNonNull(client);
            return this;
        }

        public Builder setClientVersion(String clientVersion) {
            this.clientVersion = Objects.requireNonNull(clientVersion);
            return this;
        }

        public Builder setConditions(List<GoogleCloudRunOpV2ConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCreator(String creator) {
            this.creator = Objects.requireNonNull(creator);
            return this;
        }

        public Builder setDeleteTime(String deleteTime) {
            this.deleteTime = Objects.requireNonNull(deleteTime);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setExpireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }

        public Builder setGeneration(String generation) {
            this.generation = Objects.requireNonNull(generation);
            return this;
        }

        public Builder setIngress(String ingress) {
            this.ingress = Objects.requireNonNull(ingress);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLastModifier(String lastModifier) {
            this.lastModifier = Objects.requireNonNull(lastModifier);
            return this;
        }

        public Builder setLatestCreatedRevision(String latestCreatedRevision) {
            this.latestCreatedRevision = Objects.requireNonNull(latestCreatedRevision);
            return this;
        }

        public Builder setLatestReadyRevision(String latestReadyRevision) {
            this.latestReadyRevision = Objects.requireNonNull(latestReadyRevision);
            return this;
        }

        public Builder setLaunchStage(String launchStage) {
            this.launchStage = Objects.requireNonNull(launchStage);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setObservedGeneration(String observedGeneration) {
            this.observedGeneration = Objects.requireNonNull(observedGeneration);
            return this;
        }

        public Builder setReconciling(Boolean reconciling) {
            this.reconciling = Objects.requireNonNull(reconciling);
            return this;
        }

        public Builder setTemplate(GoogleCloudRunOpV2RevisionTemplateResponse template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }

        public Builder setTerminalCondition(GoogleCloudRunOpV2ConditionResponse terminalCondition) {
            this.terminalCondition = Objects.requireNonNull(terminalCondition);
            return this;
        }

        public Builder setTraffic(List<GoogleCloudRunOpV2TrafficTargetResponse> traffic) {
            this.traffic = Objects.requireNonNull(traffic);
            return this;
        }

        public Builder setTrafficStatuses(List<GoogleCloudRunOpV2TrafficTargetStatusResponse> trafficStatuses) {
            this.trafficStatuses = Objects.requireNonNull(trafficStatuses);
            return this;
        }

        public Builder setUid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }

        public Builder setUri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public GetServiceResult build() {
            return new GetServiceResult(annotations, binaryAuthorization, client, clientVersion, conditions, createTime, creator, deleteTime, description, etag, expireTime, generation, ingress, labels, lastModifier, latestCreatedRevision, latestReadyRevision, launchStage, name, observedGeneration, reconciling, template, terminalCondition, traffic, trafficStatuses, uid, updateTime, uri);
        }
    }
}
