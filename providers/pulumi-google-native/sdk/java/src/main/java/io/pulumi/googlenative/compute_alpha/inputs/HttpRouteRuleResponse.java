// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.inputs.HttpFilterConfigResponse;
import io.pulumi.googlenative.compute_alpha.inputs.HttpHeaderActionResponse;
import io.pulumi.googlenative.compute_alpha.inputs.HttpRedirectActionResponse;
import io.pulumi.googlenative.compute_alpha.inputs.HttpRouteActionResponse;
import io.pulumi.googlenative.compute_alpha.inputs.HttpRouteRuleMatchResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class HttpRouteRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpRouteRuleResponse Empty = new HttpRouteRuleResponse();

    @InputImport(name="description", required=true)
    private final String description;

    public String getDescription() {
        return this.description;
    }

    @InputImport(name="headerAction", required=true)
    private final HttpHeaderActionResponse headerAction;

    public HttpHeaderActionResponse getHeaderAction() {
        return this.headerAction;
    }

    @InputImport(name="httpFilterConfigs", required=true)
    private final List<HttpFilterConfigResponse> httpFilterConfigs;

    public List<HttpFilterConfigResponse> getHttpFilterConfigs() {
        return this.httpFilterConfigs;
    }

    @InputImport(name="httpFilterMetadata", required=true)
    private final List<HttpFilterConfigResponse> httpFilterMetadata;

    public List<HttpFilterConfigResponse> getHttpFilterMetadata() {
        return this.httpFilterMetadata;
    }

    @InputImport(name="matchRules", required=true)
    private final List<HttpRouteRuleMatchResponse> matchRules;

    public List<HttpRouteRuleMatchResponse> getMatchRules() {
        return this.matchRules;
    }

    @InputImport(name="priority", required=true)
    private final Integer priority;

    public Integer getPriority() {
        return this.priority;
    }

    @InputImport(name="routeAction", required=true)
    private final HttpRouteActionResponse routeAction;

    public HttpRouteActionResponse getRouteAction() {
        return this.routeAction;
    }

    @InputImport(name="service", required=true)
    private final String service;

    public String getService() {
        return this.service;
    }

    @InputImport(name="urlRedirect", required=true)
    private final HttpRedirectActionResponse urlRedirect;

    public HttpRedirectActionResponse getUrlRedirect() {
        return this.urlRedirect;
    }

    public HttpRouteRuleResponse(
        String description,
        HttpHeaderActionResponse headerAction,
        List<HttpFilterConfigResponse> httpFilterConfigs,
        List<HttpFilterConfigResponse> httpFilterMetadata,
        List<HttpRouteRuleMatchResponse> matchRules,
        Integer priority,
        HttpRouteActionResponse routeAction,
        String service,
        HttpRedirectActionResponse urlRedirect) {
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.headerAction = Objects.requireNonNull(headerAction, "expected parameter 'headerAction' to be non-null");
        this.httpFilterConfigs = Objects.requireNonNull(httpFilterConfigs, "expected parameter 'httpFilterConfigs' to be non-null");
        this.httpFilterMetadata = Objects.requireNonNull(httpFilterMetadata, "expected parameter 'httpFilterMetadata' to be non-null");
        this.matchRules = Objects.requireNonNull(matchRules, "expected parameter 'matchRules' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.routeAction = Objects.requireNonNull(routeAction, "expected parameter 'routeAction' to be non-null");
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.urlRedirect = Objects.requireNonNull(urlRedirect, "expected parameter 'urlRedirect' to be non-null");
    }

    private HttpRouteRuleResponse() {
        this.description = null;
        this.headerAction = null;
        this.httpFilterConfigs = List.of();
        this.httpFilterMetadata = List.of();
        this.matchRules = List.of();
        this.priority = null;
        this.routeAction = null;
        this.service = null;
        this.urlRedirect = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private HttpHeaderActionResponse headerAction;
        private List<HttpFilterConfigResponse> httpFilterConfigs;
        private List<HttpFilterConfigResponse> httpFilterMetadata;
        private List<HttpRouteRuleMatchResponse> matchRules;
        private Integer priority;
        private HttpRouteActionResponse routeAction;
        private String service;
        private HttpRedirectActionResponse urlRedirect;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRouteRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.headerAction = defaults.headerAction;
    	      this.httpFilterConfigs = defaults.httpFilterConfigs;
    	      this.httpFilterMetadata = defaults.httpFilterMetadata;
    	      this.matchRules = defaults.matchRules;
    	      this.priority = defaults.priority;
    	      this.routeAction = defaults.routeAction;
    	      this.service = defaults.service;
    	      this.urlRedirect = defaults.urlRedirect;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setHeaderAction(HttpHeaderActionResponse headerAction) {
            this.headerAction = Objects.requireNonNull(headerAction);
            return this;
        }

        public Builder setHttpFilterConfigs(List<HttpFilterConfigResponse> httpFilterConfigs) {
            this.httpFilterConfigs = Objects.requireNonNull(httpFilterConfigs);
            return this;
        }

        public Builder setHttpFilterMetadata(List<HttpFilterConfigResponse> httpFilterMetadata) {
            this.httpFilterMetadata = Objects.requireNonNull(httpFilterMetadata);
            return this;
        }

        public Builder setMatchRules(List<HttpRouteRuleMatchResponse> matchRules) {
            this.matchRules = Objects.requireNonNull(matchRules);
            return this;
        }

        public Builder setPriority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }

        public Builder setRouteAction(HttpRouteActionResponse routeAction) {
            this.routeAction = Objects.requireNonNull(routeAction);
            return this;
        }

        public Builder setService(String service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }

        public Builder setUrlRedirect(HttpRedirectActionResponse urlRedirect) {
            this.urlRedirect = Objects.requireNonNull(urlRedirect);
            return this;
        }

        public HttpRouteRuleResponse build() {
            return new HttpRouteRuleResponse(description, headerAction, httpFilterConfigs, httpFilterMetadata, matchRules, priority, routeAction, service, urlRedirect);
        }
    }
}
