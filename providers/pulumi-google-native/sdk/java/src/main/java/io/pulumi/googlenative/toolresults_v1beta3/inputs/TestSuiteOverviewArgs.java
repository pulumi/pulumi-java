// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.DurationArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.FileReferenceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A summary of a test suite result either parsed from XML or uploaded directly by a user. Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
 * 
 */
public final class TestSuiteOverviewArgs extends io.pulumi.resources.ResourceArgs {

    public static final TestSuiteOverviewArgs Empty = new TestSuiteOverviewArgs();

    /**
     * Elapsed time of test suite.
     * 
     */
    @Import(name="elapsedTime")
      private final @Nullable Output<DurationArgs> elapsedTime;

    public Output<DurationArgs> getElapsedTime() {
        return this.elapsedTime == null ? Codegen.empty() : this.elapsedTime;
    }

    /**
     * Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="errorCount")
      private final @Nullable Output<Integer> errorCount;

    public Output<Integer> getErrorCount() {
        return this.errorCount == null ? Codegen.empty() : this.errorCount;
    }

    /**
     * Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="failureCount")
      private final @Nullable Output<Integer> failureCount;

    public Output<Integer> getFailureCount() {
        return this.failureCount == null ? Codegen.empty() : this.failureCount;
    }

    /**
     * Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     * 
     */
    @Import(name="flakyCount")
      private final @Nullable Output<Integer> flakyCount;

    public Output<Integer> getFlakyCount() {
        return this.flakyCount == null ? Codegen.empty() : this.flakyCount;
    }

    /**
     * The name of the test suite. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="skippedCount")
      private final @Nullable Output<Integer> skippedCount;

    public Output<Integer> getSkippedCount() {
        return this.skippedCount == null ? Codegen.empty() : this.skippedCount;
    }

    /**
     * Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="totalCount")
      private final @Nullable Output<Integer> totalCount;

    public Output<Integer> getTotalCount() {
        return this.totalCount == null ? Codegen.empty() : this.totalCount;
    }

    /**
     * If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     * 
     */
    @Import(name="xmlSource")
      private final @Nullable Output<FileReferenceArgs> xmlSource;

    public Output<FileReferenceArgs> getXmlSource() {
        return this.xmlSource == null ? Codegen.empty() : this.xmlSource;
    }

    public TestSuiteOverviewArgs(
        @Nullable Output<DurationArgs> elapsedTime,
        @Nullable Output<Integer> errorCount,
        @Nullable Output<Integer> failureCount,
        @Nullable Output<Integer> flakyCount,
        @Nullable Output<String> name,
        @Nullable Output<Integer> skippedCount,
        @Nullable Output<Integer> totalCount,
        @Nullable Output<FileReferenceArgs> xmlSource) {
        this.elapsedTime = elapsedTime;
        this.errorCount = errorCount;
        this.failureCount = failureCount;
        this.flakyCount = flakyCount;
        this.name = name;
        this.skippedCount = skippedCount;
        this.totalCount = totalCount;
        this.xmlSource = xmlSource;
    }

    private TestSuiteOverviewArgs() {
        this.elapsedTime = Codegen.empty();
        this.errorCount = Codegen.empty();
        this.failureCount = Codegen.empty();
        this.flakyCount = Codegen.empty();
        this.name = Codegen.empty();
        this.skippedCount = Codegen.empty();
        this.totalCount = Codegen.empty();
        this.xmlSource = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestSuiteOverviewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DurationArgs> elapsedTime;
        private @Nullable Output<Integer> errorCount;
        private @Nullable Output<Integer> failureCount;
        private @Nullable Output<Integer> flakyCount;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> skippedCount;
        private @Nullable Output<Integer> totalCount;
        private @Nullable Output<FileReferenceArgs> xmlSource;

        public Builder() {
    	      // Empty
        }

        public Builder(TestSuiteOverviewArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elapsedTime = defaults.elapsedTime;
    	      this.errorCount = defaults.errorCount;
    	      this.failureCount = defaults.failureCount;
    	      this.flakyCount = defaults.flakyCount;
    	      this.name = defaults.name;
    	      this.skippedCount = defaults.skippedCount;
    	      this.totalCount = defaults.totalCount;
    	      this.xmlSource = defaults.xmlSource;
        }

        public Builder elapsedTime(@Nullable Output<DurationArgs> elapsedTime) {
            this.elapsedTime = elapsedTime;
            return this;
        }
        public Builder elapsedTime(@Nullable DurationArgs elapsedTime) {
            this.elapsedTime = Codegen.ofNullable(elapsedTime);
            return this;
        }
        public Builder errorCount(@Nullable Output<Integer> errorCount) {
            this.errorCount = errorCount;
            return this;
        }
        public Builder errorCount(@Nullable Integer errorCount) {
            this.errorCount = Codegen.ofNullable(errorCount);
            return this;
        }
        public Builder failureCount(@Nullable Output<Integer> failureCount) {
            this.failureCount = failureCount;
            return this;
        }
        public Builder failureCount(@Nullable Integer failureCount) {
            this.failureCount = Codegen.ofNullable(failureCount);
            return this;
        }
        public Builder flakyCount(@Nullable Output<Integer> flakyCount) {
            this.flakyCount = flakyCount;
            return this;
        }
        public Builder flakyCount(@Nullable Integer flakyCount) {
            this.flakyCount = Codegen.ofNullable(flakyCount);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder skippedCount(@Nullable Output<Integer> skippedCount) {
            this.skippedCount = skippedCount;
            return this;
        }
        public Builder skippedCount(@Nullable Integer skippedCount) {
            this.skippedCount = Codegen.ofNullable(skippedCount);
            return this;
        }
        public Builder totalCount(@Nullable Output<Integer> totalCount) {
            this.totalCount = totalCount;
            return this;
        }
        public Builder totalCount(@Nullable Integer totalCount) {
            this.totalCount = Codegen.ofNullable(totalCount);
            return this;
        }
        public Builder xmlSource(@Nullable Output<FileReferenceArgs> xmlSource) {
            this.xmlSource = xmlSource;
            return this;
        }
        public Builder xmlSource(@Nullable FileReferenceArgs xmlSource) {
            this.xmlSource = Codegen.ofNullable(xmlSource);
            return this;
        }        public TestSuiteOverviewArgs build() {
            return new TestSuiteOverviewArgs(elapsedTime, errorCount, failureCount, flakyCount, name, skippedCount, totalCount, xmlSource);
        }
    }
}
