// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.ClusteringResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.DestinationTablePropertiesResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.EncryptionConfigurationResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.HivePartitioningOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.ParquetOptionsResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.RangePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.TableReferenceResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.TableSchemaResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.TimePartitioningResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class JobConfigurationLoadResponse extends io.pulumi.resources.InvokeArgs {

    public static final JobConfigurationLoadResponse Empty = new JobConfigurationLoadResponse();

    @InputImport(name="allowJaggedRows", required=true)
    private final Boolean allowJaggedRows;

    public Boolean getAllowJaggedRows() {
        return this.allowJaggedRows;
    }

    @InputImport(name="allowQuotedNewlines", required=true)
    private final Boolean allowQuotedNewlines;

    public Boolean getAllowQuotedNewlines() {
        return this.allowQuotedNewlines;
    }

    @InputImport(name="autodetect", required=true)
    private final Boolean autodetect;

    public Boolean getAutodetect() {
        return this.autodetect;
    }

    @InputImport(name="clustering", required=true)
    private final ClusteringResponse clustering;

    public ClusteringResponse getClustering() {
        return this.clustering;
    }

    @InputImport(name="createDisposition", required=true)
    private final String createDisposition;

    public String getCreateDisposition() {
        return this.createDisposition;
    }

    @InputImport(name="decimalTargetTypes", required=true)
    private final List<String> decimalTargetTypes;

    public List<String> getDecimalTargetTypes() {
        return this.decimalTargetTypes;
    }

    @InputImport(name="destinationEncryptionConfiguration", required=true)
    private final EncryptionConfigurationResponse destinationEncryptionConfiguration;

    public EncryptionConfigurationResponse getDestinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration;
    }

    @InputImport(name="destinationTable", required=true)
    private final TableReferenceResponse destinationTable;

    public TableReferenceResponse getDestinationTable() {
        return this.destinationTable;
    }

    @InputImport(name="destinationTableProperties", required=true)
    private final DestinationTablePropertiesResponse destinationTableProperties;

    public DestinationTablePropertiesResponse getDestinationTableProperties() {
        return this.destinationTableProperties;
    }

    @InputImport(name="encoding", required=true)
    private final String encoding;

    public String getEncoding() {
        return this.encoding;
    }

    @InputImport(name="fieldDelimiter", required=true)
    private final String fieldDelimiter;

    public String getFieldDelimiter() {
        return this.fieldDelimiter;
    }

    @InputImport(name="hivePartitioningOptions", required=true)
    private final HivePartitioningOptionsResponse hivePartitioningOptions;

    public HivePartitioningOptionsResponse getHivePartitioningOptions() {
        return this.hivePartitioningOptions;
    }

    @InputImport(name="ignoreUnknownValues", required=true)
    private final Boolean ignoreUnknownValues;

    public Boolean getIgnoreUnknownValues() {
        return this.ignoreUnknownValues;
    }

    @InputImport(name="jsonExtension", required=true)
    private final String jsonExtension;

    public String getJsonExtension() {
        return this.jsonExtension;
    }

    @InputImport(name="maxBadRecords", required=true)
    private final Integer maxBadRecords;

    public Integer getMaxBadRecords() {
        return this.maxBadRecords;
    }

    @InputImport(name="nullMarker", required=true)
    private final String nullMarker;

    public String getNullMarker() {
        return this.nullMarker;
    }

    @InputImport(name="parquetOptions", required=true)
    private final ParquetOptionsResponse parquetOptions;

    public ParquetOptionsResponse getParquetOptions() {
        return this.parquetOptions;
    }

    @InputImport(name="projectionFields", required=true)
    private final List<String> projectionFields;

    public List<String> getProjectionFields() {
        return this.projectionFields;
    }

    @InputImport(name="quote", required=true)
    private final String quote;

    public String getQuote() {
        return this.quote;
    }

    @InputImport(name="rangePartitioning", required=true)
    private final RangePartitioningResponse rangePartitioning;

    public RangePartitioningResponse getRangePartitioning() {
        return this.rangePartitioning;
    }

    @InputImport(name="schema", required=true)
    private final TableSchemaResponse schema;

    public TableSchemaResponse getSchema() {
        return this.schema;
    }

    @InputImport(name="schemaUpdateOptions", required=true)
    private final List<String> schemaUpdateOptions;

    public List<String> getSchemaUpdateOptions() {
        return this.schemaUpdateOptions;
    }

    @InputImport(name="skipLeadingRows", required=true)
    private final Integer skipLeadingRows;

    public Integer getSkipLeadingRows() {
        return this.skipLeadingRows;
    }

    @InputImport(name="sourceFormat", required=true)
    private final String sourceFormat;

    public String getSourceFormat() {
        return this.sourceFormat;
    }

    @InputImport(name="sourceUris", required=true)
    private final List<String> sourceUris;

    public List<String> getSourceUris() {
        return this.sourceUris;
    }

    @InputImport(name="timePartitioning", required=true)
    private final TimePartitioningResponse timePartitioning;

    public TimePartitioningResponse getTimePartitioning() {
        return this.timePartitioning;
    }

    @InputImport(name="useAvroLogicalTypes", required=true)
    private final Boolean useAvroLogicalTypes;

    public Boolean getUseAvroLogicalTypes() {
        return this.useAvroLogicalTypes;
    }

    @InputImport(name="writeDisposition", required=true)
    private final String writeDisposition;

    public String getWriteDisposition() {
        return this.writeDisposition;
    }

    public JobConfigurationLoadResponse(
        Boolean allowJaggedRows,
        Boolean allowQuotedNewlines,
        Boolean autodetect,
        ClusteringResponse clustering,
        String createDisposition,
        List<String> decimalTargetTypes,
        EncryptionConfigurationResponse destinationEncryptionConfiguration,
        TableReferenceResponse destinationTable,
        DestinationTablePropertiesResponse destinationTableProperties,
        String encoding,
        String fieldDelimiter,
        HivePartitioningOptionsResponse hivePartitioningOptions,
        Boolean ignoreUnknownValues,
        String jsonExtension,
        Integer maxBadRecords,
        String nullMarker,
        ParquetOptionsResponse parquetOptions,
        List<String> projectionFields,
        String quote,
        RangePartitioningResponse rangePartitioning,
        TableSchemaResponse schema,
        List<String> schemaUpdateOptions,
        Integer skipLeadingRows,
        String sourceFormat,
        List<String> sourceUris,
        TimePartitioningResponse timePartitioning,
        Boolean useAvroLogicalTypes,
        String writeDisposition) {
        this.allowJaggedRows = Objects.requireNonNull(allowJaggedRows, "expected parameter 'allowJaggedRows' to be non-null");
        this.allowQuotedNewlines = Objects.requireNonNull(allowQuotedNewlines, "expected parameter 'allowQuotedNewlines' to be non-null");
        this.autodetect = Objects.requireNonNull(autodetect, "expected parameter 'autodetect' to be non-null");
        this.clustering = Objects.requireNonNull(clustering, "expected parameter 'clustering' to be non-null");
        this.createDisposition = Objects.requireNonNull(createDisposition, "expected parameter 'createDisposition' to be non-null");
        this.decimalTargetTypes = Objects.requireNonNull(decimalTargetTypes, "expected parameter 'decimalTargetTypes' to be non-null");
        this.destinationEncryptionConfiguration = Objects.requireNonNull(destinationEncryptionConfiguration, "expected parameter 'destinationEncryptionConfiguration' to be non-null");
        this.destinationTable = Objects.requireNonNull(destinationTable, "expected parameter 'destinationTable' to be non-null");
        this.destinationTableProperties = Objects.requireNonNull(destinationTableProperties, "expected parameter 'destinationTableProperties' to be non-null");
        this.encoding = Objects.requireNonNull(encoding, "expected parameter 'encoding' to be non-null");
        this.fieldDelimiter = Objects.requireNonNull(fieldDelimiter, "expected parameter 'fieldDelimiter' to be non-null");
        this.hivePartitioningOptions = Objects.requireNonNull(hivePartitioningOptions, "expected parameter 'hivePartitioningOptions' to be non-null");
        this.ignoreUnknownValues = Objects.requireNonNull(ignoreUnknownValues, "expected parameter 'ignoreUnknownValues' to be non-null");
        this.jsonExtension = Objects.requireNonNull(jsonExtension, "expected parameter 'jsonExtension' to be non-null");
        this.maxBadRecords = Objects.requireNonNull(maxBadRecords, "expected parameter 'maxBadRecords' to be non-null");
        this.nullMarker = Objects.requireNonNull(nullMarker, "expected parameter 'nullMarker' to be non-null");
        this.parquetOptions = Objects.requireNonNull(parquetOptions, "expected parameter 'parquetOptions' to be non-null");
        this.projectionFields = Objects.requireNonNull(projectionFields, "expected parameter 'projectionFields' to be non-null");
        this.quote = Objects.requireNonNull(quote, "expected parameter 'quote' to be non-null");
        this.rangePartitioning = Objects.requireNonNull(rangePartitioning, "expected parameter 'rangePartitioning' to be non-null");
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
        this.schemaUpdateOptions = Objects.requireNonNull(schemaUpdateOptions, "expected parameter 'schemaUpdateOptions' to be non-null");
        this.skipLeadingRows = Objects.requireNonNull(skipLeadingRows, "expected parameter 'skipLeadingRows' to be non-null");
        this.sourceFormat = Objects.requireNonNull(sourceFormat, "expected parameter 'sourceFormat' to be non-null");
        this.sourceUris = Objects.requireNonNull(sourceUris, "expected parameter 'sourceUris' to be non-null");
        this.timePartitioning = Objects.requireNonNull(timePartitioning, "expected parameter 'timePartitioning' to be non-null");
        this.useAvroLogicalTypes = Objects.requireNonNull(useAvroLogicalTypes, "expected parameter 'useAvroLogicalTypes' to be non-null");
        this.writeDisposition = Objects.requireNonNull(writeDisposition, "expected parameter 'writeDisposition' to be non-null");
    }

    private JobConfigurationLoadResponse() {
        this.allowJaggedRows = null;
        this.allowQuotedNewlines = null;
        this.autodetect = null;
        this.clustering = null;
        this.createDisposition = null;
        this.decimalTargetTypes = List.of();
        this.destinationEncryptionConfiguration = null;
        this.destinationTable = null;
        this.destinationTableProperties = null;
        this.encoding = null;
        this.fieldDelimiter = null;
        this.hivePartitioningOptions = null;
        this.ignoreUnknownValues = null;
        this.jsonExtension = null;
        this.maxBadRecords = null;
        this.nullMarker = null;
        this.parquetOptions = null;
        this.projectionFields = List.of();
        this.quote = null;
        this.rangePartitioning = null;
        this.schema = null;
        this.schemaUpdateOptions = List.of();
        this.skipLeadingRows = null;
        this.sourceFormat = null;
        this.sourceUris = List.of();
        this.timePartitioning = null;
        this.useAvroLogicalTypes = null;
        this.writeDisposition = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigurationLoadResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowJaggedRows;
        private Boolean allowQuotedNewlines;
        private Boolean autodetect;
        private ClusteringResponse clustering;
        private String createDisposition;
        private List<String> decimalTargetTypes;
        private EncryptionConfigurationResponse destinationEncryptionConfiguration;
        private TableReferenceResponse destinationTable;
        private DestinationTablePropertiesResponse destinationTableProperties;
        private String encoding;
        private String fieldDelimiter;
        private HivePartitioningOptionsResponse hivePartitioningOptions;
        private Boolean ignoreUnknownValues;
        private String jsonExtension;
        private Integer maxBadRecords;
        private String nullMarker;
        private ParquetOptionsResponse parquetOptions;
        private List<String> projectionFields;
        private String quote;
        private RangePartitioningResponse rangePartitioning;
        private TableSchemaResponse schema;
        private List<String> schemaUpdateOptions;
        private Integer skipLeadingRows;
        private String sourceFormat;
        private List<String> sourceUris;
        private TimePartitioningResponse timePartitioning;
        private Boolean useAvroLogicalTypes;
        private String writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigurationLoadResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowJaggedRows = defaults.allowJaggedRows;
    	      this.allowQuotedNewlines = defaults.allowQuotedNewlines;
    	      this.autodetect = defaults.autodetect;
    	      this.clustering = defaults.clustering;
    	      this.createDisposition = defaults.createDisposition;
    	      this.decimalTargetTypes = defaults.decimalTargetTypes;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.destinationTableProperties = defaults.destinationTableProperties;
    	      this.encoding = defaults.encoding;
    	      this.fieldDelimiter = defaults.fieldDelimiter;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.jsonExtension = defaults.jsonExtension;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.nullMarker = defaults.nullMarker;
    	      this.parquetOptions = defaults.parquetOptions;
    	      this.projectionFields = defaults.projectionFields;
    	      this.quote = defaults.quote;
    	      this.rangePartitioning = defaults.rangePartitioning;
    	      this.schema = defaults.schema;
    	      this.schemaUpdateOptions = defaults.schemaUpdateOptions;
    	      this.skipLeadingRows = defaults.skipLeadingRows;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.useAvroLogicalTypes = defaults.useAvroLogicalTypes;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder setAllowJaggedRows(Boolean allowJaggedRows) {
            this.allowJaggedRows = Objects.requireNonNull(allowJaggedRows);
            return this;
        }

        public Builder setAllowQuotedNewlines(Boolean allowQuotedNewlines) {
            this.allowQuotedNewlines = Objects.requireNonNull(allowQuotedNewlines);
            return this;
        }

        public Builder setAutodetect(Boolean autodetect) {
            this.autodetect = Objects.requireNonNull(autodetect);
            return this;
        }

        public Builder setClustering(ClusteringResponse clustering) {
            this.clustering = Objects.requireNonNull(clustering);
            return this;
        }

        public Builder setCreateDisposition(String createDisposition) {
            this.createDisposition = Objects.requireNonNull(createDisposition);
            return this;
        }

        public Builder setDecimalTargetTypes(List<String> decimalTargetTypes) {
            this.decimalTargetTypes = Objects.requireNonNull(decimalTargetTypes);
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(EncryptionConfigurationResponse destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Objects.requireNonNull(destinationEncryptionConfiguration);
            return this;
        }

        public Builder setDestinationTable(TableReferenceResponse destinationTable) {
            this.destinationTable = Objects.requireNonNull(destinationTable);
            return this;
        }

        public Builder setDestinationTableProperties(DestinationTablePropertiesResponse destinationTableProperties) {
            this.destinationTableProperties = Objects.requireNonNull(destinationTableProperties);
            return this;
        }

        public Builder setEncoding(String encoding) {
            this.encoding = Objects.requireNonNull(encoding);
            return this;
        }

        public Builder setFieldDelimiter(String fieldDelimiter) {
            this.fieldDelimiter = Objects.requireNonNull(fieldDelimiter);
            return this;
        }

        public Builder setHivePartitioningOptions(HivePartitioningOptionsResponse hivePartitioningOptions) {
            this.hivePartitioningOptions = Objects.requireNonNull(hivePartitioningOptions);
            return this;
        }

        public Builder setIgnoreUnknownValues(Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Objects.requireNonNull(ignoreUnknownValues);
            return this;
        }

        public Builder setJsonExtension(String jsonExtension) {
            this.jsonExtension = Objects.requireNonNull(jsonExtension);
            return this;
        }

        public Builder setMaxBadRecords(Integer maxBadRecords) {
            this.maxBadRecords = Objects.requireNonNull(maxBadRecords);
            return this;
        }

        public Builder setNullMarker(String nullMarker) {
            this.nullMarker = Objects.requireNonNull(nullMarker);
            return this;
        }

        public Builder setParquetOptions(ParquetOptionsResponse parquetOptions) {
            this.parquetOptions = Objects.requireNonNull(parquetOptions);
            return this;
        }

        public Builder setProjectionFields(List<String> projectionFields) {
            this.projectionFields = Objects.requireNonNull(projectionFields);
            return this;
        }

        public Builder setQuote(String quote) {
            this.quote = Objects.requireNonNull(quote);
            return this;
        }

        public Builder setRangePartitioning(RangePartitioningResponse rangePartitioning) {
            this.rangePartitioning = Objects.requireNonNull(rangePartitioning);
            return this;
        }

        public Builder setSchema(TableSchemaResponse schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }

        public Builder setSchemaUpdateOptions(List<String> schemaUpdateOptions) {
            this.schemaUpdateOptions = Objects.requireNonNull(schemaUpdateOptions);
            return this;
        }

        public Builder setSkipLeadingRows(Integer skipLeadingRows) {
            this.skipLeadingRows = Objects.requireNonNull(skipLeadingRows);
            return this;
        }

        public Builder setSourceFormat(String sourceFormat) {
            this.sourceFormat = Objects.requireNonNull(sourceFormat);
            return this;
        }

        public Builder setSourceUris(List<String> sourceUris) {
            this.sourceUris = Objects.requireNonNull(sourceUris);
            return this;
        }

        public Builder setTimePartitioning(TimePartitioningResponse timePartitioning) {
            this.timePartitioning = Objects.requireNonNull(timePartitioning);
            return this;
        }

        public Builder setUseAvroLogicalTypes(Boolean useAvroLogicalTypes) {
            this.useAvroLogicalTypes = Objects.requireNonNull(useAvroLogicalTypes);
            return this;
        }

        public Builder setWriteDisposition(String writeDisposition) {
            this.writeDisposition = Objects.requireNonNull(writeDisposition);
            return this;
        }

        public JobConfigurationLoadResponse build() {
            return new JobConfigurationLoadResponse(allowJaggedRows, allowQuotedNewlines, autodetect, clustering, createDisposition, decimalTargetTypes, destinationEncryptionConfiguration, destinationTable, destinationTableProperties, encoding, fieldDelimiter, hivePartitioningOptions, ignoreUnknownValues, jsonExtension, maxBadRecords, nullMarker, parquetOptions, projectionFields, quote, rangePartitioning, schema, schemaUpdateOptions, skipLeadingRows, sourceFormat, sourceUris, timePartitioning, useAvroLogicalTypes, writeDisposition);
        }
    }
}
