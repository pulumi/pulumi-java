// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


public final class AdvancedMachineFeaturesResponse extends io.pulumi.resources.InvokeArgs {

    public static final AdvancedMachineFeaturesResponse Empty = new AdvancedMachineFeaturesResponse();

    @InputImport(name="enableNestedVirtualization", required=true)
    private final Boolean enableNestedVirtualization;

    public Boolean getEnableNestedVirtualization() {
        return this.enableNestedVirtualization;
    }

    @InputImport(name="enableUefiNetworking", required=true)
    private final Boolean enableUefiNetworking;

    public Boolean getEnableUefiNetworking() {
        return this.enableUefiNetworking;
    }

    @InputImport(name="numaNodeCount", required=true)
    private final Integer numaNodeCount;

    public Integer getNumaNodeCount() {
        return this.numaNodeCount;
    }

    @InputImport(name="threadsPerCore", required=true)
    private final Integer threadsPerCore;

    public Integer getThreadsPerCore() {
        return this.threadsPerCore;
    }

    @InputImport(name="visibleCoreCount", required=true)
    private final Integer visibleCoreCount;

    public Integer getVisibleCoreCount() {
        return this.visibleCoreCount;
    }

    public AdvancedMachineFeaturesResponse(
        Boolean enableNestedVirtualization,
        Boolean enableUefiNetworking,
        Integer numaNodeCount,
        Integer threadsPerCore,
        Integer visibleCoreCount) {
        this.enableNestedVirtualization = Objects.requireNonNull(enableNestedVirtualization, "expected parameter 'enableNestedVirtualization' to be non-null");
        this.enableUefiNetworking = Objects.requireNonNull(enableUefiNetworking, "expected parameter 'enableUefiNetworking' to be non-null");
        this.numaNodeCount = Objects.requireNonNull(numaNodeCount, "expected parameter 'numaNodeCount' to be non-null");
        this.threadsPerCore = Objects.requireNonNull(threadsPerCore, "expected parameter 'threadsPerCore' to be non-null");
        this.visibleCoreCount = Objects.requireNonNull(visibleCoreCount, "expected parameter 'visibleCoreCount' to be non-null");
    }

    private AdvancedMachineFeaturesResponse() {
        this.enableNestedVirtualization = null;
        this.enableUefiNetworking = null;
        this.numaNodeCount = null;
        this.threadsPerCore = null;
        this.visibleCoreCount = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AdvancedMachineFeaturesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean enableNestedVirtualization;
        private Boolean enableUefiNetworking;
        private Integer numaNodeCount;
        private Integer threadsPerCore;
        private Integer visibleCoreCount;

        public Builder() {
    	      // Empty
        }

        public Builder(AdvancedMachineFeaturesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNestedVirtualization = defaults.enableNestedVirtualization;
    	      this.enableUefiNetworking = defaults.enableUefiNetworking;
    	      this.numaNodeCount = defaults.numaNodeCount;
    	      this.threadsPerCore = defaults.threadsPerCore;
    	      this.visibleCoreCount = defaults.visibleCoreCount;
        }

        public Builder setEnableNestedVirtualization(Boolean enableNestedVirtualization) {
            this.enableNestedVirtualization = Objects.requireNonNull(enableNestedVirtualization);
            return this;
        }

        public Builder setEnableUefiNetworking(Boolean enableUefiNetworking) {
            this.enableUefiNetworking = Objects.requireNonNull(enableUefiNetworking);
            return this;
        }

        public Builder setNumaNodeCount(Integer numaNodeCount) {
            this.numaNodeCount = Objects.requireNonNull(numaNodeCount);
            return this;
        }

        public Builder setThreadsPerCore(Integer threadsPerCore) {
            this.threadsPerCore = Objects.requireNonNull(threadsPerCore);
            return this;
        }

        public Builder setVisibleCoreCount(Integer visibleCoreCount) {
            this.visibleCoreCount = Objects.requireNonNull(visibleCoreCount);
            return this;
        }

        public AdvancedMachineFeaturesResponse build() {
            return new AdvancedMachineFeaturesResponse(enableNestedVirtualization, enableUefiNetworking, numaNodeCount, threadsPerCore, visibleCoreCount);
        }
    }
}
