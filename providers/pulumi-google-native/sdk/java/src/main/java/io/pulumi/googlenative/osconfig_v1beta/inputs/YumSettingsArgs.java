// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
 * 
 */
public final class YumSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final YumSettingsArgs Empty = new YumSettingsArgs();

    /**
     * List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
     * 
     */
    @Import(name="excludes")
      private final @Nullable Output<List<String>> excludes;

    public Output<List<String>> getExcludes() {
        return this.excludes == null ? Codegen.empty() : this.excludes;
    }

    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
     * 
     */
    @Import(name="exclusivePackages")
      private final @Nullable Output<List<String>> exclusivePackages;

    public Output<List<String>> getExclusivePackages() {
        return this.exclusivePackages == null ? Codegen.empty() : this.exclusivePackages;
    }

    /**
     * Will cause patch to run `yum update-minimal` instead.
     * 
     */
    @Import(name="minimal")
      private final @Nullable Output<Boolean> minimal;

    public Output<Boolean> getMinimal() {
        return this.minimal == null ? Codegen.empty() : this.minimal;
    }

    /**
     * Adds the `--security` flag to `yum update`. Not supported on all platforms.
     * 
     */
    @Import(name="security")
      private final @Nullable Output<Boolean> security;

    public Output<Boolean> getSecurity() {
        return this.security == null ? Codegen.empty() : this.security;
    }

    public YumSettingsArgs(
        @Nullable Output<List<String>> excludes,
        @Nullable Output<List<String>> exclusivePackages,
        @Nullable Output<Boolean> minimal,
        @Nullable Output<Boolean> security) {
        this.excludes = excludes;
        this.exclusivePackages = exclusivePackages;
        this.minimal = minimal;
        this.security = security;
    }

    private YumSettingsArgs() {
        this.excludes = Codegen.empty();
        this.exclusivePackages = Codegen.empty();
        this.minimal = Codegen.empty();
        this.security = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(YumSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> excludes;
        private @Nullable Output<List<String>> exclusivePackages;
        private @Nullable Output<Boolean> minimal;
        private @Nullable Output<Boolean> security;

        public Builder() {
    	      // Empty
        }

        public Builder(YumSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludes = defaults.excludes;
    	      this.exclusivePackages = defaults.exclusivePackages;
    	      this.minimal = defaults.minimal;
    	      this.security = defaults.security;
        }

        public Builder excludes(@Nullable Output<List<String>> excludes) {
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(@Nullable List<String> excludes) {
            this.excludes = Codegen.ofNullable(excludes);
            return this;
        }
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }
        public Builder exclusivePackages(@Nullable Output<List<String>> exclusivePackages) {
            this.exclusivePackages = exclusivePackages;
            return this;
        }
        public Builder exclusivePackages(@Nullable List<String> exclusivePackages) {
            this.exclusivePackages = Codegen.ofNullable(exclusivePackages);
            return this;
        }
        public Builder exclusivePackages(String... exclusivePackages) {
            return exclusivePackages(List.of(exclusivePackages));
        }
        public Builder minimal(@Nullable Output<Boolean> minimal) {
            this.minimal = minimal;
            return this;
        }
        public Builder minimal(@Nullable Boolean minimal) {
            this.minimal = Codegen.ofNullable(minimal);
            return this;
        }
        public Builder security(@Nullable Output<Boolean> security) {
            this.security = security;
            return this;
        }
        public Builder security(@Nullable Boolean security) {
            this.security = Codegen.ofNullable(security);
            return this;
        }        public YumSettingsArgs build() {
            return new YumSettingsArgs(excludes, exclusivePackages, minimal, security);
        }
    }
}
