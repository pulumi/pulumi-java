// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtrace_v2beta1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.cloudtrace_v2beta1.inputs.OutputConfigArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TraceSinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final TraceSinkArgs Empty = new TraceSinkArgs();

    /**
     * The canonical sink resource name, unique within the project. Must be of the form: project/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: `"projects/12345/traceSinks/my-project-trace-sink"`. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The export destination.
     * 
     */
    @InputImport(name="outputConfig", required=true)
      private final Input<OutputConfigArgs> outputConfig;

    public Input<OutputConfigArgs> getOutputConfig() {
        return this.outputConfig;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    public TraceSinkArgs(
        @Nullable Input<String> name,
        Input<OutputConfigArgs> outputConfig,
        @Nullable Input<String> project) {
        this.name = name;
        this.outputConfig = Objects.requireNonNull(outputConfig, "expected parameter 'outputConfig' to be non-null");
        this.project = project;
    }

    private TraceSinkArgs() {
        this.name = Input.empty();
        this.outputConfig = Input.empty();
        this.project = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TraceSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> name;
        private Input<OutputConfigArgs> outputConfig;
        private @Nullable Input<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(TraceSinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.outputConfig = defaults.outputConfig;
    	      this.project = defaults.project;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder outputConfig(Input<OutputConfigArgs> outputConfig) {
            this.outputConfig = Objects.requireNonNull(outputConfig);
            return this;
        }

        public Builder outputConfig(OutputConfigArgs outputConfig) {
            this.outputConfig = Input.of(Objects.requireNonNull(outputConfig));
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }
        public TraceSinkArgs build() {
            return new TraceSinkArgs(name, outputConfig, project);
        }
    }
}
