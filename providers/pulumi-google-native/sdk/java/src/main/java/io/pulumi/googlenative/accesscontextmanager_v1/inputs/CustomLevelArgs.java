// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.accesscontextmanager_v1.inputs.ExprArgs;
import java.util.Objects;


/**
 * `CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. See CEL spec at: https://github.com/google/cel-spec
 * 
 */
public final class CustomLevelArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomLevelArgs Empty = new CustomLevelArgs();

    /**
     * A Cloud CEL expression evaluating to a boolean.
     * 
     */
    @InputImport(name="expr", required=true)
      private final Input<ExprArgs> expr;

    public Input<ExprArgs> getExpr() {
        return this.expr;
    }

    public CustomLevelArgs(Input<ExprArgs> expr) {
        this.expr = Objects.requireNonNull(expr, "expected parameter 'expr' to be non-null");
    }

    private CustomLevelArgs() {
        this.expr = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomLevelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<ExprArgs> expr;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomLevelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expr = defaults.expr;
        }

        public Builder expr(Input<ExprArgs> expr) {
            this.expr = Objects.requireNonNull(expr);
            return this;
        }

        public Builder expr(ExprArgs expr) {
            this.expr = Input.of(Objects.requireNonNull(expr));
            return this;
        }
        public CustomLevelArgs build() {
            return new CustomLevelArgs(expr);
        }
    }
}
