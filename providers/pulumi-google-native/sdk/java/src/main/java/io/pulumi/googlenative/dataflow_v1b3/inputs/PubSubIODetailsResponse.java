// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Metadata for a Pub/Sub connector used by the job.
 * 
 */
public final class PubSubIODetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final PubSubIODetailsResponse Empty = new PubSubIODetailsResponse();

    /**
     * Subscription used in the connection.
     * 
     */
    @Import(name="subscription", required=true)
      private final String subscription;

    public String getSubscription() {
        return this.subscription;
    }

    /**
     * Topic accessed in the connection.
     * 
     */
    @Import(name="topic", required=true)
      private final String topic;

    public String getTopic() {
        return this.topic;
    }

    public PubSubIODetailsResponse(
        String subscription,
        String topic) {
        this.subscription = Objects.requireNonNull(subscription, "expected parameter 'subscription' to be non-null");
        this.topic = Objects.requireNonNull(topic, "expected parameter 'topic' to be non-null");
    }

    private PubSubIODetailsResponse() {
        this.subscription = null;
        this.topic = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PubSubIODetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String subscription;
        private String topic;

        public Builder() {
    	      // Empty
        }

        public Builder(PubSubIODetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.subscription = defaults.subscription;
    	      this.topic = defaults.topic;
        }

        public Builder subscription(String subscription) {
            this.subscription = Objects.requireNonNull(subscription);
            return this;
        }

        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        public PubSubIODetailsResponse build() {
            return new PubSubIODetailsResponse(subscription, topic);
        }
    }
}
