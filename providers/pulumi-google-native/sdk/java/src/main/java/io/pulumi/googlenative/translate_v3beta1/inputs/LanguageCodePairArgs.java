// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.translate_v3beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class LanguageCodePairArgs extends io.pulumi.resources.ResourceArgs {

    public static final LanguageCodePairArgs Empty = new LanguageCodePairArgs();

    @InputImport(name="sourceLanguageCode", required=true)
    private final Input<String> sourceLanguageCode;

    public Input<String> getSourceLanguageCode() {
        return this.sourceLanguageCode;
    }

    @InputImport(name="targetLanguageCode", required=true)
    private final Input<String> targetLanguageCode;

    public Input<String> getTargetLanguageCode() {
        return this.targetLanguageCode;
    }

    public LanguageCodePairArgs(
        Input<String> sourceLanguageCode,
        Input<String> targetLanguageCode) {
        this.sourceLanguageCode = Objects.requireNonNull(sourceLanguageCode, "expected parameter 'sourceLanguageCode' to be non-null");
        this.targetLanguageCode = Objects.requireNonNull(targetLanguageCode, "expected parameter 'targetLanguageCode' to be non-null");
    }

    private LanguageCodePairArgs() {
        this.sourceLanguageCode = Input.empty();
        this.targetLanguageCode = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LanguageCodePairArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> sourceLanguageCode;
        private Input<String> targetLanguageCode;

        public Builder() {
    	      // Empty
        }

        public Builder(LanguageCodePairArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sourceLanguageCode = defaults.sourceLanguageCode;
    	      this.targetLanguageCode = defaults.targetLanguageCode;
        }

        public Builder setSourceLanguageCode(Input<String> sourceLanguageCode) {
            this.sourceLanguageCode = Objects.requireNonNull(sourceLanguageCode);
            return this;
        }

        public Builder setSourceLanguageCode(String sourceLanguageCode) {
            this.sourceLanguageCode = Input.of(Objects.requireNonNull(sourceLanguageCode));
            return this;
        }

        public Builder setTargetLanguageCode(Input<String> targetLanguageCode) {
            this.targetLanguageCode = Objects.requireNonNull(targetLanguageCode);
            return this;
        }

        public Builder setTargetLanguageCode(String targetLanguageCode) {
            this.targetLanguageCode = Input.of(Objects.requireNonNull(targetLanguageCode));
            return this;
        }

        public LanguageCodePairArgs build() {
            return new LanguageCodePairArgs(sourceLanguageCode, targetLanguageCode);
        }
    }
}
