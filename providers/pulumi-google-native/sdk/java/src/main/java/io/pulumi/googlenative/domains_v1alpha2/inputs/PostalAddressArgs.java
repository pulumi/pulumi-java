// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.domains_v1alpha2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PostalAddressArgs extends io.pulumi.resources.ResourceArgs {

    public static final PostalAddressArgs Empty = new PostalAddressArgs();

    @InputImport(name="addressLines")
    private final @Nullable Input<List<String>> addressLines;

    public Input<List<String>> getAddressLines() {
        return this.addressLines == null ? Input.empty() : this.addressLines;
    }

    @InputImport(name="administrativeArea")
    private final @Nullable Input<String> administrativeArea;

    public Input<String> getAdministrativeArea() {
        return this.administrativeArea == null ? Input.empty() : this.administrativeArea;
    }

    @InputImport(name="languageCode")
    private final @Nullable Input<String> languageCode;

    public Input<String> getLanguageCode() {
        return this.languageCode == null ? Input.empty() : this.languageCode;
    }

    @InputImport(name="locality")
    private final @Nullable Input<String> locality;

    public Input<String> getLocality() {
        return this.locality == null ? Input.empty() : this.locality;
    }

    @InputImport(name="organization")
    private final @Nullable Input<String> organization;

    public Input<String> getOrganization() {
        return this.organization == null ? Input.empty() : this.organization;
    }

    @InputImport(name="postalCode")
    private final @Nullable Input<String> postalCode;

    public Input<String> getPostalCode() {
        return this.postalCode == null ? Input.empty() : this.postalCode;
    }

    @InputImport(name="recipients")
    private final @Nullable Input<List<String>> recipients;

    public Input<List<String>> getRecipients() {
        return this.recipients == null ? Input.empty() : this.recipients;
    }

    @InputImport(name="regionCode", required=true)
    private final Input<String> regionCode;

    public Input<String> getRegionCode() {
        return this.regionCode;
    }

    @InputImport(name="revision")
    private final @Nullable Input<Integer> revision;

    public Input<Integer> getRevision() {
        return this.revision == null ? Input.empty() : this.revision;
    }

    @InputImport(name="sortingCode")
    private final @Nullable Input<String> sortingCode;

    public Input<String> getSortingCode() {
        return this.sortingCode == null ? Input.empty() : this.sortingCode;
    }

    @InputImport(name="sublocality")
    private final @Nullable Input<String> sublocality;

    public Input<String> getSublocality() {
        return this.sublocality == null ? Input.empty() : this.sublocality;
    }

    public PostalAddressArgs(
        @Nullable Input<List<String>> addressLines,
        @Nullable Input<String> administrativeArea,
        @Nullable Input<String> languageCode,
        @Nullable Input<String> locality,
        @Nullable Input<String> organization,
        @Nullable Input<String> postalCode,
        @Nullable Input<List<String>> recipients,
        Input<String> regionCode,
        @Nullable Input<Integer> revision,
        @Nullable Input<String> sortingCode,
        @Nullable Input<String> sublocality) {
        this.addressLines = addressLines;
        this.administrativeArea = administrativeArea;
        this.languageCode = languageCode;
        this.locality = locality;
        this.organization = organization;
        this.postalCode = postalCode;
        this.recipients = recipients;
        this.regionCode = Objects.requireNonNull(regionCode, "expected parameter 'regionCode' to be non-null");
        this.revision = revision;
        this.sortingCode = sortingCode;
        this.sublocality = sublocality;
    }

    private PostalAddressArgs() {
        this.addressLines = Input.empty();
        this.administrativeArea = Input.empty();
        this.languageCode = Input.empty();
        this.locality = Input.empty();
        this.organization = Input.empty();
        this.postalCode = Input.empty();
        this.recipients = Input.empty();
        this.regionCode = Input.empty();
        this.revision = Input.empty();
        this.sortingCode = Input.empty();
        this.sublocality = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PostalAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> addressLines;
        private @Nullable Input<String> administrativeArea;
        private @Nullable Input<String> languageCode;
        private @Nullable Input<String> locality;
        private @Nullable Input<String> organization;
        private @Nullable Input<String> postalCode;
        private @Nullable Input<List<String>> recipients;
        private Input<String> regionCode;
        private @Nullable Input<Integer> revision;
        private @Nullable Input<String> sortingCode;
        private @Nullable Input<String> sublocality;

        public Builder() {
    	      // Empty
        }

        public Builder(PostalAddressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressLines = defaults.addressLines;
    	      this.administrativeArea = defaults.administrativeArea;
    	      this.languageCode = defaults.languageCode;
    	      this.locality = defaults.locality;
    	      this.organization = defaults.organization;
    	      this.postalCode = defaults.postalCode;
    	      this.recipients = defaults.recipients;
    	      this.regionCode = defaults.regionCode;
    	      this.revision = defaults.revision;
    	      this.sortingCode = defaults.sortingCode;
    	      this.sublocality = defaults.sublocality;
        }

        public Builder setAddressLines(@Nullable Input<List<String>> addressLines) {
            this.addressLines = addressLines;
            return this;
        }

        public Builder setAddressLines(@Nullable List<String> addressLines) {
            this.addressLines = Input.ofNullable(addressLines);
            return this;
        }

        public Builder setAdministrativeArea(@Nullable Input<String> administrativeArea) {
            this.administrativeArea = administrativeArea;
            return this;
        }

        public Builder setAdministrativeArea(@Nullable String administrativeArea) {
            this.administrativeArea = Input.ofNullable(administrativeArea);
            return this;
        }

        public Builder setLanguageCode(@Nullable Input<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder setLanguageCode(@Nullable String languageCode) {
            this.languageCode = Input.ofNullable(languageCode);
            return this;
        }

        public Builder setLocality(@Nullable Input<String> locality) {
            this.locality = locality;
            return this;
        }

        public Builder setLocality(@Nullable String locality) {
            this.locality = Input.ofNullable(locality);
            return this;
        }

        public Builder setOrganization(@Nullable Input<String> organization) {
            this.organization = organization;
            return this;
        }

        public Builder setOrganization(@Nullable String organization) {
            this.organization = Input.ofNullable(organization);
            return this;
        }

        public Builder setPostalCode(@Nullable Input<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public Builder setPostalCode(@Nullable String postalCode) {
            this.postalCode = Input.ofNullable(postalCode);
            return this;
        }

        public Builder setRecipients(@Nullable Input<List<String>> recipients) {
            this.recipients = recipients;
            return this;
        }

        public Builder setRecipients(@Nullable List<String> recipients) {
            this.recipients = Input.ofNullable(recipients);
            return this;
        }

        public Builder setRegionCode(Input<String> regionCode) {
            this.regionCode = Objects.requireNonNull(regionCode);
            return this;
        }

        public Builder setRegionCode(String regionCode) {
            this.regionCode = Input.of(Objects.requireNonNull(regionCode));
            return this;
        }

        public Builder setRevision(@Nullable Input<Integer> revision) {
            this.revision = revision;
            return this;
        }

        public Builder setRevision(@Nullable Integer revision) {
            this.revision = Input.ofNullable(revision);
            return this;
        }

        public Builder setSortingCode(@Nullable Input<String> sortingCode) {
            this.sortingCode = sortingCode;
            return this;
        }

        public Builder setSortingCode(@Nullable String sortingCode) {
            this.sortingCode = Input.ofNullable(sortingCode);
            return this;
        }

        public Builder setSublocality(@Nullable Input<String> sublocality) {
            this.sublocality = sublocality;
            return this;
        }

        public Builder setSublocality(@Nullable String sublocality) {
            this.sublocality = Input.ofNullable(sublocality);
            return this;
        }

        public PostalAddressArgs build() {
            return new PostalAddressArgs(addressLines, administrativeArea, languageCode, locality, organization, postalCode, recipients, regionCode, revision, sortingCode, sublocality);
        }
    }
}
