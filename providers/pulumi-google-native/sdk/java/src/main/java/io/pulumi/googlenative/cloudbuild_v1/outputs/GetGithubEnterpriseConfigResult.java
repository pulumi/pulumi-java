// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitHubEnterpriseSecretsResponse;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class GetGithubEnterpriseConfigResult {
    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     * 
     */
    private final String appId;
    /**
     * Time when the installation was associated with the project.
     * 
     */
    private final String createTime;
    /**
     * Name to display for this config.
     * 
     */
    private final String displayName;
    /**
     * The URL of the github enterprise host the configuration is for.
     * 
     */
    private final String hostUrl;
    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     * 
     */
    private final String name;
    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    private final String peeredNetwork;
    /**
     * Names of secrets in Secret Manager.
     * 
     */
    private final GitHubEnterpriseSecretsResponse secrets;
    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    private final String sslCa;
    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     * 
     */
    private final String webhookKey;

    @OutputCustomType.Constructor({"appId","createTime","displayName","hostUrl","name","peeredNetwork","secrets","sslCa","webhookKey"})
    private GetGithubEnterpriseConfigResult(
        String appId,
        String createTime,
        String displayName,
        String hostUrl,
        String name,
        String peeredNetwork,
        GitHubEnterpriseSecretsResponse secrets,
        String sslCa,
        String webhookKey) {
        this.appId = appId;
        this.createTime = createTime;
        this.displayName = displayName;
        this.hostUrl = hostUrl;
        this.name = name;
        this.peeredNetwork = peeredNetwork;
        this.secrets = secrets;
        this.sslCa = sslCa;
        this.webhookKey = webhookKey;
    }

    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     * 
    */
    public String getAppId() {
        return this.appId;
    }
    /**
     * Time when the installation was associated with the project.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * Name to display for this config.
     * 
    */
    public String getDisplayName() {
        return this.displayName;
    }
    /**
     * The URL of the github enterprise host the configuration is for.
     * 
    */
    public String getHostUrl() {
        return this.hostUrl;
    }
    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
    */
    public String getPeeredNetwork() {
        return this.peeredNetwork;
    }
    /**
     * Names of secrets in Secret Manager.
     * 
    */
    public GitHubEnterpriseSecretsResponse getSecrets() {
        return this.secrets;
    }
    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
    */
    public String getSslCa() {
        return this.sslCa;
    }
    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     * 
    */
    public String getWebhookKey() {
        return this.webhookKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGithubEnterpriseConfigResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appId;
        private String createTime;
        private String displayName;
        private String hostUrl;
        private String name;
        private String peeredNetwork;
        private GitHubEnterpriseSecretsResponse secrets;
        private String sslCa;
        private String webhookKey;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGithubEnterpriseConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.createTime = defaults.createTime;
    	      this.displayName = defaults.displayName;
    	      this.hostUrl = defaults.hostUrl;
    	      this.name = defaults.name;
    	      this.peeredNetwork = defaults.peeredNetwork;
    	      this.secrets = defaults.secrets;
    	      this.sslCa = defaults.sslCa;
    	      this.webhookKey = defaults.webhookKey;
        }

        public Builder setAppId(String appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setHostUrl(String hostUrl) {
            this.hostUrl = Objects.requireNonNull(hostUrl);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPeeredNetwork(String peeredNetwork) {
            this.peeredNetwork = Objects.requireNonNull(peeredNetwork);
            return this;
        }

        public Builder setSecrets(GitHubEnterpriseSecretsResponse secrets) {
            this.secrets = Objects.requireNonNull(secrets);
            return this;
        }

        public Builder setSslCa(String sslCa) {
            this.sslCa = Objects.requireNonNull(sslCa);
            return this;
        }

        public Builder setWebhookKey(String webhookKey) {
            this.webhookKey = Objects.requireNonNull(webhookKey);
            return this;
        }
        public GetGithubEnterpriseConfigResult build() {
            return new GetGithubEnterpriseConfigResult(appId, createTime, displayName, hostUrl, name, peeredNetwork, secrets, sslCa, webhookKey);
        }
    }
}
