// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.compute_beta.inputs.LicenseResourceRequirementsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LicenseArgs extends io.pulumi.resources.ResourceArgs {

    public static final LicenseArgs Empty = new LicenseArgs();

    /**
     * An optional textual description of the resource; provided by the client when the resource is created.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    @Import(name="resourceRequirements")
      private final @Nullable Output<LicenseResourceRequirementsArgs> resourceRequirements;

    public Output<LicenseResourceRequirementsArgs> getResourceRequirements() {
        return this.resourceRequirements == null ? Output.empty() : this.resourceRequirements;
    }

    /**
     * If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk.
     * 
     */
    @Import(name="transferable")
      private final @Nullable Output<Boolean> transferable;

    public Output<Boolean> getTransferable() {
        return this.transferable == null ? Output.empty() : this.transferable;
    }

    public LicenseArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        @Nullable Output<LicenseResourceRequirementsArgs> resourceRequirements,
        @Nullable Output<Boolean> transferable) {
        this.description = description;
        this.name = name;
        this.project = project;
        this.requestId = requestId;
        this.resourceRequirements = resourceRequirements;
        this.transferable = transferable;
    }

    private LicenseArgs() {
        this.description = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.requestId = Output.empty();
        this.resourceRequirements = Output.empty();
        this.transferable = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private @Nullable Output<LicenseResourceRequirementsArgs> resourceRequirements;
        private @Nullable Output<Boolean> transferable;

        public Builder() {
    	      // Empty
        }

        public Builder(LicenseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.resourceRequirements = defaults.resourceRequirements;
    	      this.transferable = defaults.transferable;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }

        public Builder resourceRequirements(@Nullable Output<LicenseResourceRequirementsArgs> resourceRequirements) {
            this.resourceRequirements = resourceRequirements;
            return this;
        }

        public Builder resourceRequirements(@Nullable LicenseResourceRequirementsArgs resourceRequirements) {
            this.resourceRequirements = Output.ofNullable(resourceRequirements);
            return this;
        }

        public Builder transferable(@Nullable Output<Boolean> transferable) {
            this.transferable = transferable;
            return this;
        }

        public Builder transferable(@Nullable Boolean transferable) {
            this.transferable = Output.ofNullable(transferable);
            return this;
        }
        public LicenseArgs build() {
            return new LicenseArgs(description, name, project, requestId, resourceRequirements, transferable);
        }
    }
}
