// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_beta.inputs.CorsPolicyResponse;
import io.pulumi.googlenative.compute_beta.inputs.DurationResponse;
import io.pulumi.googlenative.compute_beta.inputs.HttpFaultInjectionResponse;
import io.pulumi.googlenative.compute_beta.inputs.HttpRetryPolicyResponse;
import io.pulumi.googlenative.compute_beta.inputs.RequestMirrorPolicyResponse;
import io.pulumi.googlenative.compute_beta.inputs.UrlRewriteResponse;
import io.pulumi.googlenative.compute_beta.inputs.WeightedBackendServiceResponse;
import java.util.List;
import java.util.Objects;


public final class HttpRouteActionResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpRouteActionResponse Empty = new HttpRouteActionResponse();

    @InputImport(name="corsPolicy", required=true)
    private final CorsPolicyResponse corsPolicy;

    public CorsPolicyResponse getCorsPolicy() {
        return this.corsPolicy;
    }

    @InputImport(name="faultInjectionPolicy", required=true)
    private final HttpFaultInjectionResponse faultInjectionPolicy;

    public HttpFaultInjectionResponse getFaultInjectionPolicy() {
        return this.faultInjectionPolicy;
    }

    @InputImport(name="maxStreamDuration", required=true)
    private final DurationResponse maxStreamDuration;

    public DurationResponse getMaxStreamDuration() {
        return this.maxStreamDuration;
    }

    @InputImport(name="requestMirrorPolicy", required=true)
    private final RequestMirrorPolicyResponse requestMirrorPolicy;

    public RequestMirrorPolicyResponse getRequestMirrorPolicy() {
        return this.requestMirrorPolicy;
    }

    @InputImport(name="retryPolicy", required=true)
    private final HttpRetryPolicyResponse retryPolicy;

    public HttpRetryPolicyResponse getRetryPolicy() {
        return this.retryPolicy;
    }

    @InputImport(name="timeout", required=true)
    private final DurationResponse timeout;

    public DurationResponse getTimeout() {
        return this.timeout;
    }

    @InputImport(name="urlRewrite", required=true)
    private final UrlRewriteResponse urlRewrite;

    public UrlRewriteResponse getUrlRewrite() {
        return this.urlRewrite;
    }

    @InputImport(name="weightedBackendServices", required=true)
    private final List<WeightedBackendServiceResponse> weightedBackendServices;

    public List<WeightedBackendServiceResponse> getWeightedBackendServices() {
        return this.weightedBackendServices;
    }

    public HttpRouteActionResponse(
        CorsPolicyResponse corsPolicy,
        HttpFaultInjectionResponse faultInjectionPolicy,
        DurationResponse maxStreamDuration,
        RequestMirrorPolicyResponse requestMirrorPolicy,
        HttpRetryPolicyResponse retryPolicy,
        DurationResponse timeout,
        UrlRewriteResponse urlRewrite,
        List<WeightedBackendServiceResponse> weightedBackendServices) {
        this.corsPolicy = Objects.requireNonNull(corsPolicy, "expected parameter 'corsPolicy' to be non-null");
        this.faultInjectionPolicy = Objects.requireNonNull(faultInjectionPolicy, "expected parameter 'faultInjectionPolicy' to be non-null");
        this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration, "expected parameter 'maxStreamDuration' to be non-null");
        this.requestMirrorPolicy = Objects.requireNonNull(requestMirrorPolicy, "expected parameter 'requestMirrorPolicy' to be non-null");
        this.retryPolicy = Objects.requireNonNull(retryPolicy, "expected parameter 'retryPolicy' to be non-null");
        this.timeout = Objects.requireNonNull(timeout, "expected parameter 'timeout' to be non-null");
        this.urlRewrite = Objects.requireNonNull(urlRewrite, "expected parameter 'urlRewrite' to be non-null");
        this.weightedBackendServices = Objects.requireNonNull(weightedBackendServices, "expected parameter 'weightedBackendServices' to be non-null");
    }

    private HttpRouteActionResponse() {
        this.corsPolicy = null;
        this.faultInjectionPolicy = null;
        this.maxStreamDuration = null;
        this.requestMirrorPolicy = null;
        this.retryPolicy = null;
        this.timeout = null;
        this.urlRewrite = null;
        this.weightedBackendServices = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CorsPolicyResponse corsPolicy;
        private HttpFaultInjectionResponse faultInjectionPolicy;
        private DurationResponse maxStreamDuration;
        private RequestMirrorPolicyResponse requestMirrorPolicy;
        private HttpRetryPolicyResponse retryPolicy;
        private DurationResponse timeout;
        private UrlRewriteResponse urlRewrite;
        private List<WeightedBackendServiceResponse> weightedBackendServices;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRouteActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.corsPolicy = defaults.corsPolicy;
    	      this.faultInjectionPolicy = defaults.faultInjectionPolicy;
    	      this.maxStreamDuration = defaults.maxStreamDuration;
    	      this.requestMirrorPolicy = defaults.requestMirrorPolicy;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.timeout = defaults.timeout;
    	      this.urlRewrite = defaults.urlRewrite;
    	      this.weightedBackendServices = defaults.weightedBackendServices;
        }

        public Builder setCorsPolicy(CorsPolicyResponse corsPolicy) {
            this.corsPolicy = Objects.requireNonNull(corsPolicy);
            return this;
        }

        public Builder setFaultInjectionPolicy(HttpFaultInjectionResponse faultInjectionPolicy) {
            this.faultInjectionPolicy = Objects.requireNonNull(faultInjectionPolicy);
            return this;
        }

        public Builder setMaxStreamDuration(DurationResponse maxStreamDuration) {
            this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration);
            return this;
        }

        public Builder setRequestMirrorPolicy(RequestMirrorPolicyResponse requestMirrorPolicy) {
            this.requestMirrorPolicy = Objects.requireNonNull(requestMirrorPolicy);
            return this;
        }

        public Builder setRetryPolicy(HttpRetryPolicyResponse retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy);
            return this;
        }

        public Builder setTimeout(DurationResponse timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setUrlRewrite(UrlRewriteResponse urlRewrite) {
            this.urlRewrite = Objects.requireNonNull(urlRewrite);
            return this;
        }

        public Builder setWeightedBackendServices(List<WeightedBackendServiceResponse> weightedBackendServices) {
            this.weightedBackendServices = Objects.requireNonNull(weightedBackendServices);
            return this;
        }

        public HttpRouteActionResponse build() {
            return new HttpRouteActionResponse(corsPolicy, faultInjectionPolicy, maxStreamDuration, requestMirrorPolicy, retryPolicy, timeout, urlRewrite, weightedBackendServices);
        }
    }
}
