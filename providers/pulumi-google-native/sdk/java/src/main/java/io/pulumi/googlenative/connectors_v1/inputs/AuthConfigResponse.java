// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.connectors_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.connectors_v1.inputs.ConfigVariableResponse;
import io.pulumi.googlenative.connectors_v1.inputs.Oauth2ClientCredentialsResponse;
import io.pulumi.googlenative.connectors_v1.inputs.Oauth2JwtBearerResponse;
import io.pulumi.googlenative.connectors_v1.inputs.UserPasswordResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * AuthConfig defines details of a authentication type.
 * 
 */
public final class AuthConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final AuthConfigResponse Empty = new AuthConfigResponse();

    /**
     * List containing additional auth configs.
     * 
     */
    @Import(name="additionalVariables", required=true)
      private final List<ConfigVariableResponse> additionalVariables;

    public List<ConfigVariableResponse> additionalVariables() {
        return this.additionalVariables;
    }

    /**
     * The type of authentication configured.
     * 
     */
    @Import(name="authType", required=true)
      private final String authType;

    public String authType() {
        return this.authType;
    }

    /**
     * Oauth2ClientCredentials.
     * 
     */
    @Import(name="oauth2ClientCredentials", required=true)
      private final Oauth2ClientCredentialsResponse oauth2ClientCredentials;

    public Oauth2ClientCredentialsResponse oauth2ClientCredentials() {
        return this.oauth2ClientCredentials;
    }

    /**
     * Oauth2JwtBearer.
     * 
     */
    @Import(name="oauth2JwtBearer", required=true)
      private final Oauth2JwtBearerResponse oauth2JwtBearer;

    public Oauth2JwtBearerResponse oauth2JwtBearer() {
        return this.oauth2JwtBearer;
    }

    /**
     * UserPassword.
     * 
     */
    @Import(name="userPassword", required=true)
      private final UserPasswordResponse userPassword;

    public UserPasswordResponse userPassword() {
        return this.userPassword;
    }

    public AuthConfigResponse(
        List<ConfigVariableResponse> additionalVariables,
        String authType,
        Oauth2ClientCredentialsResponse oauth2ClientCredentials,
        Oauth2JwtBearerResponse oauth2JwtBearer,
        UserPasswordResponse userPassword) {
        this.additionalVariables = Objects.requireNonNull(additionalVariables, "expected parameter 'additionalVariables' to be non-null");
        this.authType = Objects.requireNonNull(authType, "expected parameter 'authType' to be non-null");
        this.oauth2ClientCredentials = Objects.requireNonNull(oauth2ClientCredentials, "expected parameter 'oauth2ClientCredentials' to be non-null");
        this.oauth2JwtBearer = Objects.requireNonNull(oauth2JwtBearer, "expected parameter 'oauth2JwtBearer' to be non-null");
        this.userPassword = Objects.requireNonNull(userPassword, "expected parameter 'userPassword' to be non-null");
    }

    private AuthConfigResponse() {
        this.additionalVariables = List.of();
        this.authType = null;
        this.oauth2ClientCredentials = null;
        this.oauth2JwtBearer = null;
        this.userPassword = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ConfigVariableResponse> additionalVariables;
        private String authType;
        private Oauth2ClientCredentialsResponse oauth2ClientCredentials;
        private Oauth2JwtBearerResponse oauth2JwtBearer;
        private UserPasswordResponse userPassword;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalVariables = defaults.additionalVariables;
    	      this.authType = defaults.authType;
    	      this.oauth2ClientCredentials = defaults.oauth2ClientCredentials;
    	      this.oauth2JwtBearer = defaults.oauth2JwtBearer;
    	      this.userPassword = defaults.userPassword;
        }

        public Builder additionalVariables(List<ConfigVariableResponse> additionalVariables) {
            this.additionalVariables = Objects.requireNonNull(additionalVariables);
            return this;
        }
        public Builder additionalVariables(ConfigVariableResponse... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }
        public Builder authType(String authType) {
            this.authType = Objects.requireNonNull(authType);
            return this;
        }
        public Builder oauth2ClientCredentials(Oauth2ClientCredentialsResponse oauth2ClientCredentials) {
            this.oauth2ClientCredentials = Objects.requireNonNull(oauth2ClientCredentials);
            return this;
        }
        public Builder oauth2JwtBearer(Oauth2JwtBearerResponse oauth2JwtBearer) {
            this.oauth2JwtBearer = Objects.requireNonNull(oauth2JwtBearer);
            return this;
        }
        public Builder userPassword(UserPasswordResponse userPassword) {
            this.userPassword = Objects.requireNonNull(userPassword);
            return this;
        }        public AuthConfigResponse build() {
            return new AuthConfigResponse(additionalVariables, authType, oauth2ClientCredentials, oauth2JwtBearer, userPassword);
        }
    }
}
