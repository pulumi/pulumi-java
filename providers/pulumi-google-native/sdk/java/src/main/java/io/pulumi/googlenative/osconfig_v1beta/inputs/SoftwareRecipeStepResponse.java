// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepCopyFileResponse;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepExecFileResponse;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepExtractArchiveResponse;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepInstallDpkgResponse;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepInstallMsiResponse;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepInstallRpmResponse;
import io.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepRunScriptResponse;
import java.util.Objects;


/**
 * An action that can be taken as part of installing or updating a recipe.
 * 
 */
public final class SoftwareRecipeStepResponse extends io.pulumi.resources.InvokeArgs {

    public static final SoftwareRecipeStepResponse Empty = new SoftwareRecipeStepResponse();

    /**
     * Extracts an archive into the specified directory.
     * 
     */
    @InputImport(name="archiveExtraction", required=true)
    private final SoftwareRecipeStepExtractArchiveResponse archiveExtraction;

    public SoftwareRecipeStepExtractArchiveResponse getArchiveExtraction() {
        return this.archiveExtraction;
    }

    /**
     * Installs a deb file via dpkg.
     * 
     */
    @InputImport(name="dpkgInstallation", required=true)
    private final SoftwareRecipeStepInstallDpkgResponse dpkgInstallation;

    public SoftwareRecipeStepInstallDpkgResponse getDpkgInstallation() {
        return this.dpkgInstallation;
    }

    /**
     * Copies a file onto the instance.
     * 
     */
    @InputImport(name="fileCopy", required=true)
    private final SoftwareRecipeStepCopyFileResponse fileCopy;

    public SoftwareRecipeStepCopyFileResponse getFileCopy() {
        return this.fileCopy;
    }

    /**
     * Executes an artifact or local file.
     * 
     */
    @InputImport(name="fileExec", required=true)
    private final SoftwareRecipeStepExecFileResponse fileExec;

    public SoftwareRecipeStepExecFileResponse getFileExec() {
        return this.fileExec;
    }

    /**
     * Installs an MSI file.
     * 
     */
    @InputImport(name="msiInstallation", required=true)
    private final SoftwareRecipeStepInstallMsiResponse msiInstallation;

    public SoftwareRecipeStepInstallMsiResponse getMsiInstallation() {
        return this.msiInstallation;
    }

    /**
     * Installs an rpm file via the rpm utility.
     * 
     */
    @InputImport(name="rpmInstallation", required=true)
    private final SoftwareRecipeStepInstallRpmResponse rpmInstallation;

    public SoftwareRecipeStepInstallRpmResponse getRpmInstallation() {
        return this.rpmInstallation;
    }

    /**
     * Runs commands in a shell.
     * 
     */
    @InputImport(name="scriptRun", required=true)
    private final SoftwareRecipeStepRunScriptResponse scriptRun;

    public SoftwareRecipeStepRunScriptResponse getScriptRun() {
        return this.scriptRun;
    }

    public SoftwareRecipeStepResponse(
        SoftwareRecipeStepExtractArchiveResponse archiveExtraction,
        SoftwareRecipeStepInstallDpkgResponse dpkgInstallation,
        SoftwareRecipeStepCopyFileResponse fileCopy,
        SoftwareRecipeStepExecFileResponse fileExec,
        SoftwareRecipeStepInstallMsiResponse msiInstallation,
        SoftwareRecipeStepInstallRpmResponse rpmInstallation,
        SoftwareRecipeStepRunScriptResponse scriptRun) {
        this.archiveExtraction = Objects.requireNonNull(archiveExtraction, "expected parameter 'archiveExtraction' to be non-null");
        this.dpkgInstallation = Objects.requireNonNull(dpkgInstallation, "expected parameter 'dpkgInstallation' to be non-null");
        this.fileCopy = Objects.requireNonNull(fileCopy, "expected parameter 'fileCopy' to be non-null");
        this.fileExec = Objects.requireNonNull(fileExec, "expected parameter 'fileExec' to be non-null");
        this.msiInstallation = Objects.requireNonNull(msiInstallation, "expected parameter 'msiInstallation' to be non-null");
        this.rpmInstallation = Objects.requireNonNull(rpmInstallation, "expected parameter 'rpmInstallation' to be non-null");
        this.scriptRun = Objects.requireNonNull(scriptRun, "expected parameter 'scriptRun' to be non-null");
    }

    private SoftwareRecipeStepResponse() {
        this.archiveExtraction = null;
        this.dpkgInstallation = null;
        this.fileCopy = null;
        this.fileExec = null;
        this.msiInstallation = null;
        this.rpmInstallation = null;
        this.scriptRun = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SoftwareRecipeStepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareRecipeStepExtractArchiveResponse archiveExtraction;
        private SoftwareRecipeStepInstallDpkgResponse dpkgInstallation;
        private SoftwareRecipeStepCopyFileResponse fileCopy;
        private SoftwareRecipeStepExecFileResponse fileExec;
        private SoftwareRecipeStepInstallMsiResponse msiInstallation;
        private SoftwareRecipeStepInstallRpmResponse rpmInstallation;
        private SoftwareRecipeStepRunScriptResponse scriptRun;

        public Builder() {
    	      // Empty
        }

        public Builder(SoftwareRecipeStepResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveExtraction = defaults.archiveExtraction;
    	      this.dpkgInstallation = defaults.dpkgInstallation;
    	      this.fileCopy = defaults.fileCopy;
    	      this.fileExec = defaults.fileExec;
    	      this.msiInstallation = defaults.msiInstallation;
    	      this.rpmInstallation = defaults.rpmInstallation;
    	      this.scriptRun = defaults.scriptRun;
        }

        public Builder setArchiveExtraction(SoftwareRecipeStepExtractArchiveResponse archiveExtraction) {
            this.archiveExtraction = Objects.requireNonNull(archiveExtraction);
            return this;
        }

        public Builder setDpkgInstallation(SoftwareRecipeStepInstallDpkgResponse dpkgInstallation) {
            this.dpkgInstallation = Objects.requireNonNull(dpkgInstallation);
            return this;
        }

        public Builder setFileCopy(SoftwareRecipeStepCopyFileResponse fileCopy) {
            this.fileCopy = Objects.requireNonNull(fileCopy);
            return this;
        }

        public Builder setFileExec(SoftwareRecipeStepExecFileResponse fileExec) {
            this.fileExec = Objects.requireNonNull(fileExec);
            return this;
        }

        public Builder setMsiInstallation(SoftwareRecipeStepInstallMsiResponse msiInstallation) {
            this.msiInstallation = Objects.requireNonNull(msiInstallation);
            return this;
        }

        public Builder setRpmInstallation(SoftwareRecipeStepInstallRpmResponse rpmInstallation) {
            this.rpmInstallation = Objects.requireNonNull(rpmInstallation);
            return this;
        }

        public Builder setScriptRun(SoftwareRecipeStepRunScriptResponse scriptRun) {
            this.scriptRun = Objects.requireNonNull(scriptRun);
            return this;
        }

        public SoftwareRecipeStepResponse build() {
            return new SoftwareRecipeStepResponse(archiveExtraction, dpkgInstallation, fileCopy, fileExec, msiInstallation, rpmInstallation, scriptRun);
        }
    }
}
