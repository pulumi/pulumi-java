// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datamigration_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * SSL configuration information.
 * 
 */
public final class SslConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final SslConfigArgs Empty = new SslConfigArgs();

    /**
     * Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
     * 
     */
    @InputImport(name="caCertificate", required=true)
    private final Input<String> caCertificate;

    public Input<String> getCaCertificate() {
        return this.caCertificate;
    }

    /**
     * Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
     * 
     */
    @InputImport(name="clientCertificate")
    private final @Nullable Input<String> clientCertificate;

    public Input<String> getClientCertificate() {
        return this.clientCertificate == null ? Input.empty() : this.clientCertificate;
    }

    /**
     * Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
     * 
     */
    @InputImport(name="clientKey")
    private final @Nullable Input<String> clientKey;

    public Input<String> getClientKey() {
        return this.clientKey == null ? Input.empty() : this.clientKey;
    }

    public SslConfigArgs(
        Input<String> caCertificate,
        @Nullable Input<String> clientCertificate,
        @Nullable Input<String> clientKey) {
        this.caCertificate = Objects.requireNonNull(caCertificate, "expected parameter 'caCertificate' to be non-null");
        this.clientCertificate = clientCertificate;
        this.clientKey = clientKey;
    }

    private SslConfigArgs() {
        this.caCertificate = Input.empty();
        this.clientCertificate = Input.empty();
        this.clientKey = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SslConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> caCertificate;
        private @Nullable Input<String> clientCertificate;
        private @Nullable Input<String> clientKey;

        public Builder() {
    	      // Empty
        }

        public Builder(SslConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
        }

        public Builder setCaCertificate(Input<String> caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }

        public Builder setCaCertificate(String caCertificate) {
            this.caCertificate = Input.of(Objects.requireNonNull(caCertificate));
            return this;
        }

        public Builder setClientCertificate(@Nullable Input<String> clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        public Builder setClientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = Input.ofNullable(clientCertificate);
            return this;
        }

        public Builder setClientKey(@Nullable Input<String> clientKey) {
            this.clientKey = clientKey;
            return this;
        }

        public Builder setClientKey(@Nullable String clientKey) {
            this.clientKey = Input.ofNullable(clientKey);
            return this;
        }

        public SslConfigArgs build() {
            return new SslConfigArgs(caCertificate, clientCertificate, clientKey);
        }
    }
}
