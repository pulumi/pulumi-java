// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1beta1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.healthcare_v1beta1.enums.AttributeDefinitionCategory;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AttributeDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final AttributeDefinitionArgs Empty = new AttributeDefinitionArgs();

    /**
     * Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.
     * 
     */
    @InputImport(name="allowedValues", required=true)
    private final Input<List<String>> allowedValues;

    public Input<List<String>> getAllowedValues() {
        return this.allowedValues;
    }

    @InputImport(name="attributeDefinitionId", required=true)
    private final Input<String> attributeDefinitionId;

    public Input<String> getAttributeDefinitionId() {
        return this.attributeDefinitionId;
    }

    /**
     * The category of the attribute. The value of this field cannot be changed after creation.
     * 
     */
    @InputImport(name="category", required=true)
    private final Input<AttributeDefinitionCategory> category;

    public Input<AttributeDefinitionCategory> getCategory() {
        return this.category;
    }

    /**
     * Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.
     * 
     */
    @InputImport(name="consentDefaultValues")
    private final @Nullable Input<List<String>> consentDefaultValues;

    public Input<List<String>> getConsentDefaultValues() {
        return this.consentDefaultValues == null ? Input.empty() : this.consentDefaultValues;
    }

    @InputImport(name="consentStoreId", required=true)
    private final Input<String> consentStoreId;

    public Input<String> getConsentStoreId() {
        return this.consentStoreId;
    }

    /**
     * Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.
     * 
     */
    @InputImport(name="dataMappingDefaultValue")
    private final @Nullable Input<String> dataMappingDefaultValue;

    public Input<String> getDataMappingDefaultValue() {
        return this.dataMappingDefaultValue == null ? Input.empty() : this.dataMappingDefaultValue;
    }

    @InputImport(name="datasetId", required=true)
    private final Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId;
    }

    /**
     * Optional. A description of the attribute.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    public AttributeDefinitionArgs(
        Input<List<String>> allowedValues,
        Input<String> attributeDefinitionId,
        Input<AttributeDefinitionCategory> category,
        @Nullable Input<List<String>> consentDefaultValues,
        Input<String> consentStoreId,
        @Nullable Input<String> dataMappingDefaultValue,
        Input<String> datasetId,
        @Nullable Input<String> description,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project) {
        this.allowedValues = Objects.requireNonNull(allowedValues, "expected parameter 'allowedValues' to be non-null");
        this.attributeDefinitionId = Objects.requireNonNull(attributeDefinitionId, "expected parameter 'attributeDefinitionId' to be non-null");
        this.category = Objects.requireNonNull(category, "expected parameter 'category' to be non-null");
        this.consentDefaultValues = consentDefaultValues;
        this.consentStoreId = Objects.requireNonNull(consentStoreId, "expected parameter 'consentStoreId' to be non-null");
        this.dataMappingDefaultValue = dataMappingDefaultValue;
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.description = description;
        this.location = location;
        this.name = name;
        this.project = project;
    }

    private AttributeDefinitionArgs() {
        this.allowedValues = Input.empty();
        this.attributeDefinitionId = Input.empty();
        this.category = Input.empty();
        this.consentDefaultValues = Input.empty();
        this.consentStoreId = Input.empty();
        this.dataMappingDefaultValue = Input.empty();
        this.datasetId = Input.empty();
        this.description = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AttributeDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> allowedValues;
        private Input<String> attributeDefinitionId;
        private Input<AttributeDefinitionCategory> category;
        private @Nullable Input<List<String>> consentDefaultValues;
        private Input<String> consentStoreId;
        private @Nullable Input<String> dataMappingDefaultValue;
        private Input<String> datasetId;
        private @Nullable Input<String> description;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(AttributeDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.attributeDefinitionId = defaults.attributeDefinitionId;
    	      this.category = defaults.category;
    	      this.consentDefaultValues = defaults.consentDefaultValues;
    	      this.consentStoreId = defaults.consentStoreId;
    	      this.dataMappingDefaultValue = defaults.dataMappingDefaultValue;
    	      this.datasetId = defaults.datasetId;
    	      this.description = defaults.description;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
        }

        public Builder setAllowedValues(Input<List<String>> allowedValues) {
            this.allowedValues = Objects.requireNonNull(allowedValues);
            return this;
        }

        public Builder setAllowedValues(List<String> allowedValues) {
            this.allowedValues = Input.of(Objects.requireNonNull(allowedValues));
            return this;
        }

        public Builder setAttributeDefinitionId(Input<String> attributeDefinitionId) {
            this.attributeDefinitionId = Objects.requireNonNull(attributeDefinitionId);
            return this;
        }

        public Builder setAttributeDefinitionId(String attributeDefinitionId) {
            this.attributeDefinitionId = Input.of(Objects.requireNonNull(attributeDefinitionId));
            return this;
        }

        public Builder setCategory(Input<AttributeDefinitionCategory> category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }

        public Builder setCategory(AttributeDefinitionCategory category) {
            this.category = Input.of(Objects.requireNonNull(category));
            return this;
        }

        public Builder setConsentDefaultValues(@Nullable Input<List<String>> consentDefaultValues) {
            this.consentDefaultValues = consentDefaultValues;
            return this;
        }

        public Builder setConsentDefaultValues(@Nullable List<String> consentDefaultValues) {
            this.consentDefaultValues = Input.ofNullable(consentDefaultValues);
            return this;
        }

        public Builder setConsentStoreId(Input<String> consentStoreId) {
            this.consentStoreId = Objects.requireNonNull(consentStoreId);
            return this;
        }

        public Builder setConsentStoreId(String consentStoreId) {
            this.consentStoreId = Input.of(Objects.requireNonNull(consentStoreId));
            return this;
        }

        public Builder setDataMappingDefaultValue(@Nullable Input<String> dataMappingDefaultValue) {
            this.dataMappingDefaultValue = dataMappingDefaultValue;
            return this;
        }

        public Builder setDataMappingDefaultValue(@Nullable String dataMappingDefaultValue) {
            this.dataMappingDefaultValue = Input.ofNullable(dataMappingDefaultValue);
            return this;
        }

        public Builder setDatasetId(Input<String> datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder setDatasetId(String datasetId) {
            this.datasetId = Input.of(Objects.requireNonNull(datasetId));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public AttributeDefinitionArgs build() {
            return new AttributeDefinitionArgs(allowedValues, attributeDefinitionId, category, consentDefaultValues, consentStoreId, dataMappingDefaultValue, datasetId, description, location, name, project);
        }
    }
}
