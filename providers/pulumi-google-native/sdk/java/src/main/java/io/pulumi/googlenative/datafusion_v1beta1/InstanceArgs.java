// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datafusion_v1beta1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.datafusion_v1beta1.enums.InstanceType;
import io.pulumi.googlenative.datafusion_v1beta1.inputs.AcceleratorArgs;
import io.pulumi.googlenative.datafusion_v1beta1.inputs.CryptoKeyConfigArgs;
import io.pulumi.googlenative.datafusion_v1beta1.inputs.NetworkConfigArgs;
import io.pulumi.googlenative.datafusion_v1beta1.inputs.VersionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * List of accelerators enabled for this CDF instance.
     * 
     */
    @Import(name="accelerators")
      private final @Nullable Output<List<AcceleratorArgs>> accelerators;

    public Output<List<AcceleratorArgs>> getAccelerators() {
        return this.accelerators == null ? Output.empty() : this.accelerators;
    }

    /**
     * Available versions that the instance can be upgraded to using UpdateInstanceRequest.
     * 
     */
    @Import(name="availableVersion")
      private final @Nullable Output<List<VersionArgs>> availableVersion;

    public Output<List<VersionArgs>> getAvailableVersion() {
        return this.availableVersion == null ? Output.empty() : this.availableVersion;
    }

    /**
     * The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
     * 
     */
    @Import(name="cryptoKeyConfig")
      private final @Nullable Output<CryptoKeyConfigArgs> cryptoKeyConfig;

    public Output<CryptoKeyConfigArgs> getCryptoKeyConfig() {
        return this.cryptoKeyConfig == null ? Output.empty() : this.cryptoKeyConfig;
    }

    /**
     * User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.
     * 
     */
    @Import(name="dataprocServiceAccount")
      private final @Nullable Output<String> dataprocServiceAccount;

    public Output<String> getDataprocServiceAccount() {
        return this.dataprocServiceAccount == null ? Output.empty() : this.dataprocServiceAccount;
    }

    /**
     * A description of this instance.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Display name for an instance.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Option to enable granular role-based access control.
     * 
     */
    @Import(name="enableRbac")
      private final @Nullable Output<Boolean> enableRbac;

    public Output<Boolean> getEnableRbac() {
        return this.enableRbac == null ? Output.empty() : this.enableRbac;
    }

    /**
     * Option to enable Stackdriver Logging.
     * 
     */
    @Import(name="enableStackdriverLogging")
      private final @Nullable Output<Boolean> enableStackdriverLogging;

    public Output<Boolean> getEnableStackdriverLogging() {
        return this.enableStackdriverLogging == null ? Output.empty() : this.enableStackdriverLogging;
    }

    /**
     * Option to enable Stackdriver Monitoring.
     * 
     */
    @Import(name="enableStackdriverMonitoring")
      private final @Nullable Output<Boolean> enableStackdriverMonitoring;

    public Output<Boolean> getEnableStackdriverMonitoring() {
        return this.enableStackdriverMonitoring == null ? Output.empty() : this.enableStackdriverMonitoring;
    }

    @Import(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId;
    }

    /**
     * The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Network configuration options. These are required when a private Data Fusion instance is to be created.
     * 
     */
    @Import(name="networkConfig")
      private final @Nullable Output<NetworkConfigArgs> networkConfig;

    public Output<NetworkConfigArgs> getNetworkConfig() {
        return this.networkConfig == null ? Output.empty() : this.networkConfig;
    }

    /**
     * Map of additional options used to configure the behavior of Data Fusion instance.
     * 
     */
    @Import(name="options")
      private final @Nullable Output<Map<String,String>> options;

    public Output<Map<String,String>> getOptions() {
        return this.options == null ? Output.empty() : this.options;
    }

    /**
     * Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.
     * 
     */
    @Import(name="privateInstance")
      private final @Nullable Output<Boolean> privateInstance;

    public Output<Boolean> getPrivateInstance() {
        return this.privateInstance == null ? Output.empty() : this.privateInstance;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Instance type.
     * 
     */
    @Import(name="type", required=true)
      private final Output<InstanceType> type;

    public Output<InstanceType> getType() {
        return this.type;
    }

    /**
     * Current version of Data Fusion.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> getZone() {
        return this.zone == null ? Output.empty() : this.zone;
    }

    public InstanceArgs(
        @Nullable Output<List<AcceleratorArgs>> accelerators,
        @Nullable Output<List<VersionArgs>> availableVersion,
        @Nullable Output<CryptoKeyConfigArgs> cryptoKeyConfig,
        @Nullable Output<String> dataprocServiceAccount,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<Boolean> enableRbac,
        @Nullable Output<Boolean> enableStackdriverLogging,
        @Nullable Output<Boolean> enableStackdriverMonitoring,
        Output<String> instanceId,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<NetworkConfigArgs> networkConfig,
        @Nullable Output<Map<String,String>> options,
        @Nullable Output<Boolean> privateInstance,
        @Nullable Output<String> project,
        Output<InstanceType> type,
        @Nullable Output<String> version,
        @Nullable Output<String> zone) {
        this.accelerators = accelerators;
        this.availableVersion = availableVersion;
        this.cryptoKeyConfig = cryptoKeyConfig;
        this.dataprocServiceAccount = dataprocServiceAccount;
        this.description = description;
        this.displayName = displayName;
        this.enableRbac = enableRbac;
        this.enableStackdriverLogging = enableStackdriverLogging;
        this.enableStackdriverMonitoring = enableStackdriverMonitoring;
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.networkConfig = networkConfig;
        this.options = options;
        this.privateInstance = privateInstance;
        this.project = project;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.version = version;
        this.zone = zone;
    }

    private InstanceArgs() {
        this.accelerators = Output.empty();
        this.availableVersion = Output.empty();
        this.cryptoKeyConfig = Output.empty();
        this.dataprocServiceAccount = Output.empty();
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.enableRbac = Output.empty();
        this.enableStackdriverLogging = Output.empty();
        this.enableStackdriverMonitoring = Output.empty();
        this.instanceId = Output.empty();
        this.labels = Output.empty();
        this.location = Output.empty();
        this.networkConfig = Output.empty();
        this.options = Output.empty();
        this.privateInstance = Output.empty();
        this.project = Output.empty();
        this.type = Output.empty();
        this.version = Output.empty();
        this.zone = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AcceleratorArgs>> accelerators;
        private @Nullable Output<List<VersionArgs>> availableVersion;
        private @Nullable Output<CryptoKeyConfigArgs> cryptoKeyConfig;
        private @Nullable Output<String> dataprocServiceAccount;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<Boolean> enableRbac;
        private @Nullable Output<Boolean> enableStackdriverLogging;
        private @Nullable Output<Boolean> enableStackdriverMonitoring;
        private Output<String> instanceId;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<NetworkConfigArgs> networkConfig;
        private @Nullable Output<Map<String,String>> options;
        private @Nullable Output<Boolean> privateInstance;
        private @Nullable Output<String> project;
        private Output<InstanceType> type;
        private @Nullable Output<String> version;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.availableVersion = defaults.availableVersion;
    	      this.cryptoKeyConfig = defaults.cryptoKeyConfig;
    	      this.dataprocServiceAccount = defaults.dataprocServiceAccount;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enableRbac = defaults.enableRbac;
    	      this.enableStackdriverLogging = defaults.enableStackdriverLogging;
    	      this.enableStackdriverMonitoring = defaults.enableStackdriverMonitoring;
    	      this.instanceId = defaults.instanceId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.networkConfig = defaults.networkConfig;
    	      this.options = defaults.options;
    	      this.privateInstance = defaults.privateInstance;
    	      this.project = defaults.project;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
    	      this.zone = defaults.zone;
        }

        public Builder accelerators(@Nullable Output<List<AcceleratorArgs>> accelerators) {
            this.accelerators = accelerators;
            return this;
        }

        public Builder accelerators(@Nullable List<AcceleratorArgs> accelerators) {
            this.accelerators = Output.ofNullable(accelerators);
            return this;
        }

        public Builder availableVersion(@Nullable Output<List<VersionArgs>> availableVersion) {
            this.availableVersion = availableVersion;
            return this;
        }

        public Builder availableVersion(@Nullable List<VersionArgs> availableVersion) {
            this.availableVersion = Output.ofNullable(availableVersion);
            return this;
        }

        public Builder cryptoKeyConfig(@Nullable Output<CryptoKeyConfigArgs> cryptoKeyConfig) {
            this.cryptoKeyConfig = cryptoKeyConfig;
            return this;
        }

        public Builder cryptoKeyConfig(@Nullable CryptoKeyConfigArgs cryptoKeyConfig) {
            this.cryptoKeyConfig = Output.ofNullable(cryptoKeyConfig);
            return this;
        }

        public Builder dataprocServiceAccount(@Nullable Output<String> dataprocServiceAccount) {
            this.dataprocServiceAccount = dataprocServiceAccount;
            return this;
        }

        public Builder dataprocServiceAccount(@Nullable String dataprocServiceAccount) {
            this.dataprocServiceAccount = Output.ofNullable(dataprocServiceAccount);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder enableRbac(@Nullable Output<Boolean> enableRbac) {
            this.enableRbac = enableRbac;
            return this;
        }

        public Builder enableRbac(@Nullable Boolean enableRbac) {
            this.enableRbac = Output.ofNullable(enableRbac);
            return this;
        }

        public Builder enableStackdriverLogging(@Nullable Output<Boolean> enableStackdriverLogging) {
            this.enableStackdriverLogging = enableStackdriverLogging;
            return this;
        }

        public Builder enableStackdriverLogging(@Nullable Boolean enableStackdriverLogging) {
            this.enableStackdriverLogging = Output.ofNullable(enableStackdriverLogging);
            return this;
        }

        public Builder enableStackdriverMonitoring(@Nullable Output<Boolean> enableStackdriverMonitoring) {
            this.enableStackdriverMonitoring = enableStackdriverMonitoring;
            return this;
        }

        public Builder enableStackdriverMonitoring(@Nullable Boolean enableStackdriverMonitoring) {
            this.enableStackdriverMonitoring = Output.ofNullable(enableStackdriverMonitoring);
            return this;
        }

        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }

        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder networkConfig(@Nullable Output<NetworkConfigArgs> networkConfig) {
            this.networkConfig = networkConfig;
            return this;
        }

        public Builder networkConfig(@Nullable NetworkConfigArgs networkConfig) {
            this.networkConfig = Output.ofNullable(networkConfig);
            return this;
        }

        public Builder options(@Nullable Output<Map<String,String>> options) {
            this.options = options;
            return this;
        }

        public Builder options(@Nullable Map<String,String> options) {
            this.options = Output.ofNullable(options);
            return this;
        }

        public Builder privateInstance(@Nullable Output<Boolean> privateInstance) {
            this.privateInstance = privateInstance;
            return this;
        }

        public Builder privateInstance(@Nullable Boolean privateInstance) {
            this.privateInstance = Output.ofNullable(privateInstance);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder type(Output<InstanceType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(InstanceType type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }

        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }

        public Builder zone(@Nullable String zone) {
            this.zone = Output.ofNullable(zone);
            return this;
        }
        public InstanceArgs build() {
            return new InstanceArgs(accelerators, availableVersion, cryptoKeyConfig, dataprocServiceAccount, description, displayName, enableRbac, enableStackdriverLogging, enableStackdriverMonitoring, instanceId, labels, location, networkConfig, options, privateInstance, project, type, version, zone);
        }
    }
}
