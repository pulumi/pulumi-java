// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_beta.outputs.RouterNatLogConfigResponse;
import io.pulumi.googlenative.compute_beta.outputs.RouterNatRuleResponse;
import io.pulumi.googlenative.compute_beta.outputs.RouterNatSubnetworkToNatResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class RouterNatResponse {
    private final List<String> drainNatIps;
    private final Boolean enableDynamicPortAllocation;
    private final Boolean enableEndpointIndependentMapping;
    private final Integer icmpIdleTimeoutSec;
    private final RouterNatLogConfigResponse logConfig;
    private final Integer maxPortsPerVm;
    private final Integer minPortsPerVm;
    private final String name;
    private final String natIpAllocateOption;
    private final List<String> natIps;
    private final List<RouterNatRuleResponse> rules;
    private final String sourceSubnetworkIpRangesToNat;
    private final List<RouterNatSubnetworkToNatResponse> subnetworks;
    private final Integer tcpEstablishedIdleTimeoutSec;
    private final Integer tcpTimeWaitTimeoutSec;
    private final Integer tcpTransitoryIdleTimeoutSec;
    private final Integer udpIdleTimeoutSec;

    @OutputCustomType.Constructor({"drainNatIps","enableDynamicPortAllocation","enableEndpointIndependentMapping","icmpIdleTimeoutSec","logConfig","maxPortsPerVm","minPortsPerVm","name","natIpAllocateOption","natIps","rules","sourceSubnetworkIpRangesToNat","subnetworks","tcpEstablishedIdleTimeoutSec","tcpTimeWaitTimeoutSec","tcpTransitoryIdleTimeoutSec","udpIdleTimeoutSec"})
    private RouterNatResponse(
        List<String> drainNatIps,
        Boolean enableDynamicPortAllocation,
        Boolean enableEndpointIndependentMapping,
        Integer icmpIdleTimeoutSec,
        RouterNatLogConfigResponse logConfig,
        Integer maxPortsPerVm,
        Integer minPortsPerVm,
        String name,
        String natIpAllocateOption,
        List<String> natIps,
        List<RouterNatRuleResponse> rules,
        String sourceSubnetworkIpRangesToNat,
        List<RouterNatSubnetworkToNatResponse> subnetworks,
        Integer tcpEstablishedIdleTimeoutSec,
        Integer tcpTimeWaitTimeoutSec,
        Integer tcpTransitoryIdleTimeoutSec,
        Integer udpIdleTimeoutSec) {
        this.drainNatIps = Objects.requireNonNull(drainNatIps);
        this.enableDynamicPortAllocation = Objects.requireNonNull(enableDynamicPortAllocation);
        this.enableEndpointIndependentMapping = Objects.requireNonNull(enableEndpointIndependentMapping);
        this.icmpIdleTimeoutSec = Objects.requireNonNull(icmpIdleTimeoutSec);
        this.logConfig = Objects.requireNonNull(logConfig);
        this.maxPortsPerVm = Objects.requireNonNull(maxPortsPerVm);
        this.minPortsPerVm = Objects.requireNonNull(minPortsPerVm);
        this.name = Objects.requireNonNull(name);
        this.natIpAllocateOption = Objects.requireNonNull(natIpAllocateOption);
        this.natIps = Objects.requireNonNull(natIps);
        this.rules = Objects.requireNonNull(rules);
        this.sourceSubnetworkIpRangesToNat = Objects.requireNonNull(sourceSubnetworkIpRangesToNat);
        this.subnetworks = Objects.requireNonNull(subnetworks);
        this.tcpEstablishedIdleTimeoutSec = Objects.requireNonNull(tcpEstablishedIdleTimeoutSec);
        this.tcpTimeWaitTimeoutSec = Objects.requireNonNull(tcpTimeWaitTimeoutSec);
        this.tcpTransitoryIdleTimeoutSec = Objects.requireNonNull(tcpTransitoryIdleTimeoutSec);
        this.udpIdleTimeoutSec = Objects.requireNonNull(udpIdleTimeoutSec);
    }

    public List<String> getDrainNatIps() {
        return this.drainNatIps;
    }
    public Boolean getEnableDynamicPortAllocation() {
        return this.enableDynamicPortAllocation;
    }
    public Boolean getEnableEndpointIndependentMapping() {
        return this.enableEndpointIndependentMapping;
    }
    public Integer getIcmpIdleTimeoutSec() {
        return this.icmpIdleTimeoutSec;
    }
    public RouterNatLogConfigResponse getLogConfig() {
        return this.logConfig;
    }
    public Integer getMaxPortsPerVm() {
        return this.maxPortsPerVm;
    }
    public Integer getMinPortsPerVm() {
        return this.minPortsPerVm;
    }
    public String getName() {
        return this.name;
    }
    public String getNatIpAllocateOption() {
        return this.natIpAllocateOption;
    }
    public List<String> getNatIps() {
        return this.natIps;
    }
    public List<RouterNatRuleResponse> getRules() {
        return this.rules;
    }
    public String getSourceSubnetworkIpRangesToNat() {
        return this.sourceSubnetworkIpRangesToNat;
    }
    public List<RouterNatSubnetworkToNatResponse> getSubnetworks() {
        return this.subnetworks;
    }
    public Integer getTcpEstablishedIdleTimeoutSec() {
        return this.tcpEstablishedIdleTimeoutSec;
    }
    public Integer getTcpTimeWaitTimeoutSec() {
        return this.tcpTimeWaitTimeoutSec;
    }
    public Integer getTcpTransitoryIdleTimeoutSec() {
        return this.tcpTransitoryIdleTimeoutSec;
    }
    public Integer getUdpIdleTimeoutSec() {
        return this.udpIdleTimeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterNatResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> drainNatIps;
        private Boolean enableDynamicPortAllocation;
        private Boolean enableEndpointIndependentMapping;
        private Integer icmpIdleTimeoutSec;
        private RouterNatLogConfigResponse logConfig;
        private Integer maxPortsPerVm;
        private Integer minPortsPerVm;
        private String name;
        private String natIpAllocateOption;
        private List<String> natIps;
        private List<RouterNatRuleResponse> rules;
        private String sourceSubnetworkIpRangesToNat;
        private List<RouterNatSubnetworkToNatResponse> subnetworks;
        private Integer tcpEstablishedIdleTimeoutSec;
        private Integer tcpTimeWaitTimeoutSec;
        private Integer tcpTransitoryIdleTimeoutSec;
        private Integer udpIdleTimeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterNatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.drainNatIps = defaults.drainNatIps;
    	      this.enableDynamicPortAllocation = defaults.enableDynamicPortAllocation;
    	      this.enableEndpointIndependentMapping = defaults.enableEndpointIndependentMapping;
    	      this.icmpIdleTimeoutSec = defaults.icmpIdleTimeoutSec;
    	      this.logConfig = defaults.logConfig;
    	      this.maxPortsPerVm = defaults.maxPortsPerVm;
    	      this.minPortsPerVm = defaults.minPortsPerVm;
    	      this.name = defaults.name;
    	      this.natIpAllocateOption = defaults.natIpAllocateOption;
    	      this.natIps = defaults.natIps;
    	      this.rules = defaults.rules;
    	      this.sourceSubnetworkIpRangesToNat = defaults.sourceSubnetworkIpRangesToNat;
    	      this.subnetworks = defaults.subnetworks;
    	      this.tcpEstablishedIdleTimeoutSec = defaults.tcpEstablishedIdleTimeoutSec;
    	      this.tcpTimeWaitTimeoutSec = defaults.tcpTimeWaitTimeoutSec;
    	      this.tcpTransitoryIdleTimeoutSec = defaults.tcpTransitoryIdleTimeoutSec;
    	      this.udpIdleTimeoutSec = defaults.udpIdleTimeoutSec;
        }

        public Builder setDrainNatIps(List<String> drainNatIps) {
            this.drainNatIps = Objects.requireNonNull(drainNatIps);
            return this;
        }

        public Builder setEnableDynamicPortAllocation(Boolean enableDynamicPortAllocation) {
            this.enableDynamicPortAllocation = Objects.requireNonNull(enableDynamicPortAllocation);
            return this;
        }

        public Builder setEnableEndpointIndependentMapping(Boolean enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = Objects.requireNonNull(enableEndpointIndependentMapping);
            return this;
        }

        public Builder setIcmpIdleTimeoutSec(Integer icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = Objects.requireNonNull(icmpIdleTimeoutSec);
            return this;
        }

        public Builder setLogConfig(RouterNatLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }

        public Builder setMaxPortsPerVm(Integer maxPortsPerVm) {
            this.maxPortsPerVm = Objects.requireNonNull(maxPortsPerVm);
            return this;
        }

        public Builder setMinPortsPerVm(Integer minPortsPerVm) {
            this.minPortsPerVm = Objects.requireNonNull(minPortsPerVm);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNatIpAllocateOption(String natIpAllocateOption) {
            this.natIpAllocateOption = Objects.requireNonNull(natIpAllocateOption);
            return this;
        }

        public Builder setNatIps(List<String> natIps) {
            this.natIps = Objects.requireNonNull(natIps);
            return this;
        }

        public Builder setRules(List<RouterNatRuleResponse> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }

        public Builder setSourceSubnetworkIpRangesToNat(String sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = Objects.requireNonNull(sourceSubnetworkIpRangesToNat);
            return this;
        }

        public Builder setSubnetworks(List<RouterNatSubnetworkToNatResponse> subnetworks) {
            this.subnetworks = Objects.requireNonNull(subnetworks);
            return this;
        }

        public Builder setTcpEstablishedIdleTimeoutSec(Integer tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = Objects.requireNonNull(tcpEstablishedIdleTimeoutSec);
            return this;
        }

        public Builder setTcpTimeWaitTimeoutSec(Integer tcpTimeWaitTimeoutSec) {
            this.tcpTimeWaitTimeoutSec = Objects.requireNonNull(tcpTimeWaitTimeoutSec);
            return this;
        }

        public Builder setTcpTransitoryIdleTimeoutSec(Integer tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = Objects.requireNonNull(tcpTransitoryIdleTimeoutSec);
            return this;
        }

        public Builder setUdpIdleTimeoutSec(Integer udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = Objects.requireNonNull(udpIdleTimeoutSec);
            return this;
        }

        public RouterNatResponse build() {
            return new RouterNatResponse(drainNatIps, enableDynamicPortAllocation, enableEndpointIndependentMapping, icmpIdleTimeoutSec, logConfig, maxPortsPerVm, minPortsPerVm, name, natIpAllocateOption, natIps, rules, sourceSubnetworkIpRangesToNat, subnetworks, tcpEstablishedIdleTimeoutSec, tcpTimeWaitTimeoutSec, tcpTransitoryIdleTimeoutSec, udpIdleTimeoutSec);
        }
    }
}
