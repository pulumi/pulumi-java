// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.retail_v2alpha.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaConditionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleBoostActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleFilterActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleIgnoreActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleRedirectActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleReplacementActionResponse;
import io.pulumi.googlenative.retail_v2alpha.outputs.GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse;
import java.util.Objects;

@OutputCustomType
public final class GoogleCloudRetailV2alphaRuleResponse {
    /**
     * A boost action.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction;
    /**
     * The condition that triggers the rule. If the condition is empty, the rule will always apply.
     * 
     */
    private final GoogleCloudRetailV2alphaConditionResponse condition;
    /**
     * Prevents term from being associated with other terms.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction;
    /**
     * Filters results.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction;
    /**
     * Ignores specific terms from query during search.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction;
    /**
     * Treats specific term as a synonym with a group of terms. Group of terms will not be treated as synonyms with the specific term.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction;
    /**
     * Redirects a shopper to a specific page.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction;
    /**
     * Replaces specific terms in the query.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction;
    /**
     * Treats a set of terms as synonyms of one another.
     * 
     */
    private final GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction;

    @OutputCustomType.Constructor({"boostAction","condition","doNotAssociateAction","filterAction","ignoreAction","onewaySynonymsAction","redirectAction","replacementAction","twowaySynonymsAction"})
    private GoogleCloudRetailV2alphaRuleResponse(
        GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction,
        GoogleCloudRetailV2alphaConditionResponse condition,
        GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction,
        GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction,
        GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction,
        GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction,
        GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction,
        GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction,
        GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction) {
        this.boostAction = Objects.requireNonNull(boostAction);
        this.condition = Objects.requireNonNull(condition);
        this.doNotAssociateAction = Objects.requireNonNull(doNotAssociateAction);
        this.filterAction = Objects.requireNonNull(filterAction);
        this.ignoreAction = Objects.requireNonNull(ignoreAction);
        this.onewaySynonymsAction = Objects.requireNonNull(onewaySynonymsAction);
        this.redirectAction = Objects.requireNonNull(redirectAction);
        this.replacementAction = Objects.requireNonNull(replacementAction);
        this.twowaySynonymsAction = Objects.requireNonNull(twowaySynonymsAction);
    }

    /**
     * A boost action.
     * 
     */
    public GoogleCloudRetailV2alphaRuleBoostActionResponse getBoostAction() {
        return this.boostAction;
    }
    /**
     * The condition that triggers the rule. If the condition is empty, the rule will always apply.
     * 
     */
    public GoogleCloudRetailV2alphaConditionResponse getCondition() {
        return this.condition;
    }
    /**
     * Prevents term from being associated with other terms.
     * 
     */
    public GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse getDoNotAssociateAction() {
        return this.doNotAssociateAction;
    }
    /**
     * Filters results.
     * 
     */
    public GoogleCloudRetailV2alphaRuleFilterActionResponse getFilterAction() {
        return this.filterAction;
    }
    /**
     * Ignores specific terms from query during search.
     * 
     */
    public GoogleCloudRetailV2alphaRuleIgnoreActionResponse getIgnoreAction() {
        return this.ignoreAction;
    }
    /**
     * Treats specific term as a synonym with a group of terms. Group of terms will not be treated as synonyms with the specific term.
     * 
     */
    public GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse getOnewaySynonymsAction() {
        return this.onewaySynonymsAction;
    }
    /**
     * Redirects a shopper to a specific page.
     * 
     */
    public GoogleCloudRetailV2alphaRuleRedirectActionResponse getRedirectAction() {
        return this.redirectAction;
    }
    /**
     * Replaces specific terms in the query.
     * 
     */
    public GoogleCloudRetailV2alphaRuleReplacementActionResponse getReplacementAction() {
        return this.replacementAction;
    }
    /**
     * Treats a set of terms as synonyms of one another.
     * 
     */
    public GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse getTwowaySynonymsAction() {
        return this.twowaySynonymsAction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRetailV2alphaRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction;
        private GoogleCloudRetailV2alphaConditionResponse condition;
        private GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction;
        private GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction;
        private GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction;
        private GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction;
        private GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction;
        private GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction;
        private GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRetailV2alphaRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boostAction = defaults.boostAction;
    	      this.condition = defaults.condition;
    	      this.doNotAssociateAction = defaults.doNotAssociateAction;
    	      this.filterAction = defaults.filterAction;
    	      this.ignoreAction = defaults.ignoreAction;
    	      this.onewaySynonymsAction = defaults.onewaySynonymsAction;
    	      this.redirectAction = defaults.redirectAction;
    	      this.replacementAction = defaults.replacementAction;
    	      this.twowaySynonymsAction = defaults.twowaySynonymsAction;
        }

        public Builder setBoostAction(GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction) {
            this.boostAction = Objects.requireNonNull(boostAction);
            return this;
        }

        public Builder setCondition(GoogleCloudRetailV2alphaConditionResponse condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }

        public Builder setDoNotAssociateAction(GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction) {
            this.doNotAssociateAction = Objects.requireNonNull(doNotAssociateAction);
            return this;
        }

        public Builder setFilterAction(GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction) {
            this.filterAction = Objects.requireNonNull(filterAction);
            return this;
        }

        public Builder setIgnoreAction(GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction) {
            this.ignoreAction = Objects.requireNonNull(ignoreAction);
            return this;
        }

        public Builder setOnewaySynonymsAction(GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction) {
            this.onewaySynonymsAction = Objects.requireNonNull(onewaySynonymsAction);
            return this;
        }

        public Builder setRedirectAction(GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction) {
            this.redirectAction = Objects.requireNonNull(redirectAction);
            return this;
        }

        public Builder setReplacementAction(GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction) {
            this.replacementAction = Objects.requireNonNull(replacementAction);
            return this;
        }

        public Builder setTwowaySynonymsAction(GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction) {
            this.twowaySynonymsAction = Objects.requireNonNull(twowaySynonymsAction);
            return this;
        }

        public GoogleCloudRetailV2alphaRuleResponse build() {
            return new GoogleCloudRetailV2alphaRuleResponse(boostAction, condition, doNotAssociateAction, filterAction, ignoreAction, onewaySynonymsAction, redirectAction, replacementAction, twowaySynonymsAction);
        }
    }
}
