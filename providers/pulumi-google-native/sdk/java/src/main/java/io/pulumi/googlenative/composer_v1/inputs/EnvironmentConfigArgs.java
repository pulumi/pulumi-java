// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.composer_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.composer_v1.enums.EnvironmentConfigEnvironmentSize;
import io.pulumi.googlenative.composer_v1.inputs.DatabaseConfigArgs;
import io.pulumi.googlenative.composer_v1.inputs.EncryptionConfigArgs;
import io.pulumi.googlenative.composer_v1.inputs.MaintenanceWindowArgs;
import io.pulumi.googlenative.composer_v1.inputs.NodeConfigArgs;
import io.pulumi.googlenative.composer_v1.inputs.PrivateEnvironmentConfigArgs;
import io.pulumi.googlenative.composer_v1.inputs.SoftwareConfigArgs;
import io.pulumi.googlenative.composer_v1.inputs.WebServerConfigArgs;
import io.pulumi.googlenative.composer_v1.inputs.WebServerNetworkAccessControlArgs;
import io.pulumi.googlenative.composer_v1.inputs.WorkloadsConfigArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnvironmentConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnvironmentConfigArgs Empty = new EnvironmentConfigArgs();

    @InputImport(name="databaseConfig")
    private final @Nullable Input<DatabaseConfigArgs> databaseConfig;

    public Input<DatabaseConfigArgs> getDatabaseConfig() {
        return this.databaseConfig == null ? Input.empty() : this.databaseConfig;
    }

    @InputImport(name="encryptionConfig")
    private final @Nullable Input<EncryptionConfigArgs> encryptionConfig;

    public Input<EncryptionConfigArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Input.empty() : this.encryptionConfig;
    }

    @InputImport(name="environmentSize")
    private final @Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize;

    public Input<EnvironmentConfigEnvironmentSize> getEnvironmentSize() {
        return this.environmentSize == null ? Input.empty() : this.environmentSize;
    }

    @InputImport(name="maintenanceWindow")
    private final @Nullable Input<MaintenanceWindowArgs> maintenanceWindow;

    public Input<MaintenanceWindowArgs> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Input.empty() : this.maintenanceWindow;
    }

    @InputImport(name="nodeConfig")
    private final @Nullable Input<NodeConfigArgs> nodeConfig;

    public Input<NodeConfigArgs> getNodeConfig() {
        return this.nodeConfig == null ? Input.empty() : this.nodeConfig;
    }

    @InputImport(name="nodeCount")
    private final @Nullable Input<Integer> nodeCount;

    public Input<Integer> getNodeCount() {
        return this.nodeCount == null ? Input.empty() : this.nodeCount;
    }

    @InputImport(name="privateEnvironmentConfig")
    private final @Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig;

    public Input<PrivateEnvironmentConfigArgs> getPrivateEnvironmentConfig() {
        return this.privateEnvironmentConfig == null ? Input.empty() : this.privateEnvironmentConfig;
    }

    @InputImport(name="softwareConfig")
    private final @Nullable Input<SoftwareConfigArgs> softwareConfig;

    public Input<SoftwareConfigArgs> getSoftwareConfig() {
        return this.softwareConfig == null ? Input.empty() : this.softwareConfig;
    }

    @InputImport(name="webServerConfig")
    private final @Nullable Input<WebServerConfigArgs> webServerConfig;

    public Input<WebServerConfigArgs> getWebServerConfig() {
        return this.webServerConfig == null ? Input.empty() : this.webServerConfig;
    }

    @InputImport(name="webServerNetworkAccessControl")
    private final @Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl;

    public Input<WebServerNetworkAccessControlArgs> getWebServerNetworkAccessControl() {
        return this.webServerNetworkAccessControl == null ? Input.empty() : this.webServerNetworkAccessControl;
    }

    @InputImport(name="workloadsConfig")
    private final @Nullable Input<WorkloadsConfigArgs> workloadsConfig;

    public Input<WorkloadsConfigArgs> getWorkloadsConfig() {
        return this.workloadsConfig == null ? Input.empty() : this.workloadsConfig;
    }

    public EnvironmentConfigArgs(
        @Nullable Input<DatabaseConfigArgs> databaseConfig,
        @Nullable Input<EncryptionConfigArgs> encryptionConfig,
        @Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize,
        @Nullable Input<MaintenanceWindowArgs> maintenanceWindow,
        @Nullable Input<NodeConfigArgs> nodeConfig,
        @Nullable Input<Integer> nodeCount,
        @Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig,
        @Nullable Input<SoftwareConfigArgs> softwareConfig,
        @Nullable Input<WebServerConfigArgs> webServerConfig,
        @Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl,
        @Nullable Input<WorkloadsConfigArgs> workloadsConfig) {
        this.databaseConfig = databaseConfig;
        this.encryptionConfig = encryptionConfig;
        this.environmentSize = environmentSize;
        this.maintenanceWindow = maintenanceWindow;
        this.nodeConfig = nodeConfig;
        this.nodeCount = nodeCount;
        this.privateEnvironmentConfig = privateEnvironmentConfig;
        this.softwareConfig = softwareConfig;
        this.webServerConfig = webServerConfig;
        this.webServerNetworkAccessControl = webServerNetworkAccessControl;
        this.workloadsConfig = workloadsConfig;
    }

    private EnvironmentConfigArgs() {
        this.databaseConfig = Input.empty();
        this.encryptionConfig = Input.empty();
        this.environmentSize = Input.empty();
        this.maintenanceWindow = Input.empty();
        this.nodeConfig = Input.empty();
        this.nodeCount = Input.empty();
        this.privateEnvironmentConfig = Input.empty();
        this.softwareConfig = Input.empty();
        this.webServerConfig = Input.empty();
        this.webServerNetworkAccessControl = Input.empty();
        this.workloadsConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DatabaseConfigArgs> databaseConfig;
        private @Nullable Input<EncryptionConfigArgs> encryptionConfig;
        private @Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize;
        private @Nullable Input<MaintenanceWindowArgs> maintenanceWindow;
        private @Nullable Input<NodeConfigArgs> nodeConfig;
        private @Nullable Input<Integer> nodeCount;
        private @Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig;
        private @Nullable Input<SoftwareConfigArgs> softwareConfig;
        private @Nullable Input<WebServerConfigArgs> webServerConfig;
        private @Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl;
        private @Nullable Input<WorkloadsConfigArgs> workloadsConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseConfig = defaults.databaseConfig;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.environmentSize = defaults.environmentSize;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.nodeConfig = defaults.nodeConfig;
    	      this.nodeCount = defaults.nodeCount;
    	      this.privateEnvironmentConfig = defaults.privateEnvironmentConfig;
    	      this.softwareConfig = defaults.softwareConfig;
    	      this.webServerConfig = defaults.webServerConfig;
    	      this.webServerNetworkAccessControl = defaults.webServerNetworkAccessControl;
    	      this.workloadsConfig = defaults.workloadsConfig;
        }

        public Builder setDatabaseConfig(@Nullable Input<DatabaseConfigArgs> databaseConfig) {
            this.databaseConfig = databaseConfig;
            return this;
        }

        public Builder setDatabaseConfig(@Nullable DatabaseConfigArgs databaseConfig) {
            this.databaseConfig = Input.ofNullable(databaseConfig);
            return this;
        }

        public Builder setEncryptionConfig(@Nullable Input<EncryptionConfigArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder setEncryptionConfig(@Nullable EncryptionConfigArgs encryptionConfig) {
            this.encryptionConfig = Input.ofNullable(encryptionConfig);
            return this;
        }

        public Builder setEnvironmentSize(@Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize) {
            this.environmentSize = environmentSize;
            return this;
        }

        public Builder setEnvironmentSize(@Nullable EnvironmentConfigEnvironmentSize environmentSize) {
            this.environmentSize = Input.ofNullable(environmentSize);
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable Input<MaintenanceWindowArgs> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable MaintenanceWindowArgs maintenanceWindow) {
            this.maintenanceWindow = Input.ofNullable(maintenanceWindow);
            return this;
        }

        public Builder setNodeConfig(@Nullable Input<NodeConfigArgs> nodeConfig) {
            this.nodeConfig = nodeConfig;
            return this;
        }

        public Builder setNodeConfig(@Nullable NodeConfigArgs nodeConfig) {
            this.nodeConfig = Input.ofNullable(nodeConfig);
            return this;
        }

        public Builder setNodeCount(@Nullable Input<Integer> nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }

        public Builder setNodeCount(@Nullable Integer nodeCount) {
            this.nodeCount = Input.ofNullable(nodeCount);
            return this;
        }

        public Builder setPrivateEnvironmentConfig(@Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig) {
            this.privateEnvironmentConfig = privateEnvironmentConfig;
            return this;
        }

        public Builder setPrivateEnvironmentConfig(@Nullable PrivateEnvironmentConfigArgs privateEnvironmentConfig) {
            this.privateEnvironmentConfig = Input.ofNullable(privateEnvironmentConfig);
            return this;
        }

        public Builder setSoftwareConfig(@Nullable Input<SoftwareConfigArgs> softwareConfig) {
            this.softwareConfig = softwareConfig;
            return this;
        }

        public Builder setSoftwareConfig(@Nullable SoftwareConfigArgs softwareConfig) {
            this.softwareConfig = Input.ofNullable(softwareConfig);
            return this;
        }

        public Builder setWebServerConfig(@Nullable Input<WebServerConfigArgs> webServerConfig) {
            this.webServerConfig = webServerConfig;
            return this;
        }

        public Builder setWebServerConfig(@Nullable WebServerConfigArgs webServerConfig) {
            this.webServerConfig = Input.ofNullable(webServerConfig);
            return this;
        }

        public Builder setWebServerNetworkAccessControl(@Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl) {
            this.webServerNetworkAccessControl = webServerNetworkAccessControl;
            return this;
        }

        public Builder setWebServerNetworkAccessControl(@Nullable WebServerNetworkAccessControlArgs webServerNetworkAccessControl) {
            this.webServerNetworkAccessControl = Input.ofNullable(webServerNetworkAccessControl);
            return this;
        }

        public Builder setWorkloadsConfig(@Nullable Input<WorkloadsConfigArgs> workloadsConfig) {
            this.workloadsConfig = workloadsConfig;
            return this;
        }

        public Builder setWorkloadsConfig(@Nullable WorkloadsConfigArgs workloadsConfig) {
            this.workloadsConfig = Input.ofNullable(workloadsConfig);
            return this;
        }

        public EnvironmentConfigArgs build() {
            return new EnvironmentConfigArgs(databaseConfig, encryptionConfig, environmentSize, maintenanceWindow, nodeConfig, nodeCount, privateEnvironmentConfig, softwareConfig, webServerConfig, webServerNetworkAccessControl, workloadsConfig);
        }
    }
}
