// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.composer_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.composer_v1beta1.inputs.PrivateClusterConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration information for configuring a Private IP Cloud Composer environment.
 * 
 */
public final class PrivateEnvironmentConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final PrivateEnvironmentConfigArgs Empty = new PrivateEnvironmentConfigArgs();

    /**
     * Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
     * 
     */
    @InputImport(name="cloudComposerConnectionSubnetwork")
    private final @Nullable Input<String> cloudComposerConnectionSubnetwork;

    public Input<String> getCloudComposerConnectionSubnetwork() {
        return this.cloudComposerConnectionSubnetwork == null ? Input.empty() : this.cloudComposerConnectionSubnetwork;
    }

    /**
     * Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @InputImport(name="cloudComposerNetworkIpv4CidrBlock")
    private final @Nullable Input<String> cloudComposerNetworkIpv4CidrBlock;

    public Input<String> getCloudComposerNetworkIpv4CidrBlock() {
        return this.cloudComposerNetworkIpv4CidrBlock == null ? Input.empty() : this.cloudComposerNetworkIpv4CidrBlock;
    }

    /**
     * Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
     * 
     */
    @InputImport(name="cloudSqlIpv4CidrBlock")
    private final @Nullable Input<String> cloudSqlIpv4CidrBlock;

    public Input<String> getCloudSqlIpv4CidrBlock() {
        return this.cloudSqlIpv4CidrBlock == null ? Input.empty() : this.cloudSqlIpv4CidrBlock;
    }

    /**
     * Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @InputImport(name="enablePrivateEnvironment")
    private final @Nullable Input<Boolean> enablePrivateEnvironment;

    public Input<Boolean> getEnablePrivateEnvironment() {
        return this.enablePrivateEnvironment == null ? Input.empty() : this.enablePrivateEnvironment;
    }

    /**
     * Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
     * 
     */
    @InputImport(name="enablePrivatelyUsedPublicIps")
    private final @Nullable Input<Boolean> enablePrivatelyUsedPublicIps;

    public Input<Boolean> getEnablePrivatelyUsedPublicIps() {
        return this.enablePrivatelyUsedPublicIps == null ? Input.empty() : this.enablePrivatelyUsedPublicIps;
    }

    /**
     * Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
     * 
     */
    @InputImport(name="privateClusterConfig")
    private final @Nullable Input<PrivateClusterConfigArgs> privateClusterConfig;

    public Input<PrivateClusterConfigArgs> getPrivateClusterConfig() {
        return this.privateClusterConfig == null ? Input.empty() : this.privateClusterConfig;
    }

    /**
     * Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @InputImport(name="webServerIpv4CidrBlock")
    private final @Nullable Input<String> webServerIpv4CidrBlock;

    public Input<String> getWebServerIpv4CidrBlock() {
        return this.webServerIpv4CidrBlock == null ? Input.empty() : this.webServerIpv4CidrBlock;
    }

    public PrivateEnvironmentConfigArgs(
        @Nullable Input<String> cloudComposerConnectionSubnetwork,
        @Nullable Input<String> cloudComposerNetworkIpv4CidrBlock,
        @Nullable Input<String> cloudSqlIpv4CidrBlock,
        @Nullable Input<Boolean> enablePrivateEnvironment,
        @Nullable Input<Boolean> enablePrivatelyUsedPublicIps,
        @Nullable Input<PrivateClusterConfigArgs> privateClusterConfig,
        @Nullable Input<String> webServerIpv4CidrBlock) {
        this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
        this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
        this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
        this.enablePrivateEnvironment = enablePrivateEnvironment;
        this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
        this.privateClusterConfig = privateClusterConfig;
        this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
    }

    private PrivateEnvironmentConfigArgs() {
        this.cloudComposerConnectionSubnetwork = Input.empty();
        this.cloudComposerNetworkIpv4CidrBlock = Input.empty();
        this.cloudSqlIpv4CidrBlock = Input.empty();
        this.enablePrivateEnvironment = Input.empty();
        this.enablePrivatelyUsedPublicIps = Input.empty();
        this.privateClusterConfig = Input.empty();
        this.webServerIpv4CidrBlock = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateEnvironmentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cloudComposerConnectionSubnetwork;
        private @Nullable Input<String> cloudComposerNetworkIpv4CidrBlock;
        private @Nullable Input<String> cloudSqlIpv4CidrBlock;
        private @Nullable Input<Boolean> enablePrivateEnvironment;
        private @Nullable Input<Boolean> enablePrivatelyUsedPublicIps;
        private @Nullable Input<PrivateClusterConfigArgs> privateClusterConfig;
        private @Nullable Input<String> webServerIpv4CidrBlock;

        public Builder() {
    	      // Empty
        }

        public Builder(PrivateEnvironmentConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudComposerConnectionSubnetwork = defaults.cloudComposerConnectionSubnetwork;
    	      this.cloudComposerNetworkIpv4CidrBlock = defaults.cloudComposerNetworkIpv4CidrBlock;
    	      this.cloudSqlIpv4CidrBlock = defaults.cloudSqlIpv4CidrBlock;
    	      this.enablePrivateEnvironment = defaults.enablePrivateEnvironment;
    	      this.enablePrivatelyUsedPublicIps = defaults.enablePrivatelyUsedPublicIps;
    	      this.privateClusterConfig = defaults.privateClusterConfig;
    	      this.webServerIpv4CidrBlock = defaults.webServerIpv4CidrBlock;
        }

        public Builder setCloudComposerConnectionSubnetwork(@Nullable Input<String> cloudComposerConnectionSubnetwork) {
            this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
            return this;
        }

        public Builder setCloudComposerConnectionSubnetwork(@Nullable String cloudComposerConnectionSubnetwork) {
            this.cloudComposerConnectionSubnetwork = Input.ofNullable(cloudComposerConnectionSubnetwork);
            return this;
        }

        public Builder setCloudComposerNetworkIpv4CidrBlock(@Nullable Input<String> cloudComposerNetworkIpv4CidrBlock) {
            this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
            return this;
        }

        public Builder setCloudComposerNetworkIpv4CidrBlock(@Nullable String cloudComposerNetworkIpv4CidrBlock) {
            this.cloudComposerNetworkIpv4CidrBlock = Input.ofNullable(cloudComposerNetworkIpv4CidrBlock);
            return this;
        }

        public Builder setCloudSqlIpv4CidrBlock(@Nullable Input<String> cloudSqlIpv4CidrBlock) {
            this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
            return this;
        }

        public Builder setCloudSqlIpv4CidrBlock(@Nullable String cloudSqlIpv4CidrBlock) {
            this.cloudSqlIpv4CidrBlock = Input.ofNullable(cloudSqlIpv4CidrBlock);
            return this;
        }

        public Builder setEnablePrivateEnvironment(@Nullable Input<Boolean> enablePrivateEnvironment) {
            this.enablePrivateEnvironment = enablePrivateEnvironment;
            return this;
        }

        public Builder setEnablePrivateEnvironment(@Nullable Boolean enablePrivateEnvironment) {
            this.enablePrivateEnvironment = Input.ofNullable(enablePrivateEnvironment);
            return this;
        }

        public Builder setEnablePrivatelyUsedPublicIps(@Nullable Input<Boolean> enablePrivatelyUsedPublicIps) {
            this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
            return this;
        }

        public Builder setEnablePrivatelyUsedPublicIps(@Nullable Boolean enablePrivatelyUsedPublicIps) {
            this.enablePrivatelyUsedPublicIps = Input.ofNullable(enablePrivatelyUsedPublicIps);
            return this;
        }

        public Builder setPrivateClusterConfig(@Nullable Input<PrivateClusterConfigArgs> privateClusterConfig) {
            this.privateClusterConfig = privateClusterConfig;
            return this;
        }

        public Builder setPrivateClusterConfig(@Nullable PrivateClusterConfigArgs privateClusterConfig) {
            this.privateClusterConfig = Input.ofNullable(privateClusterConfig);
            return this;
        }

        public Builder setWebServerIpv4CidrBlock(@Nullable Input<String> webServerIpv4CidrBlock) {
            this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
            return this;
        }

        public Builder setWebServerIpv4CidrBlock(@Nullable String webServerIpv4CidrBlock) {
            this.webServerIpv4CidrBlock = Input.ofNullable(webServerIpv4CidrBlock);
            return this;
        }

        public PrivateEnvironmentConfigArgs build() {
            return new PrivateEnvironmentConfigArgs(cloudComposerConnectionSubnetwork, cloudComposerNetworkIpv4CidrBlock, cloudSqlIpv4CidrBlock, enablePrivateEnvironment, enablePrivatelyUsedPublicIps, privateClusterConfig, webServerIpv4CidrBlock);
        }
    }
}
