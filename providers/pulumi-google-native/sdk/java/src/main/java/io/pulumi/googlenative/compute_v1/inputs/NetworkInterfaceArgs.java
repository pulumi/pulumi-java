// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.enums.NetworkInterfaceNicType;
import io.pulumi.googlenative.compute_v1.enums.NetworkInterfaceStackType;
import io.pulumi.googlenative.compute_v1.inputs.AccessConfigArgs;
import io.pulumi.googlenative.compute_v1.inputs.AliasIpRangeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A network interface resource attached to an instance.
 * 
 */
public final class NetworkInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceArgs Empty = new NetworkInterfaceArgs();

    /**
     * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
     * 
     */
    @InputImport(name="accessConfigs")
      private final @Nullable Output<List<AccessConfigArgs>> accessConfigs;

    public Output<List<AccessConfigArgs>> getAccessConfigs() {
        return this.accessConfigs == null ? Output.empty() : this.accessConfigs;
    }

    /**
     * An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
     * 
     */
    @InputImport(name="aliasIpRanges")
      private final @Nullable Output<List<AliasIpRangeArgs>> aliasIpRanges;

    public Output<List<AliasIpRangeArgs>> getAliasIpRanges() {
        return this.aliasIpRanges == null ? Output.empty() : this.aliasIpRanges;
    }

    /**
     * An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    @InputImport(name="ipv6AccessConfigs")
      private final @Nullable Output<List<AccessConfigArgs>> ipv6AccessConfigs;

    public Output<List<AccessConfigArgs>> getIpv6AccessConfigs() {
        return this.ipv6AccessConfigs == null ? Output.empty() : this.ipv6AccessConfigs;
    }

    /**
     * An IPv6 internal network address for this network interface.
     * 
     */
    @InputImport(name="ipv6Address")
      private final @Nullable Output<String> ipv6Address;

    public Output<String> getIpv6Address() {
        return this.ipv6Address == null ? Output.empty() : this.ipv6Address;
    }

    /**
     * URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
     * 
     */
    @InputImport(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Output.empty() : this.network;
    }

    /**
     * An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
     * 
     */
    @InputImport(name="networkIP")
      private final @Nullable Output<String> networkIP;

    public Output<String> getNetworkIP() {
        return this.networkIP == null ? Output.empty() : this.networkIP;
    }

    /**
     * The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
     */
    @InputImport(name="nicType")
      private final @Nullable Output<NetworkInterfaceNicType> nicType;

    public Output<NetworkInterfaceNicType> getNicType() {
        return this.nicType == null ? Output.empty() : this.nicType;
    }

    /**
     * The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users.
     * 
     */
    @InputImport(name="queueCount")
      private final @Nullable Output<Integer> queueCount;

    public Output<Integer> getQueueCount() {
        return this.queueCount == null ? Output.empty() : this.queueCount;
    }

    /**
     * The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
     * 
     */
    @InputImport(name="stackType")
      private final @Nullable Output<NetworkInterfaceStackType> stackType;

    public Output<NetworkInterfaceStackType> getStackType() {
        return this.stackType == null ? Output.empty() : this.stackType;
    }

    /**
     * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
     * 
     */
    @InputImport(name="subnetwork")
      private final @Nullable Output<String> subnetwork;

    public Output<String> getSubnetwork() {
        return this.subnetwork == null ? Output.empty() : this.subnetwork;
    }

    public NetworkInterfaceArgs(
        @Nullable Output<List<AccessConfigArgs>> accessConfigs,
        @Nullable Output<List<AliasIpRangeArgs>> aliasIpRanges,
        @Nullable Output<List<AccessConfigArgs>> ipv6AccessConfigs,
        @Nullable Output<String> ipv6Address,
        @Nullable Output<String> network,
        @Nullable Output<String> networkIP,
        @Nullable Output<NetworkInterfaceNicType> nicType,
        @Nullable Output<Integer> queueCount,
        @Nullable Output<NetworkInterfaceStackType> stackType,
        @Nullable Output<String> subnetwork) {
        this.accessConfigs = accessConfigs;
        this.aliasIpRanges = aliasIpRanges;
        this.ipv6AccessConfigs = ipv6AccessConfigs;
        this.ipv6Address = ipv6Address;
        this.network = network;
        this.networkIP = networkIP;
        this.nicType = nicType;
        this.queueCount = queueCount;
        this.stackType = stackType;
        this.subnetwork = subnetwork;
    }

    private NetworkInterfaceArgs() {
        this.accessConfigs = Output.empty();
        this.aliasIpRanges = Output.empty();
        this.ipv6AccessConfigs = Output.empty();
        this.ipv6Address = Output.empty();
        this.network = Output.empty();
        this.networkIP = Output.empty();
        this.nicType = Output.empty();
        this.queueCount = Output.empty();
        this.stackType = Output.empty();
        this.subnetwork = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AccessConfigArgs>> accessConfigs;
        private @Nullable Output<List<AliasIpRangeArgs>> aliasIpRanges;
        private @Nullable Output<List<AccessConfigArgs>> ipv6AccessConfigs;
        private @Nullable Output<String> ipv6Address;
        private @Nullable Output<String> network;
        private @Nullable Output<String> networkIP;
        private @Nullable Output<NetworkInterfaceNicType> nicType;
        private @Nullable Output<Integer> queueCount;
        private @Nullable Output<NetworkInterfaceStackType> stackType;
        private @Nullable Output<String> subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.network = defaults.network;
    	      this.networkIP = defaults.networkIP;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder accessConfigs(@Nullable Output<List<AccessConfigArgs>> accessConfigs) {
            this.accessConfigs = accessConfigs;
            return this;
        }

        public Builder accessConfigs(@Nullable List<AccessConfigArgs> accessConfigs) {
            this.accessConfigs = Output.ofNullable(accessConfigs);
            return this;
        }

        public Builder aliasIpRanges(@Nullable Output<List<AliasIpRangeArgs>> aliasIpRanges) {
            this.aliasIpRanges = aliasIpRanges;
            return this;
        }

        public Builder aliasIpRanges(@Nullable List<AliasIpRangeArgs> aliasIpRanges) {
            this.aliasIpRanges = Output.ofNullable(aliasIpRanges);
            return this;
        }

        public Builder ipv6AccessConfigs(@Nullable Output<List<AccessConfigArgs>> ipv6AccessConfigs) {
            this.ipv6AccessConfigs = ipv6AccessConfigs;
            return this;
        }

        public Builder ipv6AccessConfigs(@Nullable List<AccessConfigArgs> ipv6AccessConfigs) {
            this.ipv6AccessConfigs = Output.ofNullable(ipv6AccessConfigs);
            return this;
        }

        public Builder ipv6Address(@Nullable Output<String> ipv6Address) {
            this.ipv6Address = ipv6Address;
            return this;
        }

        public Builder ipv6Address(@Nullable String ipv6Address) {
            this.ipv6Address = Output.ofNullable(ipv6Address);
            return this;
        }

        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }

        public Builder network(@Nullable String network) {
            this.network = Output.ofNullable(network);
            return this;
        }

        public Builder networkIP(@Nullable Output<String> networkIP) {
            this.networkIP = networkIP;
            return this;
        }

        public Builder networkIP(@Nullable String networkIP) {
            this.networkIP = Output.ofNullable(networkIP);
            return this;
        }

        public Builder nicType(@Nullable Output<NetworkInterfaceNicType> nicType) {
            this.nicType = nicType;
            return this;
        }

        public Builder nicType(@Nullable NetworkInterfaceNicType nicType) {
            this.nicType = Output.ofNullable(nicType);
            return this;
        }

        public Builder queueCount(@Nullable Output<Integer> queueCount) {
            this.queueCount = queueCount;
            return this;
        }

        public Builder queueCount(@Nullable Integer queueCount) {
            this.queueCount = Output.ofNullable(queueCount);
            return this;
        }

        public Builder stackType(@Nullable Output<NetworkInterfaceStackType> stackType) {
            this.stackType = stackType;
            return this;
        }

        public Builder stackType(@Nullable NetworkInterfaceStackType stackType) {
            this.stackType = Output.ofNullable(stackType);
            return this;
        }

        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder subnetwork(@Nullable String subnetwork) {
            this.subnetwork = Output.ofNullable(subnetwork);
            return this;
        }
        public NetworkInterfaceArgs build() {
            return new NetworkInterfaceArgs(accessConfigs, aliasIpRanges, ipv6AccessConfigs, ipv6Address, network, networkIP, nicType, queueCount, stackType, subnetwork);
        }
    }
}
