// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storage_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBucketObjectArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectArgs Empty = new GetBucketObjectArgs();

    @InputImport(name="bucket", required=true)
    private final String bucket;

    public String getBucket() {
        return this.bucket;
    }

    @InputImport(name="generation")
    private final @Nullable String generation;

    public Optional<String> getGeneration() {
        return this.generation == null ? Optional.empty() : Optional.ofNullable(this.generation);
    }

    @InputImport(name="ifGenerationMatch")
    private final @Nullable String ifGenerationMatch;

    public Optional<String> getIfGenerationMatch() {
        return this.ifGenerationMatch == null ? Optional.empty() : Optional.ofNullable(this.ifGenerationMatch);
    }

    @InputImport(name="ifGenerationNotMatch")
    private final @Nullable String ifGenerationNotMatch;

    public Optional<String> getIfGenerationNotMatch() {
        return this.ifGenerationNotMatch == null ? Optional.empty() : Optional.ofNullable(this.ifGenerationNotMatch);
    }

    @InputImport(name="ifMetagenerationMatch")
    private final @Nullable String ifMetagenerationMatch;

    public Optional<String> getIfMetagenerationMatch() {
        return this.ifMetagenerationMatch == null ? Optional.empty() : Optional.ofNullable(this.ifMetagenerationMatch);
    }

    @InputImport(name="ifMetagenerationNotMatch")
    private final @Nullable String ifMetagenerationNotMatch;

    public Optional<String> getIfMetagenerationNotMatch() {
        return this.ifMetagenerationNotMatch == null ? Optional.empty() : Optional.ofNullable(this.ifMetagenerationNotMatch);
    }

    @InputImport(name="object", required=true)
    private final String object;

    public String getObject() {
        return this.object;
    }

    @InputImport(name="projection")
    private final @Nullable String projection;

    public Optional<String> getProjection() {
        return this.projection == null ? Optional.empty() : Optional.ofNullable(this.projection);
    }

    @InputImport(name="provisionalUserProject")
    private final @Nullable String provisionalUserProject;

    public Optional<String> getProvisionalUserProject() {
        return this.provisionalUserProject == null ? Optional.empty() : Optional.ofNullable(this.provisionalUserProject);
    }

    @InputImport(name="userProject")
    private final @Nullable String userProject;

    public Optional<String> getUserProject() {
        return this.userProject == null ? Optional.empty() : Optional.ofNullable(this.userProject);
    }

    public GetBucketObjectArgs(
        String bucket,
        @Nullable String generation,
        @Nullable String ifGenerationMatch,
        @Nullable String ifGenerationNotMatch,
        @Nullable String ifMetagenerationMatch,
        @Nullable String ifMetagenerationNotMatch,
        String object,
        @Nullable String projection,
        @Nullable String provisionalUserProject,
        @Nullable String userProject) {
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.generation = generation;
        this.ifGenerationMatch = ifGenerationMatch;
        this.ifGenerationNotMatch = ifGenerationNotMatch;
        this.ifMetagenerationMatch = ifMetagenerationMatch;
        this.ifMetagenerationNotMatch = ifMetagenerationNotMatch;
        this.object = Objects.requireNonNull(object, "expected parameter 'object' to be non-null");
        this.projection = projection;
        this.provisionalUserProject = provisionalUserProject;
        this.userProject = userProject;
    }

    private GetBucketObjectArgs() {
        this.bucket = null;
        this.generation = null;
        this.ifGenerationMatch = null;
        this.ifGenerationNotMatch = null;
        this.ifMetagenerationMatch = null;
        this.ifMetagenerationNotMatch = null;
        this.object = null;
        this.projection = null;
        this.provisionalUserProject = null;
        this.userProject = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bucket;
        private @Nullable String generation;
        private @Nullable String ifGenerationMatch;
        private @Nullable String ifGenerationNotMatch;
        private @Nullable String ifMetagenerationMatch;
        private @Nullable String ifMetagenerationNotMatch;
        private String object;
        private @Nullable String projection;
        private @Nullable String provisionalUserProject;
        private @Nullable String userProject;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBucketObjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.generation = defaults.generation;
    	      this.ifGenerationMatch = defaults.ifGenerationMatch;
    	      this.ifGenerationNotMatch = defaults.ifGenerationNotMatch;
    	      this.ifMetagenerationMatch = defaults.ifMetagenerationMatch;
    	      this.ifMetagenerationNotMatch = defaults.ifMetagenerationNotMatch;
    	      this.object = defaults.object;
    	      this.projection = defaults.projection;
    	      this.provisionalUserProject = defaults.provisionalUserProject;
    	      this.userProject = defaults.userProject;
        }

        public Builder setBucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }

        public Builder setGeneration(@Nullable String generation) {
            this.generation = generation;
            return this;
        }

        public Builder setIfGenerationMatch(@Nullable String ifGenerationMatch) {
            this.ifGenerationMatch = ifGenerationMatch;
            return this;
        }

        public Builder setIfGenerationNotMatch(@Nullable String ifGenerationNotMatch) {
            this.ifGenerationNotMatch = ifGenerationNotMatch;
            return this;
        }

        public Builder setIfMetagenerationMatch(@Nullable String ifMetagenerationMatch) {
            this.ifMetagenerationMatch = ifMetagenerationMatch;
            return this;
        }

        public Builder setIfMetagenerationNotMatch(@Nullable String ifMetagenerationNotMatch) {
            this.ifMetagenerationNotMatch = ifMetagenerationNotMatch;
            return this;
        }

        public Builder setObject(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }

        public Builder setProjection(@Nullable String projection) {
            this.projection = projection;
            return this;
        }

        public Builder setProvisionalUserProject(@Nullable String provisionalUserProject) {
            this.provisionalUserProject = provisionalUserProject;
            return this;
        }

        public Builder setUserProject(@Nullable String userProject) {
            this.userProject = userProject;
            return this;
        }

        public GetBucketObjectArgs build() {
            return new GetBucketObjectArgs(bucket, generation, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, object, projection, provisionalUserProject, userProject);
        }
    }
}
