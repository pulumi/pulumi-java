// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.monitoring_v3.inputs.AvailabilityCriteriaArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.LatencyCriteriaArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
 * 
 */
public final class BasicSliArgs extends io.pulumi.resources.ResourceArgs {

    public static final BasicSliArgs Empty = new BasicSliArgs();

    /**
     * Good service is defined to be the count of requests made to this service that return successfully.
     * 
     */
    @Import(name="availability")
      private final @Nullable Output<AvailabilityCriteriaArgs> availability;

    public Output<AvailabilityCriteriaArgs> getAvailability() {
        return this.availability == null ? Codegen.empty() : this.availability;
    }

    /**
     * Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
     * 
     */
    @Import(name="latency")
      private final @Nullable Output<LatencyCriteriaArgs> latency;

    public Output<LatencyCriteriaArgs> getLatency() {
        return this.latency == null ? Codegen.empty() : this.latency;
    }

    /**
     * OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<List<String>> location;

    public Output<List<String>> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.
     * 
     */
    @Import(name="method")
      private final @Nullable Output<List<String>> method;

    public Output<List<String>> getMethod() {
        return this.method == null ? Codegen.empty() : this.method;
    }

    /**
     * OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<List<String>> version;

    public Output<List<String>> getVersion() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public BasicSliArgs(
        @Nullable Output<AvailabilityCriteriaArgs> availability,
        @Nullable Output<LatencyCriteriaArgs> latency,
        @Nullable Output<List<String>> location,
        @Nullable Output<List<String>> method,
        @Nullable Output<List<String>> version) {
        this.availability = availability;
        this.latency = latency;
        this.location = location;
        this.method = method;
        this.version = version;
    }

    private BasicSliArgs() {
        this.availability = Codegen.empty();
        this.latency = Codegen.empty();
        this.location = Codegen.empty();
        this.method = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BasicSliArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AvailabilityCriteriaArgs> availability;
        private @Nullable Output<LatencyCriteriaArgs> latency;
        private @Nullable Output<List<String>> location;
        private @Nullable Output<List<String>> method;
        private @Nullable Output<List<String>> version;

        public Builder() {
    	      // Empty
        }

        public Builder(BasicSliArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.latency = defaults.latency;
    	      this.location = defaults.location;
    	      this.method = defaults.method;
    	      this.version = defaults.version;
        }

        public Builder availability(@Nullable Output<AvailabilityCriteriaArgs> availability) {
            this.availability = availability;
            return this;
        }
        public Builder availability(@Nullable AvailabilityCriteriaArgs availability) {
            this.availability = Codegen.ofNullable(availability);
            return this;
        }
        public Builder latency(@Nullable Output<LatencyCriteriaArgs> latency) {
            this.latency = latency;
            return this;
        }
        public Builder latency(@Nullable LatencyCriteriaArgs latency) {
            this.latency = Codegen.ofNullable(latency);
            return this;
        }
        public Builder location(@Nullable Output<List<String>> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable List<String> location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder location(String... location) {
            return location(List.of(location));
        }
        public Builder method(@Nullable Output<List<String>> method) {
            this.method = method;
            return this;
        }
        public Builder method(@Nullable List<String> method) {
            this.method = Codegen.ofNullable(method);
            return this;
        }
        public Builder method(String... method) {
            return method(List.of(method));
        }
        public Builder version(@Nullable Output<List<String>> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable List<String> version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }
        public Builder version(String... version) {
            return version(List.of(version));
        }        public BasicSliArgs build() {
            return new BasicSliArgs(availability, latency, location, method, version);
        }
    }
}
