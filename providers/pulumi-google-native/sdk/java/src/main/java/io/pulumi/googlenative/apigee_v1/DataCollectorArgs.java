// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.apigee_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.apigee_v1.enums.DataCollectorType;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataCollectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataCollectorArgs Empty = new DataCollectorArgs();

    @Import(name="dataCollectorId")
      private final @Nullable Output<String> dataCollectorId;

    public Output<String> getDataCollectorId() {
        return this.dataCollectorId == null ? Output.empty() : this.dataCollectorId;
    }

    /**
     * A description of the data collector.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * ID of the data collector. Must begin with `dc_`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="organizationId", required=true)
      private final Output<String> organizationId;

    public Output<String> getOrganizationId() {
        return this.organizationId;
    }

    /**
     * Immutable. The type of data this data collector will collect.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<DataCollectorType> type;

    public Output<DataCollectorType> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public DataCollectorArgs(
        @Nullable Output<String> dataCollectorId,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        Output<String> organizationId,
        @Nullable Output<DataCollectorType> type) {
        this.dataCollectorId = dataCollectorId;
        this.description = description;
        this.name = name;
        this.organizationId = Objects.requireNonNull(organizationId, "expected parameter 'organizationId' to be non-null");
        this.type = type;
    }

    private DataCollectorArgs() {
        this.dataCollectorId = Output.empty();
        this.description = Output.empty();
        this.name = Output.empty();
        this.organizationId = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCollectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dataCollectorId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private Output<String> organizationId;
        private @Nullable Output<DataCollectorType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DataCollectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataCollectorId = defaults.dataCollectorId;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.organizationId = defaults.organizationId;
    	      this.type = defaults.type;
        }

        public Builder dataCollectorId(@Nullable Output<String> dataCollectorId) {
            this.dataCollectorId = dataCollectorId;
            return this;
        }
        public Builder dataCollectorId(@Nullable String dataCollectorId) {
            this.dataCollectorId = Output.ofNullable(dataCollectorId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder organizationId(Output<String> organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        public Builder organizationId(String organizationId) {
            this.organizationId = Output.of(Objects.requireNonNull(organizationId));
            return this;
        }
        public Builder type(@Nullable Output<DataCollectorType> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable DataCollectorType type) {
            this.type = Output.ofNullable(type);
            return this;
        }        public DataCollectorArgs build() {
            return new DataCollectorArgs(dataCollectorId, description, name, organizationId, type);
        }
    }
}
