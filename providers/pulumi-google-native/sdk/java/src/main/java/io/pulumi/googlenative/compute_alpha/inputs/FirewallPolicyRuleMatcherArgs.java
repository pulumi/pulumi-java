// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.compute_alpha.inputs.FirewallPolicyRuleMatcherLayer4ConfigArgs;
import io.pulumi.googlenative.compute_alpha.inputs.FirewallPolicyRuleSecureTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
 * 
 */
public final class FirewallPolicyRuleMatcherArgs extends io.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyRuleMatcherArgs Empty = new FirewallPolicyRuleMatcherArgs();

    /**
     * Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
     * 
     */
    @Import(name="destAddressGroups")
      private final @Nullable Output<List<String>> destAddressGroups;

    public Output<List<String>> destAddressGroups() {
        return this.destAddressGroups == null ? Codegen.empty() : this.destAddressGroups;
    }

    /**
     * Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 1000.
     * 
     */
    @Import(name="destFqdns")
      private final @Nullable Output<List<String>> destFqdns;

    public Output<List<String>> destFqdns() {
        return this.destFqdns == null ? Codegen.empty() : this.destFqdns;
    }

    /**
     * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
     * 
     */
    @Import(name="destIpRanges")
      private final @Nullable Output<List<String>> destIpRanges;

    public Output<List<String>> destIpRanges() {
        return this.destIpRanges == null ? Codegen.empty() : this.destIpRanges;
    }

    /**
     * Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex."US" Maximum number of dest region codes allowed is 5000.
     * 
     */
    @Import(name="destRegionCodes")
      private final @Nullable Output<List<String>> destRegionCodes;

    public Output<List<String>> destRegionCodes() {
        return this.destRegionCodes == null ? Codegen.empty() : this.destRegionCodes;
    }

    /**
     * Pairs of IP protocols and ports that the rule should match.
     * 
     */
    @Import(name="layer4Configs")
      private final @Nullable Output<List<FirewallPolicyRuleMatcherLayer4ConfigArgs>> layer4Configs;

    public Output<List<FirewallPolicyRuleMatcherLayer4ConfigArgs>> layer4Configs() {
        return this.layer4Configs == null ? Codegen.empty() : this.layer4Configs;
    }

    /**
     * Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
     * 
     */
    @Import(name="srcAddressGroups")
      private final @Nullable Output<List<String>> srcAddressGroups;

    public Output<List<String>> srcAddressGroups() {
        return this.srcAddressGroups == null ? Codegen.empty() : this.srcAddressGroups;
    }

    /**
     * Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 1000.
     * 
     */
    @Import(name="srcFqdns")
      private final @Nullable Output<List<String>> srcFqdns;

    public Output<List<String>> srcFqdns() {
        return this.srcFqdns == null ? Codegen.empty() : this.srcFqdns;
    }

    /**
     * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
     * 
     */
    @Import(name="srcIpRanges")
      private final @Nullable Output<List<String>> srcIpRanges;

    public Output<List<String>> srcIpRanges() {
        return this.srcIpRanges == null ? Codegen.empty() : this.srcIpRanges;
    }

    /**
     * Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex."US" Maximum number of source region codes allowed is 5000.
     * 
     */
    @Import(name="srcRegionCodes")
      private final @Nullable Output<List<String>> srcRegionCodes;

    public Output<List<String>> srcRegionCodes() {
        return this.srcRegionCodes == null ? Codegen.empty() : this.srcRegionCodes;
    }

    /**
     * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
     * 
     */
    @Import(name="srcSecureTags")
      private final @Nullable Output<List<FirewallPolicyRuleSecureTagArgs>> srcSecureTags;

    public Output<List<FirewallPolicyRuleSecureTagArgs>> srcSecureTags() {
        return this.srcSecureTags == null ? Codegen.empty() : this.srcSecureTags;
    }

    public FirewallPolicyRuleMatcherArgs(
        @Nullable Output<List<String>> destAddressGroups,
        @Nullable Output<List<String>> destFqdns,
        @Nullable Output<List<String>> destIpRanges,
        @Nullable Output<List<String>> destRegionCodes,
        @Nullable Output<List<FirewallPolicyRuleMatcherLayer4ConfigArgs>> layer4Configs,
        @Nullable Output<List<String>> srcAddressGroups,
        @Nullable Output<List<String>> srcFqdns,
        @Nullable Output<List<String>> srcIpRanges,
        @Nullable Output<List<String>> srcRegionCodes,
        @Nullable Output<List<FirewallPolicyRuleSecureTagArgs>> srcSecureTags) {
        this.destAddressGroups = destAddressGroups;
        this.destFqdns = destFqdns;
        this.destIpRanges = destIpRanges;
        this.destRegionCodes = destRegionCodes;
        this.layer4Configs = layer4Configs;
        this.srcAddressGroups = srcAddressGroups;
        this.srcFqdns = srcFqdns;
        this.srcIpRanges = srcIpRanges;
        this.srcRegionCodes = srcRegionCodes;
        this.srcSecureTags = srcSecureTags;
    }

    private FirewallPolicyRuleMatcherArgs() {
        this.destAddressGroups = Codegen.empty();
        this.destFqdns = Codegen.empty();
        this.destIpRanges = Codegen.empty();
        this.destRegionCodes = Codegen.empty();
        this.layer4Configs = Codegen.empty();
        this.srcAddressGroups = Codegen.empty();
        this.srcFqdns = Codegen.empty();
        this.srcIpRanges = Codegen.empty();
        this.srcRegionCodes = Codegen.empty();
        this.srcSecureTags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallPolicyRuleMatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> destAddressGroups;
        private @Nullable Output<List<String>> destFqdns;
        private @Nullable Output<List<String>> destIpRanges;
        private @Nullable Output<List<String>> destRegionCodes;
        private @Nullable Output<List<FirewallPolicyRuleMatcherLayer4ConfigArgs>> layer4Configs;
        private @Nullable Output<List<String>> srcAddressGroups;
        private @Nullable Output<List<String>> srcFqdns;
        private @Nullable Output<List<String>> srcIpRanges;
        private @Nullable Output<List<String>> srcRegionCodes;
        private @Nullable Output<List<FirewallPolicyRuleSecureTagArgs>> srcSecureTags;

        public Builder() {
    	      // Empty
        }

        public Builder(FirewallPolicyRuleMatcherArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destAddressGroups = defaults.destAddressGroups;
    	      this.destFqdns = defaults.destFqdns;
    	      this.destIpRanges = defaults.destIpRanges;
    	      this.destRegionCodes = defaults.destRegionCodes;
    	      this.layer4Configs = defaults.layer4Configs;
    	      this.srcAddressGroups = defaults.srcAddressGroups;
    	      this.srcFqdns = defaults.srcFqdns;
    	      this.srcIpRanges = defaults.srcIpRanges;
    	      this.srcRegionCodes = defaults.srcRegionCodes;
    	      this.srcSecureTags = defaults.srcSecureTags;
        }

        public Builder destAddressGroups(@Nullable Output<List<String>> destAddressGroups) {
            this.destAddressGroups = destAddressGroups;
            return this;
        }
        public Builder destAddressGroups(@Nullable List<String> destAddressGroups) {
            this.destAddressGroups = Codegen.ofNullable(destAddressGroups);
            return this;
        }
        public Builder destAddressGroups(String... destAddressGroups) {
            return destAddressGroups(List.of(destAddressGroups));
        }
        public Builder destFqdns(@Nullable Output<List<String>> destFqdns) {
            this.destFqdns = destFqdns;
            return this;
        }
        public Builder destFqdns(@Nullable List<String> destFqdns) {
            this.destFqdns = Codegen.ofNullable(destFqdns);
            return this;
        }
        public Builder destFqdns(String... destFqdns) {
            return destFqdns(List.of(destFqdns));
        }
        public Builder destIpRanges(@Nullable Output<List<String>> destIpRanges) {
            this.destIpRanges = destIpRanges;
            return this;
        }
        public Builder destIpRanges(@Nullable List<String> destIpRanges) {
            this.destIpRanges = Codegen.ofNullable(destIpRanges);
            return this;
        }
        public Builder destIpRanges(String... destIpRanges) {
            return destIpRanges(List.of(destIpRanges));
        }
        public Builder destRegionCodes(@Nullable Output<List<String>> destRegionCodes) {
            this.destRegionCodes = destRegionCodes;
            return this;
        }
        public Builder destRegionCodes(@Nullable List<String> destRegionCodes) {
            this.destRegionCodes = Codegen.ofNullable(destRegionCodes);
            return this;
        }
        public Builder destRegionCodes(String... destRegionCodes) {
            return destRegionCodes(List.of(destRegionCodes));
        }
        public Builder layer4Configs(@Nullable Output<List<FirewallPolicyRuleMatcherLayer4ConfigArgs>> layer4Configs) {
            this.layer4Configs = layer4Configs;
            return this;
        }
        public Builder layer4Configs(@Nullable List<FirewallPolicyRuleMatcherLayer4ConfigArgs> layer4Configs) {
            this.layer4Configs = Codegen.ofNullable(layer4Configs);
            return this;
        }
        public Builder layer4Configs(FirewallPolicyRuleMatcherLayer4ConfigArgs... layer4Configs) {
            return layer4Configs(List.of(layer4Configs));
        }
        public Builder srcAddressGroups(@Nullable Output<List<String>> srcAddressGroups) {
            this.srcAddressGroups = srcAddressGroups;
            return this;
        }
        public Builder srcAddressGroups(@Nullable List<String> srcAddressGroups) {
            this.srcAddressGroups = Codegen.ofNullable(srcAddressGroups);
            return this;
        }
        public Builder srcAddressGroups(String... srcAddressGroups) {
            return srcAddressGroups(List.of(srcAddressGroups));
        }
        public Builder srcFqdns(@Nullable Output<List<String>> srcFqdns) {
            this.srcFqdns = srcFqdns;
            return this;
        }
        public Builder srcFqdns(@Nullable List<String> srcFqdns) {
            this.srcFqdns = Codegen.ofNullable(srcFqdns);
            return this;
        }
        public Builder srcFqdns(String... srcFqdns) {
            return srcFqdns(List.of(srcFqdns));
        }
        public Builder srcIpRanges(@Nullable Output<List<String>> srcIpRanges) {
            this.srcIpRanges = srcIpRanges;
            return this;
        }
        public Builder srcIpRanges(@Nullable List<String> srcIpRanges) {
            this.srcIpRanges = Codegen.ofNullable(srcIpRanges);
            return this;
        }
        public Builder srcIpRanges(String... srcIpRanges) {
            return srcIpRanges(List.of(srcIpRanges));
        }
        public Builder srcRegionCodes(@Nullable Output<List<String>> srcRegionCodes) {
            this.srcRegionCodes = srcRegionCodes;
            return this;
        }
        public Builder srcRegionCodes(@Nullable List<String> srcRegionCodes) {
            this.srcRegionCodes = Codegen.ofNullable(srcRegionCodes);
            return this;
        }
        public Builder srcRegionCodes(String... srcRegionCodes) {
            return srcRegionCodes(List.of(srcRegionCodes));
        }
        public Builder srcSecureTags(@Nullable Output<List<FirewallPolicyRuleSecureTagArgs>> srcSecureTags) {
            this.srcSecureTags = srcSecureTags;
            return this;
        }
        public Builder srcSecureTags(@Nullable List<FirewallPolicyRuleSecureTagArgs> srcSecureTags) {
            this.srcSecureTags = Codegen.ofNullable(srcSecureTags);
            return this;
        }
        public Builder srcSecureTags(FirewallPolicyRuleSecureTagArgs... srcSecureTags) {
            return srcSecureTags(List.of(srcSecureTags));
        }        public FirewallPolicyRuleMatcherArgs build() {
            return new FirewallPolicyRuleMatcherArgs(destAddressGroups, destFqdns, destIpRanges, destRegionCodes, layer4Configs, srcAddressGroups, srcFqdns, srcIpRanges, srcRegionCodes, srcSecureTags);
        }
    }
}
