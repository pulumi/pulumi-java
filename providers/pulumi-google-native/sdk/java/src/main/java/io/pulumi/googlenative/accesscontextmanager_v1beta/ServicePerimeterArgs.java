// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1beta;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.accesscontextmanager_v1beta.enums.ServicePerimeterPerimeterType;
import io.pulumi.googlenative.accesscontextmanager_v1beta.inputs.ServicePerimeterConfigArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePerimeterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServicePerimeterArgs Empty = new ServicePerimeterArgs();

    @Import(name="accessPolicyId", required=true)
      private final Output<String> accessPolicyId;

    public Output<String> accessPolicyId() {
        return this.accessPolicyId;
    }

    /**
     * Description of the `ServicePerimeter` and its use. Does not affect behavior.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Resource name for the ServicePerimeter. The `short_name` component must begin with a letter and only include alphanumeric and '_'. Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, restricted/unrestricted service lists as well as access lists must be empty.
     * 
     */
    @Import(name="perimeterType")
      private final @Nullable Output<ServicePerimeterPerimeterType> perimeterType;

    public Output<ServicePerimeterPerimeterType> perimeterType() {
        return this.perimeterType == null ? Codegen.empty() : this.perimeterType;
    }

    /**
     * Current ServicePerimeter configuration. Specifies sets of resources, restricted/unrestricted services and access levels that determine perimeter content and boundaries.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<ServicePerimeterConfigArgs> status;

    public Output<ServicePerimeterConfigArgs> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * Human readable title. Must be unique within the Policy.
     * 
     */
    @Import(name="title")
      private final @Nullable Output<String> title;

    public Output<String> title() {
        return this.title == null ? Codegen.empty() : this.title;
    }

    public ServicePerimeterArgs(
        Output<String> accessPolicyId,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<ServicePerimeterPerimeterType> perimeterType,
        @Nullable Output<ServicePerimeterConfigArgs> status,
        @Nullable Output<String> title) {
        this.accessPolicyId = Objects.requireNonNull(accessPolicyId, "expected parameter 'accessPolicyId' to be non-null");
        this.description = description;
        this.name = name;
        this.perimeterType = perimeterType;
        this.status = status;
        this.title = title;
    }

    private ServicePerimeterArgs() {
        this.accessPolicyId = Codegen.empty();
        this.description = Codegen.empty();
        this.name = Codegen.empty();
        this.perimeterType = Codegen.empty();
        this.status = Codegen.empty();
        this.title = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePerimeterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accessPolicyId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<ServicePerimeterPerimeterType> perimeterType;
        private @Nullable Output<ServicePerimeterConfigArgs> status;
        private @Nullable Output<String> title;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePerimeterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicyId = defaults.accessPolicyId;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.perimeterType = defaults.perimeterType;
    	      this.status = defaults.status;
    	      this.title = defaults.title;
        }

        public Builder accessPolicyId(Output<String> accessPolicyId) {
            this.accessPolicyId = Objects.requireNonNull(accessPolicyId);
            return this;
        }
        public Builder accessPolicyId(String accessPolicyId) {
            this.accessPolicyId = Output.of(Objects.requireNonNull(accessPolicyId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder perimeterType(@Nullable Output<ServicePerimeterPerimeterType> perimeterType) {
            this.perimeterType = perimeterType;
            return this;
        }
        public Builder perimeterType(@Nullable ServicePerimeterPerimeterType perimeterType) {
            this.perimeterType = Codegen.ofNullable(perimeterType);
            return this;
        }
        public Builder status(@Nullable Output<ServicePerimeterConfigArgs> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable ServicePerimeterConfigArgs status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder title(@Nullable Output<String> title) {
            this.title = title;
            return this;
        }
        public Builder title(@Nullable String title) {
            this.title = Codegen.ofNullable(title);
            return this;
        }        public ServicePerimeterArgs build() {
            return new ServicePerimeterArgs(accessPolicyId, description, name, perimeterType, status, title);
        }
    }
}
