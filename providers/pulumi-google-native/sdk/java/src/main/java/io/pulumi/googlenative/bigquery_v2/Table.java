// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import io.pulumi.googlenative.Utilities;
import io.pulumi.googlenative.bigquery_v2.TableArgs;
import io.pulumi.googlenative.bigquery_v2.outputs.ClusteringResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.EncryptionConfigurationResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ExternalDataConfigurationResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.MaterializedViewDefinitionResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ModelDefinitionResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.RangePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.SnapshotDefinitionResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.StreamingbufferResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TableReferenceResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TableSchemaResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TimePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ViewDefinitionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

@ResourceType(type="google-native:bigquery/v2:Table")
public class Table extends io.pulumi.resources.CustomResource {
    @OutputExport(name="clustering", type=ClusteringResponse.class, parameters={})
    private Output<ClusteringResponse> clustering;

    public Output<ClusteringResponse> getClustering() {
        return this.clustering;
    }
    @OutputExport(name="creationTime", type=String.class, parameters={})
    private Output<String> creationTime;

    public Output<String> getCreationTime() {
        return this.creationTime;
    }
    @OutputExport(name="defaultCollation", type=String.class, parameters={})
    private Output<String> defaultCollation;

    public Output<String> getDefaultCollation() {
        return this.defaultCollation;
    }
    @OutputExport(name="description", type=String.class, parameters={})
    private Output<String> description;

    public Output<String> getDescription() {
        return this.description;
    }
    @OutputExport(name="encryptionConfiguration", type=EncryptionConfigurationResponse.class, parameters={})
    private Output<EncryptionConfigurationResponse> encryptionConfiguration;

    public Output<EncryptionConfigurationResponse> getEncryptionConfiguration() {
        return this.encryptionConfiguration;
    }
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    public Output<String> getEtag() {
        return this.etag;
    }
    @OutputExport(name="expirationTime", type=String.class, parameters={})
    private Output<String> expirationTime;

    public Output<String> getExpirationTime() {
        return this.expirationTime;
    }
    @OutputExport(name="externalDataConfiguration", type=ExternalDataConfigurationResponse.class, parameters={})
    private Output<ExternalDataConfigurationResponse> externalDataConfiguration;

    public Output<ExternalDataConfigurationResponse> getExternalDataConfiguration() {
        return this.externalDataConfiguration;
    }
    @OutputExport(name="friendlyName", type=String.class, parameters={})
    private Output<String> friendlyName;

    public Output<String> getFriendlyName() {
        return this.friendlyName;
    }
    @OutputExport(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    public Output<String> getKind() {
        return this.kind;
    }
    @OutputExport(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels;
    }
    @OutputExport(name="lastModifiedTime", type=String.class, parameters={})
    private Output<String> lastModifiedTime;

    public Output<String> getLastModifiedTime() {
        return this.lastModifiedTime;
    }
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> getLocation() {
        return this.location;
    }
    @OutputExport(name="materializedView", type=MaterializedViewDefinitionResponse.class, parameters={})
    private Output<MaterializedViewDefinitionResponse> materializedView;

    public Output<MaterializedViewDefinitionResponse> getMaterializedView() {
        return this.materializedView;
    }
    @OutputExport(name="model", type=ModelDefinitionResponse.class, parameters={})
    private Output<ModelDefinitionResponse> model;

    public Output<ModelDefinitionResponse> getModel() {
        return this.model;
    }
    @OutputExport(name="numBytes", type=String.class, parameters={})
    private Output<String> numBytes;

    public Output<String> getNumBytes() {
        return this.numBytes;
    }
    @OutputExport(name="numLongTermBytes", type=String.class, parameters={})
    private Output<String> numLongTermBytes;

    public Output<String> getNumLongTermBytes() {
        return this.numLongTermBytes;
    }
    @OutputExport(name="numPhysicalBytes", type=String.class, parameters={})
    private Output<String> numPhysicalBytes;

    public Output<String> getNumPhysicalBytes() {
        return this.numPhysicalBytes;
    }
    @OutputExport(name="numRows", type=String.class, parameters={})
    private Output<String> numRows;

    public Output<String> getNumRows() {
        return this.numRows;
    }
    @OutputExport(name="rangePartitioning", type=RangePartitioningResponse.class, parameters={})
    private Output<RangePartitioningResponse> rangePartitioning;

    public Output<RangePartitioningResponse> getRangePartitioning() {
        return this.rangePartitioning;
    }
    @OutputExport(name="requirePartitionFilter", type=Boolean.class, parameters={})
    private Output<Boolean> requirePartitionFilter;

    public Output<Boolean> getRequirePartitionFilter() {
        return this.requirePartitionFilter;
    }
    @OutputExport(name="schema", type=TableSchemaResponse.class, parameters={})
    private Output<TableSchemaResponse> schema;

    public Output<TableSchemaResponse> getSchema() {
        return this.schema;
    }
    @OutputExport(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    @OutputExport(name="snapshotDefinition", type=SnapshotDefinitionResponse.class, parameters={})
    private Output<SnapshotDefinitionResponse> snapshotDefinition;

    public Output<SnapshotDefinitionResponse> getSnapshotDefinition() {
        return this.snapshotDefinition;
    }
    @OutputExport(name="streamingBuffer", type=StreamingbufferResponse.class, parameters={})
    private Output<StreamingbufferResponse> streamingBuffer;

    public Output<StreamingbufferResponse> getStreamingBuffer() {
        return this.streamingBuffer;
    }
    @OutputExport(name="tableReference", type=TableReferenceResponse.class, parameters={})
    private Output<TableReferenceResponse> tableReference;

    public Output<TableReferenceResponse> getTableReference() {
        return this.tableReference;
    }
    @OutputExport(name="timePartitioning", type=TimePartitioningResponse.class, parameters={})
    private Output<TimePartitioningResponse> timePartitioning;

    public Output<TimePartitioningResponse> getTimePartitioning() {
        return this.timePartitioning;
    }
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    public Output<String> getType() {
        return this.type;
    }
    @OutputExport(name="view", type=ViewDefinitionResponse.class, parameters={})
    private Output<ViewDefinitionResponse> view;

    public Output<ViewDefinitionResponse> getView() {
        return this.view;
    }

    public Table(String name, TableArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:bigquery/v2:Table", name, args == null ? TableArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Table(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:bigquery/v2:Table", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    public static Table get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Table(name, id, options);
    }
}
