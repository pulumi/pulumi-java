// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1alpha1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class NetworkResponse {
    private final String network;
    private final String project;
    private final String subnetwork;

    @OutputCustomType.Constructor({"network","project","subnetwork"})
    private NetworkResponse(
        String network,
        String project,
        String subnetwork) {
        this.network = Objects.requireNonNull(network);
        this.project = Objects.requireNonNull(project);
        this.subnetwork = Objects.requireNonNull(subnetwork);
    }

    public String getNetwork() {
        return this.network;
    }
    public String getProject() {
        return this.project;
    }
    public String getSubnetwork() {
        return this.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String network;
        private String project;
        private String subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public NetworkResponse build() {
            return new NetworkResponse(network, project, subnetwork);
        }
    }
}
