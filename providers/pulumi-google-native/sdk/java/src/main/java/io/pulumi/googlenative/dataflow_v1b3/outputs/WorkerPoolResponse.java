// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.AutoscalingSettingsResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.DiskResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.PackageResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.SdkHarnessContainerImageResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.TaskRunnerSettingsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class WorkerPoolResponse {
    private final AutoscalingSettingsResponse autoscalingSettings;
    private final List<DiskResponse> dataDisks;
    private final String defaultPackageSet;
    private final Integer diskSizeGb;
    private final String diskSourceImage;
    private final String diskType;
    private final String ipConfiguration;
    private final String kind;
    private final String machineType;
    private final Map<String,String> metadata;
    private final String network;
    private final Integer numThreadsPerWorker;
    private final Integer numWorkers;
    private final String onHostMaintenance;
    private final List<PackageResponse> packages;
    private final Map<String,String> poolArgs;
    private final List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages;
    private final String subnetwork;
    private final TaskRunnerSettingsResponse taskrunnerSettings;
    private final String teardownPolicy;
    private final String zone;

    @OutputCustomType.Constructor({"autoscalingSettings","dataDisks","defaultPackageSet","diskSizeGb","diskSourceImage","diskType","ipConfiguration","kind","machineType","metadata","network","numThreadsPerWorker","numWorkers","onHostMaintenance","packages","poolArgs","sdkHarnessContainerImages","subnetwork","taskrunnerSettings","teardownPolicy","zone"})
    private WorkerPoolResponse(
        AutoscalingSettingsResponse autoscalingSettings,
        List<DiskResponse> dataDisks,
        String defaultPackageSet,
        Integer diskSizeGb,
        String diskSourceImage,
        String diskType,
        String ipConfiguration,
        String kind,
        String machineType,
        Map<String,String> metadata,
        String network,
        Integer numThreadsPerWorker,
        Integer numWorkers,
        String onHostMaintenance,
        List<PackageResponse> packages,
        Map<String,String> poolArgs,
        List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages,
        String subnetwork,
        TaskRunnerSettingsResponse taskrunnerSettings,
        String teardownPolicy,
        String zone) {
        this.autoscalingSettings = Objects.requireNonNull(autoscalingSettings);
        this.dataDisks = Objects.requireNonNull(dataDisks);
        this.defaultPackageSet = Objects.requireNonNull(defaultPackageSet);
        this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
        this.diskSourceImage = Objects.requireNonNull(diskSourceImage);
        this.diskType = Objects.requireNonNull(diskType);
        this.ipConfiguration = Objects.requireNonNull(ipConfiguration);
        this.kind = Objects.requireNonNull(kind);
        this.machineType = Objects.requireNonNull(machineType);
        this.metadata = Objects.requireNonNull(metadata);
        this.network = Objects.requireNonNull(network);
        this.numThreadsPerWorker = Objects.requireNonNull(numThreadsPerWorker);
        this.numWorkers = Objects.requireNonNull(numWorkers);
        this.onHostMaintenance = Objects.requireNonNull(onHostMaintenance);
        this.packages = Objects.requireNonNull(packages);
        this.poolArgs = Objects.requireNonNull(poolArgs);
        this.sdkHarnessContainerImages = Objects.requireNonNull(sdkHarnessContainerImages);
        this.subnetwork = Objects.requireNonNull(subnetwork);
        this.taskrunnerSettings = Objects.requireNonNull(taskrunnerSettings);
        this.teardownPolicy = Objects.requireNonNull(teardownPolicy);
        this.zone = Objects.requireNonNull(zone);
    }

    public AutoscalingSettingsResponse getAutoscalingSettings() {
        return this.autoscalingSettings;
    }
    public List<DiskResponse> getDataDisks() {
        return this.dataDisks;
    }
    public String getDefaultPackageSet() {
        return this.defaultPackageSet;
    }
    public Integer getDiskSizeGb() {
        return this.diskSizeGb;
    }
    public String getDiskSourceImage() {
        return this.diskSourceImage;
    }
    public String getDiskType() {
        return this.diskType;
    }
    public String getIpConfiguration() {
        return this.ipConfiguration;
    }
    public String getKind() {
        return this.kind;
    }
    public String getMachineType() {
        return this.machineType;
    }
    public Map<String,String> getMetadata() {
        return this.metadata;
    }
    public String getNetwork() {
        return this.network;
    }
    public Integer getNumThreadsPerWorker() {
        return this.numThreadsPerWorker;
    }
    public Integer getNumWorkers() {
        return this.numWorkers;
    }
    public String getOnHostMaintenance() {
        return this.onHostMaintenance;
    }
    public List<PackageResponse> getPackages() {
        return this.packages;
    }
    public Map<String,String> getPoolArgs() {
        return this.poolArgs;
    }
    public List<SdkHarnessContainerImageResponse> getSdkHarnessContainerImages() {
        return this.sdkHarnessContainerImages;
    }
    public String getSubnetwork() {
        return this.subnetwork;
    }
    public TaskRunnerSettingsResponse getTaskrunnerSettings() {
        return this.taskrunnerSettings;
    }
    public String getTeardownPolicy() {
        return this.teardownPolicy;
    }
    public String getZone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkerPoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscalingSettingsResponse autoscalingSettings;
        private List<DiskResponse> dataDisks;
        private String defaultPackageSet;
        private Integer diskSizeGb;
        private String diskSourceImage;
        private String diskType;
        private String ipConfiguration;
        private String kind;
        private String machineType;
        private Map<String,String> metadata;
        private String network;
        private Integer numThreadsPerWorker;
        private Integer numWorkers;
        private String onHostMaintenance;
        private List<PackageResponse> packages;
        private Map<String,String> poolArgs;
        private List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages;
        private String subnetwork;
        private TaskRunnerSettingsResponse taskrunnerSettings;
        private String teardownPolicy;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkerPoolResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingSettings = defaults.autoscalingSettings;
    	      this.dataDisks = defaults.dataDisks;
    	      this.defaultPackageSet = defaults.defaultPackageSet;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskSourceImage = defaults.diskSourceImage;
    	      this.diskType = defaults.diskType;
    	      this.ipConfiguration = defaults.ipConfiguration;
    	      this.kind = defaults.kind;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.numThreadsPerWorker = defaults.numThreadsPerWorker;
    	      this.numWorkers = defaults.numWorkers;
    	      this.onHostMaintenance = defaults.onHostMaintenance;
    	      this.packages = defaults.packages;
    	      this.poolArgs = defaults.poolArgs;
    	      this.sdkHarnessContainerImages = defaults.sdkHarnessContainerImages;
    	      this.subnetwork = defaults.subnetwork;
    	      this.taskrunnerSettings = defaults.taskrunnerSettings;
    	      this.teardownPolicy = defaults.teardownPolicy;
    	      this.zone = defaults.zone;
        }

        public Builder setAutoscalingSettings(AutoscalingSettingsResponse autoscalingSettings) {
            this.autoscalingSettings = Objects.requireNonNull(autoscalingSettings);
            return this;
        }

        public Builder setDataDisks(List<DiskResponse> dataDisks) {
            this.dataDisks = Objects.requireNonNull(dataDisks);
            return this;
        }

        public Builder setDefaultPackageSet(String defaultPackageSet) {
            this.defaultPackageSet = Objects.requireNonNull(defaultPackageSet);
            return this;
        }

        public Builder setDiskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }

        public Builder setDiskSourceImage(String diskSourceImage) {
            this.diskSourceImage = Objects.requireNonNull(diskSourceImage);
            return this;
        }

        public Builder setDiskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }

        public Builder setIpConfiguration(String ipConfiguration) {
            this.ipConfiguration = Objects.requireNonNull(ipConfiguration);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setMachineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder setMetadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setNumThreadsPerWorker(Integer numThreadsPerWorker) {
            this.numThreadsPerWorker = Objects.requireNonNull(numThreadsPerWorker);
            return this;
        }

        public Builder setNumWorkers(Integer numWorkers) {
            this.numWorkers = Objects.requireNonNull(numWorkers);
            return this;
        }

        public Builder setOnHostMaintenance(String onHostMaintenance) {
            this.onHostMaintenance = Objects.requireNonNull(onHostMaintenance);
            return this;
        }

        public Builder setPackages(List<PackageResponse> packages) {
            this.packages = Objects.requireNonNull(packages);
            return this;
        }

        public Builder setPoolArgs(Map<String,String> poolArgs) {
            this.poolArgs = Objects.requireNonNull(poolArgs);
            return this;
        }

        public Builder setSdkHarnessContainerImages(List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages) {
            this.sdkHarnessContainerImages = Objects.requireNonNull(sdkHarnessContainerImages);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public Builder setTaskrunnerSettings(TaskRunnerSettingsResponse taskrunnerSettings) {
            this.taskrunnerSettings = Objects.requireNonNull(taskrunnerSettings);
            return this;
        }

        public Builder setTeardownPolicy(String teardownPolicy) {
            this.teardownPolicy = Objects.requireNonNull(teardownPolicy);
            return this;
        }

        public Builder setZone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }

        public WorkerPoolResponse build() {
            return new WorkerPoolResponse(autoscalingSettings, dataDisks, defaultPackageSet, diskSizeGb, diskSourceImage, diskType, ipConfiguration, kind, machineType, metadata, network, numThreadsPerWorker, numWorkers, onHostMaintenance, packages, poolArgs, sdkHarnessContainerImages, subnetwork, taskrunnerSettings, teardownPolicy, zone);
        }
    }
}
