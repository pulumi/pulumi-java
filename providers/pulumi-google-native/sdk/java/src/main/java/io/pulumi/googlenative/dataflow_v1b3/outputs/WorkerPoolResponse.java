// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.AutoscalingSettingsResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.DiskResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.PackageResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.SdkHarnessContainerImageResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.TaskRunnerSettingsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class WorkerPoolResponse {
    /**
     * Settings for autoscaling of this WorkerPool.
     * 
     */
    private final AutoscalingSettingsResponse autoscalingSettings;
    /**
     * Data disks that are used by a VM in this workflow.
     * 
     */
    private final List<DiskResponse> dataDisks;
    /**
     * The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
     * 
     */
    private final String defaultPackageSet;
    /**
     * Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
     * 
     */
    private final Integer diskSizeGb;
    /**
     * Fully qualified source image for disks.
     * 
     */
    private final String diskSourceImage;
    /**
     * Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
     * 
     */
    private final String diskType;
    /**
     * Configuration for VM IPs.
     * 
     */
    private final String ipConfiguration;
    /**
     * The kind of the worker pool; currently only `harness` and `shuffle` are supported.
     * 
     */
    private final String kind;
    /**
     * Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
     * 
     */
    private final String machineType;
    /**
     * Metadata to set on the Google Compute Engine VMs.
     * 
     */
    private final Map<String,String> metadata;
    /**
     * Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
     * 
     */
    private final String network;
    /**
     * The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
     * 
     */
    private final Integer numThreadsPerWorker;
    /**
     * Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
     * 
     */
    private final Integer numWorkers;
    /**
     * The action to take on host maintenance, as defined by the Google Compute Engine API.
     * 
     */
    private final String onHostMaintenance;
    /**
     * Packages to be installed on workers.
     * 
     */
    private final List<PackageResponse> packages;
    /**
     * Extra arguments for this worker pool.
     * 
     */
    private final Map<String,String> poolArgs;
    /**
     * Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
     * 
     */
    private final List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages;
    /**
     * Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
     * 
     */
    private final String subnetwork;
    /**
     * Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
     * 
     */
    private final TaskRunnerSettingsResponse taskrunnerSettings;
    /**
     * Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
     * 
     */
    private final String teardownPolicy;
    /**
     * Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
     * 
     */
    private final String zone;

    @CustomType.Constructor
    private WorkerPoolResponse(
        @CustomType.Parameter("autoscalingSettings") AutoscalingSettingsResponse autoscalingSettings,
        @CustomType.Parameter("dataDisks") List<DiskResponse> dataDisks,
        @CustomType.Parameter("defaultPackageSet") String defaultPackageSet,
        @CustomType.Parameter("diskSizeGb") Integer diskSizeGb,
        @CustomType.Parameter("diskSourceImage") String diskSourceImage,
        @CustomType.Parameter("diskType") String diskType,
        @CustomType.Parameter("ipConfiguration") String ipConfiguration,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("machineType") String machineType,
        @CustomType.Parameter("metadata") Map<String,String> metadata,
        @CustomType.Parameter("network") String network,
        @CustomType.Parameter("numThreadsPerWorker") Integer numThreadsPerWorker,
        @CustomType.Parameter("numWorkers") Integer numWorkers,
        @CustomType.Parameter("onHostMaintenance") String onHostMaintenance,
        @CustomType.Parameter("packages") List<PackageResponse> packages,
        @CustomType.Parameter("poolArgs") Map<String,String> poolArgs,
        @CustomType.Parameter("sdkHarnessContainerImages") List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages,
        @CustomType.Parameter("subnetwork") String subnetwork,
        @CustomType.Parameter("taskrunnerSettings") TaskRunnerSettingsResponse taskrunnerSettings,
        @CustomType.Parameter("teardownPolicy") String teardownPolicy,
        @CustomType.Parameter("zone") String zone) {
        this.autoscalingSettings = autoscalingSettings;
        this.dataDisks = dataDisks;
        this.defaultPackageSet = defaultPackageSet;
        this.diskSizeGb = diskSizeGb;
        this.diskSourceImage = diskSourceImage;
        this.diskType = diskType;
        this.ipConfiguration = ipConfiguration;
        this.kind = kind;
        this.machineType = machineType;
        this.metadata = metadata;
        this.network = network;
        this.numThreadsPerWorker = numThreadsPerWorker;
        this.numWorkers = numWorkers;
        this.onHostMaintenance = onHostMaintenance;
        this.packages = packages;
        this.poolArgs = poolArgs;
        this.sdkHarnessContainerImages = sdkHarnessContainerImages;
        this.subnetwork = subnetwork;
        this.taskrunnerSettings = taskrunnerSettings;
        this.teardownPolicy = teardownPolicy;
        this.zone = zone;
    }

    /**
     * Settings for autoscaling of this WorkerPool.
     * 
    */
    public AutoscalingSettingsResponse getAutoscalingSettings() {
        return this.autoscalingSettings;
    }
    /**
     * Data disks that are used by a VM in this workflow.
     * 
    */
    public List<DiskResponse> getDataDisks() {
        return this.dataDisks;
    }
    /**
     * The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
     * 
    */
    public String getDefaultPackageSet() {
        return this.defaultPackageSet;
    }
    /**
     * Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
     * 
    */
    public Integer getDiskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * Fully qualified source image for disks.
     * 
    */
    public String getDiskSourceImage() {
        return this.diskSourceImage;
    }
    /**
     * Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
     * 
    */
    public String getDiskType() {
        return this.diskType;
    }
    /**
     * Configuration for VM IPs.
     * 
    */
    public String getIpConfiguration() {
        return this.ipConfiguration;
    }
    /**
     * The kind of the worker pool; currently only `harness` and `shuffle` are supported.
     * 
    */
    public String getKind() {
        return this.kind;
    }
    /**
     * Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
     * 
    */
    public String getMachineType() {
        return this.machineType;
    }
    /**
     * Metadata to set on the Google Compute Engine VMs.
     * 
    */
    public Map<String,String> getMetadata() {
        return this.metadata;
    }
    /**
     * Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
     * 
    */
    public String getNetwork() {
        return this.network;
    }
    /**
     * The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
     * 
    */
    public Integer getNumThreadsPerWorker() {
        return this.numThreadsPerWorker;
    }
    /**
     * Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
     * 
    */
    public Integer getNumWorkers() {
        return this.numWorkers;
    }
    /**
     * The action to take on host maintenance, as defined by the Google Compute Engine API.
     * 
    */
    public String getOnHostMaintenance() {
        return this.onHostMaintenance;
    }
    /**
     * Packages to be installed on workers.
     * 
    */
    public List<PackageResponse> getPackages() {
        return this.packages;
    }
    /**
     * Extra arguments for this worker pool.
     * 
    */
    public Map<String,String> getPoolArgs() {
        return this.poolArgs;
    }
    /**
     * Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
     * 
    */
    public List<SdkHarnessContainerImageResponse> getSdkHarnessContainerImages() {
        return this.sdkHarnessContainerImages;
    }
    /**
     * Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
     * 
    */
    public String getSubnetwork() {
        return this.subnetwork;
    }
    /**
     * Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
     * 
    */
    public TaskRunnerSettingsResponse getTaskrunnerSettings() {
        return this.taskrunnerSettings;
    }
    /**
     * Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
     * 
    */
    public String getTeardownPolicy() {
        return this.teardownPolicy;
    }
    /**
     * Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
     * 
    */
    public String getZone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkerPoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscalingSettingsResponse autoscalingSettings;
        private List<DiskResponse> dataDisks;
        private String defaultPackageSet;
        private Integer diskSizeGb;
        private String diskSourceImage;
        private String diskType;
        private String ipConfiguration;
        private String kind;
        private String machineType;
        private Map<String,String> metadata;
        private String network;
        private Integer numThreadsPerWorker;
        private Integer numWorkers;
        private String onHostMaintenance;
        private List<PackageResponse> packages;
        private Map<String,String> poolArgs;
        private List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages;
        private String subnetwork;
        private TaskRunnerSettingsResponse taskrunnerSettings;
        private String teardownPolicy;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkerPoolResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingSettings = defaults.autoscalingSettings;
    	      this.dataDisks = defaults.dataDisks;
    	      this.defaultPackageSet = defaults.defaultPackageSet;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskSourceImage = defaults.diskSourceImage;
    	      this.diskType = defaults.diskType;
    	      this.ipConfiguration = defaults.ipConfiguration;
    	      this.kind = defaults.kind;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.numThreadsPerWorker = defaults.numThreadsPerWorker;
    	      this.numWorkers = defaults.numWorkers;
    	      this.onHostMaintenance = defaults.onHostMaintenance;
    	      this.packages = defaults.packages;
    	      this.poolArgs = defaults.poolArgs;
    	      this.sdkHarnessContainerImages = defaults.sdkHarnessContainerImages;
    	      this.subnetwork = defaults.subnetwork;
    	      this.taskrunnerSettings = defaults.taskrunnerSettings;
    	      this.teardownPolicy = defaults.teardownPolicy;
    	      this.zone = defaults.zone;
        }

        public Builder autoscalingSettings(AutoscalingSettingsResponse autoscalingSettings) {
            this.autoscalingSettings = Objects.requireNonNull(autoscalingSettings);
            return this;
        }

        public Builder dataDisks(List<DiskResponse> dataDisks) {
            this.dataDisks = Objects.requireNonNull(dataDisks);
            return this;
        }

        public Builder defaultPackageSet(String defaultPackageSet) {
            this.defaultPackageSet = Objects.requireNonNull(defaultPackageSet);
            return this;
        }

        public Builder diskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }

        public Builder diskSourceImage(String diskSourceImage) {
            this.diskSourceImage = Objects.requireNonNull(diskSourceImage);
            return this;
        }

        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }

        public Builder ipConfiguration(String ipConfiguration) {
            this.ipConfiguration = Objects.requireNonNull(ipConfiguration);
            return this;
        }

        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder machineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder numThreadsPerWorker(Integer numThreadsPerWorker) {
            this.numThreadsPerWorker = Objects.requireNonNull(numThreadsPerWorker);
            return this;
        }

        public Builder numWorkers(Integer numWorkers) {
            this.numWorkers = Objects.requireNonNull(numWorkers);
            return this;
        }

        public Builder onHostMaintenance(String onHostMaintenance) {
            this.onHostMaintenance = Objects.requireNonNull(onHostMaintenance);
            return this;
        }

        public Builder packages(List<PackageResponse> packages) {
            this.packages = Objects.requireNonNull(packages);
            return this;
        }

        public Builder poolArgs(Map<String,String> poolArgs) {
            this.poolArgs = Objects.requireNonNull(poolArgs);
            return this;
        }

        public Builder sdkHarnessContainerImages(List<SdkHarnessContainerImageResponse> sdkHarnessContainerImages) {
            this.sdkHarnessContainerImages = Objects.requireNonNull(sdkHarnessContainerImages);
            return this;
        }

        public Builder subnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public Builder taskrunnerSettings(TaskRunnerSettingsResponse taskrunnerSettings) {
            this.taskrunnerSettings = Objects.requireNonNull(taskrunnerSettings);
            return this;
        }

        public Builder teardownPolicy(String teardownPolicy) {
            this.teardownPolicy = Objects.requireNonNull(teardownPolicy);
            return this;
        }

        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public WorkerPoolResponse build() {
            return new WorkerPoolResponse(autoscalingSettings, dataDisks, defaultPackageSet, diskSizeGb, diskSourceImage, diskType, ipConfiguration, kind, machineType, metadata, network, numThreadsPerWorker, numWorkers, onHostMaintenance, packages, poolArgs, sdkHarnessContainerImages, subnetwork, taskrunnerSettings, teardownPolicy, zone);
        }
    }
}
