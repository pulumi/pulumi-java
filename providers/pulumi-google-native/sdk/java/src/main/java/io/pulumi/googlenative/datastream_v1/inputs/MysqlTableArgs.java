// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datastream_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.datastream_v1.inputs.MysqlColumnArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * MySQL table.
 * 
 */
public final class MysqlTableArgs extends io.pulumi.resources.ResourceArgs {

    public static final MysqlTableArgs Empty = new MysqlTableArgs();

    /**
     * MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
     * 
     */
    @InputImport(name="mysqlColumns")
      private final @Nullable Output<List<MysqlColumnArgs>> mysqlColumns;

    public Output<List<MysqlColumnArgs>> getMysqlColumns() {
        return this.mysqlColumns == null ? Output.empty() : this.mysqlColumns;
    }

    /**
     * Table name.
     * 
     */
    @InputImport(name="table")
      private final @Nullable Output<String> table;

    public Output<String> getTable() {
        return this.table == null ? Output.empty() : this.table;
    }

    public MysqlTableArgs(
        @Nullable Output<List<MysqlColumnArgs>> mysqlColumns,
        @Nullable Output<String> table) {
        this.mysqlColumns = mysqlColumns;
        this.table = table;
    }

    private MysqlTableArgs() {
        this.mysqlColumns = Output.empty();
        this.table = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MysqlTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<MysqlColumnArgs>> mysqlColumns;
        private @Nullable Output<String> table;

        public Builder() {
    	      // Empty
        }

        public Builder(MysqlTableArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mysqlColumns = defaults.mysqlColumns;
    	      this.table = defaults.table;
        }

        public Builder mysqlColumns(@Nullable Output<List<MysqlColumnArgs>> mysqlColumns) {
            this.mysqlColumns = mysqlColumns;
            return this;
        }

        public Builder mysqlColumns(@Nullable List<MysqlColumnArgs> mysqlColumns) {
            this.mysqlColumns = Output.ofNullable(mysqlColumns);
            return this;
        }

        public Builder table(@Nullable Output<String> table) {
            this.table = table;
            return this;
        }

        public Builder table(@Nullable String table) {
            this.table = Output.ofNullable(table);
            return this;
        }
        public MysqlTableArgs build() {
            return new MysqlTableArgs(mysqlColumns, table);
        }
    }
}
