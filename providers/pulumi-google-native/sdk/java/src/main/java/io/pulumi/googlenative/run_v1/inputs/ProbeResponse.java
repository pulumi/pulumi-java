// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.run_v1.inputs.ExecActionResponse;
import io.pulumi.googlenative.run_v1.inputs.HTTPGetActionResponse;
import io.pulumi.googlenative.run_v1.inputs.TCPSocketActionResponse;
import java.lang.Integer;
import java.util.Objects;


public final class ProbeResponse extends io.pulumi.resources.InvokeArgs {

    public static final ProbeResponse Empty = new ProbeResponse();

    @InputImport(name="exec", required=true)
    private final ExecActionResponse exec;

    public ExecActionResponse getExec() {
        return this.exec;
    }

    @InputImport(name="failureThreshold", required=true)
    private final Integer failureThreshold;

    public Integer getFailureThreshold() {
        return this.failureThreshold;
    }

    @InputImport(name="httpGet", required=true)
    private final HTTPGetActionResponse httpGet;

    public HTTPGetActionResponse getHttpGet() {
        return this.httpGet;
    }

    @InputImport(name="initialDelaySeconds", required=true)
    private final Integer initialDelaySeconds;

    public Integer getInitialDelaySeconds() {
        return this.initialDelaySeconds;
    }

    @InputImport(name="periodSeconds", required=true)
    private final Integer periodSeconds;

    public Integer getPeriodSeconds() {
        return this.periodSeconds;
    }

    @InputImport(name="successThreshold", required=true)
    private final Integer successThreshold;

    public Integer getSuccessThreshold() {
        return this.successThreshold;
    }

    @InputImport(name="tcpSocket", required=true)
    private final TCPSocketActionResponse tcpSocket;

    public TCPSocketActionResponse getTcpSocket() {
        return this.tcpSocket;
    }

    @InputImport(name="timeoutSeconds", required=true)
    private final Integer timeoutSeconds;

    public Integer getTimeoutSeconds() {
        return this.timeoutSeconds;
    }

    public ProbeResponse(
        ExecActionResponse exec,
        Integer failureThreshold,
        HTTPGetActionResponse httpGet,
        Integer initialDelaySeconds,
        Integer periodSeconds,
        Integer successThreshold,
        TCPSocketActionResponse tcpSocket,
        Integer timeoutSeconds) {
        this.exec = Objects.requireNonNull(exec, "expected parameter 'exec' to be non-null");
        this.failureThreshold = Objects.requireNonNull(failureThreshold, "expected parameter 'failureThreshold' to be non-null");
        this.httpGet = Objects.requireNonNull(httpGet, "expected parameter 'httpGet' to be non-null");
        this.initialDelaySeconds = Objects.requireNonNull(initialDelaySeconds, "expected parameter 'initialDelaySeconds' to be non-null");
        this.periodSeconds = Objects.requireNonNull(periodSeconds, "expected parameter 'periodSeconds' to be non-null");
        this.successThreshold = Objects.requireNonNull(successThreshold, "expected parameter 'successThreshold' to be non-null");
        this.tcpSocket = Objects.requireNonNull(tcpSocket, "expected parameter 'tcpSocket' to be non-null");
        this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds, "expected parameter 'timeoutSeconds' to be non-null");
    }

    private ProbeResponse() {
        this.exec = null;
        this.failureThreshold = null;
        this.httpGet = null;
        this.initialDelaySeconds = null;
        this.periodSeconds = null;
        this.successThreshold = null;
        this.tcpSocket = null;
        this.timeoutSeconds = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecActionResponse exec;
        private Integer failureThreshold;
        private HTTPGetActionResponse httpGet;
        private Integer initialDelaySeconds;
        private Integer periodSeconds;
        private Integer successThreshold;
        private TCPSocketActionResponse tcpSocket;
        private Integer timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(ProbeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.httpGet = defaults.httpGet;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcpSocket = defaults.tcpSocket;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder setExec(ExecActionResponse exec) {
            this.exec = Objects.requireNonNull(exec);
            return this;
        }

        public Builder setFailureThreshold(Integer failureThreshold) {
            this.failureThreshold = Objects.requireNonNull(failureThreshold);
            return this;
        }

        public Builder setHttpGet(HTTPGetActionResponse httpGet) {
            this.httpGet = Objects.requireNonNull(httpGet);
            return this;
        }

        public Builder setInitialDelaySeconds(Integer initialDelaySeconds) {
            this.initialDelaySeconds = Objects.requireNonNull(initialDelaySeconds);
            return this;
        }

        public Builder setPeriodSeconds(Integer periodSeconds) {
            this.periodSeconds = Objects.requireNonNull(periodSeconds);
            return this;
        }

        public Builder setSuccessThreshold(Integer successThreshold) {
            this.successThreshold = Objects.requireNonNull(successThreshold);
            return this;
        }

        public Builder setTcpSocket(TCPSocketActionResponse tcpSocket) {
            this.tcpSocket = Objects.requireNonNull(tcpSocket);
            return this;
        }

        public Builder setTimeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds);
            return this;
        }

        public ProbeResponse build() {
            return new ProbeResponse(exec, failureThreshold, httpGet, initialDelaySeconds, periodSeconds, successThreshold, tcpSocket, timeoutSeconds);
        }
    }
}
