// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vision_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.vision_v1.inputs.KeyValueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProductArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProductArgs Empty = new ProductArgs();

    /**
     * User-provided metadata to be stored with this product. Must be at most 4096 characters long.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Immutable. The category for the product identified by the reference image. This should be one of "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1" or "general-v1". The legacy categories "homegoods", "apparel", and "toys" are still supported, but these should not be used for new products.
     * 
     */
    @InputImport(name="productCategory")
    private final @Nullable Input<String> productCategory;

    public Input<String> getProductCategory() {
        return this.productCategory == null ? Input.empty() : this.productCategory;
    }

    @InputImport(name="productId")
    private final @Nullable Input<String> productId;

    public Input<String> getProductId() {
        return this.productId == null ? Input.empty() : this.productId;
    }

    /**
     * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. "1199". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
     * 
     */
    @InputImport(name="productLabels")
    private final @Nullable Input<List<KeyValueArgs>> productLabels;

    public Input<List<KeyValueArgs>> getProductLabels() {
        return this.productLabels == null ? Input.empty() : this.productLabels;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    public ProductArgs(
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> productCategory,
        @Nullable Input<String> productId,
        @Nullable Input<List<KeyValueArgs>> productLabels,
        @Nullable Input<String> project) {
        this.description = description;
        this.displayName = displayName;
        this.location = location;
        this.name = name;
        this.productCategory = productCategory;
        this.productId = productId;
        this.productLabels = productLabels;
        this.project = project;
    }

    private ProductArgs() {
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.productCategory = Input.empty();
        this.productId = Input.empty();
        this.productLabels = Input.empty();
        this.project = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProductArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> productCategory;
        private @Nullable Input<String> productId;
        private @Nullable Input<List<KeyValueArgs>> productLabels;
        private @Nullable Input<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(ProductArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.productCategory = defaults.productCategory;
    	      this.productId = defaults.productId;
    	      this.productLabels = defaults.productLabels;
    	      this.project = defaults.project;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProductCategory(@Nullable Input<String> productCategory) {
            this.productCategory = productCategory;
            return this;
        }

        public Builder setProductCategory(@Nullable String productCategory) {
            this.productCategory = Input.ofNullable(productCategory);
            return this;
        }

        public Builder setProductId(@Nullable Input<String> productId) {
            this.productId = productId;
            return this;
        }

        public Builder setProductId(@Nullable String productId) {
            this.productId = Input.ofNullable(productId);
            return this;
        }

        public Builder setProductLabels(@Nullable Input<List<KeyValueArgs>> productLabels) {
            this.productLabels = productLabels;
            return this;
        }

        public Builder setProductLabels(@Nullable List<KeyValueArgs> productLabels) {
            this.productLabels = Input.ofNullable(productLabels);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public ProductArgs build() {
            return new ProductArgs(description, displayName, location, name, productCategory, productId, productLabels, project);
        }
    }
}
