// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networksecurity_v1beta1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.networksecurity_v1beta1.enums.AuthorizationPolicyAction;
import io.pulumi.googlenative.networksecurity_v1beta1.inputs.RuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AuthorizationPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final AuthorizationPolicyArgs Empty = new AuthorizationPolicyArgs();

    /**
     * The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
     * 
     */
    @InputImport(name="action", required=true)
    private final Input<AuthorizationPolicyAction> action;

    public Input<AuthorizationPolicyAction> getAction() {
        return this.action;
    }

    @InputImport(name="authorizationPolicyId", required=true)
    private final Input<String> authorizationPolicyId;

    public Input<String> getAuthorizationPolicyId() {
        return this.authorizationPolicyId;
    }

    /**
     * Optional. Free-text description of the resource.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Optional. Set of label tags associated with the AuthorizationPolicy resource.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
     * 
     */
    @InputImport(name="rules")
    private final @Nullable Input<List<RuleArgs>> rules;

    public Input<List<RuleArgs>> getRules() {
        return this.rules == null ? Input.empty() : this.rules;
    }

    public AuthorizationPolicyArgs(
        Input<AuthorizationPolicyAction> action,
        Input<String> authorizationPolicyId,
        @Nullable Input<String> description,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<List<RuleArgs>> rules) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.authorizationPolicyId = Objects.requireNonNull(authorizationPolicyId, "expected parameter 'authorizationPolicyId' to be non-null");
        this.description = description;
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.project = project;
        this.rules = rules;
    }

    private AuthorizationPolicyArgs() {
        this.action = Input.empty();
        this.authorizationPolicyId = Input.empty();
        this.description = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.rules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<AuthorizationPolicyAction> action;
        private Input<String> authorizationPolicyId;
        private @Nullable Input<String> description;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<List<RuleArgs>> rules;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorizationPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.authorizationPolicyId = defaults.authorizationPolicyId;
    	      this.description = defaults.description;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rules = defaults.rules;
        }

        public Builder setAction(Input<AuthorizationPolicyAction> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }

        public Builder setAction(AuthorizationPolicyAction action) {
            this.action = Input.of(Objects.requireNonNull(action));
            return this;
        }

        public Builder setAuthorizationPolicyId(Input<String> authorizationPolicyId) {
            this.authorizationPolicyId = Objects.requireNonNull(authorizationPolicyId);
            return this;
        }

        public Builder setAuthorizationPolicyId(String authorizationPolicyId) {
            this.authorizationPolicyId = Input.of(Objects.requireNonNull(authorizationPolicyId));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRules(@Nullable Input<List<RuleArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder setRules(@Nullable List<RuleArgs> rules) {
            this.rules = Input.ofNullable(rules);
            return this;
        }

        public AuthorizationPolicyArgs build() {
            return new AuthorizationPolicyArgs(action, authorizationPolicyId, description, labels, location, name, project, rules);
        }
    }
}
