// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class DestinationTablePropertiesResponse {
    /**
     * [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
     * 
     */
    private final String description;
    /**
     * [Internal] This field is for Google internal use only.
     * 
     */
    private final String expirationTime;
    /**
     * [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
     * 
     */
    private final String friendlyName;
    /**
     * [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
     * 
     */
    private final Map<String,String> labels;

    @CustomType.Constructor
    private DestinationTablePropertiesResponse(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("expirationTime") String expirationTime,
        @CustomType.Parameter("friendlyName") String friendlyName,
        @CustomType.Parameter("labels") Map<String,String> labels) {
        this.description = description;
        this.expirationTime = expirationTime;
        this.friendlyName = friendlyName;
        this.labels = labels;
    }

    /**
     * [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * [Internal] This field is for Google internal use only.
     * 
    */
    public String getExpirationTime() {
        return this.expirationTime;
    }
    /**
     * [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
     * 
    */
    public String getFriendlyName() {
        return this.friendlyName;
    }
    /**
     * [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DestinationTablePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String expirationTime;
        private String friendlyName;
        private Map<String,String> labels;

        public Builder() {
    	      // Empty
        }

        public Builder(DestinationTablePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.expirationTime = defaults.expirationTime;
    	      this.friendlyName = defaults.friendlyName;
    	      this.labels = defaults.labels;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder expirationTime(String expirationTime) {
            this.expirationTime = Objects.requireNonNull(expirationTime);
            return this;
        }

        public Builder friendlyName(String friendlyName) {
            this.friendlyName = Objects.requireNonNull(friendlyName);
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public DestinationTablePropertiesResponse build() {
            return new DestinationTablePropertiesResponse(description, expirationTime, friendlyName, labels);
        }
    }
}
