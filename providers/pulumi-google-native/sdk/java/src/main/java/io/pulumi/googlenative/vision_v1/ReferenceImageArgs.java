// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vision_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.vision_v1.inputs.BoundingPolyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReferenceImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReferenceImageArgs Empty = new ReferenceImageArgs();

    /**
     * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
     * 
     */
    @InputImport(name="boundingPolys")
      private final @Nullable Input<List<BoundingPolyArgs>> boundingPolys;

    public Input<List<BoundingPolyArgs>> getBoundingPolys() {
        return this.boundingPolys == null ? Input.empty() : this.boundingPolys;
    }

    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="productId", required=true)
      private final Input<String> productId;

    public Input<String> getProductId() {
        return this.productId;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="referenceImageId")
      private final @Nullable Input<String> referenceImageId;

    public Input<String> getReferenceImageId() {
        return this.referenceImageId == null ? Input.empty() : this.referenceImageId;
    }

    /**
     * The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
     * 
     */
    @InputImport(name="uri", required=true)
      private final Input<String> uri;

    public Input<String> getUri() {
        return this.uri;
    }

    public ReferenceImageArgs(
        @Nullable Input<List<BoundingPolyArgs>> boundingPolys,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        Input<String> productId,
        @Nullable Input<String> project,
        @Nullable Input<String> referenceImageId,
        Input<String> uri) {
        this.boundingPolys = boundingPolys;
        this.location = location;
        this.name = name;
        this.productId = Objects.requireNonNull(productId, "expected parameter 'productId' to be non-null");
        this.project = project;
        this.referenceImageId = referenceImageId;
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
    }

    private ReferenceImageArgs() {
        this.boundingPolys = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.productId = Input.empty();
        this.project = Input.empty();
        this.referenceImageId = Input.empty();
        this.uri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReferenceImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<BoundingPolyArgs>> boundingPolys;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private Input<String> productId;
        private @Nullable Input<String> project;
        private @Nullable Input<String> referenceImageId;
        private Input<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(ReferenceImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boundingPolys = defaults.boundingPolys;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.productId = defaults.productId;
    	      this.project = defaults.project;
    	      this.referenceImageId = defaults.referenceImageId;
    	      this.uri = defaults.uri;
        }

        public Builder setBoundingPolys(@Nullable Input<List<BoundingPolyArgs>> boundingPolys) {
            this.boundingPolys = boundingPolys;
            return this;
        }

        public Builder setBoundingPolys(@Nullable List<BoundingPolyArgs> boundingPolys) {
            this.boundingPolys = Input.ofNullable(boundingPolys);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProductId(Input<String> productId) {
            this.productId = Objects.requireNonNull(productId);
            return this;
        }

        public Builder setProductId(String productId) {
            this.productId = Input.of(Objects.requireNonNull(productId));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setReferenceImageId(@Nullable Input<String> referenceImageId) {
            this.referenceImageId = referenceImageId;
            return this;
        }

        public Builder setReferenceImageId(@Nullable String referenceImageId) {
            this.referenceImageId = Input.ofNullable(referenceImageId);
            return this;
        }

        public Builder setUri(Input<String> uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }

        public Builder setUri(String uri) {
            this.uri = Input.of(Objects.requireNonNull(uri));
            return this;
        }
        public ReferenceImageArgs build() {
            return new ReferenceImageArgs(boundingPolys, location, name, productId, project, referenceImageId, uri);
        }
    }
}
