// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vision_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.vision_v1.inputs.BoundingPolyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReferenceImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReferenceImageArgs Empty = new ReferenceImageArgs();

    /**
     * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
     * 
     */
    @InputImport(name="boundingPolys")
      private final @Nullable Output<List<BoundingPolyArgs>> boundingPolys;

    public Output<List<BoundingPolyArgs>> getBoundingPolys() {
        return this.boundingPolys == null ? Output.empty() : this.boundingPolys;
    }

    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="productId", required=true)
      private final Output<String> productId;

    public Output<String> getProductId() {
        return this.productId;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @InputImport(name="referenceImageId")
      private final @Nullable Output<String> referenceImageId;

    public Output<String> getReferenceImageId() {
        return this.referenceImageId == null ? Output.empty() : this.referenceImageId;
    }

    /**
     * The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
     * 
     */
    @InputImport(name="uri", required=true)
      private final Output<String> uri;

    public Output<String> getUri() {
        return this.uri;
    }

    public ReferenceImageArgs(
        @Nullable Output<List<BoundingPolyArgs>> boundingPolys,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        Output<String> productId,
        @Nullable Output<String> project,
        @Nullable Output<String> referenceImageId,
        Output<String> uri) {
        this.boundingPolys = boundingPolys;
        this.location = location;
        this.name = name;
        this.productId = Objects.requireNonNull(productId, "expected parameter 'productId' to be non-null");
        this.project = project;
        this.referenceImageId = referenceImageId;
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
    }

    private ReferenceImageArgs() {
        this.boundingPolys = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.productId = Output.empty();
        this.project = Output.empty();
        this.referenceImageId = Output.empty();
        this.uri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReferenceImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BoundingPolyArgs>> boundingPolys;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private Output<String> productId;
        private @Nullable Output<String> project;
        private @Nullable Output<String> referenceImageId;
        private Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(ReferenceImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boundingPolys = defaults.boundingPolys;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.productId = defaults.productId;
    	      this.project = defaults.project;
    	      this.referenceImageId = defaults.referenceImageId;
    	      this.uri = defaults.uri;
        }

        public Builder boundingPolys(@Nullable Output<List<BoundingPolyArgs>> boundingPolys) {
            this.boundingPolys = boundingPolys;
            return this;
        }

        public Builder boundingPolys(@Nullable List<BoundingPolyArgs> boundingPolys) {
            this.boundingPolys = Output.ofNullable(boundingPolys);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder productId(Output<String> productId) {
            this.productId = Objects.requireNonNull(productId);
            return this;
        }

        public Builder productId(String productId) {
            this.productId = Output.of(Objects.requireNonNull(productId));
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder referenceImageId(@Nullable Output<String> referenceImageId) {
            this.referenceImageId = referenceImageId;
            return this;
        }

        public Builder referenceImageId(@Nullable String referenceImageId) {
            this.referenceImageId = Output.ofNullable(referenceImageId);
            return this;
        }

        public Builder uri(Output<String> uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }

        public Builder uri(String uri) {
            this.uri = Output.of(Objects.requireNonNull(uri));
            return this;
        }
        public ReferenceImageArgs build() {
            return new ReferenceImageArgs(boundingPolys, location, name, productId, project, referenceImageId, uri);
        }
    }
}
