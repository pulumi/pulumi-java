// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudkms_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudkms_v1.inputs.ServiceResolverArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EkmConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final EkmConnectionArgs Empty = new EkmConnectionArgs();

    @Import(name="ekmConnectionId", required=true)
      private final Output<String> ekmConnectionId;

    public Output<String> getEkmConnectionId() {
        return this.ekmConnectionId;
    }

    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> getEtag() {
        return this.etag == null ? Codegen.empty() : this.etag;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
     * 
     */
    @Import(name="serviceResolvers")
      private final @Nullable Output<List<ServiceResolverArgs>> serviceResolvers;

    public Output<List<ServiceResolverArgs>> getServiceResolvers() {
        return this.serviceResolvers == null ? Codegen.empty() : this.serviceResolvers;
    }

    public EkmConnectionArgs(
        Output<String> ekmConnectionId,
        @Nullable Output<String> etag,
        @Nullable Output<String> location,
        @Nullable Output<String> project,
        @Nullable Output<List<ServiceResolverArgs>> serviceResolvers) {
        this.ekmConnectionId = Objects.requireNonNull(ekmConnectionId, "expected parameter 'ekmConnectionId' to be non-null");
        this.etag = etag;
        this.location = location;
        this.project = project;
        this.serviceResolvers = serviceResolvers;
    }

    private EkmConnectionArgs() {
        this.ekmConnectionId = Codegen.empty();
        this.etag = Codegen.empty();
        this.location = Codegen.empty();
        this.project = Codegen.empty();
        this.serviceResolvers = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EkmConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> ekmConnectionId;
        private @Nullable Output<String> etag;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;
        private @Nullable Output<List<ServiceResolverArgs>> serviceResolvers;

        public Builder() {
    	      // Empty
        }

        public Builder(EkmConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ekmConnectionId = defaults.ekmConnectionId;
    	      this.etag = defaults.etag;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.serviceResolvers = defaults.serviceResolvers;
        }

        public Builder ekmConnectionId(Output<String> ekmConnectionId) {
            this.ekmConnectionId = Objects.requireNonNull(ekmConnectionId);
            return this;
        }
        public Builder ekmConnectionId(String ekmConnectionId) {
            this.ekmConnectionId = Output.of(Objects.requireNonNull(ekmConnectionId));
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Codegen.ofNullable(etag);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder serviceResolvers(@Nullable Output<List<ServiceResolverArgs>> serviceResolvers) {
            this.serviceResolvers = serviceResolvers;
            return this;
        }
        public Builder serviceResolvers(@Nullable List<ServiceResolverArgs> serviceResolvers) {
            this.serviceResolvers = Codegen.ofNullable(serviceResolvers);
            return this;
        }
        public Builder serviceResolvers(ServiceResolverArgs... serviceResolvers) {
            return serviceResolvers(List.of(serviceResolvers));
        }        public EkmConnectionArgs build() {
            return new EkmConnectionArgs(ekmConnectionId, etag, location, project, serviceResolvers);
        }
    }
}
