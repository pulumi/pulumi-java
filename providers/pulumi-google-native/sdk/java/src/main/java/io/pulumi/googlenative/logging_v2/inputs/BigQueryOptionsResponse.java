// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.logging_v2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Options that change functionality of a sink exporting data to BigQuery.
 * 
 */
public final class BigQueryOptionsResponse extends io.pulumi.resources.InvokeArgs {

    public static final BigQueryOptionsResponse Empty = new BigQueryOptionsResponse();

    /**
     * Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
     * 
     */
    @Import(name="usePartitionedTables", required=true)
      private final Boolean usePartitionedTables;

    public Boolean getUsePartitionedTables() {
        return this.usePartitionedTables;
    }

    /**
     * True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use.All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
     * 
     */
    @Import(name="usesTimestampColumnPartitioning", required=true)
      private final Boolean usesTimestampColumnPartitioning;

    public Boolean getUsesTimestampColumnPartitioning() {
        return this.usesTimestampColumnPartitioning;
    }

    public BigQueryOptionsResponse(
        Boolean usePartitionedTables,
        Boolean usesTimestampColumnPartitioning) {
        this.usePartitionedTables = Objects.requireNonNull(usePartitionedTables, "expected parameter 'usePartitionedTables' to be non-null");
        this.usesTimestampColumnPartitioning = Objects.requireNonNull(usesTimestampColumnPartitioning, "expected parameter 'usesTimestampColumnPartitioning' to be non-null");
    }

    private BigQueryOptionsResponse() {
        this.usePartitionedTables = null;
        this.usesTimestampColumnPartitioning = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigQueryOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean usePartitionedTables;
        private Boolean usesTimestampColumnPartitioning;

        public Builder() {
    	      // Empty
        }

        public Builder(BigQueryOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.usePartitionedTables = defaults.usePartitionedTables;
    	      this.usesTimestampColumnPartitioning = defaults.usesTimestampColumnPartitioning;
        }

        public Builder usePartitionedTables(Boolean usePartitionedTables) {
            this.usePartitionedTables = Objects.requireNonNull(usePartitionedTables);
            return this;
        }

        public Builder usesTimestampColumnPartitioning(Boolean usesTimestampColumnPartitioning) {
            this.usesTimestampColumnPartitioning = Objects.requireNonNull(usesTimestampColumnPartitioning);
            return this;
        }
        public BigQueryOptionsResponse build() {
            return new BigQueryOptionsResponse(usePartitionedTables, usesTimestampColumnPartitioning);
        }
    }
}
