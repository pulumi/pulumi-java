// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storage_v1;

import io.pulumi.core.AssetOrArchive;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.storage_v1.inputs.BucketObjectCustomerEncryptionArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketObjectOwnerArgs;
import io.pulumi.googlenative.storage_v1.inputs.ObjectAccessControlArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketObjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketObjectArgs Empty = new BucketObjectArgs();

    /**
     * Access controls on the object.
     * 
     */
    @InputImport(name="acl")
      private final @Nullable Input<List<ObjectAccessControlArgs>> acl;

    public Input<List<ObjectAccessControlArgs>> getAcl() {
        return this.acl == null ? Input.empty() : this.acl;
    }

    /**
     * The name of the bucket containing this object.
     * 
     */
    @InputImport(name="bucket", required=true)
      private final Input<String> bucket;

    public Input<String> getBucket() {
        return this.bucket;
    }

    /**
     * Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
     * 
     */
    @InputImport(name="cacheControl")
      private final @Nullable Input<String> cacheControl;

    public Input<String> getCacheControl() {
        return this.cacheControl == null ? Input.empty() : this.cacheControl;
    }

    /**
     * Number of underlying components that make up this object. Components are accumulated by compose operations.
     * 
     */
    @InputImport(name="componentCount")
      private final @Nullable Input<Integer> componentCount;

    public Input<Integer> getComponentCount() {
        return this.componentCount == null ? Input.empty() : this.componentCount;
    }

    /**
     * Content-Disposition of the object data.
     * 
     */
    @InputImport(name="contentDisposition")
      private final @Nullable Input<String> contentDisposition;

    public Input<String> getContentDisposition() {
        return this.contentDisposition == null ? Input.empty() : this.contentDisposition;
    }

    /**
     * Content-Encoding of the object data.
     * 
     */
    @InputImport(name="contentEncoding")
      private final @Nullable Input<String> contentEncoding;

    public Input<String> getContentEncoding() {
        return this.contentEncoding == null ? Input.empty() : this.contentEncoding;
    }

    /**
     * Content-Language of the object data.
     * 
     */
    @InputImport(name="contentLanguage")
      private final @Nullable Input<String> contentLanguage;

    public Input<String> getContentLanguage() {
        return this.contentLanguage == null ? Input.empty() : this.contentLanguage;
    }

    /**
     * Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
     * 
     */
    @InputImport(name="contentType")
      private final @Nullable Input<String> contentType;

    public Input<String> getContentType() {
        return this.contentType == null ? Input.empty() : this.contentType;
    }

    /**
     * CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
     * 
     */
    @InputImport(name="crc32c")
      private final @Nullable Input<String> crc32c;

    public Input<String> getCrc32c() {
        return this.crc32c == null ? Input.empty() : this.crc32c;
    }

    /**
     * A timestamp in RFC 3339 format specified by the user for an object.
     * 
     */
    @InputImport(name="customTime")
      private final @Nullable Input<String> customTime;

    public Input<String> getCustomTime() {
        return this.customTime == null ? Input.empty() : this.customTime;
    }

    /**
     * Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
     * 
     */
    @InputImport(name="customerEncryption")
      private final @Nullable Input<BucketObjectCustomerEncryptionArgs> customerEncryption;

    public Input<BucketObjectCustomerEncryptionArgs> getCustomerEncryption() {
        return this.customerEncryption == null ? Input.empty() : this.customerEncryption;
    }

    /**
     * HTTP 1.1 Entity tag for the object.
     * 
     */
    @InputImport(name="etag")
      private final @Nullable Input<String> etag;

    public Input<String> getEtag() {
        return this.etag == null ? Input.empty() : this.etag;
    }

    /**
     * Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
     * 
     */
    @InputImport(name="eventBasedHold")
      private final @Nullable Input<Boolean> eventBasedHold;

    public Input<Boolean> getEventBasedHold() {
        return this.eventBasedHold == null ? Input.empty() : this.eventBasedHold;
    }

    /**
     * The content generation of this object. Used for object versioning.
     * 
     */
    @InputImport(name="generation")
      private final @Nullable Input<String> generation;

    public Input<String> getGeneration() {
        return this.generation == null ? Input.empty() : this.generation;
    }

    /**
     * The ID of the object, including the bucket name, object name, and generation number.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="ifGenerationMatch")
      private final @Nullable Input<String> ifGenerationMatch;

    public Input<String> getIfGenerationMatch() {
        return this.ifGenerationMatch == null ? Input.empty() : this.ifGenerationMatch;
    }

    @InputImport(name="ifGenerationNotMatch")
      private final @Nullable Input<String> ifGenerationNotMatch;

    public Input<String> getIfGenerationNotMatch() {
        return this.ifGenerationNotMatch == null ? Input.empty() : this.ifGenerationNotMatch;
    }

    @InputImport(name="ifMetagenerationMatch")
      private final @Nullable Input<String> ifMetagenerationMatch;

    public Input<String> getIfMetagenerationMatch() {
        return this.ifMetagenerationMatch == null ? Input.empty() : this.ifMetagenerationMatch;
    }

    @InputImport(name="ifMetagenerationNotMatch")
      private final @Nullable Input<String> ifMetagenerationNotMatch;

    public Input<String> getIfMetagenerationNotMatch() {
        return this.ifMetagenerationNotMatch == null ? Input.empty() : this.ifMetagenerationNotMatch;
    }

    /**
     * The kind of item this is. For objects, this is always storage#object.
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
     * 
     */
    @InputImport(name="kmsKeyName")
      private final @Nullable Input<String> kmsKeyName;

    public Input<String> getKmsKeyName() {
        return this.kmsKeyName == null ? Input.empty() : this.kmsKeyName;
    }

    /**
     * MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
     * 
     */
    @InputImport(name="md5Hash")
      private final @Nullable Input<String> md5Hash;

    public Input<String> getMd5Hash() {
        return this.md5Hash == null ? Input.empty() : this.md5Hash;
    }

    /**
     * Media download link.
     * 
     */
    @InputImport(name="mediaLink")
      private final @Nullable Input<String> mediaLink;

    public Input<String> getMediaLink() {
        return this.mediaLink == null ? Input.empty() : this.mediaLink;
    }

    /**
     * User-provided metadata, in key/value pairs.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Input<Map<String,String>> metadata;

    public Input<Map<String,String>> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
     * 
     */
    @InputImport(name="metageneration")
      private final @Nullable Input<String> metageneration;

    public Input<String> getMetageneration() {
        return this.metageneration == null ? Input.empty() : this.metageneration;
    }

    /**
     * The name of the object. Required if not specified by URL parameter.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The owner of the object. This will always be the uploader of the object.
     * 
     */
    @InputImport(name="owner")
      private final @Nullable Input<BucketObjectOwnerArgs> owner;

    public Input<BucketObjectOwnerArgs> getOwner() {
        return this.owner == null ? Input.empty() : this.owner;
    }

    @InputImport(name="predefinedAcl")
      private final @Nullable Input<String> predefinedAcl;

    public Input<String> getPredefinedAcl() {
        return this.predefinedAcl == null ? Input.empty() : this.predefinedAcl;
    }

    @InputImport(name="projection")
      private final @Nullable Input<String> projection;

    public Input<String> getProjection() {
        return this.projection == null ? Input.empty() : this.projection;
    }

    @InputImport(name="provisionalUserProject")
      private final @Nullable Input<String> provisionalUserProject;

    public Input<String> getProvisionalUserProject() {
        return this.provisionalUserProject == null ? Input.empty() : this.provisionalUserProject;
    }

    /**
     * A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
     * 
     */
    @InputImport(name="retentionExpirationTime")
      private final @Nullable Input<String> retentionExpirationTime;

    public Input<String> getRetentionExpirationTime() {
        return this.retentionExpirationTime == null ? Input.empty() : this.retentionExpirationTime;
    }

    /**
     * The link to this object.
     * 
     */
    @InputImport(name="selfLink")
      private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    /**
     * Content-Length of the data in bytes.
     * 
     */
    @InputImport(name="size")
      private final @Nullable Input<String> size;

    public Input<String> getSize() {
        return this.size == null ? Input.empty() : this.size;
    }

    @InputImport(name="source")
      private final @Nullable Input<AssetOrArchive> source;

    public Input<AssetOrArchive> getSource() {
        return this.source == null ? Input.empty() : this.source;
    }

    /**
     * Storage class of the object.
     * 
     */
    @InputImport(name="storageClass")
      private final @Nullable Input<String> storageClass;

    public Input<String> getStorageClass() {
        return this.storageClass == null ? Input.empty() : this.storageClass;
    }

    /**
     * Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
     * 
     */
    @InputImport(name="temporaryHold")
      private final @Nullable Input<Boolean> temporaryHold;

    public Input<Boolean> getTemporaryHold() {
        return this.temporaryHold == null ? Input.empty() : this.temporaryHold;
    }

    /**
     * The creation time of the object in RFC 3339 format.
     * 
     */
    @InputImport(name="timeCreated")
      private final @Nullable Input<String> timeCreated;

    public Input<String> getTimeCreated() {
        return this.timeCreated == null ? Input.empty() : this.timeCreated;
    }

    /**
     * The deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
     * 
     */
    @InputImport(name="timeDeleted")
      private final @Nullable Input<String> timeDeleted;

    public Input<String> getTimeDeleted() {
        return this.timeDeleted == null ? Input.empty() : this.timeDeleted;
    }

    /**
     * The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
     * 
     */
    @InputImport(name="timeStorageClassUpdated")
      private final @Nullable Input<String> timeStorageClassUpdated;

    public Input<String> getTimeStorageClassUpdated() {
        return this.timeStorageClassUpdated == null ? Input.empty() : this.timeStorageClassUpdated;
    }

    /**
     * The modification time of the object metadata in RFC 3339 format.
     * 
     */
    @InputImport(name="updated")
      private final @Nullable Input<String> updated;

    public Input<String> getUpdated() {
        return this.updated == null ? Input.empty() : this.updated;
    }

    @InputImport(name="userProject")
      private final @Nullable Input<String> userProject;

    public Input<String> getUserProject() {
        return this.userProject == null ? Input.empty() : this.userProject;
    }

    public BucketObjectArgs(
        @Nullable Input<List<ObjectAccessControlArgs>> acl,
        Input<String> bucket,
        @Nullable Input<String> cacheControl,
        @Nullable Input<Integer> componentCount,
        @Nullable Input<String> contentDisposition,
        @Nullable Input<String> contentEncoding,
        @Nullable Input<String> contentLanguage,
        @Nullable Input<String> contentType,
        @Nullable Input<String> crc32c,
        @Nullable Input<String> customTime,
        @Nullable Input<BucketObjectCustomerEncryptionArgs> customerEncryption,
        @Nullable Input<String> etag,
        @Nullable Input<Boolean> eventBasedHold,
        @Nullable Input<String> generation,
        @Nullable Input<String> id,
        @Nullable Input<String> ifGenerationMatch,
        @Nullable Input<String> ifGenerationNotMatch,
        @Nullable Input<String> ifMetagenerationMatch,
        @Nullable Input<String> ifMetagenerationNotMatch,
        @Nullable Input<String> kind,
        @Nullable Input<String> kmsKeyName,
        @Nullable Input<String> md5Hash,
        @Nullable Input<String> mediaLink,
        @Nullable Input<Map<String,String>> metadata,
        @Nullable Input<String> metageneration,
        @Nullable Input<String> name,
        @Nullable Input<BucketObjectOwnerArgs> owner,
        @Nullable Input<String> predefinedAcl,
        @Nullable Input<String> projection,
        @Nullable Input<String> provisionalUserProject,
        @Nullable Input<String> retentionExpirationTime,
        @Nullable Input<String> selfLink,
        @Nullable Input<String> size,
        @Nullable Input<AssetOrArchive> source,
        @Nullable Input<String> storageClass,
        @Nullable Input<Boolean> temporaryHold,
        @Nullable Input<String> timeCreated,
        @Nullable Input<String> timeDeleted,
        @Nullable Input<String> timeStorageClassUpdated,
        @Nullable Input<String> updated,
        @Nullable Input<String> userProject) {
        this.acl = acl;
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.cacheControl = cacheControl;
        this.componentCount = componentCount;
        this.contentDisposition = contentDisposition;
        this.contentEncoding = contentEncoding;
        this.contentLanguage = contentLanguage;
        this.contentType = contentType;
        this.crc32c = crc32c;
        this.customTime = customTime;
        this.customerEncryption = customerEncryption;
        this.etag = etag;
        this.eventBasedHold = eventBasedHold;
        this.generation = generation;
        this.id = id;
        this.ifGenerationMatch = ifGenerationMatch;
        this.ifGenerationNotMatch = ifGenerationNotMatch;
        this.ifMetagenerationMatch = ifMetagenerationMatch;
        this.ifMetagenerationNotMatch = ifMetagenerationNotMatch;
        this.kind = kind;
        this.kmsKeyName = kmsKeyName;
        this.md5Hash = md5Hash;
        this.mediaLink = mediaLink;
        this.metadata = metadata;
        this.metageneration = metageneration;
        this.name = name;
        this.owner = owner;
        this.predefinedAcl = predefinedAcl;
        this.projection = projection;
        this.provisionalUserProject = provisionalUserProject;
        this.retentionExpirationTime = retentionExpirationTime;
        this.selfLink = selfLink;
        this.size = size;
        this.source = source;
        this.storageClass = storageClass;
        this.temporaryHold = temporaryHold;
        this.timeCreated = timeCreated;
        this.timeDeleted = timeDeleted;
        this.timeStorageClassUpdated = timeStorageClassUpdated;
        this.updated = updated;
        this.userProject = userProject;
    }

    private BucketObjectArgs() {
        this.acl = Input.empty();
        this.bucket = Input.empty();
        this.cacheControl = Input.empty();
        this.componentCount = Input.empty();
        this.contentDisposition = Input.empty();
        this.contentEncoding = Input.empty();
        this.contentLanguage = Input.empty();
        this.contentType = Input.empty();
        this.crc32c = Input.empty();
        this.customTime = Input.empty();
        this.customerEncryption = Input.empty();
        this.etag = Input.empty();
        this.eventBasedHold = Input.empty();
        this.generation = Input.empty();
        this.id = Input.empty();
        this.ifGenerationMatch = Input.empty();
        this.ifGenerationNotMatch = Input.empty();
        this.ifMetagenerationMatch = Input.empty();
        this.ifMetagenerationNotMatch = Input.empty();
        this.kind = Input.empty();
        this.kmsKeyName = Input.empty();
        this.md5Hash = Input.empty();
        this.mediaLink = Input.empty();
        this.metadata = Input.empty();
        this.metageneration = Input.empty();
        this.name = Input.empty();
        this.owner = Input.empty();
        this.predefinedAcl = Input.empty();
        this.projection = Input.empty();
        this.provisionalUserProject = Input.empty();
        this.retentionExpirationTime = Input.empty();
        this.selfLink = Input.empty();
        this.size = Input.empty();
        this.source = Input.empty();
        this.storageClass = Input.empty();
        this.temporaryHold = Input.empty();
        this.timeCreated = Input.empty();
        this.timeDeleted = Input.empty();
        this.timeStorageClassUpdated = Input.empty();
        this.updated = Input.empty();
        this.userProject = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ObjectAccessControlArgs>> acl;
        private Input<String> bucket;
        private @Nullable Input<String> cacheControl;
        private @Nullable Input<Integer> componentCount;
        private @Nullable Input<String> contentDisposition;
        private @Nullable Input<String> contentEncoding;
        private @Nullable Input<String> contentLanguage;
        private @Nullable Input<String> contentType;
        private @Nullable Input<String> crc32c;
        private @Nullable Input<String> customTime;
        private @Nullable Input<BucketObjectCustomerEncryptionArgs> customerEncryption;
        private @Nullable Input<String> etag;
        private @Nullable Input<Boolean> eventBasedHold;
        private @Nullable Input<String> generation;
        private @Nullable Input<String> id;
        private @Nullable Input<String> ifGenerationMatch;
        private @Nullable Input<String> ifGenerationNotMatch;
        private @Nullable Input<String> ifMetagenerationMatch;
        private @Nullable Input<String> ifMetagenerationNotMatch;
        private @Nullable Input<String> kind;
        private @Nullable Input<String> kmsKeyName;
        private @Nullable Input<String> md5Hash;
        private @Nullable Input<String> mediaLink;
        private @Nullable Input<Map<String,String>> metadata;
        private @Nullable Input<String> metageneration;
        private @Nullable Input<String> name;
        private @Nullable Input<BucketObjectOwnerArgs> owner;
        private @Nullable Input<String> predefinedAcl;
        private @Nullable Input<String> projection;
        private @Nullable Input<String> provisionalUserProject;
        private @Nullable Input<String> retentionExpirationTime;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<String> size;
        private @Nullable Input<AssetOrArchive> source;
        private @Nullable Input<String> storageClass;
        private @Nullable Input<Boolean> temporaryHold;
        private @Nullable Input<String> timeCreated;
        private @Nullable Input<String> timeDeleted;
        private @Nullable Input<String> timeStorageClassUpdated;
        private @Nullable Input<String> updated;
        private @Nullable Input<String> userProject;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketObjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.bucket = defaults.bucket;
    	      this.cacheControl = defaults.cacheControl;
    	      this.componentCount = defaults.componentCount;
    	      this.contentDisposition = defaults.contentDisposition;
    	      this.contentEncoding = defaults.contentEncoding;
    	      this.contentLanguage = defaults.contentLanguage;
    	      this.contentType = defaults.contentType;
    	      this.crc32c = defaults.crc32c;
    	      this.customTime = defaults.customTime;
    	      this.customerEncryption = defaults.customerEncryption;
    	      this.etag = defaults.etag;
    	      this.eventBasedHold = defaults.eventBasedHold;
    	      this.generation = defaults.generation;
    	      this.id = defaults.id;
    	      this.ifGenerationMatch = defaults.ifGenerationMatch;
    	      this.ifGenerationNotMatch = defaults.ifGenerationNotMatch;
    	      this.ifMetagenerationMatch = defaults.ifMetagenerationMatch;
    	      this.ifMetagenerationNotMatch = defaults.ifMetagenerationNotMatch;
    	      this.kind = defaults.kind;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.md5Hash = defaults.md5Hash;
    	      this.mediaLink = defaults.mediaLink;
    	      this.metadata = defaults.metadata;
    	      this.metageneration = defaults.metageneration;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.predefinedAcl = defaults.predefinedAcl;
    	      this.projection = defaults.projection;
    	      this.provisionalUserProject = defaults.provisionalUserProject;
    	      this.retentionExpirationTime = defaults.retentionExpirationTime;
    	      this.selfLink = defaults.selfLink;
    	      this.size = defaults.size;
    	      this.source = defaults.source;
    	      this.storageClass = defaults.storageClass;
    	      this.temporaryHold = defaults.temporaryHold;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeDeleted = defaults.timeDeleted;
    	      this.timeStorageClassUpdated = defaults.timeStorageClassUpdated;
    	      this.updated = defaults.updated;
    	      this.userProject = defaults.userProject;
        }

        public Builder acl(@Nullable Input<List<ObjectAccessControlArgs>> acl) {
            this.acl = acl;
            return this;
        }

        public Builder acl(@Nullable List<ObjectAccessControlArgs> acl) {
            this.acl = Input.ofNullable(acl);
            return this;
        }

        public Builder bucket(Input<String> bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }

        public Builder bucket(String bucket) {
            this.bucket = Input.of(Objects.requireNonNull(bucket));
            return this;
        }

        public Builder cacheControl(@Nullable Input<String> cacheControl) {
            this.cacheControl = cacheControl;
            return this;
        }

        public Builder cacheControl(@Nullable String cacheControl) {
            this.cacheControl = Input.ofNullable(cacheControl);
            return this;
        }

        public Builder componentCount(@Nullable Input<Integer> componentCount) {
            this.componentCount = componentCount;
            return this;
        }

        public Builder componentCount(@Nullable Integer componentCount) {
            this.componentCount = Input.ofNullable(componentCount);
            return this;
        }

        public Builder contentDisposition(@Nullable Input<String> contentDisposition) {
            this.contentDisposition = contentDisposition;
            return this;
        }

        public Builder contentDisposition(@Nullable String contentDisposition) {
            this.contentDisposition = Input.ofNullable(contentDisposition);
            return this;
        }

        public Builder contentEncoding(@Nullable Input<String> contentEncoding) {
            this.contentEncoding = contentEncoding;
            return this;
        }

        public Builder contentEncoding(@Nullable String contentEncoding) {
            this.contentEncoding = Input.ofNullable(contentEncoding);
            return this;
        }

        public Builder contentLanguage(@Nullable Input<String> contentLanguage) {
            this.contentLanguage = contentLanguage;
            return this;
        }

        public Builder contentLanguage(@Nullable String contentLanguage) {
            this.contentLanguage = Input.ofNullable(contentLanguage);
            return this;
        }

        public Builder contentType(@Nullable Input<String> contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder contentType(@Nullable String contentType) {
            this.contentType = Input.ofNullable(contentType);
            return this;
        }

        public Builder crc32c(@Nullable Input<String> crc32c) {
            this.crc32c = crc32c;
            return this;
        }

        public Builder crc32c(@Nullable String crc32c) {
            this.crc32c = Input.ofNullable(crc32c);
            return this;
        }

        public Builder customTime(@Nullable Input<String> customTime) {
            this.customTime = customTime;
            return this;
        }

        public Builder customTime(@Nullable String customTime) {
            this.customTime = Input.ofNullable(customTime);
            return this;
        }

        public Builder customerEncryption(@Nullable Input<BucketObjectCustomerEncryptionArgs> customerEncryption) {
            this.customerEncryption = customerEncryption;
            return this;
        }

        public Builder customerEncryption(@Nullable BucketObjectCustomerEncryptionArgs customerEncryption) {
            this.customerEncryption = Input.ofNullable(customerEncryption);
            return this;
        }

        public Builder etag(@Nullable Input<String> etag) {
            this.etag = etag;
            return this;
        }

        public Builder etag(@Nullable String etag) {
            this.etag = Input.ofNullable(etag);
            return this;
        }

        public Builder eventBasedHold(@Nullable Input<Boolean> eventBasedHold) {
            this.eventBasedHold = eventBasedHold;
            return this;
        }

        public Builder eventBasedHold(@Nullable Boolean eventBasedHold) {
            this.eventBasedHold = Input.ofNullable(eventBasedHold);
            return this;
        }

        public Builder generation(@Nullable Input<String> generation) {
            this.generation = generation;
            return this;
        }

        public Builder generation(@Nullable String generation) {
            this.generation = Input.ofNullable(generation);
            return this;
        }

        public Builder id(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder ifGenerationMatch(@Nullable Input<String> ifGenerationMatch) {
            this.ifGenerationMatch = ifGenerationMatch;
            return this;
        }

        public Builder ifGenerationMatch(@Nullable String ifGenerationMatch) {
            this.ifGenerationMatch = Input.ofNullable(ifGenerationMatch);
            return this;
        }

        public Builder ifGenerationNotMatch(@Nullable Input<String> ifGenerationNotMatch) {
            this.ifGenerationNotMatch = ifGenerationNotMatch;
            return this;
        }

        public Builder ifGenerationNotMatch(@Nullable String ifGenerationNotMatch) {
            this.ifGenerationNotMatch = Input.ofNullable(ifGenerationNotMatch);
            return this;
        }

        public Builder ifMetagenerationMatch(@Nullable Input<String> ifMetagenerationMatch) {
            this.ifMetagenerationMatch = ifMetagenerationMatch;
            return this;
        }

        public Builder ifMetagenerationMatch(@Nullable String ifMetagenerationMatch) {
            this.ifMetagenerationMatch = Input.ofNullable(ifMetagenerationMatch);
            return this;
        }

        public Builder ifMetagenerationNotMatch(@Nullable Input<String> ifMetagenerationNotMatch) {
            this.ifMetagenerationNotMatch = ifMetagenerationNotMatch;
            return this;
        }

        public Builder ifMetagenerationNotMatch(@Nullable String ifMetagenerationNotMatch) {
            this.ifMetagenerationNotMatch = Input.ofNullable(ifMetagenerationNotMatch);
            return this;
        }

        public Builder kind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder kmsKeyName(@Nullable Input<String> kmsKeyName) {
            this.kmsKeyName = kmsKeyName;
            return this;
        }

        public Builder kmsKeyName(@Nullable String kmsKeyName) {
            this.kmsKeyName = Input.ofNullable(kmsKeyName);
            return this;
        }

        public Builder md5Hash(@Nullable Input<String> md5Hash) {
            this.md5Hash = md5Hash;
            return this;
        }

        public Builder md5Hash(@Nullable String md5Hash) {
            this.md5Hash = Input.ofNullable(md5Hash);
            return this;
        }

        public Builder mediaLink(@Nullable Input<String> mediaLink) {
            this.mediaLink = mediaLink;
            return this;
        }

        public Builder mediaLink(@Nullable String mediaLink) {
            this.mediaLink = Input.ofNullable(mediaLink);
            return this;
        }

        public Builder metadata(@Nullable Input<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder metageneration(@Nullable Input<String> metageneration) {
            this.metageneration = metageneration;
            return this;
        }

        public Builder metageneration(@Nullable String metageneration) {
            this.metageneration = Input.ofNullable(metageneration);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder owner(@Nullable Input<BucketObjectOwnerArgs> owner) {
            this.owner = owner;
            return this;
        }

        public Builder owner(@Nullable BucketObjectOwnerArgs owner) {
            this.owner = Input.ofNullable(owner);
            return this;
        }

        public Builder predefinedAcl(@Nullable Input<String> predefinedAcl) {
            this.predefinedAcl = predefinedAcl;
            return this;
        }

        public Builder predefinedAcl(@Nullable String predefinedAcl) {
            this.predefinedAcl = Input.ofNullable(predefinedAcl);
            return this;
        }

        public Builder projection(@Nullable Input<String> projection) {
            this.projection = projection;
            return this;
        }

        public Builder projection(@Nullable String projection) {
            this.projection = Input.ofNullable(projection);
            return this;
        }

        public Builder provisionalUserProject(@Nullable Input<String> provisionalUserProject) {
            this.provisionalUserProject = provisionalUserProject;
            return this;
        }

        public Builder provisionalUserProject(@Nullable String provisionalUserProject) {
            this.provisionalUserProject = Input.ofNullable(provisionalUserProject);
            return this;
        }

        public Builder retentionExpirationTime(@Nullable Input<String> retentionExpirationTime) {
            this.retentionExpirationTime = retentionExpirationTime;
            return this;
        }

        public Builder retentionExpirationTime(@Nullable String retentionExpirationTime) {
            this.retentionExpirationTime = Input.ofNullable(retentionExpirationTime);
            return this;
        }

        public Builder selfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder size(@Nullable Input<String> size) {
            this.size = size;
            return this;
        }

        public Builder size(@Nullable String size) {
            this.size = Input.ofNullable(size);
            return this;
        }

        public Builder source(@Nullable Input<AssetOrArchive> source) {
            this.source = source;
            return this;
        }

        public Builder source(@Nullable AssetOrArchive source) {
            this.source = Input.ofNullable(source);
            return this;
        }

        public Builder storageClass(@Nullable Input<String> storageClass) {
            this.storageClass = storageClass;
            return this;
        }

        public Builder storageClass(@Nullable String storageClass) {
            this.storageClass = Input.ofNullable(storageClass);
            return this;
        }

        public Builder temporaryHold(@Nullable Input<Boolean> temporaryHold) {
            this.temporaryHold = temporaryHold;
            return this;
        }

        public Builder temporaryHold(@Nullable Boolean temporaryHold) {
            this.temporaryHold = Input.ofNullable(temporaryHold);
            return this;
        }

        public Builder timeCreated(@Nullable Input<String> timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }

        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = Input.ofNullable(timeCreated);
            return this;
        }

        public Builder timeDeleted(@Nullable Input<String> timeDeleted) {
            this.timeDeleted = timeDeleted;
            return this;
        }

        public Builder timeDeleted(@Nullable String timeDeleted) {
            this.timeDeleted = Input.ofNullable(timeDeleted);
            return this;
        }

        public Builder timeStorageClassUpdated(@Nullable Input<String> timeStorageClassUpdated) {
            this.timeStorageClassUpdated = timeStorageClassUpdated;
            return this;
        }

        public Builder timeStorageClassUpdated(@Nullable String timeStorageClassUpdated) {
            this.timeStorageClassUpdated = Input.ofNullable(timeStorageClassUpdated);
            return this;
        }

        public Builder updated(@Nullable Input<String> updated) {
            this.updated = updated;
            return this;
        }

        public Builder updated(@Nullable String updated) {
            this.updated = Input.ofNullable(updated);
            return this;
        }

        public Builder userProject(@Nullable Input<String> userProject) {
            this.userProject = userProject;
            return this;
        }

        public Builder userProject(@Nullable String userProject) {
            this.userProject = Input.ofNullable(userProject);
            return this;
        }
        public BucketObjectArgs build() {
            return new BucketObjectArgs(acl, bucket, cacheControl, componentCount, contentDisposition, contentEncoding, contentLanguage, contentType, crc32c, customTime, customerEncryption, etag, eventBasedHold, generation, id, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, kind, kmsKeyName, md5Hash, mediaLink, metadata, metageneration, name, owner, predefinedAcl, projection, provisionalUserProject, retentionExpirationTime, selfLink, size, source, storageClass, temporaryHold, timeCreated, timeDeleted, timeStorageClassUpdated, updated, userProject);
        }
    }
}
