// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vmmigration_v1alpha1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * AppliedLicense holds the license data returned by adaptation module report.
 * 
 */
public final class AppliedLicenseResponse extends io.pulumi.resources.InvokeArgs {

    public static final AppliedLicenseResponse Empty = new AppliedLicenseResponse();

    /**
     * The OS license returned from the adaptation module's report.
     * 
     */
    @Import(name="osLicense", required=true)
      private final String osLicense;

    public String osLicense() {
        return this.osLicense;
    }

    /**
     * The license type that was used in OS adaptation.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public AppliedLicenseResponse(
        String osLicense,
        String type) {
        this.osLicense = Objects.requireNonNull(osLicense, "expected parameter 'osLicense' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private AppliedLicenseResponse() {
        this.osLicense = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppliedLicenseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String osLicense;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(AppliedLicenseResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.osLicense = defaults.osLicense;
    	      this.type = defaults.type;
        }

        public Builder osLicense(String osLicense) {
            this.osLicense = Objects.requireNonNull(osLicense);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public AppliedLicenseResponse build() {
            return new AppliedLicenseResponse(osLicense, type);
        }
    }
}
