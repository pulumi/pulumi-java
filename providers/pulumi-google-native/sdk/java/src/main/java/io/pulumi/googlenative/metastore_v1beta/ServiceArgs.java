// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.metastore_v1beta;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.metastore_v1beta.enums.ServiceDatabaseType;
import io.pulumi.googlenative.metastore_v1beta.enums.ServiceReleaseChannel;
import io.pulumi.googlenative.metastore_v1beta.enums.ServiceTier;
import io.pulumi.googlenative.metastore_v1beta.inputs.EncryptionConfigArgs;
import io.pulumi.googlenative.metastore_v1beta.inputs.HiveMetastoreConfigArgs;
import io.pulumi.googlenative.metastore_v1beta.inputs.MaintenanceWindowArgs;
import io.pulumi.googlenative.metastore_v1beta.inputs.MetadataIntegrationArgs;
import io.pulumi.googlenative.metastore_v1beta.inputs.NetworkConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Immutable. The database type that the Metastore service stores its data.
     * 
     */
    @Import(name="databaseType")
      private final @Nullable Output<ServiceDatabaseType> databaseType;

    public Output<ServiceDatabaseType> getDatabaseType() {
        return this.databaseType == null ? Output.empty() : this.databaseType;
    }

    /**
     * Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
     * 
     */
    @Import(name="encryptionConfig")
      private final @Nullable Output<EncryptionConfigArgs> encryptionConfig;

    public Output<EncryptionConfigArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Output.empty() : this.encryptionConfig;
    }

    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     * 
     */
    @Import(name="hiveMetastoreConfig")
      private final @Nullable Output<HiveMetastoreConfigArgs> hiveMetastoreConfig;

    public Output<HiveMetastoreConfigArgs> getHiveMetastoreConfig() {
        return this.hiveMetastoreConfig == null ? Output.empty() : this.hiveMetastoreConfig;
    }

    /**
     * User-defined labels for the metastore service.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
     * 
     */
    @Import(name="maintenanceWindow")
      private final @Nullable Output<MaintenanceWindowArgs> maintenanceWindow;

    public Output<MaintenanceWindowArgs> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Output.empty() : this.maintenanceWindow;
    }

    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     * 
     */
    @Import(name="metadataIntegration")
      private final @Nullable Output<MetadataIntegrationArgs> metadataIntegration;

    public Output<MetadataIntegrationArgs> getMetadataIntegration() {
        return this.metadataIntegration == null ? Output.empty() : this.metadataIntegration;
    }

    /**
     * Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Output.empty() : this.network;
    }

    /**
     * Immutable. The configuration specifying the network settings for the Dataproc Metastore service.
     * 
     */
    @Import(name="networkConfig")
      private final @Nullable Output<NetworkConfigArgs> networkConfig;

    public Output<NetworkConfigArgs> getNetworkConfig() {
        return this.networkConfig == null ? Output.empty() : this.networkConfig;
    }

    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
     * 
     */
    @Import(name="releaseChannel")
      private final @Nullable Output<ServiceReleaseChannel> releaseChannel;

    public Output<ServiceReleaseChannel> getReleaseChannel() {
        return this.releaseChannel == null ? Output.empty() : this.releaseChannel;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    @Import(name="serviceId", required=true)
      private final Output<String> serviceId;

    public Output<String> getServiceId() {
        return this.serviceId;
    }

    /**
     * The tier of the service.
     * 
     */
    @Import(name="tier")
      private final @Nullable Output<ServiceTier> tier;

    public Output<ServiceTier> getTier() {
        return this.tier == null ? Output.empty() : this.tier;
    }

    public ServiceArgs(
        @Nullable Output<ServiceDatabaseType> databaseType,
        @Nullable Output<EncryptionConfigArgs> encryptionConfig,
        @Nullable Output<HiveMetastoreConfigArgs> hiveMetastoreConfig,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<MaintenanceWindowArgs> maintenanceWindow,
        @Nullable Output<MetadataIntegrationArgs> metadataIntegration,
        @Nullable Output<String> name,
        @Nullable Output<String> network,
        @Nullable Output<NetworkConfigArgs> networkConfig,
        @Nullable Output<Integer> port,
        @Nullable Output<String> project,
        @Nullable Output<ServiceReleaseChannel> releaseChannel,
        @Nullable Output<String> requestId,
        Output<String> serviceId,
        @Nullable Output<ServiceTier> tier) {
        this.databaseType = databaseType;
        this.encryptionConfig = encryptionConfig;
        this.hiveMetastoreConfig = hiveMetastoreConfig;
        this.labels = labels;
        this.location = location;
        this.maintenanceWindow = maintenanceWindow;
        this.metadataIntegration = metadataIntegration;
        this.name = name;
        this.network = network;
        this.networkConfig = networkConfig;
        this.port = port;
        this.project = project;
        this.releaseChannel = releaseChannel;
        this.requestId = requestId;
        this.serviceId = Objects.requireNonNull(serviceId, "expected parameter 'serviceId' to be non-null");
        this.tier = tier;
    }

    private ServiceArgs() {
        this.databaseType = Output.empty();
        this.encryptionConfig = Output.empty();
        this.hiveMetastoreConfig = Output.empty();
        this.labels = Output.empty();
        this.location = Output.empty();
        this.maintenanceWindow = Output.empty();
        this.metadataIntegration = Output.empty();
        this.name = Output.empty();
        this.network = Output.empty();
        this.networkConfig = Output.empty();
        this.port = Output.empty();
        this.project = Output.empty();
        this.releaseChannel = Output.empty();
        this.requestId = Output.empty();
        this.serviceId = Output.empty();
        this.tier = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ServiceDatabaseType> databaseType;
        private @Nullable Output<EncryptionConfigArgs> encryptionConfig;
        private @Nullable Output<HiveMetastoreConfigArgs> hiveMetastoreConfig;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<MaintenanceWindowArgs> maintenanceWindow;
        private @Nullable Output<MetadataIntegrationArgs> metadataIntegration;
        private @Nullable Output<String> name;
        private @Nullable Output<String> network;
        private @Nullable Output<NetworkConfigArgs> networkConfig;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> project;
        private @Nullable Output<ServiceReleaseChannel> releaseChannel;
        private @Nullable Output<String> requestId;
        private Output<String> serviceId;
        private @Nullable Output<ServiceTier> tier;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseType = defaults.databaseType;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.hiveMetastoreConfig = defaults.hiveMetastoreConfig;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.metadataIntegration = defaults.metadataIntegration;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkConfig = defaults.networkConfig;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.releaseChannel = defaults.releaseChannel;
    	      this.requestId = defaults.requestId;
    	      this.serviceId = defaults.serviceId;
    	      this.tier = defaults.tier;
        }

        public Builder databaseType(@Nullable Output<ServiceDatabaseType> databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        public Builder databaseType(@Nullable ServiceDatabaseType databaseType) {
            this.databaseType = Output.ofNullable(databaseType);
            return this;
        }
        public Builder encryptionConfig(@Nullable Output<EncryptionConfigArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }
        public Builder encryptionConfig(@Nullable EncryptionConfigArgs encryptionConfig) {
            this.encryptionConfig = Output.ofNullable(encryptionConfig);
            return this;
        }
        public Builder hiveMetastoreConfig(@Nullable Output<HiveMetastoreConfigArgs> hiveMetastoreConfig) {
            this.hiveMetastoreConfig = hiveMetastoreConfig;
            return this;
        }
        public Builder hiveMetastoreConfig(@Nullable HiveMetastoreConfigArgs hiveMetastoreConfig) {
            this.hiveMetastoreConfig = Output.ofNullable(hiveMetastoreConfig);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder maintenanceWindow(@Nullable Output<MaintenanceWindowArgs> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        public Builder maintenanceWindow(@Nullable MaintenanceWindowArgs maintenanceWindow) {
            this.maintenanceWindow = Output.ofNullable(maintenanceWindow);
            return this;
        }
        public Builder metadataIntegration(@Nullable Output<MetadataIntegrationArgs> metadataIntegration) {
            this.metadataIntegration = metadataIntegration;
            return this;
        }
        public Builder metadataIntegration(@Nullable MetadataIntegrationArgs metadataIntegration) {
            this.metadataIntegration = Output.ofNullable(metadataIntegration);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Output.ofNullable(network);
            return this;
        }
        public Builder networkConfig(@Nullable Output<NetworkConfigArgs> networkConfig) {
            this.networkConfig = networkConfig;
            return this;
        }
        public Builder networkConfig(@Nullable NetworkConfigArgs networkConfig) {
            this.networkConfig = Output.ofNullable(networkConfig);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder releaseChannel(@Nullable Output<ServiceReleaseChannel> releaseChannel) {
            this.releaseChannel = releaseChannel;
            return this;
        }
        public Builder releaseChannel(@Nullable ServiceReleaseChannel releaseChannel) {
            this.releaseChannel = Output.ofNullable(releaseChannel);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }
        public Builder serviceId(Output<String> serviceId) {
            this.serviceId = Objects.requireNonNull(serviceId);
            return this;
        }
        public Builder serviceId(String serviceId) {
            this.serviceId = Output.of(Objects.requireNonNull(serviceId));
            return this;
        }
        public Builder tier(@Nullable Output<ServiceTier> tier) {
            this.tier = tier;
            return this;
        }
        public Builder tier(@Nullable ServiceTier tier) {
            this.tier = Output.ofNullable(tier);
            return this;
        }        public ServiceArgs build() {
            return new ServiceArgs(databaseType, encryptionConfig, hiveMetastoreConfig, labels, location, maintenanceWindow, metadataIntegration, name, network, networkConfig, port, project, releaseChannel, requestId, serviceId, tier);
        }
    }
}
