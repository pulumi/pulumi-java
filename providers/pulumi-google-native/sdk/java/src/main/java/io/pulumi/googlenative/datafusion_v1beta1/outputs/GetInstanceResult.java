// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datafusion_v1beta1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.datafusion_v1beta1.outputs.AcceleratorResponse;
import io.pulumi.googlenative.datafusion_v1beta1.outputs.CryptoKeyConfigResponse;
import io.pulumi.googlenative.datafusion_v1beta1.outputs.NetworkConfigResponse;
import io.pulumi.googlenative.datafusion_v1beta1.outputs.VersionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetInstanceResult {
    private final List<AcceleratorResponse> accelerators;
    private final String apiEndpoint;
    private final List<VersionResponse> availableVersion;
    private final String createTime;
    private final CryptoKeyConfigResponse cryptoKeyConfig;
    private final String dataprocServiceAccount;
    private final String description;
    private final List<String> disabledReason;
    private final String displayName;
    private final Boolean enableRbac;
    private final Boolean enableStackdriverLogging;
    private final Boolean enableStackdriverMonitoring;
    private final String gcsBucket;
    private final Map<String,String> labels;
    private final String name;
    private final NetworkConfigResponse networkConfig;
    private final Map<String,String> options;
    private final String p4ServiceAccount;
    private final Boolean privateInstance;
    private final String serviceEndpoint;
    private final String state;
    private final String stateMessage;
    private final String tenantProjectId;
    private final String type;
    private final String updateTime;
    private final String version;
    private final String zone;

    @OutputCustomType.Constructor({"accelerators","apiEndpoint","availableVersion","createTime","cryptoKeyConfig","dataprocServiceAccount","description","disabledReason","displayName","enableRbac","enableStackdriverLogging","enableStackdriverMonitoring","gcsBucket","labels","name","networkConfig","options","p4ServiceAccount","privateInstance","serviceEndpoint","state","stateMessage","tenantProjectId","type","updateTime","version","zone"})
    private GetInstanceResult(
        List<AcceleratorResponse> accelerators,
        String apiEndpoint,
        List<VersionResponse> availableVersion,
        String createTime,
        CryptoKeyConfigResponse cryptoKeyConfig,
        String dataprocServiceAccount,
        String description,
        List<String> disabledReason,
        String displayName,
        Boolean enableRbac,
        Boolean enableStackdriverLogging,
        Boolean enableStackdriverMonitoring,
        String gcsBucket,
        Map<String,String> labels,
        String name,
        NetworkConfigResponse networkConfig,
        Map<String,String> options,
        String p4ServiceAccount,
        Boolean privateInstance,
        String serviceEndpoint,
        String state,
        String stateMessage,
        String tenantProjectId,
        String type,
        String updateTime,
        String version,
        String zone) {
        this.accelerators = Objects.requireNonNull(accelerators);
        this.apiEndpoint = Objects.requireNonNull(apiEndpoint);
        this.availableVersion = Objects.requireNonNull(availableVersion);
        this.createTime = Objects.requireNonNull(createTime);
        this.cryptoKeyConfig = Objects.requireNonNull(cryptoKeyConfig);
        this.dataprocServiceAccount = Objects.requireNonNull(dataprocServiceAccount);
        this.description = Objects.requireNonNull(description);
        this.disabledReason = Objects.requireNonNull(disabledReason);
        this.displayName = Objects.requireNonNull(displayName);
        this.enableRbac = Objects.requireNonNull(enableRbac);
        this.enableStackdriverLogging = Objects.requireNonNull(enableStackdriverLogging);
        this.enableStackdriverMonitoring = Objects.requireNonNull(enableStackdriverMonitoring);
        this.gcsBucket = Objects.requireNonNull(gcsBucket);
        this.labels = Objects.requireNonNull(labels);
        this.name = Objects.requireNonNull(name);
        this.networkConfig = Objects.requireNonNull(networkConfig);
        this.options = Objects.requireNonNull(options);
        this.p4ServiceAccount = Objects.requireNonNull(p4ServiceAccount);
        this.privateInstance = Objects.requireNonNull(privateInstance);
        this.serviceEndpoint = Objects.requireNonNull(serviceEndpoint);
        this.state = Objects.requireNonNull(state);
        this.stateMessage = Objects.requireNonNull(stateMessage);
        this.tenantProjectId = Objects.requireNonNull(tenantProjectId);
        this.type = Objects.requireNonNull(type);
        this.updateTime = Objects.requireNonNull(updateTime);
        this.version = Objects.requireNonNull(version);
        this.zone = Objects.requireNonNull(zone);
    }

    public List<AcceleratorResponse> getAccelerators() {
        return this.accelerators;
    }
    public String getApiEndpoint() {
        return this.apiEndpoint;
    }
    public List<VersionResponse> getAvailableVersion() {
        return this.availableVersion;
    }
    public String getCreateTime() {
        return this.createTime;
    }
    public CryptoKeyConfigResponse getCryptoKeyConfig() {
        return this.cryptoKeyConfig;
    }
    public String getDataprocServiceAccount() {
        return this.dataprocServiceAccount;
    }
    public String getDescription() {
        return this.description;
    }
    public List<String> getDisabledReason() {
        return this.disabledReason;
    }
    public String getDisplayName() {
        return this.displayName;
    }
    public Boolean getEnableRbac() {
        return this.enableRbac;
    }
    public Boolean getEnableStackdriverLogging() {
        return this.enableStackdriverLogging;
    }
    public Boolean getEnableStackdriverMonitoring() {
        return this.enableStackdriverMonitoring;
    }
    public String getGcsBucket() {
        return this.gcsBucket;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public String getName() {
        return this.name;
    }
    public NetworkConfigResponse getNetworkConfig() {
        return this.networkConfig;
    }
    public Map<String,String> getOptions() {
        return this.options;
    }
    public String getP4ServiceAccount() {
        return this.p4ServiceAccount;
    }
    public Boolean getPrivateInstance() {
        return this.privateInstance;
    }
    public String getServiceEndpoint() {
        return this.serviceEndpoint;
    }
    public String getState() {
        return this.state;
    }
    public String getStateMessage() {
        return this.stateMessage;
    }
    public String getTenantProjectId() {
        return this.tenantProjectId;
    }
    public String getType() {
        return this.type;
    }
    public String getUpdateTime() {
        return this.updateTime;
    }
    public String getVersion() {
        return this.version;
    }
    public String getZone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AcceleratorResponse> accelerators;
        private String apiEndpoint;
        private List<VersionResponse> availableVersion;
        private String createTime;
        private CryptoKeyConfigResponse cryptoKeyConfig;
        private String dataprocServiceAccount;
        private String description;
        private List<String> disabledReason;
        private String displayName;
        private Boolean enableRbac;
        private Boolean enableStackdriverLogging;
        private Boolean enableStackdriverMonitoring;
        private String gcsBucket;
        private Map<String,String> labels;
        private String name;
        private NetworkConfigResponse networkConfig;
        private Map<String,String> options;
        private String p4ServiceAccount;
        private Boolean privateInstance;
        private String serviceEndpoint;
        private String state;
        private String stateMessage;
        private String tenantProjectId;
        private String type;
        private String updateTime;
        private String version;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.apiEndpoint = defaults.apiEndpoint;
    	      this.availableVersion = defaults.availableVersion;
    	      this.createTime = defaults.createTime;
    	      this.cryptoKeyConfig = defaults.cryptoKeyConfig;
    	      this.dataprocServiceAccount = defaults.dataprocServiceAccount;
    	      this.description = defaults.description;
    	      this.disabledReason = defaults.disabledReason;
    	      this.displayName = defaults.displayName;
    	      this.enableRbac = defaults.enableRbac;
    	      this.enableStackdriverLogging = defaults.enableStackdriverLogging;
    	      this.enableStackdriverMonitoring = defaults.enableStackdriverMonitoring;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.options = defaults.options;
    	      this.p4ServiceAccount = defaults.p4ServiceAccount;
    	      this.privateInstance = defaults.privateInstance;
    	      this.serviceEndpoint = defaults.serviceEndpoint;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.tenantProjectId = defaults.tenantProjectId;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
    	      this.version = defaults.version;
    	      this.zone = defaults.zone;
        }

        public Builder setAccelerators(List<AcceleratorResponse> accelerators) {
            this.accelerators = Objects.requireNonNull(accelerators);
            return this;
        }

        public Builder setApiEndpoint(String apiEndpoint) {
            this.apiEndpoint = Objects.requireNonNull(apiEndpoint);
            return this;
        }

        public Builder setAvailableVersion(List<VersionResponse> availableVersion) {
            this.availableVersion = Objects.requireNonNull(availableVersion);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCryptoKeyConfig(CryptoKeyConfigResponse cryptoKeyConfig) {
            this.cryptoKeyConfig = Objects.requireNonNull(cryptoKeyConfig);
            return this;
        }

        public Builder setDataprocServiceAccount(String dataprocServiceAccount) {
            this.dataprocServiceAccount = Objects.requireNonNull(dataprocServiceAccount);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDisabledReason(List<String> disabledReason) {
            this.disabledReason = Objects.requireNonNull(disabledReason);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setEnableRbac(Boolean enableRbac) {
            this.enableRbac = Objects.requireNonNull(enableRbac);
            return this;
        }

        public Builder setEnableStackdriverLogging(Boolean enableStackdriverLogging) {
            this.enableStackdriverLogging = Objects.requireNonNull(enableStackdriverLogging);
            return this;
        }

        public Builder setEnableStackdriverMonitoring(Boolean enableStackdriverMonitoring) {
            this.enableStackdriverMonitoring = Objects.requireNonNull(enableStackdriverMonitoring);
            return this;
        }

        public Builder setGcsBucket(String gcsBucket) {
            this.gcsBucket = Objects.requireNonNull(gcsBucket);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetworkConfig(NetworkConfigResponse networkConfig) {
            this.networkConfig = Objects.requireNonNull(networkConfig);
            return this;
        }

        public Builder setOptions(Map<String,String> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }

        public Builder setP4ServiceAccount(String p4ServiceAccount) {
            this.p4ServiceAccount = Objects.requireNonNull(p4ServiceAccount);
            return this;
        }

        public Builder setPrivateInstance(Boolean privateInstance) {
            this.privateInstance = Objects.requireNonNull(privateInstance);
            return this;
        }

        public Builder setServiceEndpoint(String serviceEndpoint) {
            this.serviceEndpoint = Objects.requireNonNull(serviceEndpoint);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStateMessage(String stateMessage) {
            this.stateMessage = Objects.requireNonNull(stateMessage);
            return this;
        }

        public Builder setTenantProjectId(String tenantProjectId) {
            this.tenantProjectId = Objects.requireNonNull(tenantProjectId);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder setZone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }

        public GetInstanceResult build() {
            return new GetInstanceResult(accelerators, apiEndpoint, availableVersion, createTime, cryptoKeyConfig, dataprocServiceAccount, description, disabledReason, displayName, enableRbac, enableStackdriverLogging, enableStackdriverMonitoring, gcsBucket, labels, name, networkConfig, options, p4ServiceAccount, privateInstance, serviceEndpoint, state, stateMessage, tenantProjectId, type, updateTime, version, zone);
        }
    }
}
