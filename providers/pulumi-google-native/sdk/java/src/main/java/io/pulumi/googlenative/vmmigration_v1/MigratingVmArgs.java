// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vmmigration_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.vmmigration_v1.inputs.ComputeEngineTargetDefaultsArgs;
import io.pulumi.googlenative.vmmigration_v1.inputs.SchedulePolicyArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MigratingVmArgs extends io.pulumi.resources.ResourceArgs {

    public static final MigratingVmArgs Empty = new MigratingVmArgs();

    /**
     * Details of the target VM in Compute Engine.
     * 
     */
    @InputImport(name="computeEngineTargetDefaults")
    private final @Nullable Input<ComputeEngineTargetDefaultsArgs> computeEngineTargetDefaults;

    public Input<ComputeEngineTargetDefaultsArgs> getComputeEngineTargetDefaults() {
        return this.computeEngineTargetDefaults == null ? Input.empty() : this.computeEngineTargetDefaults;
    }

    /**
     * The description attached to the migrating VM by the user.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The display name attached to the MigratingVm by the user.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The labels of the migrating VM.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="migratingVmId", required=true)
    private final Input<String> migratingVmId;

    public Input<String> getMigratingVmId() {
        return this.migratingVmId;
    }

    /**
     * The replication schedule policy.
     * 
     */
    @InputImport(name="policy")
    private final @Nullable Input<SchedulePolicyArgs> policy;

    public Input<SchedulePolicyArgs> getPolicy() {
        return this.policy == null ? Input.empty() : this.policy;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="requestId")
    private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    @InputImport(name="sourceId", required=true)
    private final Input<String> sourceId;

    public Input<String> getSourceId() {
        return this.sourceId;
    }

    /**
     * The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
     * 
     */
    @InputImport(name="sourceVmId")
    private final @Nullable Input<String> sourceVmId;

    public Input<String> getSourceVmId() {
        return this.sourceVmId == null ? Input.empty() : this.sourceVmId;
    }

    public MigratingVmArgs(
        @Nullable Input<ComputeEngineTargetDefaultsArgs> computeEngineTargetDefaults,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        Input<String> migratingVmId,
        @Nullable Input<SchedulePolicyArgs> policy,
        @Nullable Input<String> project,
        @Nullable Input<String> requestId,
        Input<String> sourceId,
        @Nullable Input<String> sourceVmId) {
        this.computeEngineTargetDefaults = computeEngineTargetDefaults;
        this.description = description;
        this.displayName = displayName;
        this.labels = labels;
        this.location = location;
        this.migratingVmId = Objects.requireNonNull(migratingVmId, "expected parameter 'migratingVmId' to be non-null");
        this.policy = policy;
        this.project = project;
        this.requestId = requestId;
        this.sourceId = Objects.requireNonNull(sourceId, "expected parameter 'sourceId' to be non-null");
        this.sourceVmId = sourceVmId;
    }

    private MigratingVmArgs() {
        this.computeEngineTargetDefaults = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.migratingVmId = Input.empty();
        this.policy = Input.empty();
        this.project = Input.empty();
        this.requestId = Input.empty();
        this.sourceId = Input.empty();
        this.sourceVmId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigratingVmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ComputeEngineTargetDefaultsArgs> computeEngineTargetDefaults;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private Input<String> migratingVmId;
        private @Nullable Input<SchedulePolicyArgs> policy;
        private @Nullable Input<String> project;
        private @Nullable Input<String> requestId;
        private Input<String> sourceId;
        private @Nullable Input<String> sourceVmId;

        public Builder() {
    	      // Empty
        }

        public Builder(MigratingVmArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeEngineTargetDefaults = defaults.computeEngineTargetDefaults;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.migratingVmId = defaults.migratingVmId;
    	      this.policy = defaults.policy;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.sourceId = defaults.sourceId;
    	      this.sourceVmId = defaults.sourceVmId;
        }

        public Builder setComputeEngineTargetDefaults(@Nullable Input<ComputeEngineTargetDefaultsArgs> computeEngineTargetDefaults) {
            this.computeEngineTargetDefaults = computeEngineTargetDefaults;
            return this;
        }

        public Builder setComputeEngineTargetDefaults(@Nullable ComputeEngineTargetDefaultsArgs computeEngineTargetDefaults) {
            this.computeEngineTargetDefaults = Input.ofNullable(computeEngineTargetDefaults);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMigratingVmId(Input<String> migratingVmId) {
            this.migratingVmId = Objects.requireNonNull(migratingVmId);
            return this;
        }

        public Builder setMigratingVmId(String migratingVmId) {
            this.migratingVmId = Input.of(Objects.requireNonNull(migratingVmId));
            return this;
        }

        public Builder setPolicy(@Nullable Input<SchedulePolicyArgs> policy) {
            this.policy = policy;
            return this;
        }

        public Builder setPolicy(@Nullable SchedulePolicyArgs policy) {
            this.policy = Input.ofNullable(policy);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRequestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder setRequestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public Builder setSourceId(Input<String> sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId);
            return this;
        }

        public Builder setSourceId(String sourceId) {
            this.sourceId = Input.of(Objects.requireNonNull(sourceId));
            return this;
        }

        public Builder setSourceVmId(@Nullable Input<String> sourceVmId) {
            this.sourceVmId = sourceVmId;
            return this;
        }

        public Builder setSourceVmId(@Nullable String sourceVmId) {
            this.sourceVmId = Input.ofNullable(sourceVmId);
            return this;
        }

        public MigratingVmArgs build() {
            return new MigratingVmArgs(computeEngineTargetDefaults, description, displayName, labels, location, migratingVmId, policy, project, requestId, sourceId, sourceVmId);
        }
    }
}
