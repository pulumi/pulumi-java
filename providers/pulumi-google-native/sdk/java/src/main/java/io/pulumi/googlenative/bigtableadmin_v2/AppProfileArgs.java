// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigtableadmin_v2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.bigtableadmin_v2.inputs.MultiClusterRoutingUseAnyArgs;
import io.pulumi.googlenative.bigtableadmin_v2.inputs.SingleClusterRoutingArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppProfileArgs Empty = new AppProfileArgs();

    @Import(name="appProfileId", required=true)
      private final Output<String> appProfileId;

    public Output<String> getAppProfileId() {
        return this.appProfileId;
    }

    /**
     * Long form description of the use case for this AppProfile.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> getEtag() {
        return this.etag == null ? Output.empty() : this.etag;
    }

    @Import(name="ignoreWarnings")
      private final @Nullable Output<String> ignoreWarnings;

    public Output<String> getIgnoreWarnings() {
        return this.ignoreWarnings == null ? Output.empty() : this.ignoreWarnings;
    }

    @Import(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId;
    }

    /**
     * Use a multi-cluster routing policy.
     * 
     */
    @Import(name="multiClusterRoutingUseAny")
      private final @Nullable Output<MultiClusterRoutingUseAnyArgs> multiClusterRoutingUseAny;

    public Output<MultiClusterRoutingUseAnyArgs> getMultiClusterRoutingUseAny() {
        return this.multiClusterRoutingUseAny == null ? Output.empty() : this.multiClusterRoutingUseAny;
    }

    /**
     * The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Use a single-cluster routing policy.
     * 
     */
    @Import(name="singleClusterRouting")
      private final @Nullable Output<SingleClusterRoutingArgs> singleClusterRouting;

    public Output<SingleClusterRoutingArgs> getSingleClusterRouting() {
        return this.singleClusterRouting == null ? Output.empty() : this.singleClusterRouting;
    }

    public AppProfileArgs(
        Output<String> appProfileId,
        @Nullable Output<String> description,
        @Nullable Output<String> etag,
        @Nullable Output<String> ignoreWarnings,
        Output<String> instanceId,
        @Nullable Output<MultiClusterRoutingUseAnyArgs> multiClusterRoutingUseAny,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<SingleClusterRoutingArgs> singleClusterRouting) {
        this.appProfileId = Objects.requireNonNull(appProfileId, "expected parameter 'appProfileId' to be non-null");
        this.description = description;
        this.etag = etag;
        this.ignoreWarnings = ignoreWarnings;
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.multiClusterRoutingUseAny = multiClusterRoutingUseAny;
        this.name = name;
        this.project = project;
        this.singleClusterRouting = singleClusterRouting;
    }

    private AppProfileArgs() {
        this.appProfileId = Output.empty();
        this.description = Output.empty();
        this.etag = Output.empty();
        this.ignoreWarnings = Output.empty();
        this.instanceId = Output.empty();
        this.multiClusterRoutingUseAny = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.singleClusterRouting = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> appProfileId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> etag;
        private @Nullable Output<String> ignoreWarnings;
        private Output<String> instanceId;
        private @Nullable Output<MultiClusterRoutingUseAnyArgs> multiClusterRoutingUseAny;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<SingleClusterRoutingArgs> singleClusterRouting;

        public Builder() {
    	      // Empty
        }

        public Builder(AppProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProfileId = defaults.appProfileId;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.ignoreWarnings = defaults.ignoreWarnings;
    	      this.instanceId = defaults.instanceId;
    	      this.multiClusterRoutingUseAny = defaults.multiClusterRoutingUseAny;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.singleClusterRouting = defaults.singleClusterRouting;
        }

        public Builder appProfileId(Output<String> appProfileId) {
            this.appProfileId = Objects.requireNonNull(appProfileId);
            return this;
        }
        public Builder appProfileId(String appProfileId) {
            this.appProfileId = Output.of(Objects.requireNonNull(appProfileId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Output.ofNullable(etag);
            return this;
        }
        public Builder ignoreWarnings(@Nullable Output<String> ignoreWarnings) {
            this.ignoreWarnings = ignoreWarnings;
            return this;
        }
        public Builder ignoreWarnings(@Nullable String ignoreWarnings) {
            this.ignoreWarnings = Output.ofNullable(ignoreWarnings);
            return this;
        }
        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }
        public Builder multiClusterRoutingUseAny(@Nullable Output<MultiClusterRoutingUseAnyArgs> multiClusterRoutingUseAny) {
            this.multiClusterRoutingUseAny = multiClusterRoutingUseAny;
            return this;
        }
        public Builder multiClusterRoutingUseAny(@Nullable MultiClusterRoutingUseAnyArgs multiClusterRoutingUseAny) {
            this.multiClusterRoutingUseAny = Output.ofNullable(multiClusterRoutingUseAny);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder singleClusterRouting(@Nullable Output<SingleClusterRoutingArgs> singleClusterRouting) {
            this.singleClusterRouting = singleClusterRouting;
            return this;
        }
        public Builder singleClusterRouting(@Nullable SingleClusterRoutingArgs singleClusterRouting) {
            this.singleClusterRouting = Output.ofNullable(singleClusterRouting);
            return this;
        }        public AppProfileArgs build() {
            return new AppProfileArgs(appProfileId, description, etag, ignoreWarnings, instanceId, multiClusterRoutingUseAny, name, project, singleClusterRouting);
        }
    }
}
