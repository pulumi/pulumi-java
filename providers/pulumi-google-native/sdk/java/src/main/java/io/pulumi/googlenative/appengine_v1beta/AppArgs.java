// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1beta;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.appengine_v1beta.enums.AppDatabaseType;
import io.pulumi.googlenative.appengine_v1beta.enums.AppServingStatus;
import io.pulumi.googlenative.appengine_v1beta.inputs.FeatureSettingsArgs;
import io.pulumi.googlenative.appengine_v1beta.inputs.IdentityAwareProxyArgs;
import io.pulumi.googlenative.appengine_v1beta.inputs.UrlDispatchRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.
     * 
     */
    @InputImport(name="authDomain")
      private final @Nullable Output<String> authDomain;

    public Output<String> getAuthDomain() {
        return this.authDomain == null ? Output.empty() : this.authDomain;
    }

    /**
     * The type of the Cloud Firestore or Cloud Datastore database associated with this application.
     * 
     */
    @InputImport(name="databaseType")
      private final @Nullable Output<AppDatabaseType> databaseType;

    public Output<AppDatabaseType> getDatabaseType() {
        return this.databaseType == null ? Output.empty() : this.databaseType;
    }

    /**
     * Cookie expiration policy for this application.
     * 
     */
    @InputImport(name="defaultCookieExpiration")
      private final @Nullable Output<String> defaultCookieExpiration;

    public Output<String> getDefaultCookieExpiration() {
        return this.defaultCookieExpiration == null ? Output.empty() : this.defaultCookieExpiration;
    }

    /**
     * HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent. Up to 20 dispatch rules can be supported.
     * 
     */
    @InputImport(name="dispatchRules")
      private final @Nullable Output<List<UrlDispatchRuleArgs>> dispatchRules;

    public Output<List<UrlDispatchRuleArgs>> getDispatchRules() {
        return this.dispatchRules == null ? Output.empty() : this.dispatchRules;
    }

    /**
     * The feature specific settings to be used in the application.
     * 
     */
    @InputImport(name="featureSettings")
      private final @Nullable Output<FeatureSettingsArgs> featureSettings;

    public Output<FeatureSettingsArgs> getFeatureSettings() {
        return this.featureSettings == null ? Output.empty() : this.featureSettings;
    }

    /**
     * The Google Container Registry domain used for storing managed build docker images for this application.
     * 
     */
    @InputImport(name="gcrDomain")
      private final @Nullable Output<String> gcrDomain;

    public Output<String> getGcrDomain() {
        return this.gcrDomain == null ? Output.empty() : this.gcrDomain;
    }

    @InputImport(name="iap")
      private final @Nullable Output<IdentityAwareProxyArgs> iap;

    public Output<IdentityAwareProxyArgs> getIap() {
        return this.iap == null ? Output.empty() : this.iap;
    }

    /**
     * Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Location from which this application runs. Application instances run out of the data centers in the specified location, which is also where all of the application's end user content is stored.Defaults to us-central.View the list of supported locations (https://cloud.google.com/appengine/docs/locations).
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The service account associated with the application. This is the app-level default identity. If no identity provided during create version, Admin API will fallback to this one.
     * 
     */
    @InputImport(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount == null ? Output.empty() : this.serviceAccount;
    }

    /**
     * Serving status of this application.
     * 
     */
    @InputImport(name="servingStatus")
      private final @Nullable Output<AppServingStatus> servingStatus;

    public Output<AppServingStatus> getServingStatus() {
        return this.servingStatus == null ? Output.empty() : this.servingStatus;
    }

    public AppArgs(
        @Nullable Output<String> authDomain,
        @Nullable Output<AppDatabaseType> databaseType,
        @Nullable Output<String> defaultCookieExpiration,
        @Nullable Output<List<UrlDispatchRuleArgs>> dispatchRules,
        @Nullable Output<FeatureSettingsArgs> featureSettings,
        @Nullable Output<String> gcrDomain,
        @Nullable Output<IdentityAwareProxyArgs> iap,
        @Nullable Output<String> id,
        @Nullable Output<String> location,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<AppServingStatus> servingStatus) {
        this.authDomain = authDomain;
        this.databaseType = databaseType;
        this.defaultCookieExpiration = defaultCookieExpiration;
        this.dispatchRules = dispatchRules;
        this.featureSettings = featureSettings;
        this.gcrDomain = gcrDomain;
        this.iap = iap;
        this.id = id;
        this.location = location;
        this.serviceAccount = serviceAccount;
        this.servingStatus = servingStatus;
    }

    private AppArgs() {
        this.authDomain = Output.empty();
        this.databaseType = Output.empty();
        this.defaultCookieExpiration = Output.empty();
        this.dispatchRules = Output.empty();
        this.featureSettings = Output.empty();
        this.gcrDomain = Output.empty();
        this.iap = Output.empty();
        this.id = Output.empty();
        this.location = Output.empty();
        this.serviceAccount = Output.empty();
        this.servingStatus = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> authDomain;
        private @Nullable Output<AppDatabaseType> databaseType;
        private @Nullable Output<String> defaultCookieExpiration;
        private @Nullable Output<List<UrlDispatchRuleArgs>> dispatchRules;
        private @Nullable Output<FeatureSettingsArgs> featureSettings;
        private @Nullable Output<String> gcrDomain;
        private @Nullable Output<IdentityAwareProxyArgs> iap;
        private @Nullable Output<String> id;
        private @Nullable Output<String> location;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<AppServingStatus> servingStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(AppArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authDomain = defaults.authDomain;
    	      this.databaseType = defaults.databaseType;
    	      this.defaultCookieExpiration = defaults.defaultCookieExpiration;
    	      this.dispatchRules = defaults.dispatchRules;
    	      this.featureSettings = defaults.featureSettings;
    	      this.gcrDomain = defaults.gcrDomain;
    	      this.iap = defaults.iap;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.servingStatus = defaults.servingStatus;
        }

        public Builder authDomain(@Nullable Output<String> authDomain) {
            this.authDomain = authDomain;
            return this;
        }

        public Builder authDomain(@Nullable String authDomain) {
            this.authDomain = Output.ofNullable(authDomain);
            return this;
        }

        public Builder databaseType(@Nullable Output<AppDatabaseType> databaseType) {
            this.databaseType = databaseType;
            return this;
        }

        public Builder databaseType(@Nullable AppDatabaseType databaseType) {
            this.databaseType = Output.ofNullable(databaseType);
            return this;
        }

        public Builder defaultCookieExpiration(@Nullable Output<String> defaultCookieExpiration) {
            this.defaultCookieExpiration = defaultCookieExpiration;
            return this;
        }

        public Builder defaultCookieExpiration(@Nullable String defaultCookieExpiration) {
            this.defaultCookieExpiration = Output.ofNullable(defaultCookieExpiration);
            return this;
        }

        public Builder dispatchRules(@Nullable Output<List<UrlDispatchRuleArgs>> dispatchRules) {
            this.dispatchRules = dispatchRules;
            return this;
        }

        public Builder dispatchRules(@Nullable List<UrlDispatchRuleArgs> dispatchRules) {
            this.dispatchRules = Output.ofNullable(dispatchRules);
            return this;
        }

        public Builder featureSettings(@Nullable Output<FeatureSettingsArgs> featureSettings) {
            this.featureSettings = featureSettings;
            return this;
        }

        public Builder featureSettings(@Nullable FeatureSettingsArgs featureSettings) {
            this.featureSettings = Output.ofNullable(featureSettings);
            return this;
        }

        public Builder gcrDomain(@Nullable Output<String> gcrDomain) {
            this.gcrDomain = gcrDomain;
            return this;
        }

        public Builder gcrDomain(@Nullable String gcrDomain) {
            this.gcrDomain = Output.ofNullable(gcrDomain);
            return this;
        }

        public Builder iap(@Nullable Output<IdentityAwareProxyArgs> iap) {
            this.iap = iap;
            return this;
        }

        public Builder iap(@Nullable IdentityAwareProxyArgs iap) {
            this.iap = Output.ofNullable(iap);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Output.ofNullable(serviceAccount);
            return this;
        }

        public Builder servingStatus(@Nullable Output<AppServingStatus> servingStatus) {
            this.servingStatus = servingStatus;
            return this;
        }

        public Builder servingStatus(@Nullable AppServingStatus servingStatus) {
            this.servingStatus = Output.ofNullable(servingStatus);
            return this;
        }
        public AppArgs build() {
            return new AppArgs(authDomain, databaseType, defaultCookieExpiration, dispatchRules, featureSettings, gcrDomain, iap, id, location, serviceAccount, servingStatus);
        }
    }
}
