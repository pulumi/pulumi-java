// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1beta;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.appengine_v1beta.enums.AppDatabaseType;
import io.pulumi.googlenative.appengine_v1beta.enums.AppServingStatus;
import io.pulumi.googlenative.appengine_v1beta.inputs.FeatureSettingsArgs;
import io.pulumi.googlenative.appengine_v1beta.inputs.IdentityAwareProxyArgs;
import io.pulumi.googlenative.appengine_v1beta.inputs.UrlDispatchRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    @InputImport(name="authDomain")
    private final @Nullable Input<String> authDomain;

    public Input<String> getAuthDomain() {
        return this.authDomain == null ? Input.empty() : this.authDomain;
    }

    @InputImport(name="databaseType")
    private final @Nullable Input<AppDatabaseType> databaseType;

    public Input<AppDatabaseType> getDatabaseType() {
        return this.databaseType == null ? Input.empty() : this.databaseType;
    }

    @InputImport(name="defaultCookieExpiration")
    private final @Nullable Input<String> defaultCookieExpiration;

    public Input<String> getDefaultCookieExpiration() {
        return this.defaultCookieExpiration == null ? Input.empty() : this.defaultCookieExpiration;
    }

    @InputImport(name="dispatchRules")
    private final @Nullable Input<List<UrlDispatchRuleArgs>> dispatchRules;

    public Input<List<UrlDispatchRuleArgs>> getDispatchRules() {
        return this.dispatchRules == null ? Input.empty() : this.dispatchRules;
    }

    @InputImport(name="featureSettings")
    private final @Nullable Input<FeatureSettingsArgs> featureSettings;

    public Input<FeatureSettingsArgs> getFeatureSettings() {
        return this.featureSettings == null ? Input.empty() : this.featureSettings;
    }

    @InputImport(name="gcrDomain")
    private final @Nullable Input<String> gcrDomain;

    public Input<String> getGcrDomain() {
        return this.gcrDomain == null ? Input.empty() : this.gcrDomain;
    }

    @InputImport(name="iap")
    private final @Nullable Input<IdentityAwareProxyArgs> iap;

    public Input<IdentityAwareProxyArgs> getIap() {
        return this.iap == null ? Input.empty() : this.iap;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="serviceAccount")
    private final @Nullable Input<String> serviceAccount;

    public Input<String> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    @InputImport(name="servingStatus")
    private final @Nullable Input<AppServingStatus> servingStatus;

    public Input<AppServingStatus> getServingStatus() {
        return this.servingStatus == null ? Input.empty() : this.servingStatus;
    }

    public AppArgs(
        @Nullable Input<String> authDomain,
        @Nullable Input<AppDatabaseType> databaseType,
        @Nullable Input<String> defaultCookieExpiration,
        @Nullable Input<List<UrlDispatchRuleArgs>> dispatchRules,
        @Nullable Input<FeatureSettingsArgs> featureSettings,
        @Nullable Input<String> gcrDomain,
        @Nullable Input<IdentityAwareProxyArgs> iap,
        @Nullable Input<String> id,
        @Nullable Input<String> location,
        @Nullable Input<String> serviceAccount,
        @Nullable Input<AppServingStatus> servingStatus) {
        this.authDomain = authDomain;
        this.databaseType = databaseType;
        this.defaultCookieExpiration = defaultCookieExpiration;
        this.dispatchRules = dispatchRules;
        this.featureSettings = featureSettings;
        this.gcrDomain = gcrDomain;
        this.iap = iap;
        this.id = id;
        this.location = location;
        this.serviceAccount = serviceAccount;
        this.servingStatus = servingStatus;
    }

    private AppArgs() {
        this.authDomain = Input.empty();
        this.databaseType = Input.empty();
        this.defaultCookieExpiration = Input.empty();
        this.dispatchRules = Input.empty();
        this.featureSettings = Input.empty();
        this.gcrDomain = Input.empty();
        this.iap = Input.empty();
        this.id = Input.empty();
        this.location = Input.empty();
        this.serviceAccount = Input.empty();
        this.servingStatus = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> authDomain;
        private @Nullable Input<AppDatabaseType> databaseType;
        private @Nullable Input<String> defaultCookieExpiration;
        private @Nullable Input<List<UrlDispatchRuleArgs>> dispatchRules;
        private @Nullable Input<FeatureSettingsArgs> featureSettings;
        private @Nullable Input<String> gcrDomain;
        private @Nullable Input<IdentityAwareProxyArgs> iap;
        private @Nullable Input<String> id;
        private @Nullable Input<String> location;
        private @Nullable Input<String> serviceAccount;
        private @Nullable Input<AppServingStatus> servingStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(AppArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authDomain = defaults.authDomain;
    	      this.databaseType = defaults.databaseType;
    	      this.defaultCookieExpiration = defaults.defaultCookieExpiration;
    	      this.dispatchRules = defaults.dispatchRules;
    	      this.featureSettings = defaults.featureSettings;
    	      this.gcrDomain = defaults.gcrDomain;
    	      this.iap = defaults.iap;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.servingStatus = defaults.servingStatus;
        }

        public Builder setAuthDomain(@Nullable Input<String> authDomain) {
            this.authDomain = authDomain;
            return this;
        }

        public Builder setAuthDomain(@Nullable String authDomain) {
            this.authDomain = Input.ofNullable(authDomain);
            return this;
        }

        public Builder setDatabaseType(@Nullable Input<AppDatabaseType> databaseType) {
            this.databaseType = databaseType;
            return this;
        }

        public Builder setDatabaseType(@Nullable AppDatabaseType databaseType) {
            this.databaseType = Input.ofNullable(databaseType);
            return this;
        }

        public Builder setDefaultCookieExpiration(@Nullable Input<String> defaultCookieExpiration) {
            this.defaultCookieExpiration = defaultCookieExpiration;
            return this;
        }

        public Builder setDefaultCookieExpiration(@Nullable String defaultCookieExpiration) {
            this.defaultCookieExpiration = Input.ofNullable(defaultCookieExpiration);
            return this;
        }

        public Builder setDispatchRules(@Nullable Input<List<UrlDispatchRuleArgs>> dispatchRules) {
            this.dispatchRules = dispatchRules;
            return this;
        }

        public Builder setDispatchRules(@Nullable List<UrlDispatchRuleArgs> dispatchRules) {
            this.dispatchRules = Input.ofNullable(dispatchRules);
            return this;
        }

        public Builder setFeatureSettings(@Nullable Input<FeatureSettingsArgs> featureSettings) {
            this.featureSettings = featureSettings;
            return this;
        }

        public Builder setFeatureSettings(@Nullable FeatureSettingsArgs featureSettings) {
            this.featureSettings = Input.ofNullable(featureSettings);
            return this;
        }

        public Builder setGcrDomain(@Nullable Input<String> gcrDomain) {
            this.gcrDomain = gcrDomain;
            return this;
        }

        public Builder setGcrDomain(@Nullable String gcrDomain) {
            this.gcrDomain = Input.ofNullable(gcrDomain);
            return this;
        }

        public Builder setIap(@Nullable Input<IdentityAwareProxyArgs> iap) {
            this.iap = iap;
            return this;
        }

        public Builder setIap(@Nullable IdentityAwareProxyArgs iap) {
            this.iap = Input.ofNullable(iap);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setServiceAccount(@Nullable Input<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder setServiceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder setServingStatus(@Nullable Input<AppServingStatus> servingStatus) {
            this.servingStatus = servingStatus;
            return this;
        }

        public Builder setServingStatus(@Nullable AppServingStatus servingStatus) {
            this.servingStatus = Input.ofNullable(servingStatus);
            return this;
        }

        public AppArgs build() {
            return new AppArgs(authDomain, databaseType, defaultCookieExpiration, dispatchRules, featureSettings, gcrDomain, iap, id, location, serviceAccount, servingStatus);
        }
    }
}
