// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.container_v1.outputs.DNSConfigResponse;
import io.pulumi.googlenative.container_v1.outputs.DefaultSnatStatusResponse;
import io.pulumi.googlenative.container_v1.outputs.ServiceExternalIPsConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class NetworkConfigResponse {
    private final String datapathProvider;
    private final DefaultSnatStatusResponse defaultSnatStatus;
    private final DNSConfigResponse dnsConfig;
    private final Boolean enableIntraNodeVisibility;
    private final Boolean enableL4ilbSubsetting;
    private final String network;
    private final String privateIpv6GoogleAccess;
    private final ServiceExternalIPsConfigResponse serviceExternalIpsConfig;
    private final String subnetwork;

    @OutputCustomType.Constructor({"datapathProvider","defaultSnatStatus","dnsConfig","enableIntraNodeVisibility","enableL4ilbSubsetting","network","privateIpv6GoogleAccess","serviceExternalIpsConfig","subnetwork"})
    private NetworkConfigResponse(
        String datapathProvider,
        DefaultSnatStatusResponse defaultSnatStatus,
        DNSConfigResponse dnsConfig,
        Boolean enableIntraNodeVisibility,
        Boolean enableL4ilbSubsetting,
        String network,
        String privateIpv6GoogleAccess,
        ServiceExternalIPsConfigResponse serviceExternalIpsConfig,
        String subnetwork) {
        this.datapathProvider = Objects.requireNonNull(datapathProvider);
        this.defaultSnatStatus = Objects.requireNonNull(defaultSnatStatus);
        this.dnsConfig = Objects.requireNonNull(dnsConfig);
        this.enableIntraNodeVisibility = Objects.requireNonNull(enableIntraNodeVisibility);
        this.enableL4ilbSubsetting = Objects.requireNonNull(enableL4ilbSubsetting);
        this.network = Objects.requireNonNull(network);
        this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
        this.serviceExternalIpsConfig = Objects.requireNonNull(serviceExternalIpsConfig);
        this.subnetwork = Objects.requireNonNull(subnetwork);
    }

    public String getDatapathProvider() {
        return this.datapathProvider;
    }
    public DefaultSnatStatusResponse getDefaultSnatStatus() {
        return this.defaultSnatStatus;
    }
    public DNSConfigResponse getDnsConfig() {
        return this.dnsConfig;
    }
    public Boolean getEnableIntraNodeVisibility() {
        return this.enableIntraNodeVisibility;
    }
    public Boolean getEnableL4ilbSubsetting() {
        return this.enableL4ilbSubsetting;
    }
    public String getNetwork() {
        return this.network;
    }
    public String getPrivateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }
    public ServiceExternalIPsConfigResponse getServiceExternalIpsConfig() {
        return this.serviceExternalIpsConfig;
    }
    public String getSubnetwork() {
        return this.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String datapathProvider;
        private DefaultSnatStatusResponse defaultSnatStatus;
        private DNSConfigResponse dnsConfig;
        private Boolean enableIntraNodeVisibility;
        private Boolean enableL4ilbSubsetting;
        private String network;
        private String privateIpv6GoogleAccess;
        private ServiceExternalIPsConfigResponse serviceExternalIpsConfig;
        private String subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datapathProvider = defaults.datapathProvider;
    	      this.defaultSnatStatus = defaults.defaultSnatStatus;
    	      this.dnsConfig = defaults.dnsConfig;
    	      this.enableIntraNodeVisibility = defaults.enableIntraNodeVisibility;
    	      this.enableL4ilbSubsetting = defaults.enableL4ilbSubsetting;
    	      this.network = defaults.network;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.serviceExternalIpsConfig = defaults.serviceExternalIpsConfig;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder setDatapathProvider(String datapathProvider) {
            this.datapathProvider = Objects.requireNonNull(datapathProvider);
            return this;
        }

        public Builder setDefaultSnatStatus(DefaultSnatStatusResponse defaultSnatStatus) {
            this.defaultSnatStatus = Objects.requireNonNull(defaultSnatStatus);
            return this;
        }

        public Builder setDnsConfig(DNSConfigResponse dnsConfig) {
            this.dnsConfig = Objects.requireNonNull(dnsConfig);
            return this;
        }

        public Builder setEnableIntraNodeVisibility(Boolean enableIntraNodeVisibility) {
            this.enableIntraNodeVisibility = Objects.requireNonNull(enableIntraNodeVisibility);
            return this;
        }

        public Builder setEnableL4ilbSubsetting(Boolean enableL4ilbSubsetting) {
            this.enableL4ilbSubsetting = Objects.requireNonNull(enableL4ilbSubsetting);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setPrivateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
            return this;
        }

        public Builder setServiceExternalIpsConfig(ServiceExternalIPsConfigResponse serviceExternalIpsConfig) {
            this.serviceExternalIpsConfig = Objects.requireNonNull(serviceExternalIpsConfig);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public NetworkConfigResponse build() {
            return new NetworkConfigResponse(datapathProvider, defaultSnatStatus, dnsConfig, enableIntraNodeVisibility, enableL4ilbSubsetting, network, privateIpv6GoogleAccess, serviceExternalIpsConfig, subnetwork);
        }
    }
}
