// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.accesscontextmanager_v1.outputs.DevicePolicyResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class ConditionResponse {
    /**
     * Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed.
     * 
     */
    private final DevicePolicyResponse devicePolicy;
    /**
     * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
     * 
     */
    private final List<String> ipSubnetworks;
    /**
     * The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.
     * 
     */
    private final List<String> members;
    /**
     * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.
     * 
     */
    private final Boolean negate;
    /**
     * The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
     * 
     */
    private final List<String> regions;
    /**
     * A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
     * 
     */
    private final List<String> requiredAccessLevels;

    @OutputCustomType.Constructor
    private ConditionResponse(
        @OutputCustomType.Parameter("devicePolicy") DevicePolicyResponse devicePolicy,
        @OutputCustomType.Parameter("ipSubnetworks") List<String> ipSubnetworks,
        @OutputCustomType.Parameter("members") List<String> members,
        @OutputCustomType.Parameter("negate") Boolean negate,
        @OutputCustomType.Parameter("regions") List<String> regions,
        @OutputCustomType.Parameter("requiredAccessLevels") List<String> requiredAccessLevels) {
        this.devicePolicy = devicePolicy;
        this.ipSubnetworks = ipSubnetworks;
        this.members = members;
        this.negate = negate;
        this.regions = regions;
        this.requiredAccessLevels = requiredAccessLevels;
    }

    /**
     * Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed.
     * 
    */
    public DevicePolicyResponse getDevicePolicy() {
        return this.devicePolicy;
    }
    /**
     * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
     * 
    */
    public List<String> getIpSubnetworks() {
        return this.ipSubnetworks;
    }
    /**
     * The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.
     * 
    */
    public List<String> getMembers() {
        return this.members;
    }
    /**
     * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.
     * 
    */
    public Boolean getNegate() {
        return this.negate;
    }
    /**
     * The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
     * 
    */
    public List<String> getRegions() {
        return this.regions;
    }
    /**
     * A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
     * 
    */
    public List<String> getRequiredAccessLevels() {
        return this.requiredAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevicePolicyResponse devicePolicy;
        private List<String> ipSubnetworks;
        private List<String> members;
        private Boolean negate;
        private List<String> regions;
        private List<String> requiredAccessLevels;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.devicePolicy = defaults.devicePolicy;
    	      this.ipSubnetworks = defaults.ipSubnetworks;
    	      this.members = defaults.members;
    	      this.negate = defaults.negate;
    	      this.regions = defaults.regions;
    	      this.requiredAccessLevels = defaults.requiredAccessLevels;
        }

        public Builder setDevicePolicy(DevicePolicyResponse devicePolicy) {
            this.devicePolicy = Objects.requireNonNull(devicePolicy);
            return this;
        }

        public Builder setIpSubnetworks(List<String> ipSubnetworks) {
            this.ipSubnetworks = Objects.requireNonNull(ipSubnetworks);
            return this;
        }

        public Builder setMembers(List<String> members) {
            this.members = Objects.requireNonNull(members);
            return this;
        }

        public Builder setNegate(Boolean negate) {
            this.negate = Objects.requireNonNull(negate);
            return this;
        }

        public Builder setRegions(List<String> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }

        public Builder setRequiredAccessLevels(List<String> requiredAccessLevels) {
            this.requiredAccessLevels = Objects.requireNonNull(requiredAccessLevels);
            return this;
        }
        public ConditionResponse build() {
            return new ConditionResponse(devicePolicy, ipSubnetworks, members, negate, regions, requiredAccessLevels);
        }
    }
}
