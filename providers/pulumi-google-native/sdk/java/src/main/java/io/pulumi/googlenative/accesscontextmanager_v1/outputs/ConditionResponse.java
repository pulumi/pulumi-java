// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.accesscontextmanager_v1.outputs.DevicePolicyResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class ConditionResponse {
    private final DevicePolicyResponse devicePolicy;
    private final List<String> ipSubnetworks;
    private final List<String> members;
    private final Boolean negate;
    private final List<String> regions;
    private final List<String> requiredAccessLevels;

    @OutputCustomType.Constructor({"devicePolicy","ipSubnetworks","members","negate","regions","requiredAccessLevels"})
    private ConditionResponse(
        DevicePolicyResponse devicePolicy,
        List<String> ipSubnetworks,
        List<String> members,
        Boolean negate,
        List<String> regions,
        List<String> requiredAccessLevels) {
        this.devicePolicy = Objects.requireNonNull(devicePolicy);
        this.ipSubnetworks = Objects.requireNonNull(ipSubnetworks);
        this.members = Objects.requireNonNull(members);
        this.negate = Objects.requireNonNull(negate);
        this.regions = Objects.requireNonNull(regions);
        this.requiredAccessLevels = Objects.requireNonNull(requiredAccessLevels);
    }

    public DevicePolicyResponse getDevicePolicy() {
        return this.devicePolicy;
    }
    public List<String> getIpSubnetworks() {
        return this.ipSubnetworks;
    }
    public List<String> getMembers() {
        return this.members;
    }
    public Boolean getNegate() {
        return this.negate;
    }
    public List<String> getRegions() {
        return this.regions;
    }
    public List<String> getRequiredAccessLevels() {
        return this.requiredAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevicePolicyResponse devicePolicy;
        private List<String> ipSubnetworks;
        private List<String> members;
        private Boolean negate;
        private List<String> regions;
        private List<String> requiredAccessLevels;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.devicePolicy = defaults.devicePolicy;
    	      this.ipSubnetworks = defaults.ipSubnetworks;
    	      this.members = defaults.members;
    	      this.negate = defaults.negate;
    	      this.regions = defaults.regions;
    	      this.requiredAccessLevels = defaults.requiredAccessLevels;
        }

        public Builder setDevicePolicy(DevicePolicyResponse devicePolicy) {
            this.devicePolicy = Objects.requireNonNull(devicePolicy);
            return this;
        }

        public Builder setIpSubnetworks(List<String> ipSubnetworks) {
            this.ipSubnetworks = Objects.requireNonNull(ipSubnetworks);
            return this;
        }

        public Builder setMembers(List<String> members) {
            this.members = Objects.requireNonNull(members);
            return this;
        }

        public Builder setNegate(Boolean negate) {
            this.negate = Objects.requireNonNull(negate);
            return this;
        }

        public Builder setRegions(List<String> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }

        public Builder setRequiredAccessLevels(List<String> requiredAccessLevels) {
            this.requiredAccessLevels = Objects.requireNonNull(requiredAccessLevels);
            return this;
        }

        public ConditionResponse build() {
            return new ConditionResponse(devicePolicy, ipSubnetworks, members, negate, regions, requiredAccessLevels);
        }
    }
}
