// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sqladmin_v1beta4.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.sqladmin_v1beta4.enums.PasswordValidationPolicyComplexity;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Database instance local user password validation policy
 * 
 */
public final class PasswordValidationPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final PasswordValidationPolicyArgs Empty = new PasswordValidationPolicyArgs();

    /**
     * The complexity of the password.
     * 
     */
    @Import(name="complexity")
      private final @Nullable Output<PasswordValidationPolicyComplexity> complexity;

    public Output<PasswordValidationPolicyComplexity> getComplexity() {
        return this.complexity == null ? Output.empty() : this.complexity;
    }

    /**
     * Disallow username as a part of the password.
     * 
     */
    @Import(name="disallowUsernameSubstring")
      private final @Nullable Output<Boolean> disallowUsernameSubstring;

    public Output<Boolean> getDisallowUsernameSubstring() {
        return this.disallowUsernameSubstring == null ? Output.empty() : this.disallowUsernameSubstring;
    }

    /**
     * Minimum number of characters allowed.
     * 
     */
    @Import(name="minLength")
      private final @Nullable Output<Integer> minLength;

    public Output<Integer> getMinLength() {
        return this.minLength == null ? Output.empty() : this.minLength;
    }

    /**
     * Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
     * 
     */
    @Import(name="passwordChangeInterval")
      private final @Nullable Output<String> passwordChangeInterval;

    public Output<String> getPasswordChangeInterval() {
        return this.passwordChangeInterval == null ? Output.empty() : this.passwordChangeInterval;
    }

    /**
     * Number of previous passwords that cannot be reused.
     * 
     */
    @Import(name="reuseInterval")
      private final @Nullable Output<Integer> reuseInterval;

    public Output<Integer> getReuseInterval() {
        return this.reuseInterval == null ? Output.empty() : this.reuseInterval;
    }

    public PasswordValidationPolicyArgs(
        @Nullable Output<PasswordValidationPolicyComplexity> complexity,
        @Nullable Output<Boolean> disallowUsernameSubstring,
        @Nullable Output<Integer> minLength,
        @Nullable Output<String> passwordChangeInterval,
        @Nullable Output<Integer> reuseInterval) {
        this.complexity = complexity;
        this.disallowUsernameSubstring = disallowUsernameSubstring;
        this.minLength = minLength;
        this.passwordChangeInterval = passwordChangeInterval;
        this.reuseInterval = reuseInterval;
    }

    private PasswordValidationPolicyArgs() {
        this.complexity = Output.empty();
        this.disallowUsernameSubstring = Output.empty();
        this.minLength = Output.empty();
        this.passwordChangeInterval = Output.empty();
        this.reuseInterval = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PasswordValidationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<PasswordValidationPolicyComplexity> complexity;
        private @Nullable Output<Boolean> disallowUsernameSubstring;
        private @Nullable Output<Integer> minLength;
        private @Nullable Output<String> passwordChangeInterval;
        private @Nullable Output<Integer> reuseInterval;

        public Builder() {
    	      // Empty
        }

        public Builder(PasswordValidationPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complexity = defaults.complexity;
    	      this.disallowUsernameSubstring = defaults.disallowUsernameSubstring;
    	      this.minLength = defaults.minLength;
    	      this.passwordChangeInterval = defaults.passwordChangeInterval;
    	      this.reuseInterval = defaults.reuseInterval;
        }

        public Builder complexity(@Nullable Output<PasswordValidationPolicyComplexity> complexity) {
            this.complexity = complexity;
            return this;
        }
        public Builder complexity(@Nullable PasswordValidationPolicyComplexity complexity) {
            this.complexity = Output.ofNullable(complexity);
            return this;
        }
        public Builder disallowUsernameSubstring(@Nullable Output<Boolean> disallowUsernameSubstring) {
            this.disallowUsernameSubstring = disallowUsernameSubstring;
            return this;
        }
        public Builder disallowUsernameSubstring(@Nullable Boolean disallowUsernameSubstring) {
            this.disallowUsernameSubstring = Output.ofNullable(disallowUsernameSubstring);
            return this;
        }
        public Builder minLength(@Nullable Output<Integer> minLength) {
            this.minLength = minLength;
            return this;
        }
        public Builder minLength(@Nullable Integer minLength) {
            this.minLength = Output.ofNullable(minLength);
            return this;
        }
        public Builder passwordChangeInterval(@Nullable Output<String> passwordChangeInterval) {
            this.passwordChangeInterval = passwordChangeInterval;
            return this;
        }
        public Builder passwordChangeInterval(@Nullable String passwordChangeInterval) {
            this.passwordChangeInterval = Output.ofNullable(passwordChangeInterval);
            return this;
        }
        public Builder reuseInterval(@Nullable Output<Integer> reuseInterval) {
            this.reuseInterval = reuseInterval;
            return this;
        }
        public Builder reuseInterval(@Nullable Integer reuseInterval) {
            this.reuseInterval = Output.ofNullable(reuseInterval);
            return this;
        }        public PasswordValidationPolicyArgs build() {
            return new PasswordValidationPolicyArgs(complexity, disallowUsernameSubstring, minLength, passwordChangeInterval, reuseInterval);
        }
    }
}
