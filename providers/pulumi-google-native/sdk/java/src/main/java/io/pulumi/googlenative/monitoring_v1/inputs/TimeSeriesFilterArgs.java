// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.monitoring_v1.inputs.AggregationArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method.
 * 
 */
public final class TimeSeriesFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final TimeSeriesFilterArgs Empty = new TimeSeriesFilterArgs();

    /**
     * By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     * 
     */
    @Import(name="aggregation")
      private final @Nullable Output<AggregationArgs> aggregation;

    public Output<AggregationArgs> getAggregation() {
        return this.aggregation == null ? Output.empty() : this.aggregation;
    }

    /**
     * The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     * 
     */
    @Import(name="filter", required=true)
      private final Output<String> filter;

    public Output<String> getFilter() {
        return this.filter;
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @Import(name="pickTimeSeriesFilter")
      private final @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter;

    public Output<PickTimeSeriesFilterArgs> getPickTimeSeriesFilter() {
        return this.pickTimeSeriesFilter == null ? Output.empty() : this.pickTimeSeriesFilter;
    }

    /**
     * Apply a second aggregation after aggregation is applied.
     * 
     */
    @Import(name="secondaryAggregation")
      private final @Nullable Output<AggregationArgs> secondaryAggregation;

    public Output<AggregationArgs> getSecondaryAggregation() {
        return this.secondaryAggregation == null ? Output.empty() : this.secondaryAggregation;
    }

    public TimeSeriesFilterArgs(
        @Nullable Output<AggregationArgs> aggregation,
        Output<String> filter,
        @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter,
        @Nullable Output<AggregationArgs> secondaryAggregation) {
        this.aggregation = aggregation;
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.pickTimeSeriesFilter = pickTimeSeriesFilter;
        this.secondaryAggregation = secondaryAggregation;
    }

    private TimeSeriesFilterArgs() {
        this.aggregation = Output.empty();
        this.filter = Output.empty();
        this.pickTimeSeriesFilter = Output.empty();
        this.secondaryAggregation = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeSeriesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AggregationArgs> aggregation;
        private Output<String> filter;
        private @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter;
        private @Nullable Output<AggregationArgs> secondaryAggregation;

        public Builder() {
    	      // Empty
        }

        public Builder(TimeSeriesFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.filter = defaults.filter;
    	      this.pickTimeSeriesFilter = defaults.pickTimeSeriesFilter;
    	      this.secondaryAggregation = defaults.secondaryAggregation;
        }

        public Builder aggregation(@Nullable Output<AggregationArgs> aggregation) {
            this.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(@Nullable AggregationArgs aggregation) {
            this.aggregation = Output.ofNullable(aggregation);
            return this;
        }

        public Builder filter(Output<String> filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder filter(String filter) {
            this.filter = Output.of(Objects.requireNonNull(filter));
            return this;
        }

        public Builder pickTimeSeriesFilter(@Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter) {
            this.pickTimeSeriesFilter = pickTimeSeriesFilter;
            return this;
        }

        public Builder pickTimeSeriesFilter(@Nullable PickTimeSeriesFilterArgs pickTimeSeriesFilter) {
            this.pickTimeSeriesFilter = Output.ofNullable(pickTimeSeriesFilter);
            return this;
        }

        public Builder secondaryAggregation(@Nullable Output<AggregationArgs> secondaryAggregation) {
            this.secondaryAggregation = secondaryAggregation;
            return this;
        }

        public Builder secondaryAggregation(@Nullable AggregationArgs secondaryAggregation) {
            this.secondaryAggregation = Output.ofNullable(secondaryAggregation);
            return this;
        }
        public TimeSeriesFilterArgs build() {
            return new TimeSeriesFilterArgs(aggregation, filter, pickTimeSeriesFilter, secondaryAggregation);
        }
    }
}
