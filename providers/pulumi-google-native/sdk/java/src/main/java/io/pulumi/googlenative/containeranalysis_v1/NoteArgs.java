// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.containeranalysis_v1.inputs.AttestationNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.BuildNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.ComplianceNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.DSSEAttestationNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.DeploymentNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.DiscoveryNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.ImageNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.PackageNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.RelatedUrlArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.UpgradeNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.VulnerabilityNoteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NoteArgs extends io.pulumi.resources.ResourceArgs {

    public static final NoteArgs Empty = new NoteArgs();

    /**
     * A note describing an attestation role.
     * 
     */
    @Import(name="attestation")
      private final @Nullable Output<AttestationNoteArgs> attestation;

    public Output<AttestationNoteArgs> getAttestation() {
        return this.attestation == null ? Codegen.empty() : this.attestation;
    }

    /**
     * A note describing build provenance for a verifiable build.
     * 
     */
    @Import(name="build")
      private final @Nullable Output<BuildNoteArgs> build;

    public Output<BuildNoteArgs> getBuild() {
        return this.build == null ? Codegen.empty() : this.build;
    }

    /**
     * A note describing a compliance check.
     * 
     */
    @Import(name="compliance")
      private final @Nullable Output<ComplianceNoteArgs> compliance;

    public Output<ComplianceNoteArgs> getCompliance() {
        return this.compliance == null ? Codegen.empty() : this.compliance;
    }

    /**
     * A note describing something that can be deployed.
     * 
     */
    @Import(name="deployment")
      private final @Nullable Output<DeploymentNoteArgs> deployment;

    public Output<DeploymentNoteArgs> getDeployment() {
        return this.deployment == null ? Codegen.empty() : this.deployment;
    }

    /**
     * A note describing the initial analysis of a resource.
     * 
     */
    @Import(name="discovery")
      private final @Nullable Output<DiscoveryNoteArgs> discovery;

    public Output<DiscoveryNoteArgs> getDiscovery() {
        return this.discovery == null ? Codegen.empty() : this.discovery;
    }

    /**
     * A note describing a dsse attestation note.
     * 
     */
    @Import(name="dsseAttestation")
      private final @Nullable Output<DSSEAttestationNoteArgs> dsseAttestation;

    public Output<DSSEAttestationNoteArgs> getDsseAttestation() {
        return this.dsseAttestation == null ? Codegen.empty() : this.dsseAttestation;
    }

    /**
     * Time of expiration for this note. Empty if note does not expire.
     * 
     */
    @Import(name="expirationTime")
      private final @Nullable Output<String> expirationTime;

    public Output<String> getExpirationTime() {
        return this.expirationTime == null ? Codegen.empty() : this.expirationTime;
    }

    /**
     * A note describing a base image.
     * 
     */
    @Import(name="image")
      private final @Nullable Output<ImageNoteArgs> image;

    public Output<ImageNoteArgs> getImage() {
        return this.image == null ? Codegen.empty() : this.image;
    }

    /**
     * A detailed description of this note.
     * 
     */
    @Import(name="longDescription")
      private final @Nullable Output<String> longDescription;

    public Output<String> getLongDescription() {
        return this.longDescription == null ? Codegen.empty() : this.longDescription;
    }

    @Import(name="noteId", required=true)
      private final Output<String> noteId;

    public Output<String> getNoteId() {
        return this.noteId;
    }

    /**
     * A note describing a package hosted by various package managers.
     * 
     */
    @Import(name="package")
      private final @Nullable Output<PackageNoteArgs> package_;

    public Output<PackageNoteArgs> getPackage_() {
        return this.package_ == null ? Codegen.empty() : this.package_;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Other notes related to this note.
     * 
     */
    @Import(name="relatedNoteNames")
      private final @Nullable Output<List<String>> relatedNoteNames;

    public Output<List<String>> getRelatedNoteNames() {
        return this.relatedNoteNames == null ? Codegen.empty() : this.relatedNoteNames;
    }

    /**
     * URLs associated with this note.
     * 
     */
    @Import(name="relatedUrl")
      private final @Nullable Output<List<RelatedUrlArgs>> relatedUrl;

    public Output<List<RelatedUrlArgs>> getRelatedUrl() {
        return this.relatedUrl == null ? Codegen.empty() : this.relatedUrl;
    }

    /**
     * A one sentence description of this note.
     * 
     */
    @Import(name="shortDescription")
      private final @Nullable Output<String> shortDescription;

    public Output<String> getShortDescription() {
        return this.shortDescription == null ? Codegen.empty() : this.shortDescription;
    }

    /**
     * A note describing available package upgrades.
     * 
     */
    @Import(name="upgrade")
      private final @Nullable Output<UpgradeNoteArgs> upgrade;

    public Output<UpgradeNoteArgs> getUpgrade() {
        return this.upgrade == null ? Codegen.empty() : this.upgrade;
    }

    /**
     * A note describing a package vulnerability.
     * 
     */
    @Import(name="vulnerability")
      private final @Nullable Output<VulnerabilityNoteArgs> vulnerability;

    public Output<VulnerabilityNoteArgs> getVulnerability() {
        return this.vulnerability == null ? Codegen.empty() : this.vulnerability;
    }

    public NoteArgs(
        @Nullable Output<AttestationNoteArgs> attestation,
        @Nullable Output<BuildNoteArgs> build,
        @Nullable Output<ComplianceNoteArgs> compliance,
        @Nullable Output<DeploymentNoteArgs> deployment,
        @Nullable Output<DiscoveryNoteArgs> discovery,
        @Nullable Output<DSSEAttestationNoteArgs> dsseAttestation,
        @Nullable Output<String> expirationTime,
        @Nullable Output<ImageNoteArgs> image,
        @Nullable Output<String> longDescription,
        Output<String> noteId,
        @Nullable Output<PackageNoteArgs> package_,
        @Nullable Output<String> project,
        @Nullable Output<List<String>> relatedNoteNames,
        @Nullable Output<List<RelatedUrlArgs>> relatedUrl,
        @Nullable Output<String> shortDescription,
        @Nullable Output<UpgradeNoteArgs> upgrade,
        @Nullable Output<VulnerabilityNoteArgs> vulnerability) {
        this.attestation = attestation;
        this.build = build;
        this.compliance = compliance;
        this.deployment = deployment;
        this.discovery = discovery;
        this.dsseAttestation = dsseAttestation;
        this.expirationTime = expirationTime;
        this.image = image;
        this.longDescription = longDescription;
        this.noteId = Objects.requireNonNull(noteId, "expected parameter 'noteId' to be non-null");
        this.package_ = package_;
        this.project = project;
        this.relatedNoteNames = relatedNoteNames;
        this.relatedUrl = relatedUrl;
        this.shortDescription = shortDescription;
        this.upgrade = upgrade;
        this.vulnerability = vulnerability;
    }

    private NoteArgs() {
        this.attestation = Codegen.empty();
        this.build = Codegen.empty();
        this.compliance = Codegen.empty();
        this.deployment = Codegen.empty();
        this.discovery = Codegen.empty();
        this.dsseAttestation = Codegen.empty();
        this.expirationTime = Codegen.empty();
        this.image = Codegen.empty();
        this.longDescription = Codegen.empty();
        this.noteId = Codegen.empty();
        this.package_ = Codegen.empty();
        this.project = Codegen.empty();
        this.relatedNoteNames = Codegen.empty();
        this.relatedUrl = Codegen.empty();
        this.shortDescription = Codegen.empty();
        this.upgrade = Codegen.empty();
        this.vulnerability = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AttestationNoteArgs> attestation;
        private @Nullable Output<BuildNoteArgs> build;
        private @Nullable Output<ComplianceNoteArgs> compliance;
        private @Nullable Output<DeploymentNoteArgs> deployment;
        private @Nullable Output<DiscoveryNoteArgs> discovery;
        private @Nullable Output<DSSEAttestationNoteArgs> dsseAttestation;
        private @Nullable Output<String> expirationTime;
        private @Nullable Output<ImageNoteArgs> image;
        private @Nullable Output<String> longDescription;
        private Output<String> noteId;
        private @Nullable Output<PackageNoteArgs> package_;
        private @Nullable Output<String> project;
        private @Nullable Output<List<String>> relatedNoteNames;
        private @Nullable Output<List<RelatedUrlArgs>> relatedUrl;
        private @Nullable Output<String> shortDescription;
        private @Nullable Output<UpgradeNoteArgs> upgrade;
        private @Nullable Output<VulnerabilityNoteArgs> vulnerability;

        public Builder() {
    	      // Empty
        }

        public Builder(NoteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestation = defaults.attestation;
    	      this.build = defaults.build;
    	      this.compliance = defaults.compliance;
    	      this.deployment = defaults.deployment;
    	      this.discovery = defaults.discovery;
    	      this.dsseAttestation = defaults.dsseAttestation;
    	      this.expirationTime = defaults.expirationTime;
    	      this.image = defaults.image;
    	      this.longDescription = defaults.longDescription;
    	      this.noteId = defaults.noteId;
    	      this.package_ = defaults.package_;
    	      this.project = defaults.project;
    	      this.relatedNoteNames = defaults.relatedNoteNames;
    	      this.relatedUrl = defaults.relatedUrl;
    	      this.shortDescription = defaults.shortDescription;
    	      this.upgrade = defaults.upgrade;
    	      this.vulnerability = defaults.vulnerability;
        }

        public Builder attestation(@Nullable Output<AttestationNoteArgs> attestation) {
            this.attestation = attestation;
            return this;
        }
        public Builder attestation(@Nullable AttestationNoteArgs attestation) {
            this.attestation = Codegen.ofNullable(attestation);
            return this;
        }
        public Builder build(@Nullable Output<BuildNoteArgs> build) {
            this.build = build;
            return this;
        }
        public Builder build(@Nullable BuildNoteArgs build) {
            this.build = Codegen.ofNullable(build);
            return this;
        }
        public Builder compliance(@Nullable Output<ComplianceNoteArgs> compliance) {
            this.compliance = compliance;
            return this;
        }
        public Builder compliance(@Nullable ComplianceNoteArgs compliance) {
            this.compliance = Codegen.ofNullable(compliance);
            return this;
        }
        public Builder deployment(@Nullable Output<DeploymentNoteArgs> deployment) {
            this.deployment = deployment;
            return this;
        }
        public Builder deployment(@Nullable DeploymentNoteArgs deployment) {
            this.deployment = Codegen.ofNullable(deployment);
            return this;
        }
        public Builder discovery(@Nullable Output<DiscoveryNoteArgs> discovery) {
            this.discovery = discovery;
            return this;
        }
        public Builder discovery(@Nullable DiscoveryNoteArgs discovery) {
            this.discovery = Codegen.ofNullable(discovery);
            return this;
        }
        public Builder dsseAttestation(@Nullable Output<DSSEAttestationNoteArgs> dsseAttestation) {
            this.dsseAttestation = dsseAttestation;
            return this;
        }
        public Builder dsseAttestation(@Nullable DSSEAttestationNoteArgs dsseAttestation) {
            this.dsseAttestation = Codegen.ofNullable(dsseAttestation);
            return this;
        }
        public Builder expirationTime(@Nullable Output<String> expirationTime) {
            this.expirationTime = expirationTime;
            return this;
        }
        public Builder expirationTime(@Nullable String expirationTime) {
            this.expirationTime = Codegen.ofNullable(expirationTime);
            return this;
        }
        public Builder image(@Nullable Output<ImageNoteArgs> image) {
            this.image = image;
            return this;
        }
        public Builder image(@Nullable ImageNoteArgs image) {
            this.image = Codegen.ofNullable(image);
            return this;
        }
        public Builder longDescription(@Nullable Output<String> longDescription) {
            this.longDescription = longDescription;
            return this;
        }
        public Builder longDescription(@Nullable String longDescription) {
            this.longDescription = Codegen.ofNullable(longDescription);
            return this;
        }
        public Builder noteId(Output<String> noteId) {
            this.noteId = Objects.requireNonNull(noteId);
            return this;
        }
        public Builder noteId(String noteId) {
            this.noteId = Output.of(Objects.requireNonNull(noteId));
            return this;
        }
        public Builder package_(@Nullable Output<PackageNoteArgs> package_) {
            this.package_ = package_;
            return this;
        }
        public Builder package_(@Nullable PackageNoteArgs package_) {
            this.package_ = Codegen.ofNullable(package_);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder relatedNoteNames(@Nullable Output<List<String>> relatedNoteNames) {
            this.relatedNoteNames = relatedNoteNames;
            return this;
        }
        public Builder relatedNoteNames(@Nullable List<String> relatedNoteNames) {
            this.relatedNoteNames = Codegen.ofNullable(relatedNoteNames);
            return this;
        }
        public Builder relatedNoteNames(String... relatedNoteNames) {
            return relatedNoteNames(List.of(relatedNoteNames));
        }
        public Builder relatedUrl(@Nullable Output<List<RelatedUrlArgs>> relatedUrl) {
            this.relatedUrl = relatedUrl;
            return this;
        }
        public Builder relatedUrl(@Nullable List<RelatedUrlArgs> relatedUrl) {
            this.relatedUrl = Codegen.ofNullable(relatedUrl);
            return this;
        }
        public Builder relatedUrl(RelatedUrlArgs... relatedUrl) {
            return relatedUrl(List.of(relatedUrl));
        }
        public Builder shortDescription(@Nullable Output<String> shortDescription) {
            this.shortDescription = shortDescription;
            return this;
        }
        public Builder shortDescription(@Nullable String shortDescription) {
            this.shortDescription = Codegen.ofNullable(shortDescription);
            return this;
        }
        public Builder upgrade(@Nullable Output<UpgradeNoteArgs> upgrade) {
            this.upgrade = upgrade;
            return this;
        }
        public Builder upgrade(@Nullable UpgradeNoteArgs upgrade) {
            this.upgrade = Codegen.ofNullable(upgrade);
            return this;
        }
        public Builder vulnerability(@Nullable Output<VulnerabilityNoteArgs> vulnerability) {
            this.vulnerability = vulnerability;
            return this;
        }
        public Builder vulnerability(@Nullable VulnerabilityNoteArgs vulnerability) {
            this.vulnerability = Codegen.ofNullable(vulnerability);
            return this;
        }        public NoteArgs build() {
            return new NoteArgs(attestation, build, compliance, deployment, discovery, dsseAttestation, expirationTime, image, longDescription, noteId, package_, project, relatedNoteNames, relatedUrl, shortDescription, upgrade, vulnerability);
        }
    }
}
