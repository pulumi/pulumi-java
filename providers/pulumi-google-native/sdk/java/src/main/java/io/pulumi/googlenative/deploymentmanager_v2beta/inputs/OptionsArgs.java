// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.deploymentmanager_v2beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.deploymentmanager_v2beta.inputs.AsyncOptionsArgs;
import io.pulumi.googlenative.deploymentmanager_v2beta.inputs.InputMappingArgs;
import io.pulumi.googlenative.deploymentmanager_v2beta.inputs.ValidationOptionsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Options allows customized resource handling by Deployment Manager.
 * 
 */
public final class OptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final OptionsArgs Empty = new OptionsArgs();

    /**
     * Options regarding how to thread async requests.
     * 
     */
    @Import(name="asyncOptions")
      private final @Nullable Output<List<AsyncOptionsArgs>> asyncOptions;

    public Output<List<AsyncOptionsArgs>> getAsyncOptions() {
        return this.asyncOptions == null ? Codegen.empty() : this.asyncOptions;
    }

    /**
     * The mappings that apply for requests.
     * 
     */
    @Import(name="inputMappings")
      private final @Nullable Output<List<InputMappingArgs>> inputMappings;

    public Output<List<InputMappingArgs>> getInputMappings() {
        return this.inputMappings == null ? Codegen.empty() : this.inputMappings;
    }

    /**
     * Options for how to validate and process properties on a resource.
     * 
     */
    @Import(name="validationOptions")
      private final @Nullable Output<ValidationOptionsArgs> validationOptions;

    public Output<ValidationOptionsArgs> getValidationOptions() {
        return this.validationOptions == null ? Codegen.empty() : this.validationOptions;
    }

    /**
     * Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
     * 
     */
    @Import(name="virtualProperties")
      private final @Nullable Output<String> virtualProperties;

    public Output<String> getVirtualProperties() {
        return this.virtualProperties == null ? Codegen.empty() : this.virtualProperties;
    }

    public OptionsArgs(
        @Nullable Output<List<AsyncOptionsArgs>> asyncOptions,
        @Nullable Output<List<InputMappingArgs>> inputMappings,
        @Nullable Output<ValidationOptionsArgs> validationOptions,
        @Nullable Output<String> virtualProperties) {
        this.asyncOptions = asyncOptions;
        this.inputMappings = inputMappings;
        this.validationOptions = validationOptions;
        this.virtualProperties = virtualProperties;
    }

    private OptionsArgs() {
        this.asyncOptions = Codegen.empty();
        this.inputMappings = Codegen.empty();
        this.validationOptions = Codegen.empty();
        this.virtualProperties = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AsyncOptionsArgs>> asyncOptions;
        private @Nullable Output<List<InputMappingArgs>> inputMappings;
        private @Nullable Output<ValidationOptionsArgs> validationOptions;
        private @Nullable Output<String> virtualProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(OptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asyncOptions = defaults.asyncOptions;
    	      this.inputMappings = defaults.inputMappings;
    	      this.validationOptions = defaults.validationOptions;
    	      this.virtualProperties = defaults.virtualProperties;
        }

        public Builder asyncOptions(@Nullable Output<List<AsyncOptionsArgs>> asyncOptions) {
            this.asyncOptions = asyncOptions;
            return this;
        }
        public Builder asyncOptions(@Nullable List<AsyncOptionsArgs> asyncOptions) {
            this.asyncOptions = Codegen.ofNullable(asyncOptions);
            return this;
        }
        public Builder asyncOptions(AsyncOptionsArgs... asyncOptions) {
            return asyncOptions(List.of(asyncOptions));
        }
        public Builder inputMappings(@Nullable Output<List<InputMappingArgs>> inputMappings) {
            this.inputMappings = inputMappings;
            return this;
        }
        public Builder inputMappings(@Nullable List<InputMappingArgs> inputMappings) {
            this.inputMappings = Codegen.ofNullable(inputMappings);
            return this;
        }
        public Builder inputMappings(InputMappingArgs... inputMappings) {
            return inputMappings(List.of(inputMappings));
        }
        public Builder validationOptions(@Nullable Output<ValidationOptionsArgs> validationOptions) {
            this.validationOptions = validationOptions;
            return this;
        }
        public Builder validationOptions(@Nullable ValidationOptionsArgs validationOptions) {
            this.validationOptions = Codegen.ofNullable(validationOptions);
            return this;
        }
        public Builder virtualProperties(@Nullable Output<String> virtualProperties) {
            this.virtualProperties = virtualProperties;
            return this;
        }
        public Builder virtualProperties(@Nullable String virtualProperties) {
            this.virtualProperties = Codegen.ofNullable(virtualProperties);
            return this;
        }        public OptionsArgs build() {
            return new OptionsArgs(asyncOptions, inputMappings, validationOptions, virtualProperties);
        }
    }
}
