// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the CertificateAuthority when issuing Certificates.
 * 
 */
public final class AllowedSubjectAltNamesArgs extends io.pulumi.resources.ResourceArgs {

    public static final AllowedSubjectAltNamesArgs Empty = new AllowedSubjectAltNamesArgs();

    /**
     * Optional. Specifies if to allow custom X509Extension values.
     * 
     */
    @Import(name="allowCustomSans")
      private final @Nullable Output<Boolean> allowCustomSans;

    public Output<Boolean> getAllowCustomSans() {
        return this.allowCustomSans == null ? Output.empty() : this.allowCustomSans;
    }

    /**
     * Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
     * 
     */
    @Import(name="allowGlobbingDnsWildcards")
      private final @Nullable Output<Boolean> allowGlobbingDnsWildcards;

    public Output<Boolean> getAllowGlobbingDnsWildcards() {
        return this.allowGlobbingDnsWildcards == null ? Output.empty() : this.allowGlobbingDnsWildcards;
    }

    /**
     * Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. `\*`). E.g. for globbed entries: `*bar.com` will allow `foo.bar.com`, but not `*.bar.com`, unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: `\*.bar.com` will allow `*.bar.com`, but not `foo.bar.com`.
     * 
     */
    @Import(name="allowedDnsNames")
      private final @Nullable Output<List<String>> allowedDnsNames;

    public Output<List<String>> getAllowedDnsNames() {
        return this.allowedDnsNames == null ? Output.empty() : this.allowedDnsNames;
    }

    /**
     * Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
     * 
     */
    @Import(name="allowedEmailAddresses")
      private final @Nullable Output<List<String>> allowedEmailAddresses;

    public Output<List<String>> getAllowedEmailAddresses() {
        return this.allowedEmailAddresses == null ? Output.empty() : this.allowedEmailAddresses;
    }

    /**
     * Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
     * 
     */
    @Import(name="allowedIps")
      private final @Nullable Output<List<String>> allowedIps;

    public Output<List<String>> getAllowedIps() {
        return this.allowedIps == null ? Output.empty() : this.allowedIps;
    }

    /**
     * Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
     * 
     */
    @Import(name="allowedUris")
      private final @Nullable Output<List<String>> allowedUris;

    public Output<List<String>> getAllowedUris() {
        return this.allowedUris == null ? Output.empty() : this.allowedUris;
    }

    public AllowedSubjectAltNamesArgs(
        @Nullable Output<Boolean> allowCustomSans,
        @Nullable Output<Boolean> allowGlobbingDnsWildcards,
        @Nullable Output<List<String>> allowedDnsNames,
        @Nullable Output<List<String>> allowedEmailAddresses,
        @Nullable Output<List<String>> allowedIps,
        @Nullable Output<List<String>> allowedUris) {
        this.allowCustomSans = allowCustomSans;
        this.allowGlobbingDnsWildcards = allowGlobbingDnsWildcards;
        this.allowedDnsNames = allowedDnsNames;
        this.allowedEmailAddresses = allowedEmailAddresses;
        this.allowedIps = allowedIps;
        this.allowedUris = allowedUris;
    }

    private AllowedSubjectAltNamesArgs() {
        this.allowCustomSans = Output.empty();
        this.allowGlobbingDnsWildcards = Output.empty();
        this.allowedDnsNames = Output.empty();
        this.allowedEmailAddresses = Output.empty();
        this.allowedIps = Output.empty();
        this.allowedUris = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AllowedSubjectAltNamesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowCustomSans;
        private @Nullable Output<Boolean> allowGlobbingDnsWildcards;
        private @Nullable Output<List<String>> allowedDnsNames;
        private @Nullable Output<List<String>> allowedEmailAddresses;
        private @Nullable Output<List<String>> allowedIps;
        private @Nullable Output<List<String>> allowedUris;

        public Builder() {
    	      // Empty
        }

        public Builder(AllowedSubjectAltNamesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowCustomSans = defaults.allowCustomSans;
    	      this.allowGlobbingDnsWildcards = defaults.allowGlobbingDnsWildcards;
    	      this.allowedDnsNames = defaults.allowedDnsNames;
    	      this.allowedEmailAddresses = defaults.allowedEmailAddresses;
    	      this.allowedIps = defaults.allowedIps;
    	      this.allowedUris = defaults.allowedUris;
        }

        public Builder allowCustomSans(@Nullable Output<Boolean> allowCustomSans) {
            this.allowCustomSans = allowCustomSans;
            return this;
        }

        public Builder allowCustomSans(@Nullable Boolean allowCustomSans) {
            this.allowCustomSans = Output.ofNullable(allowCustomSans);
            return this;
        }

        public Builder allowGlobbingDnsWildcards(@Nullable Output<Boolean> allowGlobbingDnsWildcards) {
            this.allowGlobbingDnsWildcards = allowGlobbingDnsWildcards;
            return this;
        }

        public Builder allowGlobbingDnsWildcards(@Nullable Boolean allowGlobbingDnsWildcards) {
            this.allowGlobbingDnsWildcards = Output.ofNullable(allowGlobbingDnsWildcards);
            return this;
        }

        public Builder allowedDnsNames(@Nullable Output<List<String>> allowedDnsNames) {
            this.allowedDnsNames = allowedDnsNames;
            return this;
        }

        public Builder allowedDnsNames(@Nullable List<String> allowedDnsNames) {
            this.allowedDnsNames = Output.ofNullable(allowedDnsNames);
            return this;
        }

        public Builder allowedEmailAddresses(@Nullable Output<List<String>> allowedEmailAddresses) {
            this.allowedEmailAddresses = allowedEmailAddresses;
            return this;
        }

        public Builder allowedEmailAddresses(@Nullable List<String> allowedEmailAddresses) {
            this.allowedEmailAddresses = Output.ofNullable(allowedEmailAddresses);
            return this;
        }

        public Builder allowedIps(@Nullable Output<List<String>> allowedIps) {
            this.allowedIps = allowedIps;
            return this;
        }

        public Builder allowedIps(@Nullable List<String> allowedIps) {
            this.allowedIps = Output.ofNullable(allowedIps);
            return this;
        }

        public Builder allowedUris(@Nullable Output<List<String>> allowedUris) {
            this.allowedUris = allowedUris;
            return this;
        }

        public Builder allowedUris(@Nullable List<String> allowedUris) {
            this.allowedUris = Output.ofNullable(allowedUris);
            return this;
        }
        public AllowedSubjectAltNamesArgs build() {
            return new AllowedSubjectAltNamesArgs(allowCustomSans, allowGlobbingDnsWildcards, allowedDnsNames, allowedEmailAddresses, allowedIps, allowedUris);
        }
    }
}
