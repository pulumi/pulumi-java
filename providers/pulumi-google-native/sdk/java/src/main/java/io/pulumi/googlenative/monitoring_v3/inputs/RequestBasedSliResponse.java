// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v3.inputs.DistributionCutResponse;
import io.pulumi.googlenative.monitoring_v3.inputs.TimeSeriesRatioResponse;
import java.util.Objects;


/**
 * Service Level Indicators for which atomic units of service are counted directly.
 * 
 */
public final class RequestBasedSliResponse extends io.pulumi.resources.InvokeArgs {

    public static final RequestBasedSliResponse Empty = new RequestBasedSliResponse();

    /**
     * distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
     * 
     */
    @InputImport(name="distributionCut", required=true)
      private final DistributionCutResponse distributionCut;

    public DistributionCutResponse getDistributionCut() {
        return this.distributionCut;
    }

    /**
     * good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
     * 
     */
    @InputImport(name="goodTotalRatio", required=true)
      private final TimeSeriesRatioResponse goodTotalRatio;

    public TimeSeriesRatioResponse getGoodTotalRatio() {
        return this.goodTotalRatio;
    }

    public RequestBasedSliResponse(
        DistributionCutResponse distributionCut,
        TimeSeriesRatioResponse goodTotalRatio) {
        this.distributionCut = Objects.requireNonNull(distributionCut, "expected parameter 'distributionCut' to be non-null");
        this.goodTotalRatio = Objects.requireNonNull(goodTotalRatio, "expected parameter 'goodTotalRatio' to be non-null");
    }

    private RequestBasedSliResponse() {
        this.distributionCut = null;
        this.goodTotalRatio = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RequestBasedSliResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionCutResponse distributionCut;
        private TimeSeriesRatioResponse goodTotalRatio;

        public Builder() {
    	      // Empty
        }

        public Builder(RequestBasedSliResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributionCut = defaults.distributionCut;
    	      this.goodTotalRatio = defaults.goodTotalRatio;
        }

        public Builder setDistributionCut(DistributionCutResponse distributionCut) {
            this.distributionCut = Objects.requireNonNull(distributionCut);
            return this;
        }

        public Builder setGoodTotalRatio(TimeSeriesRatioResponse goodTotalRatio) {
            this.goodTotalRatio = Objects.requireNonNull(goodTotalRatio);
            return this;
        }
        public RequestBasedSliResponse build() {
            return new RequestBasedSliResponse(distributionCut, goodTotalRatio);
        }
    }
}
