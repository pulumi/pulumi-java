// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.container_v1.inputs.NodeManagementArgs;
import io.pulumi.googlenative.container_v1.inputs.ShieldedInstanceConfigArgs;
import io.pulumi.googlenative.container_v1.inputs.UpgradeSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
 * 
 */
public final class AutoprovisioningNodePoolDefaultsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoprovisioningNodePoolDefaultsArgs Empty = new AutoprovisioningNodePoolDefaultsArgs();

    /**
     * The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
     * 
     */
    @InputImport(name="bootDiskKmsKey")
      private final @Nullable Input<String> bootDiskKmsKey;

    public Input<String> getBootDiskKmsKey() {
        return this.bootDiskKmsKey == null ? Input.empty() : this.bootDiskKmsKey;
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
     * 
     */
    @InputImport(name="diskSizeGb")
      private final @Nullable Input<Integer> diskSizeGb;

    public Input<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Input.empty() : this.diskSizeGb;
    }

    /**
     * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
     * 
     */
    @InputImport(name="diskType")
      private final @Nullable Input<String> diskType;

    public Input<String> getDiskType() {
        return this.diskType == null ? Input.empty() : this.diskType;
    }

    /**
     * The image type to use for NAP created node.
     * 
     */
    @InputImport(name="imageType")
      private final @Nullable Input<String> imageType;

    public Input<String> getImageType() {
        return this.imageType == null ? Input.empty() : this.imageType;
    }

    /**
     * Specifies the node management options for NAP created node-pools.
     * 
     */
    @InputImport(name="management")
      private final @Nullable Input<NodeManagementArgs> management;

    public Input<NodeManagementArgs> getManagement() {
        return this.management == null ? Input.empty() : this.management;
    }

    /**
     * Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
     * 
     */
    @InputImport(name="minCpuPlatform")
      private final @Nullable Input<String> minCpuPlatform;

    public Input<String> getMinCpuPlatform() {
        return this.minCpuPlatform == null ? Input.empty() : this.minCpuPlatform;
    }

    /**
     * Scopes that are used by NAP when creating node pools.
     * 
     */
    @InputImport(name="oauthScopes")
      private final @Nullable Input<List<String>> oauthScopes;

    public Input<List<String>> getOauthScopes() {
        return this.oauthScopes == null ? Input.empty() : this.oauthScopes;
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs.
     * 
     */
    @InputImport(name="serviceAccount")
      private final @Nullable Input<String> serviceAccount;

    public Input<String> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    /**
     * Shielded Instance options.
     * 
     */
    @InputImport(name="shieldedInstanceConfig")
      private final @Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Input<ShieldedInstanceConfigArgs> getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Input.empty() : this.shieldedInstanceConfig;
    }

    /**
     * Specifies the upgrade settings for NAP created node pools
     * 
     */
    @InputImport(name="upgradeSettings")
      private final @Nullable Input<UpgradeSettingsArgs> upgradeSettings;

    public Input<UpgradeSettingsArgs> getUpgradeSettings() {
        return this.upgradeSettings == null ? Input.empty() : this.upgradeSettings;
    }

    public AutoprovisioningNodePoolDefaultsArgs(
        @Nullable Input<String> bootDiskKmsKey,
        @Nullable Input<Integer> diskSizeGb,
        @Nullable Input<String> diskType,
        @Nullable Input<String> imageType,
        @Nullable Input<NodeManagementArgs> management,
        @Nullable Input<String> minCpuPlatform,
        @Nullable Input<List<String>> oauthScopes,
        @Nullable Input<String> serviceAccount,
        @Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig,
        @Nullable Input<UpgradeSettingsArgs> upgradeSettings) {
        this.bootDiskKmsKey = bootDiskKmsKey;
        this.diskSizeGb = diskSizeGb;
        this.diskType = diskType;
        this.imageType = imageType;
        this.management = management;
        this.minCpuPlatform = minCpuPlatform;
        this.oauthScopes = oauthScopes;
        this.serviceAccount = serviceAccount;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.upgradeSettings = upgradeSettings;
    }

    private AutoprovisioningNodePoolDefaultsArgs() {
        this.bootDiskKmsKey = Input.empty();
        this.diskSizeGb = Input.empty();
        this.diskType = Input.empty();
        this.imageType = Input.empty();
        this.management = Input.empty();
        this.minCpuPlatform = Input.empty();
        this.oauthScopes = Input.empty();
        this.serviceAccount = Input.empty();
        this.shieldedInstanceConfig = Input.empty();
        this.upgradeSettings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoprovisioningNodePoolDefaultsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> bootDiskKmsKey;
        private @Nullable Input<Integer> diskSizeGb;
        private @Nullable Input<String> diskType;
        private @Nullable Input<String> imageType;
        private @Nullable Input<NodeManagementArgs> management;
        private @Nullable Input<String> minCpuPlatform;
        private @Nullable Input<List<String>> oauthScopes;
        private @Nullable Input<String> serviceAccount;
        private @Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig;
        private @Nullable Input<UpgradeSettingsArgs> upgradeSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoprovisioningNodePoolDefaultsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootDiskKmsKey = defaults.bootDiskKmsKey;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.imageType = defaults.imageType;
    	      this.management = defaults.management;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.upgradeSettings = defaults.upgradeSettings;
        }

        public Builder bootDiskKmsKey(@Nullable Input<String> bootDiskKmsKey) {
            this.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }

        public Builder bootDiskKmsKey(@Nullable String bootDiskKmsKey) {
            this.bootDiskKmsKey = Input.ofNullable(bootDiskKmsKey);
            return this;
        }

        public Builder diskSizeGb(@Nullable Input<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Input.ofNullable(diskSizeGb);
            return this;
        }

        public Builder diskType(@Nullable Input<String> diskType) {
            this.diskType = diskType;
            return this;
        }

        public Builder diskType(@Nullable String diskType) {
            this.diskType = Input.ofNullable(diskType);
            return this;
        }

        public Builder imageType(@Nullable Input<String> imageType) {
            this.imageType = imageType;
            return this;
        }

        public Builder imageType(@Nullable String imageType) {
            this.imageType = Input.ofNullable(imageType);
            return this;
        }

        public Builder management(@Nullable Input<NodeManagementArgs> management) {
            this.management = management;
            return this;
        }

        public Builder management(@Nullable NodeManagementArgs management) {
            this.management = Input.ofNullable(management);
            return this;
        }

        public Builder minCpuPlatform(@Nullable Input<String> minCpuPlatform) {
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }

        public Builder minCpuPlatform(@Nullable String minCpuPlatform) {
            this.minCpuPlatform = Input.ofNullable(minCpuPlatform);
            return this;
        }

        public Builder oauthScopes(@Nullable Input<List<String>> oauthScopes) {
            this.oauthScopes = oauthScopes;
            return this;
        }

        public Builder oauthScopes(@Nullable List<String> oauthScopes) {
            this.oauthScopes = Input.ofNullable(oauthScopes);
            return this;
        }

        public Builder serviceAccount(@Nullable Input<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder shieldedInstanceConfig(@Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder shieldedInstanceConfig(@Nullable ShieldedInstanceConfigArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Input.ofNullable(shieldedInstanceConfig);
            return this;
        }

        public Builder upgradeSettings(@Nullable Input<UpgradeSettingsArgs> upgradeSettings) {
            this.upgradeSettings = upgradeSettings;
            return this;
        }

        public Builder upgradeSettings(@Nullable UpgradeSettingsArgs upgradeSettings) {
            this.upgradeSettings = Input.ofNullable(upgradeSettings);
            return this;
        }
        public AutoprovisioningNodePoolDefaultsArgs build() {
            return new AutoprovisioningNodePoolDefaultsArgs(bootDiskKmsKey, diskSizeGb, diskType, imageType, management, minCpuPlatform, oauthScopes, serviceAccount, shieldedInstanceConfig, upgradeSettings);
        }
    }
}
