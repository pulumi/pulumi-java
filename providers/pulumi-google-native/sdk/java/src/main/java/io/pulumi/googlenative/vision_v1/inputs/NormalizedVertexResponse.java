// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vision_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.util.Objects;


/**
 * A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.
 * 
 */
public final class NormalizedVertexResponse extends io.pulumi.resources.InvokeArgs {

    public static final NormalizedVertexResponse Empty = new NormalizedVertexResponse();

    /**
     * X coordinate.
     * 
     */
    @InputImport(name="x", required=true)
      private final Double x;

    public Double getX() {
        return this.x;
    }

    /**
     * Y coordinate.
     * 
     */
    @InputImport(name="y", required=true)
      private final Double y;

    public Double getY() {
        return this.y;
    }

    public NormalizedVertexResponse(
        Double x,
        Double y) {
        this.x = Objects.requireNonNull(x, "expected parameter 'x' to be non-null");
        this.y = Objects.requireNonNull(y, "expected parameter 'y' to be non-null");
    }

    private NormalizedVertexResponse() {
        this.x = null;
        this.y = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NormalizedVertexResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double x;
        private Double y;

        public Builder() {
    	      // Empty
        }

        public Builder(NormalizedVertexResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        public Builder x(Double x) {
            this.x = Objects.requireNonNull(x);
            return this;
        }

        public Builder y(Double y) {
            this.y = Objects.requireNonNull(y);
            return this;
        }
        public NormalizedVertexResponse build() {
            return new NormalizedVertexResponse(x, y);
        }
    }
}
