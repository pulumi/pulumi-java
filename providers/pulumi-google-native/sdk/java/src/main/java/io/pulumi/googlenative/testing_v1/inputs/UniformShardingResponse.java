// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;


/**
 * Uniformly shards test cases given a total number of shards. For Instrumentation test, it will be translated to "-e numShard" "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying these sharding arguments via environment_variables is invalid.
 * 
 */
public final class UniformShardingResponse extends io.pulumi.resources.InvokeArgs {

    public static final UniformShardingResponse Empty = new UniformShardingResponse();

    /**
     * Total number of shards. When any physical devices are selected, the number must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
     * 
     */
    @InputImport(name="numShards", required=true)
      private final Integer numShards;

    public Integer getNumShards() {
        return this.numShards;
    }

    public UniformShardingResponse(Integer numShards) {
        this.numShards = Objects.requireNonNull(numShards, "expected parameter 'numShards' to be non-null");
    }

    private UniformShardingResponse() {
        this.numShards = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UniformShardingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer numShards;

        public Builder() {
    	      // Empty
        }

        public Builder(UniformShardingResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.numShards = defaults.numShards;
        }

        public Builder setNumShards(Integer numShards) {
            this.numShards = Objects.requireNonNull(numShards);
            return this;
        }
        public UniformShardingResponse build() {
            return new UniformShardingResponse(numShards);
        }
    }
}
