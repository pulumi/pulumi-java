// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.monitoring_v3.inputs.LogMatchArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.MetricAbsenceArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.MetricThresholdArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.MonitoringQueryLanguageConditionArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
 * 
 */
public final class ConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConditionArgs Empty = new ConditionArgs();

    /**
     * A condition that checks that a time series continues to receive new data points.
     * 
     */
    @Import(name="conditionAbsent")
      private final @Nullable Output<MetricAbsenceArgs> conditionAbsent;

    public Output<MetricAbsenceArgs> getConditionAbsent() {
        return this.conditionAbsent == null ? Output.empty() : this.conditionAbsent;
    }

    /**
     * A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
     * 
     */
    @Import(name="conditionMatchedLog")
      private final @Nullable Output<LogMatchArgs> conditionMatchedLog;

    public Output<LogMatchArgs> getConditionMatchedLog() {
        return this.conditionMatchedLog == null ? Output.empty() : this.conditionMatchedLog;
    }

    /**
     * A condition that uses the Monitoring Query Language to define alerts.
     * 
     */
    @Import(name="conditionMonitoringQueryLanguage")
      private final @Nullable Output<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage;

    public Output<MonitoringQueryLanguageConditionArgs> getConditionMonitoringQueryLanguage() {
        return this.conditionMonitoringQueryLanguage == null ? Output.empty() : this.conditionMonitoringQueryLanguage;
    }

    /**
     * A condition that compares a time series against a threshold.
     * 
     */
    @Import(name="conditionThreshold")
      private final @Nullable Output<MetricThresholdArgs> conditionThreshold;

    public Output<MetricThresholdArgs> getConditionThreshold() {
        return this.conditionThreshold == null ? Output.empty() : this.conditionThreshold;
    }

    /**
     * A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Stackdriver Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Stackdriver Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    public ConditionArgs(
        @Nullable Output<MetricAbsenceArgs> conditionAbsent,
        @Nullable Output<LogMatchArgs> conditionMatchedLog,
        @Nullable Output<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage,
        @Nullable Output<MetricThresholdArgs> conditionThreshold,
        @Nullable Output<String> displayName,
        @Nullable Output<String> name) {
        this.conditionAbsent = conditionAbsent;
        this.conditionMatchedLog = conditionMatchedLog;
        this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
        this.conditionThreshold = conditionThreshold;
        this.displayName = displayName;
        this.name = name;
    }

    private ConditionArgs() {
        this.conditionAbsent = Output.empty();
        this.conditionMatchedLog = Output.empty();
        this.conditionMonitoringQueryLanguage = Output.empty();
        this.conditionThreshold = Output.empty();
        this.displayName = Output.empty();
        this.name = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<MetricAbsenceArgs> conditionAbsent;
        private @Nullable Output<LogMatchArgs> conditionMatchedLog;
        private @Nullable Output<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage;
        private @Nullable Output<MetricThresholdArgs> conditionThreshold;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionAbsent = defaults.conditionAbsent;
    	      this.conditionMatchedLog = defaults.conditionMatchedLog;
    	      this.conditionMonitoringQueryLanguage = defaults.conditionMonitoringQueryLanguage;
    	      this.conditionThreshold = defaults.conditionThreshold;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
        }

        public Builder conditionAbsent(@Nullable Output<MetricAbsenceArgs> conditionAbsent) {
            this.conditionAbsent = conditionAbsent;
            return this;
        }
        public Builder conditionAbsent(@Nullable MetricAbsenceArgs conditionAbsent) {
            this.conditionAbsent = Output.ofNullable(conditionAbsent);
            return this;
        }
        public Builder conditionMatchedLog(@Nullable Output<LogMatchArgs> conditionMatchedLog) {
            this.conditionMatchedLog = conditionMatchedLog;
            return this;
        }
        public Builder conditionMatchedLog(@Nullable LogMatchArgs conditionMatchedLog) {
            this.conditionMatchedLog = Output.ofNullable(conditionMatchedLog);
            return this;
        }
        public Builder conditionMonitoringQueryLanguage(@Nullable Output<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
            return this;
        }
        public Builder conditionMonitoringQueryLanguage(@Nullable MonitoringQueryLanguageConditionArgs conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = Output.ofNullable(conditionMonitoringQueryLanguage);
            return this;
        }
        public Builder conditionThreshold(@Nullable Output<MetricThresholdArgs> conditionThreshold) {
            this.conditionThreshold = conditionThreshold;
            return this;
        }
        public Builder conditionThreshold(@Nullable MetricThresholdArgs conditionThreshold) {
            this.conditionThreshold = Output.ofNullable(conditionThreshold);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }        public ConditionArgs build() {
            return new ConditionArgs(conditionAbsent, conditionMatchedLog, conditionMonitoringQueryLanguage, conditionThreshold, displayName, name);
        }
    }
}
