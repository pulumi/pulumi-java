// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v3.inputs.LogMatchArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.MetricAbsenceArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.MetricThresholdArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.MonitoringQueryLanguageConditionArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
 * 
 */
public final class ConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConditionArgs Empty = new ConditionArgs();

    /**
     * A condition that checks that a time series continues to receive new data points.
     * 
     */
    @InputImport(name="conditionAbsent")
    private final @Nullable Input<MetricAbsenceArgs> conditionAbsent;

    public Input<MetricAbsenceArgs> getConditionAbsent() {
        return this.conditionAbsent == null ? Input.empty() : this.conditionAbsent;
    }

    /**
     * A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
     * 
     */
    @InputImport(name="conditionMatchedLog")
    private final @Nullable Input<LogMatchArgs> conditionMatchedLog;

    public Input<LogMatchArgs> getConditionMatchedLog() {
        return this.conditionMatchedLog == null ? Input.empty() : this.conditionMatchedLog;
    }

    /**
     * A condition that uses the Monitoring Query Language to define alerts.
     * 
     */
    @InputImport(name="conditionMonitoringQueryLanguage")
    private final @Nullable Input<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage;

    public Input<MonitoringQueryLanguageConditionArgs> getConditionMonitoringQueryLanguage() {
        return this.conditionMonitoringQueryLanguage == null ? Input.empty() : this.conditionMonitoringQueryLanguage;
    }

    /**
     * A condition that compares a time series against a threshold.
     * 
     */
    @InputImport(name="conditionThreshold")
    private final @Nullable Input<MetricThresholdArgs> conditionThreshold;

    public Input<MetricThresholdArgs> getConditionThreshold() {
        return this.conditionThreshold == null ? Input.empty() : this.conditionThreshold;
    }

    /**
     * A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Stackdriver Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Stackdriver Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    public ConditionArgs(
        @Nullable Input<MetricAbsenceArgs> conditionAbsent,
        @Nullable Input<LogMatchArgs> conditionMatchedLog,
        @Nullable Input<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage,
        @Nullable Input<MetricThresholdArgs> conditionThreshold,
        @Nullable Input<String> displayName,
        @Nullable Input<String> name) {
        this.conditionAbsent = conditionAbsent;
        this.conditionMatchedLog = conditionMatchedLog;
        this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
        this.conditionThreshold = conditionThreshold;
        this.displayName = displayName;
        this.name = name;
    }

    private ConditionArgs() {
        this.conditionAbsent = Input.empty();
        this.conditionMatchedLog = Input.empty();
        this.conditionMonitoringQueryLanguage = Input.empty();
        this.conditionThreshold = Input.empty();
        this.displayName = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<MetricAbsenceArgs> conditionAbsent;
        private @Nullable Input<LogMatchArgs> conditionMatchedLog;
        private @Nullable Input<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage;
        private @Nullable Input<MetricThresholdArgs> conditionThreshold;
        private @Nullable Input<String> displayName;
        private @Nullable Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionAbsent = defaults.conditionAbsent;
    	      this.conditionMatchedLog = defaults.conditionMatchedLog;
    	      this.conditionMonitoringQueryLanguage = defaults.conditionMonitoringQueryLanguage;
    	      this.conditionThreshold = defaults.conditionThreshold;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
        }

        public Builder setConditionAbsent(@Nullable Input<MetricAbsenceArgs> conditionAbsent) {
            this.conditionAbsent = conditionAbsent;
            return this;
        }

        public Builder setConditionAbsent(@Nullable MetricAbsenceArgs conditionAbsent) {
            this.conditionAbsent = Input.ofNullable(conditionAbsent);
            return this;
        }

        public Builder setConditionMatchedLog(@Nullable Input<LogMatchArgs> conditionMatchedLog) {
            this.conditionMatchedLog = conditionMatchedLog;
            return this;
        }

        public Builder setConditionMatchedLog(@Nullable LogMatchArgs conditionMatchedLog) {
            this.conditionMatchedLog = Input.ofNullable(conditionMatchedLog);
            return this;
        }

        public Builder setConditionMonitoringQueryLanguage(@Nullable Input<MonitoringQueryLanguageConditionArgs> conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
            return this;
        }

        public Builder setConditionMonitoringQueryLanguage(@Nullable MonitoringQueryLanguageConditionArgs conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = Input.ofNullable(conditionMonitoringQueryLanguage);
            return this;
        }

        public Builder setConditionThreshold(@Nullable Input<MetricThresholdArgs> conditionThreshold) {
            this.conditionThreshold = conditionThreshold;
            return this;
        }

        public Builder setConditionThreshold(@Nullable MetricThresholdArgs conditionThreshold) {
            this.conditionThreshold = Input.ofNullable(conditionThreshold);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public ConditionArgs build() {
            return new ConditionArgs(conditionAbsent, conditionMatchedLog, conditionMonitoringQueryLanguage, conditionThreshold, displayName, name);
        }
    }
}
