// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DocumentOccurrenceResponse extends io.pulumi.resources.InvokeArgs {

    public static final DocumentOccurrenceResponse Empty = new DocumentOccurrenceResponse();

    @InputImport(name="createTime", required=true)
    private final String createTime;

    public String getCreateTime() {
        return this.createTime;
    }

    @InputImport(name="creatorComment", required=true)
    private final String creatorComment;

    public String getCreatorComment() {
        return this.creatorComment;
    }

    @InputImport(name="creators", required=true)
    private final List<String> creators;

    public List<String> getCreators() {
        return this.creators;
    }

    @InputImport(name="documentComment", required=true)
    private final String documentComment;

    public String getDocumentComment() {
        return this.documentComment;
    }

    @InputImport(name="externalDocumentRefs", required=true)
    private final List<String> externalDocumentRefs;

    public List<String> getExternalDocumentRefs() {
        return this.externalDocumentRefs;
    }

    @InputImport(name="licenseListVersion", required=true)
    private final String licenseListVersion;

    public String getLicenseListVersion() {
        return this.licenseListVersion;
    }

    @InputImport(name="namespace", required=true)
    private final String namespace;

    public String getNamespace() {
        return this.namespace;
    }

    @InputImport(name="title", required=true)
    private final String title;

    public String getTitle() {
        return this.title;
    }

    public DocumentOccurrenceResponse(
        String createTime,
        String creatorComment,
        List<String> creators,
        String documentComment,
        List<String> externalDocumentRefs,
        String licenseListVersion,
        String namespace,
        String title) {
        this.createTime = Objects.requireNonNull(createTime, "expected parameter 'createTime' to be non-null");
        this.creatorComment = Objects.requireNonNull(creatorComment, "expected parameter 'creatorComment' to be non-null");
        this.creators = Objects.requireNonNull(creators, "expected parameter 'creators' to be non-null");
        this.documentComment = Objects.requireNonNull(documentComment, "expected parameter 'documentComment' to be non-null");
        this.externalDocumentRefs = Objects.requireNonNull(externalDocumentRefs, "expected parameter 'externalDocumentRefs' to be non-null");
        this.licenseListVersion = Objects.requireNonNull(licenseListVersion, "expected parameter 'licenseListVersion' to be non-null");
        this.namespace = Objects.requireNonNull(namespace, "expected parameter 'namespace' to be non-null");
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
    }

    private DocumentOccurrenceResponse() {
        this.createTime = null;
        this.creatorComment = null;
        this.creators = List.of();
        this.documentComment = null;
        this.externalDocumentRefs = List.of();
        this.licenseListVersion = null;
        this.namespace = null;
        this.title = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String creatorComment;
        private List<String> creators;
        private String documentComment;
        private List<String> externalDocumentRefs;
        private String licenseListVersion;
        private String namespace;
        private String title;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentOccurrenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.creatorComment = defaults.creatorComment;
    	      this.creators = defaults.creators;
    	      this.documentComment = defaults.documentComment;
    	      this.externalDocumentRefs = defaults.externalDocumentRefs;
    	      this.licenseListVersion = defaults.licenseListVersion;
    	      this.namespace = defaults.namespace;
    	      this.title = defaults.title;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCreatorComment(String creatorComment) {
            this.creatorComment = Objects.requireNonNull(creatorComment);
            return this;
        }

        public Builder setCreators(List<String> creators) {
            this.creators = Objects.requireNonNull(creators);
            return this;
        }

        public Builder setDocumentComment(String documentComment) {
            this.documentComment = Objects.requireNonNull(documentComment);
            return this;
        }

        public Builder setExternalDocumentRefs(List<String> externalDocumentRefs) {
            this.externalDocumentRefs = Objects.requireNonNull(externalDocumentRefs);
            return this;
        }

        public Builder setLicenseListVersion(String licenseListVersion) {
            this.licenseListVersion = Objects.requireNonNull(licenseListVersion);
            return this;
        }

        public Builder setNamespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public DocumentOccurrenceResponse build() {
            return new DocumentOccurrenceResponse(createTime, creatorComment, creators, documentComment, externalDocumentRefs, licenseListVersion, namespace, title);
        }
    }
}
