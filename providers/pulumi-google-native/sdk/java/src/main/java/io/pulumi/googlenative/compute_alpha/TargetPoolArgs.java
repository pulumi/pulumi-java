// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.enums.TargetPoolSessionAffinity;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TargetPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final TargetPoolArgs Empty = new TargetPoolArgs();

    /**
     * The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1]. backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
     * 
     */
    @InputImport(name="backupPool")
      private final @Nullable Output<String> backupPool;

    public Output<String> getBackupPool() {
        return this.backupPool == null ? Output.empty() : this.backupPool;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1]. If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
     * 
     */
    @InputImport(name="failoverRatio")
      private final @Nullable Output<Double> failoverRatio;

    public Output<Double> getFailoverRatio() {
        return this.failoverRatio == null ? Output.empty() : this.failoverRatio;
    }

    /**
     * The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. Only legacy HttpHealthChecks are supported. Only one health check may be specified.
     * 
     */
    @InputImport(name="healthChecks")
      private final @Nullable Output<List<String>> healthChecks;

    public Output<List<String>> getHealthChecks() {
        return this.healthChecks == null ? Output.empty() : this.healthChecks;
    }

    /**
     * A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool.
     * 
     */
    @InputImport(name="instances")
      private final @Nullable Output<List<String>> instances;

    public Output<List<String>> getInstances() {
        return this.instances == null ? Output.empty() : this.instances;
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @InputImport(name="region", required=true)
      private final Output<String> region;

    public Output<String> getRegion() {
        return this.region;
    }

    @InputImport(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    /**
     * Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
     * 
     */
    @InputImport(name="sessionAffinity")
      private final @Nullable Output<TargetPoolSessionAffinity> sessionAffinity;

    public Output<TargetPoolSessionAffinity> getSessionAffinity() {
        return this.sessionAffinity == null ? Output.empty() : this.sessionAffinity;
    }

    public TargetPoolArgs(
        @Nullable Output<String> backupPool,
        @Nullable Output<String> description,
        @Nullable Output<Double> failoverRatio,
        @Nullable Output<List<String>> healthChecks,
        @Nullable Output<List<String>> instances,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<String> region,
        @Nullable Output<String> requestId,
        @Nullable Output<TargetPoolSessionAffinity> sessionAffinity) {
        this.backupPool = backupPool;
        this.description = description;
        this.failoverRatio = failoverRatio;
        this.healthChecks = healthChecks;
        this.instances = instances;
        this.name = name;
        this.project = project;
        this.region = Objects.requireNonNull(region, "expected parameter 'region' to be non-null");
        this.requestId = requestId;
        this.sessionAffinity = sessionAffinity;
    }

    private TargetPoolArgs() {
        this.backupPool = Output.empty();
        this.description = Output.empty();
        this.failoverRatio = Output.empty();
        this.healthChecks = Output.empty();
        this.instances = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.region = Output.empty();
        this.requestId = Output.empty();
        this.sessionAffinity = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> backupPool;
        private @Nullable Output<String> description;
        private @Nullable Output<Double> failoverRatio;
        private @Nullable Output<List<String>> healthChecks;
        private @Nullable Output<List<String>> instances;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<String> region;
        private @Nullable Output<String> requestId;
        private @Nullable Output<TargetPoolSessionAffinity> sessionAffinity;

        public Builder() {
    	      // Empty
        }

        public Builder(TargetPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupPool = defaults.backupPool;
    	      this.description = defaults.description;
    	      this.failoverRatio = defaults.failoverRatio;
    	      this.healthChecks = defaults.healthChecks;
    	      this.instances = defaults.instances;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.requestId = defaults.requestId;
    	      this.sessionAffinity = defaults.sessionAffinity;
        }

        public Builder backupPool(@Nullable Output<String> backupPool) {
            this.backupPool = backupPool;
            return this;
        }

        public Builder backupPool(@Nullable String backupPool) {
            this.backupPool = Output.ofNullable(backupPool);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder failoverRatio(@Nullable Output<Double> failoverRatio) {
            this.failoverRatio = failoverRatio;
            return this;
        }

        public Builder failoverRatio(@Nullable Double failoverRatio) {
            this.failoverRatio = Output.ofNullable(failoverRatio);
            return this;
        }

        public Builder healthChecks(@Nullable Output<List<String>> healthChecks) {
            this.healthChecks = healthChecks;
            return this;
        }

        public Builder healthChecks(@Nullable List<String> healthChecks) {
            this.healthChecks = Output.ofNullable(healthChecks);
            return this;
        }

        public Builder instances(@Nullable Output<List<String>> instances) {
            this.instances = instances;
            return this;
        }

        public Builder instances(@Nullable List<String> instances) {
            this.instances = Output.ofNullable(instances);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder region(Output<String> region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder region(String region) {
            this.region = Output.of(Objects.requireNonNull(region));
            return this;
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }

        public Builder sessionAffinity(@Nullable Output<TargetPoolSessionAffinity> sessionAffinity) {
            this.sessionAffinity = sessionAffinity;
            return this;
        }

        public Builder sessionAffinity(@Nullable TargetPoolSessionAffinity sessionAffinity) {
            this.sessionAffinity = Output.ofNullable(sessionAffinity);
            return this;
        }
        public TargetPoolArgs build() {
            return new TargetPoolArgs(backupPool, description, failoverRatio, healthChecks, instances, name, project, region, requestId, sessionAffinity);
        }
    }
}
