// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.containeranalysis_v1beta1.enums.VersionKind;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Version contains structured information about the version of a package.
 * 
 */
public final class VersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VersionArgs Empty = new VersionArgs();

    /**
     * Used to correct mistakes in the version numbering scheme.
     * 
     */
    @Import(name="epoch")
      private final @Nullable Output<Integer> epoch;

    public Output<Integer> epoch() {
        return this.epoch == null ? Codegen.empty() : this.epoch;
    }

    /**
     * Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
     * 
     */
    @Import(name="inclusive")
      private final @Nullable Output<Boolean> inclusive;

    public Output<Boolean> inclusive() {
        return this.inclusive == null ? Codegen.empty() : this.inclusive;
    }

    /**
     * Distinguishes between sentinel MIN/MAX versions and normal versions.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<VersionKind> kind;

    public Output<VersionKind> kind() {
        return this.kind;
    }

    /**
     * Required only when version kind is NORMAL. The main part of the version name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The iteration of the package build from the above version.
     * 
     */
    @Import(name="revision")
      private final @Nullable Output<String> revision;

    public Output<String> revision() {
        return this.revision == null ? Codegen.empty() : this.revision;
    }

    public VersionArgs(
        @Nullable Output<Integer> epoch,
        @Nullable Output<Boolean> inclusive,
        Output<VersionKind> kind,
        @Nullable Output<String> name,
        @Nullable Output<String> revision) {
        this.epoch = epoch;
        this.inclusive = inclusive;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.name = name;
        this.revision = revision;
    }

    private VersionArgs() {
        this.epoch = Codegen.empty();
        this.inclusive = Codegen.empty();
        this.kind = Codegen.empty();
        this.name = Codegen.empty();
        this.revision = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> epoch;
        private @Nullable Output<Boolean> inclusive;
        private Output<VersionKind> kind;
        private @Nullable Output<String> name;
        private @Nullable Output<String> revision;

        public Builder() {
    	      // Empty
        }

        public Builder(VersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.epoch = defaults.epoch;
    	      this.inclusive = defaults.inclusive;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.revision = defaults.revision;
        }

        public Builder epoch(@Nullable Output<Integer> epoch) {
            this.epoch = epoch;
            return this;
        }
        public Builder epoch(@Nullable Integer epoch) {
            this.epoch = Codegen.ofNullable(epoch);
            return this;
        }
        public Builder inclusive(@Nullable Output<Boolean> inclusive) {
            this.inclusive = inclusive;
            return this;
        }
        public Builder inclusive(@Nullable Boolean inclusive) {
            this.inclusive = Codegen.ofNullable(inclusive);
            return this;
        }
        public Builder kind(Output<VersionKind> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(VersionKind kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder revision(@Nullable Output<String> revision) {
            this.revision = revision;
            return this;
        }
        public Builder revision(@Nullable String revision) {
            this.revision = Codegen.ofNullable(revision);
            return this;
        }        public VersionArgs build() {
            return new VersionArgs(epoch, inclusive, kind, name, revision);
        }
    }
}
