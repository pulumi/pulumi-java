// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.container_v1.inputs.MaxPodsConstraintArgs;
import io.pulumi.googlenative.container_v1.inputs.NodeConfigArgs;
import io.pulumi.googlenative.container_v1.inputs.NodeManagementArgs;
import io.pulumi.googlenative.container_v1.inputs.NodeNetworkConfigArgs;
import io.pulumi.googlenative.container_v1.inputs.NodePoolAutoscalingArgs;
import io.pulumi.googlenative.container_v1.inputs.StatusConditionArgs;
import io.pulumi.googlenative.container_v1.inputs.UpgradeSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NodePoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final NodePoolArgs Empty = new NodePoolArgs();

    /**
     * Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
     * 
     */
    @Import(name="autoscaling")
      private final @Nullable Output<NodePoolAutoscalingArgs> autoscaling;

    public Output<NodePoolAutoscalingArgs> getAutoscaling() {
        return this.autoscaling == null ? Codegen.empty() : this.autoscaling;
    }

    @Import(name="clusterId", required=true)
      private final Output<String> clusterId;

    public Output<String> getClusterId() {
        return this.clusterId;
    }

    /**
     * Which conditions caused the current node pool state.
     * 
     */
    @Import(name="conditions")
      private final @Nullable Output<List<StatusConditionArgs>> conditions;

    public Output<List<StatusConditionArgs>> getConditions() {
        return this.conditions == null ? Codegen.empty() : this.conditions;
    }

    /**
     * The node configuration of the pool.
     * 
     */
    @Import(name="config")
      private final @Nullable Output<NodeConfigArgs> config;

    public Output<NodeConfigArgs> getConfig() {
        return this.config == null ? Codegen.empty() : this.config;
    }

    /**
     * The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
     * 
     */
    @Import(name="initialNodeCount")
      private final @Nullable Output<Integer> initialNodeCount;

    public Output<Integer> getInitialNodeCount() {
        return this.initialNodeCount == null ? Codegen.empty() : this.initialNodeCount;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
     * 
     */
    @Import(name="locations")
      private final @Nullable Output<List<String>> locations;

    public Output<List<String>> getLocations() {
        return this.locations == null ? Codegen.empty() : this.locations;
    }

    /**
     * NodeManagement configuration for this NodePool.
     * 
     */
    @Import(name="management")
      private final @Nullable Output<NodeManagementArgs> management;

    public Output<NodeManagementArgs> getManagement() {
        return this.management == null ? Codegen.empty() : this.management;
    }

    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint")
      private final @Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint;

    public Output<MaxPodsConstraintArgs> getMaxPodsConstraint() {
        return this.maxPodsConstraint == null ? Codegen.empty() : this.maxPodsConstraint;
    }

    /**
     * The name of the node pool.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     * 
     */
    @Import(name="networkConfig")
      private final @Nullable Output<NodeNetworkConfigArgs> networkConfig;

    public Output<NodeNetworkConfigArgs> getNetworkConfig() {
        return this.networkConfig == null ? Codegen.empty() : this.networkConfig;
    }

    /**
     * The parent (project, location, cluster id) where the node pool will be created. Specified in the format `projects/*{@literal /}locations/*{@literal /}clusters/*`.
     * 
     */
    @Import(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Codegen.empty() : this.parent;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Upgrade settings control disruption and speed of the upgrade.
     * 
     */
    @Import(name="upgradeSettings")
      private final @Nullable Output<UpgradeSettingsArgs> upgradeSettings;

    public Output<UpgradeSettingsArgs> getUpgradeSettings() {
        return this.upgradeSettings == null ? Codegen.empty() : this.upgradeSettings;
    }

    /**
     * The version of the Kubernetes of this node.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public NodePoolArgs(
        @Nullable Output<NodePoolAutoscalingArgs> autoscaling,
        Output<String> clusterId,
        @Nullable Output<List<StatusConditionArgs>> conditions,
        @Nullable Output<NodeConfigArgs> config,
        @Nullable Output<Integer> initialNodeCount,
        @Nullable Output<String> location,
        @Nullable Output<List<String>> locations,
        @Nullable Output<NodeManagementArgs> management,
        @Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint,
        @Nullable Output<String> name,
        @Nullable Output<NodeNetworkConfigArgs> networkConfig,
        @Nullable Output<String> parent,
        @Nullable Output<String> project,
        @Nullable Output<UpgradeSettingsArgs> upgradeSettings,
        @Nullable Output<String> version) {
        this.autoscaling = autoscaling;
        this.clusterId = Objects.requireNonNull(clusterId, "expected parameter 'clusterId' to be non-null");
        this.conditions = conditions;
        this.config = config;
        this.initialNodeCount = initialNodeCount;
        this.location = location;
        this.locations = locations;
        this.management = management;
        this.maxPodsConstraint = maxPodsConstraint;
        this.name = name;
        this.networkConfig = networkConfig;
        this.parent = parent;
        this.project = project;
        this.upgradeSettings = upgradeSettings;
        this.version = version;
    }

    private NodePoolArgs() {
        this.autoscaling = Codegen.empty();
        this.clusterId = Codegen.empty();
        this.conditions = Codegen.empty();
        this.config = Codegen.empty();
        this.initialNodeCount = Codegen.empty();
        this.location = Codegen.empty();
        this.locations = Codegen.empty();
        this.management = Codegen.empty();
        this.maxPodsConstraint = Codegen.empty();
        this.name = Codegen.empty();
        this.networkConfig = Codegen.empty();
        this.parent = Codegen.empty();
        this.project = Codegen.empty();
        this.upgradeSettings = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<NodePoolAutoscalingArgs> autoscaling;
        private Output<String> clusterId;
        private @Nullable Output<List<StatusConditionArgs>> conditions;
        private @Nullable Output<NodeConfigArgs> config;
        private @Nullable Output<Integer> initialNodeCount;
        private @Nullable Output<String> location;
        private @Nullable Output<List<String>> locations;
        private @Nullable Output<NodeManagementArgs> management;
        private @Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint;
        private @Nullable Output<String> name;
        private @Nullable Output<NodeNetworkConfigArgs> networkConfig;
        private @Nullable Output<String> parent;
        private @Nullable Output<String> project;
        private @Nullable Output<UpgradeSettingsArgs> upgradeSettings;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(NodePoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscaling = defaults.autoscaling;
    	      this.clusterId = defaults.clusterId;
    	      this.conditions = defaults.conditions;
    	      this.config = defaults.config;
    	      this.initialNodeCount = defaults.initialNodeCount;
    	      this.location = defaults.location;
    	      this.locations = defaults.locations;
    	      this.management = defaults.management;
    	      this.maxPodsConstraint = defaults.maxPodsConstraint;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.parent = defaults.parent;
    	      this.project = defaults.project;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.version = defaults.version;
        }

        public Builder autoscaling(@Nullable Output<NodePoolAutoscalingArgs> autoscaling) {
            this.autoscaling = autoscaling;
            return this;
        }
        public Builder autoscaling(@Nullable NodePoolAutoscalingArgs autoscaling) {
            this.autoscaling = Codegen.ofNullable(autoscaling);
            return this;
        }
        public Builder clusterId(Output<String> clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        public Builder clusterId(String clusterId) {
            this.clusterId = Output.of(Objects.requireNonNull(clusterId));
            return this;
        }
        public Builder conditions(@Nullable Output<List<StatusConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(@Nullable List<StatusConditionArgs> conditions) {
            this.conditions = Codegen.ofNullable(conditions);
            return this;
        }
        public Builder conditions(StatusConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder config(@Nullable Output<NodeConfigArgs> config) {
            this.config = config;
            return this;
        }
        public Builder config(@Nullable NodeConfigArgs config) {
            this.config = Codegen.ofNullable(config);
            return this;
        }
        public Builder initialNodeCount(@Nullable Output<Integer> initialNodeCount) {
            this.initialNodeCount = initialNodeCount;
            return this;
        }
        public Builder initialNodeCount(@Nullable Integer initialNodeCount) {
            this.initialNodeCount = Codegen.ofNullable(initialNodeCount);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder locations(@Nullable Output<List<String>> locations) {
            this.locations = locations;
            return this;
        }
        public Builder locations(@Nullable List<String> locations) {
            this.locations = Codegen.ofNullable(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder management(@Nullable Output<NodeManagementArgs> management) {
            this.management = management;
            return this;
        }
        public Builder management(@Nullable NodeManagementArgs management) {
            this.management = Codegen.ofNullable(management);
            return this;
        }
        public Builder maxPodsConstraint(@Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint) {
            this.maxPodsConstraint = maxPodsConstraint;
            return this;
        }
        public Builder maxPodsConstraint(@Nullable MaxPodsConstraintArgs maxPodsConstraint) {
            this.maxPodsConstraint = Codegen.ofNullable(maxPodsConstraint);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder networkConfig(@Nullable Output<NodeNetworkConfigArgs> networkConfig) {
            this.networkConfig = networkConfig;
            return this;
        }
        public Builder networkConfig(@Nullable NodeNetworkConfigArgs networkConfig) {
            this.networkConfig = Codegen.ofNullable(networkConfig);
            return this;
        }
        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }
        public Builder parent(@Nullable String parent) {
            this.parent = Codegen.ofNullable(parent);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder upgradeSettings(@Nullable Output<UpgradeSettingsArgs> upgradeSettings) {
            this.upgradeSettings = upgradeSettings;
            return this;
        }
        public Builder upgradeSettings(@Nullable UpgradeSettingsArgs upgradeSettings) {
            this.upgradeSettings = Codegen.ofNullable(upgradeSettings);
            return this;
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }        public NodePoolArgs build() {
            return new NodePoolArgs(autoscaling, clusterId, conditions, config, initialNodeCount, location, locations, management, maxPodsConstraint, name, networkConfig, parent, project, upgradeSettings, version);
        }
    }
}
