// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackendServiceFailoverPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackendServiceFailoverPolicyArgs Empty = new BackendServiceFailoverPolicyArgs();

    @InputImport(name="disableConnectionDrainOnFailover")
    private final @Nullable Input<Boolean> disableConnectionDrainOnFailover;

    public Input<Boolean> getDisableConnectionDrainOnFailover() {
        return this.disableConnectionDrainOnFailover == null ? Input.empty() : this.disableConnectionDrainOnFailover;
    }

    @InputImport(name="dropTrafficIfUnhealthy")
    private final @Nullable Input<Boolean> dropTrafficIfUnhealthy;

    public Input<Boolean> getDropTrafficIfUnhealthy() {
        return this.dropTrafficIfUnhealthy == null ? Input.empty() : this.dropTrafficIfUnhealthy;
    }

    @InputImport(name="failoverRatio")
    private final @Nullable Input<Double> failoverRatio;

    public Input<Double> getFailoverRatio() {
        return this.failoverRatio == null ? Input.empty() : this.failoverRatio;
    }

    public BackendServiceFailoverPolicyArgs(
        @Nullable Input<Boolean> disableConnectionDrainOnFailover,
        @Nullable Input<Boolean> dropTrafficIfUnhealthy,
        @Nullable Input<Double> failoverRatio) {
        this.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
        this.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
        this.failoverRatio = failoverRatio;
    }

    private BackendServiceFailoverPolicyArgs() {
        this.disableConnectionDrainOnFailover = Input.empty();
        this.dropTrafficIfUnhealthy = Input.empty();
        this.failoverRatio = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceFailoverPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> disableConnectionDrainOnFailover;
        private @Nullable Input<Boolean> dropTrafficIfUnhealthy;
        private @Nullable Input<Double> failoverRatio;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceFailoverPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableConnectionDrainOnFailover = defaults.disableConnectionDrainOnFailover;
    	      this.dropTrafficIfUnhealthy = defaults.dropTrafficIfUnhealthy;
    	      this.failoverRatio = defaults.failoverRatio;
        }

        public Builder setDisableConnectionDrainOnFailover(@Nullable Input<Boolean> disableConnectionDrainOnFailover) {
            this.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
            return this;
        }

        public Builder setDisableConnectionDrainOnFailover(@Nullable Boolean disableConnectionDrainOnFailover) {
            this.disableConnectionDrainOnFailover = Input.ofNullable(disableConnectionDrainOnFailover);
            return this;
        }

        public Builder setDropTrafficIfUnhealthy(@Nullable Input<Boolean> dropTrafficIfUnhealthy) {
            this.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
            return this;
        }

        public Builder setDropTrafficIfUnhealthy(@Nullable Boolean dropTrafficIfUnhealthy) {
            this.dropTrafficIfUnhealthy = Input.ofNullable(dropTrafficIfUnhealthy);
            return this;
        }

        public Builder setFailoverRatio(@Nullable Input<Double> failoverRatio) {
            this.failoverRatio = failoverRatio;
            return this;
        }

        public Builder setFailoverRatio(@Nullable Double failoverRatio) {
            this.failoverRatio = Input.ofNullable(failoverRatio);
            return this;
        }

        public BackendServiceFailoverPolicyArgs build() {
            return new BackendServiceFailoverPolicyArgs(disableConnectionDrainOnFailover, dropTrafficIfUnhealthy, failoverRatio);
        }
    }
}
