// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_v1.outputs.BackendResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendServiceCdnPolicyResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendServiceConnectionTrackingPolicyResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendServiceFailoverPolicyResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendServiceIAPResponse;
import io.pulumi.googlenative.compute_v1.outputs.BackendServiceLogConfigResponse;
import io.pulumi.googlenative.compute_v1.outputs.CircuitBreakersResponse;
import io.pulumi.googlenative.compute_v1.outputs.ConnectionDrainingResponse;
import io.pulumi.googlenative.compute_v1.outputs.ConsistentHashLoadBalancerSettingsResponse;
import io.pulumi.googlenative.compute_v1.outputs.DurationResponse;
import io.pulumi.googlenative.compute_v1.outputs.OutlierDetectionResponse;
import io.pulumi.googlenative.compute_v1.outputs.SecuritySettingsResponse;
import io.pulumi.googlenative.compute_v1.outputs.SubsettingResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetBackendServiceResult {
    /**
     * Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is one day (86,400). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    private final Integer affinityCookieTtlSec;
    /**
     * The list of backends that serve this BackendService.
     * 
     */
    private final List<BackendResponse> backends;
    /**
     * Cloud CDN configuration for this BackendService. Only available for specified load balancer types.
     * 
     */
    private final BackendServiceCdnPolicyResponse cdnPolicy;
    private final CircuitBreakersResponse circuitBreakers;
    private final ConnectionDrainingResponse connectionDraining;
    /**
     * Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP/UDP Load Balancing.
     * 
     */
    private final BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy;
    /**
     * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    private final ConsistentHashLoadBalancerSettingsResponse consistentHash;
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    private final String creationTimestamp;
    /**
     * Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    private final List<String> customRequestHeaders;
    /**
     * Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    private final List<String> customResponseHeaders;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private final String description;
    /**
     * The resource URL for the edge security policy associated with this backend service.
     * 
     */
    private final String edgeSecurityPolicy;
    /**
     * If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer.
     * 
     */
    private final Boolean enableCDN;
    /**
     * Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
     * 
     */
    private final BackendServiceFailoverPolicyResponse failoverPolicy;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.
     * 
     */
    private final String fingerprint;
    /**
     * The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
     * 
     */
    private final List<String> healthChecks;
    /**
     * The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing.
     * 
     */
    private final BackendServiceIAPResponse iap;
    /**
     * Type of resource. Always compute#backendService for backend services.
     * 
     */
    private final String kind;
    /**
     * Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
     * 
     */
    private final String loadBalancingScheme;
    /**
     * The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    private final String localityLbPolicy;
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
     * 
     */
    private final BackendServiceLogConfigResponse logConfig;
    /**
     * Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
     * 
     */
    private final DurationResponse maxStreamDuration;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private final String name;
    /**
     * The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    private final String network;
    /**
     * Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    private final OutlierDetectionResponse outlierDetection;
    /**
     * A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port_name.
     * 
     */
    private final String portName;
    /**
     * The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
     * 
     */
    private final String protocol;
    /**
     * URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    private final String region;
    /**
     * The resource URL for the security policy associated with this backend service.
     * 
     */
    private final String securityPolicy;
    /**
     * This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    private final SecuritySettingsResponse securitySettings;
    /**
     * Server-defined URL for the resource.
     * 
     */
    private final String selfLink;
    /**
     * Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
     * 
     */
    private final String sessionAffinity;
    private final SubsettingResponse subsetting;
    /**
     * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
     * 
     */
    private final Integer timeoutSec;

    @OutputCustomType.Constructor({"affinityCookieTtlSec","backends","cdnPolicy","circuitBreakers","connectionDraining","connectionTrackingPolicy","consistentHash","creationTimestamp","customRequestHeaders","customResponseHeaders","description","edgeSecurityPolicy","enableCDN","failoverPolicy","fingerprint","healthChecks","iap","kind","loadBalancingScheme","localityLbPolicy","logConfig","maxStreamDuration","name","network","outlierDetection","portName","protocol","region","securityPolicy","securitySettings","selfLink","sessionAffinity","subsetting","timeoutSec"})
    private GetBackendServiceResult(
        Integer affinityCookieTtlSec,
        List<BackendResponse> backends,
        BackendServiceCdnPolicyResponse cdnPolicy,
        CircuitBreakersResponse circuitBreakers,
        ConnectionDrainingResponse connectionDraining,
        BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy,
        ConsistentHashLoadBalancerSettingsResponse consistentHash,
        String creationTimestamp,
        List<String> customRequestHeaders,
        List<String> customResponseHeaders,
        String description,
        String edgeSecurityPolicy,
        Boolean enableCDN,
        BackendServiceFailoverPolicyResponse failoverPolicy,
        String fingerprint,
        List<String> healthChecks,
        BackendServiceIAPResponse iap,
        String kind,
        String loadBalancingScheme,
        String localityLbPolicy,
        BackendServiceLogConfigResponse logConfig,
        DurationResponse maxStreamDuration,
        String name,
        String network,
        OutlierDetectionResponse outlierDetection,
        String portName,
        String protocol,
        String region,
        String securityPolicy,
        SecuritySettingsResponse securitySettings,
        String selfLink,
        String sessionAffinity,
        SubsettingResponse subsetting,
        Integer timeoutSec) {
        this.affinityCookieTtlSec = Objects.requireNonNull(affinityCookieTtlSec);
        this.backends = Objects.requireNonNull(backends);
        this.cdnPolicy = Objects.requireNonNull(cdnPolicy);
        this.circuitBreakers = Objects.requireNonNull(circuitBreakers);
        this.connectionDraining = Objects.requireNonNull(connectionDraining);
        this.connectionTrackingPolicy = Objects.requireNonNull(connectionTrackingPolicy);
        this.consistentHash = Objects.requireNonNull(consistentHash);
        this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
        this.customRequestHeaders = Objects.requireNonNull(customRequestHeaders);
        this.customResponseHeaders = Objects.requireNonNull(customResponseHeaders);
        this.description = Objects.requireNonNull(description);
        this.edgeSecurityPolicy = Objects.requireNonNull(edgeSecurityPolicy);
        this.enableCDN = Objects.requireNonNull(enableCDN);
        this.failoverPolicy = Objects.requireNonNull(failoverPolicy);
        this.fingerprint = Objects.requireNonNull(fingerprint);
        this.healthChecks = Objects.requireNonNull(healthChecks);
        this.iap = Objects.requireNonNull(iap);
        this.kind = Objects.requireNonNull(kind);
        this.loadBalancingScheme = Objects.requireNonNull(loadBalancingScheme);
        this.localityLbPolicy = Objects.requireNonNull(localityLbPolicy);
        this.logConfig = Objects.requireNonNull(logConfig);
        this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.outlierDetection = Objects.requireNonNull(outlierDetection);
        this.portName = Objects.requireNonNull(portName);
        this.protocol = Objects.requireNonNull(protocol);
        this.region = Objects.requireNonNull(region);
        this.securityPolicy = Objects.requireNonNull(securityPolicy);
        this.securitySettings = Objects.requireNonNull(securitySettings);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.sessionAffinity = Objects.requireNonNull(sessionAffinity);
        this.subsetting = Objects.requireNonNull(subsetting);
        this.timeoutSec = Objects.requireNonNull(timeoutSec);
    }

    /**
     * Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is one day (86,400). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Integer getAffinityCookieTtlSec() {
        return this.affinityCookieTtlSec;
    }
    /**
     * The list of backends that serve this BackendService.
     * 
     */
    public List<BackendResponse> getBackends() {
        return this.backends;
    }
    /**
     * Cloud CDN configuration for this BackendService. Only available for specified load balancer types.
     * 
     */
    public BackendServiceCdnPolicyResponse getCdnPolicy() {
        return this.cdnPolicy;
    }
    public CircuitBreakersResponse getCircuitBreakers() {
        return this.circuitBreakers;
    }
    public ConnectionDrainingResponse getConnectionDraining() {
        return this.connectionDraining;
    }
    /**
     * Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP/UDP Load Balancing.
     * 
     */
    public BackendServiceConnectionTrackingPolicyResponse getConnectionTrackingPolicy() {
        return this.connectionTrackingPolicy;
    }
    /**
     * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    public ConsistentHashLoadBalancerSettingsResponse getConsistentHash() {
        return this.consistentHash;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    public String getCreationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    public List<String> getCustomRequestHeaders() {
        return this.customRequestHeaders;
    }
    /**
     * Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    public List<String> getCustomResponseHeaders() {
        return this.customResponseHeaders;
    }
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * The resource URL for the edge security policy associated with this backend service.
     * 
     */
    public String getEdgeSecurityPolicy() {
        return this.edgeSecurityPolicy;
    }
    /**
     * If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer.
     * 
     */
    public Boolean getEnableCDN() {
        return this.enableCDN;
    }
    /**
     * Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
     * 
     */
    public BackendServiceFailoverPolicyResponse getFailoverPolicy() {
        return this.failoverPolicy;
    }
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.
     * 
     */
    public String getFingerprint() {
        return this.fingerprint;
    }
    /**
     * The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
     * 
     */
    public List<String> getHealthChecks() {
        return this.healthChecks;
    }
    /**
     * The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing.
     * 
     */
    public BackendServiceIAPResponse getIap() {
        return this.iap;
    }
    /**
     * Type of resource. Always compute#backendService for backend services.
     * 
     */
    public String getKind() {
        return this.kind;
    }
    /**
     * Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
     * 
     */
    public String getLoadBalancingScheme() {
        return this.loadBalancingScheme;
    }
    /**
     * The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public String getLocalityLbPolicy() {
        return this.localityLbPolicy;
    }
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
     * 
     */
    public BackendServiceLogConfigResponse getLogConfig() {
        return this.logConfig;
    }
    /**
     * Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
     * 
     */
    public DurationResponse getMaxStreamDuration() {
        return this.maxStreamDuration;
    }
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    public String getNetwork() {
        return this.network;
    }
    /**
     * Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public OutlierDetectionResponse getOutlierDetection() {
        return this.outlierDetection;
    }
    /**
     * A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port_name.
     * 
     */
    public String getPortName() {
        return this.portName;
    }
    /**
     * The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
     * 
     */
    public String getProtocol() {
        return this.protocol;
    }
    /**
     * URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    public String getRegion() {
        return this.region;
    }
    /**
     * The resource URL for the security policy associated with this backend service.
     * 
     */
    public String getSecurityPolicy() {
        return this.securityPolicy;
    }
    /**
     * This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    public SecuritySettingsResponse getSecuritySettings() {
        return this.securitySettings;
    }
    /**
     * Server-defined URL for the resource.
     * 
     */
    public String getSelfLink() {
        return this.selfLink;
    }
    /**
     * Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
     * 
     */
    public String getSessionAffinity() {
        return this.sessionAffinity;
    }
    public SubsettingResponse getSubsetting() {
        return this.subsetting;
    }
    /**
     * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
     * 
     */
    public Integer getTimeoutSec() {
        return this.timeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer affinityCookieTtlSec;
        private List<BackendResponse> backends;
        private BackendServiceCdnPolicyResponse cdnPolicy;
        private CircuitBreakersResponse circuitBreakers;
        private ConnectionDrainingResponse connectionDraining;
        private BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy;
        private ConsistentHashLoadBalancerSettingsResponse consistentHash;
        private String creationTimestamp;
        private List<String> customRequestHeaders;
        private List<String> customResponseHeaders;
        private String description;
        private String edgeSecurityPolicy;
        private Boolean enableCDN;
        private BackendServiceFailoverPolicyResponse failoverPolicy;
        private String fingerprint;
        private List<String> healthChecks;
        private BackendServiceIAPResponse iap;
        private String kind;
        private String loadBalancingScheme;
        private String localityLbPolicy;
        private BackendServiceLogConfigResponse logConfig;
        private DurationResponse maxStreamDuration;
        private String name;
        private String network;
        private OutlierDetectionResponse outlierDetection;
        private String portName;
        private String protocol;
        private String region;
        private String securityPolicy;
        private SecuritySettingsResponse securitySettings;
        private String selfLink;
        private String sessionAffinity;
        private SubsettingResponse subsetting;
        private Integer timeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieTtlSec = defaults.affinityCookieTtlSec;
    	      this.backends = defaults.backends;
    	      this.cdnPolicy = defaults.cdnPolicy;
    	      this.circuitBreakers = defaults.circuitBreakers;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.connectionTrackingPolicy = defaults.connectionTrackingPolicy;
    	      this.consistentHash = defaults.consistentHash;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.customRequestHeaders = defaults.customRequestHeaders;
    	      this.customResponseHeaders = defaults.customResponseHeaders;
    	      this.description = defaults.description;
    	      this.edgeSecurityPolicy = defaults.edgeSecurityPolicy;
    	      this.enableCDN = defaults.enableCDN;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.fingerprint = defaults.fingerprint;
    	      this.healthChecks = defaults.healthChecks;
    	      this.iap = defaults.iap;
    	      this.kind = defaults.kind;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.localityLbPolicy = defaults.localityLbPolicy;
    	      this.logConfig = defaults.logConfig;
    	      this.maxStreamDuration = defaults.maxStreamDuration;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.portName = defaults.portName;
    	      this.protocol = defaults.protocol;
    	      this.region = defaults.region;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.securitySettings = defaults.securitySettings;
    	      this.selfLink = defaults.selfLink;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.subsetting = defaults.subsetting;
    	      this.timeoutSec = defaults.timeoutSec;
        }

        public Builder setAffinityCookieTtlSec(Integer affinityCookieTtlSec) {
            this.affinityCookieTtlSec = Objects.requireNonNull(affinityCookieTtlSec);
            return this;
        }

        public Builder setBackends(List<BackendResponse> backends) {
            this.backends = Objects.requireNonNull(backends);
            return this;
        }

        public Builder setCdnPolicy(BackendServiceCdnPolicyResponse cdnPolicy) {
            this.cdnPolicy = Objects.requireNonNull(cdnPolicy);
            return this;
        }

        public Builder setCircuitBreakers(CircuitBreakersResponse circuitBreakers) {
            this.circuitBreakers = Objects.requireNonNull(circuitBreakers);
            return this;
        }

        public Builder setConnectionDraining(ConnectionDrainingResponse connectionDraining) {
            this.connectionDraining = Objects.requireNonNull(connectionDraining);
            return this;
        }

        public Builder setConnectionTrackingPolicy(BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy) {
            this.connectionTrackingPolicy = Objects.requireNonNull(connectionTrackingPolicy);
            return this;
        }

        public Builder setConsistentHash(ConsistentHashLoadBalancerSettingsResponse consistentHash) {
            this.consistentHash = Objects.requireNonNull(consistentHash);
            return this;
        }

        public Builder setCreationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }

        public Builder setCustomRequestHeaders(List<String> customRequestHeaders) {
            this.customRequestHeaders = Objects.requireNonNull(customRequestHeaders);
            return this;
        }

        public Builder setCustomResponseHeaders(List<String> customResponseHeaders) {
            this.customResponseHeaders = Objects.requireNonNull(customResponseHeaders);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEdgeSecurityPolicy(String edgeSecurityPolicy) {
            this.edgeSecurityPolicy = Objects.requireNonNull(edgeSecurityPolicy);
            return this;
        }

        public Builder setEnableCDN(Boolean enableCDN) {
            this.enableCDN = Objects.requireNonNull(enableCDN);
            return this;
        }

        public Builder setFailoverPolicy(BackendServiceFailoverPolicyResponse failoverPolicy) {
            this.failoverPolicy = Objects.requireNonNull(failoverPolicy);
            return this;
        }

        public Builder setFingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }

        public Builder setHealthChecks(List<String> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }

        public Builder setIap(BackendServiceIAPResponse iap) {
            this.iap = Objects.requireNonNull(iap);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLoadBalancingScheme(String loadBalancingScheme) {
            this.loadBalancingScheme = Objects.requireNonNull(loadBalancingScheme);
            return this;
        }

        public Builder setLocalityLbPolicy(String localityLbPolicy) {
            this.localityLbPolicy = Objects.requireNonNull(localityLbPolicy);
            return this;
        }

        public Builder setLogConfig(BackendServiceLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }

        public Builder setMaxStreamDuration(DurationResponse maxStreamDuration) {
            this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setOutlierDetection(OutlierDetectionResponse outlierDetection) {
            this.outlierDetection = Objects.requireNonNull(outlierDetection);
            return this;
        }

        public Builder setPortName(String portName) {
            this.portName = Objects.requireNonNull(portName);
            return this;
        }

        public Builder setProtocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setRegion(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder setSecurityPolicy(String securityPolicy) {
            this.securityPolicy = Objects.requireNonNull(securityPolicy);
            return this;
        }

        public Builder setSecuritySettings(SecuritySettingsResponse securitySettings) {
            this.securitySettings = Objects.requireNonNull(securitySettings);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setSessionAffinity(String sessionAffinity) {
            this.sessionAffinity = Objects.requireNonNull(sessionAffinity);
            return this;
        }

        public Builder setSubsetting(SubsettingResponse subsetting) {
            this.subsetting = Objects.requireNonNull(subsetting);
            return this;
        }

        public Builder setTimeoutSec(Integer timeoutSec) {
            this.timeoutSec = Objects.requireNonNull(timeoutSec);
            return this;
        }

        public GetBackendServiceResult build() {
            return new GetBackendServiceResult(affinityCookieTtlSec, backends, cdnPolicy, circuitBreakers, connectionDraining, connectionTrackingPolicy, consistentHash, creationTimestamp, customRequestHeaders, customResponseHeaders, description, edgeSecurityPolicy, enableCDN, failoverPolicy, fingerprint, healthChecks, iap, kind, loadBalancingScheme, localityLbPolicy, logConfig, maxStreamDuration, name, network, outlierDetection, portName, protocol, region, securityPolicy, securitySettings, selfLink, sessionAffinity, subsetting, timeoutSec);
        }
    }
}
