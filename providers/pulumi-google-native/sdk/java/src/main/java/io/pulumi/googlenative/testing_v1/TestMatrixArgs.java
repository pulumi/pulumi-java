// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.inputs.ClientInfoArgs;
import io.pulumi.googlenative.testing_v1.inputs.EnvironmentMatrixArgs;
import io.pulumi.googlenative.testing_v1.inputs.ResultStorageArgs;
import io.pulumi.googlenative.testing_v1.inputs.TestSpecificationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TestMatrixArgs extends io.pulumi.resources.ResourceArgs {

    public static final TestMatrixArgs Empty = new TestMatrixArgs();

    /**
     * Information about the client which invoked the test.
     * 
     */
    @InputImport(name="clientInfo")
      private final @Nullable Output<ClientInfoArgs> clientInfo;

    public Output<ClientInfoArgs> getClientInfo() {
        return this.clientInfo == null ? Output.empty() : this.clientInfo;
    }

    /**
     * The devices the tests are being executed on.
     * 
     */
    @InputImport(name="environmentMatrix", required=true)
      private final Output<EnvironmentMatrixArgs> environmentMatrix;

    public Output<EnvironmentMatrixArgs> getEnvironmentMatrix() {
        return this.environmentMatrix;
    }

    /**
     * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     * 
     */
    @InputImport(name="failFast")
      private final @Nullable Output<Boolean> failFast;

    public Output<Boolean> getFailFast() {
        return this.failFast == null ? Output.empty() : this.failFast;
    }

    /**
     * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     * 
     */
    @InputImport(name="flakyTestAttempts")
      private final @Nullable Output<Integer> flakyTestAttempts;

    public Output<Integer> getFlakyTestAttempts() {
        return this.flakyTestAttempts == null ? Output.empty() : this.flakyTestAttempts;
    }

    /**
     * The cloud project that owns the test matrix.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @InputImport(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    /**
     * Where the results for the matrix are written.
     * 
     */
    @InputImport(name="resultStorage", required=true)
      private final Output<ResultStorageArgs> resultStorage;

    public Output<ResultStorageArgs> getResultStorage() {
        return this.resultStorage;
    }

    /**
     * How to run the test.
     * 
     */
    @InputImport(name="testSpecification", required=true)
      private final Output<TestSpecificationArgs> testSpecification;

    public Output<TestSpecificationArgs> getTestSpecification() {
        return this.testSpecification;
    }

    public TestMatrixArgs(
        @Nullable Output<ClientInfoArgs> clientInfo,
        Output<EnvironmentMatrixArgs> environmentMatrix,
        @Nullable Output<Boolean> failFast,
        @Nullable Output<Integer> flakyTestAttempts,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        Output<ResultStorageArgs> resultStorage,
        Output<TestSpecificationArgs> testSpecification) {
        this.clientInfo = clientInfo;
        this.environmentMatrix = Objects.requireNonNull(environmentMatrix, "expected parameter 'environmentMatrix' to be non-null");
        this.failFast = failFast;
        this.flakyTestAttempts = flakyTestAttempts;
        this.project = project;
        this.requestId = requestId;
        this.resultStorage = Objects.requireNonNull(resultStorage, "expected parameter 'resultStorage' to be non-null");
        this.testSpecification = Objects.requireNonNull(testSpecification, "expected parameter 'testSpecification' to be non-null");
    }

    private TestMatrixArgs() {
        this.clientInfo = Output.empty();
        this.environmentMatrix = Output.empty();
        this.failFast = Output.empty();
        this.flakyTestAttempts = Output.empty();
        this.project = Output.empty();
        this.requestId = Output.empty();
        this.resultStorage = Output.empty();
        this.testSpecification = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestMatrixArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ClientInfoArgs> clientInfo;
        private Output<EnvironmentMatrixArgs> environmentMatrix;
        private @Nullable Output<Boolean> failFast;
        private @Nullable Output<Integer> flakyTestAttempts;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private Output<ResultStorageArgs> resultStorage;
        private Output<TestSpecificationArgs> testSpecification;

        public Builder() {
    	      // Empty
        }

        public Builder(TestMatrixArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientInfo = defaults.clientInfo;
    	      this.environmentMatrix = defaults.environmentMatrix;
    	      this.failFast = defaults.failFast;
    	      this.flakyTestAttempts = defaults.flakyTestAttempts;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.resultStorage = defaults.resultStorage;
    	      this.testSpecification = defaults.testSpecification;
        }

        public Builder clientInfo(@Nullable Output<ClientInfoArgs> clientInfo) {
            this.clientInfo = clientInfo;
            return this;
        }

        public Builder clientInfo(@Nullable ClientInfoArgs clientInfo) {
            this.clientInfo = Output.ofNullable(clientInfo);
            return this;
        }

        public Builder environmentMatrix(Output<EnvironmentMatrixArgs> environmentMatrix) {
            this.environmentMatrix = Objects.requireNonNull(environmentMatrix);
            return this;
        }

        public Builder environmentMatrix(EnvironmentMatrixArgs environmentMatrix) {
            this.environmentMatrix = Output.of(Objects.requireNonNull(environmentMatrix));
            return this;
        }

        public Builder failFast(@Nullable Output<Boolean> failFast) {
            this.failFast = failFast;
            return this;
        }

        public Builder failFast(@Nullable Boolean failFast) {
            this.failFast = Output.ofNullable(failFast);
            return this;
        }

        public Builder flakyTestAttempts(@Nullable Output<Integer> flakyTestAttempts) {
            this.flakyTestAttempts = flakyTestAttempts;
            return this;
        }

        public Builder flakyTestAttempts(@Nullable Integer flakyTestAttempts) {
            this.flakyTestAttempts = Output.ofNullable(flakyTestAttempts);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }

        public Builder resultStorage(Output<ResultStorageArgs> resultStorage) {
            this.resultStorage = Objects.requireNonNull(resultStorage);
            return this;
        }

        public Builder resultStorage(ResultStorageArgs resultStorage) {
            this.resultStorage = Output.of(Objects.requireNonNull(resultStorage));
            return this;
        }

        public Builder testSpecification(Output<TestSpecificationArgs> testSpecification) {
            this.testSpecification = Objects.requireNonNull(testSpecification);
            return this;
        }

        public Builder testSpecification(TestSpecificationArgs testSpecification) {
            this.testSpecification = Output.of(Objects.requireNonNull(testSpecification));
            return this;
        }
        public TestMatrixArgs build() {
            return new TestMatrixArgs(clientInfo, environmentMatrix, failFast, flakyTestAttempts, project, requestId, resultStorage, testSpecification);
        }
    }
}
