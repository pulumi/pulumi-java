// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.servicemanagement_v1.inputs.BillingDestinationArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
 * 
 */
public final class BillingArgs extends io.pulumi.resources.ResourceArgs {

    public static final BillingArgs Empty = new BillingArgs();

    /**
     * Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
     * 
     */
    @Import(name="consumerDestinations")
      private final @Nullable Output<List<BillingDestinationArgs>> consumerDestinations;

    public Output<List<BillingDestinationArgs>> consumerDestinations() {
        return this.consumerDestinations == null ? Codegen.empty() : this.consumerDestinations;
    }

    public BillingArgs(@Nullable Output<List<BillingDestinationArgs>> consumerDestinations) {
        this.consumerDestinations = consumerDestinations;
    }

    private BillingArgs() {
        this.consumerDestinations = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BillingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BillingDestinationArgs>> consumerDestinations;

        public Builder() {
    	      // Empty
        }

        public Builder(BillingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerDestinations = defaults.consumerDestinations;
        }

        public Builder consumerDestinations(@Nullable Output<List<BillingDestinationArgs>> consumerDestinations) {
            this.consumerDestinations = consumerDestinations;
            return this;
        }
        public Builder consumerDestinations(@Nullable List<BillingDestinationArgs> consumerDestinations) {
            this.consumerDestinations = Codegen.ofNullable(consumerDestinations);
            return this;
        }
        public Builder consumerDestinations(BillingDestinationArgs... consumerDestinations) {
            return consumerDestinations(List.of(consumerDestinations));
        }        public BillingArgs build() {
            return new BillingArgs(consumerDestinations);
        }
    }
}
