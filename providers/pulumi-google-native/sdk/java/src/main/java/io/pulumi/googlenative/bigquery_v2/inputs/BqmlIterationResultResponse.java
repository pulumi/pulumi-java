// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class BqmlIterationResultResponse extends io.pulumi.resources.InvokeArgs {

    public static final BqmlIterationResultResponse Empty = new BqmlIterationResultResponse();

    /**
     * [Output-only, Beta] Time taken to run the training iteration in milliseconds.
     * 
     */
    @Import(name="durationMs", required=true)
      private final String durationMs;

    public String getDurationMs() {
        return this.durationMs;
    }

    /**
     * [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
     * 
     */
    @Import(name="evalLoss", required=true)
      private final Double evalLoss;

    public Double getEvalLoss() {
        return this.evalLoss;
    }

    /**
     * [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
     * 
     */
    @Import(name="index", required=true)
      private final Integer index;

    public Integer getIndex() {
        return this.index;
    }

    /**
     * [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
     * 
     */
    @Import(name="learnRate", required=true)
      private final Double learnRate;

    public Double getLearnRate() {
        return this.learnRate;
    }

    /**
     * [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
     * 
     */
    @Import(name="trainingLoss", required=true)
      private final Double trainingLoss;

    public Double getTrainingLoss() {
        return this.trainingLoss;
    }

    public BqmlIterationResultResponse(
        String durationMs,
        Double evalLoss,
        Integer index,
        Double learnRate,
        Double trainingLoss) {
        this.durationMs = Objects.requireNonNull(durationMs, "expected parameter 'durationMs' to be non-null");
        this.evalLoss = Objects.requireNonNull(evalLoss, "expected parameter 'evalLoss' to be non-null");
        this.index = Objects.requireNonNull(index, "expected parameter 'index' to be non-null");
        this.learnRate = Objects.requireNonNull(learnRate, "expected parameter 'learnRate' to be non-null");
        this.trainingLoss = Objects.requireNonNull(trainingLoss, "expected parameter 'trainingLoss' to be non-null");
    }

    private BqmlIterationResultResponse() {
        this.durationMs = null;
        this.evalLoss = null;
        this.index = null;
        this.learnRate = null;
        this.trainingLoss = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BqmlIterationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String durationMs;
        private Double evalLoss;
        private Integer index;
        private Double learnRate;
        private Double trainingLoss;

        public Builder() {
    	      // Empty
        }

        public Builder(BqmlIterationResultResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.durationMs = defaults.durationMs;
    	      this.evalLoss = defaults.evalLoss;
    	      this.index = defaults.index;
    	      this.learnRate = defaults.learnRate;
    	      this.trainingLoss = defaults.trainingLoss;
        }

        public Builder durationMs(String durationMs) {
            this.durationMs = Objects.requireNonNull(durationMs);
            return this;
        }

        public Builder evalLoss(Double evalLoss) {
            this.evalLoss = Objects.requireNonNull(evalLoss);
            return this;
        }

        public Builder index(Integer index) {
            this.index = Objects.requireNonNull(index);
            return this;
        }

        public Builder learnRate(Double learnRate) {
            this.learnRate = Objects.requireNonNull(learnRate);
            return this;
        }

        public Builder trainingLoss(Double trainingLoss) {
            this.trainingLoss = Objects.requireNonNull(trainingLoss);
            return this;
        }
        public BqmlIterationResultResponse build() {
            return new BqmlIterationResultResponse(durationMs, evalLoss, index, learnRate, trainingLoss);
        }
    }
}
