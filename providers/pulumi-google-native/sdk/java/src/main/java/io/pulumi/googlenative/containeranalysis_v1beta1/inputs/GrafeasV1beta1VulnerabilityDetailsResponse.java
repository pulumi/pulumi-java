// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.PackageIssueResponse;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.RelatedUrlResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Details of a vulnerability Occurrence.
 * 
 */
public final class GrafeasV1beta1VulnerabilityDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final GrafeasV1beta1VulnerabilityDetailsResponse Empty = new GrafeasV1beta1VulnerabilityDetailsResponse();

    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    @Import(name="cvssScore", required=true)
      private final Double cvssScore;

    public Double getCvssScore() {
        return this.cvssScore;
    }

    /**
     * The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity", required=true)
      private final String effectiveSeverity;

    public String getEffectiveSeverity() {
        return this.effectiveSeverity;
    }

    /**
     * A detailed description of this vulnerability.
     * 
     */
    @Import(name="longDescription", required=true)
      private final String longDescription;

    public String getLongDescription() {
        return this.longDescription;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
      private final List<PackageIssueResponse> packageIssue;

    public List<PackageIssueResponse> getPackageIssue() {
        return this.packageIssue;
    }

    /**
     * URLs related to this vulnerability.
     * 
     */
    @Import(name="relatedUrls", required=true)
      private final List<RelatedUrlResponse> relatedUrls;

    public List<RelatedUrlResponse> getRelatedUrls() {
        return this.relatedUrls;
    }

    /**
     * The note provider assigned Severity of the vulnerability.
     * 
     */
    @Import(name="severity", required=true)
      private final String severity;

    public String getSeverity() {
        return this.severity;
    }

    /**
     * A one sentence description of this vulnerability.
     * 
     */
    @Import(name="shortDescription", required=true)
      private final String shortDescription;

    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc)
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public GrafeasV1beta1VulnerabilityDetailsResponse(
        Double cvssScore,
        String effectiveSeverity,
        String longDescription,
        List<PackageIssueResponse> packageIssue,
        List<RelatedUrlResponse> relatedUrls,
        String severity,
        String shortDescription,
        String type) {
        this.cvssScore = Objects.requireNonNull(cvssScore, "expected parameter 'cvssScore' to be non-null");
        this.effectiveSeverity = Objects.requireNonNull(effectiveSeverity, "expected parameter 'effectiveSeverity' to be non-null");
        this.longDescription = Objects.requireNonNull(longDescription, "expected parameter 'longDescription' to be non-null");
        this.packageIssue = Objects.requireNonNull(packageIssue, "expected parameter 'packageIssue' to be non-null");
        this.relatedUrls = Objects.requireNonNull(relatedUrls, "expected parameter 'relatedUrls' to be non-null");
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.shortDescription = Objects.requireNonNull(shortDescription, "expected parameter 'shortDescription' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private GrafeasV1beta1VulnerabilityDetailsResponse() {
        this.cvssScore = null;
        this.effectiveSeverity = null;
        this.longDescription = null;
        this.packageIssue = List.of();
        this.relatedUrls = List.of();
        this.severity = null;
        this.shortDescription = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GrafeasV1beta1VulnerabilityDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double cvssScore;
        private String effectiveSeverity;
        private String longDescription;
        private List<PackageIssueResponse> packageIssue;
        private List<RelatedUrlResponse> relatedUrls;
        private String severity;
        private String shortDescription;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GrafeasV1beta1VulnerabilityDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cvssScore = defaults.cvssScore;
    	      this.effectiveSeverity = defaults.effectiveSeverity;
    	      this.longDescription = defaults.longDescription;
    	      this.packageIssue = defaults.packageIssue;
    	      this.relatedUrls = defaults.relatedUrls;
    	      this.severity = defaults.severity;
    	      this.shortDescription = defaults.shortDescription;
    	      this.type = defaults.type;
        }

        public Builder cvssScore(Double cvssScore) {
            this.cvssScore = Objects.requireNonNull(cvssScore);
            return this;
        }

        public Builder effectiveSeverity(String effectiveSeverity) {
            this.effectiveSeverity = Objects.requireNonNull(effectiveSeverity);
            return this;
        }

        public Builder longDescription(String longDescription) {
            this.longDescription = Objects.requireNonNull(longDescription);
            return this;
        }

        public Builder packageIssue(List<PackageIssueResponse> packageIssue) {
            this.packageIssue = Objects.requireNonNull(packageIssue);
            return this;
        }

        public Builder relatedUrls(List<RelatedUrlResponse> relatedUrls) {
            this.relatedUrls = Objects.requireNonNull(relatedUrls);
            return this;
        }

        public Builder severity(String severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }

        public Builder shortDescription(String shortDescription) {
            this.shortDescription = Objects.requireNonNull(shortDescription);
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GrafeasV1beta1VulnerabilityDetailsResponse build() {
            return new GrafeasV1beta1VulnerabilityDetailsResponse(cvssScore, effectiveSeverity, longDescription, packageIssue, relatedUrls, severity, shortDescription, type);
        }
    }
}
