// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies how many time series must fail a predicate to trigger a condition. If not specified, then a {count: 1} trigger is used.
 * 
 */
public final class TriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerArgs Empty = new TriggerArgs();

    /**
     * The absolute number of time series that must fail the predicate for the condition to be triggered.
     * 
     */
    @InputImport(name="count")
    private final @Nullable Input<Integer> count;

    public Input<Integer> getCount() {
        return this.count == null ? Input.empty() : this.count;
    }

    /**
     * The percentage of time series that must fail the predicate for the condition to be triggered.
     * 
     */
    @InputImport(name="percent")
    private final @Nullable Input<Double> percent;

    public Input<Double> getPercent() {
        return this.percent == null ? Input.empty() : this.percent;
    }

    public TriggerArgs(
        @Nullable Input<Integer> count,
        @Nullable Input<Double> percent) {
        this.count = count;
        this.percent = percent;
    }

    private TriggerArgs() {
        this.count = Input.empty();
        this.percent = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> count;
        private @Nullable Input<Double> percent;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.percent = defaults.percent;
        }

        public Builder setCount(@Nullable Input<Integer> count) {
            this.count = count;
            return this;
        }

        public Builder setCount(@Nullable Integer count) {
            this.count = Input.ofNullable(count);
            return this;
        }

        public Builder setPercent(@Nullable Input<Double> percent) {
            this.percent = percent;
            return this;
        }

        public Builder setPercent(@Nullable Double percent) {
            this.percent = Input.ofNullable(percent);
            return this;
        }

        public TriggerArgs build() {
            return new TriggerArgs(count, percent);
        }
    }
}
