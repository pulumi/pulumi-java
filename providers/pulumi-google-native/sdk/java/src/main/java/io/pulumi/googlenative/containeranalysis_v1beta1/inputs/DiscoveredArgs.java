// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1beta1.enums.DiscoveredAnalysisStatus;
import io.pulumi.googlenative.containeranalysis_v1beta1.enums.DiscoveredContinuousAnalysis;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.StatusArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Provides information about the analysis status of a discovered resource.
 * 
 */
public final class DiscoveredArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiscoveredArgs Empty = new DiscoveredArgs();

    /**
     * The status of discovery for the resource.
     * 
     */
    @Import(name="analysisStatus")
      private final @Nullable Output<DiscoveredAnalysisStatus> analysisStatus;

    public Output<DiscoveredAnalysisStatus> getAnalysisStatus() {
        return this.analysisStatus == null ? Output.empty() : this.analysisStatus;
    }

    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     * 
     */
    @Import(name="analysisStatusError")
      private final @Nullable Output<StatusArgs> analysisStatusError;

    public Output<StatusArgs> getAnalysisStatusError() {
        return this.analysisStatusError == null ? Output.empty() : this.analysisStatusError;
    }

    /**
     * Whether the resource is continuously analyzed.
     * 
     */
    @Import(name="continuousAnalysis")
      private final @Nullable Output<DiscoveredContinuousAnalysis> continuousAnalysis;

    public Output<DiscoveredContinuousAnalysis> getContinuousAnalysis() {
        return this.continuousAnalysis == null ? Output.empty() : this.continuousAnalysis;
    }

    public DiscoveredArgs(
        @Nullable Output<DiscoveredAnalysisStatus> analysisStatus,
        @Nullable Output<StatusArgs> analysisStatusError,
        @Nullable Output<DiscoveredContinuousAnalysis> continuousAnalysis) {
        this.analysisStatus = analysisStatus;
        this.analysisStatusError = analysisStatusError;
        this.continuousAnalysis = continuousAnalysis;
    }

    private DiscoveredArgs() {
        this.analysisStatus = Output.empty();
        this.analysisStatusError = Output.empty();
        this.continuousAnalysis = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiscoveredArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DiscoveredAnalysisStatus> analysisStatus;
        private @Nullable Output<StatusArgs> analysisStatusError;
        private @Nullable Output<DiscoveredContinuousAnalysis> continuousAnalysis;

        public Builder() {
    	      // Empty
        }

        public Builder(DiscoveredArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisStatus = defaults.analysisStatus;
    	      this.analysisStatusError = defaults.analysisStatusError;
    	      this.continuousAnalysis = defaults.continuousAnalysis;
        }

        public Builder analysisStatus(@Nullable Output<DiscoveredAnalysisStatus> analysisStatus) {
            this.analysisStatus = analysisStatus;
            return this;
        }
        public Builder analysisStatus(@Nullable DiscoveredAnalysisStatus analysisStatus) {
            this.analysisStatus = Output.ofNullable(analysisStatus);
            return this;
        }
        public Builder analysisStatusError(@Nullable Output<StatusArgs> analysisStatusError) {
            this.analysisStatusError = analysisStatusError;
            return this;
        }
        public Builder analysisStatusError(@Nullable StatusArgs analysisStatusError) {
            this.analysisStatusError = Output.ofNullable(analysisStatusError);
            return this;
        }
        public Builder continuousAnalysis(@Nullable Output<DiscoveredContinuousAnalysis> continuousAnalysis) {
            this.continuousAnalysis = continuousAnalysis;
            return this;
        }
        public Builder continuousAnalysis(@Nullable DiscoveredContinuousAnalysis continuousAnalysis) {
            this.continuousAnalysis = Output.ofNullable(continuousAnalysis);
            return this;
        }        public DiscoveredArgs build() {
            return new DiscoveredArgs(analysisStatus, analysisStatusError, continuousAnalysis);
        }
    }
}
