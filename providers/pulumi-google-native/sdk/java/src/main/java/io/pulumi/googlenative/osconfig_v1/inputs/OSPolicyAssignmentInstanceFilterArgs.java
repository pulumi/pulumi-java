// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.osconfig_v1.inputs.OSPolicyAssignmentInstanceFilterInventoryArgs;
import io.pulumi.googlenative.osconfig_v1.inputs.OSPolicyAssignmentLabelSetArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
 * 
 */
public final class OSPolicyAssignmentInstanceFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final OSPolicyAssignmentInstanceFilterArgs Empty = new OSPolicyAssignmentInstanceFilterArgs();

    /**
     * Target all VMs in the project. If true, no other criteria is permitted.
     * 
     */
    @InputImport(name="all")
    private final @Nullable Input<Boolean> all;

    public Input<Boolean> getAll() {
        return this.all == null ? Input.empty() : this.all;
    }

    /**
     * List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
     * 
     */
    @InputImport(name="exclusionLabels")
    private final @Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> exclusionLabels;

    public Input<List<OSPolicyAssignmentLabelSetArgs>> getExclusionLabels() {
        return this.exclusionLabels == null ? Input.empty() : this.exclusionLabels;
    }

    /**
     * List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
     * 
     */
    @InputImport(name="inclusionLabels")
    private final @Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> inclusionLabels;

    public Input<List<OSPolicyAssignmentLabelSetArgs>> getInclusionLabels() {
        return this.inclusionLabels == null ? Input.empty() : this.inclusionLabels;
    }

    /**
     * List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
     * 
     */
    @InputImport(name="inventories")
    private final @Nullable Input<List<OSPolicyAssignmentInstanceFilterInventoryArgs>> inventories;

    public Input<List<OSPolicyAssignmentInstanceFilterInventoryArgs>> getInventories() {
        return this.inventories == null ? Input.empty() : this.inventories;
    }

    public OSPolicyAssignmentInstanceFilterArgs(
        @Nullable Input<Boolean> all,
        @Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> exclusionLabels,
        @Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> inclusionLabels,
        @Nullable Input<List<OSPolicyAssignmentInstanceFilterInventoryArgs>> inventories) {
        this.all = all;
        this.exclusionLabels = exclusionLabels;
        this.inclusionLabels = inclusionLabels;
        this.inventories = inventories;
    }

    private OSPolicyAssignmentInstanceFilterArgs() {
        this.all = Input.empty();
        this.exclusionLabels = Input.empty();
        this.inclusionLabels = Input.empty();
        this.inventories = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OSPolicyAssignmentInstanceFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> all;
        private @Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> exclusionLabels;
        private @Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> inclusionLabels;
        private @Nullable Input<List<OSPolicyAssignmentInstanceFilterInventoryArgs>> inventories;

        public Builder() {
    	      // Empty
        }

        public Builder(OSPolicyAssignmentInstanceFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.all = defaults.all;
    	      this.exclusionLabels = defaults.exclusionLabels;
    	      this.inclusionLabels = defaults.inclusionLabels;
    	      this.inventories = defaults.inventories;
        }

        public Builder setAll(@Nullable Input<Boolean> all) {
            this.all = all;
            return this;
        }

        public Builder setAll(@Nullable Boolean all) {
            this.all = Input.ofNullable(all);
            return this;
        }

        public Builder setExclusionLabels(@Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> exclusionLabels) {
            this.exclusionLabels = exclusionLabels;
            return this;
        }

        public Builder setExclusionLabels(@Nullable List<OSPolicyAssignmentLabelSetArgs> exclusionLabels) {
            this.exclusionLabels = Input.ofNullable(exclusionLabels);
            return this;
        }

        public Builder setInclusionLabels(@Nullable Input<List<OSPolicyAssignmentLabelSetArgs>> inclusionLabels) {
            this.inclusionLabels = inclusionLabels;
            return this;
        }

        public Builder setInclusionLabels(@Nullable List<OSPolicyAssignmentLabelSetArgs> inclusionLabels) {
            this.inclusionLabels = Input.ofNullable(inclusionLabels);
            return this;
        }

        public Builder setInventories(@Nullable Input<List<OSPolicyAssignmentInstanceFilterInventoryArgs>> inventories) {
            this.inventories = inventories;
            return this;
        }

        public Builder setInventories(@Nullable List<OSPolicyAssignmentInstanceFilterInventoryArgs> inventories) {
            this.inventories = Input.ofNullable(inventories);
            return this;
        }

        public OSPolicyAssignmentInstanceFilterArgs build() {
            return new OSPolicyAssignmentInstanceFilterArgs(all, exclusionLabels, inclusionLabels, inventories);
        }
    }
}
