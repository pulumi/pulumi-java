// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v1.enums.DataSetPlotType;
import io.pulumi.googlenative.monitoring_v1.enums.DataSetTargetAxis;
import io.pulumi.googlenative.monitoring_v1.inputs.TimeSeriesQueryArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Groups a time series query definition with charting options.
 * 
 */
public final class DataSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataSetArgs Empty = new DataSetArgs();

    /**
     * A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.
     * 
     */
    @InputImport(name="legendTemplate")
      private final @Nullable Input<String> legendTemplate;

    public Input<String> getLegendTemplate() {
        return this.legendTemplate == null ? Input.empty() : this.legendTemplate;
    }

    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     * 
     */
    @InputImport(name="minAlignmentPeriod")
      private final @Nullable Input<String> minAlignmentPeriod;

    public Input<String> getMinAlignmentPeriod() {
        return this.minAlignmentPeriod == null ? Input.empty() : this.minAlignmentPeriod;
    }

    /**
     * How this data should be plotted on the chart.
     * 
     */
    @InputImport(name="plotType")
      private final @Nullable Input<DataSetPlotType> plotType;

    public Input<DataSetPlotType> getPlotType() {
        return this.plotType == null ? Input.empty() : this.plotType;
    }

    /**
     * Optional. The target axis to use for plotting the metric.
     * 
     */
    @InputImport(name="targetAxis")
      private final @Nullable Input<DataSetTargetAxis> targetAxis;

    public Input<DataSetTargetAxis> getTargetAxis() {
        return this.targetAxis == null ? Input.empty() : this.targetAxis;
    }

    /**
     * Fields for querying time series data from the Stackdriver metrics API.
     * 
     */
    @InputImport(name="timeSeriesQuery", required=true)
      private final Input<TimeSeriesQueryArgs> timeSeriesQuery;

    public Input<TimeSeriesQueryArgs> getTimeSeriesQuery() {
        return this.timeSeriesQuery;
    }

    public DataSetArgs(
        @Nullable Input<String> legendTemplate,
        @Nullable Input<String> minAlignmentPeriod,
        @Nullable Input<DataSetPlotType> plotType,
        @Nullable Input<DataSetTargetAxis> targetAxis,
        Input<TimeSeriesQueryArgs> timeSeriesQuery) {
        this.legendTemplate = legendTemplate;
        this.minAlignmentPeriod = minAlignmentPeriod;
        this.plotType = plotType;
        this.targetAxis = targetAxis;
        this.timeSeriesQuery = Objects.requireNonNull(timeSeriesQuery, "expected parameter 'timeSeriesQuery' to be non-null");
    }

    private DataSetArgs() {
        this.legendTemplate = Input.empty();
        this.minAlignmentPeriod = Input.empty();
        this.plotType = Input.empty();
        this.targetAxis = Input.empty();
        this.timeSeriesQuery = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> legendTemplate;
        private @Nullable Input<String> minAlignmentPeriod;
        private @Nullable Input<DataSetPlotType> plotType;
        private @Nullable Input<DataSetTargetAxis> targetAxis;
        private Input<TimeSeriesQueryArgs> timeSeriesQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.legendTemplate = defaults.legendTemplate;
    	      this.minAlignmentPeriod = defaults.minAlignmentPeriod;
    	      this.plotType = defaults.plotType;
    	      this.targetAxis = defaults.targetAxis;
    	      this.timeSeriesQuery = defaults.timeSeriesQuery;
        }

        public Builder setLegendTemplate(@Nullable Input<String> legendTemplate) {
            this.legendTemplate = legendTemplate;
            return this;
        }

        public Builder setLegendTemplate(@Nullable String legendTemplate) {
            this.legendTemplate = Input.ofNullable(legendTemplate);
            return this;
        }

        public Builder setMinAlignmentPeriod(@Nullable Input<String> minAlignmentPeriod) {
            this.minAlignmentPeriod = minAlignmentPeriod;
            return this;
        }

        public Builder setMinAlignmentPeriod(@Nullable String minAlignmentPeriod) {
            this.minAlignmentPeriod = Input.ofNullable(minAlignmentPeriod);
            return this;
        }

        public Builder setPlotType(@Nullable Input<DataSetPlotType> plotType) {
            this.plotType = plotType;
            return this;
        }

        public Builder setPlotType(@Nullable DataSetPlotType plotType) {
            this.plotType = Input.ofNullable(plotType);
            return this;
        }

        public Builder setTargetAxis(@Nullable Input<DataSetTargetAxis> targetAxis) {
            this.targetAxis = targetAxis;
            return this;
        }

        public Builder setTargetAxis(@Nullable DataSetTargetAxis targetAxis) {
            this.targetAxis = Input.ofNullable(targetAxis);
            return this;
        }

        public Builder setTimeSeriesQuery(Input<TimeSeriesQueryArgs> timeSeriesQuery) {
            this.timeSeriesQuery = Objects.requireNonNull(timeSeriesQuery);
            return this;
        }

        public Builder setTimeSeriesQuery(TimeSeriesQueryArgs timeSeriesQuery) {
            this.timeSeriesQuery = Input.of(Objects.requireNonNull(timeSeriesQuery));
            return this;
        }
        public DataSetArgs build() {
            return new DataSetArgs(legendTemplate, minAlignmentPeriod, plotType, targetAxis, timeSeriesQuery);
        }
    }
}
