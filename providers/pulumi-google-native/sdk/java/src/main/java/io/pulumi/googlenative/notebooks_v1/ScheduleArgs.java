// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.notebooks_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.notebooks_v1.enums.ScheduleState;
import io.pulumi.googlenative.notebooks_v1.inputs.ExecutionTemplateArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScheduleArgs Empty = new ScheduleArgs();

    /**
     * Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
     * 
     */
    @InputImport(name="cronSchedule")
    private final @Nullable Input<String> cronSchedule;

    public Input<String> getCronSchedule() {
        return this.cronSchedule == null ? Input.empty() : this.cronSchedule;
    }

    /**
     * A brief description of this environment.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Notebook Execution Template corresponding to this schedule.
     * 
     */
    @InputImport(name="executionTemplate")
    private final @Nullable Input<ExecutionTemplateArgs> executionTemplate;

    public Input<ExecutionTemplateArgs> getExecutionTemplate() {
        return this.executionTemplate == null ? Input.empty() : this.executionTemplate;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="scheduleId", required=true)
    private final Input<String> scheduleId;

    public Input<String> getScheduleId() {
        return this.scheduleId;
    }

    @InputImport(name="state")
    private final @Nullable Input<ScheduleState> state;

    public Input<ScheduleState> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    /**
     * Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
     * 
     */
    @InputImport(name="timeZone")
    private final @Nullable Input<String> timeZone;

    public Input<String> getTimeZone() {
        return this.timeZone == null ? Input.empty() : this.timeZone;
    }

    public ScheduleArgs(
        @Nullable Input<String> cronSchedule,
        @Nullable Input<String> description,
        @Nullable Input<ExecutionTemplateArgs> executionTemplate,
        @Nullable Input<String> location,
        @Nullable Input<String> project,
        Input<String> scheduleId,
        @Nullable Input<ScheduleState> state,
        @Nullable Input<String> timeZone) {
        this.cronSchedule = cronSchedule;
        this.description = description;
        this.executionTemplate = executionTemplate;
        this.location = location;
        this.project = project;
        this.scheduleId = Objects.requireNonNull(scheduleId, "expected parameter 'scheduleId' to be non-null");
        this.state = state;
        this.timeZone = timeZone;
    }

    private ScheduleArgs() {
        this.cronSchedule = Input.empty();
        this.description = Input.empty();
        this.executionTemplate = Input.empty();
        this.location = Input.empty();
        this.project = Input.empty();
        this.scheduleId = Input.empty();
        this.state = Input.empty();
        this.timeZone = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cronSchedule;
        private @Nullable Input<String> description;
        private @Nullable Input<ExecutionTemplateArgs> executionTemplate;
        private @Nullable Input<String> location;
        private @Nullable Input<String> project;
        private Input<String> scheduleId;
        private @Nullable Input<ScheduleState> state;
        private @Nullable Input<String> timeZone;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronSchedule = defaults.cronSchedule;
    	      this.description = defaults.description;
    	      this.executionTemplate = defaults.executionTemplate;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.scheduleId = defaults.scheduleId;
    	      this.state = defaults.state;
    	      this.timeZone = defaults.timeZone;
        }

        public Builder setCronSchedule(@Nullable Input<String> cronSchedule) {
            this.cronSchedule = cronSchedule;
            return this;
        }

        public Builder setCronSchedule(@Nullable String cronSchedule) {
            this.cronSchedule = Input.ofNullable(cronSchedule);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setExecutionTemplate(@Nullable Input<ExecutionTemplateArgs> executionTemplate) {
            this.executionTemplate = executionTemplate;
            return this;
        }

        public Builder setExecutionTemplate(@Nullable ExecutionTemplateArgs executionTemplate) {
            this.executionTemplate = Input.ofNullable(executionTemplate);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setScheduleId(Input<String> scheduleId) {
            this.scheduleId = Objects.requireNonNull(scheduleId);
            return this;
        }

        public Builder setScheduleId(String scheduleId) {
            this.scheduleId = Input.of(Objects.requireNonNull(scheduleId));
            return this;
        }

        public Builder setState(@Nullable Input<ScheduleState> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable ScheduleState state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder setTimeZone(@Nullable Input<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder setTimeZone(@Nullable String timeZone) {
            this.timeZone = Input.ofNullable(timeZone);
            return this;
        }

        public ScheduleArgs build() {
            return new ScheduleArgs(cronSchedule, description, executionTemplate, location, project, scheduleId, state, timeZone);
        }
    }
}
