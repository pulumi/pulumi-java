// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_alpha.outputs.BackendResponse;
import io.pulumi.googlenative.compute_alpha.outputs.BackendServiceCdnPolicyResponse;
import io.pulumi.googlenative.compute_alpha.outputs.BackendServiceConnectionTrackingPolicyResponse;
import io.pulumi.googlenative.compute_alpha.outputs.BackendServiceFailoverPolicyResponse;
import io.pulumi.googlenative.compute_alpha.outputs.BackendServiceIAPResponse;
import io.pulumi.googlenative.compute_alpha.outputs.BackendServiceLogConfigResponse;
import io.pulumi.googlenative.compute_alpha.outputs.CircuitBreakersResponse;
import io.pulumi.googlenative.compute_alpha.outputs.ConnectionDrainingResponse;
import io.pulumi.googlenative.compute_alpha.outputs.ConsistentHashLoadBalancerSettingsResponse;
import io.pulumi.googlenative.compute_alpha.outputs.DurationResponse;
import io.pulumi.googlenative.compute_alpha.outputs.OutlierDetectionResponse;
import io.pulumi.googlenative.compute_alpha.outputs.SecuritySettingsResponse;
import io.pulumi.googlenative.compute_alpha.outputs.SubsettingResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetBackendServiceResult {
    private final Integer affinityCookieTtlSec;
    private final List<BackendResponse> backends;
    private final BackendServiceCdnPolicyResponse cdnPolicy;
    private final CircuitBreakersResponse circuitBreakers;
    private final String compressionMode;
    private final ConnectionDrainingResponse connectionDraining;
    private final BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy;
    private final ConsistentHashLoadBalancerSettingsResponse consistentHash;
    private final String creationTimestamp;
    private final List<String> customRequestHeaders;
    private final List<String> customResponseHeaders;
    private final String description;
    private final String edgeSecurityPolicy;
    private final Boolean enableCDN;
    private final BackendServiceFailoverPolicyResponse failoverPolicy;
    private final String fingerprint;
    private final List<String> healthChecks;
    private final BackendServiceIAPResponse iap;
    private final String kind;
    private final String loadBalancingScheme;
    private final String localityLbPolicy;
    private final BackendServiceLogConfigResponse logConfig;
    private final DurationResponse maxStreamDuration;
    private final String name;
    private final String network;
    private final OutlierDetectionResponse outlierDetection;
    private final String portName;
    private final String protocol;
    private final String region;
    private final String securityPolicy;
    private final SecuritySettingsResponse securitySettings;
    private final String selfLink;
    private final String selfLinkWithId;
    private final List<String> serviceBindings;
    private final String serviceLbPolicy;
    private final String sessionAffinity;
    private final SubsettingResponse subsetting;
    private final Integer timeoutSec;

    @OutputCustomType.Constructor({"affinityCookieTtlSec","backends","cdnPolicy","circuitBreakers","compressionMode","connectionDraining","connectionTrackingPolicy","consistentHash","creationTimestamp","customRequestHeaders","customResponseHeaders","description","edgeSecurityPolicy","enableCDN","failoverPolicy","fingerprint","healthChecks","iap","kind","loadBalancingScheme","localityLbPolicy","logConfig","maxStreamDuration","name","network","outlierDetection","portName","protocol","region","securityPolicy","securitySettings","selfLink","selfLinkWithId","serviceBindings","serviceLbPolicy","sessionAffinity","subsetting","timeoutSec"})
    private GetBackendServiceResult(
        Integer affinityCookieTtlSec,
        List<BackendResponse> backends,
        BackendServiceCdnPolicyResponse cdnPolicy,
        CircuitBreakersResponse circuitBreakers,
        String compressionMode,
        ConnectionDrainingResponse connectionDraining,
        BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy,
        ConsistentHashLoadBalancerSettingsResponse consistentHash,
        String creationTimestamp,
        List<String> customRequestHeaders,
        List<String> customResponseHeaders,
        String description,
        String edgeSecurityPolicy,
        Boolean enableCDN,
        BackendServiceFailoverPolicyResponse failoverPolicy,
        String fingerprint,
        List<String> healthChecks,
        BackendServiceIAPResponse iap,
        String kind,
        String loadBalancingScheme,
        String localityLbPolicy,
        BackendServiceLogConfigResponse logConfig,
        DurationResponse maxStreamDuration,
        String name,
        String network,
        OutlierDetectionResponse outlierDetection,
        String portName,
        String protocol,
        String region,
        String securityPolicy,
        SecuritySettingsResponse securitySettings,
        String selfLink,
        String selfLinkWithId,
        List<String> serviceBindings,
        String serviceLbPolicy,
        String sessionAffinity,
        SubsettingResponse subsetting,
        Integer timeoutSec) {
        this.affinityCookieTtlSec = Objects.requireNonNull(affinityCookieTtlSec);
        this.backends = Objects.requireNonNull(backends);
        this.cdnPolicy = Objects.requireNonNull(cdnPolicy);
        this.circuitBreakers = Objects.requireNonNull(circuitBreakers);
        this.compressionMode = Objects.requireNonNull(compressionMode);
        this.connectionDraining = Objects.requireNonNull(connectionDraining);
        this.connectionTrackingPolicy = Objects.requireNonNull(connectionTrackingPolicy);
        this.consistentHash = Objects.requireNonNull(consistentHash);
        this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
        this.customRequestHeaders = Objects.requireNonNull(customRequestHeaders);
        this.customResponseHeaders = Objects.requireNonNull(customResponseHeaders);
        this.description = Objects.requireNonNull(description);
        this.edgeSecurityPolicy = Objects.requireNonNull(edgeSecurityPolicy);
        this.enableCDN = Objects.requireNonNull(enableCDN);
        this.failoverPolicy = Objects.requireNonNull(failoverPolicy);
        this.fingerprint = Objects.requireNonNull(fingerprint);
        this.healthChecks = Objects.requireNonNull(healthChecks);
        this.iap = Objects.requireNonNull(iap);
        this.kind = Objects.requireNonNull(kind);
        this.loadBalancingScheme = Objects.requireNonNull(loadBalancingScheme);
        this.localityLbPolicy = Objects.requireNonNull(localityLbPolicy);
        this.logConfig = Objects.requireNonNull(logConfig);
        this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.outlierDetection = Objects.requireNonNull(outlierDetection);
        this.portName = Objects.requireNonNull(portName);
        this.protocol = Objects.requireNonNull(protocol);
        this.region = Objects.requireNonNull(region);
        this.securityPolicy = Objects.requireNonNull(securityPolicy);
        this.securitySettings = Objects.requireNonNull(securitySettings);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.selfLinkWithId = Objects.requireNonNull(selfLinkWithId);
        this.serviceBindings = Objects.requireNonNull(serviceBindings);
        this.serviceLbPolicy = Objects.requireNonNull(serviceLbPolicy);
        this.sessionAffinity = Objects.requireNonNull(sessionAffinity);
        this.subsetting = Objects.requireNonNull(subsetting);
        this.timeoutSec = Objects.requireNonNull(timeoutSec);
    }

    public Integer getAffinityCookieTtlSec() {
        return this.affinityCookieTtlSec;
    }
    public List<BackendResponse> getBackends() {
        return this.backends;
    }
    public BackendServiceCdnPolicyResponse getCdnPolicy() {
        return this.cdnPolicy;
    }
    public CircuitBreakersResponse getCircuitBreakers() {
        return this.circuitBreakers;
    }
    public String getCompressionMode() {
        return this.compressionMode;
    }
    public ConnectionDrainingResponse getConnectionDraining() {
        return this.connectionDraining;
    }
    public BackendServiceConnectionTrackingPolicyResponse getConnectionTrackingPolicy() {
        return this.connectionTrackingPolicy;
    }
    public ConsistentHashLoadBalancerSettingsResponse getConsistentHash() {
        return this.consistentHash;
    }
    public String getCreationTimestamp() {
        return this.creationTimestamp;
    }
    public List<String> getCustomRequestHeaders() {
        return this.customRequestHeaders;
    }
    public List<String> getCustomResponseHeaders() {
        return this.customResponseHeaders;
    }
    public String getDescription() {
        return this.description;
    }
    public String getEdgeSecurityPolicy() {
        return this.edgeSecurityPolicy;
    }
    public Boolean getEnableCDN() {
        return this.enableCDN;
    }
    public BackendServiceFailoverPolicyResponse getFailoverPolicy() {
        return this.failoverPolicy;
    }
    public String getFingerprint() {
        return this.fingerprint;
    }
    public List<String> getHealthChecks() {
        return this.healthChecks;
    }
    public BackendServiceIAPResponse getIap() {
        return this.iap;
    }
    public String getKind() {
        return this.kind;
    }
    public String getLoadBalancingScheme() {
        return this.loadBalancingScheme;
    }
    public String getLocalityLbPolicy() {
        return this.localityLbPolicy;
    }
    public BackendServiceLogConfigResponse getLogConfig() {
        return this.logConfig;
    }
    public DurationResponse getMaxStreamDuration() {
        return this.maxStreamDuration;
    }
    public String getName() {
        return this.name;
    }
    public String getNetwork() {
        return this.network;
    }
    public OutlierDetectionResponse getOutlierDetection() {
        return this.outlierDetection;
    }
    public String getPortName() {
        return this.portName;
    }
    public String getProtocol() {
        return this.protocol;
    }
    public String getRegion() {
        return this.region;
    }
    public String getSecurityPolicy() {
        return this.securityPolicy;
    }
    public SecuritySettingsResponse getSecuritySettings() {
        return this.securitySettings;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public String getSelfLinkWithId() {
        return this.selfLinkWithId;
    }
    public List<String> getServiceBindings() {
        return this.serviceBindings;
    }
    public String getServiceLbPolicy() {
        return this.serviceLbPolicy;
    }
    public String getSessionAffinity() {
        return this.sessionAffinity;
    }
    public SubsettingResponse getSubsetting() {
        return this.subsetting;
    }
    public Integer getTimeoutSec() {
        return this.timeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer affinityCookieTtlSec;
        private List<BackendResponse> backends;
        private BackendServiceCdnPolicyResponse cdnPolicy;
        private CircuitBreakersResponse circuitBreakers;
        private String compressionMode;
        private ConnectionDrainingResponse connectionDraining;
        private BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy;
        private ConsistentHashLoadBalancerSettingsResponse consistentHash;
        private String creationTimestamp;
        private List<String> customRequestHeaders;
        private List<String> customResponseHeaders;
        private String description;
        private String edgeSecurityPolicy;
        private Boolean enableCDN;
        private BackendServiceFailoverPolicyResponse failoverPolicy;
        private String fingerprint;
        private List<String> healthChecks;
        private BackendServiceIAPResponse iap;
        private String kind;
        private String loadBalancingScheme;
        private String localityLbPolicy;
        private BackendServiceLogConfigResponse logConfig;
        private DurationResponse maxStreamDuration;
        private String name;
        private String network;
        private OutlierDetectionResponse outlierDetection;
        private String portName;
        private String protocol;
        private String region;
        private String securityPolicy;
        private SecuritySettingsResponse securitySettings;
        private String selfLink;
        private String selfLinkWithId;
        private List<String> serviceBindings;
        private String serviceLbPolicy;
        private String sessionAffinity;
        private SubsettingResponse subsetting;
        private Integer timeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieTtlSec = defaults.affinityCookieTtlSec;
    	      this.backends = defaults.backends;
    	      this.cdnPolicy = defaults.cdnPolicy;
    	      this.circuitBreakers = defaults.circuitBreakers;
    	      this.compressionMode = defaults.compressionMode;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.connectionTrackingPolicy = defaults.connectionTrackingPolicy;
    	      this.consistentHash = defaults.consistentHash;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.customRequestHeaders = defaults.customRequestHeaders;
    	      this.customResponseHeaders = defaults.customResponseHeaders;
    	      this.description = defaults.description;
    	      this.edgeSecurityPolicy = defaults.edgeSecurityPolicy;
    	      this.enableCDN = defaults.enableCDN;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.fingerprint = defaults.fingerprint;
    	      this.healthChecks = defaults.healthChecks;
    	      this.iap = defaults.iap;
    	      this.kind = defaults.kind;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.localityLbPolicy = defaults.localityLbPolicy;
    	      this.logConfig = defaults.logConfig;
    	      this.maxStreamDuration = defaults.maxStreamDuration;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.portName = defaults.portName;
    	      this.protocol = defaults.protocol;
    	      this.region = defaults.region;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.securitySettings = defaults.securitySettings;
    	      this.selfLink = defaults.selfLink;
    	      this.selfLinkWithId = defaults.selfLinkWithId;
    	      this.serviceBindings = defaults.serviceBindings;
    	      this.serviceLbPolicy = defaults.serviceLbPolicy;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.subsetting = defaults.subsetting;
    	      this.timeoutSec = defaults.timeoutSec;
        }

        public Builder setAffinityCookieTtlSec(Integer affinityCookieTtlSec) {
            this.affinityCookieTtlSec = Objects.requireNonNull(affinityCookieTtlSec);
            return this;
        }

        public Builder setBackends(List<BackendResponse> backends) {
            this.backends = Objects.requireNonNull(backends);
            return this;
        }

        public Builder setCdnPolicy(BackendServiceCdnPolicyResponse cdnPolicy) {
            this.cdnPolicy = Objects.requireNonNull(cdnPolicy);
            return this;
        }

        public Builder setCircuitBreakers(CircuitBreakersResponse circuitBreakers) {
            this.circuitBreakers = Objects.requireNonNull(circuitBreakers);
            return this;
        }

        public Builder setCompressionMode(String compressionMode) {
            this.compressionMode = Objects.requireNonNull(compressionMode);
            return this;
        }

        public Builder setConnectionDraining(ConnectionDrainingResponse connectionDraining) {
            this.connectionDraining = Objects.requireNonNull(connectionDraining);
            return this;
        }

        public Builder setConnectionTrackingPolicy(BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy) {
            this.connectionTrackingPolicy = Objects.requireNonNull(connectionTrackingPolicy);
            return this;
        }

        public Builder setConsistentHash(ConsistentHashLoadBalancerSettingsResponse consistentHash) {
            this.consistentHash = Objects.requireNonNull(consistentHash);
            return this;
        }

        public Builder setCreationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }

        public Builder setCustomRequestHeaders(List<String> customRequestHeaders) {
            this.customRequestHeaders = Objects.requireNonNull(customRequestHeaders);
            return this;
        }

        public Builder setCustomResponseHeaders(List<String> customResponseHeaders) {
            this.customResponseHeaders = Objects.requireNonNull(customResponseHeaders);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEdgeSecurityPolicy(String edgeSecurityPolicy) {
            this.edgeSecurityPolicy = Objects.requireNonNull(edgeSecurityPolicy);
            return this;
        }

        public Builder setEnableCDN(Boolean enableCDN) {
            this.enableCDN = Objects.requireNonNull(enableCDN);
            return this;
        }

        public Builder setFailoverPolicy(BackendServiceFailoverPolicyResponse failoverPolicy) {
            this.failoverPolicy = Objects.requireNonNull(failoverPolicy);
            return this;
        }

        public Builder setFingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }

        public Builder setHealthChecks(List<String> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }

        public Builder setIap(BackendServiceIAPResponse iap) {
            this.iap = Objects.requireNonNull(iap);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLoadBalancingScheme(String loadBalancingScheme) {
            this.loadBalancingScheme = Objects.requireNonNull(loadBalancingScheme);
            return this;
        }

        public Builder setLocalityLbPolicy(String localityLbPolicy) {
            this.localityLbPolicy = Objects.requireNonNull(localityLbPolicy);
            return this;
        }

        public Builder setLogConfig(BackendServiceLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }

        public Builder setMaxStreamDuration(DurationResponse maxStreamDuration) {
            this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setOutlierDetection(OutlierDetectionResponse outlierDetection) {
            this.outlierDetection = Objects.requireNonNull(outlierDetection);
            return this;
        }

        public Builder setPortName(String portName) {
            this.portName = Objects.requireNonNull(portName);
            return this;
        }

        public Builder setProtocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setRegion(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder setSecurityPolicy(String securityPolicy) {
            this.securityPolicy = Objects.requireNonNull(securityPolicy);
            return this;
        }

        public Builder setSecuritySettings(SecuritySettingsResponse securitySettings) {
            this.securitySettings = Objects.requireNonNull(securitySettings);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setSelfLinkWithId(String selfLinkWithId) {
            this.selfLinkWithId = Objects.requireNonNull(selfLinkWithId);
            return this;
        }

        public Builder setServiceBindings(List<String> serviceBindings) {
            this.serviceBindings = Objects.requireNonNull(serviceBindings);
            return this;
        }

        public Builder setServiceLbPolicy(String serviceLbPolicy) {
            this.serviceLbPolicy = Objects.requireNonNull(serviceLbPolicy);
            return this;
        }

        public Builder setSessionAffinity(String sessionAffinity) {
            this.sessionAffinity = Objects.requireNonNull(sessionAffinity);
            return this;
        }

        public Builder setSubsetting(SubsettingResponse subsetting) {
            this.subsetting = Objects.requireNonNull(subsetting);
            return this;
        }

        public Builder setTimeoutSec(Integer timeoutSec) {
            this.timeoutSec = Objects.requireNonNull(timeoutSec);
            return this;
        }

        public GetBackendServiceResult build() {
            return new GetBackendServiceResult(affinityCookieTtlSec, backends, cdnPolicy, circuitBreakers, compressionMode, connectionDraining, connectionTrackingPolicy, consistentHash, creationTimestamp, customRequestHeaders, customResponseHeaders, description, edgeSecurityPolicy, enableCDN, failoverPolicy, fingerprint, healthChecks, iap, kind, loadBalancingScheme, localityLbPolicy, logConfig, maxStreamDuration, name, network, outlierDetection, portName, protocol, region, securityPolicy, securitySettings, selfLink, selfLinkWithId, serviceBindings, serviceLbPolicy, sessionAffinity, subsetting, timeoutSec);
        }
    }
}
