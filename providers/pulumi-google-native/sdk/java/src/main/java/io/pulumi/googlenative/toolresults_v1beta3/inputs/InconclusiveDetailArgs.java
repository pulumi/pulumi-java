// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Details for an outcome with an INCONCLUSIVE outcome summary.
 * 
 */
public final class InconclusiveDetailArgs extends io.pulumi.resources.ResourceArgs {

    public static final InconclusiveDetailArgs Empty = new InconclusiveDetailArgs();

    /**
     * If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.
     * 
     */
    @Import(name="abortedByUser")
      private final @Nullable Output<Boolean> abortedByUser;

    public Output<Boolean> getAbortedByUser() {
        return this.abortedByUser == null ? Output.empty() : this.abortedByUser;
    }

    /**
     * If results are being provided to the user in certain cases of infrastructure failures
     * 
     */
    @Import(name="hasErrorLogs")
      private final @Nullable Output<Boolean> hasErrorLogs;

    public Output<Boolean> getHasErrorLogs() {
        return this.hasErrorLogs == null ? Output.empty() : this.hasErrorLogs;
    }

    /**
     * If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.
     * 
     */
    @Import(name="infrastructureFailure")
      private final @Nullable Output<Boolean> infrastructureFailure;

    public Output<Boolean> getInfrastructureFailure() {
        return this.infrastructureFailure == null ? Output.empty() : this.infrastructureFailure;
    }

    public InconclusiveDetailArgs(
        @Nullable Output<Boolean> abortedByUser,
        @Nullable Output<Boolean> hasErrorLogs,
        @Nullable Output<Boolean> infrastructureFailure) {
        this.abortedByUser = abortedByUser;
        this.hasErrorLogs = hasErrorLogs;
        this.infrastructureFailure = infrastructureFailure;
    }

    private InconclusiveDetailArgs() {
        this.abortedByUser = Output.empty();
        this.hasErrorLogs = Output.empty();
        this.infrastructureFailure = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InconclusiveDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> abortedByUser;
        private @Nullable Output<Boolean> hasErrorLogs;
        private @Nullable Output<Boolean> infrastructureFailure;

        public Builder() {
    	      // Empty
        }

        public Builder(InconclusiveDetailArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortedByUser = defaults.abortedByUser;
    	      this.hasErrorLogs = defaults.hasErrorLogs;
    	      this.infrastructureFailure = defaults.infrastructureFailure;
        }

        public Builder abortedByUser(@Nullable Output<Boolean> abortedByUser) {
            this.abortedByUser = abortedByUser;
            return this;
        }
        public Builder abortedByUser(@Nullable Boolean abortedByUser) {
            this.abortedByUser = Output.ofNullable(abortedByUser);
            return this;
        }
        public Builder hasErrorLogs(@Nullable Output<Boolean> hasErrorLogs) {
            this.hasErrorLogs = hasErrorLogs;
            return this;
        }
        public Builder hasErrorLogs(@Nullable Boolean hasErrorLogs) {
            this.hasErrorLogs = Output.ofNullable(hasErrorLogs);
            return this;
        }
        public Builder infrastructureFailure(@Nullable Output<Boolean> infrastructureFailure) {
            this.infrastructureFailure = infrastructureFailure;
            return this;
        }
        public Builder infrastructureFailure(@Nullable Boolean infrastructureFailure) {
            this.infrastructureFailure = Output.ofNullable(infrastructureFailure);
            return this;
        }        public InconclusiveDetailArgs build() {
            return new InconclusiveDetailArgs(abortedByUser, hasErrorLogs, infrastructureFailure);
        }
    }
}
