// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Details for an outcome with a FAILURE outcome summary.
 * 
 */
public final class FailureDetailResponse extends io.pulumi.resources.InvokeArgs {

    public static final FailureDetailResponse Empty = new FailureDetailResponse();

    /**
     * If the failure was severe because the system (app) under test crashed.
     * 
     */
    @InputImport(name="crashed", required=true)
      private final Boolean crashed;

    public Boolean getCrashed() {
        return this.crashed;
    }

    /**
     * If the device ran out of memory during a test, causing the test to crash.
     * 
     */
    @InputImport(name="deviceOutOfMemory", required=true)
      private final Boolean deviceOutOfMemory;

    public Boolean getDeviceOutOfMemory() {
        return this.deviceOutOfMemory;
    }

    /**
     * If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
     * 
     */
    @InputImport(name="failedRoboscript", required=true)
      private final Boolean failedRoboscript;

    public Boolean getFailedRoboscript() {
        return this.failedRoboscript;
    }

    /**
     * If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
     * 
     */
    @InputImport(name="notInstalled", required=true)
      private final Boolean notInstalled;

    public Boolean getNotInstalled() {
        return this.notInstalled;
    }

    /**
     * If a native process (including any other than the app) crashed.
     * 
     */
    @InputImport(name="otherNativeCrash", required=true)
      private final Boolean otherNativeCrash;

    public Boolean getOtherNativeCrash() {
        return this.otherNativeCrash;
    }

    /**
     * If the test overran some time limit, and that is why it failed.
     * 
     */
    @InputImport(name="timedOut", required=true)
      private final Boolean timedOut;

    public Boolean getTimedOut() {
        return this.timedOut;
    }

    /**
     * If the robo was unable to crawl the app; perhaps because the app did not start.
     * 
     */
    @InputImport(name="unableToCrawl", required=true)
      private final Boolean unableToCrawl;

    public Boolean getUnableToCrawl() {
        return this.unableToCrawl;
    }

    public FailureDetailResponse(
        Boolean crashed,
        Boolean deviceOutOfMemory,
        Boolean failedRoboscript,
        Boolean notInstalled,
        Boolean otherNativeCrash,
        Boolean timedOut,
        Boolean unableToCrawl) {
        this.crashed = Objects.requireNonNull(crashed, "expected parameter 'crashed' to be non-null");
        this.deviceOutOfMemory = Objects.requireNonNull(deviceOutOfMemory, "expected parameter 'deviceOutOfMemory' to be non-null");
        this.failedRoboscript = Objects.requireNonNull(failedRoboscript, "expected parameter 'failedRoboscript' to be non-null");
        this.notInstalled = Objects.requireNonNull(notInstalled, "expected parameter 'notInstalled' to be non-null");
        this.otherNativeCrash = Objects.requireNonNull(otherNativeCrash, "expected parameter 'otherNativeCrash' to be non-null");
        this.timedOut = Objects.requireNonNull(timedOut, "expected parameter 'timedOut' to be non-null");
        this.unableToCrawl = Objects.requireNonNull(unableToCrawl, "expected parameter 'unableToCrawl' to be non-null");
    }

    private FailureDetailResponse() {
        this.crashed = null;
        this.deviceOutOfMemory = null;
        this.failedRoboscript = null;
        this.notInstalled = null;
        this.otherNativeCrash = null;
        this.timedOut = null;
        this.unableToCrawl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FailureDetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean crashed;
        private Boolean deviceOutOfMemory;
        private Boolean failedRoboscript;
        private Boolean notInstalled;
        private Boolean otherNativeCrash;
        private Boolean timedOut;
        private Boolean unableToCrawl;

        public Builder() {
    	      // Empty
        }

        public Builder(FailureDetailResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crashed = defaults.crashed;
    	      this.deviceOutOfMemory = defaults.deviceOutOfMemory;
    	      this.failedRoboscript = defaults.failedRoboscript;
    	      this.notInstalled = defaults.notInstalled;
    	      this.otherNativeCrash = defaults.otherNativeCrash;
    	      this.timedOut = defaults.timedOut;
    	      this.unableToCrawl = defaults.unableToCrawl;
        }

        public Builder setCrashed(Boolean crashed) {
            this.crashed = Objects.requireNonNull(crashed);
            return this;
        }

        public Builder setDeviceOutOfMemory(Boolean deviceOutOfMemory) {
            this.deviceOutOfMemory = Objects.requireNonNull(deviceOutOfMemory);
            return this;
        }

        public Builder setFailedRoboscript(Boolean failedRoboscript) {
            this.failedRoboscript = Objects.requireNonNull(failedRoboscript);
            return this;
        }

        public Builder setNotInstalled(Boolean notInstalled) {
            this.notInstalled = Objects.requireNonNull(notInstalled);
            return this;
        }

        public Builder setOtherNativeCrash(Boolean otherNativeCrash) {
            this.otherNativeCrash = Objects.requireNonNull(otherNativeCrash);
            return this;
        }

        public Builder setTimedOut(Boolean timedOut) {
            this.timedOut = Objects.requireNonNull(timedOut);
            return this;
        }

        public Builder setUnableToCrawl(Boolean unableToCrawl) {
            this.unableToCrawl = Objects.requireNonNull(unableToCrawl);
            return this;
        }
        public FailureDetailResponse build() {
            return new FailureDetailResponse(crashed, deviceOutOfMemory, failedRoboscript, notInstalled, otherNativeCrash, timedOut, unableToCrawl);
        }
    }
}
