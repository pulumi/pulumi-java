// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.deploymentmanager_v2beta.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.deploymentmanager_v2beta.inputs.ImportFileResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Files that make up the template contents of a template type.
 * 
 */
public final class TemplateContentsResponse extends io.pulumi.resources.InvokeArgs {

    public static final TemplateContentsResponse Empty = new TemplateContentsResponse();

    /**
     * Import files referenced by the main template.
     * 
     */
    @InputImport(name="imports", required=true)
      private final List<ImportFileResponse> imports;

    public List<ImportFileResponse> getImports() {
        return this.imports;
    }

    /**
     * Which interpreter (python or jinja) should be used during expansion.
     * 
     */
    @InputImport(name="interpreter", required=true)
      private final String interpreter;

    public String getInterpreter() {
        return this.interpreter;
    }

    /**
     * The filename of the mainTemplate
     * 
     */
    @InputImport(name="mainTemplate", required=true)
      private final String mainTemplate;

    public String getMainTemplate() {
        return this.mainTemplate;
    }

    /**
     * The contents of the template schema.
     * 
     */
    @InputImport(name="schema", required=true)
      private final String schema;

    public String getSchema() {
        return this.schema;
    }

    /**
     * The contents of the main template file.
     * 
     */
    @InputImport(name="template", required=true)
      private final String template;

    public String getTemplate() {
        return this.template;
    }

    public TemplateContentsResponse(
        List<ImportFileResponse> imports,
        String interpreter,
        String mainTemplate,
        String schema,
        String template) {
        this.imports = Objects.requireNonNull(imports, "expected parameter 'imports' to be non-null");
        this.interpreter = Objects.requireNonNull(interpreter, "expected parameter 'interpreter' to be non-null");
        this.mainTemplate = Objects.requireNonNull(mainTemplate, "expected parameter 'mainTemplate' to be non-null");
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
        this.template = Objects.requireNonNull(template, "expected parameter 'template' to be non-null");
    }

    private TemplateContentsResponse() {
        this.imports = List.of();
        this.interpreter = null;
        this.mainTemplate = null;
        this.schema = null;
        this.template = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateContentsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ImportFileResponse> imports;
        private String interpreter;
        private String mainTemplate;
        private String schema;
        private String template;

        public Builder() {
    	      // Empty
        }

        public Builder(TemplateContentsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imports = defaults.imports;
    	      this.interpreter = defaults.interpreter;
    	      this.mainTemplate = defaults.mainTemplate;
    	      this.schema = defaults.schema;
    	      this.template = defaults.template;
        }

        public Builder setImports(List<ImportFileResponse> imports) {
            this.imports = Objects.requireNonNull(imports);
            return this;
        }

        public Builder setInterpreter(String interpreter) {
            this.interpreter = Objects.requireNonNull(interpreter);
            return this;
        }

        public Builder setMainTemplate(String mainTemplate) {
            this.mainTemplate = Objects.requireNonNull(mainTemplate);
            return this;
        }

        public Builder setSchema(String schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }

        public Builder setTemplate(String template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }
        public TemplateContentsResponse build() {
            return new TemplateContentsResponse(imports, interpreter, mainTemplate, schema, template);
        }
    }
}
