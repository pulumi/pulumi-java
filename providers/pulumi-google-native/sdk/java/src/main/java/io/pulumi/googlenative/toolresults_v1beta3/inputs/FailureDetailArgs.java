// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Details for an outcome with a FAILURE outcome summary.
 * 
 */
public final class FailureDetailArgs extends io.pulumi.resources.ResourceArgs {

    public static final FailureDetailArgs Empty = new FailureDetailArgs();

    /**
     * If the failure was severe because the system (app) under test crashed.
     * 
     */
    @InputImport(name="crashed")
      private final @Nullable Input<Boolean> crashed;

    public Input<Boolean> getCrashed() {
        return this.crashed == null ? Input.empty() : this.crashed;
    }

    /**
     * If the device ran out of memory during a test, causing the test to crash.
     * 
     */
    @InputImport(name="deviceOutOfMemory")
      private final @Nullable Input<Boolean> deviceOutOfMemory;

    public Input<Boolean> getDeviceOutOfMemory() {
        return this.deviceOutOfMemory == null ? Input.empty() : this.deviceOutOfMemory;
    }

    /**
     * If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
     * 
     */
    @InputImport(name="failedRoboscript")
      private final @Nullable Input<Boolean> failedRoboscript;

    public Input<Boolean> getFailedRoboscript() {
        return this.failedRoboscript == null ? Input.empty() : this.failedRoboscript;
    }

    /**
     * If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
     * 
     */
    @InputImport(name="notInstalled")
      private final @Nullable Input<Boolean> notInstalled;

    public Input<Boolean> getNotInstalled() {
        return this.notInstalled == null ? Input.empty() : this.notInstalled;
    }

    /**
     * If a native process (including any other than the app) crashed.
     * 
     */
    @InputImport(name="otherNativeCrash")
      private final @Nullable Input<Boolean> otherNativeCrash;

    public Input<Boolean> getOtherNativeCrash() {
        return this.otherNativeCrash == null ? Input.empty() : this.otherNativeCrash;
    }

    /**
     * If the test overran some time limit, and that is why it failed.
     * 
     */
    @InputImport(name="timedOut")
      private final @Nullable Input<Boolean> timedOut;

    public Input<Boolean> getTimedOut() {
        return this.timedOut == null ? Input.empty() : this.timedOut;
    }

    /**
     * If the robo was unable to crawl the app; perhaps because the app did not start.
     * 
     */
    @InputImport(name="unableToCrawl")
      private final @Nullable Input<Boolean> unableToCrawl;

    public Input<Boolean> getUnableToCrawl() {
        return this.unableToCrawl == null ? Input.empty() : this.unableToCrawl;
    }

    public FailureDetailArgs(
        @Nullable Input<Boolean> crashed,
        @Nullable Input<Boolean> deviceOutOfMemory,
        @Nullable Input<Boolean> failedRoboscript,
        @Nullable Input<Boolean> notInstalled,
        @Nullable Input<Boolean> otherNativeCrash,
        @Nullable Input<Boolean> timedOut,
        @Nullable Input<Boolean> unableToCrawl) {
        this.crashed = crashed;
        this.deviceOutOfMemory = deviceOutOfMemory;
        this.failedRoboscript = failedRoboscript;
        this.notInstalled = notInstalled;
        this.otherNativeCrash = otherNativeCrash;
        this.timedOut = timedOut;
        this.unableToCrawl = unableToCrawl;
    }

    private FailureDetailArgs() {
        this.crashed = Input.empty();
        this.deviceOutOfMemory = Input.empty();
        this.failedRoboscript = Input.empty();
        this.notInstalled = Input.empty();
        this.otherNativeCrash = Input.empty();
        this.timedOut = Input.empty();
        this.unableToCrawl = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FailureDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> crashed;
        private @Nullable Input<Boolean> deviceOutOfMemory;
        private @Nullable Input<Boolean> failedRoboscript;
        private @Nullable Input<Boolean> notInstalled;
        private @Nullable Input<Boolean> otherNativeCrash;
        private @Nullable Input<Boolean> timedOut;
        private @Nullable Input<Boolean> unableToCrawl;

        public Builder() {
    	      // Empty
        }

        public Builder(FailureDetailArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crashed = defaults.crashed;
    	      this.deviceOutOfMemory = defaults.deviceOutOfMemory;
    	      this.failedRoboscript = defaults.failedRoboscript;
    	      this.notInstalled = defaults.notInstalled;
    	      this.otherNativeCrash = defaults.otherNativeCrash;
    	      this.timedOut = defaults.timedOut;
    	      this.unableToCrawl = defaults.unableToCrawl;
        }

        public Builder setCrashed(@Nullable Input<Boolean> crashed) {
            this.crashed = crashed;
            return this;
        }

        public Builder setCrashed(@Nullable Boolean crashed) {
            this.crashed = Input.ofNullable(crashed);
            return this;
        }

        public Builder setDeviceOutOfMemory(@Nullable Input<Boolean> deviceOutOfMemory) {
            this.deviceOutOfMemory = deviceOutOfMemory;
            return this;
        }

        public Builder setDeviceOutOfMemory(@Nullable Boolean deviceOutOfMemory) {
            this.deviceOutOfMemory = Input.ofNullable(deviceOutOfMemory);
            return this;
        }

        public Builder setFailedRoboscript(@Nullable Input<Boolean> failedRoboscript) {
            this.failedRoboscript = failedRoboscript;
            return this;
        }

        public Builder setFailedRoboscript(@Nullable Boolean failedRoboscript) {
            this.failedRoboscript = Input.ofNullable(failedRoboscript);
            return this;
        }

        public Builder setNotInstalled(@Nullable Input<Boolean> notInstalled) {
            this.notInstalled = notInstalled;
            return this;
        }

        public Builder setNotInstalled(@Nullable Boolean notInstalled) {
            this.notInstalled = Input.ofNullable(notInstalled);
            return this;
        }

        public Builder setOtherNativeCrash(@Nullable Input<Boolean> otherNativeCrash) {
            this.otherNativeCrash = otherNativeCrash;
            return this;
        }

        public Builder setOtherNativeCrash(@Nullable Boolean otherNativeCrash) {
            this.otherNativeCrash = Input.ofNullable(otherNativeCrash);
            return this;
        }

        public Builder setTimedOut(@Nullable Input<Boolean> timedOut) {
            this.timedOut = timedOut;
            return this;
        }

        public Builder setTimedOut(@Nullable Boolean timedOut) {
            this.timedOut = Input.ofNullable(timedOut);
            return this;
        }

        public Builder setUnableToCrawl(@Nullable Input<Boolean> unableToCrawl) {
            this.unableToCrawl = unableToCrawl;
            return this;
        }

        public Builder setUnableToCrawl(@Nullable Boolean unableToCrawl) {
            this.unableToCrawl = Input.ofNullable(unableToCrawl);
            return this;
        }
        public FailureDetailArgs build() {
            return new FailureDetailArgs(crashed, deviceOutOfMemory, failedRoboscript, notInstalled, otherNativeCrash, timedOut, unableToCrawl);
        }
    }
}
