// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.inputs.AppBundleResponse;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
 * 
 */
public final class AndroidTestLoopResponse extends io.pulumi.resources.InvokeArgs {

    public static final AndroidTestLoopResponse Empty = new AndroidTestLoopResponse();

    /**
     * The APK for the application under test.
     * 
     */
    @InputImport(name="appApk", required=true)
      private final FileReferenceResponse appApk;

    public FileReferenceResponse getAppApk() {
        return this.appApk;
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @InputImport(name="appBundle", required=true)
      private final AppBundleResponse appBundle;

    public AppBundleResponse getAppBundle() {
        return this.appBundle;
    }

    /**
     * The java package for the application under test. The default is determined by examining the application's manifest.
     * 
     */
    @InputImport(name="appPackageId", required=true)
      private final String appPackageId;

    public String getAppPackageId() {
        return this.appPackageId;
    }

    /**
     * The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
     * 
     */
    @InputImport(name="scenarioLabels", required=true)
      private final List<String> scenarioLabels;

    public List<String> getScenarioLabels() {
        return this.scenarioLabels;
    }

    /**
     * The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
     * 
     */
    @InputImport(name="scenarios", required=true)
      private final List<Integer> scenarios;

    public List<Integer> getScenarios() {
        return this.scenarios;
    }

    public AndroidTestLoopResponse(
        FileReferenceResponse appApk,
        AppBundleResponse appBundle,
        String appPackageId,
        List<String> scenarioLabels,
        List<Integer> scenarios) {
        this.appApk = Objects.requireNonNull(appApk, "expected parameter 'appApk' to be non-null");
        this.appBundle = Objects.requireNonNull(appBundle, "expected parameter 'appBundle' to be non-null");
        this.appPackageId = Objects.requireNonNull(appPackageId, "expected parameter 'appPackageId' to be non-null");
        this.scenarioLabels = Objects.requireNonNull(scenarioLabels, "expected parameter 'scenarioLabels' to be non-null");
        this.scenarios = Objects.requireNonNull(scenarios, "expected parameter 'scenarios' to be non-null");
    }

    private AndroidTestLoopResponse() {
        this.appApk = null;
        this.appBundle = null;
        this.appPackageId = null;
        this.scenarioLabels = List.of();
        this.scenarios = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidTestLoopResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileReferenceResponse appApk;
        private AppBundleResponse appBundle;
        private String appPackageId;
        private List<String> scenarioLabels;
        private List<Integer> scenarios;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidTestLoopResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appApk = defaults.appApk;
    	      this.appBundle = defaults.appBundle;
    	      this.appPackageId = defaults.appPackageId;
    	      this.scenarioLabels = defaults.scenarioLabels;
    	      this.scenarios = defaults.scenarios;
        }

        public Builder setAppApk(FileReferenceResponse appApk) {
            this.appApk = Objects.requireNonNull(appApk);
            return this;
        }

        public Builder setAppBundle(AppBundleResponse appBundle) {
            this.appBundle = Objects.requireNonNull(appBundle);
            return this;
        }

        public Builder setAppPackageId(String appPackageId) {
            this.appPackageId = Objects.requireNonNull(appPackageId);
            return this;
        }

        public Builder setScenarioLabels(List<String> scenarioLabels) {
            this.scenarioLabels = Objects.requireNonNull(scenarioLabels);
            return this;
        }

        public Builder setScenarios(List<Integer> scenarios) {
            this.scenarios = Objects.requireNonNull(scenarios);
            return this;
        }
        public AndroidTestLoopResponse build() {
            return new AndroidTestLoopResponse(appApk, appBundle, appPackageId, scenarioLabels, scenarios);
        }
    }
}
