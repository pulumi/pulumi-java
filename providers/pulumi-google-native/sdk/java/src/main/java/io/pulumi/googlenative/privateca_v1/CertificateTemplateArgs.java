// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateExtensionConstraintsArgs;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateIdentityConstraintsArgs;
import io.pulumi.googlenative.privateca_v1.inputs.X509ParametersArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateTemplateArgs Empty = new CertificateTemplateArgs();

    @InputImport(name="certificateTemplateId", required=true)
    private final Input<String> certificateTemplateId;

    public Input<String> getCertificateTemplateId() {
        return this.certificateTemplateId;
    }

    /**
     * Optional. A human-readable description of scenarios this template is intended for.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
     * 
     */
    @InputImport(name="identityConstraints")
    private final @Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints;

    public Input<CertificateIdentityConstraintsArgs> getIdentityConstraints() {
        return this.identityConstraints == null ? Input.empty() : this.identityConstraints;
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
     * 
     */
    @InputImport(name="passthroughExtensions")
    private final @Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions;

    public Input<CertificateExtensionConstraintsArgs> getPassthroughExtensions() {
        return this.passthroughExtensions == null ? Input.empty() : this.passthroughExtensions;
    }

    /**
     * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @InputImport(name="predefinedValues")
    private final @Nullable Input<X509ParametersArgs> predefinedValues;

    public Input<X509ParametersArgs> getPredefinedValues() {
        return this.predefinedValues == null ? Input.empty() : this.predefinedValues;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="requestId")
    private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    public CertificateTemplateArgs(
        Input<String> certificateTemplateId,
        @Nullable Input<String> description,
        @Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions,
        @Nullable Input<X509ParametersArgs> predefinedValues,
        @Nullable Input<String> project,
        @Nullable Input<String> requestId) {
        this.certificateTemplateId = Objects.requireNonNull(certificateTemplateId, "expected parameter 'certificateTemplateId' to be non-null");
        this.description = description;
        this.identityConstraints = identityConstraints;
        this.labels = labels;
        this.location = location;
        this.passthroughExtensions = passthroughExtensions;
        this.predefinedValues = predefinedValues;
        this.project = project;
        this.requestId = requestId;
    }

    private CertificateTemplateArgs() {
        this.certificateTemplateId = Input.empty();
        this.description = Input.empty();
        this.identityConstraints = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.passthroughExtensions = Input.empty();
        this.predefinedValues = Input.empty();
        this.project = Input.empty();
        this.requestId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> certificateTemplateId;
        private @Nullable Input<String> description;
        private @Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions;
        private @Nullable Input<X509ParametersArgs> predefinedValues;
        private @Nullable Input<String> project;
        private @Nullable Input<String> requestId;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateTemplateId = defaults.certificateTemplateId;
    	      this.description = defaults.description;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.passthroughExtensions = defaults.passthroughExtensions;
    	      this.predefinedValues = defaults.predefinedValues;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
        }

        public Builder setCertificateTemplateId(Input<String> certificateTemplateId) {
            this.certificateTemplateId = Objects.requireNonNull(certificateTemplateId);
            return this;
        }

        public Builder setCertificateTemplateId(String certificateTemplateId) {
            this.certificateTemplateId = Input.of(Objects.requireNonNull(certificateTemplateId));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setIdentityConstraints(@Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints) {
            this.identityConstraints = identityConstraints;
            return this;
        }

        public Builder setIdentityConstraints(@Nullable CertificateIdentityConstraintsArgs identityConstraints) {
            this.identityConstraints = Input.ofNullable(identityConstraints);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPassthroughExtensions(@Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions) {
            this.passthroughExtensions = passthroughExtensions;
            return this;
        }

        public Builder setPassthroughExtensions(@Nullable CertificateExtensionConstraintsArgs passthroughExtensions) {
            this.passthroughExtensions = Input.ofNullable(passthroughExtensions);
            return this;
        }

        public Builder setPredefinedValues(@Nullable Input<X509ParametersArgs> predefinedValues) {
            this.predefinedValues = predefinedValues;
            return this;
        }

        public Builder setPredefinedValues(@Nullable X509ParametersArgs predefinedValues) {
            this.predefinedValues = Input.ofNullable(predefinedValues);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRequestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder setRequestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public CertificateTemplateArgs build() {
            return new CertificateTemplateArgs(certificateTemplateId, description, identityConstraints, labels, location, passthroughExtensions, predefinedValues, project, requestId);
        }
    }
}
