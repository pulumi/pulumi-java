// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateExtensionConstraintsArgs;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateIdentityConstraintsArgs;
import io.pulumi.googlenative.privateca_v1.inputs.X509ParametersArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateTemplateArgs Empty = new CertificateTemplateArgs();

    @Import(name="certificateTemplateId", required=true)
      private final Output<String> certificateTemplateId;

    public Output<String> getCertificateTemplateId() {
        return this.certificateTemplateId;
    }

    /**
     * Optional. A human-readable description of scenarios this template is intended for.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
     * 
     */
    @Import(name="identityConstraints")
      private final @Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints;

    public Output<CertificateIdentityConstraintsArgs> getIdentityConstraints() {
        return this.identityConstraints == null ? Output.empty() : this.identityConstraints;
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
     * 
     */
    @Import(name="passthroughExtensions")
      private final @Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions;

    public Output<CertificateExtensionConstraintsArgs> getPassthroughExtensions() {
        return this.passthroughExtensions == null ? Output.empty() : this.passthroughExtensions;
    }

    /**
     * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @Import(name="predefinedValues")
      private final @Nullable Output<X509ParametersArgs> predefinedValues;

    public Output<X509ParametersArgs> getPredefinedValues() {
        return this.predefinedValues == null ? Output.empty() : this.predefinedValues;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    public CertificateTemplateArgs(
        Output<String> certificateTemplateId,
        @Nullable Output<String> description,
        @Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions,
        @Nullable Output<X509ParametersArgs> predefinedValues,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId) {
        this.certificateTemplateId = Objects.requireNonNull(certificateTemplateId, "expected parameter 'certificateTemplateId' to be non-null");
        this.description = description;
        this.identityConstraints = identityConstraints;
        this.labels = labels;
        this.location = location;
        this.passthroughExtensions = passthroughExtensions;
        this.predefinedValues = predefinedValues;
        this.project = project;
        this.requestId = requestId;
    }

    private CertificateTemplateArgs() {
        this.certificateTemplateId = Output.empty();
        this.description = Output.empty();
        this.identityConstraints = Output.empty();
        this.labels = Output.empty();
        this.location = Output.empty();
        this.passthroughExtensions = Output.empty();
        this.predefinedValues = Output.empty();
        this.project = Output.empty();
        this.requestId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> certificateTemplateId;
        private @Nullable Output<String> description;
        private @Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions;
        private @Nullable Output<X509ParametersArgs> predefinedValues;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateTemplateId = defaults.certificateTemplateId;
    	      this.description = defaults.description;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.passthroughExtensions = defaults.passthroughExtensions;
    	      this.predefinedValues = defaults.predefinedValues;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
        }

        public Builder certificateTemplateId(Output<String> certificateTemplateId) {
            this.certificateTemplateId = Objects.requireNonNull(certificateTemplateId);
            return this;
        }
        public Builder certificateTemplateId(String certificateTemplateId) {
            this.certificateTemplateId = Output.of(Objects.requireNonNull(certificateTemplateId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder identityConstraints(@Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints) {
            this.identityConstraints = identityConstraints;
            return this;
        }
        public Builder identityConstraints(@Nullable CertificateIdentityConstraintsArgs identityConstraints) {
            this.identityConstraints = Output.ofNullable(identityConstraints);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder passthroughExtensions(@Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions) {
            this.passthroughExtensions = passthroughExtensions;
            return this;
        }
        public Builder passthroughExtensions(@Nullable CertificateExtensionConstraintsArgs passthroughExtensions) {
            this.passthroughExtensions = Output.ofNullable(passthroughExtensions);
            return this;
        }
        public Builder predefinedValues(@Nullable Output<X509ParametersArgs> predefinedValues) {
            this.predefinedValues = predefinedValues;
            return this;
        }
        public Builder predefinedValues(@Nullable X509ParametersArgs predefinedValues) {
            this.predefinedValues = Output.ofNullable(predefinedValues);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }        public CertificateTemplateArgs build() {
            return new CertificateTemplateArgs(certificateTemplateId, description, identityConstraints, labels, location, passthroughExtensions, predefinedValues, project, requestId);
        }
    }
}
