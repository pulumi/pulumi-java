// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.container_v1beta1.inputs.MaxPodsConstraintArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeManagementArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeNetworkConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.NodePoolAutoscalingArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.PlacementPolicyArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.StatusConditionArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.UpgradeSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload. These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
 * 
 */
public final class NodePoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final NodePoolArgs Empty = new NodePoolArgs();

    /**
     * Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
     * 
     */
    @Import(name="autoscaling")
      private final @Nullable Output<NodePoolAutoscalingArgs> autoscaling;

    public Output<NodePoolAutoscalingArgs> getAutoscaling() {
        return this.autoscaling == null ? Output.empty() : this.autoscaling;
    }

    /**
     * Which conditions caused the current node pool state.
     * 
     */
    @Import(name="conditions")
      private final @Nullable Output<List<StatusConditionArgs>> conditions;

    public Output<List<StatusConditionArgs>> getConditions() {
        return this.conditions == null ? Output.empty() : this.conditions;
    }

    /**
     * The node configuration of the pool.
     * 
     */
    @Import(name="config")
      private final @Nullable Output<NodeConfigArgs> config;

    public Output<NodeConfigArgs> getConfig() {
        return this.config == null ? Output.empty() : this.config;
    }

    /**
     * The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
     * 
     */
    @Import(name="initialNodeCount")
      private final @Nullable Output<Integer> initialNodeCount;

    public Output<Integer> getInitialNodeCount() {
        return this.initialNodeCount == null ? Output.empty() : this.initialNodeCount;
    }

    /**
     * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
     * 
     */
    @Import(name="locations")
      private final @Nullable Output<List<String>> locations;

    public Output<List<String>> getLocations() {
        return this.locations == null ? Output.empty() : this.locations;
    }

    /**
     * NodeManagement configuration for this NodePool.
     * 
     */
    @Import(name="management")
      private final @Nullable Output<NodeManagementArgs> management;

    public Output<NodeManagementArgs> getManagement() {
        return this.management == null ? Output.empty() : this.management;
    }

    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint")
      private final @Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint;

    public Output<MaxPodsConstraintArgs> getMaxPodsConstraint() {
        return this.maxPodsConstraint == null ? Output.empty() : this.maxPodsConstraint;
    }

    /**
     * The name of the node pool.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     * 
     */
    @Import(name="networkConfig")
      private final @Nullable Output<NodeNetworkConfigArgs> networkConfig;

    public Output<NodeNetworkConfigArgs> getNetworkConfig() {
        return this.networkConfig == null ? Output.empty() : this.networkConfig;
    }

    /**
     * Specifies the node placement policy.
     * 
     */
    @Import(name="placementPolicy")
      private final @Nullable Output<PlacementPolicyArgs> placementPolicy;

    public Output<PlacementPolicyArgs> getPlacementPolicy() {
        return this.placementPolicy == null ? Output.empty() : this.placementPolicy;
    }

    /**
     * Upgrade settings control disruption and speed of the upgrade.
     * 
     */
    @Import(name="upgradeSettings")
      private final @Nullable Output<UpgradeSettingsArgs> upgradeSettings;

    public Output<UpgradeSettingsArgs> getUpgradeSettings() {
        return this.upgradeSettings == null ? Output.empty() : this.upgradeSettings;
    }

    /**
     * The version of the Kubernetes of this node.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    public NodePoolArgs(
        @Nullable Output<NodePoolAutoscalingArgs> autoscaling,
        @Nullable Output<List<StatusConditionArgs>> conditions,
        @Nullable Output<NodeConfigArgs> config,
        @Nullable Output<Integer> initialNodeCount,
        @Nullable Output<List<String>> locations,
        @Nullable Output<NodeManagementArgs> management,
        @Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint,
        @Nullable Output<String> name,
        @Nullable Output<NodeNetworkConfigArgs> networkConfig,
        @Nullable Output<PlacementPolicyArgs> placementPolicy,
        @Nullable Output<UpgradeSettingsArgs> upgradeSettings,
        @Nullable Output<String> version) {
        this.autoscaling = autoscaling;
        this.conditions = conditions;
        this.config = config;
        this.initialNodeCount = initialNodeCount;
        this.locations = locations;
        this.management = management;
        this.maxPodsConstraint = maxPodsConstraint;
        this.name = name;
        this.networkConfig = networkConfig;
        this.placementPolicy = placementPolicy;
        this.upgradeSettings = upgradeSettings;
        this.version = version;
    }

    private NodePoolArgs() {
        this.autoscaling = Output.empty();
        this.conditions = Output.empty();
        this.config = Output.empty();
        this.initialNodeCount = Output.empty();
        this.locations = Output.empty();
        this.management = Output.empty();
        this.maxPodsConstraint = Output.empty();
        this.name = Output.empty();
        this.networkConfig = Output.empty();
        this.placementPolicy = Output.empty();
        this.upgradeSettings = Output.empty();
        this.version = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<NodePoolAutoscalingArgs> autoscaling;
        private @Nullable Output<List<StatusConditionArgs>> conditions;
        private @Nullable Output<NodeConfigArgs> config;
        private @Nullable Output<Integer> initialNodeCount;
        private @Nullable Output<List<String>> locations;
        private @Nullable Output<NodeManagementArgs> management;
        private @Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint;
        private @Nullable Output<String> name;
        private @Nullable Output<NodeNetworkConfigArgs> networkConfig;
        private @Nullable Output<PlacementPolicyArgs> placementPolicy;
        private @Nullable Output<UpgradeSettingsArgs> upgradeSettings;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(NodePoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscaling = defaults.autoscaling;
    	      this.conditions = defaults.conditions;
    	      this.config = defaults.config;
    	      this.initialNodeCount = defaults.initialNodeCount;
    	      this.locations = defaults.locations;
    	      this.management = defaults.management;
    	      this.maxPodsConstraint = defaults.maxPodsConstraint;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.placementPolicy = defaults.placementPolicy;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.version = defaults.version;
        }

        public Builder autoscaling(@Nullable Output<NodePoolAutoscalingArgs> autoscaling) {
            this.autoscaling = autoscaling;
            return this;
        }
        public Builder autoscaling(@Nullable NodePoolAutoscalingArgs autoscaling) {
            this.autoscaling = Output.ofNullable(autoscaling);
            return this;
        }
        public Builder conditions(@Nullable Output<List<StatusConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(@Nullable List<StatusConditionArgs> conditions) {
            this.conditions = Output.ofNullable(conditions);
            return this;
        }
        public Builder conditions(StatusConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder config(@Nullable Output<NodeConfigArgs> config) {
            this.config = config;
            return this;
        }
        public Builder config(@Nullable NodeConfigArgs config) {
            this.config = Output.ofNullable(config);
            return this;
        }
        public Builder initialNodeCount(@Nullable Output<Integer> initialNodeCount) {
            this.initialNodeCount = initialNodeCount;
            return this;
        }
        public Builder initialNodeCount(@Nullable Integer initialNodeCount) {
            this.initialNodeCount = Output.ofNullable(initialNodeCount);
            return this;
        }
        public Builder locations(@Nullable Output<List<String>> locations) {
            this.locations = locations;
            return this;
        }
        public Builder locations(@Nullable List<String> locations) {
            this.locations = Output.ofNullable(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder management(@Nullable Output<NodeManagementArgs> management) {
            this.management = management;
            return this;
        }
        public Builder management(@Nullable NodeManagementArgs management) {
            this.management = Output.ofNullable(management);
            return this;
        }
        public Builder maxPodsConstraint(@Nullable Output<MaxPodsConstraintArgs> maxPodsConstraint) {
            this.maxPodsConstraint = maxPodsConstraint;
            return this;
        }
        public Builder maxPodsConstraint(@Nullable MaxPodsConstraintArgs maxPodsConstraint) {
            this.maxPodsConstraint = Output.ofNullable(maxPodsConstraint);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder networkConfig(@Nullable Output<NodeNetworkConfigArgs> networkConfig) {
            this.networkConfig = networkConfig;
            return this;
        }
        public Builder networkConfig(@Nullable NodeNetworkConfigArgs networkConfig) {
            this.networkConfig = Output.ofNullable(networkConfig);
            return this;
        }
        public Builder placementPolicy(@Nullable Output<PlacementPolicyArgs> placementPolicy) {
            this.placementPolicy = placementPolicy;
            return this;
        }
        public Builder placementPolicy(@Nullable PlacementPolicyArgs placementPolicy) {
            this.placementPolicy = Output.ofNullable(placementPolicy);
            return this;
        }
        public Builder upgradeSettings(@Nullable Output<UpgradeSettingsArgs> upgradeSettings) {
            this.upgradeSettings = upgradeSettings;
            return this;
        }
        public Builder upgradeSettings(@Nullable UpgradeSettingsArgs upgradeSettings) {
            this.upgradeSettings = Output.ofNullable(upgradeSettings);
            return this;
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }        public NodePoolArgs build() {
            return new NodePoolArgs(autoscaling, conditions, config, initialNodeCount, locations, management, maxPodsConstraint, name, networkConfig, placementPolicy, upgradeSettings, version);
        }
    }
}
