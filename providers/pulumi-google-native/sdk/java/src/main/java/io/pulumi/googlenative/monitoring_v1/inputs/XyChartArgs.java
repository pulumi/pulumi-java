// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.monitoring_v1.inputs.AxisArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.ChartOptionsArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.DataSetArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.ThresholdArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 * 
 */
public final class XyChartArgs extends io.pulumi.resources.ResourceArgs {

    public static final XyChartArgs Empty = new XyChartArgs();

    /**
     * Display options for the chart.
     * 
     */
    @Import(name="chartOptions")
      private final @Nullable Output<ChartOptionsArgs> chartOptions;

    public Output<ChartOptionsArgs> getChartOptions() {
        return this.chartOptions == null ? Output.empty() : this.chartOptions;
    }

    /**
     * The data displayed in this chart.
     * 
     */
    @Import(name="dataSets", required=true)
      private final Output<List<DataSetArgs>> dataSets;

    public Output<List<DataSetArgs>> getDataSets() {
        return this.dataSets;
    }

    /**
     * Threshold lines drawn horizontally across the chart.
     * 
     */
    @Import(name="thresholds")
      private final @Nullable Output<List<ThresholdArgs>> thresholds;

    public Output<List<ThresholdArgs>> getThresholds() {
        return this.thresholds == null ? Output.empty() : this.thresholds;
    }

    /**
     * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     * 
     */
    @Import(name="timeshiftDuration")
      private final @Nullable Output<String> timeshiftDuration;

    public Output<String> getTimeshiftDuration() {
        return this.timeshiftDuration == null ? Output.empty() : this.timeshiftDuration;
    }

    /**
     * The properties applied to the X axis.
     * 
     */
    @Import(name="xAxis")
      private final @Nullable Output<AxisArgs> xAxis;

    public Output<AxisArgs> getXAxis() {
        return this.xAxis == null ? Output.empty() : this.xAxis;
    }

    /**
     * The properties applied to the Y2 axis.
     * 
     */
    @Import(name="y2Axis")
      private final @Nullable Output<AxisArgs> y2Axis;

    public Output<AxisArgs> getY2Axis() {
        return this.y2Axis == null ? Output.empty() : this.y2Axis;
    }

    /**
     * The properties applied to the Y axis.
     * 
     */
    @Import(name="yAxis")
      private final @Nullable Output<AxisArgs> yAxis;

    public Output<AxisArgs> getYAxis() {
        return this.yAxis == null ? Output.empty() : this.yAxis;
    }

    public XyChartArgs(
        @Nullable Output<ChartOptionsArgs> chartOptions,
        Output<List<DataSetArgs>> dataSets,
        @Nullable Output<List<ThresholdArgs>> thresholds,
        @Nullable Output<String> timeshiftDuration,
        @Nullable Output<AxisArgs> xAxis,
        @Nullable Output<AxisArgs> y2Axis,
        @Nullable Output<AxisArgs> yAxis) {
        this.chartOptions = chartOptions;
        this.dataSets = Objects.requireNonNull(dataSets, "expected parameter 'dataSets' to be non-null");
        this.thresholds = thresholds;
        this.timeshiftDuration = timeshiftDuration;
        this.xAxis = xAxis;
        this.y2Axis = y2Axis;
        this.yAxis = yAxis;
    }

    private XyChartArgs() {
        this.chartOptions = Output.empty();
        this.dataSets = Output.empty();
        this.thresholds = Output.empty();
        this.timeshiftDuration = Output.empty();
        this.xAxis = Output.empty();
        this.y2Axis = Output.empty();
        this.yAxis = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(XyChartArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ChartOptionsArgs> chartOptions;
        private Output<List<DataSetArgs>> dataSets;
        private @Nullable Output<List<ThresholdArgs>> thresholds;
        private @Nullable Output<String> timeshiftDuration;
        private @Nullable Output<AxisArgs> xAxis;
        private @Nullable Output<AxisArgs> y2Axis;
        private @Nullable Output<AxisArgs> yAxis;

        public Builder() {
    	      // Empty
        }

        public Builder(XyChartArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chartOptions = defaults.chartOptions;
    	      this.dataSets = defaults.dataSets;
    	      this.thresholds = defaults.thresholds;
    	      this.timeshiftDuration = defaults.timeshiftDuration;
    	      this.xAxis = defaults.xAxis;
    	      this.y2Axis = defaults.y2Axis;
    	      this.yAxis = defaults.yAxis;
        }

        public Builder chartOptions(@Nullable Output<ChartOptionsArgs> chartOptions) {
            this.chartOptions = chartOptions;
            return this;
        }

        public Builder chartOptions(@Nullable ChartOptionsArgs chartOptions) {
            this.chartOptions = Output.ofNullable(chartOptions);
            return this;
        }

        public Builder dataSets(Output<List<DataSetArgs>> dataSets) {
            this.dataSets = Objects.requireNonNull(dataSets);
            return this;
        }

        public Builder dataSets(List<DataSetArgs> dataSets) {
            this.dataSets = Output.of(Objects.requireNonNull(dataSets));
            return this;
        }

        public Builder thresholds(@Nullable Output<List<ThresholdArgs>> thresholds) {
            this.thresholds = thresholds;
            return this;
        }

        public Builder thresholds(@Nullable List<ThresholdArgs> thresholds) {
            this.thresholds = Output.ofNullable(thresholds);
            return this;
        }

        public Builder timeshiftDuration(@Nullable Output<String> timeshiftDuration) {
            this.timeshiftDuration = timeshiftDuration;
            return this;
        }

        public Builder timeshiftDuration(@Nullable String timeshiftDuration) {
            this.timeshiftDuration = Output.ofNullable(timeshiftDuration);
            return this;
        }

        public Builder xAxis(@Nullable Output<AxisArgs> xAxis) {
            this.xAxis = xAxis;
            return this;
        }

        public Builder xAxis(@Nullable AxisArgs xAxis) {
            this.xAxis = Output.ofNullable(xAxis);
            return this;
        }

        public Builder y2Axis(@Nullable Output<AxisArgs> y2Axis) {
            this.y2Axis = y2Axis;
            return this;
        }

        public Builder y2Axis(@Nullable AxisArgs y2Axis) {
            this.y2Axis = Output.ofNullable(y2Axis);
            return this;
        }

        public Builder yAxis(@Nullable Output<AxisArgs> yAxis) {
            this.yAxis = yAxis;
            return this;
        }

        public Builder yAxis(@Nullable AxisArgs yAxis) {
            this.yAxis = Output.ofNullable(yAxis);
            return this;
        }
        public XyChartArgs build() {
            return new XyChartArgs(chartOptions, dataSets, thresholds, timeshiftDuration, xAxis, y2Axis, yAxis);
        }
    }
}
