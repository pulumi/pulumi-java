// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1beta.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.accesscontextmanager_v1beta.inputs.ConditionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * `BasicLevel` is an `AccessLevel` using a set of recommended features.
 * 
 */
public final class BasicLevelResponse extends io.pulumi.resources.InvokeArgs {

    public static final BasicLevelResponse Empty = new BasicLevelResponse();

    /**
     * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
     * 
     */
    @Import(name="combiningFunction", required=true)
      private final String combiningFunction;

    public String combiningFunction() {
        return this.combiningFunction;
    }

    /**
     * A list of requirements for the `AccessLevel` to be granted.
     * 
     */
    @Import(name="conditions", required=true)
      private final List<ConditionResponse> conditions;

    public List<ConditionResponse> conditions() {
        return this.conditions;
    }

    public BasicLevelResponse(
        String combiningFunction,
        List<ConditionResponse> conditions) {
        this.combiningFunction = Objects.requireNonNull(combiningFunction, "expected parameter 'combiningFunction' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
    }

    private BasicLevelResponse() {
        this.combiningFunction = null;
        this.conditions = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BasicLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String combiningFunction;
        private List<ConditionResponse> conditions;

        public Builder() {
    	      // Empty
        }

        public Builder(BasicLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.combiningFunction = defaults.combiningFunction;
    	      this.conditions = defaults.conditions;
        }

        public Builder combiningFunction(String combiningFunction) {
            this.combiningFunction = Objects.requireNonNull(combiningFunction);
            return this;
        }
        public Builder conditions(List<ConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }        public BasicLevelResponse build() {
            return new BasicLevelResponse(combiningFunction, conditions);
        }
    }
}
