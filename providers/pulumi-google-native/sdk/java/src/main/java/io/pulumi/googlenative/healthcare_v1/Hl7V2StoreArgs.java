// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.healthcare_v1.inputs.Hl7V2NotificationConfigArgs;
import io.pulumi.googlenative.healthcare_v1.inputs.ParserConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class Hl7V2StoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final Hl7V2StoreArgs Empty = new Hl7V2StoreArgs();

    @Import(name="datasetId", required=true)
      private final Output<String> datasetId;

    public Output<String> getDatasetId() {
        return this.datasetId;
    }

    @Import(name="hl7V2StoreId")
      private final @Nullable Output<String> hl7V2StoreId;

    public Output<String> getHl7V2StoreId() {
        return this.hl7V2StoreId == null ? Output.empty() : this.hl7V2StoreId;
    }

    /**
     * User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
     * 
     */
    @Import(name="notificationConfigs")
      private final @Nullable Output<List<Hl7V2NotificationConfigArgs>> notificationConfigs;

    public Output<List<Hl7V2NotificationConfigArgs>> getNotificationConfigs() {
        return this.notificationConfigs == null ? Output.empty() : this.notificationConfigs;
    }

    /**
     * The configuration for the parser. It determines how the server parses the messages.
     * 
     */
    @Import(name="parserConfig")
      private final @Nullable Output<ParserConfigArgs> parserConfig;

    public Output<ParserConfigArgs> getParserConfig() {
        return this.parserConfig == null ? Output.empty() : this.parserConfig;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
     * 
     */
    @Import(name="rejectDuplicateMessage")
      private final @Nullable Output<Boolean> rejectDuplicateMessage;

    public Output<Boolean> getRejectDuplicateMessage() {
        return this.rejectDuplicateMessage == null ? Output.empty() : this.rejectDuplicateMessage;
    }

    public Hl7V2StoreArgs(
        Output<String> datasetId,
        @Nullable Output<String> hl7V2StoreId,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<List<Hl7V2NotificationConfigArgs>> notificationConfigs,
        @Nullable Output<ParserConfigArgs> parserConfig,
        @Nullable Output<String> project,
        @Nullable Output<Boolean> rejectDuplicateMessage) {
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.hl7V2StoreId = hl7V2StoreId;
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.notificationConfigs = notificationConfigs;
        this.parserConfig = parserConfig;
        this.project = project;
        this.rejectDuplicateMessage = rejectDuplicateMessage;
    }

    private Hl7V2StoreArgs() {
        this.datasetId = Output.empty();
        this.hl7V2StoreId = Output.empty();
        this.labels = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.notificationConfigs = Output.empty();
        this.parserConfig = Output.empty();
        this.project = Output.empty();
        this.rejectDuplicateMessage = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Hl7V2StoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> datasetId;
        private @Nullable Output<String> hl7V2StoreId;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<List<Hl7V2NotificationConfigArgs>> notificationConfigs;
        private @Nullable Output<ParserConfigArgs> parserConfig;
        private @Nullable Output<String> project;
        private @Nullable Output<Boolean> rejectDuplicateMessage;

        public Builder() {
    	      // Empty
        }

        public Builder(Hl7V2StoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetId = defaults.datasetId;
    	      this.hl7V2StoreId = defaults.hl7V2StoreId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notificationConfigs = defaults.notificationConfigs;
    	      this.parserConfig = defaults.parserConfig;
    	      this.project = defaults.project;
    	      this.rejectDuplicateMessage = defaults.rejectDuplicateMessage;
        }

        public Builder datasetId(Output<String> datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }
        public Builder datasetId(String datasetId) {
            this.datasetId = Output.of(Objects.requireNonNull(datasetId));
            return this;
        }
        public Builder hl7V2StoreId(@Nullable Output<String> hl7V2StoreId) {
            this.hl7V2StoreId = hl7V2StoreId;
            return this;
        }
        public Builder hl7V2StoreId(@Nullable String hl7V2StoreId) {
            this.hl7V2StoreId = Output.ofNullable(hl7V2StoreId);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder notificationConfigs(@Nullable Output<List<Hl7V2NotificationConfigArgs>> notificationConfigs) {
            this.notificationConfigs = notificationConfigs;
            return this;
        }
        public Builder notificationConfigs(@Nullable List<Hl7V2NotificationConfigArgs> notificationConfigs) {
            this.notificationConfigs = Output.ofNullable(notificationConfigs);
            return this;
        }
        public Builder notificationConfigs(Hl7V2NotificationConfigArgs... notificationConfigs) {
            return notificationConfigs(List.of(notificationConfigs));
        }
        public Builder parserConfig(@Nullable Output<ParserConfigArgs> parserConfig) {
            this.parserConfig = parserConfig;
            return this;
        }
        public Builder parserConfig(@Nullable ParserConfigArgs parserConfig) {
            this.parserConfig = Output.ofNullable(parserConfig);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder rejectDuplicateMessage(@Nullable Output<Boolean> rejectDuplicateMessage) {
            this.rejectDuplicateMessage = rejectDuplicateMessage;
            return this;
        }
        public Builder rejectDuplicateMessage(@Nullable Boolean rejectDuplicateMessage) {
            this.rejectDuplicateMessage = Output.ofNullable(rejectDuplicateMessage);
            return this;
        }        public Hl7V2StoreArgs build() {
            return new Hl7V2StoreArgs(datasetId, hl7V2StoreId, labels, location, name, notificationConfigs, parserConfig, project, rejectDuplicateMessage);
        }
    }
}
