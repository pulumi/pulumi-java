// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.healthcare_v1.inputs.Hl7V2NotificationConfigArgs;
import io.pulumi.googlenative.healthcare_v1.inputs.ParserConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class Hl7V2StoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final Hl7V2StoreArgs Empty = new Hl7V2StoreArgs();

    @InputImport(name="datasetId", required=true)
    private final Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId;
    }

    @InputImport(name="hl7V2StoreId")
    private final @Nullable Input<String> hl7V2StoreId;

    public Input<String> getHl7V2StoreId() {
        return this.hl7V2StoreId == null ? Input.empty() : this.hl7V2StoreId;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="notificationConfigs")
    private final @Nullable Input<List<Hl7V2NotificationConfigArgs>> notificationConfigs;

    public Input<List<Hl7V2NotificationConfigArgs>> getNotificationConfigs() {
        return this.notificationConfigs == null ? Input.empty() : this.notificationConfigs;
    }

    @InputImport(name="parserConfig")
    private final @Nullable Input<ParserConfigArgs> parserConfig;

    public Input<ParserConfigArgs> getParserConfig() {
        return this.parserConfig == null ? Input.empty() : this.parserConfig;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="rejectDuplicateMessage")
    private final @Nullable Input<Boolean> rejectDuplicateMessage;

    public Input<Boolean> getRejectDuplicateMessage() {
        return this.rejectDuplicateMessage == null ? Input.empty() : this.rejectDuplicateMessage;
    }

    public Hl7V2StoreArgs(
        Input<String> datasetId,
        @Nullable Input<String> hl7V2StoreId,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<List<Hl7V2NotificationConfigArgs>> notificationConfigs,
        @Nullable Input<ParserConfigArgs> parserConfig,
        @Nullable Input<String> project,
        @Nullable Input<Boolean> rejectDuplicateMessage) {
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.hl7V2StoreId = hl7V2StoreId;
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.notificationConfigs = notificationConfigs;
        this.parserConfig = parserConfig;
        this.project = project;
        this.rejectDuplicateMessage = rejectDuplicateMessage;
    }

    private Hl7V2StoreArgs() {
        this.datasetId = Input.empty();
        this.hl7V2StoreId = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.notificationConfigs = Input.empty();
        this.parserConfig = Input.empty();
        this.project = Input.empty();
        this.rejectDuplicateMessage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Hl7V2StoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> datasetId;
        private @Nullable Input<String> hl7V2StoreId;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<List<Hl7V2NotificationConfigArgs>> notificationConfigs;
        private @Nullable Input<ParserConfigArgs> parserConfig;
        private @Nullable Input<String> project;
        private @Nullable Input<Boolean> rejectDuplicateMessage;

        public Builder() {
    	      // Empty
        }

        public Builder(Hl7V2StoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetId = defaults.datasetId;
    	      this.hl7V2StoreId = defaults.hl7V2StoreId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notificationConfigs = defaults.notificationConfigs;
    	      this.parserConfig = defaults.parserConfig;
    	      this.project = defaults.project;
    	      this.rejectDuplicateMessage = defaults.rejectDuplicateMessage;
        }

        public Builder setDatasetId(Input<String> datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder setDatasetId(String datasetId) {
            this.datasetId = Input.of(Objects.requireNonNull(datasetId));
            return this;
        }

        public Builder setHl7V2StoreId(@Nullable Input<String> hl7V2StoreId) {
            this.hl7V2StoreId = hl7V2StoreId;
            return this;
        }

        public Builder setHl7V2StoreId(@Nullable String hl7V2StoreId) {
            this.hl7V2StoreId = Input.ofNullable(hl7V2StoreId);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNotificationConfigs(@Nullable Input<List<Hl7V2NotificationConfigArgs>> notificationConfigs) {
            this.notificationConfigs = notificationConfigs;
            return this;
        }

        public Builder setNotificationConfigs(@Nullable List<Hl7V2NotificationConfigArgs> notificationConfigs) {
            this.notificationConfigs = Input.ofNullable(notificationConfigs);
            return this;
        }

        public Builder setParserConfig(@Nullable Input<ParserConfigArgs> parserConfig) {
            this.parserConfig = parserConfig;
            return this;
        }

        public Builder setParserConfig(@Nullable ParserConfigArgs parserConfig) {
            this.parserConfig = Input.ofNullable(parserConfig);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRejectDuplicateMessage(@Nullable Input<Boolean> rejectDuplicateMessage) {
            this.rejectDuplicateMessage = rejectDuplicateMessage;
            return this;
        }

        public Builder setRejectDuplicateMessage(@Nullable Boolean rejectDuplicateMessage) {
            this.rejectDuplicateMessage = Input.ofNullable(rejectDuplicateMessage);
            return this;
        }

        public Hl7V2StoreArgs build() {
            return new Hl7V2StoreArgs(datasetId, hl7V2StoreId, labels, location, name, notificationConfigs, parserConfig, project, rejectDuplicateMessage);
        }
    }
}
