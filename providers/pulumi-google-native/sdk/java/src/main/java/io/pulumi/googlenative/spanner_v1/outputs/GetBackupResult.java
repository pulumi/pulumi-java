// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.spanner_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.spanner_v1.outputs.EncryptionInfoResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetBackupResult {
    /**
     * The time the CreateBackup request is received. If the request does not specify `version_time`, the `version_time` of the backup will be equivalent to the `create_time`.
     * 
     */
    private final String createTime;
    /**
     * Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
     * 
     */
    private final String database;
    /**
     * The database dialect information for the backup.
     * 
     */
    private final String databaseDialect;
    /**
     * The encryption information for the backup.
     * 
     */
    private final EncryptionInfoResponse encryptionInfo;
    /**
     * Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
     * 
     */
    private final String expireTime;
    /**
     * Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
     * 
     */
    private final String name;
    /**
     * The names of the restored databases that reference the backup. The database names are of the form `projects//instances//databases/`. Referencing databases may exist in different instances. The existence of any referencing database prevents the backup from being deleted. When a restored database from the backup enters the `READY` state, the reference to the backup is removed.
     * 
     */
    private final List<String> referencingDatabases;
    /**
     * Size of the backup in bytes.
     * 
     */
    private final String sizeBytes;
    /**
     * The current state of the backup.
     * 
     */
    private final String state;
    /**
     * The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
     * 
     */
    private final String versionTime;

    @OutputCustomType.Constructor({"createTime","database","databaseDialect","encryptionInfo","expireTime","name","referencingDatabases","sizeBytes","state","versionTime"})
    private GetBackupResult(
        String createTime,
        String database,
        String databaseDialect,
        EncryptionInfoResponse encryptionInfo,
        String expireTime,
        String name,
        List<String> referencingDatabases,
        String sizeBytes,
        String state,
        String versionTime) {
        this.createTime = Objects.requireNonNull(createTime);
        this.database = Objects.requireNonNull(database);
        this.databaseDialect = Objects.requireNonNull(databaseDialect);
        this.encryptionInfo = Objects.requireNonNull(encryptionInfo);
        this.expireTime = Objects.requireNonNull(expireTime);
        this.name = Objects.requireNonNull(name);
        this.referencingDatabases = Objects.requireNonNull(referencingDatabases);
        this.sizeBytes = Objects.requireNonNull(sizeBytes);
        this.state = Objects.requireNonNull(state);
        this.versionTime = Objects.requireNonNull(versionTime);
    }

    /**
     * The time the CreateBackup request is received. If the request does not specify `version_time`, the `version_time` of the backup will be equivalent to the `create_time`.
     * 
     */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
     * 
     */
    public String getDatabase() {
        return this.database;
    }
    /**
     * The database dialect information for the backup.
     * 
     */
    public String getDatabaseDialect() {
        return this.databaseDialect;
    }
    /**
     * The encryption information for the backup.
     * 
     */
    public EncryptionInfoResponse getEncryptionInfo() {
        return this.encryptionInfo;
    }
    /**
     * Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
     * 
     */
    public String getExpireTime() {
        return this.expireTime;
    }
    /**
     * Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The names of the restored databases that reference the backup. The database names are of the form `projects//instances//databases/`. Referencing databases may exist in different instances. The existence of any referencing database prevents the backup from being deleted. When a restored database from the backup enters the `READY` state, the reference to the backup is removed.
     * 
     */
    public List<String> getReferencingDatabases() {
        return this.referencingDatabases;
    }
    /**
     * Size of the backup in bytes.
     * 
     */
    public String getSizeBytes() {
        return this.sizeBytes;
    }
    /**
     * The current state of the backup.
     * 
     */
    public String getState() {
        return this.state;
    }
    /**
     * The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
     * 
     */
    public String getVersionTime() {
        return this.versionTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String database;
        private String databaseDialect;
        private EncryptionInfoResponse encryptionInfo;
        private String expireTime;
        private String name;
        private List<String> referencingDatabases;
        private String sizeBytes;
        private String state;
        private String versionTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.database = defaults.database;
    	      this.databaseDialect = defaults.databaseDialect;
    	      this.encryptionInfo = defaults.encryptionInfo;
    	      this.expireTime = defaults.expireTime;
    	      this.name = defaults.name;
    	      this.referencingDatabases = defaults.referencingDatabases;
    	      this.sizeBytes = defaults.sizeBytes;
    	      this.state = defaults.state;
    	      this.versionTime = defaults.versionTime;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDatabase(String database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }

        public Builder setDatabaseDialect(String databaseDialect) {
            this.databaseDialect = Objects.requireNonNull(databaseDialect);
            return this;
        }

        public Builder setEncryptionInfo(EncryptionInfoResponse encryptionInfo) {
            this.encryptionInfo = Objects.requireNonNull(encryptionInfo);
            return this;
        }

        public Builder setExpireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setReferencingDatabases(List<String> referencingDatabases) {
            this.referencingDatabases = Objects.requireNonNull(referencingDatabases);
            return this;
        }

        public Builder setSizeBytes(String sizeBytes) {
            this.sizeBytes = Objects.requireNonNull(sizeBytes);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setVersionTime(String versionTime) {
            this.versionTime = Objects.requireNonNull(versionTime);
            return this;
        }
        public GetBackupResult build() {
            return new GetBackupResult(createTime, database, databaseDialect, encryptionInfo, expireTime, name, referencingDatabases, sizeBytes, state, versionTime);
        }
    }
}
