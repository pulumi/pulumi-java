// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1alpha;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.appengine_v1alpha.inputs.SslSettingsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainMappingArgs Empty = new DomainMappingArgs();

    @InputImport(name="appId", required=true)
    private final Input<String> appId;

    public Input<String> getAppId() {
        return this.appId;
    }

    /**
     * Relative name of the domain serving the application. Example: example.com.
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="noManagedCertificate")
    private final @Nullable Input<String> noManagedCertificate;

    public Input<String> getNoManagedCertificate() {
        return this.noManagedCertificate == null ? Input.empty() : this.noManagedCertificate;
    }

    @InputImport(name="overrideStrategy")
    private final @Nullable Input<String> overrideStrategy;

    public Input<String> getOverrideStrategy() {
        return this.overrideStrategy == null ? Input.empty() : this.overrideStrategy;
    }

    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * 
     */
    @InputImport(name="sslSettings")
    private final @Nullable Input<SslSettingsArgs> sslSettings;

    public Input<SslSettingsArgs> getSslSettings() {
        return this.sslSettings == null ? Input.empty() : this.sslSettings;
    }

    public DomainMappingArgs(
        Input<String> appId,
        @Nullable Input<String> id,
        @Nullable Input<String> noManagedCertificate,
        @Nullable Input<String> overrideStrategy,
        @Nullable Input<SslSettingsArgs> sslSettings) {
        this.appId = Objects.requireNonNull(appId, "expected parameter 'appId' to be non-null");
        this.id = id;
        this.noManagedCertificate = noManagedCertificate;
        this.overrideStrategy = overrideStrategy;
        this.sslSettings = sslSettings;
    }

    private DomainMappingArgs() {
        this.appId = Input.empty();
        this.id = Input.empty();
        this.noManagedCertificate = Input.empty();
        this.overrideStrategy = Input.empty();
        this.sslSettings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> appId;
        private @Nullable Input<String> id;
        private @Nullable Input<String> noManagedCertificate;
        private @Nullable Input<String> overrideStrategy;
        private @Nullable Input<SslSettingsArgs> sslSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.id = defaults.id;
    	      this.noManagedCertificate = defaults.noManagedCertificate;
    	      this.overrideStrategy = defaults.overrideStrategy;
    	      this.sslSettings = defaults.sslSettings;
        }

        public Builder setAppId(Input<String> appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }

        public Builder setAppId(String appId) {
            this.appId = Input.of(Objects.requireNonNull(appId));
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setNoManagedCertificate(@Nullable Input<String> noManagedCertificate) {
            this.noManagedCertificate = noManagedCertificate;
            return this;
        }

        public Builder setNoManagedCertificate(@Nullable String noManagedCertificate) {
            this.noManagedCertificate = Input.ofNullable(noManagedCertificate);
            return this;
        }

        public Builder setOverrideStrategy(@Nullable Input<String> overrideStrategy) {
            this.overrideStrategy = overrideStrategy;
            return this;
        }

        public Builder setOverrideStrategy(@Nullable String overrideStrategy) {
            this.overrideStrategy = Input.ofNullable(overrideStrategy);
            return this;
        }

        public Builder setSslSettings(@Nullable Input<SslSettingsArgs> sslSettings) {
            this.sslSettings = sslSettings;
            return this;
        }

        public Builder setSslSettings(@Nullable SslSettingsArgs sslSettings) {
            this.sslSettings = Input.ofNullable(sslSettings);
            return this;
        }

        public DomainMappingArgs build() {
            return new DomainMappingArgs(appId, id, noManagedCertificate, overrideStrategy, sslSettings);
        }
    }
}
