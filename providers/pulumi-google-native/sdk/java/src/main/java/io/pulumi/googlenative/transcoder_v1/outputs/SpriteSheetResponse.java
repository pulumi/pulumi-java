// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class SpriteSheetResponse {
    private final Integer columnCount;
    private final String endTimeOffset;
    private final String filePrefix;
    private final String format;
    private final String interval;
    private final Integer quality;
    private final Integer rowCount;
    private final Integer spriteHeightPixels;
    private final Integer spriteWidthPixels;
    private final String startTimeOffset;
    private final Integer totalCount;

    @OutputCustomType.Constructor({"columnCount","endTimeOffset","filePrefix","format","interval","quality","rowCount","spriteHeightPixels","spriteWidthPixels","startTimeOffset","totalCount"})
    private SpriteSheetResponse(
        Integer columnCount,
        String endTimeOffset,
        String filePrefix,
        String format,
        String interval,
        Integer quality,
        Integer rowCount,
        Integer spriteHeightPixels,
        Integer spriteWidthPixels,
        String startTimeOffset,
        Integer totalCount) {
        this.columnCount = Objects.requireNonNull(columnCount);
        this.endTimeOffset = Objects.requireNonNull(endTimeOffset);
        this.filePrefix = Objects.requireNonNull(filePrefix);
        this.format = Objects.requireNonNull(format);
        this.interval = Objects.requireNonNull(interval);
        this.quality = Objects.requireNonNull(quality);
        this.rowCount = Objects.requireNonNull(rowCount);
        this.spriteHeightPixels = Objects.requireNonNull(spriteHeightPixels);
        this.spriteWidthPixels = Objects.requireNonNull(spriteWidthPixels);
        this.startTimeOffset = Objects.requireNonNull(startTimeOffset);
        this.totalCount = Objects.requireNonNull(totalCount);
    }

    public Integer getColumnCount() {
        return this.columnCount;
    }
    public String getEndTimeOffset() {
        return this.endTimeOffset;
    }
    public String getFilePrefix() {
        return this.filePrefix;
    }
    public String getFormat() {
        return this.format;
    }
    public String getInterval() {
        return this.interval;
    }
    public Integer getQuality() {
        return this.quality;
    }
    public Integer getRowCount() {
        return this.rowCount;
    }
    public Integer getSpriteHeightPixels() {
        return this.spriteHeightPixels;
    }
    public Integer getSpriteWidthPixels() {
        return this.spriteWidthPixels;
    }
    public String getStartTimeOffset() {
        return this.startTimeOffset;
    }
    public Integer getTotalCount() {
        return this.totalCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpriteSheetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer columnCount;
        private String endTimeOffset;
        private String filePrefix;
        private String format;
        private String interval;
        private Integer quality;
        private Integer rowCount;
        private Integer spriteHeightPixels;
        private Integer spriteWidthPixels;
        private String startTimeOffset;
        private Integer totalCount;

        public Builder() {
    	      // Empty
        }

        public Builder(SpriteSheetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnCount = defaults.columnCount;
    	      this.endTimeOffset = defaults.endTimeOffset;
    	      this.filePrefix = defaults.filePrefix;
    	      this.format = defaults.format;
    	      this.interval = defaults.interval;
    	      this.quality = defaults.quality;
    	      this.rowCount = defaults.rowCount;
    	      this.spriteHeightPixels = defaults.spriteHeightPixels;
    	      this.spriteWidthPixels = defaults.spriteWidthPixels;
    	      this.startTimeOffset = defaults.startTimeOffset;
    	      this.totalCount = defaults.totalCount;
        }

        public Builder setColumnCount(Integer columnCount) {
            this.columnCount = Objects.requireNonNull(columnCount);
            return this;
        }

        public Builder setEndTimeOffset(String endTimeOffset) {
            this.endTimeOffset = Objects.requireNonNull(endTimeOffset);
            return this;
        }

        public Builder setFilePrefix(String filePrefix) {
            this.filePrefix = Objects.requireNonNull(filePrefix);
            return this;
        }

        public Builder setFormat(String format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }

        public Builder setInterval(String interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder setQuality(Integer quality) {
            this.quality = Objects.requireNonNull(quality);
            return this;
        }

        public Builder setRowCount(Integer rowCount) {
            this.rowCount = Objects.requireNonNull(rowCount);
            return this;
        }

        public Builder setSpriteHeightPixels(Integer spriteHeightPixels) {
            this.spriteHeightPixels = Objects.requireNonNull(spriteHeightPixels);
            return this;
        }

        public Builder setSpriteWidthPixels(Integer spriteWidthPixels) {
            this.spriteWidthPixels = Objects.requireNonNull(spriteWidthPixels);
            return this;
        }

        public Builder setStartTimeOffset(String startTimeOffset) {
            this.startTimeOffset = Objects.requireNonNull(startTimeOffset);
            return this;
        }

        public Builder setTotalCount(Integer totalCount) {
            this.totalCount = Objects.requireNonNull(totalCount);
            return this;
        }

        public SpriteSheetResponse build() {
            return new SpriteSheetResponse(columnCount, endTimeOffset, filePrefix, format, interval, quality, rowCount, spriteHeightPixels, spriteWidthPixels, startTimeOffset, totalCount);
        }
    }
}
