// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.healthcare_v1.inputs.AttributeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserDataMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserDataMappingArgs Empty = new UserDataMappingArgs();

    @InputImport(name="consentStoreId", required=true)
      private final Input<String> consentStoreId;

    public Input<String> getConsentStoreId() {
        return this.consentStoreId;
    }

    /**
     * A unique identifier for the mapped resource.
     * 
     */
    @InputImport(name="dataId", required=true)
      private final Input<String> dataId;

    public Input<String> getDataId() {
        return this.dataId;
    }

    @InputImport(name="datasetId", required=true)
      private final Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId;
    }

    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field "values" in each Attribute.
     * 
     */
    @InputImport(name="resourceAttributes")
      private final @Nullable Input<List<AttributeArgs>> resourceAttributes;

    public Input<List<AttributeArgs>> getResourceAttributes() {
        return this.resourceAttributes == null ? Input.empty() : this.resourceAttributes;
    }

    /**
     * User's UUID provided by the client.
     * 
     */
    @InputImport(name="userId", required=true)
      private final Input<String> userId;

    public Input<String> getUserId() {
        return this.userId;
    }

    public UserDataMappingArgs(
        Input<String> consentStoreId,
        Input<String> dataId,
        Input<String> datasetId,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<List<AttributeArgs>> resourceAttributes,
        Input<String> userId) {
        this.consentStoreId = Objects.requireNonNull(consentStoreId, "expected parameter 'consentStoreId' to be non-null");
        this.dataId = Objects.requireNonNull(dataId, "expected parameter 'dataId' to be non-null");
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.location = location;
        this.name = name;
        this.project = project;
        this.resourceAttributes = resourceAttributes;
        this.userId = Objects.requireNonNull(userId, "expected parameter 'userId' to be non-null");
    }

    private UserDataMappingArgs() {
        this.consentStoreId = Input.empty();
        this.dataId = Input.empty();
        this.datasetId = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.resourceAttributes = Input.empty();
        this.userId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserDataMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> consentStoreId;
        private Input<String> dataId;
        private Input<String> datasetId;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<List<AttributeArgs>> resourceAttributes;
        private Input<String> userId;

        public Builder() {
    	      // Empty
        }

        public Builder(UserDataMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consentStoreId = defaults.consentStoreId;
    	      this.dataId = defaults.dataId;
    	      this.datasetId = defaults.datasetId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.resourceAttributes = defaults.resourceAttributes;
    	      this.userId = defaults.userId;
        }

        public Builder consentStoreId(Input<String> consentStoreId) {
            this.consentStoreId = Objects.requireNonNull(consentStoreId);
            return this;
        }

        public Builder consentStoreId(String consentStoreId) {
            this.consentStoreId = Input.of(Objects.requireNonNull(consentStoreId));
            return this;
        }

        public Builder dataId(Input<String> dataId) {
            this.dataId = Objects.requireNonNull(dataId);
            return this;
        }

        public Builder dataId(String dataId) {
            this.dataId = Input.of(Objects.requireNonNull(dataId));
            return this;
        }

        public Builder datasetId(Input<String> datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder datasetId(String datasetId) {
            this.datasetId = Input.of(Objects.requireNonNull(datasetId));
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder resourceAttributes(@Nullable Input<List<AttributeArgs>> resourceAttributes) {
            this.resourceAttributes = resourceAttributes;
            return this;
        }

        public Builder resourceAttributes(@Nullable List<AttributeArgs> resourceAttributes) {
            this.resourceAttributes = Input.ofNullable(resourceAttributes);
            return this;
        }

        public Builder userId(Input<String> userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }

        public Builder userId(String userId) {
            this.userId = Input.of(Objects.requireNonNull(userId));
            return this;
        }
        public UserDataMappingArgs build() {
            return new UserDataMappingArgs(consentStoreId, dataId, datasetId, location, name, project, resourceAttributes, userId);
        }
    }
}
