// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storage_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
 * 
 */
public final class BucketRetentionPolicyResponse extends io.pulumi.resources.InvokeArgs {

    public static final BucketRetentionPolicyResponse Empty = new BucketRetentionPolicyResponse();

    /**
     * Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
     * 
     */
    @InputImport(name="effectiveTime", required=true)
    private final String effectiveTime;

    public String getEffectiveTime() {
        return this.effectiveTime;
    }

    /**
     * Once locked, an object retention policy cannot be modified.
     * 
     */
    @InputImport(name="isLocked", required=true)
    private final Boolean isLocked;

    public Boolean getIsLocked() {
        return this.isLocked;
    }

    /**
     * The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
     * 
     */
    @InputImport(name="retentionPeriod", required=true)
    private final String retentionPeriod;

    public String getRetentionPeriod() {
        return this.retentionPeriod;
    }

    public BucketRetentionPolicyResponse(
        String effectiveTime,
        Boolean isLocked,
        String retentionPeriod) {
        this.effectiveTime = Objects.requireNonNull(effectiveTime, "expected parameter 'effectiveTime' to be non-null");
        this.isLocked = Objects.requireNonNull(isLocked, "expected parameter 'isLocked' to be non-null");
        this.retentionPeriod = Objects.requireNonNull(retentionPeriod, "expected parameter 'retentionPeriod' to be non-null");
    }

    private BucketRetentionPolicyResponse() {
        this.effectiveTime = null;
        this.isLocked = null;
        this.retentionPeriod = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRetentionPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String effectiveTime;
        private Boolean isLocked;
        private String retentionPeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRetentionPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.effectiveTime = defaults.effectiveTime;
    	      this.isLocked = defaults.isLocked;
    	      this.retentionPeriod = defaults.retentionPeriod;
        }

        public Builder setEffectiveTime(String effectiveTime) {
            this.effectiveTime = Objects.requireNonNull(effectiveTime);
            return this;
        }

        public Builder setIsLocked(Boolean isLocked) {
            this.isLocked = Objects.requireNonNull(isLocked);
            return this;
        }

        public Builder setRetentionPeriod(String retentionPeriod) {
            this.retentionPeriod = Objects.requireNonNull(retentionPeriod);
            return this;
        }

        public BucketRetentionPolicyResponse build() {
            return new BucketRetentionPolicyResponse(effectiveTime, isLocked, retentionPeriod);
        }
    }
}
