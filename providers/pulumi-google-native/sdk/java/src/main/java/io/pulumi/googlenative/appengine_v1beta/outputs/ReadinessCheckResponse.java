// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1beta.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class ReadinessCheckResponse {
    private final String appStartTimeout;
    private final String checkInterval;
    private final Integer failureThreshold;
    private final String host;
    private final String path;
    private final Integer successThreshold;
    private final String timeout;

    @OutputCustomType.Constructor({"appStartTimeout","checkInterval","failureThreshold","host","path","successThreshold","timeout"})
    private ReadinessCheckResponse(
        String appStartTimeout,
        String checkInterval,
        Integer failureThreshold,
        String host,
        String path,
        Integer successThreshold,
        String timeout) {
        this.appStartTimeout = Objects.requireNonNull(appStartTimeout);
        this.checkInterval = Objects.requireNonNull(checkInterval);
        this.failureThreshold = Objects.requireNonNull(failureThreshold);
        this.host = Objects.requireNonNull(host);
        this.path = Objects.requireNonNull(path);
        this.successThreshold = Objects.requireNonNull(successThreshold);
        this.timeout = Objects.requireNonNull(timeout);
    }

    public String getAppStartTimeout() {
        return this.appStartTimeout;
    }
    public String getCheckInterval() {
        return this.checkInterval;
    }
    public Integer getFailureThreshold() {
        return this.failureThreshold;
    }
    public String getHost() {
        return this.host;
    }
    public String getPath() {
        return this.path;
    }
    public Integer getSuccessThreshold() {
        return this.successThreshold;
    }
    public String getTimeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReadinessCheckResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appStartTimeout;
        private String checkInterval;
        private Integer failureThreshold;
        private String host;
        private String path;
        private Integer successThreshold;
        private String timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ReadinessCheckResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appStartTimeout = defaults.appStartTimeout;
    	      this.checkInterval = defaults.checkInterval;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeout = defaults.timeout;
        }

        public Builder setAppStartTimeout(String appStartTimeout) {
            this.appStartTimeout = Objects.requireNonNull(appStartTimeout);
            return this;
        }

        public Builder setCheckInterval(String checkInterval) {
            this.checkInterval = Objects.requireNonNull(checkInterval);
            return this;
        }

        public Builder setFailureThreshold(Integer failureThreshold) {
            this.failureThreshold = Objects.requireNonNull(failureThreshold);
            return this;
        }

        public Builder setHost(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }

        public Builder setPath(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setSuccessThreshold(Integer successThreshold) {
            this.successThreshold = Objects.requireNonNull(successThreshold);
            return this;
        }

        public Builder setTimeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public ReadinessCheckResponse build() {
            return new ReadinessCheckResponse(appStartTimeout, checkInterval, failureThreshold, host, path, successThreshold, timeout);
        }
    }
}
