// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storagetransfer_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.storagetransfer_v1.inputs.MetadataOptionsArgs;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * TransferOptions define the actions to be performed on objects in a transfer.
 * 
 */
public final class TransferOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final TransferOptionsArgs Empty = new TransferOptionsArgs();

    /**
     * Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    @InputImport(name="deleteObjectsFromSourceAfterTransfer")
      private final @Nullable Input<Boolean> deleteObjectsFromSourceAfterTransfer;

    public Input<Boolean> getDeleteObjectsFromSourceAfterTransfer() {
        return this.deleteObjectsFromSourceAfterTransfer == null ? Input.empty() : this.deleteObjectsFromSourceAfterTransfer;
    }

    /**
     * Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    @InputImport(name="deleteObjectsUniqueInSink")
      private final @Nullable Input<Boolean> deleteObjectsUniqueInSink;

    public Input<Boolean> getDeleteObjectsUniqueInSink() {
        return this.deleteObjectsUniqueInSink == null ? Input.empty() : this.deleteObjectsUniqueInSink;
    }

    /**
     * Represents the selected metadata options for a transfer job.
     * 
     */
    @InputImport(name="metadataOptions")
      private final @Nullable Input<MetadataOptionsArgs> metadataOptions;

    public Input<MetadataOptionsArgs> getMetadataOptions() {
        return this.metadataOptions == null ? Input.empty() : this.metadataOptions;
    }

    /**
     * When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    @InputImport(name="overwriteObjectsAlreadyExistingInSink")
      private final @Nullable Input<Boolean> overwriteObjectsAlreadyExistingInSink;

    public Input<Boolean> getOverwriteObjectsAlreadyExistingInSink() {
        return this.overwriteObjectsAlreadyExistingInSink == null ? Input.empty() : this.overwriteObjectsAlreadyExistingInSink;
    }

    public TransferOptionsArgs(
        @Nullable Input<Boolean> deleteObjectsFromSourceAfterTransfer,
        @Nullable Input<Boolean> deleteObjectsUniqueInSink,
        @Nullable Input<MetadataOptionsArgs> metadataOptions,
        @Nullable Input<Boolean> overwriteObjectsAlreadyExistingInSink) {
        this.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
        this.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
        this.metadataOptions = metadataOptions;
        this.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
    }

    private TransferOptionsArgs() {
        this.deleteObjectsFromSourceAfterTransfer = Input.empty();
        this.deleteObjectsUniqueInSink = Input.empty();
        this.metadataOptions = Input.empty();
        this.overwriteObjectsAlreadyExistingInSink = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> deleteObjectsFromSourceAfterTransfer;
        private @Nullable Input<Boolean> deleteObjectsUniqueInSink;
        private @Nullable Input<MetadataOptionsArgs> metadataOptions;
        private @Nullable Input<Boolean> overwriteObjectsAlreadyExistingInSink;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteObjectsFromSourceAfterTransfer = defaults.deleteObjectsFromSourceAfterTransfer;
    	      this.deleteObjectsUniqueInSink = defaults.deleteObjectsUniqueInSink;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.overwriteObjectsAlreadyExistingInSink = defaults.overwriteObjectsAlreadyExistingInSink;
        }

        public Builder deleteObjectsFromSourceAfterTransfer(@Nullable Input<Boolean> deleteObjectsFromSourceAfterTransfer) {
            this.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            return this;
        }

        public Builder deleteObjectsFromSourceAfterTransfer(@Nullable Boolean deleteObjectsFromSourceAfterTransfer) {
            this.deleteObjectsFromSourceAfterTransfer = Input.ofNullable(deleteObjectsFromSourceAfterTransfer);
            return this;
        }

        public Builder deleteObjectsUniqueInSink(@Nullable Input<Boolean> deleteObjectsUniqueInSink) {
            this.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            return this;
        }

        public Builder deleteObjectsUniqueInSink(@Nullable Boolean deleteObjectsUniqueInSink) {
            this.deleteObjectsUniqueInSink = Input.ofNullable(deleteObjectsUniqueInSink);
            return this;
        }

        public Builder metadataOptions(@Nullable Input<MetadataOptionsArgs> metadataOptions) {
            this.metadataOptions = metadataOptions;
            return this;
        }

        public Builder metadataOptions(@Nullable MetadataOptionsArgs metadataOptions) {
            this.metadataOptions = Input.ofNullable(metadataOptions);
            return this;
        }

        public Builder overwriteObjectsAlreadyExistingInSink(@Nullable Input<Boolean> overwriteObjectsAlreadyExistingInSink) {
            this.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            return this;
        }

        public Builder overwriteObjectsAlreadyExistingInSink(@Nullable Boolean overwriteObjectsAlreadyExistingInSink) {
            this.overwriteObjectsAlreadyExistingInSink = Input.ofNullable(overwriteObjectsAlreadyExistingInSink);
            return this;
        }
        public TransferOptionsArgs build() {
            return new TransferOptionsArgs(deleteObjectsFromSourceAfterTransfer, deleteObjectsUniqueInSink, metadataOptions, overwriteObjectsAlreadyExistingInSink);
        }
    }
}
