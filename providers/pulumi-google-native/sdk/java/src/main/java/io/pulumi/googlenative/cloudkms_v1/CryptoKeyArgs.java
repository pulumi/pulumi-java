// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudkms_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudkms_v1.enums.CryptoKeyPurpose;
import io.pulumi.googlenative.cloudkms_v1.inputs.CryptoKeyVersionTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CryptoKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final CryptoKeyArgs Empty = new CryptoKeyArgs();

    @InputImport(name="cryptoKeyBackend")
    private final @Nullable Input<String> cryptoKeyBackend;

    public Input<String> getCryptoKeyBackend() {
        return this.cryptoKeyBackend == null ? Input.empty() : this.cryptoKeyBackend;
    }

    @InputImport(name="cryptoKeyId", required=true)
    private final Input<String> cryptoKeyId;

    public Input<String> getCryptoKeyId() {
        return this.cryptoKeyId;
    }

    @InputImport(name="destroyScheduledDuration")
    private final @Nullable Input<String> destroyScheduledDuration;

    public Input<String> getDestroyScheduledDuration() {
        return this.destroyScheduledDuration == null ? Input.empty() : this.destroyScheduledDuration;
    }

    @InputImport(name="importOnly")
    private final @Nullable Input<Boolean> importOnly;

    public Input<Boolean> getImportOnly() {
        return this.importOnly == null ? Input.empty() : this.importOnly;
    }

    @InputImport(name="keyRingId", required=true)
    private final Input<String> keyRingId;

    public Input<String> getKeyRingId() {
        return this.keyRingId;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="nextRotationTime")
    private final @Nullable Input<String> nextRotationTime;

    public Input<String> getNextRotationTime() {
        return this.nextRotationTime == null ? Input.empty() : this.nextRotationTime;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="purpose")
    private final @Nullable Input<CryptoKeyPurpose> purpose;

    public Input<CryptoKeyPurpose> getPurpose() {
        return this.purpose == null ? Input.empty() : this.purpose;
    }

    @InputImport(name="rotationPeriod")
    private final @Nullable Input<String> rotationPeriod;

    public Input<String> getRotationPeriod() {
        return this.rotationPeriod == null ? Input.empty() : this.rotationPeriod;
    }

    @InputImport(name="skipInitialVersionCreation")
    private final @Nullable Input<String> skipInitialVersionCreation;

    public Input<String> getSkipInitialVersionCreation() {
        return this.skipInitialVersionCreation == null ? Input.empty() : this.skipInitialVersionCreation;
    }

    @InputImport(name="versionTemplate")
    private final @Nullable Input<CryptoKeyVersionTemplateArgs> versionTemplate;

    public Input<CryptoKeyVersionTemplateArgs> getVersionTemplate() {
        return this.versionTemplate == null ? Input.empty() : this.versionTemplate;
    }

    public CryptoKeyArgs(
        @Nullable Input<String> cryptoKeyBackend,
        Input<String> cryptoKeyId,
        @Nullable Input<String> destroyScheduledDuration,
        @Nullable Input<Boolean> importOnly,
        Input<String> keyRingId,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> nextRotationTime,
        @Nullable Input<String> project,
        @Nullable Input<CryptoKeyPurpose> purpose,
        @Nullable Input<String> rotationPeriod,
        @Nullable Input<String> skipInitialVersionCreation,
        @Nullable Input<CryptoKeyVersionTemplateArgs> versionTemplate) {
        this.cryptoKeyBackend = cryptoKeyBackend;
        this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
        this.destroyScheduledDuration = destroyScheduledDuration;
        this.importOnly = importOnly;
        this.keyRingId = Objects.requireNonNull(keyRingId, "expected parameter 'keyRingId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.nextRotationTime = nextRotationTime;
        this.project = project;
        this.purpose = purpose;
        this.rotationPeriod = rotationPeriod;
        this.skipInitialVersionCreation = skipInitialVersionCreation;
        this.versionTemplate = versionTemplate;
    }

    private CryptoKeyArgs() {
        this.cryptoKeyBackend = Input.empty();
        this.cryptoKeyId = Input.empty();
        this.destroyScheduledDuration = Input.empty();
        this.importOnly = Input.empty();
        this.keyRingId = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.nextRotationTime = Input.empty();
        this.project = Input.empty();
        this.purpose = Input.empty();
        this.rotationPeriod = Input.empty();
        this.skipInitialVersionCreation = Input.empty();
        this.versionTemplate = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cryptoKeyBackend;
        private Input<String> cryptoKeyId;
        private @Nullable Input<String> destroyScheduledDuration;
        private @Nullable Input<Boolean> importOnly;
        private Input<String> keyRingId;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> nextRotationTime;
        private @Nullable Input<String> project;
        private @Nullable Input<CryptoKeyPurpose> purpose;
        private @Nullable Input<String> rotationPeriod;
        private @Nullable Input<String> skipInitialVersionCreation;
        private @Nullable Input<CryptoKeyVersionTemplateArgs> versionTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyBackend = defaults.cryptoKeyBackend;
    	      this.cryptoKeyId = defaults.cryptoKeyId;
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.importOnly = defaults.importOnly;
    	      this.keyRingId = defaults.keyRingId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.nextRotationTime = defaults.nextRotationTime;
    	      this.project = defaults.project;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.skipInitialVersionCreation = defaults.skipInitialVersionCreation;
    	      this.versionTemplate = defaults.versionTemplate;
        }

        public Builder setCryptoKeyBackend(@Nullable Input<String> cryptoKeyBackend) {
            this.cryptoKeyBackend = cryptoKeyBackend;
            return this;
        }

        public Builder setCryptoKeyBackend(@Nullable String cryptoKeyBackend) {
            this.cryptoKeyBackend = Input.ofNullable(cryptoKeyBackend);
            return this;
        }

        public Builder setCryptoKeyId(Input<String> cryptoKeyId) {
            this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId);
            return this;
        }

        public Builder setCryptoKeyId(String cryptoKeyId) {
            this.cryptoKeyId = Input.of(Objects.requireNonNull(cryptoKeyId));
            return this;
        }

        public Builder setDestroyScheduledDuration(@Nullable Input<String> destroyScheduledDuration) {
            this.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }

        public Builder setDestroyScheduledDuration(@Nullable String destroyScheduledDuration) {
            this.destroyScheduledDuration = Input.ofNullable(destroyScheduledDuration);
            return this;
        }

        public Builder setImportOnly(@Nullable Input<Boolean> importOnly) {
            this.importOnly = importOnly;
            return this;
        }

        public Builder setImportOnly(@Nullable Boolean importOnly) {
            this.importOnly = Input.ofNullable(importOnly);
            return this;
        }

        public Builder setKeyRingId(Input<String> keyRingId) {
            this.keyRingId = Objects.requireNonNull(keyRingId);
            return this;
        }

        public Builder setKeyRingId(String keyRingId) {
            this.keyRingId = Input.of(Objects.requireNonNull(keyRingId));
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setNextRotationTime(@Nullable Input<String> nextRotationTime) {
            this.nextRotationTime = nextRotationTime;
            return this;
        }

        public Builder setNextRotationTime(@Nullable String nextRotationTime) {
            this.nextRotationTime = Input.ofNullable(nextRotationTime);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setPurpose(@Nullable Input<CryptoKeyPurpose> purpose) {
            this.purpose = purpose;
            return this;
        }

        public Builder setPurpose(@Nullable CryptoKeyPurpose purpose) {
            this.purpose = Input.ofNullable(purpose);
            return this;
        }

        public Builder setRotationPeriod(@Nullable Input<String> rotationPeriod) {
            this.rotationPeriod = rotationPeriod;
            return this;
        }

        public Builder setRotationPeriod(@Nullable String rotationPeriod) {
            this.rotationPeriod = Input.ofNullable(rotationPeriod);
            return this;
        }

        public Builder setSkipInitialVersionCreation(@Nullable Input<String> skipInitialVersionCreation) {
            this.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }

        public Builder setSkipInitialVersionCreation(@Nullable String skipInitialVersionCreation) {
            this.skipInitialVersionCreation = Input.ofNullable(skipInitialVersionCreation);
            return this;
        }

        public Builder setVersionTemplate(@Nullable Input<CryptoKeyVersionTemplateArgs> versionTemplate) {
            this.versionTemplate = versionTemplate;
            return this;
        }

        public Builder setVersionTemplate(@Nullable CryptoKeyVersionTemplateArgs versionTemplate) {
            this.versionTemplate = Input.ofNullable(versionTemplate);
            return this;
        }

        public CryptoKeyArgs build() {
            return new CryptoKeyArgs(cryptoKeyBackend, cryptoKeyId, destroyScheduledDuration, importOnly, keyRingId, labels, location, nextRotationTime, project, purpose, rotationPeriod, skipInitialVersionCreation, versionTemplate);
        }
    }
}
