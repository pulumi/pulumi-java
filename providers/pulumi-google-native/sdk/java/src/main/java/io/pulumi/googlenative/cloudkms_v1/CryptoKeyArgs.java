// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudkms_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudkms_v1.enums.CryptoKeyPurpose;
import io.pulumi.googlenative.cloudkms_v1.inputs.CryptoKeyVersionTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CryptoKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final CryptoKeyArgs Empty = new CryptoKeyArgs();

    /**
     * Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
     * 
     */
    @Import(name="cryptoKeyBackend")
      private final @Nullable Output<String> cryptoKeyBackend;

    public Output<String> cryptoKeyBackend() {
        return this.cryptoKeyBackend == null ? Codegen.empty() : this.cryptoKeyBackend;
    }

    @Import(name="cryptoKeyId", required=true)
      private final Output<String> cryptoKeyId;

    public Output<String> cryptoKeyId() {
        return this.cryptoKeyId;
    }

    /**
     * Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
     * 
     */
    @Import(name="destroyScheduledDuration")
      private final @Nullable Output<String> destroyScheduledDuration;

    public Output<String> destroyScheduledDuration() {
        return this.destroyScheduledDuration == null ? Codegen.empty() : this.destroyScheduledDuration;
    }

    /**
     * Immutable. Whether this key may contain imported versions only.
     * 
     */
    @Import(name="importOnly")
      private final @Nullable Output<Boolean> importOnly;

    public Output<Boolean> importOnly() {
        return this.importOnly == null ? Codegen.empty() : this.importOnly;
    }

    @Import(name="keyRingId", required=true)
      private final Output<String> keyRingId;

    public Output<String> keyRingId() {
        return this.keyRingId;
    }

    /**
     * Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    @Import(name="nextRotationTime")
      private final @Nullable Output<String> nextRotationTime;

    public Output<String> nextRotationTime() {
        return this.nextRotationTime == null ? Codegen.empty() : this.nextRotationTime;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Immutable. The immutable purpose of this CryptoKey.
     * 
     */
    @Import(name="purpose")
      private final @Nullable Output<CryptoKeyPurpose> purpose;

    public Output<CryptoKeyPurpose> purpose() {
        return this.purpose == null ? Codegen.empty() : this.purpose;
    }

    /**
     * next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    @Import(name="rotationPeriod")
      private final @Nullable Output<String> rotationPeriod;

    public Output<String> rotationPeriod() {
        return this.rotationPeriod == null ? Codegen.empty() : this.rotationPeriod;
    }

    @Import(name="skipInitialVersionCreation")
      private final @Nullable Output<String> skipInitialVersionCreation;

    public Output<String> skipInitialVersionCreation() {
        return this.skipInitialVersionCreation == null ? Codegen.empty() : this.skipInitialVersionCreation;
    }

    /**
     * A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
     * 
     */
    @Import(name="versionTemplate")
      private final @Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate;

    public Output<CryptoKeyVersionTemplateArgs> versionTemplate() {
        return this.versionTemplate == null ? Codegen.empty() : this.versionTemplate;
    }

    public CryptoKeyArgs(
        @Nullable Output<String> cryptoKeyBackend,
        Output<String> cryptoKeyId,
        @Nullable Output<String> destroyScheduledDuration,
        @Nullable Output<Boolean> importOnly,
        Output<String> keyRingId,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<String> nextRotationTime,
        @Nullable Output<String> project,
        @Nullable Output<CryptoKeyPurpose> purpose,
        @Nullable Output<String> rotationPeriod,
        @Nullable Output<String> skipInitialVersionCreation,
        @Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate) {
        this.cryptoKeyBackend = cryptoKeyBackend;
        this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
        this.destroyScheduledDuration = destroyScheduledDuration;
        this.importOnly = importOnly;
        this.keyRingId = Objects.requireNonNull(keyRingId, "expected parameter 'keyRingId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.nextRotationTime = nextRotationTime;
        this.project = project;
        this.purpose = purpose;
        this.rotationPeriod = rotationPeriod;
        this.skipInitialVersionCreation = skipInitialVersionCreation;
        this.versionTemplate = versionTemplate;
    }

    private CryptoKeyArgs() {
        this.cryptoKeyBackend = Codegen.empty();
        this.cryptoKeyId = Codegen.empty();
        this.destroyScheduledDuration = Codegen.empty();
        this.importOnly = Codegen.empty();
        this.keyRingId = Codegen.empty();
        this.labels = Codegen.empty();
        this.location = Codegen.empty();
        this.nextRotationTime = Codegen.empty();
        this.project = Codegen.empty();
        this.purpose = Codegen.empty();
        this.rotationPeriod = Codegen.empty();
        this.skipInitialVersionCreation = Codegen.empty();
        this.versionTemplate = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> cryptoKeyBackend;
        private Output<String> cryptoKeyId;
        private @Nullable Output<String> destroyScheduledDuration;
        private @Nullable Output<Boolean> importOnly;
        private Output<String> keyRingId;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<String> nextRotationTime;
        private @Nullable Output<String> project;
        private @Nullable Output<CryptoKeyPurpose> purpose;
        private @Nullable Output<String> rotationPeriod;
        private @Nullable Output<String> skipInitialVersionCreation;
        private @Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyBackend = defaults.cryptoKeyBackend;
    	      this.cryptoKeyId = defaults.cryptoKeyId;
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.importOnly = defaults.importOnly;
    	      this.keyRingId = defaults.keyRingId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.nextRotationTime = defaults.nextRotationTime;
    	      this.project = defaults.project;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.skipInitialVersionCreation = defaults.skipInitialVersionCreation;
    	      this.versionTemplate = defaults.versionTemplate;
        }

        public Builder cryptoKeyBackend(@Nullable Output<String> cryptoKeyBackend) {
            this.cryptoKeyBackend = cryptoKeyBackend;
            return this;
        }
        public Builder cryptoKeyBackend(@Nullable String cryptoKeyBackend) {
            this.cryptoKeyBackend = Codegen.ofNullable(cryptoKeyBackend);
            return this;
        }
        public Builder cryptoKeyId(Output<String> cryptoKeyId) {
            this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId);
            return this;
        }
        public Builder cryptoKeyId(String cryptoKeyId) {
            this.cryptoKeyId = Output.of(Objects.requireNonNull(cryptoKeyId));
            return this;
        }
        public Builder destroyScheduledDuration(@Nullable Output<String> destroyScheduledDuration) {
            this.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }
        public Builder destroyScheduledDuration(@Nullable String destroyScheduledDuration) {
            this.destroyScheduledDuration = Codegen.ofNullable(destroyScheduledDuration);
            return this;
        }
        public Builder importOnly(@Nullable Output<Boolean> importOnly) {
            this.importOnly = importOnly;
            return this;
        }
        public Builder importOnly(@Nullable Boolean importOnly) {
            this.importOnly = Codegen.ofNullable(importOnly);
            return this;
        }
        public Builder keyRingId(Output<String> keyRingId) {
            this.keyRingId = Objects.requireNonNull(keyRingId);
            return this;
        }
        public Builder keyRingId(String keyRingId) {
            this.keyRingId = Output.of(Objects.requireNonNull(keyRingId));
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder nextRotationTime(@Nullable Output<String> nextRotationTime) {
            this.nextRotationTime = nextRotationTime;
            return this;
        }
        public Builder nextRotationTime(@Nullable String nextRotationTime) {
            this.nextRotationTime = Codegen.ofNullable(nextRotationTime);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder purpose(@Nullable Output<CryptoKeyPurpose> purpose) {
            this.purpose = purpose;
            return this;
        }
        public Builder purpose(@Nullable CryptoKeyPurpose purpose) {
            this.purpose = Codegen.ofNullable(purpose);
            return this;
        }
        public Builder rotationPeriod(@Nullable Output<String> rotationPeriod) {
            this.rotationPeriod = rotationPeriod;
            return this;
        }
        public Builder rotationPeriod(@Nullable String rotationPeriod) {
            this.rotationPeriod = Codegen.ofNullable(rotationPeriod);
            return this;
        }
        public Builder skipInitialVersionCreation(@Nullable Output<String> skipInitialVersionCreation) {
            this.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }
        public Builder skipInitialVersionCreation(@Nullable String skipInitialVersionCreation) {
            this.skipInitialVersionCreation = Codegen.ofNullable(skipInitialVersionCreation);
            return this;
        }
        public Builder versionTemplate(@Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate) {
            this.versionTemplate = versionTemplate;
            return this;
        }
        public Builder versionTemplate(@Nullable CryptoKeyVersionTemplateArgs versionTemplate) {
            this.versionTemplate = Codegen.ofNullable(versionTemplate);
            return this;
        }        public CryptoKeyArgs build() {
            return new CryptoKeyArgs(cryptoKeyBackend, cryptoKeyId, destroyScheduledDuration, importOnly, keyRingId, labels, location, nextRotationTime, project, purpose, rotationPeriod, skipInitialVersionCreation, versionTemplate);
        }
    }
}
