// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.notebooks_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.notebooks_v1.inputs.DataprocParametersResponse;
import io.pulumi.googlenative.notebooks_v1.inputs.SchedulerAcceleratorConfigResponse;
import io.pulumi.googlenative.notebooks_v1.inputs.VertexAIParametersResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class ExecutionTemplateResponse extends io.pulumi.resources.InvokeArgs {

    public static final ExecutionTemplateResponse Empty = new ExecutionTemplateResponse();

    @InputImport(name="acceleratorConfig", required=true)
    private final SchedulerAcceleratorConfigResponse acceleratorConfig;

    public SchedulerAcceleratorConfigResponse getAcceleratorConfig() {
        return this.acceleratorConfig;
    }

    @InputImport(name="containerImageUri", required=true)
    private final String containerImageUri;

    public String getContainerImageUri() {
        return this.containerImageUri;
    }

    @InputImport(name="dataprocParameters", required=true)
    private final DataprocParametersResponse dataprocParameters;

    public DataprocParametersResponse getDataprocParameters() {
        return this.dataprocParameters;
    }

    @InputImport(name="inputNotebookFile", required=true)
    private final String inputNotebookFile;

    public String getInputNotebookFile() {
        return this.inputNotebookFile;
    }

    @InputImport(name="jobType", required=true)
    private final String jobType;

    public String getJobType() {
        return this.jobType;
    }

    @InputImport(name="kernelSpec", required=true)
    private final String kernelSpec;

    public String getKernelSpec() {
        return this.kernelSpec;
    }

    @InputImport(name="labels", required=true)
    private final Map<String,String> labels;

    public Map<String,String> getLabels() {
        return this.labels;
    }

    @InputImport(name="masterType", required=true)
    private final String masterType;

    public String getMasterType() {
        return this.masterType;
    }

    @InputImport(name="outputNotebookFolder", required=true)
    private final String outputNotebookFolder;

    public String getOutputNotebookFolder() {
        return this.outputNotebookFolder;
    }

    @InputImport(name="parameters", required=true)
    private final String parameters;

    public String getParameters() {
        return this.parameters;
    }

    @InputImport(name="paramsYamlFile", required=true)
    private final String paramsYamlFile;

    public String getParamsYamlFile() {
        return this.paramsYamlFile;
    }

    @InputImport(name="serviceAccount", required=true)
    private final String serviceAccount;

    public String getServiceAccount() {
        return this.serviceAccount;
    }

    @InputImport(name="vertexAiParameters", required=true)
    private final VertexAIParametersResponse vertexAiParameters;

    public VertexAIParametersResponse getVertexAiParameters() {
        return this.vertexAiParameters;
    }

    public ExecutionTemplateResponse(
        SchedulerAcceleratorConfigResponse acceleratorConfig,
        String containerImageUri,
        DataprocParametersResponse dataprocParameters,
        String inputNotebookFile,
        String jobType,
        String kernelSpec,
        Map<String,String> labels,
        String masterType,
        String outputNotebookFolder,
        String parameters,
        String paramsYamlFile,
        String serviceAccount,
        VertexAIParametersResponse vertexAiParameters) {
        this.acceleratorConfig = Objects.requireNonNull(acceleratorConfig, "expected parameter 'acceleratorConfig' to be non-null");
        this.containerImageUri = Objects.requireNonNull(containerImageUri, "expected parameter 'containerImageUri' to be non-null");
        this.dataprocParameters = Objects.requireNonNull(dataprocParameters, "expected parameter 'dataprocParameters' to be non-null");
        this.inputNotebookFile = Objects.requireNonNull(inputNotebookFile, "expected parameter 'inputNotebookFile' to be non-null");
        this.jobType = Objects.requireNonNull(jobType, "expected parameter 'jobType' to be non-null");
        this.kernelSpec = Objects.requireNonNull(kernelSpec, "expected parameter 'kernelSpec' to be non-null");
        this.labels = Objects.requireNonNull(labels, "expected parameter 'labels' to be non-null");
        this.masterType = Objects.requireNonNull(masterType, "expected parameter 'masterType' to be non-null");
        this.outputNotebookFolder = Objects.requireNonNull(outputNotebookFolder, "expected parameter 'outputNotebookFolder' to be non-null");
        this.parameters = Objects.requireNonNull(parameters, "expected parameter 'parameters' to be non-null");
        this.paramsYamlFile = Objects.requireNonNull(paramsYamlFile, "expected parameter 'paramsYamlFile' to be non-null");
        this.serviceAccount = Objects.requireNonNull(serviceAccount, "expected parameter 'serviceAccount' to be non-null");
        this.vertexAiParameters = Objects.requireNonNull(vertexAiParameters, "expected parameter 'vertexAiParameters' to be non-null");
    }

    private ExecutionTemplateResponse() {
        this.acceleratorConfig = null;
        this.containerImageUri = null;
        this.dataprocParameters = null;
        this.inputNotebookFile = null;
        this.jobType = null;
        this.kernelSpec = null;
        this.labels = Map.of();
        this.masterType = null;
        this.outputNotebookFolder = null;
        this.parameters = null;
        this.paramsYamlFile = null;
        this.serviceAccount = null;
        this.vertexAiParameters = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionTemplateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchedulerAcceleratorConfigResponse acceleratorConfig;
        private String containerImageUri;
        private DataprocParametersResponse dataprocParameters;
        private String inputNotebookFile;
        private String jobType;
        private String kernelSpec;
        private Map<String,String> labels;
        private String masterType;
        private String outputNotebookFolder;
        private String parameters;
        private String paramsYamlFile;
        private String serviceAccount;
        private VertexAIParametersResponse vertexAiParameters;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecutionTemplateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.containerImageUri = defaults.containerImageUri;
    	      this.dataprocParameters = defaults.dataprocParameters;
    	      this.inputNotebookFile = defaults.inputNotebookFile;
    	      this.jobType = defaults.jobType;
    	      this.kernelSpec = defaults.kernelSpec;
    	      this.labels = defaults.labels;
    	      this.masterType = defaults.masterType;
    	      this.outputNotebookFolder = defaults.outputNotebookFolder;
    	      this.parameters = defaults.parameters;
    	      this.paramsYamlFile = defaults.paramsYamlFile;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.vertexAiParameters = defaults.vertexAiParameters;
        }

        public Builder setAcceleratorConfig(SchedulerAcceleratorConfigResponse acceleratorConfig) {
            this.acceleratorConfig = Objects.requireNonNull(acceleratorConfig);
            return this;
        }

        public Builder setContainerImageUri(String containerImageUri) {
            this.containerImageUri = Objects.requireNonNull(containerImageUri);
            return this;
        }

        public Builder setDataprocParameters(DataprocParametersResponse dataprocParameters) {
            this.dataprocParameters = Objects.requireNonNull(dataprocParameters);
            return this;
        }

        public Builder setInputNotebookFile(String inputNotebookFile) {
            this.inputNotebookFile = Objects.requireNonNull(inputNotebookFile);
            return this;
        }

        public Builder setJobType(String jobType) {
            this.jobType = Objects.requireNonNull(jobType);
            return this;
        }

        public Builder setKernelSpec(String kernelSpec) {
            this.kernelSpec = Objects.requireNonNull(kernelSpec);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMasterType(String masterType) {
            this.masterType = Objects.requireNonNull(masterType);
            return this;
        }

        public Builder setOutputNotebookFolder(String outputNotebookFolder) {
            this.outputNotebookFolder = Objects.requireNonNull(outputNotebookFolder);
            return this;
        }

        public Builder setParameters(String parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }

        public Builder setParamsYamlFile(String paramsYamlFile) {
            this.paramsYamlFile = Objects.requireNonNull(paramsYamlFile);
            return this;
        }

        public Builder setServiceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setVertexAiParameters(VertexAIParametersResponse vertexAiParameters) {
            this.vertexAiParameters = Objects.requireNonNull(vertexAiParameters);
            return this;
        }

        public ExecutionTemplateResponse build() {
            return new ExecutionTemplateResponse(acceleratorConfig, containerImageUri, dataprocParameters, inputNotebookFile, jobType, kernelSpec, labels, masterType, outputNotebookFolder, parameters, paramsYamlFile, serviceAccount, vertexAiParameters);
        }
    }
}
