// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.healthcare_v1.inputs.PatientIdArgs;
import io.pulumi.googlenative.healthcare_v1.inputs.SchematizedDataArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MessageArgs extends io.pulumi.resources.ResourceArgs {

    public static final MessageArgs Empty = new MessageArgs();

    /**
     * Raw message bytes.
     * 
     */
    @InputImport(name="data")
      private final @Nullable Input<String> data;

    public Input<String> getData() {
        return this.data == null ? Input.empty() : this.data;
    }

    @InputImport(name="datasetId", required=true)
      private final Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId;
    }

    @InputImport(name="hl7V2StoreId", required=true)
      private final Input<String> hl7V2StoreId;

    public Input<String> getHl7V2StoreId() {
        return this.hl7V2StoreId;
    }

    /**
     * User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The message type for this message. MSH-9.1.
     * 
     */
    @InputImport(name="messageType")
      private final @Nullable Input<String> messageType;

    public Input<String> getMessageType() {
        return this.messageType == null ? Input.empty() : this.messageType;
    }

    /**
     * Resource name of the Message, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
     * 
     */
    @InputImport(name="patientIds")
      private final @Nullable Input<List<PatientIdArgs>> patientIds;

    public Input<List<PatientIdArgs>> getPatientIds() {
        return this.patientIds == null ? Input.empty() : this.patientIds;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The parsed version of the raw message data schematized according to this store's schemas and type definitions.
     * 
     */
    @InputImport(name="schematizedData")
      private final @Nullable Input<SchematizedDataArgs> schematizedData;

    public Input<SchematizedDataArgs> getSchematizedData() {
        return this.schematizedData == null ? Input.empty() : this.schematizedData;
    }

    /**
     * The hospital that this message came from. MSH-4.
     * 
     */
    @InputImport(name="sendFacility")
      private final @Nullable Input<String> sendFacility;

    public Input<String> getSendFacility() {
        return this.sendFacility == null ? Input.empty() : this.sendFacility;
    }

    /**
     * The datetime the sending application sent this message. MSH-7.
     * 
     */
    @InputImport(name="sendTime")
      private final @Nullable Input<String> sendTime;

    public Input<String> getSendTime() {
        return this.sendTime == null ? Input.empty() : this.sendTime;
    }

    public MessageArgs(
        @Nullable Input<String> data,
        Input<String> datasetId,
        Input<String> hl7V2StoreId,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> messageType,
        @Nullable Input<String> name,
        @Nullable Input<List<PatientIdArgs>> patientIds,
        @Nullable Input<String> project,
        @Nullable Input<SchematizedDataArgs> schematizedData,
        @Nullable Input<String> sendFacility,
        @Nullable Input<String> sendTime) {
        this.data = data;
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.hl7V2StoreId = Objects.requireNonNull(hl7V2StoreId, "expected parameter 'hl7V2StoreId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.messageType = messageType;
        this.name = name;
        this.patientIds = patientIds;
        this.project = project;
        this.schematizedData = schematizedData;
        this.sendFacility = sendFacility;
        this.sendTime = sendTime;
    }

    private MessageArgs() {
        this.data = Input.empty();
        this.datasetId = Input.empty();
        this.hl7V2StoreId = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.messageType = Input.empty();
        this.name = Input.empty();
        this.patientIds = Input.empty();
        this.project = Input.empty();
        this.schematizedData = Input.empty();
        this.sendFacility = Input.empty();
        this.sendTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MessageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> data;
        private Input<String> datasetId;
        private Input<String> hl7V2StoreId;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> messageType;
        private @Nullable Input<String> name;
        private @Nullable Input<List<PatientIdArgs>> patientIds;
        private @Nullable Input<String> project;
        private @Nullable Input<SchematizedDataArgs> schematizedData;
        private @Nullable Input<String> sendFacility;
        private @Nullable Input<String> sendTime;

        public Builder() {
    	      // Empty
        }

        public Builder(MessageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.data = defaults.data;
    	      this.datasetId = defaults.datasetId;
    	      this.hl7V2StoreId = defaults.hl7V2StoreId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.messageType = defaults.messageType;
    	      this.name = defaults.name;
    	      this.patientIds = defaults.patientIds;
    	      this.project = defaults.project;
    	      this.schematizedData = defaults.schematizedData;
    	      this.sendFacility = defaults.sendFacility;
    	      this.sendTime = defaults.sendTime;
        }

        public Builder data(@Nullable Input<String> data) {
            this.data = data;
            return this;
        }

        public Builder data(@Nullable String data) {
            this.data = Input.ofNullable(data);
            return this;
        }

        public Builder datasetId(Input<String> datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder datasetId(String datasetId) {
            this.datasetId = Input.of(Objects.requireNonNull(datasetId));
            return this;
        }

        public Builder hl7V2StoreId(Input<String> hl7V2StoreId) {
            this.hl7V2StoreId = Objects.requireNonNull(hl7V2StoreId);
            return this;
        }

        public Builder hl7V2StoreId(String hl7V2StoreId) {
            this.hl7V2StoreId = Input.of(Objects.requireNonNull(hl7V2StoreId));
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder messageType(@Nullable Input<String> messageType) {
            this.messageType = messageType;
            return this;
        }

        public Builder messageType(@Nullable String messageType) {
            this.messageType = Input.ofNullable(messageType);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder patientIds(@Nullable Input<List<PatientIdArgs>> patientIds) {
            this.patientIds = patientIds;
            return this;
        }

        public Builder patientIds(@Nullable List<PatientIdArgs> patientIds) {
            this.patientIds = Input.ofNullable(patientIds);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder schematizedData(@Nullable Input<SchematizedDataArgs> schematizedData) {
            this.schematizedData = schematizedData;
            return this;
        }

        public Builder schematizedData(@Nullable SchematizedDataArgs schematizedData) {
            this.schematizedData = Input.ofNullable(schematizedData);
            return this;
        }

        public Builder sendFacility(@Nullable Input<String> sendFacility) {
            this.sendFacility = sendFacility;
            return this;
        }

        public Builder sendFacility(@Nullable String sendFacility) {
            this.sendFacility = Input.ofNullable(sendFacility);
            return this;
        }

        public Builder sendTime(@Nullable Input<String> sendTime) {
            this.sendTime = sendTime;
            return this;
        }

        public Builder sendTime(@Nullable String sendTime) {
            this.sendTime = Input.ofNullable(sendTime);
            return this;
        }
        public MessageArgs build() {
            return new MessageArgs(data, datasetId, hl7V2StoreId, labels, location, messageType, name, patientIds, project, schematizedData, sendFacility, sendTime);
        }
    }
}
