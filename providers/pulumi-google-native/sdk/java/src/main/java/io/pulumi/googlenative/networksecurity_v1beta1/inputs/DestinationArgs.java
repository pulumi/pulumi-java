// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networksecurity_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.networksecurity_v1beta1.inputs.HttpHeaderMatchArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specification of traffic destination attributes.
 * 
 */
public final class DestinationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DestinationArgs Empty = new DestinationArgs();

    /**
     * List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example // *.myorg.com") or a presence(any) match "*".
     * 
     */
    @InputImport(name="hosts", required=true)
    private final Input<List<String>> hosts;

    public Input<List<String>> getHosts() {
        return this.hosts;
    }

    /**
     * Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
     * 
     */
    @InputImport(name="httpHeaderMatch")
    private final @Nullable Input<HttpHeaderMatchArgs> httpHeaderMatch;

    public Input<HttpHeaderMatchArgs> getHttpHeaderMatch() {
        return this.httpHeaderMatch == null ? Input.empty() : this.httpHeaderMatch;
    }

    /**
     * Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
     * 
     */
    @InputImport(name="methods")
    private final @Nullable Input<List<String>> methods;

    public Input<List<String>> getMethods() {
        return this.methods == null ? Input.empty() : this.methods;
    }

    /**
     * List of destination ports to match. At least one port should match.
     * 
     */
    @InputImport(name="ports", required=true)
    private final Input<List<Integer>> ports;

    public Input<List<Integer>> getPorts() {
        return this.ports;
    }

    public DestinationArgs(
        Input<List<String>> hosts,
        @Nullable Input<HttpHeaderMatchArgs> httpHeaderMatch,
        @Nullable Input<List<String>> methods,
        Input<List<Integer>> ports) {
        this.hosts = Objects.requireNonNull(hosts, "expected parameter 'hosts' to be non-null");
        this.httpHeaderMatch = httpHeaderMatch;
        this.methods = methods;
        this.ports = Objects.requireNonNull(ports, "expected parameter 'ports' to be non-null");
    }

    private DestinationArgs() {
        this.hosts = Input.empty();
        this.httpHeaderMatch = Input.empty();
        this.methods = Input.empty();
        this.ports = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> hosts;
        private @Nullable Input<HttpHeaderMatchArgs> httpHeaderMatch;
        private @Nullable Input<List<String>> methods;
        private Input<List<Integer>> ports;

        public Builder() {
    	      // Empty
        }

        public Builder(DestinationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hosts = defaults.hosts;
    	      this.httpHeaderMatch = defaults.httpHeaderMatch;
    	      this.methods = defaults.methods;
    	      this.ports = defaults.ports;
        }

        public Builder setHosts(Input<List<String>> hosts) {
            this.hosts = Objects.requireNonNull(hosts);
            return this;
        }

        public Builder setHosts(List<String> hosts) {
            this.hosts = Input.of(Objects.requireNonNull(hosts));
            return this;
        }

        public Builder setHttpHeaderMatch(@Nullable Input<HttpHeaderMatchArgs> httpHeaderMatch) {
            this.httpHeaderMatch = httpHeaderMatch;
            return this;
        }

        public Builder setHttpHeaderMatch(@Nullable HttpHeaderMatchArgs httpHeaderMatch) {
            this.httpHeaderMatch = Input.ofNullable(httpHeaderMatch);
            return this;
        }

        public Builder setMethods(@Nullable Input<List<String>> methods) {
            this.methods = methods;
            return this;
        }

        public Builder setMethods(@Nullable List<String> methods) {
            this.methods = Input.ofNullable(methods);
            return this;
        }

        public Builder setPorts(Input<List<Integer>> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }

        public Builder setPorts(List<Integer> ports) {
            this.ports = Input.of(Objects.requireNonNull(ports));
            return this;
        }

        public DestinationArgs build() {
            return new DestinationArgs(hosts, httpHeaderMatch, methods, ports);
        }
    }
}
