// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigtableadmin_v2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.bigtableadmin_v2.enums.ClusterDefaultStorageType;
import io.pulumi.googlenative.bigtableadmin_v2.inputs.ClusterConfigArgs;
import io.pulumi.googlenative.bigtableadmin_v2.inputs.EncryptionConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * Configuration for this cluster.
     * 
     */
    @InputImport(name="clusterConfig")
      private final @Nullable Output<ClusterConfigArgs> clusterConfig;

    public Output<ClusterConfigArgs> getClusterConfig() {
        return this.clusterConfig == null ? Output.empty() : this.clusterConfig;
    }

    @InputImport(name="clusterId", required=true)
      private final Output<String> clusterId;

    public Output<String> getClusterId() {
        return this.clusterId;
    }

    /**
     * Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
     * 
     */
    @InputImport(name="defaultStorageType")
      private final @Nullable Output<ClusterDefaultStorageType> defaultStorageType;

    public Output<ClusterDefaultStorageType> getDefaultStorageType() {
        return this.defaultStorageType == null ? Output.empty() : this.defaultStorageType;
    }

    /**
     * Immutable. The encryption configuration for CMEK-protected clusters.
     * 
     */
    @InputImport(name="encryptionConfig")
      private final @Nullable Output<EncryptionConfigArgs> encryptionConfig;

    public Output<EncryptionConfigArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Output.empty() : this.encryptionConfig;
    }

    @InputImport(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId;
    }

    /**
     * Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
     * 
     */
    @InputImport(name="serveNodes")
      private final @Nullable Output<Integer> serveNodes;

    public Output<Integer> getServeNodes() {
        return this.serveNodes == null ? Output.empty() : this.serveNodes;
    }

    public ClusterArgs(
        @Nullable Output<ClusterConfigArgs> clusterConfig,
        Output<String> clusterId,
        @Nullable Output<ClusterDefaultStorageType> defaultStorageType,
        @Nullable Output<EncryptionConfigArgs> encryptionConfig,
        Output<String> instanceId,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<Integer> serveNodes) {
        this.clusterConfig = clusterConfig;
        this.clusterId = Objects.requireNonNull(clusterId, "expected parameter 'clusterId' to be non-null");
        this.defaultStorageType = defaultStorageType;
        this.encryptionConfig = encryptionConfig;
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.location = location;
        this.name = name;
        this.project = project;
        this.serveNodes = serveNodes;
    }

    private ClusterArgs() {
        this.clusterConfig = Output.empty();
        this.clusterId = Output.empty();
        this.defaultStorageType = Output.empty();
        this.encryptionConfig = Output.empty();
        this.instanceId = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.serveNodes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ClusterConfigArgs> clusterConfig;
        private Output<String> clusterId;
        private @Nullable Output<ClusterDefaultStorageType> defaultStorageType;
        private @Nullable Output<EncryptionConfigArgs> encryptionConfig;
        private Output<String> instanceId;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<Integer> serveNodes;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterConfig = defaults.clusterConfig;
    	      this.clusterId = defaults.clusterId;
    	      this.defaultStorageType = defaults.defaultStorageType;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.instanceId = defaults.instanceId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.serveNodes = defaults.serveNodes;
        }

        public Builder clusterConfig(@Nullable Output<ClusterConfigArgs> clusterConfig) {
            this.clusterConfig = clusterConfig;
            return this;
        }

        public Builder clusterConfig(@Nullable ClusterConfigArgs clusterConfig) {
            this.clusterConfig = Output.ofNullable(clusterConfig);
            return this;
        }

        public Builder clusterId(Output<String> clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }

        public Builder clusterId(String clusterId) {
            this.clusterId = Output.of(Objects.requireNonNull(clusterId));
            return this;
        }

        public Builder defaultStorageType(@Nullable Output<ClusterDefaultStorageType> defaultStorageType) {
            this.defaultStorageType = defaultStorageType;
            return this;
        }

        public Builder defaultStorageType(@Nullable ClusterDefaultStorageType defaultStorageType) {
            this.defaultStorageType = Output.ofNullable(defaultStorageType);
            return this;
        }

        public Builder encryptionConfig(@Nullable Output<EncryptionConfigArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder encryptionConfig(@Nullable EncryptionConfigArgs encryptionConfig) {
            this.encryptionConfig = Output.ofNullable(encryptionConfig);
            return this;
        }

        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }

        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder serveNodes(@Nullable Output<Integer> serveNodes) {
            this.serveNodes = serveNodes;
            return this;
        }

        public Builder serveNodes(@Nullable Integer serveNodes) {
            this.serveNodes = Output.ofNullable(serveNodes);
            return this;
        }
        public ClusterArgs build() {
            return new ClusterArgs(clusterConfig, clusterId, defaultStorageType, encryptionConfig, instanceId, location, name, project, serveNodes);
        }
    }
}
