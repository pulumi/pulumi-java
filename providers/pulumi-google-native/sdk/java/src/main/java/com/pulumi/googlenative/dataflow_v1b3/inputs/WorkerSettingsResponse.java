// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Provides data to pass through to the worker harness.
 * 
 */
public final class WorkerSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final WorkerSettingsResponse Empty = new WorkerSettingsResponse();

    /**
     * The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, &#34;Relative Uniform Resource Locators&#34;. If not specified, the default value is &#34;http://www.googleapis.com/&#34;
     * 
     */
    @Import(name="baseUrl", required=true)
    private String baseUrl;

    public String baseUrl() {
        return this.baseUrl;
    }

    /**
     * Whether to send work progress updates to the service.
     * 
     */
    @Import(name="reportingEnabled", required=true)
    private Boolean reportingEnabled;

    public Boolean reportingEnabled() {
        return this.reportingEnabled;
    }

    /**
     * The Cloud Dataflow service path relative to the root URL, for example, &#34;dataflow/v1b3/projects&#34;.
     * 
     */
    @Import(name="servicePath", required=true)
    private String servicePath;

    public String servicePath() {
        return this.servicePath;
    }

    /**
     * The Shuffle service path relative to the root URL, for example, &#34;shuffle/v1beta1&#34;.
     * 
     */
    @Import(name="shuffleServicePath", required=true)
    private String shuffleServicePath;

    public String shuffleServicePath() {
        return this.shuffleServicePath;
    }

    /**
     * The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    @Import(name="tempStoragePrefix", required=true)
    private String tempStoragePrefix;

    public String tempStoragePrefix() {
        return this.tempStoragePrefix;
    }

    /**
     * The ID of the worker running this pipeline.
     * 
     */
    @Import(name="workerId", required=true)
    private String workerId;

    public String workerId() {
        return this.workerId;
    }

    private WorkerSettingsResponse() {}

    private WorkerSettingsResponse(WorkerSettingsResponse $) {
        this.baseUrl = $.baseUrl;
        this.reportingEnabled = $.reportingEnabled;
        this.servicePath = $.servicePath;
        this.shuffleServicePath = $.shuffleServicePath;
        this.tempStoragePrefix = $.tempStoragePrefix;
        this.workerId = $.workerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerSettingsResponse $;

        public Builder() {
            $ = new WorkerSettingsResponse();
        }

        public Builder(WorkerSettingsResponse defaults) {
            $ = new WorkerSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder baseUrl(String baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        public Builder reportingEnabled(Boolean reportingEnabled) {
            $.reportingEnabled = reportingEnabled;
            return this;
        }

        public Builder servicePath(String servicePath) {
            $.servicePath = servicePath;
            return this;
        }

        public Builder shuffleServicePath(String shuffleServicePath) {
            $.shuffleServicePath = shuffleServicePath;
            return this;
        }

        public Builder tempStoragePrefix(String tempStoragePrefix) {
            $.tempStoragePrefix = tempStoragePrefix;
            return this;
        }

        public Builder workerId(String workerId) {
            $.workerId = workerId;
            return this;
        }

        public WorkerSettingsResponse build() {
            $.baseUrl = Objects.requireNonNull($.baseUrl, "expected parameter 'baseUrl' to be non-null");
            $.reportingEnabled = Objects.requireNonNull($.reportingEnabled, "expected parameter 'reportingEnabled' to be non-null");
            $.servicePath = Objects.requireNonNull($.servicePath, "expected parameter 'servicePath' to be non-null");
            $.shuffleServicePath = Objects.requireNonNull($.shuffleServicePath, "expected parameter 'shuffleServicePath' to be non-null");
            $.tempStoragePrefix = Objects.requireNonNull($.tempStoragePrefix, "expected parameter 'tempStoragePrefix' to be non-null");
            $.workerId = Objects.requireNonNull($.workerId, "expected parameter 'workerId' to be non-null");
            return $;
        }
    }

}
