// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * We currently only support backup retention by specifying the number of backups we will retain.
 * 
 */
public final class BackupRetentionSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackupRetentionSettingsResponse Empty = new BackupRetentionSettingsResponse();

    /**
     * Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
     * 
     */
    @Import(name="retainedBackups", required=true)
    private Integer retainedBackups;

    /**
     * @return Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
     * 
     */
    public Integer retainedBackups() {
        return this.retainedBackups;
    }

    /**
     * The unit that &#39;retained_backups&#39; represents.
     * 
     */
    @Import(name="retentionUnit", required=true)
    private String retentionUnit;

    /**
     * @return The unit that &#39;retained_backups&#39; represents.
     * 
     */
    public String retentionUnit() {
        return this.retentionUnit;
    }

    private BackupRetentionSettingsResponse() {}

    private BackupRetentionSettingsResponse(BackupRetentionSettingsResponse $) {
        this.retainedBackups = $.retainedBackups;
        this.retentionUnit = $.retentionUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupRetentionSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupRetentionSettingsResponse $;

        public Builder() {
            $ = new BackupRetentionSettingsResponse();
        }

        public Builder(BackupRetentionSettingsResponse defaults) {
            $ = new BackupRetentionSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param retainedBackups Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
         * 
         * @return builder
         * 
         */
        public Builder retainedBackups(Integer retainedBackups) {
            $.retainedBackups = retainedBackups;
            return this;
        }

        /**
         * @param retentionUnit The unit that &#39;retained_backups&#39; represents.
         * 
         * @return builder
         * 
         */
        public Builder retentionUnit(String retentionUnit) {
            $.retentionUnit = retentionUnit;
            return this;
        }

        public BackupRetentionSettingsResponse build() {
            $.retainedBackups = Objects.requireNonNull($.retainedBackups, "expected parameter 'retainedBackups' to be non-null");
            $.retentionUnit = Objects.requireNonNull($.retentionUnit, "expected parameter 'retentionUnit' to be non-null");
            return $;
        }
    }

}
