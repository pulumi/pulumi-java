// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.EnvironmentResponse;
import com.pulumi.googlenative.testing_v1.inputs.ShardResponse;
import com.pulumi.googlenative.testing_v1.inputs.TestDetailsResponse;
import com.pulumi.googlenative.testing_v1.inputs.TestSpecificationResponse;
import com.pulumi.googlenative.testing_v1.inputs.ToolResultsStepResponse;
import java.lang.String;
import java.util.Objects;


/**
 * A single test executed in a single environment.
 * 
 */
public final class TestExecutionResponse extends com.pulumi.resources.InvokeArgs {

    public static final TestExecutionResponse Empty = new TestExecutionResponse();

    /**
     * How the host machine(s) are configured.
     * 
     */
    @Import(name="environment", required=true)
    private EnvironmentResponse environment;

    public EnvironmentResponse environment() {
        return this.environment;
    }

    /**
     * Id of the containing TestMatrix.
     * 
     */
    @Import(name="matrixId", required=true)
    private String matrixId;

    public String matrixId() {
        return this.matrixId;
    }

    /**
     * The cloud project that owns the test execution.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    public String project() {
        return this.project;
    }

    /**
     * Details about the shard.
     * 
     */
    @Import(name="shard", required=true)
    private ShardResponse shard;

    public ShardResponse shard() {
        return this.shard;
    }

    /**
     * Indicates the current progress of the test execution (e.g., FINISHED).
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Additional details about the running test.
     * 
     */
    @Import(name="testDetails", required=true)
    private TestDetailsResponse testDetails;

    public TestDetailsResponse testDetails() {
        return this.testDetails;
    }

    /**
     * How to run the test.
     * 
     */
    @Import(name="testSpecification", required=true)
    private TestSpecificationResponse testSpecification;

    public TestSpecificationResponse testSpecification() {
        return this.testSpecification;
    }

    /**
     * The time this test execution was initially created.
     * 
     */
    @Import(name="timestamp", required=true)
    private String timestamp;

    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Where the results for this execution are written.
     * 
     */
    @Import(name="toolResultsStep", required=true)
    private ToolResultsStepResponse toolResultsStep;

    public ToolResultsStepResponse toolResultsStep() {
        return this.toolResultsStep;
    }

    private TestExecutionResponse() {}

    private TestExecutionResponse(TestExecutionResponse $) {
        this.environment = $.environment;
        this.matrixId = $.matrixId;
        this.project = $.project;
        this.shard = $.shard;
        this.state = $.state;
        this.testDetails = $.testDetails;
        this.testSpecification = $.testSpecification;
        this.timestamp = $.timestamp;
        this.toolResultsStep = $.toolResultsStep;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestExecutionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestExecutionResponse $;

        public Builder() {
            $ = new TestExecutionResponse();
        }

        public Builder(TestExecutionResponse defaults) {
            $ = new TestExecutionResponse(Objects.requireNonNull(defaults));
        }

        public Builder environment(EnvironmentResponse environment) {
            $.environment = environment;
            return this;
        }

        public Builder matrixId(String matrixId) {
            $.matrixId = matrixId;
            return this;
        }

        public Builder project(String project) {
            $.project = project;
            return this;
        }

        public Builder shard(ShardResponse shard) {
            $.shard = shard;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder testDetails(TestDetailsResponse testDetails) {
            $.testDetails = testDetails;
            return this;
        }

        public Builder testSpecification(TestSpecificationResponse testSpecification) {
            $.testSpecification = testSpecification;
            return this;
        }

        public Builder timestamp(String timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        public Builder toolResultsStep(ToolResultsStepResponse toolResultsStep) {
            $.toolResultsStep = toolResultsStep;
            return this;
        }

        public TestExecutionResponse build() {
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.matrixId = Objects.requireNonNull($.matrixId, "expected parameter 'matrixId' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.shard = Objects.requireNonNull($.shard, "expected parameter 'shard' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.testDetails = Objects.requireNonNull($.testDetails, "expected parameter 'testDetails' to be non-null");
            $.testSpecification = Objects.requireNonNull($.testSpecification, "expected parameter 'testSpecification' to be non-null");
            $.timestamp = Objects.requireNonNull($.timestamp, "expected parameter 'timestamp' to be non-null");
            $.toolResultsStep = Objects.requireNonNull($.toolResultsStep, "expected parameter 'toolResultsStep' to be non-null");
            return $;
        }
    }

}
