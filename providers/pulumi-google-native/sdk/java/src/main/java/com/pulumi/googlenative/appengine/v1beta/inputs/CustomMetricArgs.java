// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Allows autoscaling based on Stackdriver metrics.
 * 
 */
public final class CustomMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomMetricArgs Empty = new CustomMetricArgs();

    /**
     * Allows filtering on the metric&#39;s fields.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return Allows filtering on the metric&#39;s fields.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The name of the metric.
     * 
     */
    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    /**
     * @return The name of the metric.
     * 
     */
    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    /**
     * May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
     * 
     */
    @Import(name="singleInstanceAssignment")
    private @Nullable Output<Double> singleInstanceAssignment;

    /**
     * @return May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
     * 
     */
    public Optional<Output<Double>> singleInstanceAssignment() {
        return Optional.ofNullable(this.singleInstanceAssignment);
    }

    /**
     * The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    /**
     * The target value for the metric.
     * 
     */
    @Import(name="targetUtilization")
    private @Nullable Output<Double> targetUtilization;

    /**
     * @return The target value for the metric.
     * 
     */
    public Optional<Output<Double>> targetUtilization() {
        return Optional.ofNullable(this.targetUtilization);
    }

    private CustomMetricArgs() {}

    private CustomMetricArgs(CustomMetricArgs $) {
        this.filter = $.filter;
        this.metricName = $.metricName;
        this.singleInstanceAssignment = $.singleInstanceAssignment;
        this.targetType = $.targetType;
        this.targetUtilization = $.targetUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomMetricArgs $;

        public Builder() {
            $ = new CustomMetricArgs();
        }

        public Builder(CustomMetricArgs defaults) {
            $ = new CustomMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter Allows filtering on the metric&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Allows filtering on the metric&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param metricName The name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param singleInstanceAssignment May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
         * 
         * @return builder
         * 
         */
        public Builder singleInstanceAssignment(@Nullable Output<Double> singleInstanceAssignment) {
            $.singleInstanceAssignment = singleInstanceAssignment;
            return this;
        }

        /**
         * @param singleInstanceAssignment May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
         * 
         * @return builder
         * 
         */
        public Builder singleInstanceAssignment(Double singleInstanceAssignment) {
            return singleInstanceAssignment(Output.of(singleInstanceAssignment));
        }

        /**
         * @param targetType The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        /**
         * @param targetUtilization The target value for the metric.
         * 
         * @return builder
         * 
         */
        public Builder targetUtilization(@Nullable Output<Double> targetUtilization) {
            $.targetUtilization = targetUtilization;
            return this;
        }

        /**
         * @param targetUtilization The target value for the metric.
         * 
         * @return builder
         * 
         */
        public Builder targetUtilization(Double targetUtilization) {
            return targetUtilization(Output.of(targetUtilization));
        }

        public CustomMetricArgs build() {
            return $;
        }
    }

}
