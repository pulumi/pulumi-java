// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.datalabeling.v1beta1.outputs.GoogleCloudDatalabelingV1beta1CsvInstructionResponse;
import com.pulumi.googlenative.datalabeling.v1beta1.outputs.GoogleCloudDatalabelingV1beta1PdfInstructionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstructionResult {
    /**
     * @return The names of any related resources that are blocking changes to the instruction.
     * 
     */
    private final List<String> blockingResources;
    /**
     * @return Creation time of instruction.
     * 
     */
    private final String createTime;
    /**
     * @return Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     * @deprecated
     * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     */
    @Deprecated /* Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data. */
    private final GoogleCloudDatalabelingV1beta1CsvInstructionResponse csvInstruction;
    /**
     * @return The data type of this instruction.
     * 
     */
    private final String dataType;
    /**
     * @return Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
     * 
     */
    private final String description;
    /**
     * @return The display name of the instruction. Maximum of 64 characters.
     * 
     */
    private final String displayName;
    /**
     * @return Instruction resource name, format: projects/{project_id}/instructions/{instruction_id}
     * 
     */
    private final String name;
    /**
     * @return Instruction from a PDF document. The PDF should be in a Cloud Storage bucket.
     * 
     */
    private final GoogleCloudDatalabelingV1beta1PdfInstructionResponse pdfInstruction;
    /**
     * @return Last update time of instruction.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetInstructionResult(
        @CustomType.Parameter("blockingResources") List<String> blockingResources,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("csvInstruction") GoogleCloudDatalabelingV1beta1CsvInstructionResponse csvInstruction,
        @CustomType.Parameter("dataType") String dataType,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("pdfInstruction") GoogleCloudDatalabelingV1beta1PdfInstructionResponse pdfInstruction,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.blockingResources = blockingResources;
        this.createTime = createTime;
        this.csvInstruction = csvInstruction;
        this.dataType = dataType;
        this.description = description;
        this.displayName = displayName;
        this.name = name;
        this.pdfInstruction = pdfInstruction;
        this.updateTime = updateTime;
    }

    /**
     * @return The names of any related resources that are blocking changes to the instruction.
     * 
     */
    public List<String> blockingResources() {
        return this.blockingResources;
    }
    /**
     * @return Creation time of instruction.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     * @deprecated
     * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     */
    @Deprecated /* Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data. */
    public GoogleCloudDatalabelingV1beta1CsvInstructionResponse csvInstruction() {
        return this.csvInstruction;
    }
    /**
     * @return The data type of this instruction.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the instruction. Maximum of 64 characters.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Instruction resource name, format: projects/{project_id}/instructions/{instruction_id}
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Instruction from a PDF document. The PDF should be in a Cloud Storage bucket.
     * 
     */
    public GoogleCloudDatalabelingV1beta1PdfInstructionResponse pdfInstruction() {
        return this.pdfInstruction;
    }
    /**
     * @return Last update time of instruction.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstructionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> blockingResources;
        private String createTime;
        private GoogleCloudDatalabelingV1beta1CsvInstructionResponse csvInstruction;
        private String dataType;
        private String description;
        private String displayName;
        private String name;
        private GoogleCloudDatalabelingV1beta1PdfInstructionResponse pdfInstruction;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstructionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockingResources = defaults.blockingResources;
    	      this.createTime = defaults.createTime;
    	      this.csvInstruction = defaults.csvInstruction;
    	      this.dataType = defaults.dataType;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.pdfInstruction = defaults.pdfInstruction;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder blockingResources(List<String> blockingResources) {
            this.blockingResources = Objects.requireNonNull(blockingResources);
            return this;
        }
        public Builder blockingResources(String... blockingResources) {
            return blockingResources(List.of(blockingResources));
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder csvInstruction(GoogleCloudDatalabelingV1beta1CsvInstructionResponse csvInstruction) {
            this.csvInstruction = Objects.requireNonNull(csvInstruction);
            return this;
        }
        public Builder dataType(String dataType) {
            this.dataType = Objects.requireNonNull(dataType);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder pdfInstruction(GoogleCloudDatalabelingV1beta1PdfInstructionResponse pdfInstruction) {
            this.pdfInstruction = Objects.requireNonNull(pdfInstruction);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetInstructionResult build() {
            return new GetInstructionResult(blockingResources, createTime, csvInstruction, dataType, description, displayName, name, pdfInstruction, updateTime);
        }
    }
}
