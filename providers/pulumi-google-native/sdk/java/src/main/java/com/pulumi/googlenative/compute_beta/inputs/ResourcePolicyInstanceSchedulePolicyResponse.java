// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.inputs.ResourcePolicyInstanceSchedulePolicyScheduleResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
 * 
 */
public final class ResourcePolicyInstanceSchedulePolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResourcePolicyInstanceSchedulePolicyResponse Empty = new ResourcePolicyInstanceSchedulePolicyResponse();

    /**
     * The expiration time of the schedule. The timestamp is an RFC3339 string.
     * 
     */
    @Import(name="expirationTime", required=true)
    private String expirationTime;

    /**
     * @return The expiration time of the schedule. The timestamp is an RFC3339 string.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }

    /**
     * The start time of the schedule. The timestamp is an RFC3339 string.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The start time of the schedule. The timestamp is an RFC3339 string.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
     * 
     */
    @Import(name="timeZone", required=true)
    private String timeZone;

    /**
     * @return Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Specifies the schedule for starting instances.
     * 
     */
    @Import(name="vmStartSchedule", required=true)
    private ResourcePolicyInstanceSchedulePolicyScheduleResponse vmStartSchedule;

    /**
     * @return Specifies the schedule for starting instances.
     * 
     */
    public ResourcePolicyInstanceSchedulePolicyScheduleResponse vmStartSchedule() {
        return this.vmStartSchedule;
    }

    /**
     * Specifies the schedule for stopping instances.
     * 
     */
    @Import(name="vmStopSchedule", required=true)
    private ResourcePolicyInstanceSchedulePolicyScheduleResponse vmStopSchedule;

    /**
     * @return Specifies the schedule for stopping instances.
     * 
     */
    public ResourcePolicyInstanceSchedulePolicyScheduleResponse vmStopSchedule() {
        return this.vmStopSchedule;
    }

    private ResourcePolicyInstanceSchedulePolicyResponse() {}

    private ResourcePolicyInstanceSchedulePolicyResponse(ResourcePolicyInstanceSchedulePolicyResponse $) {
        this.expirationTime = $.expirationTime;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
        this.vmStartSchedule = $.vmStartSchedule;
        this.vmStopSchedule = $.vmStopSchedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicyInstanceSchedulePolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicyInstanceSchedulePolicyResponse $;

        public Builder() {
            $ = new ResourcePolicyInstanceSchedulePolicyResponse();
        }

        public Builder(ResourcePolicyInstanceSchedulePolicyResponse defaults) {
            $ = new ResourcePolicyInstanceSchedulePolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param expirationTime The expiration time of the schedule. The timestamp is an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param startTime The start time of the schedule. The timestamp is an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param timeZone Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param vmStartSchedule Specifies the schedule for starting instances.
         * 
         * @return builder
         * 
         */
        public Builder vmStartSchedule(ResourcePolicyInstanceSchedulePolicyScheduleResponse vmStartSchedule) {
            $.vmStartSchedule = vmStartSchedule;
            return this;
        }

        /**
         * @param vmStopSchedule Specifies the schedule for stopping instances.
         * 
         * @return builder
         * 
         */
        public Builder vmStopSchedule(ResourcePolicyInstanceSchedulePolicyScheduleResponse vmStopSchedule) {
            $.vmStopSchedule = vmStopSchedule;
            return this;
        }

        public ResourcePolicyInstanceSchedulePolicyResponse build() {
            $.expirationTime = Objects.requireNonNull($.expirationTime, "expected parameter 'expirationTime' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            $.vmStartSchedule = Objects.requireNonNull($.vmStartSchedule, "expected parameter 'vmStartSchedule' to be non-null");
            $.vmStopSchedule = Objects.requireNonNull($.vmStopSchedule, "expected parameter 'vmStopSchedule' to be non-null");
            return $;
        }
    }

}
