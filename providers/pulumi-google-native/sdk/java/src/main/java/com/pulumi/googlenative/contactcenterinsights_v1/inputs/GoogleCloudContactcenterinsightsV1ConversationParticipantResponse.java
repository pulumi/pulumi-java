// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.contactcenterinsights_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The call participant speaking for a given utterance.
 * 
 */
public final class GoogleCloudContactcenterinsightsV1ConversationParticipantResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudContactcenterinsightsV1ConversationParticipantResponse Empty = new GoogleCloudContactcenterinsightsV1ConversationParticipantResponse();

    /**
     * The name of the participant provided by Dialogflow. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
     * 
     */
    @Import(name="dialogflowParticipantName", required=true)
    private String dialogflowParticipantName;

    /**
     * @return The name of the participant provided by Dialogflow. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
     * 
     */
    public String dialogflowParticipantName() {
        return this.dialogflowParticipantName;
    }

    /**
     * Obfuscated user ID from Dialogflow.
     * 
     */
    @Import(name="obfuscatedExternalUserId", required=true)
    private String obfuscatedExternalUserId;

    /**
     * @return Obfuscated user ID from Dialogflow.
     * 
     */
    public String obfuscatedExternalUserId() {
        return this.obfuscatedExternalUserId;
    }

    /**
     * The role of the participant.
     * 
     */
    @Import(name="role", required=true)
    private String role;

    /**
     * @return The role of the participant.
     * 
     */
    public String role() {
        return this.role;
    }

    /**
     * A user-specified ID representing the participant.
     * 
     */
    @Import(name="userId", required=true)
    private String userId;

    /**
     * @return A user-specified ID representing the participant.
     * 
     */
    public String userId() {
        return this.userId;
    }

    private GoogleCloudContactcenterinsightsV1ConversationParticipantResponse() {}

    private GoogleCloudContactcenterinsightsV1ConversationParticipantResponse(GoogleCloudContactcenterinsightsV1ConversationParticipantResponse $) {
        this.dialogflowParticipantName = $.dialogflowParticipantName;
        this.obfuscatedExternalUserId = $.obfuscatedExternalUserId;
        this.role = $.role;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudContactcenterinsightsV1ConversationParticipantResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudContactcenterinsightsV1ConversationParticipantResponse $;

        public Builder() {
            $ = new GoogleCloudContactcenterinsightsV1ConversationParticipantResponse();
        }

        public Builder(GoogleCloudContactcenterinsightsV1ConversationParticipantResponse defaults) {
            $ = new GoogleCloudContactcenterinsightsV1ConversationParticipantResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dialogflowParticipantName The name of the participant provided by Dialogflow. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
         * 
         * @return builder
         * 
         */
        public Builder dialogflowParticipantName(String dialogflowParticipantName) {
            $.dialogflowParticipantName = dialogflowParticipantName;
            return this;
        }

        /**
         * @param obfuscatedExternalUserId Obfuscated user ID from Dialogflow.
         * 
         * @return builder
         * 
         */
        public Builder obfuscatedExternalUserId(String obfuscatedExternalUserId) {
            $.obfuscatedExternalUserId = obfuscatedExternalUserId;
            return this;
        }

        /**
         * @param role The role of the participant.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            $.role = role;
            return this;
        }

        /**
         * @param userId A user-specified ID representing the participant.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            $.userId = userId;
            return this;
        }

        public GoogleCloudContactcenterinsightsV1ConversationParticipantResponse build() {
            $.dialogflowParticipantName = Objects.requireNonNull($.dialogflowParticipantName, "expected parameter 'dialogflowParticipantName' to be non-null");
            $.obfuscatedExternalUserId = Objects.requireNonNull($.obfuscatedExternalUserId, "expected parameter 'obfuscatedExternalUserId' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            return $;
        }
    }

}
