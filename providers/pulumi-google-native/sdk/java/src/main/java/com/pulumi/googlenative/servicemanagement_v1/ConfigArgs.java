// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.servicemanagement_v1.inputs.ApiArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.AuthenticationArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.BackendArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.BillingArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.ContextArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.ControlArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.CustomErrorArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.DocumentationArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.EndpointArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.EnumArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.HttpArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.LogDescriptorArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.LoggingArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.MetricDescriptorArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.MonitoredResourceDescriptorArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.MonitoringArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.QuotaArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SystemParametersArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.TypeArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.UsageArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigArgs Empty = new ConfigArgs();

    /**
     * A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
     * 
     */
    @Import(name="apis")
      private final @Nullable Output<List<ApiArgs>> apis;

    public Output<List<ApiArgs>> apis() {
        return this.apis == null ? Codegen.empty() : this.apis;
    }

    /**
     * Auth configuration.
     * 
     */
    @Import(name="authentication")
      private final @Nullable Output<AuthenticationArgs> authentication;

    public Output<AuthenticationArgs> authentication() {
        return this.authentication == null ? Codegen.empty() : this.authentication;
    }

    /**
     * API backend configuration.
     * 
     */
    @Import(name="backend")
      private final @Nullable Output<BackendArgs> backend;

    public Output<BackendArgs> backend() {
        return this.backend == null ? Codegen.empty() : this.backend;
    }

    /**
     * Billing configuration.
     * 
     */
    @Import(name="billing")
      private final @Nullable Output<BillingArgs> billing;

    public Output<BillingArgs> billing() {
        return this.billing == null ? Codegen.empty() : this.billing;
    }

    /**
     * Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.
     * 
     */
    @Import(name="configVersion")
      private final @Nullable Output<Integer> configVersion;

    public Output<Integer> configVersion() {
        return this.configVersion == null ? Codegen.empty() : this.configVersion;
    }

    /**
     * Context configuration.
     * 
     */
    @Import(name="context")
      private final @Nullable Output<ContextArgs> context;

    public Output<ContextArgs> context() {
        return this.context == null ? Codegen.empty() : this.context;
    }

    /**
     * Configuration for the service control plane.
     * 
     */
    @Import(name="control")
      private final @Nullable Output<ControlArgs> control;

    public Output<ControlArgs> control() {
        return this.control == null ? Codegen.empty() : this.control;
    }

    /**
     * Custom error configuration.
     * 
     */
    @Import(name="customError")
      private final @Nullable Output<CustomErrorArgs> customError;

    public Output<CustomErrorArgs> customError() {
        return this.customError == null ? Codegen.empty() : this.customError;
    }

    /**
     * Additional API documentation.
     * 
     */
    @Import(name="documentation")
      private final @Nullable Output<DocumentationArgs> documentation;

    public Output<DocumentationArgs> documentation() {
        return this.documentation == null ? Codegen.empty() : this.documentation;
    }

    /**
     * Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
     * 
     */
    @Import(name="endpoints")
      private final @Nullable Output<List<EndpointArgs>> endpoints;

    public Output<List<EndpointArgs>> endpoints() {
        return this.endpoints == null ? Codegen.empty() : this.endpoints;
    }

    /**
     * A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
     * 
     */
    @Import(name="enums")
      private final @Nullable Output<List<EnumArgs>> enums;

    public Output<List<EnumArgs>> enums() {
        return this.enums == null ? Codegen.empty() : this.enums;
    }

    /**
     * HTTP configuration.
     * 
     */
    @Import(name="http")
      private final @Nullable Output<HttpArgs> http;

    public Output<HttpArgs> http() {
        return this.http == null ? Codegen.empty() : this.http;
    }

    /**
     * A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Logging configuration.
     * 
     */
    @Import(name="logging")
      private final @Nullable Output<LoggingArgs> logging;

    public Output<LoggingArgs> logging() {
        return this.logging == null ? Codegen.empty() : this.logging;
    }

    /**
     * Defines the logs used by this service.
     * 
     */
    @Import(name="logs")
      private final @Nullable Output<List<LogDescriptorArgs>> logs;

    public Output<List<LogDescriptorArgs>> logs() {
        return this.logs == null ? Codegen.empty() : this.logs;
    }

    /**
     * Defines the metrics used by this service.
     * 
     */
    @Import(name="metrics")
      private final @Nullable Output<List<MetricDescriptorArgs>> metrics;

    public Output<List<MetricDescriptorArgs>> metrics() {
        return this.metrics == null ? Codegen.empty() : this.metrics;
    }

    /**
     * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
     * 
     */
    @Import(name="monitoredResources")
      private final @Nullable Output<List<MonitoredResourceDescriptorArgs>> monitoredResources;

    public Output<List<MonitoredResourceDescriptorArgs>> monitoredResources() {
        return this.monitoredResources == null ? Codegen.empty() : this.monitoredResources;
    }

    /**
     * Monitoring configuration.
     * 
     */
    @Import(name="monitoring")
      private final @Nullable Output<MonitoringArgs> monitoring;

    public Output<MonitoringArgs> monitoring() {
        return this.monitoring == null ? Codegen.empty() : this.monitoring;
    }

    /**
     * The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The Google project that owns this service.
     * 
     */
    @Import(name="producerProjectId")
      private final @Nullable Output<String> producerProjectId;

    public Output<String> producerProjectId() {
        return this.producerProjectId == null ? Codegen.empty() : this.producerProjectId;
    }

    /**
     * Quota configuration.
     * 
     */
    @Import(name="quota")
      private final @Nullable Output<QuotaArgs> quota;

    public Output<QuotaArgs> quota() {
        return this.quota == null ? Codegen.empty() : this.quota;
    }

    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * System parameter configuration.
     * 
     */
    @Import(name="systemParameters")
      private final @Nullable Output<SystemParametersArgs> systemParameters;

    public Output<SystemParametersArgs> systemParameters() {
        return this.systemParameters == null ? Codegen.empty() : this.systemParameters;
    }

    /**
     * A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
     * 
     */
    @Import(name="systemTypes")
      private final @Nullable Output<List<TypeArgs>> systemTypes;

    public Output<List<TypeArgs>> systemTypes() {
        return this.systemTypes == null ? Codegen.empty() : this.systemTypes;
    }

    /**
     * The product title for this service, it is the name displayed in Google Cloud Console.
     * 
     */
    @Import(name="title")
      private final @Nullable Output<String> title;

    public Output<String> title() {
        return this.title == null ? Codegen.empty() : this.title;
    }

    /**
     * A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
     * 
     */
    @Import(name="types")
      private final @Nullable Output<List<TypeArgs>> types;

    public Output<List<TypeArgs>> types() {
        return this.types == null ? Codegen.empty() : this.types;
    }

    /**
     * Configuration controlling usage of this service.
     * 
     */
    @Import(name="usage")
      private final @Nullable Output<UsageArgs> usage;

    public Output<UsageArgs> usage() {
        return this.usage == null ? Codegen.empty() : this.usage;
    }

    public ConfigArgs(
        @Nullable Output<List<ApiArgs>> apis,
        @Nullable Output<AuthenticationArgs> authentication,
        @Nullable Output<BackendArgs> backend,
        @Nullable Output<BillingArgs> billing,
        @Nullable Output<Integer> configVersion,
        @Nullable Output<ContextArgs> context,
        @Nullable Output<ControlArgs> control,
        @Nullable Output<CustomErrorArgs> customError,
        @Nullable Output<DocumentationArgs> documentation,
        @Nullable Output<List<EndpointArgs>> endpoints,
        @Nullable Output<List<EnumArgs>> enums,
        @Nullable Output<HttpArgs> http,
        @Nullable Output<String> id,
        @Nullable Output<LoggingArgs> logging,
        @Nullable Output<List<LogDescriptorArgs>> logs,
        @Nullable Output<List<MetricDescriptorArgs>> metrics,
        @Nullable Output<List<MonitoredResourceDescriptorArgs>> monitoredResources,
        @Nullable Output<MonitoringArgs> monitoring,
        @Nullable Output<String> name,
        @Nullable Output<String> producerProjectId,
        @Nullable Output<QuotaArgs> quota,
        Output<String> serviceName,
        @Nullable Output<SystemParametersArgs> systemParameters,
        @Nullable Output<List<TypeArgs>> systemTypes,
        @Nullable Output<String> title,
        @Nullable Output<List<TypeArgs>> types,
        @Nullable Output<UsageArgs> usage) {
        this.apis = apis;
        this.authentication = authentication;
        this.backend = backend;
        this.billing = billing;
        this.configVersion = configVersion;
        this.context = context;
        this.control = control;
        this.customError = customError;
        this.documentation = documentation;
        this.endpoints = endpoints;
        this.enums = enums;
        this.http = http;
        this.id = id;
        this.logging = logging;
        this.logs = logs;
        this.metrics = metrics;
        this.monitoredResources = monitoredResources;
        this.monitoring = monitoring;
        this.name = name;
        this.producerProjectId = producerProjectId;
        this.quota = quota;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.systemParameters = systemParameters;
        this.systemTypes = systemTypes;
        this.title = title;
        this.types = types;
        this.usage = usage;
    }

    private ConfigArgs() {
        this.apis = Codegen.empty();
        this.authentication = Codegen.empty();
        this.backend = Codegen.empty();
        this.billing = Codegen.empty();
        this.configVersion = Codegen.empty();
        this.context = Codegen.empty();
        this.control = Codegen.empty();
        this.customError = Codegen.empty();
        this.documentation = Codegen.empty();
        this.endpoints = Codegen.empty();
        this.enums = Codegen.empty();
        this.http = Codegen.empty();
        this.id = Codegen.empty();
        this.logging = Codegen.empty();
        this.logs = Codegen.empty();
        this.metrics = Codegen.empty();
        this.monitoredResources = Codegen.empty();
        this.monitoring = Codegen.empty();
        this.name = Codegen.empty();
        this.producerProjectId = Codegen.empty();
        this.quota = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.systemParameters = Codegen.empty();
        this.systemTypes = Codegen.empty();
        this.title = Codegen.empty();
        this.types = Codegen.empty();
        this.usage = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ApiArgs>> apis;
        private @Nullable Output<AuthenticationArgs> authentication;
        private @Nullable Output<BackendArgs> backend;
        private @Nullable Output<BillingArgs> billing;
        private @Nullable Output<Integer> configVersion;
        private @Nullable Output<ContextArgs> context;
        private @Nullable Output<ControlArgs> control;
        private @Nullable Output<CustomErrorArgs> customError;
        private @Nullable Output<DocumentationArgs> documentation;
        private @Nullable Output<List<EndpointArgs>> endpoints;
        private @Nullable Output<List<EnumArgs>> enums;
        private @Nullable Output<HttpArgs> http;
        private @Nullable Output<String> id;
        private @Nullable Output<LoggingArgs> logging;
        private @Nullable Output<List<LogDescriptorArgs>> logs;
        private @Nullable Output<List<MetricDescriptorArgs>> metrics;
        private @Nullable Output<List<MonitoredResourceDescriptorArgs>> monitoredResources;
        private @Nullable Output<MonitoringArgs> monitoring;
        private @Nullable Output<String> name;
        private @Nullable Output<String> producerProjectId;
        private @Nullable Output<QuotaArgs> quota;
        private Output<String> serviceName;
        private @Nullable Output<SystemParametersArgs> systemParameters;
        private @Nullable Output<List<TypeArgs>> systemTypes;
        private @Nullable Output<String> title;
        private @Nullable Output<List<TypeArgs>> types;
        private @Nullable Output<UsageArgs> usage;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apis = defaults.apis;
    	      this.authentication = defaults.authentication;
    	      this.backend = defaults.backend;
    	      this.billing = defaults.billing;
    	      this.configVersion = defaults.configVersion;
    	      this.context = defaults.context;
    	      this.control = defaults.control;
    	      this.customError = defaults.customError;
    	      this.documentation = defaults.documentation;
    	      this.endpoints = defaults.endpoints;
    	      this.enums = defaults.enums;
    	      this.http = defaults.http;
    	      this.id = defaults.id;
    	      this.logging = defaults.logging;
    	      this.logs = defaults.logs;
    	      this.metrics = defaults.metrics;
    	      this.monitoredResources = defaults.monitoredResources;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.producerProjectId = defaults.producerProjectId;
    	      this.quota = defaults.quota;
    	      this.serviceName = defaults.serviceName;
    	      this.systemParameters = defaults.systemParameters;
    	      this.systemTypes = defaults.systemTypes;
    	      this.title = defaults.title;
    	      this.types = defaults.types;
    	      this.usage = defaults.usage;
        }

        public Builder apis(@Nullable Output<List<ApiArgs>> apis) {
            this.apis = apis;
            return this;
        }
        public Builder apis(@Nullable List<ApiArgs> apis) {
            this.apis = Codegen.ofNullable(apis);
            return this;
        }
        public Builder apis(ApiArgs... apis) {
            return apis(List.of(apis));
        }
        public Builder authentication(@Nullable Output<AuthenticationArgs> authentication) {
            this.authentication = authentication;
            return this;
        }
        public Builder authentication(@Nullable AuthenticationArgs authentication) {
            this.authentication = Codegen.ofNullable(authentication);
            return this;
        }
        public Builder backend(@Nullable Output<BackendArgs> backend) {
            this.backend = backend;
            return this;
        }
        public Builder backend(@Nullable BackendArgs backend) {
            this.backend = Codegen.ofNullable(backend);
            return this;
        }
        public Builder billing(@Nullable Output<BillingArgs> billing) {
            this.billing = billing;
            return this;
        }
        public Builder billing(@Nullable BillingArgs billing) {
            this.billing = Codegen.ofNullable(billing);
            return this;
        }
        public Builder configVersion(@Nullable Output<Integer> configVersion) {
            this.configVersion = configVersion;
            return this;
        }
        public Builder configVersion(@Nullable Integer configVersion) {
            this.configVersion = Codegen.ofNullable(configVersion);
            return this;
        }
        public Builder context(@Nullable Output<ContextArgs> context) {
            this.context = context;
            return this;
        }
        public Builder context(@Nullable ContextArgs context) {
            this.context = Codegen.ofNullable(context);
            return this;
        }
        public Builder control(@Nullable Output<ControlArgs> control) {
            this.control = control;
            return this;
        }
        public Builder control(@Nullable ControlArgs control) {
            this.control = Codegen.ofNullable(control);
            return this;
        }
        public Builder customError(@Nullable Output<CustomErrorArgs> customError) {
            this.customError = customError;
            return this;
        }
        public Builder customError(@Nullable CustomErrorArgs customError) {
            this.customError = Codegen.ofNullable(customError);
            return this;
        }
        public Builder documentation(@Nullable Output<DocumentationArgs> documentation) {
            this.documentation = documentation;
            return this;
        }
        public Builder documentation(@Nullable DocumentationArgs documentation) {
            this.documentation = Codegen.ofNullable(documentation);
            return this;
        }
        public Builder endpoints(@Nullable Output<List<EndpointArgs>> endpoints) {
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(@Nullable List<EndpointArgs> endpoints) {
            this.endpoints = Codegen.ofNullable(endpoints);
            return this;
        }
        public Builder endpoints(EndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }
        public Builder enums(@Nullable Output<List<EnumArgs>> enums) {
            this.enums = enums;
            return this;
        }
        public Builder enums(@Nullable List<EnumArgs> enums) {
            this.enums = Codegen.ofNullable(enums);
            return this;
        }
        public Builder enums(EnumArgs... enums) {
            return enums(List.of(enums));
        }
        public Builder http(@Nullable Output<HttpArgs> http) {
            this.http = http;
            return this;
        }
        public Builder http(@Nullable HttpArgs http) {
            this.http = Codegen.ofNullable(http);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder logging(@Nullable Output<LoggingArgs> logging) {
            this.logging = logging;
            return this;
        }
        public Builder logging(@Nullable LoggingArgs logging) {
            this.logging = Codegen.ofNullable(logging);
            return this;
        }
        public Builder logs(@Nullable Output<List<LogDescriptorArgs>> logs) {
            this.logs = logs;
            return this;
        }
        public Builder logs(@Nullable List<LogDescriptorArgs> logs) {
            this.logs = Codegen.ofNullable(logs);
            return this;
        }
        public Builder logs(LogDescriptorArgs... logs) {
            return logs(List.of(logs));
        }
        public Builder metrics(@Nullable Output<List<MetricDescriptorArgs>> metrics) {
            this.metrics = metrics;
            return this;
        }
        public Builder metrics(@Nullable List<MetricDescriptorArgs> metrics) {
            this.metrics = Codegen.ofNullable(metrics);
            return this;
        }
        public Builder metrics(MetricDescriptorArgs... metrics) {
            return metrics(List.of(metrics));
        }
        public Builder monitoredResources(@Nullable Output<List<MonitoredResourceDescriptorArgs>> monitoredResources) {
            this.monitoredResources = monitoredResources;
            return this;
        }
        public Builder monitoredResources(@Nullable List<MonitoredResourceDescriptorArgs> monitoredResources) {
            this.monitoredResources = Codegen.ofNullable(monitoredResources);
            return this;
        }
        public Builder monitoredResources(MonitoredResourceDescriptorArgs... monitoredResources) {
            return monitoredResources(List.of(monitoredResources));
        }
        public Builder monitoring(@Nullable Output<MonitoringArgs> monitoring) {
            this.monitoring = monitoring;
            return this;
        }
        public Builder monitoring(@Nullable MonitoringArgs monitoring) {
            this.monitoring = Codegen.ofNullable(monitoring);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder producerProjectId(@Nullable Output<String> producerProjectId) {
            this.producerProjectId = producerProjectId;
            return this;
        }
        public Builder producerProjectId(@Nullable String producerProjectId) {
            this.producerProjectId = Codegen.ofNullable(producerProjectId);
            return this;
        }
        public Builder quota(@Nullable Output<QuotaArgs> quota) {
            this.quota = quota;
            return this;
        }
        public Builder quota(@Nullable QuotaArgs quota) {
            this.quota = Codegen.ofNullable(quota);
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder systemParameters(@Nullable Output<SystemParametersArgs> systemParameters) {
            this.systemParameters = systemParameters;
            return this;
        }
        public Builder systemParameters(@Nullable SystemParametersArgs systemParameters) {
            this.systemParameters = Codegen.ofNullable(systemParameters);
            return this;
        }
        public Builder systemTypes(@Nullable Output<List<TypeArgs>> systemTypes) {
            this.systemTypes = systemTypes;
            return this;
        }
        public Builder systemTypes(@Nullable List<TypeArgs> systemTypes) {
            this.systemTypes = Codegen.ofNullable(systemTypes);
            return this;
        }
        public Builder systemTypes(TypeArgs... systemTypes) {
            return systemTypes(List.of(systemTypes));
        }
        public Builder title(@Nullable Output<String> title) {
            this.title = title;
            return this;
        }
        public Builder title(@Nullable String title) {
            this.title = Codegen.ofNullable(title);
            return this;
        }
        public Builder types(@Nullable Output<List<TypeArgs>> types) {
            this.types = types;
            return this;
        }
        public Builder types(@Nullable List<TypeArgs> types) {
            this.types = Codegen.ofNullable(types);
            return this;
        }
        public Builder types(TypeArgs... types) {
            return types(List.of(types));
        }
        public Builder usage(@Nullable Output<UsageArgs> usage) {
            this.usage = usage;
            return this;
        }
        public Builder usage(@Nullable UsageArgs usage) {
            this.usage = Codegen.ofNullable(usage);
            return this;
        }        public ConfigArgs build() {
            return new ConfigArgs(apis, authentication, backend, billing, configVersion, context, control, customError, documentation, endpoints, enums, http, id, logging, logs, metrics, monitoredResources, monitoring, name, producerProjectId, quota, serviceName, systemParameters, systemTypes, title, types, usage);
        }
    }
}
