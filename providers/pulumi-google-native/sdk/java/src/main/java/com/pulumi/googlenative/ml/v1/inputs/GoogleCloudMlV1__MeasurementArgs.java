// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.ml.v1.inputs.GoogleCloudMlV1_Measurement_MetricArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A message representing a measurement.
 * 
 */
public final class GoogleCloudMlV1__MeasurementArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__MeasurementArgs Empty = new GoogleCloudMlV1__MeasurementArgs();

    /**
     * Provides a list of metrics that act as inputs into the objective function.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<GoogleCloudMlV1_Measurement_MetricArgs>> metrics;

    /**
     * @return Provides a list of metrics that act as inputs into the objective function.
     * 
     */
    public Optional<Output<List<GoogleCloudMlV1_Measurement_MetricArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * The number of steps a machine learning model has been trained for. Must be non-negative.
     * 
     */
    @Import(name="stepCount")
    private @Nullable Output<String> stepCount;

    /**
     * @return The number of steps a machine learning model has been trained for. Must be non-negative.
     * 
     */
    public Optional<Output<String>> stepCount() {
        return Optional.ofNullable(this.stepCount);
    }

    private GoogleCloudMlV1__MeasurementArgs() {}

    private GoogleCloudMlV1__MeasurementArgs(GoogleCloudMlV1__MeasurementArgs $) {
        this.metrics = $.metrics;
        this.stepCount = $.stepCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1__MeasurementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__MeasurementArgs $;

        public Builder() {
            $ = new GoogleCloudMlV1__MeasurementArgs();
        }

        public Builder(GoogleCloudMlV1__MeasurementArgs defaults) {
            $ = new GoogleCloudMlV1__MeasurementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metrics Provides a list of metrics that act as inputs into the objective function.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<List<GoogleCloudMlV1_Measurement_MetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics Provides a list of metrics that act as inputs into the objective function.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<GoogleCloudMlV1_Measurement_MetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics Provides a list of metrics that act as inputs into the objective function.
         * 
         * @return builder
         * 
         */
        public Builder metrics(GoogleCloudMlV1_Measurement_MetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param stepCount The number of steps a machine learning model has been trained for. Must be non-negative.
         * 
         * @return builder
         * 
         */
        public Builder stepCount(@Nullable Output<String> stepCount) {
            $.stepCount = stepCount;
            return this;
        }

        /**
         * @param stepCount The number of steps a machine learning model has been trained for. Must be non-negative.
         * 
         * @return builder
         * 
         */
        public Builder stepCount(String stepCount) {
            return stepCount(Output.of(stepCount));
        }

        public GoogleCloudMlV1__MeasurementArgs build() {
            return $;
        }
    }

}
