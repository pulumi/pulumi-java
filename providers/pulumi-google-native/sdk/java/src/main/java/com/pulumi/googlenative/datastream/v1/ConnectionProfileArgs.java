// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream.v1.inputs.ForwardSshTunnelConnectivityArgs;
import com.pulumi.googlenative.datastream.v1.inputs.GcsProfileArgs;
import com.pulumi.googlenative.datastream.v1.inputs.MysqlProfileArgs;
import com.pulumi.googlenative.datastream.v1.inputs.OracleProfileArgs;
import com.pulumi.googlenative.datastream.v1.inputs.PrivateConnectivityArgs;
import com.pulumi.googlenative.datastream.v1.inputs.StaticServiceIpConnectivityArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionProfileArgs Empty = new ConnectionProfileArgs();

    /**
     * Required. The connection profile identifier.
     * 
     */
    @Import(name="connectionProfileId", required=true)
    private Output<String> connectionProfileId;

    /**
     * @return Required. The connection profile identifier.
     * 
     */
    public Output<String> connectionProfileId() {
        return this.connectionProfileId;
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Optional. Create the connection profile without validating it.
     * 
     */
    @Import(name="force")
    private @Nullable Output<String> force;

    /**
     * @return Optional. Create the connection profile without validating it.
     * 
     */
    public Optional<Output<String>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Forward SSH tunnel connectivity.
     * 
     */
    @Import(name="forwardSshConnectivity")
    private @Nullable Output<ForwardSshTunnelConnectivityArgs> forwardSshConnectivity;

    /**
     * @return Forward SSH tunnel connectivity.
     * 
     */
    public Optional<Output<ForwardSshTunnelConnectivityArgs>> forwardSshConnectivity() {
        return Optional.ofNullable(this.forwardSshConnectivity);
    }

    /**
     * Cloud Storage ConnectionProfile configuration.
     * 
     */
    @Import(name="gcsProfile")
    private @Nullable Output<GcsProfileArgs> gcsProfile;

    /**
     * @return Cloud Storage ConnectionProfile configuration.
     * 
     */
    public Optional<Output<GcsProfileArgs>> gcsProfile() {
        return Optional.ofNullable(this.gcsProfile);
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * MySQL ConnectionProfile configuration.
     * 
     */
    @Import(name="mysqlProfile")
    private @Nullable Output<MysqlProfileArgs> mysqlProfile;

    /**
     * @return MySQL ConnectionProfile configuration.
     * 
     */
    public Optional<Output<MysqlProfileArgs>> mysqlProfile() {
        return Optional.ofNullable(this.mysqlProfile);
    }

    /**
     * Oracle ConnectionProfile configuration.
     * 
     */
    @Import(name="oracleProfile")
    private @Nullable Output<OracleProfileArgs> oracleProfile;

    /**
     * @return Oracle ConnectionProfile configuration.
     * 
     */
    public Optional<Output<OracleProfileArgs>> oracleProfile() {
        return Optional.ofNullable(this.oracleProfile);
    }

    /**
     * Private connectivity.
     * 
     */
    @Import(name="privateConnectivity")
    private @Nullable Output<PrivateConnectivityArgs> privateConnectivity;

    /**
     * @return Private connectivity.
     * 
     */
    public Optional<Output<PrivateConnectivityArgs>> privateConnectivity() {
        return Optional.ofNullable(this.privateConnectivity);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Static Service IP connectivity.
     * 
     */
    @Import(name="staticServiceIpConnectivity")
    private @Nullable Output<StaticServiceIpConnectivityArgs> staticServiceIpConnectivity;

    /**
     * @return Static Service IP connectivity.
     * 
     */
    public Optional<Output<StaticServiceIpConnectivityArgs>> staticServiceIpConnectivity() {
        return Optional.ofNullable(this.staticServiceIpConnectivity);
    }

    /**
     * Optional. Only validate the connection profile, but don&#39;t create any resources. The default is false.
     * 
     */
    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    /**
     * @return Optional. Only validate the connection profile, but don&#39;t create any resources. The default is false.
     * 
     */
    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private ConnectionProfileArgs() {}

    private ConnectionProfileArgs(ConnectionProfileArgs $) {
        this.connectionProfileId = $.connectionProfileId;
        this.displayName = $.displayName;
        this.force = $.force;
        this.forwardSshConnectivity = $.forwardSshConnectivity;
        this.gcsProfile = $.gcsProfile;
        this.labels = $.labels;
        this.location = $.location;
        this.mysqlProfile = $.mysqlProfile;
        this.oracleProfile = $.oracleProfile;
        this.privateConnectivity = $.privateConnectivity;
        this.project = $.project;
        this.requestId = $.requestId;
        this.staticServiceIpConnectivity = $.staticServiceIpConnectivity;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionProfileArgs $;

        public Builder() {
            $ = new ConnectionProfileArgs();
        }

        public Builder(ConnectionProfileArgs defaults) {
            $ = new ConnectionProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionProfileId Required. The connection profile identifier.
         * 
         * @return builder
         * 
         */
        public Builder connectionProfileId(Output<String> connectionProfileId) {
            $.connectionProfileId = connectionProfileId;
            return this;
        }

        /**
         * @param connectionProfileId Required. The connection profile identifier.
         * 
         * @return builder
         * 
         */
        public Builder connectionProfileId(String connectionProfileId) {
            return connectionProfileId(Output.of(connectionProfileId));
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param force Optional. Create the connection profile without validating it.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<String> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Optional. Create the connection profile without validating it.
         * 
         * @return builder
         * 
         */
        public Builder force(String force) {
            return force(Output.of(force));
        }

        /**
         * @param forwardSshConnectivity Forward SSH tunnel connectivity.
         * 
         * @return builder
         * 
         */
        public Builder forwardSshConnectivity(@Nullable Output<ForwardSshTunnelConnectivityArgs> forwardSshConnectivity) {
            $.forwardSshConnectivity = forwardSshConnectivity;
            return this;
        }

        /**
         * @param forwardSshConnectivity Forward SSH tunnel connectivity.
         * 
         * @return builder
         * 
         */
        public Builder forwardSshConnectivity(ForwardSshTunnelConnectivityArgs forwardSshConnectivity) {
            return forwardSshConnectivity(Output.of(forwardSshConnectivity));
        }

        /**
         * @param gcsProfile Cloud Storage ConnectionProfile configuration.
         * 
         * @return builder
         * 
         */
        public Builder gcsProfile(@Nullable Output<GcsProfileArgs> gcsProfile) {
            $.gcsProfile = gcsProfile;
            return this;
        }

        /**
         * @param gcsProfile Cloud Storage ConnectionProfile configuration.
         * 
         * @return builder
         * 
         */
        public Builder gcsProfile(GcsProfileArgs gcsProfile) {
            return gcsProfile(Output.of(gcsProfile));
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mysqlProfile MySQL ConnectionProfile configuration.
         * 
         * @return builder
         * 
         */
        public Builder mysqlProfile(@Nullable Output<MysqlProfileArgs> mysqlProfile) {
            $.mysqlProfile = mysqlProfile;
            return this;
        }

        /**
         * @param mysqlProfile MySQL ConnectionProfile configuration.
         * 
         * @return builder
         * 
         */
        public Builder mysqlProfile(MysqlProfileArgs mysqlProfile) {
            return mysqlProfile(Output.of(mysqlProfile));
        }

        /**
         * @param oracleProfile Oracle ConnectionProfile configuration.
         * 
         * @return builder
         * 
         */
        public Builder oracleProfile(@Nullable Output<OracleProfileArgs> oracleProfile) {
            $.oracleProfile = oracleProfile;
            return this;
        }

        /**
         * @param oracleProfile Oracle ConnectionProfile configuration.
         * 
         * @return builder
         * 
         */
        public Builder oracleProfile(OracleProfileArgs oracleProfile) {
            return oracleProfile(Output.of(oracleProfile));
        }

        /**
         * @param privateConnectivity Private connectivity.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectivity(@Nullable Output<PrivateConnectivityArgs> privateConnectivity) {
            $.privateConnectivity = privateConnectivity;
            return this;
        }

        /**
         * @param privateConnectivity Private connectivity.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectivity(PrivateConnectivityArgs privateConnectivity) {
            return privateConnectivity(Output.of(privateConnectivity));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param staticServiceIpConnectivity Static Service IP connectivity.
         * 
         * @return builder
         * 
         */
        public Builder staticServiceIpConnectivity(@Nullable Output<StaticServiceIpConnectivityArgs> staticServiceIpConnectivity) {
            $.staticServiceIpConnectivity = staticServiceIpConnectivity;
            return this;
        }

        /**
         * @param staticServiceIpConnectivity Static Service IP connectivity.
         * 
         * @return builder
         * 
         */
        public Builder staticServiceIpConnectivity(StaticServiceIpConnectivityArgs staticServiceIpConnectivity) {
            return staticServiceIpConnectivity(Output.of(staticServiceIpConnectivity));
        }

        /**
         * @param validateOnly Optional. Only validate the connection profile, but don&#39;t create any resources. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        /**
         * @param validateOnly Optional. Only validate the connection profile, but don&#39;t create any resources. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public ConnectionProfileArgs build() {
            $.connectionProfileId = Objects.requireNonNull($.connectionProfileId, "expected parameter 'connectionProfileId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
