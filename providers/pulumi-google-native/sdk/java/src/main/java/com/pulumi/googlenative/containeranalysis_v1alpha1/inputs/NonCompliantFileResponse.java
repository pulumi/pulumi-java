// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Details about files that caused a compliance check to fail.
 * 
 */
public final class NonCompliantFileResponse extends com.pulumi.resources.InvokeArgs {

    public static final NonCompliantFileResponse Empty = new NonCompliantFileResponse();

    /**
     * Command to display the non-compliant files.
     * 
     */
    @Import(name="displayCommand", required=true)
    private String displayCommand;

    public String displayCommand() {
        return this.displayCommand;
    }

    /**
     * display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using &#39;path&#39;. Empty if `display_command` is set.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    /**
     * Explains why a file is non compliant for a CIS check.
     * 
     */
    @Import(name="reason", required=true)
    private String reason;

    public String reason() {
        return this.reason;
    }

    private NonCompliantFileResponse() {}

    private NonCompliantFileResponse(NonCompliantFileResponse $) {
        this.displayCommand = $.displayCommand;
        this.path = $.path;
        this.reason = $.reason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NonCompliantFileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NonCompliantFileResponse $;

        public Builder() {
            $ = new NonCompliantFileResponse();
        }

        public Builder(NonCompliantFileResponse defaults) {
            $ = new NonCompliantFileResponse(Objects.requireNonNull(defaults));
        }

        public Builder displayCommand(String displayCommand) {
            $.displayCommand = displayCommand;
            return this;
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder reason(String reason) {
            $.reason = reason;
            return this;
        }

        public NonCompliantFileResponse build() {
            $.displayCommand = Objects.requireNonNull($.displayCommand, "expected parameter 'displayCommand' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.reason = Objects.requireNonNull($.reason, "expected parameter 'reason' to be non-null");
            return $;
        }
    }

}
