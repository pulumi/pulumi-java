// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The bucket&#39;s retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
 * 
 */
public final class BucketRetentionPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final BucketRetentionPolicyResponse Empty = new BucketRetentionPolicyResponse();

    /**
     * Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
     * 
     */
    @Import(name="effectiveTime", required=true)
    private String effectiveTime;

    public String effectiveTime() {
        return this.effectiveTime;
    }

    /**
     * Once locked, an object retention policy cannot be modified.
     * 
     */
    @Import(name="isLocked", required=true)
    private Boolean isLocked;

    public Boolean isLocked() {
        return this.isLocked;
    }

    /**
     * The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
     * 
     */
    @Import(name="retentionPeriod", required=true)
    private String retentionPeriod;

    public String retentionPeriod() {
        return this.retentionPeriod;
    }

    private BucketRetentionPolicyResponse() {}

    private BucketRetentionPolicyResponse(BucketRetentionPolicyResponse $) {
        this.effectiveTime = $.effectiveTime;
        this.isLocked = $.isLocked;
        this.retentionPeriod = $.retentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRetentionPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRetentionPolicyResponse $;

        public Builder() {
            $ = new BucketRetentionPolicyResponse();
        }

        public Builder(BucketRetentionPolicyResponse defaults) {
            $ = new BucketRetentionPolicyResponse(Objects.requireNonNull(defaults));
        }

        public Builder effectiveTime(String effectiveTime) {
            $.effectiveTime = effectiveTime;
            return this;
        }

        public Builder isLocked(Boolean isLocked) {
            $.isLocked = isLocked;
            return this;
        }

        public Builder retentionPeriod(String retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        public BucketRetentionPolicyResponse build() {
            $.effectiveTime = Objects.requireNonNull($.effectiveTime, "expected parameter 'effectiveTime' to be non-null");
            $.isLocked = Objects.requireNonNull($.isLocked, "expected parameter 'isLocked' to be non-null");
            $.retentionPeriod = Objects.requireNonNull($.retentionPeriod, "expected parameter 'retentionPeriod' to be non-null");
            return $;
        }
    }

}
