// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.enums.TargetHttpsProxyQuicOverride;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetHttpsProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetHttpsProxyArgs Empty = new TargetHttpsProxyArgs();

    /**
     * Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be restricted by an authorization policy. Refer to the AuthorizationPolicy resource for additional details. authorizationPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. Note: This field currently has no impact.
     * 
     */
    @Import(name="authorizationPolicy")
    private @Nullable Output<String> authorizationPolicy;

    public Optional<Output<String>> authorizationPolicy() {
        return Optional.ofNullable(this.authorizationPolicy);
    }

    /**
     * URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored.
     * 
     */
    @Import(name="certificateMap")
    private @Nullable Output<String> certificateMap;

    public Optional<Output<String>> certificateMap() {
        return Optional.ofNullable(this.certificateMap);
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * URLs to networkservices.HttpFilter resources enabled for xDS clients using this configuration. For example, https://networkservices.googleapis.com/beta/projects/project/locations/ locationhttpFilters/httpFilter Only filters that handle outbound connection and stream events may be specified. These filters work in conjunction with a default set of HTTP filters that may already be configured by Traffic Director. Traffic Director will determine the final location of these filters within xDS configuration based on the name of the HTTP filter. If Traffic Director positions multiple filters at the same location, those filters will be in the same order as specified in this list. httpFilters only applies for loadbalancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details.
     * 
     */
    @Import(name="httpFilters")
    private @Nullable Output<List<String>> httpFilters;

    public Optional<Output<List<String>>> httpFilters() {
        return Optional.ofNullable(this.httpFilters);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
     * 
     */
    @Import(name="proxyBind")
    private @Nullable Output<Boolean> proxyBind;

    public Optional<Output<Boolean>> proxyBind() {
        return Optional.ofNullable(this.proxyBind);
    }

    /**
     * Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn&#39;t use QUIC. - If the quic-override flag is not specified, NONE is implied.
     * 
     */
    @Import(name="quicOverride")
    private @Nullable Output<TargetHttpsProxyQuicOverride> quicOverride;

    public Optional<Output<TargetHttpsProxyQuicOverride>> quicOverride() {
        return Optional.ofNullable(this.quicOverride);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
     * 
     */
    @Import(name="serverTlsPolicy")
    private @Nullable Output<String> serverTlsPolicy;

    public Optional<Output<String>> serverTlsPolicy() {
        return Optional.ofNullable(this.serverTlsPolicy);
    }

    /**
     * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     * 
     */
    @Import(name="sslCertificates")
    private @Nullable Output<List<String>> sslCertificates;

    public Optional<Output<List<String>>> sslCertificates() {
        return Optional.ofNullable(this.sslCertificates);
    }

    /**
     * URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured.
     * 
     */
    @Import(name="sslPolicy")
    private @Nullable Output<String> sslPolicy;

    public Optional<Output<String>> sslPolicy() {
        return Optional.ofNullable(this.sslPolicy);
    }

    /**
     * A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map: - https://www.googleapis.compute/v1/projects/project/global/urlMaps/ url-map - projects/project/global/urlMaps/url-map - global/urlMaps/url-map
     * 
     */
    @Import(name="urlMap")
    private @Nullable Output<String> urlMap;

    public Optional<Output<String>> urlMap() {
        return Optional.ofNullable(this.urlMap);
    }

    private TargetHttpsProxyArgs() {}

    private TargetHttpsProxyArgs(TargetHttpsProxyArgs $) {
        this.authorizationPolicy = $.authorizationPolicy;
        this.certificateMap = $.certificateMap;
        this.description = $.description;
        this.httpFilters = $.httpFilters;
        this.name = $.name;
        this.project = $.project;
        this.proxyBind = $.proxyBind;
        this.quicOverride = $.quicOverride;
        this.requestId = $.requestId;
        this.serverTlsPolicy = $.serverTlsPolicy;
        this.sslCertificates = $.sslCertificates;
        this.sslPolicy = $.sslPolicy;
        this.urlMap = $.urlMap;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetHttpsProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetHttpsProxyArgs $;

        public Builder() {
            $ = new TargetHttpsProxyArgs();
        }

        public Builder(TargetHttpsProxyArgs defaults) {
            $ = new TargetHttpsProxyArgs(Objects.requireNonNull(defaults));
        }

        public Builder authorizationPolicy(@Nullable Output<String> authorizationPolicy) {
            $.authorizationPolicy = authorizationPolicy;
            return this;
        }

        public Builder authorizationPolicy(String authorizationPolicy) {
            return authorizationPolicy(Output.of(authorizationPolicy));
        }

        public Builder certificateMap(@Nullable Output<String> certificateMap) {
            $.certificateMap = certificateMap;
            return this;
        }

        public Builder certificateMap(String certificateMap) {
            return certificateMap(Output.of(certificateMap));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder httpFilters(@Nullable Output<List<String>> httpFilters) {
            $.httpFilters = httpFilters;
            return this;
        }

        public Builder httpFilters(List<String> httpFilters) {
            return httpFilters(Output.of(httpFilters));
        }

        public Builder httpFilters(String... httpFilters) {
            return httpFilters(List.of(httpFilters));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder proxyBind(@Nullable Output<Boolean> proxyBind) {
            $.proxyBind = proxyBind;
            return this;
        }

        public Builder proxyBind(Boolean proxyBind) {
            return proxyBind(Output.of(proxyBind));
        }

        public Builder quicOverride(@Nullable Output<TargetHttpsProxyQuicOverride> quicOverride) {
            $.quicOverride = quicOverride;
            return this;
        }

        public Builder quicOverride(TargetHttpsProxyQuicOverride quicOverride) {
            return quicOverride(Output.of(quicOverride));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder serverTlsPolicy(@Nullable Output<String> serverTlsPolicy) {
            $.serverTlsPolicy = serverTlsPolicy;
            return this;
        }

        public Builder serverTlsPolicy(String serverTlsPolicy) {
            return serverTlsPolicy(Output.of(serverTlsPolicy));
        }

        public Builder sslCertificates(@Nullable Output<List<String>> sslCertificates) {
            $.sslCertificates = sslCertificates;
            return this;
        }

        public Builder sslCertificates(List<String> sslCertificates) {
            return sslCertificates(Output.of(sslCertificates));
        }

        public Builder sslCertificates(String... sslCertificates) {
            return sslCertificates(List.of(sslCertificates));
        }

        public Builder sslPolicy(@Nullable Output<String> sslPolicy) {
            $.sslPolicy = sslPolicy;
            return this;
        }

        public Builder sslPolicy(String sslPolicy) {
            return sslPolicy(Output.of(sslPolicy));
        }

        public Builder urlMap(@Nullable Output<String> urlMap) {
            $.urlMap = urlMap;
            return this;
        }

        public Builder urlMap(String urlMap) {
            return urlMap(Output.of(urlMap));
        }

        public TargetHttpsProxyArgs build() {
            return $;
        }
    }

}
