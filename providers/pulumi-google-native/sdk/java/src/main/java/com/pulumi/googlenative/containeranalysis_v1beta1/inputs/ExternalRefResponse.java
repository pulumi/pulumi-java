// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
 * 
 */
public final class ExternalRefResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExternalRefResponse Empty = new ExternalRefResponse();

    /**
     * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
     * 
     */
    @Import(name="category", required=true)
    private String category;

    public String category() {
        return this.category;
    }

    /**
     * Human-readable information about the purpose and target of the reference
     * 
     */
    @Import(name="comment", required=true)
    private String comment;

    public String comment() {
        return this.comment;
    }

    /**
     * The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
     * 
     */
    @Import(name="locator", required=true)
    private String locator;

    public String locator() {
        return this.locator;
    }

    /**
     * Type of category (e.g. &#39;npm&#39; for the PACKAGE_MANAGER category)
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ExternalRefResponse() {}

    private ExternalRefResponse(ExternalRefResponse $) {
        this.category = $.category;
        this.comment = $.comment;
        this.locator = $.locator;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalRefResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalRefResponse $;

        public Builder() {
            $ = new ExternalRefResponse();
        }

        public Builder(ExternalRefResponse defaults) {
            $ = new ExternalRefResponse(Objects.requireNonNull(defaults));
        }

        public Builder category(String category) {
            $.category = category;
            return this;
        }

        public Builder comment(String comment) {
            $.comment = comment;
            return this;
        }

        public Builder locator(String locator) {
            $.locator = locator;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ExternalRefResponse build() {
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.comment = Objects.requireNonNull($.comment, "expected parameter 'comment' to be non-null");
            $.locator = Objects.requireNonNull($.locator, "expected parameter 'locator' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
