// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.dialogflow.v3.ExperimentArgs;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3ExperimentDefinitionResponse;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3ExperimentResultResponse;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3RolloutConfigResponse;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3RolloutStateResponse;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3VariantsHistoryResponse;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Creates an Experiment in the specified Environment.
 * 
 */
@ResourceType(type="google-native:dialogflow/v3:Experiment")
public class Experiment extends com.pulumi.resources.CustomResource {
    @Export(name="agentId", type=String.class, parameters={})
    private Output<String> agentId;

    public Output<String> agentId() {
        return this.agentId;
    }
    /**
     * Creation time of this experiment.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Creation time of this experiment.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The definition of the experiment.
     * 
     */
    @Export(name="definition", type=GoogleCloudDialogflowCxV3ExperimentDefinitionResponse.class, parameters={})
    private Output<GoogleCloudDialogflowCxV3ExperimentDefinitionResponse> definition;

    /**
     * @return The definition of the experiment.
     * 
     */
    public Output<GoogleCloudDialogflowCxV3ExperimentDefinitionResponse> definition() {
        return this.definition;
    }
    /**
     * The human-readable description of the experiment.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The human-readable description of the experiment.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * End time of this experiment.
     * 
     */
    @Export(name="endTime", type=String.class, parameters={})
    private Output<String> endTime;

    /**
     * @return End time of this experiment.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }
    @Export(name="environmentId", type=String.class, parameters={})
    private Output<String> environmentId;

    public Output<String> environmentId() {
        return this.environmentId;
    }
    /**
     * Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
     * 
     */
    @Export(name="experimentLength", type=String.class, parameters={})
    private Output<String> experimentLength;

    /**
     * @return Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
     * 
     */
    public Output<String> experimentLength() {
        return this.experimentLength;
    }
    /**
     * Last update time of this experiment.
     * 
     */
    @Export(name="lastUpdateTime", type=String.class, parameters={})
    private Output<String> lastUpdateTime;

    /**
     * @return Last update time of this experiment.
     * 
     */
    public Output<String> lastUpdateTime() {
        return this.lastUpdateTime;
    }
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the experiment. Format: projects//locations//agents//environments//experiments/..
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the experiment. Format: projects//locations//agents//environments//experiments/..
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * Inference result of the experiment.
     * 
     */
    @Export(name="result", type=GoogleCloudDialogflowCxV3ExperimentResultResponse.class, parameters={})
    private Output<GoogleCloudDialogflowCxV3ExperimentResultResponse> result;

    /**
     * @return Inference result of the experiment.
     * 
     */
    public Output<GoogleCloudDialogflowCxV3ExperimentResultResponse> result() {
        return this.result;
    }
    /**
     * The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
     * 
     */
    @Export(name="rolloutConfig", type=GoogleCloudDialogflowCxV3RolloutConfigResponse.class, parameters={})
    private Output<GoogleCloudDialogflowCxV3RolloutConfigResponse> rolloutConfig;

    /**
     * @return The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
     * 
     */
    public Output<GoogleCloudDialogflowCxV3RolloutConfigResponse> rolloutConfig() {
        return this.rolloutConfig;
    }
    /**
     * The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
     * 
     */
    @Export(name="rolloutFailureReason", type=String.class, parameters={})
    private Output<String> rolloutFailureReason;

    /**
     * @return The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
     * 
     */
    public Output<String> rolloutFailureReason() {
        return this.rolloutFailureReason;
    }
    /**
     * State of the auto rollout process.
     * 
     */
    @Export(name="rolloutState", type=GoogleCloudDialogflowCxV3RolloutStateResponse.class, parameters={})
    private Output<GoogleCloudDialogflowCxV3RolloutStateResponse> rolloutState;

    /**
     * @return State of the auto rollout process.
     * 
     */
    public Output<GoogleCloudDialogflowCxV3RolloutStateResponse> rolloutState() {
        return this.rolloutState;
    }
    /**
     * Start time of this experiment.
     * 
     */
    @Export(name="startTime", type=String.class, parameters={})
    private Output<String> startTime;

    /**
     * @return Start time of this experiment.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }
    /**
     * The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The history of updates to the experiment variants.
     * 
     */
    @Export(name="variantsHistory", type=List.class, parameters={GoogleCloudDialogflowCxV3VariantsHistoryResponse.class})
    private Output<List<GoogleCloudDialogflowCxV3VariantsHistoryResponse>> variantsHistory;

    /**
     * @return The history of updates to the experiment variants.
     * 
     */
    public Output<List<GoogleCloudDialogflowCxV3VariantsHistoryResponse>> variantsHistory() {
        return this.variantsHistory;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Experiment(String name) {
        this(name, ExperimentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Experiment(String name, ExperimentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Experiment(String name, ExperimentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:dialogflow/v3:Experiment", name, args == null ? ExperimentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Experiment(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:dialogflow/v3:Experiment", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Experiment get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Experiment(name, id, options);
    }
}
