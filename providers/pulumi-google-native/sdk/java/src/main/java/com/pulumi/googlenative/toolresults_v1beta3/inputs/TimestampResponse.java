// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are &#34;smeared&#34; so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 * 
 */
public final class TimestampResponse extends com.pulumi.resources.InvokeArgs {

    public static final TimestampResponse Empty = new TimestampResponse();

    /**
     * Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
     * 
     */
    @Import(name="nanos", required=true)
    private Integer nanos;

    /**
     * @return Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
     * 
     */
    public Integer nanos() {
        return this.nanos;
    }

    /**
     * Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * 
     */
    @Import(name="seconds", required=true)
    private String seconds;

    /**
     * @return Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * 
     */
    public String seconds() {
        return this.seconds;
    }

    private TimestampResponse() {}

    private TimestampResponse(TimestampResponse $) {
        this.nanos = $.nanos;
        this.seconds = $.seconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimestampResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimestampResponse $;

        public Builder() {
            $ = new TimestampResponse();
        }

        public Builder(TimestampResponse defaults) {
            $ = new TimestampResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder nanos(Integer nanos) {
            $.nanos = nanos;
            return this;
        }

        /**
         * @param seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * 
         * @return builder
         * 
         */
        public Builder seconds(String seconds) {
            $.seconds = seconds;
            return this;
        }

        public TimestampResponse build() {
            $.nanos = Objects.requireNonNull($.nanos, "expected parameter 'nanos' to be non-null");
            $.seconds = Objects.requireNonNull($.seconds, "expected parameter 'seconds' to be non-null");
            return $;
        }
    }

}
