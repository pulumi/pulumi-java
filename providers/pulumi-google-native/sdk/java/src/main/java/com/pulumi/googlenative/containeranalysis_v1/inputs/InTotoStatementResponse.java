// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.InTotoProvenanceResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.SlsaProvenanceResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.SubjectResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always &#34;application/vnd.in-toto+json&#34;.
 * 
 */
public final class InTotoStatementResponse extends com.pulumi.resources.InvokeArgs {

    public static final InTotoStatementResponse Empty = new InTotoStatementResponse();

    /**
     * &#34;https://slsa.dev/provenance/v0.1&#34; for SlsaProvenance.
     * 
     */
    @Import(name="predicateType", required=true)
    private String predicateType;

    /**
     * @return &#34;https://slsa.dev/provenance/v0.1&#34; for SlsaProvenance.
     * 
     */
    public String predicateType() {
        return this.predicateType;
    }

    @Import(name="provenance", required=true)
    private InTotoProvenanceResponse provenance;

    public InTotoProvenanceResponse provenance() {
        return this.provenance;
    }

    @Import(name="slsaProvenance", required=true)
    private SlsaProvenanceResponse slsaProvenance;

    public SlsaProvenanceResponse slsaProvenance() {
        return this.slsaProvenance;
    }

    @Import(name="subject", required=true)
    private List<SubjectResponse> subject;

    public List<SubjectResponse> subject() {
        return this.subject;
    }

    /**
     * Always &#34;https://in-toto.io/Statement/v0.1&#34;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Always &#34;https://in-toto.io/Statement/v0.1&#34;.
     * 
     */
    public String type() {
        return this.type;
    }

    private InTotoStatementResponse() {}

    private InTotoStatementResponse(InTotoStatementResponse $) {
        this.predicateType = $.predicateType;
        this.provenance = $.provenance;
        this.slsaProvenance = $.slsaProvenance;
        this.subject = $.subject;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InTotoStatementResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InTotoStatementResponse $;

        public Builder() {
            $ = new InTotoStatementResponse();
        }

        public Builder(InTotoStatementResponse defaults) {
            $ = new InTotoStatementResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param predicateType &#34;https://slsa.dev/provenance/v0.1&#34; for SlsaProvenance.
         * 
         * @return builder
         * 
         */
        public Builder predicateType(String predicateType) {
            $.predicateType = predicateType;
            return this;
        }

        public Builder provenance(InTotoProvenanceResponse provenance) {
            $.provenance = provenance;
            return this;
        }

        public Builder slsaProvenance(SlsaProvenanceResponse slsaProvenance) {
            $.slsaProvenance = slsaProvenance;
            return this;
        }

        public Builder subject(List<SubjectResponse> subject) {
            $.subject = subject;
            return this;
        }

        public Builder subject(SubjectResponse... subject) {
            return subject(List.of(subject));
        }

        /**
         * @param type Always &#34;https://in-toto.io/Statement/v0.1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public InTotoStatementResponse build() {
            $.predicateType = Objects.requireNonNull($.predicateType, "expected parameter 'predicateType' to be non-null");
            $.provenance = Objects.requireNonNull($.provenance, "expected parameter 'provenance' to be non-null");
            $.slsaProvenance = Objects.requireNonNull($.slsaProvenance, "expected parameter 'slsaProvenance' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
