// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Data provided with a pipeline or transform to provide descriptive info.
 * 
 */
public final class DisplayDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final DisplayDataArgs Empty = new DisplayDataArgs();

    /**
     * Contains value if the data is of a boolean type.
     * 
     */
    @Import(name="boolValue")
      private final @Nullable Output<Boolean> boolValue;

    public Output<Boolean> boolValue() {
        return this.boolValue == null ? Codegen.empty() : this.boolValue;
    }

    /**
     * Contains value if the data is of duration type.
     * 
     */
    @Import(name="durationValue")
      private final @Nullable Output<String> durationValue;

    public Output<String> durationValue() {
        return this.durationValue == null ? Codegen.empty() : this.durationValue;
    }

    /**
     * Contains value if the data is of float type.
     * 
     */
    @Import(name="floatValue")
      private final @Nullable Output<Double> floatValue;

    public Output<Double> floatValue() {
        return this.floatValue == null ? Codegen.empty() : this.floatValue;
    }

    /**
     * Contains value if the data is of int64 type.
     * 
     */
    @Import(name="int64Value")
      private final @Nullable Output<String> int64Value;

    public Output<String> int64Value() {
        return this.int64Value == null ? Codegen.empty() : this.int64Value;
    }

    /**
     * Contains value if the data is of java class type.
     * 
     */
    @Import(name="javaClassValue")
      private final @Nullable Output<String> javaClassValue;

    public Output<String> javaClassValue() {
        return this.javaClassValue == null ? Codegen.empty() : this.javaClassValue;
    }

    /**
     * The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
     * 
     */
    @Import(name="key")
      private final @Nullable Output<String> key;

    public Output<String> key() {
        return this.key == null ? Codegen.empty() : this.key;
    }

    /**
     * An optional label to display in a dax UI for the element.
     * 
     */
    @Import(name="label")
      private final @Nullable Output<String> label;

    public Output<String> label() {
        return this.label == null ? Codegen.empty() : this.label;
    }

    /**
     * The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
     * 
     */
    @Import(name="namespace")
      private final @Nullable Output<String> namespace;

    public Output<String> namespace() {
        return this.namespace == null ? Codegen.empty() : this.namespace;
    }

    /**
     * A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
     * 
     */
    @Import(name="shortStrValue")
      private final @Nullable Output<String> shortStrValue;

    public Output<String> shortStrValue() {
        return this.shortStrValue == null ? Codegen.empty() : this.shortStrValue;
    }

    /**
     * Contains value if the data is of string type.
     * 
     */
    @Import(name="strValue")
      private final @Nullable Output<String> strValue;

    public Output<String> strValue() {
        return this.strValue == null ? Codegen.empty() : this.strValue;
    }

    /**
     * Contains value if the data is of timestamp type.
     * 
     */
    @Import(name="timestampValue")
      private final @Nullable Output<String> timestampValue;

    public Output<String> timestampValue() {
        return this.timestampValue == null ? Codegen.empty() : this.timestampValue;
    }

    /**
     * An optional full URL.
     * 
     */
    @Import(name="url")
      private final @Nullable Output<String> url;

    public Output<String> url() {
        return this.url == null ? Codegen.empty() : this.url;
    }

    public DisplayDataArgs(
        @Nullable Output<Boolean> boolValue,
        @Nullable Output<String> durationValue,
        @Nullable Output<Double> floatValue,
        @Nullable Output<String> int64Value,
        @Nullable Output<String> javaClassValue,
        @Nullable Output<String> key,
        @Nullable Output<String> label,
        @Nullable Output<String> namespace,
        @Nullable Output<String> shortStrValue,
        @Nullable Output<String> strValue,
        @Nullable Output<String> timestampValue,
        @Nullable Output<String> url) {
        this.boolValue = boolValue;
        this.durationValue = durationValue;
        this.floatValue = floatValue;
        this.int64Value = int64Value;
        this.javaClassValue = javaClassValue;
        this.key = key;
        this.label = label;
        this.namespace = namespace;
        this.shortStrValue = shortStrValue;
        this.strValue = strValue;
        this.timestampValue = timestampValue;
        this.url = url;
    }

    private DisplayDataArgs() {
        this.boolValue = Codegen.empty();
        this.durationValue = Codegen.empty();
        this.floatValue = Codegen.empty();
        this.int64Value = Codegen.empty();
        this.javaClassValue = Codegen.empty();
        this.key = Codegen.empty();
        this.label = Codegen.empty();
        this.namespace = Codegen.empty();
        this.shortStrValue = Codegen.empty();
        this.strValue = Codegen.empty();
        this.timestampValue = Codegen.empty();
        this.url = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DisplayDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> boolValue;
        private @Nullable Output<String> durationValue;
        private @Nullable Output<Double> floatValue;
        private @Nullable Output<String> int64Value;
        private @Nullable Output<String> javaClassValue;
        private @Nullable Output<String> key;
        private @Nullable Output<String> label;
        private @Nullable Output<String> namespace;
        private @Nullable Output<String> shortStrValue;
        private @Nullable Output<String> strValue;
        private @Nullable Output<String> timestampValue;
        private @Nullable Output<String> url;

        public Builder() {
    	      // Empty
        }

        public Builder(DisplayDataArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boolValue = defaults.boolValue;
    	      this.durationValue = defaults.durationValue;
    	      this.floatValue = defaults.floatValue;
    	      this.int64Value = defaults.int64Value;
    	      this.javaClassValue = defaults.javaClassValue;
    	      this.key = defaults.key;
    	      this.label = defaults.label;
    	      this.namespace = defaults.namespace;
    	      this.shortStrValue = defaults.shortStrValue;
    	      this.strValue = defaults.strValue;
    	      this.timestampValue = defaults.timestampValue;
    	      this.url = defaults.url;
        }

        public Builder boolValue(@Nullable Output<Boolean> boolValue) {
            this.boolValue = boolValue;
            return this;
        }
        public Builder boolValue(@Nullable Boolean boolValue) {
            this.boolValue = Codegen.ofNullable(boolValue);
            return this;
        }
        public Builder durationValue(@Nullable Output<String> durationValue) {
            this.durationValue = durationValue;
            return this;
        }
        public Builder durationValue(@Nullable String durationValue) {
            this.durationValue = Codegen.ofNullable(durationValue);
            return this;
        }
        public Builder floatValue(@Nullable Output<Double> floatValue) {
            this.floatValue = floatValue;
            return this;
        }
        public Builder floatValue(@Nullable Double floatValue) {
            this.floatValue = Codegen.ofNullable(floatValue);
            return this;
        }
        public Builder int64Value(@Nullable Output<String> int64Value) {
            this.int64Value = int64Value;
            return this;
        }
        public Builder int64Value(@Nullable String int64Value) {
            this.int64Value = Codegen.ofNullable(int64Value);
            return this;
        }
        public Builder javaClassValue(@Nullable Output<String> javaClassValue) {
            this.javaClassValue = javaClassValue;
            return this;
        }
        public Builder javaClassValue(@Nullable String javaClassValue) {
            this.javaClassValue = Codegen.ofNullable(javaClassValue);
            return this;
        }
        public Builder key(@Nullable Output<String> key) {
            this.key = key;
            return this;
        }
        public Builder key(@Nullable String key) {
            this.key = Codegen.ofNullable(key);
            return this;
        }
        public Builder label(@Nullable Output<String> label) {
            this.label = label;
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = Codegen.ofNullable(label);
            return this;
        }
        public Builder namespace(@Nullable Output<String> namespace) {
            this.namespace = namespace;
            return this;
        }
        public Builder namespace(@Nullable String namespace) {
            this.namespace = Codegen.ofNullable(namespace);
            return this;
        }
        public Builder shortStrValue(@Nullable Output<String> shortStrValue) {
            this.shortStrValue = shortStrValue;
            return this;
        }
        public Builder shortStrValue(@Nullable String shortStrValue) {
            this.shortStrValue = Codegen.ofNullable(shortStrValue);
            return this;
        }
        public Builder strValue(@Nullable Output<String> strValue) {
            this.strValue = strValue;
            return this;
        }
        public Builder strValue(@Nullable String strValue) {
            this.strValue = Codegen.ofNullable(strValue);
            return this;
        }
        public Builder timestampValue(@Nullable Output<String> timestampValue) {
            this.timestampValue = timestampValue;
            return this;
        }
        public Builder timestampValue(@Nullable String timestampValue) {
            this.timestampValue = Codegen.ofNullable(timestampValue);
            return this;
        }
        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }
        public Builder url(@Nullable String url) {
            this.url = Codegen.ofNullable(url);
            return this;
        }        public DisplayDataArgs build() {
            return new DisplayDataArgs(boolValue, durationValue, floatValue, int64Value, javaClassValue, key, label, namespace, shortStrValue, strValue, timestampValue, url);
        }
    }
}
