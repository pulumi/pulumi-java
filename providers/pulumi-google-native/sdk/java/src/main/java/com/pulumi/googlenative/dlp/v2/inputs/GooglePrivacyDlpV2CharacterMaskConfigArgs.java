// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2CharsToIgnoreArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we&#39;ll attempt to preserve the original data&#39;s type. (This allows you to take a long like 123 and modify it to a string like **3.
 * 
 */
public final class GooglePrivacyDlpV2CharacterMaskConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2CharacterMaskConfigArgs Empty = new GooglePrivacyDlpV2CharacterMaskConfigArgs();

    /**
     * When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
     * 
     */
    @Import(name="charactersToIgnore")
    private @Nullable Output<List<GooglePrivacyDlpV2CharsToIgnoreArgs>> charactersToIgnore;

    /**
     * @return When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
     * 
     */
    public Optional<Output<List<GooglePrivacyDlpV2CharsToIgnoreArgs>>> charactersToIgnore() {
        return Optional.ofNullable(this.charactersToIgnore);
    }

    /**
     * Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
     * 
     */
    @Import(name="maskingCharacter")
    private @Nullable Output<String> maskingCharacter;

    /**
     * @return Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
     * 
     */
    public Optional<Output<String>> maskingCharacter() {
        return Optional.ofNullable(this.maskingCharacter);
    }

    /**
     * Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
     * 
     */
    @Import(name="numberToMask")
    private @Nullable Output<Integer> numberToMask;

    /**
     * @return Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
     * 
     */
    public Optional<Output<Integer>> numberToMask() {
        return Optional.ofNullable(this.numberToMask);
    }

    /**
     * Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
     * 
     */
    @Import(name="reverseOrder")
    private @Nullable Output<Boolean> reverseOrder;

    /**
     * @return Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
     * 
     */
    public Optional<Output<Boolean>> reverseOrder() {
        return Optional.ofNullable(this.reverseOrder);
    }

    private GooglePrivacyDlpV2CharacterMaskConfigArgs() {}

    private GooglePrivacyDlpV2CharacterMaskConfigArgs(GooglePrivacyDlpV2CharacterMaskConfigArgs $) {
        this.charactersToIgnore = $.charactersToIgnore;
        this.maskingCharacter = $.maskingCharacter;
        this.numberToMask = $.numberToMask;
        this.reverseOrder = $.reverseOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CharacterMaskConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CharacterMaskConfigArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CharacterMaskConfigArgs();
        }

        public Builder(GooglePrivacyDlpV2CharacterMaskConfigArgs defaults) {
            $ = new GooglePrivacyDlpV2CharacterMaskConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param charactersToIgnore When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnore(@Nullable Output<List<GooglePrivacyDlpV2CharsToIgnoreArgs>> charactersToIgnore) {
            $.charactersToIgnore = charactersToIgnore;
            return this;
        }

        /**
         * @param charactersToIgnore When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnore(List<GooglePrivacyDlpV2CharsToIgnoreArgs> charactersToIgnore) {
            return charactersToIgnore(Output.of(charactersToIgnore));
        }

        /**
         * @param charactersToIgnore When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnore(GooglePrivacyDlpV2CharsToIgnoreArgs... charactersToIgnore) {
            return charactersToIgnore(List.of(charactersToIgnore));
        }

        /**
         * @param maskingCharacter Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(@Nullable Output<String> maskingCharacter) {
            $.maskingCharacter = maskingCharacter;
            return this;
        }

        /**
         * @param maskingCharacter Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(String maskingCharacter) {
            return maskingCharacter(Output.of(maskingCharacter));
        }

        /**
         * @param numberToMask Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
         * 
         * @return builder
         * 
         */
        public Builder numberToMask(@Nullable Output<Integer> numberToMask) {
            $.numberToMask = numberToMask;
            return this;
        }

        /**
         * @param numberToMask Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
         * 
         * @return builder
         * 
         */
        public Builder numberToMask(Integer numberToMask) {
            return numberToMask(Output.of(numberToMask));
        }

        /**
         * @param reverseOrder Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
         * 
         * @return builder
         * 
         */
        public Builder reverseOrder(@Nullable Output<Boolean> reverseOrder) {
            $.reverseOrder = reverseOrder;
            return this;
        }

        /**
         * @param reverseOrder Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
         * 
         * @return builder
         * 
         */
        public Builder reverseOrder(Boolean reverseOrder) {
            return reverseOrder(Output.of(reverseOrder));
        }

        public GooglePrivacyDlpV2CharacterMaskConfigArgs build() {
            return $;
        }
    }

}
