// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A reference to a Compute Engine instance.
 * 
 */
public final class InstanceReferenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final InstanceReferenceResponse Empty = new InstanceReferenceResponse();

    /**
     * The unique identifier of the Compute Engine instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private String instanceId;

    /**
     * @return The unique identifier of the Compute Engine instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * The user-friendly name of the Compute Engine instance.
     * 
     */
    @Import(name="instanceName", required=true)
    private String instanceName;

    /**
     * @return The user-friendly name of the Compute Engine instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * The public ECIES key used for sharing data with this instance.
     * 
     */
    @Import(name="publicEciesKey", required=true)
    private String publicEciesKey;

    /**
     * @return The public ECIES key used for sharing data with this instance.
     * 
     */
    public String publicEciesKey() {
        return this.publicEciesKey;
    }

    /**
     * The public RSA key used for sharing data with this instance.
     * 
     */
    @Import(name="publicKey", required=true)
    private String publicKey;

    /**
     * @return The public RSA key used for sharing data with this instance.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }

    private InstanceReferenceResponse() {}

    private InstanceReferenceResponse(InstanceReferenceResponse $) {
        this.instanceId = $.instanceId;
        this.instanceName = $.instanceName;
        this.publicEciesKey = $.publicEciesKey;
        this.publicKey = $.publicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceReferenceResponse $;

        public Builder() {
            $ = new InstanceReferenceResponse();
        }

        public Builder(InstanceReferenceResponse defaults) {
            $ = new InstanceReferenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The unique identifier of the Compute Engine instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceName The user-friendly name of the Compute Engine instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param publicEciesKey The public ECIES key used for sharing data with this instance.
         * 
         * @return builder
         * 
         */
        public Builder publicEciesKey(String publicEciesKey) {
            $.publicEciesKey = publicEciesKey;
            return this;
        }

        /**
         * @param publicKey The public RSA key used for sharing data with this instance.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public InstanceReferenceResponse build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.instanceName = Objects.requireNonNull($.instanceName, "expected parameter 'instanceName' to be non-null");
            $.publicEciesKey = Objects.requireNonNull($.publicEciesKey, "expected parameter 'publicEciesKey' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            return $;
        }
    }

}
