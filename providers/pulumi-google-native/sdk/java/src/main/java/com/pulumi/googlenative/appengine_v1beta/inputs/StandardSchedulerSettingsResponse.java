// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;


/**
 * Scheduler settings for standard environment.
 * 
 */
public final class StandardSchedulerSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final StandardSchedulerSettingsResponse Empty = new StandardSchedulerSettingsResponse();

    /**
     * Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
     * 
     */
    @Import(name="maxInstances", required=true)
    private Integer maxInstances;

    /**
     * @return Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
     * 
     */
    public Integer maxInstances() {
        return this.maxInstances;
    }

    /**
     * Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
     * 
     */
    @Import(name="minInstances", required=true)
    private Integer minInstances;

    /**
     * @return Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
     * 
     */
    public Integer minInstances() {
        return this.minInstances;
    }

    /**
     * Target CPU utilization ratio to maintain when scaling.
     * 
     */
    @Import(name="targetCpuUtilization", required=true)
    private Double targetCpuUtilization;

    /**
     * @return Target CPU utilization ratio to maintain when scaling.
     * 
     */
    public Double targetCpuUtilization() {
        return this.targetCpuUtilization;
    }

    /**
     * Target throughput utilization ratio to maintain when scaling
     * 
     */
    @Import(name="targetThroughputUtilization", required=true)
    private Double targetThroughputUtilization;

    /**
     * @return Target throughput utilization ratio to maintain when scaling
     * 
     */
    public Double targetThroughputUtilization() {
        return this.targetThroughputUtilization;
    }

    private StandardSchedulerSettingsResponse() {}

    private StandardSchedulerSettingsResponse(StandardSchedulerSettingsResponse $) {
        this.maxInstances = $.maxInstances;
        this.minInstances = $.minInstances;
        this.targetCpuUtilization = $.targetCpuUtilization;
        this.targetThroughputUtilization = $.targetThroughputUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardSchedulerSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardSchedulerSettingsResponse $;

        public Builder() {
            $ = new StandardSchedulerSettingsResponse();
        }

        public Builder(StandardSchedulerSettingsResponse defaults) {
            $ = new StandardSchedulerSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxInstances Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
         * 
         * @return builder
         * 
         */
        public Builder maxInstances(Integer maxInstances) {
            $.maxInstances = maxInstances;
            return this;
        }

        /**
         * @param minInstances Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
         * 
         * @return builder
         * 
         */
        public Builder minInstances(Integer minInstances) {
            $.minInstances = minInstances;
            return this;
        }

        /**
         * @param targetCpuUtilization Target CPU utilization ratio to maintain when scaling.
         * 
         * @return builder
         * 
         */
        public Builder targetCpuUtilization(Double targetCpuUtilization) {
            $.targetCpuUtilization = targetCpuUtilization;
            return this;
        }

        /**
         * @param targetThroughputUtilization Target throughput utilization ratio to maintain when scaling
         * 
         * @return builder
         * 
         */
        public Builder targetThroughputUtilization(Double targetThroughputUtilization) {
            $.targetThroughputUtilization = targetThroughputUtilization;
            return this;
        }

        public StandardSchedulerSettingsResponse build() {
            $.maxInstances = Objects.requireNonNull($.maxInstances, "expected parameter 'maxInstances' to be non-null");
            $.minInstances = Objects.requireNonNull($.minInstances, "expected parameter 'minInstances' to be non-null");
            $.targetCpuUtilization = Objects.requireNonNull($.targetCpuUtilization, "expected parameter 'targetCpuUtilization' to be non-null");
            $.targetThroughputUtilization = Objects.requireNonNull($.targetThroughputUtilization, "expected parameter 'targetThroughputUtilization' to be non-null");
            return $;
        }
    }

}
