// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing.v1.inputs.AndroidInstrumentationTestArgs;
import com.pulumi.googlenative.testing.v1.inputs.AndroidRoboTestArgs;
import com.pulumi.googlenative.testing.v1.inputs.AndroidTestLoopArgs;
import com.pulumi.googlenative.testing.v1.inputs.IosTestLoopArgs;
import com.pulumi.googlenative.testing.v1.inputs.IosTestSetupArgs;
import com.pulumi.googlenative.testing.v1.inputs.IosXcTestArgs;
import com.pulumi.googlenative.testing.v1.inputs.TestSetupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A description of how to run the test.
 * 
 */
public final class TestSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TestSpecificationArgs Empty = new TestSpecificationArgs();

    /**
     * An Android instrumentation test.
     * 
     */
    @Import(name="androidInstrumentationTest")
    private @Nullable Output<AndroidInstrumentationTestArgs> androidInstrumentationTest;

    /**
     * @return An Android instrumentation test.
     * 
     */
    public Optional<Output<AndroidInstrumentationTestArgs>> androidInstrumentationTest() {
        return Optional.ofNullable(this.androidInstrumentationTest);
    }

    /**
     * An Android robo test.
     * 
     */
    @Import(name="androidRoboTest")
    private @Nullable Output<AndroidRoboTestArgs> androidRoboTest;

    /**
     * @return An Android robo test.
     * 
     */
    public Optional<Output<AndroidRoboTestArgs>> androidRoboTest() {
        return Optional.ofNullable(this.androidRoboTest);
    }

    /**
     * An Android Application with a Test Loop.
     * 
     */
    @Import(name="androidTestLoop")
    private @Nullable Output<AndroidTestLoopArgs> androidTestLoop;

    /**
     * @return An Android Application with a Test Loop.
     * 
     */
    public Optional<Output<AndroidTestLoopArgs>> androidTestLoop() {
        return Optional.ofNullable(this.androidTestLoop);
    }

    /**
     * Disables performance metrics recording. May reduce test latency.
     * 
     */
    @Import(name="disablePerformanceMetrics")
    private @Nullable Output<Boolean> disablePerformanceMetrics;

    /**
     * @return Disables performance metrics recording. May reduce test latency.
     * 
     */
    public Optional<Output<Boolean>> disablePerformanceMetrics() {
        return Optional.ofNullable(this.disablePerformanceMetrics);
    }

    /**
     * Disables video recording. May reduce test latency.
     * 
     */
    @Import(name="disableVideoRecording")
    private @Nullable Output<Boolean> disableVideoRecording;

    /**
     * @return Disables video recording. May reduce test latency.
     * 
     */
    public Optional<Output<Boolean>> disableVideoRecording() {
        return Optional.ofNullable(this.disableVideoRecording);
    }

    /**
     * An iOS application with a test loop.
     * 
     */
    @Import(name="iosTestLoop")
    private @Nullable Output<IosTestLoopArgs> iosTestLoop;

    /**
     * @return An iOS application with a test loop.
     * 
     */
    public Optional<Output<IosTestLoopArgs>> iosTestLoop() {
        return Optional.ofNullable(this.iosTestLoop);
    }

    /**
     * Test setup requirements for iOS.
     * 
     */
    @Import(name="iosTestSetup")
    private @Nullable Output<IosTestSetupArgs> iosTestSetup;

    /**
     * @return Test setup requirements for iOS.
     * 
     */
    public Optional<Output<IosTestSetupArgs>> iosTestSetup() {
        return Optional.ofNullable(this.iosTestSetup);
    }

    /**
     * An iOS XCTest, via an .xctestrun file.
     * 
     */
    @Import(name="iosXcTest")
    private @Nullable Output<IosXcTestArgs> iosXcTest;

    /**
     * @return An iOS XCTest, via an .xctestrun file.
     * 
     */
    public Optional<Output<IosXcTestArgs>> iosXcTest() {
        return Optional.ofNullable(this.iosXcTest);
    }

    /**
     * Test setup requirements for Android e.g. files to install, bootstrap scripts.
     * 
     */
    @Import(name="testSetup")
    private @Nullable Output<TestSetupArgs> testSetup;

    /**
     * @return Test setup requirements for Android e.g. files to install, bootstrap scripts.
     * 
     */
    public Optional<Output<TestSetupArgs>> testSetup() {
        return Optional.ofNullable(this.testSetup);
    }

    /**
     * Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
     * 
     */
    @Import(name="testTimeout")
    private @Nullable Output<String> testTimeout;

    /**
     * @return Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
     * 
     */
    public Optional<Output<String>> testTimeout() {
        return Optional.ofNullable(this.testTimeout);
    }

    private TestSpecificationArgs() {}

    private TestSpecificationArgs(TestSpecificationArgs $) {
        this.androidInstrumentationTest = $.androidInstrumentationTest;
        this.androidRoboTest = $.androidRoboTest;
        this.androidTestLoop = $.androidTestLoop;
        this.disablePerformanceMetrics = $.disablePerformanceMetrics;
        this.disableVideoRecording = $.disableVideoRecording;
        this.iosTestLoop = $.iosTestLoop;
        this.iosTestSetup = $.iosTestSetup;
        this.iosXcTest = $.iosXcTest;
        this.testSetup = $.testSetup;
        this.testTimeout = $.testTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestSpecificationArgs $;

        public Builder() {
            $ = new TestSpecificationArgs();
        }

        public Builder(TestSpecificationArgs defaults) {
            $ = new TestSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param androidInstrumentationTest An Android instrumentation test.
         * 
         * @return builder
         * 
         */
        public Builder androidInstrumentationTest(@Nullable Output<AndroidInstrumentationTestArgs> androidInstrumentationTest) {
            $.androidInstrumentationTest = androidInstrumentationTest;
            return this;
        }

        /**
         * @param androidInstrumentationTest An Android instrumentation test.
         * 
         * @return builder
         * 
         */
        public Builder androidInstrumentationTest(AndroidInstrumentationTestArgs androidInstrumentationTest) {
            return androidInstrumentationTest(Output.of(androidInstrumentationTest));
        }

        /**
         * @param androidRoboTest An Android robo test.
         * 
         * @return builder
         * 
         */
        public Builder androidRoboTest(@Nullable Output<AndroidRoboTestArgs> androidRoboTest) {
            $.androidRoboTest = androidRoboTest;
            return this;
        }

        /**
         * @param androidRoboTest An Android robo test.
         * 
         * @return builder
         * 
         */
        public Builder androidRoboTest(AndroidRoboTestArgs androidRoboTest) {
            return androidRoboTest(Output.of(androidRoboTest));
        }

        /**
         * @param androidTestLoop An Android Application with a Test Loop.
         * 
         * @return builder
         * 
         */
        public Builder androidTestLoop(@Nullable Output<AndroidTestLoopArgs> androidTestLoop) {
            $.androidTestLoop = androidTestLoop;
            return this;
        }

        /**
         * @param androidTestLoop An Android Application with a Test Loop.
         * 
         * @return builder
         * 
         */
        public Builder androidTestLoop(AndroidTestLoopArgs androidTestLoop) {
            return androidTestLoop(Output.of(androidTestLoop));
        }

        /**
         * @param disablePerformanceMetrics Disables performance metrics recording. May reduce test latency.
         * 
         * @return builder
         * 
         */
        public Builder disablePerformanceMetrics(@Nullable Output<Boolean> disablePerformanceMetrics) {
            $.disablePerformanceMetrics = disablePerformanceMetrics;
            return this;
        }

        /**
         * @param disablePerformanceMetrics Disables performance metrics recording. May reduce test latency.
         * 
         * @return builder
         * 
         */
        public Builder disablePerformanceMetrics(Boolean disablePerformanceMetrics) {
            return disablePerformanceMetrics(Output.of(disablePerformanceMetrics));
        }

        /**
         * @param disableVideoRecording Disables video recording. May reduce test latency.
         * 
         * @return builder
         * 
         */
        public Builder disableVideoRecording(@Nullable Output<Boolean> disableVideoRecording) {
            $.disableVideoRecording = disableVideoRecording;
            return this;
        }

        /**
         * @param disableVideoRecording Disables video recording. May reduce test latency.
         * 
         * @return builder
         * 
         */
        public Builder disableVideoRecording(Boolean disableVideoRecording) {
            return disableVideoRecording(Output.of(disableVideoRecording));
        }

        /**
         * @param iosTestLoop An iOS application with a test loop.
         * 
         * @return builder
         * 
         */
        public Builder iosTestLoop(@Nullable Output<IosTestLoopArgs> iosTestLoop) {
            $.iosTestLoop = iosTestLoop;
            return this;
        }

        /**
         * @param iosTestLoop An iOS application with a test loop.
         * 
         * @return builder
         * 
         */
        public Builder iosTestLoop(IosTestLoopArgs iosTestLoop) {
            return iosTestLoop(Output.of(iosTestLoop));
        }

        /**
         * @param iosTestSetup Test setup requirements for iOS.
         * 
         * @return builder
         * 
         */
        public Builder iosTestSetup(@Nullable Output<IosTestSetupArgs> iosTestSetup) {
            $.iosTestSetup = iosTestSetup;
            return this;
        }

        /**
         * @param iosTestSetup Test setup requirements for iOS.
         * 
         * @return builder
         * 
         */
        public Builder iosTestSetup(IosTestSetupArgs iosTestSetup) {
            return iosTestSetup(Output.of(iosTestSetup));
        }

        /**
         * @param iosXcTest An iOS XCTest, via an .xctestrun file.
         * 
         * @return builder
         * 
         */
        public Builder iosXcTest(@Nullable Output<IosXcTestArgs> iosXcTest) {
            $.iosXcTest = iosXcTest;
            return this;
        }

        /**
         * @param iosXcTest An iOS XCTest, via an .xctestrun file.
         * 
         * @return builder
         * 
         */
        public Builder iosXcTest(IosXcTestArgs iosXcTest) {
            return iosXcTest(Output.of(iosXcTest));
        }

        /**
         * @param testSetup Test setup requirements for Android e.g. files to install, bootstrap scripts.
         * 
         * @return builder
         * 
         */
        public Builder testSetup(@Nullable Output<TestSetupArgs> testSetup) {
            $.testSetup = testSetup;
            return this;
        }

        /**
         * @param testSetup Test setup requirements for Android e.g. files to install, bootstrap scripts.
         * 
         * @return builder
         * 
         */
        public Builder testSetup(TestSetupArgs testSetup) {
            return testSetup(Output.of(testSetup));
        }

        /**
         * @param testTimeout Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
         * 
         * @return builder
         * 
         */
        public Builder testTimeout(@Nullable Output<String> testTimeout) {
            $.testTimeout = testTimeout;
            return this;
        }

        /**
         * @param testTimeout Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
         * 
         * @return builder
         * 
         */
        public Builder testTimeout(String testTimeout) {
            return testTimeout(Output.of(testTimeout));
        }

        public TestSpecificationArgs build() {
            return $;
        }
    }

}
