// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
 * 
 */
public final class CropArgs extends com.pulumi.resources.ResourceArgs {

    public static final CropArgs Empty = new CropArgs();

    /**
     * The number of pixels to crop from the bottom. The default is 0.
     * 
     */
    @Import(name="bottomPixels")
      private final @Nullable Output<Integer> bottomPixels;

    public Output<Integer> bottomPixels() {
        return this.bottomPixels == null ? Codegen.empty() : this.bottomPixels;
    }

    /**
     * The number of pixels to crop from the left. The default is 0.
     * 
     */
    @Import(name="leftPixels")
      private final @Nullable Output<Integer> leftPixels;

    public Output<Integer> leftPixels() {
        return this.leftPixels == null ? Codegen.empty() : this.leftPixels;
    }

    /**
     * The number of pixels to crop from the right. The default is 0.
     * 
     */
    @Import(name="rightPixels")
      private final @Nullable Output<Integer> rightPixels;

    public Output<Integer> rightPixels() {
        return this.rightPixels == null ? Codegen.empty() : this.rightPixels;
    }

    /**
     * The number of pixels to crop from the top. The default is 0.
     * 
     */
    @Import(name="topPixels")
      private final @Nullable Output<Integer> topPixels;

    public Output<Integer> topPixels() {
        return this.topPixels == null ? Codegen.empty() : this.topPixels;
    }

    public CropArgs(
        @Nullable Output<Integer> bottomPixels,
        @Nullable Output<Integer> leftPixels,
        @Nullable Output<Integer> rightPixels,
        @Nullable Output<Integer> topPixels) {
        this.bottomPixels = bottomPixels;
        this.leftPixels = leftPixels;
        this.rightPixels = rightPixels;
        this.topPixels = topPixels;
    }

    private CropArgs() {
        this.bottomPixels = Codegen.empty();
        this.leftPixels = Codegen.empty();
        this.rightPixels = Codegen.empty();
        this.topPixels = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> bottomPixels;
        private @Nullable Output<Integer> leftPixels;
        private @Nullable Output<Integer> rightPixels;
        private @Nullable Output<Integer> topPixels;

        public Builder() {
    	      // Empty
        }

        public Builder(CropArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bottomPixels = defaults.bottomPixels;
    	      this.leftPixels = defaults.leftPixels;
    	      this.rightPixels = defaults.rightPixels;
    	      this.topPixels = defaults.topPixels;
        }

        public Builder bottomPixels(@Nullable Output<Integer> bottomPixels) {
            this.bottomPixels = bottomPixels;
            return this;
        }
        public Builder bottomPixels(@Nullable Integer bottomPixels) {
            this.bottomPixels = Codegen.ofNullable(bottomPixels);
            return this;
        }
        public Builder leftPixels(@Nullable Output<Integer> leftPixels) {
            this.leftPixels = leftPixels;
            return this;
        }
        public Builder leftPixels(@Nullable Integer leftPixels) {
            this.leftPixels = Codegen.ofNullable(leftPixels);
            return this;
        }
        public Builder rightPixels(@Nullable Output<Integer> rightPixels) {
            this.rightPixels = rightPixels;
            return this;
        }
        public Builder rightPixels(@Nullable Integer rightPixels) {
            this.rightPixels = Codegen.ofNullable(rightPixels);
            return this;
        }
        public Builder topPixels(@Nullable Output<Integer> topPixels) {
            this.topPixels = topPixels;
            return this;
        }
        public Builder topPixels(@Nullable Integer topPixels) {
            this.topPixels = Codegen.ofNullable(topPixels);
            return this;
        }        public CropArgs build() {
            return new CropArgs(bottomPixels, leftPixels, rightPixels, topPixels);
        }
    }
}
