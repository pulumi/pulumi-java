// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkehub_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.gkehub_v1beta.inputs.CommonFeatureSpecArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureArgs Empty = new FeatureArgs();

    @Import(name="featureId")
      private final @Nullable Output<String> featureId;

    public Output<String> featureId() {
        return this.featureId == null ? Codegen.empty() : this.featureId;
    }

    /**
     * GCP labels for this Feature.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature&#39;s project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     * 
     */
    @Import(name="membershipSpecs")
      private final @Nullable Output<Map<String,String>> membershipSpecs;

    public Output<Map<String,String>> membershipSpecs() {
        return this.membershipSpecs == null ? Codegen.empty() : this.membershipSpecs;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    /**
     * Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
     * 
     */
    @Import(name="spec")
      private final @Nullable Output<CommonFeatureSpecArgs> spec;

    public Output<CommonFeatureSpecArgs> spec() {
        return this.spec == null ? Codegen.empty() : this.spec;
    }

    public FeatureArgs(
        @Nullable Output<String> featureId,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<Map<String,String>> membershipSpecs,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        @Nullable Output<CommonFeatureSpecArgs> spec) {
        this.featureId = featureId;
        this.labels = labels;
        this.location = location;
        this.membershipSpecs = membershipSpecs;
        this.project = project;
        this.requestId = requestId;
        this.spec = spec;
    }

    private FeatureArgs() {
        this.featureId = Codegen.empty();
        this.labels = Codegen.empty();
        this.location = Codegen.empty();
        this.membershipSpecs = Codegen.empty();
        this.project = Codegen.empty();
        this.requestId = Codegen.empty();
        this.spec = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> featureId;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<Map<String,String>> membershipSpecs;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private @Nullable Output<CommonFeatureSpecArgs> spec;

        public Builder() {
    	      // Empty
        }

        public Builder(FeatureArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.featureId = defaults.featureId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.membershipSpecs = defaults.membershipSpecs;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.spec = defaults.spec;
        }

        public Builder featureId(@Nullable Output<String> featureId) {
            this.featureId = featureId;
            return this;
        }
        public Builder featureId(@Nullable String featureId) {
            this.featureId = Codegen.ofNullable(featureId);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder membershipSpecs(@Nullable Output<Map<String,String>> membershipSpecs) {
            this.membershipSpecs = membershipSpecs;
            return this;
        }
        public Builder membershipSpecs(@Nullable Map<String,String> membershipSpecs) {
            this.membershipSpecs = Codegen.ofNullable(membershipSpecs);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }
        public Builder spec(@Nullable Output<CommonFeatureSpecArgs> spec) {
            this.spec = spec;
            return this;
        }
        public Builder spec(@Nullable CommonFeatureSpecArgs spec) {
            this.spec = Codegen.ofNullable(spec);
            return this;
        }        public FeatureArgs build() {
            return new FeatureArgs(featureId, labels, location, membershipSpecs, project, requestId, spec);
        }
    }
}
