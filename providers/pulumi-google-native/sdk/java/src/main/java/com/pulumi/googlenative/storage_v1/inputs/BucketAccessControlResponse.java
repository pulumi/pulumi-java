// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storage_v1.inputs.BucketAccessControlProjectTeamResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An access-control entry.
 * 
 */
public final class BucketAccessControlResponse extends com.pulumi.resources.InvokeArgs {

    public static final BucketAccessControlResponse Empty = new BucketAccessControlResponse();

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="bucket", required=true)
      private final String bucket;

    public String bucket() {
        return this.bucket;
    }

    /**
     * The domain associated with the entity, if any.
     * 
     */
    @Import(name="domain", required=true)
      private final String domain;

    public String domain() {
        return this.domain;
    }

    /**
     * The email address associated with the entity, if any.
     * 
     */
    @Import(name="email", required=true)
      private final String email;

    public String email() {
        return this.email;
    }

    /**
     * The entity holding the permission, in one of the following forms:
     * - user-userId
     * - user-email
     * - group-groupId
     * - group-email
     * - domain-domain
     * - project-team-projectId
     * - allUsers
     * - allAuthenticatedUsers Examples:
     * - The user liz@example.com would be user-liz@example.com.
     * - The group example@googlegroups.com would be group-example@googlegroups.com.
     * - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
     * 
     */
    @Import(name="entity", required=true)
      private final String entity;

    public String entity() {
        return this.entity;
    }

    /**
     * The ID for the entity, if any.
     * 
     */
    @Import(name="entityId", required=true)
      private final String entityId;

    public String entityId() {
        return this.entityId;
    }

    /**
     * HTTP 1.1 Entity tag for the access-control entry.
     * 
     */
    @Import(name="etag", required=true)
      private final String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * The kind of item this is. For bucket access control entries, this is always storage#bucketAccessControl.
     * 
     */
    @Import(name="kind", required=true)
      private final String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * The project team associated with the entity, if any.
     * 
     */
    @Import(name="projectTeam", required=true)
      private final BucketAccessControlProjectTeamResponse projectTeam;

    public BucketAccessControlProjectTeamResponse projectTeam() {
        return this.projectTeam;
    }

    /**
     * The access permission for the entity.
     * 
     */
    @Import(name="role", required=true)
      private final String role;

    public String role() {
        return this.role;
    }

    /**
     * The link to this access-control entry.
     * 
     */
    @Import(name="selfLink", required=true)
      private final String selfLink;

    public String selfLink() {
        return this.selfLink;
    }

    public BucketAccessControlResponse(
        String bucket,
        String domain,
        String email,
        String entity,
        String entityId,
        String etag,
        String kind,
        BucketAccessControlProjectTeamResponse projectTeam,
        String role,
        String selfLink) {
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.domain = Objects.requireNonNull(domain, "expected parameter 'domain' to be non-null");
        this.email = Objects.requireNonNull(email, "expected parameter 'email' to be non-null");
        this.entity = Objects.requireNonNull(entity, "expected parameter 'entity' to be non-null");
        this.entityId = Objects.requireNonNull(entityId, "expected parameter 'entityId' to be non-null");
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.projectTeam = Objects.requireNonNull(projectTeam, "expected parameter 'projectTeam' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.selfLink = Objects.requireNonNull(selfLink, "expected parameter 'selfLink' to be non-null");
    }

    private BucketAccessControlResponse() {
        this.bucket = null;
        this.domain = null;
        this.email = null;
        this.entity = null;
        this.entityId = null;
        this.etag = null;
        this.kind = null;
        this.projectTeam = null;
        this.role = null;
        this.selfLink = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketAccessControlResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bucket;
        private String domain;
        private String email;
        private String entity;
        private String entityId;
        private String etag;
        private String kind;
        private BucketAccessControlProjectTeamResponse projectTeam;
        private String role;
        private String selfLink;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketAccessControlResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.domain = defaults.domain;
    	      this.email = defaults.email;
    	      this.entity = defaults.entity;
    	      this.entityId = defaults.entityId;
    	      this.etag = defaults.etag;
    	      this.kind = defaults.kind;
    	      this.projectTeam = defaults.projectTeam;
    	      this.role = defaults.role;
    	      this.selfLink = defaults.selfLink;
        }

        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder entity(String entity) {
            this.entity = Objects.requireNonNull(entity);
            return this;
        }
        public Builder entityId(String entityId) {
            this.entityId = Objects.requireNonNull(entityId);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder projectTeam(BucketAccessControlProjectTeamResponse projectTeam) {
            this.projectTeam = Objects.requireNonNull(projectTeam);
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }        public BucketAccessControlResponse build() {
            return new BucketAccessControlResponse(bucket, domain, email, entity, entityId, etag, kind, projectTeam, role, selfLink);
        }
    }
}
