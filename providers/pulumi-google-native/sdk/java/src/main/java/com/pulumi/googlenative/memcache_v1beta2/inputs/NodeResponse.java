// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.memcache_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.memcache_v1beta2.inputs.MemcacheParametersResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class NodeResponse extends com.pulumi.resources.InvokeArgs {

    public static final NodeResponse Empty = new NodeResponse();

    /**
     * Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    public String host() {
        return this.host;
    }

    /**
     * Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
     * 
     */
    @Import(name="nodeId", required=true)
    private String nodeId;

    public String nodeId() {
        return this.nodeId;
    }

    /**
     * User defined parameters currently applied to the node.
     * 
     */
    @Import(name="parameters", required=true)
    private MemcacheParametersResponse parameters;

    public MemcacheParametersResponse parameters() {
        return this.parameters;
    }

    /**
     * The port number of the Memcached server on this node.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * Current state of the Memcached node.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Returns true if there is an update waiting to be applied
     * 
     */
    @Import(name="updateAvailable", required=true)
    private Boolean updateAvailable;

    public Boolean updateAvailable() {
        return this.updateAvailable;
    }

    /**
     * Location (GCP Zone) for the Memcached node.
     * 
     */
    @Import(name="zone", required=true)
    private String zone;

    public String zone() {
        return this.zone;
    }

    private NodeResponse() {}

    private NodeResponse(NodeResponse $) {
        this.host = $.host;
        this.nodeId = $.nodeId;
        this.parameters = $.parameters;
        this.port = $.port;
        this.state = $.state;
        this.updateAvailable = $.updateAvailable;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeResponse $;

        public Builder() {
            $ = new NodeResponse();
        }

        public Builder(NodeResponse defaults) {
            $ = new NodeResponse(Objects.requireNonNull(defaults));
        }

        public Builder host(String host) {
            $.host = host;
            return this;
        }

        public Builder nodeId(String nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        public Builder parameters(MemcacheParametersResponse parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder updateAvailable(Boolean updateAvailable) {
            $.updateAvailable = updateAvailable;
            return this;
        }

        public Builder zone(String zone) {
            $.zone = zone;
            return this;
        }

        public NodeResponse build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.nodeId = Objects.requireNonNull($.nodeId, "expected parameter 'nodeId' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.updateAvailable = Objects.requireNonNull($.updateAvailable, "expected parameter 'updateAvailable' to be non-null");
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
