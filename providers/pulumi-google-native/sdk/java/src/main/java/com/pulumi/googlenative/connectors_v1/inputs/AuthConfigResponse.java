// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.connectors_v1.inputs.ConfigVariableResponse;
import com.pulumi.googlenative.connectors_v1.inputs.Oauth2ClientCredentialsResponse;
import com.pulumi.googlenative.connectors_v1.inputs.Oauth2JwtBearerResponse;
import com.pulumi.googlenative.connectors_v1.inputs.UserPasswordResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * AuthConfig defines details of a authentication type.
 * 
 */
public final class AuthConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final AuthConfigResponse Empty = new AuthConfigResponse();

    /**
     * List containing additional auth configs.
     * 
     */
    @Import(name="additionalVariables", required=true)
    private List<ConfigVariableResponse> additionalVariables;

    /**
     * @return List containing additional auth configs.
     * 
     */
    public List<ConfigVariableResponse> additionalVariables() {
        return this.additionalVariables;
    }

    /**
     * The type of authentication configured.
     * 
     */
    @Import(name="authType", required=true)
    private String authType;

    /**
     * @return The type of authentication configured.
     * 
     */
    public String authType() {
        return this.authType;
    }

    /**
     * Oauth2ClientCredentials.
     * 
     */
    @Import(name="oauth2ClientCredentials", required=true)
    private Oauth2ClientCredentialsResponse oauth2ClientCredentials;

    /**
     * @return Oauth2ClientCredentials.
     * 
     */
    public Oauth2ClientCredentialsResponse oauth2ClientCredentials() {
        return this.oauth2ClientCredentials;
    }

    /**
     * Oauth2JwtBearer.
     * 
     */
    @Import(name="oauth2JwtBearer", required=true)
    private Oauth2JwtBearerResponse oauth2JwtBearer;

    /**
     * @return Oauth2JwtBearer.
     * 
     */
    public Oauth2JwtBearerResponse oauth2JwtBearer() {
        return this.oauth2JwtBearer;
    }

    /**
     * UserPassword.
     * 
     */
    @Import(name="userPassword", required=true)
    private UserPasswordResponse userPassword;

    /**
     * @return UserPassword.
     * 
     */
    public UserPasswordResponse userPassword() {
        return this.userPassword;
    }

    private AuthConfigResponse() {}

    private AuthConfigResponse(AuthConfigResponse $) {
        this.additionalVariables = $.additionalVariables;
        this.authType = $.authType;
        this.oauth2ClientCredentials = $.oauth2ClientCredentials;
        this.oauth2JwtBearer = $.oauth2JwtBearer;
        this.userPassword = $.userPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigResponse $;

        public Builder() {
            $ = new AuthConfigResponse();
        }

        public Builder(AuthConfigResponse defaults) {
            $ = new AuthConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalVariables List containing additional auth configs.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(List<ConfigVariableResponse> additionalVariables) {
            $.additionalVariables = additionalVariables;
            return this;
        }

        /**
         * @param additionalVariables List containing additional auth configs.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(ConfigVariableResponse... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }

        /**
         * @param authType The type of authentication configured.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param oauth2ClientCredentials Oauth2ClientCredentials.
         * 
         * @return builder
         * 
         */
        public Builder oauth2ClientCredentials(Oauth2ClientCredentialsResponse oauth2ClientCredentials) {
            $.oauth2ClientCredentials = oauth2ClientCredentials;
            return this;
        }

        /**
         * @param oauth2JwtBearer Oauth2JwtBearer.
         * 
         * @return builder
         * 
         */
        public Builder oauth2JwtBearer(Oauth2JwtBearerResponse oauth2JwtBearer) {
            $.oauth2JwtBearer = oauth2JwtBearer;
            return this;
        }

        /**
         * @param userPassword UserPassword.
         * 
         * @return builder
         * 
         */
        public Builder userPassword(UserPasswordResponse userPassword) {
            $.userPassword = userPassword;
            return this;
        }

        public AuthConfigResponse build() {
            $.additionalVariables = Objects.requireNonNull($.additionalVariables, "expected parameter 'additionalVariables' to be non-null");
            $.authType = Objects.requireNonNull($.authType, "expected parameter 'authType' to be non-null");
            $.oauth2ClientCredentials = Objects.requireNonNull($.oauth2ClientCredentials, "expected parameter 'oauth2ClientCredentials' to be non-null");
            $.oauth2JwtBearer = Objects.requireNonNull($.oauth2JwtBearer, "expected parameter 'oauth2JwtBearer' to be non-null");
            $.userPassword = Objects.requireNonNull($.userPassword, "expected parameter 'userPassword' to be non-null");
            return $;
        }
    }

}
