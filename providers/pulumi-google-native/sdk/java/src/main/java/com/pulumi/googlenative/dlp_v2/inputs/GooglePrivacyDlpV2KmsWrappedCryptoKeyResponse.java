// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
 * 
 */
public final class GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse Empty = new GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse();

    /**
     * The resource name of the KMS CryptoKey to use for unwrapping.
     * 
     */
    @Import(name="cryptoKeyName", required=true)
    private String cryptoKeyName;

    public String cryptoKeyName() {
        return this.cryptoKeyName;
    }

    /**
     * The wrapped data crypto key.
     * 
     */
    @Import(name="wrappedKey", required=true)
    private String wrappedKey;

    public String wrappedKey() {
        return this.wrappedKey;
    }

    private GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse() {}

    private GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse $) {
        this.cryptoKeyName = $.cryptoKeyName;
        this.wrappedKey = $.wrappedKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse();
        }

        public Builder(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse defaults) {
            $ = new GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse(Objects.requireNonNull(defaults));
        }

        public Builder cryptoKeyName(String cryptoKeyName) {
            $.cryptoKeyName = cryptoKeyName;
            return this;
        }

        public Builder wrappedKey(String wrappedKey) {
            $.wrappedKey = wrappedKey;
            return this;
        }

        public GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse build() {
            $.cryptoKeyName = Objects.requireNonNull($.cryptoKeyName, "expected parameter 'cryptoKeyName' to be non-null");
            $.wrappedKey = Objects.requireNonNull($.wrappedKey, "expected parameter 'wrappedKey' to be non-null");
            return $;
        }
    }

}
