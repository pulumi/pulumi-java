// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Rules to match an HTTP request and dispatch that request to a service.
 * 
 */
public final class UrlDispatchRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final UrlDispatchRuleResponse Empty = new UrlDispatchRuleResponse();

    /**
     * Domain name to match against. The wildcard &#34;*&#34; is supported if specified before a period: &#34;*.&#34;.Defaults to matching all domains: &#34;*&#34;.
     * 
     */
    @Import(name="domain", required=true)
    private String domain;

    /**
     * @return Domain name to match against. The wildcard &#34;*&#34; is supported if specified before a period: &#34;*.&#34;.Defaults to matching all domains: &#34;*&#34;.
     * 
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Pathname within the host. Must start with a &#34;/&#34;. A single &#34;*&#34; can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return Pathname within the host. Must start with a &#34;/&#34;. A single &#34;*&#34; can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
     * 
     */
    @Import(name="service", required=true)
    private String service;

    /**
     * @return Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
     * 
     */
    public String service() {
        return this.service;
    }

    private UrlDispatchRuleResponse() {}

    private UrlDispatchRuleResponse(UrlDispatchRuleResponse $) {
        this.domain = $.domain;
        this.path = $.path;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UrlDispatchRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UrlDispatchRuleResponse $;

        public Builder() {
            $ = new UrlDispatchRuleResponse();
        }

        public Builder(UrlDispatchRuleResponse defaults) {
            $ = new UrlDispatchRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain Domain name to match against. The wildcard &#34;*&#34; is supported if specified before a period: &#34;*.&#34;.Defaults to matching all domains: &#34;*&#34;.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param path Pathname within the host. Must start with a &#34;/&#34;. A single &#34;*&#34; can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param service Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            $.service = service;
            return this;
        }

        public UrlDispatchRuleResponse build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
