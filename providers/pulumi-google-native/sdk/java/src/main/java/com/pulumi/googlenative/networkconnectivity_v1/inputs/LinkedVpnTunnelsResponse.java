// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkconnectivity_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
 * 
 */
public final class LinkedVpnTunnelsResponse extends com.pulumi.resources.InvokeArgs {

    public static final LinkedVpnTunnelsResponse Empty = new LinkedVpnTunnelsResponse();

    /**
     * A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
     * 
     */
    @Import(name="siteToSiteDataTransfer", required=true)
    private Boolean siteToSiteDataTransfer;

    public Boolean siteToSiteDataTransfer() {
        return this.siteToSiteDataTransfer;
    }

    /**
     * The URIs of linked VPN tunnel resources.
     * 
     */
    @Import(name="uris", required=true)
    private List<String> uris;

    public List<String> uris() {
        return this.uris;
    }

    private LinkedVpnTunnelsResponse() {}

    private LinkedVpnTunnelsResponse(LinkedVpnTunnelsResponse $) {
        this.siteToSiteDataTransfer = $.siteToSiteDataTransfer;
        this.uris = $.uris;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkedVpnTunnelsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkedVpnTunnelsResponse $;

        public Builder() {
            $ = new LinkedVpnTunnelsResponse();
        }

        public Builder(LinkedVpnTunnelsResponse defaults) {
            $ = new LinkedVpnTunnelsResponse(Objects.requireNonNull(defaults));
        }

        public Builder siteToSiteDataTransfer(Boolean siteToSiteDataTransfer) {
            $.siteToSiteDataTransfer = siteToSiteDataTransfer;
            return this;
        }

        public Builder uris(List<String> uris) {
            $.uris = uris;
            return this;
        }

        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        public LinkedVpnTunnelsResponse build() {
            $.siteToSiteDataTransfer = Objects.requireNonNull($.siteToSiteDataTransfer, "expected parameter 'siteToSiteDataTransfer' to be non-null");
            $.uris = Objects.requireNonNull($.uris, "expected parameter 'uris' to be non-null");
            return $;
        }
    }

}
