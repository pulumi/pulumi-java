// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.networkmanagement.v1.outputs.EndpointInfoResponse;
import com.pulumi.googlenative.networkmanagement.v1.outputs.StepResponse;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TraceResponse {
    /**
     * @return Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
     * 
     */
    private final EndpointInfoResponse endpointInfo;
    /**
     * @return A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
     * 
     */
    private final List<StepResponse> steps;

    @CustomType.Constructor
    private TraceResponse(
        @CustomType.Parameter("endpointInfo") EndpointInfoResponse endpointInfo,
        @CustomType.Parameter("steps") List<StepResponse> steps) {
        this.endpointInfo = endpointInfo;
        this.steps = steps;
    }

    /**
     * @return Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
     * 
     */
    public EndpointInfoResponse endpointInfo() {
        return this.endpointInfo;
    }
    /**
     * @return A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
     * 
     */
    public List<StepResponse> steps() {
        return this.steps;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TraceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointInfoResponse endpointInfo;
        private List<StepResponse> steps;

        public Builder() {
    	      // Empty
        }

        public Builder(TraceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointInfo = defaults.endpointInfo;
    	      this.steps = defaults.steps;
        }

        public Builder endpointInfo(EndpointInfoResponse endpointInfo) {
            this.endpointInfo = Objects.requireNonNull(endpointInfo);
            return this;
        }
        public Builder steps(List<StepResponse> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }
        public Builder steps(StepResponse... steps) {
            return steps(List.of(steps));
        }        public TraceResponse build() {
            return new TraceResponse(endpointInfo, steps);
        }
    }
}
