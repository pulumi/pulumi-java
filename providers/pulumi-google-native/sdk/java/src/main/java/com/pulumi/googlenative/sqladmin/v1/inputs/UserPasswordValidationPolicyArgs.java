// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * User level password validation policy.
 * 
 */
public final class UserPasswordValidationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPasswordValidationPolicyArgs Empty = new UserPasswordValidationPolicyArgs();

    /**
     * Number of failed login attempts allowed before user get locked.
     * 
     */
    @Import(name="allowedFailedAttempts")
    private @Nullable Output<Integer> allowedFailedAttempts;

    /**
     * @return Number of failed login attempts allowed before user get locked.
     * 
     */
    public Optional<Output<Integer>> allowedFailedAttempts() {
        return Optional.ofNullable(this.allowedFailedAttempts);
    }

    /**
     * If true, failed login attempts check will be enabled.
     * 
     */
    @Import(name="enableFailedAttemptsCheck")
    private @Nullable Output<Boolean> enableFailedAttemptsCheck;

    /**
     * @return If true, failed login attempts check will be enabled.
     * 
     */
    public Optional<Output<Boolean>> enableFailedAttemptsCheck() {
        return Optional.ofNullable(this.enableFailedAttemptsCheck);
    }

    /**
     * If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     * 
     */
    @Import(name="enablePasswordVerification")
    private @Nullable Output<Boolean> enablePasswordVerification;

    /**
     * @return If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     * 
     */
    public Optional<Output<Boolean>> enablePasswordVerification() {
        return Optional.ofNullable(this.enablePasswordVerification);
    }

    /**
     * Expiration duration after password is updated.
     * 
     */
    @Import(name="passwordExpirationDuration")
    private @Nullable Output<String> passwordExpirationDuration;

    /**
     * @return Expiration duration after password is updated.
     * 
     */
    public Optional<Output<String>> passwordExpirationDuration() {
        return Optional.ofNullable(this.passwordExpirationDuration);
    }

    private UserPasswordValidationPolicyArgs() {}

    private UserPasswordValidationPolicyArgs(UserPasswordValidationPolicyArgs $) {
        this.allowedFailedAttempts = $.allowedFailedAttempts;
        this.enableFailedAttemptsCheck = $.enableFailedAttemptsCheck;
        this.enablePasswordVerification = $.enablePasswordVerification;
        this.passwordExpirationDuration = $.passwordExpirationDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPasswordValidationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPasswordValidationPolicyArgs $;

        public Builder() {
            $ = new UserPasswordValidationPolicyArgs();
        }

        public Builder(UserPasswordValidationPolicyArgs defaults) {
            $ = new UserPasswordValidationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedFailedAttempts Number of failed login attempts allowed before user get locked.
         * 
         * @return builder
         * 
         */
        public Builder allowedFailedAttempts(@Nullable Output<Integer> allowedFailedAttempts) {
            $.allowedFailedAttempts = allowedFailedAttempts;
            return this;
        }

        /**
         * @param allowedFailedAttempts Number of failed login attempts allowed before user get locked.
         * 
         * @return builder
         * 
         */
        public Builder allowedFailedAttempts(Integer allowedFailedAttempts) {
            return allowedFailedAttempts(Output.of(allowedFailedAttempts));
        }

        /**
         * @param enableFailedAttemptsCheck If true, failed login attempts check will be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableFailedAttemptsCheck(@Nullable Output<Boolean> enableFailedAttemptsCheck) {
            $.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
            return this;
        }

        /**
         * @param enableFailedAttemptsCheck If true, failed login attempts check will be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableFailedAttemptsCheck(Boolean enableFailedAttemptsCheck) {
            return enableFailedAttemptsCheck(Output.of(enableFailedAttemptsCheck));
        }

        /**
         * @param enablePasswordVerification If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
         * 
         * @return builder
         * 
         */
        public Builder enablePasswordVerification(@Nullable Output<Boolean> enablePasswordVerification) {
            $.enablePasswordVerification = enablePasswordVerification;
            return this;
        }

        /**
         * @param enablePasswordVerification If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
         * 
         * @return builder
         * 
         */
        public Builder enablePasswordVerification(Boolean enablePasswordVerification) {
            return enablePasswordVerification(Output.of(enablePasswordVerification));
        }

        /**
         * @param passwordExpirationDuration Expiration duration after password is updated.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpirationDuration(@Nullable Output<String> passwordExpirationDuration) {
            $.passwordExpirationDuration = passwordExpirationDuration;
            return this;
        }

        /**
         * @param passwordExpirationDuration Expiration duration after password is updated.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpirationDuration(String passwordExpirationDuration) {
            return passwordExpirationDuration(Output.of(passwordExpirationDuration));
        }

        public UserPasswordValidationPolicyArgs build() {
            return $;
        }
    }

}
