// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.beyondcorp.v1alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.beyondcorp.v1alpha.enums.GatewayType;
import java.util.Objects;


/**
 * Gateway represents a user facing component that serves as an entrance to enable connectivity.
 * 
 */
public final class GatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * The type of hosting used by the gateway.
     * 
     */
    @Import(name="type", required=true)
    private Output<GatewayType> type;

    /**
     * @return The type of hosting used by the gateway.
     * 
     */
    public Output<GatewayType> type() {
        return this.type;
    }

    private GatewayArgs() {}

    private GatewayArgs(GatewayArgs $) {
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayArgs $;

        public Builder() {
            $ = new GatewayArgs();
        }

        public Builder(GatewayArgs defaults) {
            $ = new GatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type The type of hosting used by the gateway.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<GatewayType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of hosting used by the gateway.
         * 
         * @return builder
         * 
         */
        public Builder type(GatewayType type) {
            return type(Output.of(type));
        }

        public GatewayArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
