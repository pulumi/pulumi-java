// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A documentation rule provides information about individual API elements.
 * 
 */
public final class DocumentationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentationRuleArgs Empty = new DocumentationRuleArgs();

    /**
     * Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
     * 
     */
    @Import(name="deprecationDescription")
      private final @Nullable Output<String> deprecationDescription;

    public Output<String> deprecationDescription() {
        return this.deprecationDescription == null ? Codegen.empty() : this.deprecationDescription;
    }

    /**
     * Description of the selected proto element (e.g. a message, a method, a &#39;service&#39; definition, or a field). Defaults to leading &amp; trailing comments taken from the proto source definition of the proto element.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in &#34;*&#34;, indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. &#34;foo.*&#34; is ok, but not &#34;foo.b*&#34; or &#34;foo.*.bar&#34;. A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern &#34;*&#34; is used.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<String> selector;

    public Output<String> selector() {
        return this.selector == null ? Codegen.empty() : this.selector;
    }

    public DocumentationRuleArgs(
        @Nullable Output<String> deprecationDescription,
        @Nullable Output<String> description,
        @Nullable Output<String> selector) {
        this.deprecationDescription = deprecationDescription;
        this.description = description;
        this.selector = selector;
    }

    private DocumentationRuleArgs() {
        this.deprecationDescription = Codegen.empty();
        this.description = Codegen.empty();
        this.selector = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> deprecationDescription;
        private @Nullable Output<String> description;
        private @Nullable Output<String> selector;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deprecationDescription = defaults.deprecationDescription;
    	      this.description = defaults.description;
    	      this.selector = defaults.selector;
        }

        public Builder deprecationDescription(@Nullable Output<String> deprecationDescription) {
            this.deprecationDescription = deprecationDescription;
            return this;
        }
        public Builder deprecationDescription(@Nullable String deprecationDescription) {
            this.deprecationDescription = Codegen.ofNullable(deprecationDescription);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder selector(@Nullable Output<String> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable String selector) {
            this.selector = Codegen.ofNullable(selector);
            return this;
        }        public DocumentationRuleArgs build() {
            return new DocumentationRuleArgs(deprecationDescription, description, selector);
        }
    }
}
