// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkmanagement_v1beta1.inputs.StatusResponse;
import com.pulumi.googlenative.networkmanagement_v1beta1.inputs.TraceResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Results of the configuration analysis from the last run of the test.
 * 
 */
public final class ReachabilityDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReachabilityDetailsResponse Empty = new ReachabilityDetailsResponse();

    /**
     * The details of a failure or a cancellation of reachability analysis.
     * 
     */
    @Import(name="error", required=true)
    private StatusResponse error;

    /**
     * @return The details of a failure or a cancellation of reachability analysis.
     * 
     */
    public StatusResponse error() {
        return this.error;
    }

    /**
     * The overall result of the test&#39;s configuration analysis.
     * 
     */
    @Import(name="result", required=true)
    private String result;

    /**
     * @return The overall result of the test&#39;s configuration analysis.
     * 
     */
    public String result() {
        return this.result;
    }

    /**
     * Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
     * 
     */
    @Import(name="traces", required=true)
    private List<TraceResponse> traces;

    /**
     * @return Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
     * 
     */
    public List<TraceResponse> traces() {
        return this.traces;
    }

    /**
     * The time of the configuration analysis.
     * 
     */
    @Import(name="verifyTime", required=true)
    private String verifyTime;

    /**
     * @return The time of the configuration analysis.
     * 
     */
    public String verifyTime() {
        return this.verifyTime;
    }

    private ReachabilityDetailsResponse() {}

    private ReachabilityDetailsResponse(ReachabilityDetailsResponse $) {
        this.error = $.error;
        this.result = $.result;
        this.traces = $.traces;
        this.verifyTime = $.verifyTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReachabilityDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReachabilityDetailsResponse $;

        public Builder() {
            $ = new ReachabilityDetailsResponse();
        }

        public Builder(ReachabilityDetailsResponse defaults) {
            $ = new ReachabilityDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param error The details of a failure or a cancellation of reachability analysis.
         * 
         * @return builder
         * 
         */
        public Builder error(StatusResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param result The overall result of the test&#39;s configuration analysis.
         * 
         * @return builder
         * 
         */
        public Builder result(String result) {
            $.result = result;
            return this;
        }

        /**
         * @param traces Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
         * 
         * @return builder
         * 
         */
        public Builder traces(List<TraceResponse> traces) {
            $.traces = traces;
            return this;
        }

        /**
         * @param traces Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
         * 
         * @return builder
         * 
         */
        public Builder traces(TraceResponse... traces) {
            return traces(List.of(traces));
        }

        /**
         * @param verifyTime The time of the configuration analysis.
         * 
         * @return builder
         * 
         */
        public Builder verifyTime(String verifyTime) {
            $.verifyTime = verifyTime;
            return this;
        }

        public ReachabilityDetailsResponse build() {
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.result = Objects.requireNonNull($.result, "expected parameter 'result' to be non-null");
            $.traces = Objects.requireNonNull($.traces, "expected parameter 'traces' to be non-null");
            $.verifyTime = Objects.requireNonNull($.verifyTime, "expected parameter 'verifyTime' to be non-null");
            return $;
        }
    }

}
