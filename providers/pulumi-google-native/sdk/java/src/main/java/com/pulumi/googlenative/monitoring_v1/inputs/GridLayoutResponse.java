// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.WidgetResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.
 * 
 */
public final class GridLayoutResponse extends com.pulumi.resources.InvokeArgs {

    public static final GridLayoutResponse Empty = new GridLayoutResponse();

    /**
     * The number of columns into which the view&#39;s width is divided. If omitted or set to zero, a system default will be used while rendering.
     * 
     */
    @Import(name="columns", required=true)
    private String columns;

    public String columns() {
        return this.columns;
    }

    /**
     * The informational elements that are arranged into the columns row-first.
     * 
     */
    @Import(name="widgets", required=true)
    private List<WidgetResponse> widgets;

    public List<WidgetResponse> widgets() {
        return this.widgets;
    }

    private GridLayoutResponse() {}

    private GridLayoutResponse(GridLayoutResponse $) {
        this.columns = $.columns;
        this.widgets = $.widgets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GridLayoutResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GridLayoutResponse $;

        public Builder() {
            $ = new GridLayoutResponse();
        }

        public Builder(GridLayoutResponse defaults) {
            $ = new GridLayoutResponse(Objects.requireNonNull(defaults));
        }

        public Builder columns(String columns) {
            $.columns = columns;
            return this;
        }

        public Builder widgets(List<WidgetResponse> widgets) {
            $.widgets = widgets;
            return this;
        }

        public Builder widgets(WidgetResponse... widgets) {
            return widgets(List.of(widgets));
        }

        public GridLayoutResponse build() {
            $.columns = Objects.requireNonNull($.columns, "expected parameter 'columns' to be non-null");
            $.widgets = Objects.requireNonNull($.widgets, "expected parameter 'widgets' to be non-null");
            return $;
        }
    }

}
