// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.v1.enums.SchedulingInstanceTerminationAction;
import com.pulumi.googlenative.compute.v1.enums.SchedulingOnHostMaintenance;
import com.pulumi.googlenative.compute.v1.enums.SchedulingProvisioningModel;
import com.pulumi.googlenative.compute.v1.inputs.SchedulingNodeAffinityArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sets the scheduling options for an Instance. NextID: 21
 * 
 */
public final class SchedulingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchedulingArgs Empty = new SchedulingArgs();

    /**
     * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
     * 
     */
    @Import(name="automaticRestart")
    private @Nullable Output<Boolean> automaticRestart;

    /**
     * @return Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
     * 
     */
    public Optional<Output<Boolean>> automaticRestart() {
        return Optional.ofNullable(this.automaticRestart);
    }

    /**
     * Specifies the termination action for the instance.
     * 
     */
    @Import(name="instanceTerminationAction")
    private @Nullable Output<SchedulingInstanceTerminationAction> instanceTerminationAction;

    /**
     * @return Specifies the termination action for the instance.
     * 
     */
    public Optional<Output<SchedulingInstanceTerminationAction>> instanceTerminationAction() {
        return Optional.ofNullable(this.instanceTerminationAction);
    }

    /**
     * An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
     * 
     */
    @Import(name="locationHint")
    private @Nullable Output<String> locationHint;

    /**
     * @return An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
     * 
     */
    public Optional<Output<String>> locationHint() {
        return Optional.ofNullable(this.locationHint);
    }

    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
     * 
     */
    @Import(name="minNodeCpus")
    private @Nullable Output<Integer> minNodeCpus;

    /**
     * @return The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
     * 
     */
    public Optional<Output<Integer>> minNodeCpus() {
        return Optional.ofNullable(this.minNodeCpus);
    }

    /**
     * A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
     * 
     */
    @Import(name="nodeAffinities")
    private @Nullable Output<List<SchedulingNodeAffinityArgs>> nodeAffinities;

    /**
     * @return A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
     * 
     */
    public Optional<Output<List<SchedulingNodeAffinityArgs>>> nodeAffinities() {
        return Optional.ofNullable(this.nodeAffinities);
    }

    /**
     * Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
     * 
     */
    @Import(name="onHostMaintenance")
    private @Nullable Output<SchedulingOnHostMaintenance> onHostMaintenance;

    /**
     * @return Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
     * 
     */
    public Optional<Output<SchedulingOnHostMaintenance>> onHostMaintenance() {
        return Optional.ofNullable(this.onHostMaintenance);
    }

    /**
     * Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
     * 
     */
    @Import(name="preemptible")
    private @Nullable Output<Boolean> preemptible;

    /**
     * @return Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
     * 
     */
    public Optional<Output<Boolean>> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }

    /**
     * Specifies the provisioning model of the instance.
     * 
     */
    @Import(name="provisioningModel")
    private @Nullable Output<SchedulingProvisioningModel> provisioningModel;

    /**
     * @return Specifies the provisioning model of the instance.
     * 
     */
    public Optional<Output<SchedulingProvisioningModel>> provisioningModel() {
        return Optional.ofNullable(this.provisioningModel);
    }

    private SchedulingArgs() {}

    private SchedulingArgs(SchedulingArgs $) {
        this.automaticRestart = $.automaticRestart;
        this.instanceTerminationAction = $.instanceTerminationAction;
        this.locationHint = $.locationHint;
        this.minNodeCpus = $.minNodeCpus;
        this.nodeAffinities = $.nodeAffinities;
        this.onHostMaintenance = $.onHostMaintenance;
        this.preemptible = $.preemptible;
        this.provisioningModel = $.provisioningModel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchedulingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchedulingArgs $;

        public Builder() {
            $ = new SchedulingArgs();
        }

        public Builder(SchedulingArgs defaults) {
            $ = new SchedulingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticRestart Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
         * 
         * @return builder
         * 
         */
        public Builder automaticRestart(@Nullable Output<Boolean> automaticRestart) {
            $.automaticRestart = automaticRestart;
            return this;
        }

        /**
         * @param automaticRestart Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
         * 
         * @return builder
         * 
         */
        public Builder automaticRestart(Boolean automaticRestart) {
            return automaticRestart(Output.of(automaticRestart));
        }

        /**
         * @param instanceTerminationAction Specifies the termination action for the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceTerminationAction(@Nullable Output<SchedulingInstanceTerminationAction> instanceTerminationAction) {
            $.instanceTerminationAction = instanceTerminationAction;
            return this;
        }

        /**
         * @param instanceTerminationAction Specifies the termination action for the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceTerminationAction(SchedulingInstanceTerminationAction instanceTerminationAction) {
            return instanceTerminationAction(Output.of(instanceTerminationAction));
        }

        /**
         * @param locationHint An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
         * 
         * @return builder
         * 
         */
        public Builder locationHint(@Nullable Output<String> locationHint) {
            $.locationHint = locationHint;
            return this;
        }

        /**
         * @param locationHint An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
         * 
         * @return builder
         * 
         */
        public Builder locationHint(String locationHint) {
            return locationHint(Output.of(locationHint));
        }

        /**
         * @param minNodeCpus The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCpus(@Nullable Output<Integer> minNodeCpus) {
            $.minNodeCpus = minNodeCpus;
            return this;
        }

        /**
         * @param minNodeCpus The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCpus(Integer minNodeCpus) {
            return minNodeCpus(Output.of(minNodeCpus));
        }

        /**
         * @param nodeAffinities A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(@Nullable Output<List<SchedulingNodeAffinityArgs>> nodeAffinities) {
            $.nodeAffinities = nodeAffinities;
            return this;
        }

        /**
         * @param nodeAffinities A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(List<SchedulingNodeAffinityArgs> nodeAffinities) {
            return nodeAffinities(Output.of(nodeAffinities));
        }

        /**
         * @param nodeAffinities A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(SchedulingNodeAffinityArgs... nodeAffinities) {
            return nodeAffinities(List.of(nodeAffinities));
        }

        /**
         * @param onHostMaintenance Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
         * 
         * @return builder
         * 
         */
        public Builder onHostMaintenance(@Nullable Output<SchedulingOnHostMaintenance> onHostMaintenance) {
            $.onHostMaintenance = onHostMaintenance;
            return this;
        }

        /**
         * @param onHostMaintenance Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
         * 
         * @return builder
         * 
         */
        public Builder onHostMaintenance(SchedulingOnHostMaintenance onHostMaintenance) {
            return onHostMaintenance(Output.of(onHostMaintenance));
        }

        /**
         * @param preemptible Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
         * 
         * @return builder
         * 
         */
        public Builder preemptible(@Nullable Output<Boolean> preemptible) {
            $.preemptible = preemptible;
            return this;
        }

        /**
         * @param preemptible Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
         * 
         * @return builder
         * 
         */
        public Builder preemptible(Boolean preemptible) {
            return preemptible(Output.of(preemptible));
        }

        /**
         * @param provisioningModel Specifies the provisioning model of the instance.
         * 
         * @return builder
         * 
         */
        public Builder provisioningModel(@Nullable Output<SchedulingProvisioningModel> provisioningModel) {
            $.provisioningModel = provisioningModel;
            return this;
        }

        /**
         * @param provisioningModel Specifies the provisioning model of the instance.
         * 
         * @return builder
         * 
         */
        public Builder provisioningModel(SchedulingProvisioningModel provisioningModel) {
            return provisioningModel(Output.of(provisioningModel));
        }

        public SchedulingArgs build() {
            return $;
        }
    }

}
