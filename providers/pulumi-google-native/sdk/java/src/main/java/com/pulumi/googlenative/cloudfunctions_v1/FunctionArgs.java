// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudfunctions_v1.enums.FunctionIngressSettings;
import com.pulumi.googlenative.cloudfunctions_v1.enums.FunctionVpcConnectorEgressSettings;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.EventTriggerArgs;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.HttpsTriggerArgs;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.SecretEnvVarArgs;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.SecretVolumeArgs;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.SourceRepositoryArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionArgs Empty = new FunctionArgs();

    /**
     * The amount of memory in MB available for a function. Defaults to 256MB.
     * 
     */
    @Import(name="availableMemoryMb")
    private @Nullable Output<Integer> availableMemoryMb;

    public Optional<Output<Integer>> availableMemoryMb() {
        return Optional.ofNullable(this.availableMemoryMb);
    }

    /**
     * Build environment variables that shall be available during build time.
     * 
     */
    @Import(name="buildEnvironmentVariables")
    private @Nullable Output<Map<String,String>> buildEnvironmentVariables;

    public Optional<Output<Map<String,String>>> buildEnvironmentVariables() {
        return Optional.ofNullable(this.buildEnvironmentVariables);
    }

    /**
     * Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
     * 
     */
    @Import(name="buildWorkerPool")
    private @Nullable Output<String> buildWorkerPool;

    public Optional<Output<String>> buildWorkerPool() {
        return Optional.ofNullable(this.buildWorkerPool);
    }

    /**
     * User-provided description of a function.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named &#39;gcf-artifacts&#39; for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be &#39;DOCKER&#39;.
     * 
     */
    @Import(name="dockerRepository")
    private @Nullable Output<String> dockerRepository;

    public Optional<Output<String>> dockerRepository() {
        return Optional.ofNullable(this.dockerRepository);
    }

    /**
     * The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;. For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    @Import(name="entryPoint")
    private @Nullable Output<String> entryPoint;

    public Optional<Output<String>> entryPoint() {
        return Optional.ofNullable(this.entryPoint);
    }

    /**
     * Environment variables that shall be available during function execution.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * A source that fires events in response to a condition in another service.
     * 
     */
    @Import(name="eventTrigger")
    private @Nullable Output<EventTriggerArgs> eventTrigger;

    public Optional<Output<EventTriggerArgs>> eventTrigger() {
        return Optional.ofNullable(this.eventTrigger);
    }

    /**
     * An HTTPS endpoint type of source that can be triggered via URL.
     * 
     */
    @Import(name="httpsTrigger")
    private @Nullable Output<HttpsTriggerArgs> httpsTrigger;

    public Optional<Output<HttpsTriggerArgs>> httpsTrigger() {
        return Optional.ofNullable(this.httpsTrigger);
    }

    /**
     * The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    @Import(name="ingressSettings")
    private @Nullable Output<FunctionIngressSettings> ingressSettings;

    public Optional<Output<FunctionIngressSettings>> ingressSettings() {
        return Optional.ofNullable(this.ingressSettings);
    }

    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role &#39;Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)&#39; on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function&#39;s image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function&#39;s source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
     * 
     */
    @Import(name="kmsKeyName")
    private @Nullable Output<String> kmsKeyName;

    public Optional<Output<String>> kmsKeyName() {
        return Optional.ofNullable(this.kmsKeyName);
    }

    /**
     * Labels associated with this Cloud Function.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    @Import(name="maxInstances")
    private @Nullable Output<Integer> maxInstances;

    public Optional<Output<Integer>> maxInstances() {
        return Optional.ofNullable(this.maxInstances);
    }

    /**
     * A lower bound for the number function instances that may coexist at a given time.
     * 
     */
    @Import(name="minInstances")
    private @Nullable Output<Integer> minInstances;

    public Optional<Output<Integer>> minInstances() {
        return Optional.ofNullable(this.minInstances);
    }

    /**
     * A user-defined name of the function. Function names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where `{project}` is a project id where the network is defined, and `{network}` is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    @Import(name="runtime")
    private @Nullable Output<String> runtime;

    public Optional<Output<String>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    /**
     * Secret environment variables configuration.
     * 
     */
    @Import(name="secretEnvironmentVariables")
    private @Nullable Output<List<SecretEnvVarArgs>> secretEnvironmentVariables;

    public Optional<Output<List<SecretEnvVarArgs>>> secretEnvironmentVariables() {
        return Optional.ofNullable(this.secretEnvironmentVariables);
    }

    /**
     * Secret volumes configuration.
     * 
     */
    @Import(name="secretVolumes")
    private @Nullable Output<List<SecretVolumeArgs>> secretVolumes;

    public Optional<Output<List<SecretVolumeArgs>>> secretVolumes() {
        return Optional.ofNullable(this.secretVolumes);
    }

    /**
     * The email of the function&#39;s service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
     * 
     */
    @Import(name="serviceAccountEmail")
    private @Nullable Output<String> serviceAccountEmail;

    public Optional<Output<String>> serviceAccountEmail() {
        return Optional.ofNullable(this.serviceAccountEmail);
    }

    /**
     * The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
     * 
     */
    @Import(name="sourceArchiveUrl")
    private @Nullable Output<String> sourceArchiveUrl;

    public Optional<Output<String>> sourceArchiveUrl() {
        return Optional.ofNullable(this.sourceArchiveUrl);
    }

    /**
     * **Beta Feature** The source repository where a function is hosted.
     * 
     */
    @Import(name="sourceRepository")
    private @Nullable Output<SourceRepositoryArgs> sourceRepository;

    public Optional<Output<SourceRepositoryArgs>> sourceRepository() {
        return Optional.ofNullable(this.sourceRepository);
    }

    /**
     * Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
     * 
     */
    @Import(name="sourceToken")
    private @Nullable Output<String> sourceToken;

    public Optional<Output<String>> sourceToken() {
        return Optional.ofNullable(this.sourceToken);
    }

    /**
     * The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
     * 
     */
    @Import(name="sourceUploadUrl")
    private @Nullable Output<String> sourceUploadUrl;

    public Optional<Output<String>> sourceUploadUrl() {
        return Optional.ofNullable(this.sourceUploadUrl);
    }

    /**
     * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    @Import(name="vpcConnector")
    private @Nullable Output<String> vpcConnector;

    public Optional<Output<String>> vpcConnector() {
        return Optional.ofNullable(this.vpcConnector);
    }

    /**
     * The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    @Import(name="vpcConnectorEgressSettings")
    private @Nullable Output<FunctionVpcConnectorEgressSettings> vpcConnectorEgressSettings;

    public Optional<Output<FunctionVpcConnectorEgressSettings>> vpcConnectorEgressSettings() {
        return Optional.ofNullable(this.vpcConnectorEgressSettings);
    }

    private FunctionArgs() {}

    private FunctionArgs(FunctionArgs $) {
        this.availableMemoryMb = $.availableMemoryMb;
        this.buildEnvironmentVariables = $.buildEnvironmentVariables;
        this.buildWorkerPool = $.buildWorkerPool;
        this.description = $.description;
        this.dockerRepository = $.dockerRepository;
        this.entryPoint = $.entryPoint;
        this.environmentVariables = $.environmentVariables;
        this.eventTrigger = $.eventTrigger;
        this.httpsTrigger = $.httpsTrigger;
        this.ingressSettings = $.ingressSettings;
        this.kmsKeyName = $.kmsKeyName;
        this.labels = $.labels;
        this.location = $.location;
        this.maxInstances = $.maxInstances;
        this.minInstances = $.minInstances;
        this.name = $.name;
        this.network = $.network;
        this.project = $.project;
        this.runtime = $.runtime;
        this.secretEnvironmentVariables = $.secretEnvironmentVariables;
        this.secretVolumes = $.secretVolumes;
        this.serviceAccountEmail = $.serviceAccountEmail;
        this.sourceArchiveUrl = $.sourceArchiveUrl;
        this.sourceRepository = $.sourceRepository;
        this.sourceToken = $.sourceToken;
        this.sourceUploadUrl = $.sourceUploadUrl;
        this.timeout = $.timeout;
        this.vpcConnector = $.vpcConnector;
        this.vpcConnectorEgressSettings = $.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionArgs $;

        public Builder() {
            $ = new FunctionArgs();
        }

        public Builder(FunctionArgs defaults) {
            $ = new FunctionArgs(Objects.requireNonNull(defaults));
        }

        public Builder availableMemoryMb(@Nullable Output<Integer> availableMemoryMb) {
            $.availableMemoryMb = availableMemoryMb;
            return this;
        }

        public Builder availableMemoryMb(Integer availableMemoryMb) {
            return availableMemoryMb(Output.of(availableMemoryMb));
        }

        public Builder buildEnvironmentVariables(@Nullable Output<Map<String,String>> buildEnvironmentVariables) {
            $.buildEnvironmentVariables = buildEnvironmentVariables;
            return this;
        }

        public Builder buildEnvironmentVariables(Map<String,String> buildEnvironmentVariables) {
            return buildEnvironmentVariables(Output.of(buildEnvironmentVariables));
        }

        public Builder buildWorkerPool(@Nullable Output<String> buildWorkerPool) {
            $.buildWorkerPool = buildWorkerPool;
            return this;
        }

        public Builder buildWorkerPool(String buildWorkerPool) {
            return buildWorkerPool(Output.of(buildWorkerPool));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder dockerRepository(@Nullable Output<String> dockerRepository) {
            $.dockerRepository = dockerRepository;
            return this;
        }

        public Builder dockerRepository(String dockerRepository) {
            return dockerRepository(Output.of(dockerRepository));
        }

        public Builder entryPoint(@Nullable Output<String> entryPoint) {
            $.entryPoint = entryPoint;
            return this;
        }

        public Builder entryPoint(String entryPoint) {
            return entryPoint(Output.of(entryPoint));
        }

        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        public Builder eventTrigger(@Nullable Output<EventTriggerArgs> eventTrigger) {
            $.eventTrigger = eventTrigger;
            return this;
        }

        public Builder eventTrigger(EventTriggerArgs eventTrigger) {
            return eventTrigger(Output.of(eventTrigger));
        }

        public Builder httpsTrigger(@Nullable Output<HttpsTriggerArgs> httpsTrigger) {
            $.httpsTrigger = httpsTrigger;
            return this;
        }

        public Builder httpsTrigger(HttpsTriggerArgs httpsTrigger) {
            return httpsTrigger(Output.of(httpsTrigger));
        }

        public Builder ingressSettings(@Nullable Output<FunctionIngressSettings> ingressSettings) {
            $.ingressSettings = ingressSettings;
            return this;
        }

        public Builder ingressSettings(FunctionIngressSettings ingressSettings) {
            return ingressSettings(Output.of(ingressSettings));
        }

        public Builder kmsKeyName(@Nullable Output<String> kmsKeyName) {
            $.kmsKeyName = kmsKeyName;
            return this;
        }

        public Builder kmsKeyName(String kmsKeyName) {
            return kmsKeyName(Output.of(kmsKeyName));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder maxInstances(@Nullable Output<Integer> maxInstances) {
            $.maxInstances = maxInstances;
            return this;
        }

        public Builder maxInstances(Integer maxInstances) {
            return maxInstances(Output.of(maxInstances));
        }

        public Builder minInstances(@Nullable Output<Integer> minInstances) {
            $.minInstances = minInstances;
            return this;
        }

        public Builder minInstances(Integer minInstances) {
            return minInstances(Output.of(minInstances));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        public Builder network(String network) {
            return network(Output.of(network));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder runtime(@Nullable Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        public Builder secretEnvironmentVariables(@Nullable Output<List<SecretEnvVarArgs>> secretEnvironmentVariables) {
            $.secretEnvironmentVariables = secretEnvironmentVariables;
            return this;
        }

        public Builder secretEnvironmentVariables(List<SecretEnvVarArgs> secretEnvironmentVariables) {
            return secretEnvironmentVariables(Output.of(secretEnvironmentVariables));
        }

        public Builder secretEnvironmentVariables(SecretEnvVarArgs... secretEnvironmentVariables) {
            return secretEnvironmentVariables(List.of(secretEnvironmentVariables));
        }

        public Builder secretVolumes(@Nullable Output<List<SecretVolumeArgs>> secretVolumes) {
            $.secretVolumes = secretVolumes;
            return this;
        }

        public Builder secretVolumes(List<SecretVolumeArgs> secretVolumes) {
            return secretVolumes(Output.of(secretVolumes));
        }

        public Builder secretVolumes(SecretVolumeArgs... secretVolumes) {
            return secretVolumes(List.of(secretVolumes));
        }

        public Builder serviceAccountEmail(@Nullable Output<String> serviceAccountEmail) {
            $.serviceAccountEmail = serviceAccountEmail;
            return this;
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            return serviceAccountEmail(Output.of(serviceAccountEmail));
        }

        public Builder sourceArchiveUrl(@Nullable Output<String> sourceArchiveUrl) {
            $.sourceArchiveUrl = sourceArchiveUrl;
            return this;
        }

        public Builder sourceArchiveUrl(String sourceArchiveUrl) {
            return sourceArchiveUrl(Output.of(sourceArchiveUrl));
        }

        public Builder sourceRepository(@Nullable Output<SourceRepositoryArgs> sourceRepository) {
            $.sourceRepository = sourceRepository;
            return this;
        }

        public Builder sourceRepository(SourceRepositoryArgs sourceRepository) {
            return sourceRepository(Output.of(sourceRepository));
        }

        public Builder sourceToken(@Nullable Output<String> sourceToken) {
            $.sourceToken = sourceToken;
            return this;
        }

        public Builder sourceToken(String sourceToken) {
            return sourceToken(Output.of(sourceToken));
        }

        public Builder sourceUploadUrl(@Nullable Output<String> sourceUploadUrl) {
            $.sourceUploadUrl = sourceUploadUrl;
            return this;
        }

        public Builder sourceUploadUrl(String sourceUploadUrl) {
            return sourceUploadUrl(Output.of(sourceUploadUrl));
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder vpcConnector(@Nullable Output<String> vpcConnector) {
            $.vpcConnector = vpcConnector;
            return this;
        }

        public Builder vpcConnector(String vpcConnector) {
            return vpcConnector(Output.of(vpcConnector));
        }

        public Builder vpcConnectorEgressSettings(@Nullable Output<FunctionVpcConnectorEgressSettings> vpcConnectorEgressSettings) {
            $.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
            return this;
        }

        public Builder vpcConnectorEgressSettings(FunctionVpcConnectorEgressSettings vpcConnectorEgressSettings) {
            return vpcConnectorEgressSettings(Output.of(vpcConnectorEgressSettings));
        }

        public FunctionArgs build() {
            return $;
        }
    }

}
