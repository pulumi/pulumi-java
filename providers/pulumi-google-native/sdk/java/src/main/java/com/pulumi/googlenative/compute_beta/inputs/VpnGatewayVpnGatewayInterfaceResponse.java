// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A VPN gateway interface.
 * 
 */
public final class VpnGatewayVpnGatewayInterfaceResponse extends com.pulumi.resources.InvokeArgs {

    public static final VpnGatewayVpnGatewayInterfaceResponse Empty = new VpnGatewayVpnGatewayInterfaceResponse();

    /**
     * URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
     * 
     */
    @Import(name="interconnectAttachment", required=true)
    private String interconnectAttachment;

    public String interconnectAttachment() {
        return this.interconnectAttachment;
    }

    /**
     * IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For IPsec-encrypted Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non IPsec-encrypted Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
     * 
     */
    @Import(name="ipAddress", required=true)
    private String ipAddress;

    public String ipAddress() {
        return this.ipAddress;
    }

    private VpnGatewayVpnGatewayInterfaceResponse() {}

    private VpnGatewayVpnGatewayInterfaceResponse(VpnGatewayVpnGatewayInterfaceResponse $) {
        this.interconnectAttachment = $.interconnectAttachment;
        this.ipAddress = $.ipAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnGatewayVpnGatewayInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnGatewayVpnGatewayInterfaceResponse $;

        public Builder() {
            $ = new VpnGatewayVpnGatewayInterfaceResponse();
        }

        public Builder(VpnGatewayVpnGatewayInterfaceResponse defaults) {
            $ = new VpnGatewayVpnGatewayInterfaceResponse(Objects.requireNonNull(defaults));
        }

        public Builder interconnectAttachment(String interconnectAttachment) {
            $.interconnectAttachment = interconnectAttachment;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public VpnGatewayVpnGatewayInterfaceResponse build() {
            $.interconnectAttachment = Objects.requireNonNull($.interconnectAttachment, "expected parameter 'interconnectAttachment' to be non-null");
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            return $;
        }
    }

}
