// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder_v1.inputs.AudioMappingResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Audio stream resource.
 * 
 */
public final class AudioStreamResponse extends com.pulumi.resources.InvokeArgs {

    public static final AudioStreamResponse Empty = new AudioStreamResponse();

    /**
     * Audio bitrate in bits per second. Must be between 1 and 10,000,000.
     * 
     */
    @Import(name="bitrateBps", required=true)
    private Integer bitrateBps;

    /**
     * @return Audio bitrate in bits per second. Must be between 1 and 10,000,000.
     * 
     */
    public Integer bitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Number of audio channels. Must be between 1 and 6. The default is 2.
     * 
     */
    @Import(name="channelCount", required=true)
    private Integer channelCount;

    /**
     * @return Number of audio channels. Must be between 1 and 6. The default is 2.
     * 
     */
    public Integer channelCount() {
        return this.channelCount;
    }

    /**
     * A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[&#34;fl&#34;, &#34;fr&#34;]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
     * 
     */
    @Import(name="channelLayout", required=true)
    private List<String> channelLayout;

    /**
     * @return A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[&#34;fl&#34;, &#34;fr&#34;]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
     * 
     */
    public List<String> channelLayout() {
        return this.channelLayout;
    }

    /**
     * The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
     * 
     */
    @Import(name="codec", required=true)
    private String codec;

    /**
     * @return The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
     * 
     */
    public String codec() {
        return this.codec;
    }

    /**
     * The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
     * 
     */
    @Import(name="mapping", required=true)
    private List<AudioMappingResponse> mapping;

    /**
     * @return The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
     * 
     */
    public List<AudioMappingResponse> mapping() {
        return this.mapping;
    }

    /**
     * The audio sample rate in Hertz. The default is 48000 Hertz.
     * 
     */
    @Import(name="sampleRateHertz", required=true)
    private Integer sampleRateHertz;

    /**
     * @return The audio sample rate in Hertz. The default is 48000 Hertz.
     * 
     */
    public Integer sampleRateHertz() {
        return this.sampleRateHertz;
    }

    private AudioStreamResponse() {}

    private AudioStreamResponse(AudioStreamResponse $) {
        this.bitrateBps = $.bitrateBps;
        this.channelCount = $.channelCount;
        this.channelLayout = $.channelLayout;
        this.codec = $.codec;
        this.mapping = $.mapping;
        this.sampleRateHertz = $.sampleRateHertz;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AudioStreamResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AudioStreamResponse $;

        public Builder() {
            $ = new AudioStreamResponse();
        }

        public Builder(AudioStreamResponse defaults) {
            $ = new AudioStreamResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrateBps Audio bitrate in bits per second. Must be between 1 and 10,000,000.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Integer bitrateBps) {
            $.bitrateBps = bitrateBps;
            return this;
        }

        /**
         * @param channelCount Number of audio channels. Must be between 1 and 6. The default is 2.
         * 
         * @return builder
         * 
         */
        public Builder channelCount(Integer channelCount) {
            $.channelCount = channelCount;
            return this;
        }

        /**
         * @param channelLayout A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[&#34;fl&#34;, &#34;fr&#34;]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
         * 
         * @return builder
         * 
         */
        public Builder channelLayout(List<String> channelLayout) {
            $.channelLayout = channelLayout;
            return this;
        }

        /**
         * @param channelLayout A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[&#34;fl&#34;, &#34;fr&#34;]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
         * 
         * @return builder
         * 
         */
        public Builder channelLayout(String... channelLayout) {
            return channelLayout(List.of(channelLayout));
        }

        /**
         * @param codec The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
         * 
         * @return builder
         * 
         */
        public Builder codec(String codec) {
            $.codec = codec;
            return this;
        }

        /**
         * @param mapping The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
         * 
         * @return builder
         * 
         */
        public Builder mapping(List<AudioMappingResponse> mapping) {
            $.mapping = mapping;
            return this;
        }

        /**
         * @param mapping The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
         * 
         * @return builder
         * 
         */
        public Builder mapping(AudioMappingResponse... mapping) {
            return mapping(List.of(mapping));
        }

        /**
         * @param sampleRateHertz The audio sample rate in Hertz. The default is 48000 Hertz.
         * 
         * @return builder
         * 
         */
        public Builder sampleRateHertz(Integer sampleRateHertz) {
            $.sampleRateHertz = sampleRateHertz;
            return this;
        }

        public AudioStreamResponse build() {
            $.bitrateBps = Objects.requireNonNull($.bitrateBps, "expected parameter 'bitrateBps' to be non-null");
            $.channelCount = Objects.requireNonNull($.channelCount, "expected parameter 'channelCount' to be non-null");
            $.channelLayout = Objects.requireNonNull($.channelLayout, "expected parameter 'channelLayout' to be non-null");
            $.codec = Objects.requireNonNull($.codec, "expected parameter 'codec' to be non-null");
            $.mapping = Objects.requireNonNull($.mapping, "expected parameter 'mapping' to be non-null");
            $.sampleRateHertz = Objects.requireNonNull($.sampleRateHertz, "expected parameter 'sampleRateHertz' to be non-null");
            return $;
        }
    }

}
