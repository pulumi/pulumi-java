// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1.inputs.ObjectMetaArgs;
import com.pulumi.googlenative.run_v1.inputs.ServiceSpecArgs;
import com.pulumi.googlenative.run_v1.inputs.ServiceStatusArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * The API version for this call such as &#34;serving.knative.dev/v1&#34;.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    @Import(name="dryRun")
    private @Nullable Output<String> dryRun;

    public Optional<Output<String>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The kind of resource, in this case &#34;Service&#34;.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Metadata associated with this Service, including name, namespace, labels, and annotations. Cloud Run (fully managed) uses the following annotation keys to configure features on a Service: * `run.googleapis.com/ingress` sets the ingress settings for the Service. See [the ingress settings documentation](/run/docs/securing/ingress) for details on configuring ingress settings. * `run.googleapis.com/ingress-status` is output-only and contains the currently active ingress settings for the Service. `run.googleapis.com/ingress-status` may differ from `run.googleapis.com/ingress` while the system is processing a change to `run.googleapis.com/ingress` or if the system failed to process a change to `run.googleapis.com/ingress`. When the system has processed all changes successfully `run.googleapis.com/ingress-status` and `run.googleapis.com/ingress` are equal.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<ObjectMetaArgs> metadata;

    public Optional<Output<ObjectMetaArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Spec holds the desired state of the Service (from the client).
     * 
     */
    @Import(name="spec")
    private @Nullable Output<ServiceSpecArgs> spec;

    public Optional<Output<ServiceSpecArgs>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * Status communicates the observed state of the Service (from the controller).
     * 
     */
    @Import(name="status")
    private @Nullable Output<ServiceStatusArgs> status;

    public Optional<Output<ServiceStatusArgs>> status() {
        return Optional.ofNullable(this.status);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.apiVersion = $.apiVersion;
        this.dryRun = $.dryRun;
        this.kind = $.kind;
        this.location = $.location;
        this.metadata = $.metadata;
        this.project = $.project;
        this.spec = $.spec;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        public Builder dryRun(@Nullable Output<String> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        public Builder dryRun(String dryRun) {
            return dryRun(Output.of(dryRun));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder metadata(@Nullable Output<ObjectMetaArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(ObjectMetaArgs metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder spec(@Nullable Output<ServiceSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        public Builder spec(ServiceSpecArgs spec) {
            return spec(Output.of(spec));
        }

        public Builder status(@Nullable Output<ServiceStatusArgs> status) {
            $.status = status;
            return this;
        }

        public Builder status(ServiceStatusArgs status) {
            return status(Output.of(status));
        }

        public ServiceArgs build() {
            return $;
        }
    }

}
