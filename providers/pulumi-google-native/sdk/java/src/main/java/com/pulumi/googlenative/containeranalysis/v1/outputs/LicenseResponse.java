// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LicenseResponse {
    /**
     * @return Comments
     * 
     */
    private final String comments;
    /**
     * @return Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: &#34;LGPL-2.1-only OR MIT&#34;, &#34;LGPL-2.1-only AND MIT&#34;, &#34;GPL-2.0-or-later WITH Bison-exception-2.2&#34;.
     * 
     */
    private final String expression;

    @CustomType.Constructor
    private LicenseResponse(
        @CustomType.Parameter("comments") String comments,
        @CustomType.Parameter("expression") String expression) {
        this.comments = comments;
        this.expression = expression;
    }

    /**
     * @return Comments
     * 
     */
    public String comments() {
        return this.comments;
    }
    /**
     * @return Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: &#34;LGPL-2.1-only OR MIT&#34;, &#34;LGPL-2.1-only AND MIT&#34;, &#34;GPL-2.0-or-later WITH Bison-exception-2.2&#34;.
     * 
     */
    public String expression() {
        return this.expression;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicenseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String comments;
        private String expression;

        public Builder() {
    	      // Empty
        }

        public Builder(LicenseResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comments = defaults.comments;
    	      this.expression = defaults.expression;
        }

        public Builder comments(String comments) {
            this.comments = Objects.requireNonNull(comments);
            return this;
        }
        public Builder expression(String expression) {
            this.expression = Objects.requireNonNull(expression);
            return this;
        }        public LicenseResponse build() {
            return new LicenseResponse(comments, expression);
        }
    }
}
