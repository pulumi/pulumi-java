// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1beta4.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


/**
 * Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
 * 
 */
public final class InsightsConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final InsightsConfigResponse Empty = new InsightsConfigResponse();

    /**
     * Whether Query Insights feature is enabled.
     * 
     */
    @Import(name="queryInsightsEnabled", required=true)
    private Boolean queryInsightsEnabled;

    public Boolean queryInsightsEnabled() {
        return this.queryInsightsEnabled;
    }

    /**
     * Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
     * 
     */
    @Import(name="queryPlansPerMinute", required=true)
    private Integer queryPlansPerMinute;

    public Integer queryPlansPerMinute() {
        return this.queryPlansPerMinute;
    }

    /**
     * Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
     * 
     */
    @Import(name="queryStringLength", required=true)
    private Integer queryStringLength;

    public Integer queryStringLength() {
        return this.queryStringLength;
    }

    /**
     * Whether Query Insights will record application tags from query when enabled.
     * 
     */
    @Import(name="recordApplicationTags", required=true)
    private Boolean recordApplicationTags;

    public Boolean recordApplicationTags() {
        return this.recordApplicationTags;
    }

    /**
     * Whether Query Insights will record client address when enabled.
     * 
     */
    @Import(name="recordClientAddress", required=true)
    private Boolean recordClientAddress;

    public Boolean recordClientAddress() {
        return this.recordClientAddress;
    }

    private InsightsConfigResponse() {}

    private InsightsConfigResponse(InsightsConfigResponse $) {
        this.queryInsightsEnabled = $.queryInsightsEnabled;
        this.queryPlansPerMinute = $.queryPlansPerMinute;
        this.queryStringLength = $.queryStringLength;
        this.recordApplicationTags = $.recordApplicationTags;
        this.recordClientAddress = $.recordClientAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InsightsConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InsightsConfigResponse $;

        public Builder() {
            $ = new InsightsConfigResponse();
        }

        public Builder(InsightsConfigResponse defaults) {
            $ = new InsightsConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder queryInsightsEnabled(Boolean queryInsightsEnabled) {
            $.queryInsightsEnabled = queryInsightsEnabled;
            return this;
        }

        public Builder queryPlansPerMinute(Integer queryPlansPerMinute) {
            $.queryPlansPerMinute = queryPlansPerMinute;
            return this;
        }

        public Builder queryStringLength(Integer queryStringLength) {
            $.queryStringLength = queryStringLength;
            return this;
        }

        public Builder recordApplicationTags(Boolean recordApplicationTags) {
            $.recordApplicationTags = recordApplicationTags;
            return this;
        }

        public Builder recordClientAddress(Boolean recordClientAddress) {
            $.recordClientAddress = recordClientAddress;
            return this;
        }

        public InsightsConfigResponse build() {
            $.queryInsightsEnabled = Objects.requireNonNull($.queryInsightsEnabled, "expected parameter 'queryInsightsEnabled' to be non-null");
            $.queryPlansPerMinute = Objects.requireNonNull($.queryPlansPerMinute, "expected parameter 'queryPlansPerMinute' to be non-null");
            $.queryStringLength = Objects.requireNonNull($.queryStringLength, "expected parameter 'queryStringLength' to be non-null");
            $.recordApplicationTags = Objects.requireNonNull($.recordApplicationTags, "expected parameter 'recordApplicationTags' to be non-null");
            $.recordClientAddress = Objects.requireNonNull($.recordClientAddress, "expected parameter 'recordClientAddress' to be non-null");
            return $;
        }
    }

}
