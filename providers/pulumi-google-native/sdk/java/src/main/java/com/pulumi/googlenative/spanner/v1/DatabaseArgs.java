// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.spanner.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.spanner.v1.enums.DatabaseDatabaseDialect;
import com.pulumi.googlenative.spanner.v1.inputs.EncryptionConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
     * 
     */
    @Import(name="createStatement", required=true)
    private Output<String> createStatement;

    /**
     * @return A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
     * 
     */
    public Output<String> createStatement() {
        return this.createStatement;
    }

    /**
     * Optional. The dialect of the Cloud Spanner Database.
     * 
     */
    @Import(name="databaseDialect")
    private @Nullable Output<DatabaseDatabaseDialect> databaseDialect;

    /**
     * @return Optional. The dialect of the Cloud Spanner Database.
     * 
     */
    public Optional<Output<DatabaseDatabaseDialect>> databaseDialect() {
        return Optional.ofNullable(this.databaseDialect);
    }

    /**
     * Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
     * 
     */
    @Import(name="encryptionConfig")
    private @Nullable Output<EncryptionConfigArgs> encryptionConfig;

    /**
     * @return Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
     * 
     */
    public Optional<Output<EncryptionConfigArgs>> encryptionConfig() {
        return Optional.ofNullable(this.encryptionConfig);
    }

    /**
     * Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
     * 
     */
    @Import(name="extraStatements")
    private @Nullable Output<List<String>> extraStatements;

    /**
     * @return Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
     * 
     */
    public Optional<Output<List<String>>> extraStatements() {
        return Optional.ofNullable(this.extraStatements);
    }

    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.createStatement = $.createStatement;
        this.databaseDialect = $.databaseDialect;
        this.encryptionConfig = $.encryptionConfig;
        this.extraStatements = $.extraStatements;
        this.instanceId = $.instanceId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createStatement A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
         * 
         * @return builder
         * 
         */
        public Builder createStatement(Output<String> createStatement) {
            $.createStatement = createStatement;
            return this;
        }

        /**
         * @param createStatement A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
         * 
         * @return builder
         * 
         */
        public Builder createStatement(String createStatement) {
            return createStatement(Output.of(createStatement));
        }

        /**
         * @param databaseDialect Optional. The dialect of the Cloud Spanner Database.
         * 
         * @return builder
         * 
         */
        public Builder databaseDialect(@Nullable Output<DatabaseDatabaseDialect> databaseDialect) {
            $.databaseDialect = databaseDialect;
            return this;
        }

        /**
         * @param databaseDialect Optional. The dialect of the Cloud Spanner Database.
         * 
         * @return builder
         * 
         */
        public Builder databaseDialect(DatabaseDatabaseDialect databaseDialect) {
            return databaseDialect(Output.of(databaseDialect));
        }

        /**
         * @param encryptionConfig Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(@Nullable Output<EncryptionConfigArgs> encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        /**
         * @param encryptionConfig Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(EncryptionConfigArgs encryptionConfig) {
            return encryptionConfig(Output.of(encryptionConfig));
        }

        /**
         * @param extraStatements Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
         * 
         * @return builder
         * 
         */
        public Builder extraStatements(@Nullable Output<List<String>> extraStatements) {
            $.extraStatements = extraStatements;
            return this;
        }

        /**
         * @param extraStatements Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
         * 
         * @return builder
         * 
         */
        public Builder extraStatements(List<String> extraStatements) {
            return extraStatements(Output.of(extraStatements));
        }

        /**
         * @param extraStatements Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
         * 
         * @return builder
         * 
         */
        public Builder extraStatements(String... extraStatements) {
            return extraStatements(List.of(extraStatements));
        }

        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public DatabaseArgs build() {
            $.createStatement = Objects.requireNonNull($.createStatement, "expected parameter 'createStatement' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            return $;
        }
    }

}
