// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies how many time series must fail a predicate to trigger a condition. If not specified, then a {count: 1} trigger is used.
 * 
 */
public final class TriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerArgs Empty = new TriggerArgs();

    /**
     * The absolute number of time series that must fail the predicate for the condition to be triggered.
     * 
     */
    @Import(name="count")
    private @Nullable Output<Integer> count;

    /**
     * @return The absolute number of time series that must fail the predicate for the condition to be triggered.
     * 
     */
    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * The percentage of time series that must fail the predicate for the condition to be triggered.
     * 
     */
    @Import(name="percent")
    private @Nullable Output<Double> percent;

    /**
     * @return The percentage of time series that must fail the predicate for the condition to be triggered.
     * 
     */
    public Optional<Output<Double>> percent() {
        return Optional.ofNullable(this.percent);
    }

    private TriggerArgs() {}

    private TriggerArgs(TriggerArgs $) {
        this.count = $.count;
        this.percent = $.percent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerArgs $;

        public Builder() {
            $ = new TriggerArgs();
        }

        public Builder(TriggerArgs defaults) {
            $ = new TriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count The absolute number of time series that must fail the predicate for the condition to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The absolute number of time series that must fail the predicate for the condition to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param percent The percentage of time series that must fail the predicate for the condition to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder percent(@Nullable Output<Double> percent) {
            $.percent = percent;
            return this;
        }

        /**
         * @param percent The percentage of time series that must fail the predicate for the condition to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder percent(Double percent) {
            return percent(Output.of(percent));
        }

        public TriggerArgs build() {
            return $;
        }
    }

}
