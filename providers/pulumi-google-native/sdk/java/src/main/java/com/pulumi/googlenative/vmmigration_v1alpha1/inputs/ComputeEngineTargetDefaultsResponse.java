// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.AppliedLicenseResponse;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.ComputeSchedulingResponse;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.NetworkInterfaceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
 * 
 */
public final class ComputeEngineTargetDefaultsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComputeEngineTargetDefaultsResponse Empty = new ComputeEngineTargetDefaultsResponse();

    /**
     * Additional licenses to assign to the VM.
     * 
     */
    @Import(name="additionalLicenses", required=true)
    private List<String> additionalLicenses;

    /**
     * @return Additional licenses to assign to the VM.
     * 
     */
    public List<String> additionalLicenses() {
        return this.additionalLicenses;
    }

    /**
     * The OS license returned from the adaptation module report.
     * 
     */
    @Import(name="appliedLicense", required=true)
    private AppliedLicenseResponse appliedLicense;

    /**
     * @return The OS license returned from the adaptation module report.
     * 
     */
    public AppliedLicenseResponse appliedLicense() {
        return this.appliedLicense;
    }

    /**
     * The VM Boot Option, as set in the source vm.
     * 
     */
    @Import(name="bootOption", required=true)
    private String bootOption;

    /**
     * @return The VM Boot Option, as set in the source vm.
     * 
     */
    public String bootOption() {
        return this.bootOption;
    }

    /**
     * Compute instance scheduling information (if empty default is used).
     * 
     */
    @Import(name="computeScheduling", required=true)
    private ComputeSchedulingResponse computeScheduling;

    /**
     * @return Compute instance scheduling information (if empty default is used).
     * 
     */
    public ComputeSchedulingResponse computeScheduling() {
        return this.computeScheduling;
    }

    /**
     * The disk type to use in the VM.
     * 
     */
    @Import(name="diskType", required=true)
    private String diskType;

    /**
     * @return The disk type to use in the VM.
     * 
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * A map of labels to associate with the VM.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return A map of labels to associate with the VM.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * The license type to use in OS adaptation.
     * 
     */
    @Import(name="licenseType", required=true)
    private String licenseType;

    /**
     * @return The license type to use in OS adaptation.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }

    /**
     * The machine type to create the VM with.
     * 
     */
    @Import(name="machineType", required=true)
    private String machineType;

    /**
     * @return The machine type to create the VM with.
     * 
     */
    public String machineType() {
        return this.machineType;
    }

    /**
     * The machine type series to create the VM with.
     * 
     */
    @Import(name="machineTypeSeries", required=true)
    private String machineTypeSeries;

    /**
     * @return The machine type series to create the VM with.
     * 
     */
    public String machineTypeSeries() {
        return this.machineTypeSeries;
    }

    /**
     * The metadata key/value pairs to assign to the VM.
     * 
     */
    @Import(name="metadata", required=true)
    private Map<String,String> metadata;

    /**
     * @return The metadata key/value pairs to assign to the VM.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }

    /**
     * List of NICs connected to this VM.
     * 
     */
    @Import(name="networkInterfaces", required=true)
    private List<NetworkInterfaceResponse> networkInterfaces;

    /**
     * @return List of NICs connected to this VM.
     * 
     */
    public List<NetworkInterfaceResponse> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * A map of network tags to associate with the VM.
     * 
     */
    @Import(name="networkTags", required=true)
    private List<String> networkTags;

    /**
     * @return A map of network tags to associate with the VM.
     * 
     */
    public List<String> networkTags() {
        return this.networkTags;
    }

    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     * 
     */
    @Import(name="secureBoot", required=true)
    private Boolean secureBoot;

    /**
     * @return Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     * 
     */
    public Boolean secureBoot() {
        return this.secureBoot;
    }

    /**
     * The service account to associate the VM with.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    /**
     * @return The service account to associate the VM with.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     * 
     */
    @Import(name="targetProject", required=true)
    private String targetProject;

    /**
     * @return The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     * 
     */
    public String targetProject() {
        return this.targetProject;
    }

    /**
     * The name of the VM to create.
     * 
     */
    @Import(name="vmName", required=true)
    private String vmName;

    /**
     * @return The name of the VM to create.
     * 
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * The zone in which to create the VM.
     * 
     */
    @Import(name="zone", required=true)
    private String zone;

    /**
     * @return The zone in which to create the VM.
     * 
     */
    public String zone() {
        return this.zone;
    }

    private ComputeEngineTargetDefaultsResponse() {}

    private ComputeEngineTargetDefaultsResponse(ComputeEngineTargetDefaultsResponse $) {
        this.additionalLicenses = $.additionalLicenses;
        this.appliedLicense = $.appliedLicense;
        this.bootOption = $.bootOption;
        this.computeScheduling = $.computeScheduling;
        this.diskType = $.diskType;
        this.labels = $.labels;
        this.licenseType = $.licenseType;
        this.machineType = $.machineType;
        this.machineTypeSeries = $.machineTypeSeries;
        this.metadata = $.metadata;
        this.networkInterfaces = $.networkInterfaces;
        this.networkTags = $.networkTags;
        this.secureBoot = $.secureBoot;
        this.serviceAccount = $.serviceAccount;
        this.targetProject = $.targetProject;
        this.vmName = $.vmName;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeEngineTargetDefaultsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeEngineTargetDefaultsResponse $;

        public Builder() {
            $ = new ComputeEngineTargetDefaultsResponse();
        }

        public Builder(ComputeEngineTargetDefaultsResponse defaults) {
            $ = new ComputeEngineTargetDefaultsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalLicenses Additional licenses to assign to the VM.
         * 
         * @return builder
         * 
         */
        public Builder additionalLicenses(List<String> additionalLicenses) {
            $.additionalLicenses = additionalLicenses;
            return this;
        }

        /**
         * @param additionalLicenses Additional licenses to assign to the VM.
         * 
         * @return builder
         * 
         */
        public Builder additionalLicenses(String... additionalLicenses) {
            return additionalLicenses(List.of(additionalLicenses));
        }

        /**
         * @param appliedLicense The OS license returned from the adaptation module report.
         * 
         * @return builder
         * 
         */
        public Builder appliedLicense(AppliedLicenseResponse appliedLicense) {
            $.appliedLicense = appliedLicense;
            return this;
        }

        /**
         * @param bootOption The VM Boot Option, as set in the source vm.
         * 
         * @return builder
         * 
         */
        public Builder bootOption(String bootOption) {
            $.bootOption = bootOption;
            return this;
        }

        /**
         * @param computeScheduling Compute instance scheduling information (if empty default is used).
         * 
         * @return builder
         * 
         */
        public Builder computeScheduling(ComputeSchedulingResponse computeScheduling) {
            $.computeScheduling = computeScheduling;
            return this;
        }

        /**
         * @param diskType The disk type to use in the VM.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param labels A map of labels to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param licenseType The license type to use in OS adaptation.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param machineType The machine type to create the VM with.
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineTypeSeries The machine type series to create the VM with.
         * 
         * @return builder
         * 
         */
        public Builder machineTypeSeries(String machineTypeSeries) {
            $.machineTypeSeries = machineTypeSeries;
            return this;
        }

        /**
         * @param metadata The metadata key/value pairs to assign to the VM.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param networkInterfaces List of NICs connected to this VM.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<NetworkInterfaceResponse> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces List of NICs connected to this VM.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(NetworkInterfaceResponse... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param networkTags A map of network tags to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(List<String> networkTags) {
            $.networkTags = networkTags;
            return this;
        }

        /**
         * @param networkTags A map of network tags to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }

        /**
         * @param secureBoot Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
         * 
         * @return builder
         * 
         */
        public Builder secureBoot(Boolean secureBoot) {
            $.secureBoot = secureBoot;
            return this;
        }

        /**
         * @param serviceAccount The service account to associate the VM with.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param targetProject The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
         * 
         * @return builder
         * 
         */
        public Builder targetProject(String targetProject) {
            $.targetProject = targetProject;
            return this;
        }

        /**
         * @param vmName The name of the VM to create.
         * 
         * @return builder
         * 
         */
        public Builder vmName(String vmName) {
            $.vmName = vmName;
            return this;
        }

        /**
         * @param zone The zone in which to create the VM.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            $.zone = zone;
            return this;
        }

        public ComputeEngineTargetDefaultsResponse build() {
            $.additionalLicenses = Objects.requireNonNull($.additionalLicenses, "expected parameter 'additionalLicenses' to be non-null");
            $.appliedLicense = Objects.requireNonNull($.appliedLicense, "expected parameter 'appliedLicense' to be non-null");
            $.bootOption = Objects.requireNonNull($.bootOption, "expected parameter 'bootOption' to be non-null");
            $.computeScheduling = Objects.requireNonNull($.computeScheduling, "expected parameter 'computeScheduling' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.licenseType = Objects.requireNonNull($.licenseType, "expected parameter 'licenseType' to be non-null");
            $.machineType = Objects.requireNonNull($.machineType, "expected parameter 'machineType' to be non-null");
            $.machineTypeSeries = Objects.requireNonNull($.machineTypeSeries, "expected parameter 'machineTypeSeries' to be non-null");
            $.metadata = Objects.requireNonNull($.metadata, "expected parameter 'metadata' to be non-null");
            $.networkInterfaces = Objects.requireNonNull($.networkInterfaces, "expected parameter 'networkInterfaces' to be non-null");
            $.networkTags = Objects.requireNonNull($.networkTags, "expected parameter 'networkTags' to be non-null");
            $.secureBoot = Objects.requireNonNull($.secureBoot, "expected parameter 'secureBoot' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.targetProject = Objects.requireNonNull($.targetProject, "expected parameter 'targetProject' to be non-null");
            $.vmName = Objects.requireNonNull($.vmName, "expected parameter 'vmName' to be non-null");
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
