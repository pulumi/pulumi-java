// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.spanner_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Information about a backup.
 * 
 */
public final class BackupInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackupInfoResponse Empty = new BackupInfoResponse();

    /**
     * Name of the backup.
     * 
     */
    @Import(name="backup", required=true)
    private String backup;

    public String backup() {
        return this.backup;
    }

    /**
     * The time the CreateBackup request was received.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    public String createTime() {
        return this.createTime;
    }

    /**
     * Name of the database the backup was created from.
     * 
     */
    @Import(name="sourceDatabase", required=true)
    private String sourceDatabase;

    public String sourceDatabase() {
        return this.sourceDatabase;
    }

    /**
     * The backup contains an externally consistent copy of `source_database` at the timestamp specified by `version_time`. If the CreateBackup request did not specify `version_time`, the `version_time` of the backup is equivalent to the `create_time`.
     * 
     */
    @Import(name="versionTime", required=true)
    private String versionTime;

    public String versionTime() {
        return this.versionTime;
    }

    private BackupInfoResponse() {}

    private BackupInfoResponse(BackupInfoResponse $) {
        this.backup = $.backup;
        this.createTime = $.createTime;
        this.sourceDatabase = $.sourceDatabase;
        this.versionTime = $.versionTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupInfoResponse $;

        public Builder() {
            $ = new BackupInfoResponse();
        }

        public Builder(BackupInfoResponse defaults) {
            $ = new BackupInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder backup(String backup) {
            $.backup = backup;
            return this;
        }

        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder sourceDatabase(String sourceDatabase) {
            $.sourceDatabase = sourceDatabase;
            return this;
        }

        public Builder versionTime(String versionTime) {
            $.versionTime = versionTime;
            return this;
        }

        public BackupInfoResponse build() {
            $.backup = Objects.requireNonNull($.backup, "expected parameter 'backup' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.sourceDatabase = Objects.requireNonNull($.sourceDatabase, "expected parameter 'sourceDatabase' to be non-null");
            $.versionTime = Objects.requireNonNull($.versionTime, "expected parameter 'versionTime' to be non-null");
            return $;
        }
    }

}
