// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The bucket&#39;s logging configuration, which defines the destination bucket and optional name prefix for the current bucket&#39;s logs.
 * 
 */
public final class BucketLoggingResponse extends com.pulumi.resources.InvokeArgs {

    public static final BucketLoggingResponse Empty = new BucketLoggingResponse();

    /**
     * The destination bucket where the current bucket&#39;s logs should be placed.
     * 
     */
    @Import(name="logBucket", required=true)
    private String logBucket;

    /**
     * @return The destination bucket where the current bucket&#39;s logs should be placed.
     * 
     */
    public String logBucket() {
        return this.logBucket;
    }

    /**
     * A prefix for log object names.
     * 
     */
    @Import(name="logObjectPrefix", required=true)
    private String logObjectPrefix;

    /**
     * @return A prefix for log object names.
     * 
     */
    public String logObjectPrefix() {
        return this.logObjectPrefix;
    }

    private BucketLoggingResponse() {}

    private BucketLoggingResponse(BucketLoggingResponse $) {
        this.logBucket = $.logBucket;
        this.logObjectPrefix = $.logObjectPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLoggingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLoggingResponse $;

        public Builder() {
            $ = new BucketLoggingResponse();
        }

        public Builder(BucketLoggingResponse defaults) {
            $ = new BucketLoggingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param logBucket The destination bucket where the current bucket&#39;s logs should be placed.
         * 
         * @return builder
         * 
         */
        public Builder logBucket(String logBucket) {
            $.logBucket = logBucket;
            return this;
        }

        /**
         * @param logObjectPrefix A prefix for log object names.
         * 
         * @return builder
         * 
         */
        public Builder logObjectPrefix(String logObjectPrefix) {
            $.logObjectPrefix = logObjectPrefix;
            return this;
        }

        public BucketLoggingResponse build() {
            $.logBucket = Objects.requireNonNull($.logBucket, "expected parameter 'logBucket' to be non-null");
            $.logObjectPrefix = Objects.requireNonNull($.logObjectPrefix, "expected parameter 'logObjectPrefix' to be non-null");
            return $;
        }
    }

}
