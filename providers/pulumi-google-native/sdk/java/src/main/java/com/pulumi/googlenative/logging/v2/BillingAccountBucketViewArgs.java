// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BillingAccountBucketViewArgs extends com.pulumi.resources.ResourceArgs {

    public static final BillingAccountBucketViewArgs Empty = new BillingAccountBucketViewArgs();

    @Import(name="billingAccountId", required=true)
    private Output<String> billingAccountId;

    public Output<String> billingAccountId() {
        return this.billingAccountId;
    }

    @Import(name="bucketId", required=true)
    private Output<String> bucketId;

    public Output<String> bucketId() {
        return this.bucketId;
    }

    /**
     * Describes this view.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Describes this view.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Filter that restricts which log entries in a bucket are visible in this view.Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log idFor example:SOURCE(&#34;projects/myproject&#34;) AND resource.type = &#34;gce_instance&#34; AND LOG_ID(&#34;stdout&#34;)
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return Filter that restricts which log entries in a bucket are visible in this view.Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log idFor example:SOURCE(&#34;projects/myproject&#34;) AND resource.type = &#34;gce_instance&#34; AND LOG_ID(&#34;stdout&#34;)
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Required. The id to use for this view.
     * 
     */
    @Import(name="viewId", required=true)
    private Output<String> viewId;

    /**
     * @return Required. The id to use for this view.
     * 
     */
    public Output<String> viewId() {
        return this.viewId;
    }

    private BillingAccountBucketViewArgs() {}

    private BillingAccountBucketViewArgs(BillingAccountBucketViewArgs $) {
        this.billingAccountId = $.billingAccountId;
        this.bucketId = $.bucketId;
        this.description = $.description;
        this.filter = $.filter;
        this.location = $.location;
        this.name = $.name;
        this.viewId = $.viewId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BillingAccountBucketViewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BillingAccountBucketViewArgs $;

        public Builder() {
            $ = new BillingAccountBucketViewArgs();
        }

        public Builder(BillingAccountBucketViewArgs defaults) {
            $ = new BillingAccountBucketViewArgs(Objects.requireNonNull(defaults));
        }

        public Builder billingAccountId(Output<String> billingAccountId) {
            $.billingAccountId = billingAccountId;
            return this;
        }

        public Builder billingAccountId(String billingAccountId) {
            return billingAccountId(Output.of(billingAccountId));
        }

        public Builder bucketId(Output<String> bucketId) {
            $.bucketId = bucketId;
            return this;
        }

        public Builder bucketId(String bucketId) {
            return bucketId(Output.of(bucketId));
        }

        /**
         * @param description Describes this view.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Describes this view.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filter Filter that restricts which log entries in a bucket are visible in this view.Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log idFor example:SOURCE(&#34;projects/myproject&#34;) AND resource.type = &#34;gce_instance&#34; AND LOG_ID(&#34;stdout&#34;)
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Filter that restricts which log entries in a bucket are visible in this view.Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log idFor example:SOURCE(&#34;projects/myproject&#34;) AND resource.type = &#34;gce_instance&#34; AND LOG_ID(&#34;stdout&#34;)
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param viewId Required. The id to use for this view.
         * 
         * @return builder
         * 
         */
        public Builder viewId(Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId Required. The id to use for this view.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        public BillingAccountBucketViewArgs build() {
            $.billingAccountId = Objects.requireNonNull($.billingAccountId, "expected parameter 'billingAccountId' to be non-null");
            $.bucketId = Objects.requireNonNull($.bucketId, "expected parameter 'bucketId' to be non-null");
            $.viewId = Objects.requireNonNull($.viewId, "expected parameter 'viewId' to be non-null");
            return $;
        }
    }

}
