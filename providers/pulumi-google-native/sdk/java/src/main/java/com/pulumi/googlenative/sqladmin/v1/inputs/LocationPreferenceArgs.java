// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
 * 
 */
public final class LocationPreferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocationPreferenceArgs Empty = new LocationPreferenceArgs();

    /**
     * The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
     * 
     */
    @Import(name="followGaeApplication")
    private @Nullable Output<String> followGaeApplication;

    /**
     * @return The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
     * 
     */
    public Optional<Output<String>> followGaeApplication() {
        return Optional.ofNullable(this.followGaeApplication);
    }

    /**
     * This is always `sql#locationPreference`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return This is always `sql#locationPreference`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
     * 
     */
    @Import(name="secondaryZone")
    private @Nullable Output<String> secondaryZone;

    /**
     * @return The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
     * 
     */
    public Optional<Output<String>> secondaryZone() {
        return Optional.ofNullable(this.secondaryZone);
    }

    /**
     * The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private LocationPreferenceArgs() {}

    private LocationPreferenceArgs(LocationPreferenceArgs $) {
        this.followGaeApplication = $.followGaeApplication;
        this.kind = $.kind;
        this.secondaryZone = $.secondaryZone;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocationPreferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocationPreferenceArgs $;

        public Builder() {
            $ = new LocationPreferenceArgs();
        }

        public Builder(LocationPreferenceArgs defaults) {
            $ = new LocationPreferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param followGaeApplication The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
         * 
         * @return builder
         * 
         */
        public Builder followGaeApplication(@Nullable Output<String> followGaeApplication) {
            $.followGaeApplication = followGaeApplication;
            return this;
        }

        /**
         * @param followGaeApplication The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
         * 
         * @return builder
         * 
         */
        public Builder followGaeApplication(String followGaeApplication) {
            return followGaeApplication(Output.of(followGaeApplication));
        }

        /**
         * @param kind This is always `sql#locationPreference`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind This is always `sql#locationPreference`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param secondaryZone The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
         * 
         * @return builder
         * 
         */
        public Builder secondaryZone(@Nullable Output<String> secondaryZone) {
            $.secondaryZone = secondaryZone;
            return this;
        }

        /**
         * @param secondaryZone The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
         * 
         * @return builder
         * 
         */
        public Builder secondaryZone(String secondaryZone) {
            return secondaryZone(Output.of(secondaryZone));
        }

        /**
         * @param zone The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public LocationPreferenceArgs build() {
            return $;
        }
    }

}
