// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.contactcenterinsights.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.contactcenterinsights.v1.enums.ConversationMedium;
import com.pulumi.googlenative.contactcenterinsights.v1.inputs.GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs;
import com.pulumi.googlenative.contactcenterinsights.v1.inputs.GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConversationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConversationArgs Empty = new ConversationArgs();

    /**
     * An opaque, user-specified string representing the human agent who handled the conversation.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return An opaque, user-specified string representing the human agent who handled the conversation.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * Call-specific metadata.
     * 
     */
    @Import(name="callMetadata")
    private @Nullable Output<GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs> callMetadata;

    /**
     * @return Call-specific metadata.
     * 
     */
    public Optional<Output<GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs>> callMetadata() {
        return Optional.ofNullable(this.callMetadata);
    }

    /**
     * A unique ID for the new conversation. This ID will become the final component of the conversation&#39;s resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`
     * 
     */
    @Import(name="conversationId")
    private @Nullable Output<String> conversationId;

    /**
     * @return A unique ID for the new conversation. This ID will become the final component of the conversation&#39;s resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`
     * 
     */
    public Optional<Output<String>> conversationId() {
        return Optional.ofNullable(this.conversationId);
    }

    /**
     * The source of the audio and transcription for the conversation.
     * 
     */
    @Import(name="dataSource")
    private @Nullable Output<GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs> dataSource;

    /**
     * @return The source of the audio and transcription for the conversation.
     * 
     */
    public Optional<Output<GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    /**
     * The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * A user-specified language code for the conversation.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    /**
     * @return A user-specified language code for the conversation.
     * 
     */
    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
     * 
     */
    @Import(name="medium")
    private @Nullable Output<ConversationMedium> medium;

    /**
     * @return Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
     * 
     */
    public Optional<Output<ConversationMedium>> medium() {
        return Optional.ofNullable(this.medium);
    }

    /**
     * Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Obfuscated user ID which the customer sent to us.
     * 
     */
    @Import(name="obfuscatedUserId")
    private @Nullable Output<String> obfuscatedUserId;

    /**
     * @return Obfuscated user ID which the customer sent to us.
     * 
     */
    public Optional<Output<String>> obfuscatedUserId() {
        return Optional.ofNullable(this.obfuscatedUserId);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The time at which the conversation started.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The time at which the conversation started.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private ConversationArgs() {}

    private ConversationArgs(ConversationArgs $) {
        this.agentId = $.agentId;
        this.callMetadata = $.callMetadata;
        this.conversationId = $.conversationId;
        this.dataSource = $.dataSource;
        this.expireTime = $.expireTime;
        this.labels = $.labels;
        this.languageCode = $.languageCode;
        this.location = $.location;
        this.medium = $.medium;
        this.name = $.name;
        this.obfuscatedUserId = $.obfuscatedUserId;
        this.project = $.project;
        this.startTime = $.startTime;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConversationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConversationArgs $;

        public Builder() {
            $ = new ConversationArgs();
        }

        public Builder(ConversationArgs defaults) {
            $ = new ConversationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId An opaque, user-specified string representing the human agent who handled the conversation.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId An opaque, user-specified string representing the human agent who handled the conversation.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param callMetadata Call-specific metadata.
         * 
         * @return builder
         * 
         */
        public Builder callMetadata(@Nullable Output<GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs> callMetadata) {
            $.callMetadata = callMetadata;
            return this;
        }

        /**
         * @param callMetadata Call-specific metadata.
         * 
         * @return builder
         * 
         */
        public Builder callMetadata(GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs callMetadata) {
            return callMetadata(Output.of(callMetadata));
        }

        /**
         * @param conversationId A unique ID for the new conversation. This ID will become the final component of the conversation&#39;s resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`
         * 
         * @return builder
         * 
         */
        public Builder conversationId(@Nullable Output<String> conversationId) {
            $.conversationId = conversationId;
            return this;
        }

        /**
         * @param conversationId A unique ID for the new conversation. This ID will become the final component of the conversation&#39;s resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`
         * 
         * @return builder
         * 
         */
        public Builder conversationId(String conversationId) {
            return conversationId(Output.of(conversationId));
        }

        /**
         * @param dataSource The source of the audio and transcription for the conversation.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(@Nullable Output<GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource The source of the audio and transcription for the conversation.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param expireTime The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param labels A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param languageCode A user-specified language code for the conversation.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        /**
         * @param languageCode A user-specified language code for the conversation.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param medium Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
         * 
         * @return builder
         * 
         */
        public Builder medium(@Nullable Output<ConversationMedium> medium) {
            $.medium = medium;
            return this;
        }

        /**
         * @param medium Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
         * 
         * @return builder
         * 
         */
        public Builder medium(ConversationMedium medium) {
            return medium(Output.of(medium));
        }

        /**
         * @param name Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param obfuscatedUserId Obfuscated user ID which the customer sent to us.
         * 
         * @return builder
         * 
         */
        public Builder obfuscatedUserId(@Nullable Output<String> obfuscatedUserId) {
            $.obfuscatedUserId = obfuscatedUserId;
            return this;
        }

        /**
         * @param obfuscatedUserId Obfuscated user ID which the customer sent to us.
         * 
         * @return builder
         * 
         */
        public Builder obfuscatedUserId(String obfuscatedUserId) {
            return obfuscatedUserId(Output.of(obfuscatedUserId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param startTime The time at which the conversation started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time at which the conversation started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param ttl Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public ConversationArgs build() {
            return $;
        }
    }

}
