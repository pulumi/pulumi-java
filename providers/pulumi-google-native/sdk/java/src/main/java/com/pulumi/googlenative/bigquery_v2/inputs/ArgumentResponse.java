// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.StandardSqlDataTypeResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Input/output argument of a function or a stored procedure.
 * 
 */
public final class ArgumentResponse extends com.pulumi.resources.InvokeArgs {

    public static final ArgumentResponse Empty = new ArgumentResponse();

    /**
     * Optional. Defaults to FIXED_TYPE.
     * 
     */
    @Import(name="argumentKind", required=true)
      private final String argumentKind;

    public String argumentKind() {
        return this.argumentKind;
    }

    /**
     * Required unless argument_kind = ANY_TYPE.
     * 
     */
    @Import(name="dataType", required=true)
      private final StandardSqlDataTypeResponse dataType;

    public StandardSqlDataTypeResponse dataType() {
        return this.dataType;
    }

    /**
     * Optional. Specifies whether the argument is input or output. Can be set for procedures only.
     * 
     */
    @Import(name="mode", required=true)
      private final String mode;

    public String mode() {
        return this.mode;
    }

    /**
     * Optional. The name of this argument. Can be absent for function return argument.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    public ArgumentResponse(
        String argumentKind,
        StandardSqlDataTypeResponse dataType,
        String mode,
        String name) {
        this.argumentKind = Objects.requireNonNull(argumentKind, "expected parameter 'argumentKind' to be non-null");
        this.dataType = Objects.requireNonNull(dataType, "expected parameter 'dataType' to be non-null");
        this.mode = Objects.requireNonNull(mode, "expected parameter 'mode' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private ArgumentResponse() {
        this.argumentKind = null;
        this.dataType = null;
        this.mode = null;
        this.name = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArgumentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String argumentKind;
        private StandardSqlDataTypeResponse dataType;
        private String mode;
        private String name;

        public Builder() {
    	      // Empty
        }

        public Builder(ArgumentResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.argumentKind = defaults.argumentKind;
    	      this.dataType = defaults.dataType;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
        }

        public Builder argumentKind(String argumentKind) {
            this.argumentKind = Objects.requireNonNull(argumentKind);
            return this;
        }
        public Builder dataType(StandardSqlDataTypeResponse dataType) {
            this.dataType = Objects.requireNonNull(dataType);
            return this;
        }
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }        public ArgumentResponse build() {
            return new ArgumentResponse(argumentKind, dataType, mode, name);
        }
    }
}
