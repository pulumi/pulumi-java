// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.MaxPodsConstraintResponse;
import com.pulumi.googlenative.container_v1.inputs.NodeConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.NodeManagementResponse;
import com.pulumi.googlenative.container_v1.inputs.NodeNetworkConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.NodePoolAutoscalingResponse;
import com.pulumi.googlenative.container_v1.inputs.StatusConditionResponse;
import com.pulumi.googlenative.container_v1.inputs.UpgradeSettingsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * NodePool contains the name and configuration for a cluster&#39;s node pool. Node pools are a set of nodes (i.e. VM&#39;s), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
 * 
 */
public final class NodePoolResponse extends com.pulumi.resources.InvokeArgs {

    public static final NodePoolResponse Empty = new NodePoolResponse();

    /**
     * Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
     * 
     */
    @Import(name="autoscaling", required=true)
    private NodePoolAutoscalingResponse autoscaling;

    public NodePoolAutoscalingResponse autoscaling() {
        return this.autoscaling;
    }

    /**
     * Which conditions caused the current node pool state.
     * 
     */
    @Import(name="conditions", required=true)
    private List<StatusConditionResponse> conditions;

    public List<StatusConditionResponse> conditions() {
        return this.conditions;
    }

    /**
     * The node configuration of the pool.
     * 
     */
    @Import(name="config", required=true)
    private NodeConfigResponse config;

    public NodeConfigResponse config() {
        return this.config;
    }

    /**
     * The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
     * 
     */
    @Import(name="initialNodeCount", required=true)
    private Integer initialNodeCount;

    public Integer initialNodeCount() {
        return this.initialNodeCount;
    }

    /**
     * [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
     * 
     */
    @Import(name="instanceGroupUrls", required=true)
    private List<String> instanceGroupUrls;

    public List<String> instanceGroupUrls() {
        return this.instanceGroupUrls;
    }

    /**
     * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool&#39;s nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
     * 
     */
    @Import(name="locations", required=true)
    private List<String> locations;

    public List<String> locations() {
        return this.locations;
    }

    /**
     * NodeManagement configuration for this NodePool.
     * 
     */
    @Import(name="management", required=true)
    private NodeManagementResponse management;

    public NodeManagementResponse management() {
        return this.management;
    }

    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint", required=true)
    private MaxPodsConstraintResponse maxPodsConstraint;

    public MaxPodsConstraintResponse maxPodsConstraint() {
        return this.maxPodsConstraint;
    }

    /**
     * The name of the node pool.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     * 
     */
    @Import(name="networkConfig", required=true)
    private NodeNetworkConfigResponse networkConfig;

    public NodeNetworkConfigResponse networkConfig() {
        return this.networkConfig;
    }

    /**
     * [Output only] The pod CIDR block size per node in this node pool.
     * 
     */
    @Import(name="podIpv4CidrSize", required=true)
    private Integer podIpv4CidrSize;

    public Integer podIpv4CidrSize() {
        return this.podIpv4CidrSize;
    }

    /**
     * [Output only] Server-defined URL for the resource.
     * 
     */
    @Import(name="selfLink", required=true)
    private String selfLink;

    public String selfLink() {
        return this.selfLink;
    }

    /**
     * [Output only] The status of the nodes in this pool instance.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * Upgrade settings control disruption and speed of the upgrade.
     * 
     */
    @Import(name="upgradeSettings", required=true)
    private UpgradeSettingsResponse upgradeSettings;

    public UpgradeSettingsResponse upgradeSettings() {
        return this.upgradeSettings;
    }

    /**
     * The version of the Kubernetes of this node.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    private NodePoolResponse() {}

    private NodePoolResponse(NodePoolResponse $) {
        this.autoscaling = $.autoscaling;
        this.conditions = $.conditions;
        this.config = $.config;
        this.initialNodeCount = $.initialNodeCount;
        this.instanceGroupUrls = $.instanceGroupUrls;
        this.locations = $.locations;
        this.management = $.management;
        this.maxPodsConstraint = $.maxPodsConstraint;
        this.name = $.name;
        this.networkConfig = $.networkConfig;
        this.podIpv4CidrSize = $.podIpv4CidrSize;
        this.selfLink = $.selfLink;
        this.status = $.status;
        this.upgradeSettings = $.upgradeSettings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolResponse $;

        public Builder() {
            $ = new NodePoolResponse();
        }

        public Builder(NodePoolResponse defaults) {
            $ = new NodePoolResponse(Objects.requireNonNull(defaults));
        }

        public Builder autoscaling(NodePoolAutoscalingResponse autoscaling) {
            $.autoscaling = autoscaling;
            return this;
        }

        public Builder conditions(List<StatusConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(StatusConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder config(NodeConfigResponse config) {
            $.config = config;
            return this;
        }

        public Builder initialNodeCount(Integer initialNodeCount) {
            $.initialNodeCount = initialNodeCount;
            return this;
        }

        public Builder instanceGroupUrls(List<String> instanceGroupUrls) {
            $.instanceGroupUrls = instanceGroupUrls;
            return this;
        }

        public Builder instanceGroupUrls(String... instanceGroupUrls) {
            return instanceGroupUrls(List.of(instanceGroupUrls));
        }

        public Builder locations(List<String> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        public Builder management(NodeManagementResponse management) {
            $.management = management;
            return this;
        }

        public Builder maxPodsConstraint(MaxPodsConstraintResponse maxPodsConstraint) {
            $.maxPodsConstraint = maxPodsConstraint;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder networkConfig(NodeNetworkConfigResponse networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        public Builder podIpv4CidrSize(Integer podIpv4CidrSize) {
            $.podIpv4CidrSize = podIpv4CidrSize;
            return this;
        }

        public Builder selfLink(String selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder upgradeSettings(UpgradeSettingsResponse upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public NodePoolResponse build() {
            $.autoscaling = Objects.requireNonNull($.autoscaling, "expected parameter 'autoscaling' to be non-null");
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.initialNodeCount = Objects.requireNonNull($.initialNodeCount, "expected parameter 'initialNodeCount' to be non-null");
            $.instanceGroupUrls = Objects.requireNonNull($.instanceGroupUrls, "expected parameter 'instanceGroupUrls' to be non-null");
            $.locations = Objects.requireNonNull($.locations, "expected parameter 'locations' to be non-null");
            $.management = Objects.requireNonNull($.management, "expected parameter 'management' to be non-null");
            $.maxPodsConstraint = Objects.requireNonNull($.maxPodsConstraint, "expected parameter 'maxPodsConstraint' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.networkConfig = Objects.requireNonNull($.networkConfig, "expected parameter 'networkConfig' to be non-null");
            $.podIpv4CidrSize = Objects.requireNonNull($.podIpv4CidrSize, "expected parameter 'podIpv4CidrSize' to be non-null");
            $.selfLink = Objects.requireNonNull($.selfLink, "expected parameter 'selfLink' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.upgradeSettings = Objects.requireNonNull($.upgradeSettings, "expected parameter 'upgradeSettings' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
