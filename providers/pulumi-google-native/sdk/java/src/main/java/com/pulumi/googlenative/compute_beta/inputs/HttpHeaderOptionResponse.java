// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Specification determining how headers are added to requests or responses.
 * 
 */
public final class HttpHeaderOptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final HttpHeaderOptionResponse Empty = new HttpHeaderOptionResponse();

    /**
     * The name of the header.
     * 
     */
    @Import(name="headerName", required=true)
    private String headerName;

    /**
     * @return The name of the header.
     * 
     */
    public String headerName() {
        return this.headerName;
    }

    /**
     * The value of the header to add.
     * 
     */
    @Import(name="headerValue", required=true)
    private String headerValue;

    /**
     * @return The value of the header to add.
     * 
     */
    public String headerValue() {
        return this.headerValue;
    }

    /**
     * If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
     * 
     */
    @Import(name="replace", required=true)
    private Boolean replace;

    /**
     * @return If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
     * 
     */
    public Boolean replace() {
        return this.replace;
    }

    private HttpHeaderOptionResponse() {}

    private HttpHeaderOptionResponse(HttpHeaderOptionResponse $) {
        this.headerName = $.headerName;
        this.headerValue = $.headerValue;
        this.replace = $.replace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpHeaderOptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpHeaderOptionResponse $;

        public Builder() {
            $ = new HttpHeaderOptionResponse();
        }

        public Builder(HttpHeaderOptionResponse defaults) {
            $ = new HttpHeaderOptionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param headerName The name of the header.
         * 
         * @return builder
         * 
         */
        public Builder headerName(String headerName) {
            $.headerName = headerName;
            return this;
        }

        /**
         * @param headerValue The value of the header to add.
         * 
         * @return builder
         * 
         */
        public Builder headerValue(String headerValue) {
            $.headerValue = headerValue;
            return this;
        }

        /**
         * @param replace If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder replace(Boolean replace) {
            $.replace = replace;
            return this;
        }

        public HttpHeaderOptionResponse build() {
            $.headerName = Objects.requireNonNull($.headerName, "expected parameter 'headerName' to be non-null");
            $.headerValue = Objects.requireNonNull($.headerValue, "expected parameter 'headerValue' to be non-null");
            $.replace = Objects.requireNonNull($.replace, "expected parameter 'replace' to be non-null");
            return $;
        }
    }

}
