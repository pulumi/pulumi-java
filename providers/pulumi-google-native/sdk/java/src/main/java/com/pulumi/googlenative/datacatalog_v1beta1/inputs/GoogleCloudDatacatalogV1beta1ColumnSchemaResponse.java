// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datacatalog_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Representation of a column within a schema. Columns could be nested inside other columns.
 * 
 */
public final class GoogleCloudDatacatalogV1beta1ColumnSchemaResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDatacatalogV1beta1ColumnSchemaResponse Empty = new GoogleCloudDatacatalogV1beta1ColumnSchemaResponse();

    /**
     * Name of the column.
     * 
     */
    @Import(name="column", required=true)
    private String column;

    public String column() {
        return this.column;
    }

    /**
     * Optional. Description of the column. Default value is an empty string.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * Optional. A column&#39;s mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    public String mode() {
        return this.mode;
    }

    /**
     * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
     * 
     */
    @Import(name="subcolumns", required=true)
    private List<GoogleCloudDatacatalogV1beta1ColumnSchemaResponse> subcolumns;

    public List<GoogleCloudDatacatalogV1beta1ColumnSchemaResponse> subcolumns() {
        return this.subcolumns;
    }

    /**
     * Type of the column.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private GoogleCloudDatacatalogV1beta1ColumnSchemaResponse() {}

    private GoogleCloudDatacatalogV1beta1ColumnSchemaResponse(GoogleCloudDatacatalogV1beta1ColumnSchemaResponse $) {
        this.column = $.column;
        this.description = $.description;
        this.mode = $.mode;
        this.subcolumns = $.subcolumns;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDatacatalogV1beta1ColumnSchemaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDatacatalogV1beta1ColumnSchemaResponse $;

        public Builder() {
            $ = new GoogleCloudDatacatalogV1beta1ColumnSchemaResponse();
        }

        public Builder(GoogleCloudDatacatalogV1beta1ColumnSchemaResponse defaults) {
            $ = new GoogleCloudDatacatalogV1beta1ColumnSchemaResponse(Objects.requireNonNull(defaults));
        }

        public Builder column(String column) {
            $.column = column;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        public Builder subcolumns(List<GoogleCloudDatacatalogV1beta1ColumnSchemaResponse> subcolumns) {
            $.subcolumns = subcolumns;
            return this;
        }

        public Builder subcolumns(GoogleCloudDatacatalogV1beta1ColumnSchemaResponse... subcolumns) {
            return subcolumns(List.of(subcolumns));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GoogleCloudDatacatalogV1beta1ColumnSchemaResponse build() {
            $.column = Objects.requireNonNull($.column, "expected parameter 'column' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.subcolumns = Objects.requireNonNull($.subcolumns, "expected parameter 'subcolumns' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
