// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.deploymentmanager_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * InputMapping creates a &#39;virtual&#39; property that will be injected into the properties before sending the request to the underlying API.
 * 
 */
public final class InputMappingResponse extends com.pulumi.resources.InvokeArgs {

    public static final InputMappingResponse Empty = new InputMappingResponse();

    /**
     * The name of the field that is going to be injected.
     * 
     */
    @Import(name="fieldName", required=true)
    private String fieldName;

    /**
     * @return The name of the field that is going to be injected.
     * 
     */
    public String fieldName() {
        return this.fieldName;
    }

    /**
     * The location where this mapping applies.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location where this mapping applies.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * Regex to evaluate on method to decide if input applies.
     * 
     */
    @Import(name="methodMatch", required=true)
    private String methodMatch;

    /**
     * @return Regex to evaluate on method to decide if input applies.
     * 
     */
    public String methodMatch() {
        return this.methodMatch;
    }

    /**
     * A jsonPath expression to select an element.
     * 
     */
    @Import(name="value", required=true)
    private String value;

    /**
     * @return A jsonPath expression to select an element.
     * 
     */
    public String value() {
        return this.value;
    }

    private InputMappingResponse() {}

    private InputMappingResponse(InputMappingResponse $) {
        this.fieldName = $.fieldName;
        this.location = $.location;
        this.methodMatch = $.methodMatch;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputMappingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputMappingResponse $;

        public Builder() {
            $ = new InputMappingResponse();
        }

        public Builder(InputMappingResponse defaults) {
            $ = new InputMappingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldName The name of the field that is going to be injected.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param location The location where this mapping applies.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param methodMatch Regex to evaluate on method to decide if input applies.
         * 
         * @return builder
         * 
         */
        public Builder methodMatch(String methodMatch) {
            $.methodMatch = methodMatch;
            return this;
        }

        /**
         * @param value A jsonPath expression to select an element.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public InputMappingResponse build() {
            $.fieldName = Objects.requireNonNull($.fieldName, "expected parameter 'fieldName' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.methodMatch = Objects.requireNonNull($.methodMatch, "expected parameter 'methodMatch' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
