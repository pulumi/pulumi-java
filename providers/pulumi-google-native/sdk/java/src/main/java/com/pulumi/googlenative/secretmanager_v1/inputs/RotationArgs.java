// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.secretmanager_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
 * 
 */
public final class RotationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RotationArgs Empty = new RotationArgs();

    /**
     * Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
     * 
     */
    @Import(name="nextRotationTime")
      private final @Nullable Output<String> nextRotationTime;

    public Output<String> nextRotationTime() {
        return this.nextRotationTime == null ? Codegen.empty() : this.nextRotationTime;
    }

    /**
     * Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
     * 
     */
    @Import(name="rotationPeriod")
      private final @Nullable Output<String> rotationPeriod;

    public Output<String> rotationPeriod() {
        return this.rotationPeriod == null ? Codegen.empty() : this.rotationPeriod;
    }

    public RotationArgs(
        @Nullable Output<String> nextRotationTime,
        @Nullable Output<String> rotationPeriod) {
        this.nextRotationTime = nextRotationTime;
        this.rotationPeriod = rotationPeriod;
    }

    private RotationArgs() {
        this.nextRotationTime = Codegen.empty();
        this.rotationPeriod = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> nextRotationTime;
        private @Nullable Output<String> rotationPeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(RotationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nextRotationTime = defaults.nextRotationTime;
    	      this.rotationPeriod = defaults.rotationPeriod;
        }

        public Builder nextRotationTime(@Nullable Output<String> nextRotationTime) {
            this.nextRotationTime = nextRotationTime;
            return this;
        }
        public Builder nextRotationTime(@Nullable String nextRotationTime) {
            this.nextRotationTime = Codegen.ofNullable(nextRotationTime);
            return this;
        }
        public Builder rotationPeriod(@Nullable Output<String> rotationPeriod) {
            this.rotationPeriod = rotationPeriod;
            return this;
        }
        public Builder rotationPeriod(@Nullable String rotationPeriod) {
            this.rotationPeriod = Codegen.ofNullable(rotationPeriod);
            return this;
        }        public RotationArgs build() {
            return new RotationArgs(nextRotationTime, rotationPeriod);
        }
    }
}
