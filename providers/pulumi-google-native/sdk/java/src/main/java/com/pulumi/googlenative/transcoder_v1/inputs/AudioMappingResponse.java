// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
 * 
 */
public final class AudioMappingResponse extends com.pulumi.resources.InvokeArgs {

    public static final AudioMappingResponse Empty = new AudioMappingResponse();

    /**
     * The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
     * 
     */
    @Import(name="atomKey", required=true)
    private String atomKey;

    public String atomKey() {
        return this.atomKey;
    }

    /**
     * Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
     * 
     */
    @Import(name="gainDb", required=true)
    private Double gainDb;

    public Double gainDb() {
        return this.gainDb;
    }

    /**
     * The zero-based index of the channel in the input audio stream.
     * 
     */
    @Import(name="inputChannel", required=true)
    private Integer inputChannel;

    public Integer inputChannel() {
        return this.inputChannel;
    }

    /**
     * The `Input.key` that identifies the input file.
     * 
     */
    @Import(name="inputKey", required=true)
    private String inputKey;

    public String inputKey() {
        return this.inputKey;
    }

    /**
     * The zero-based index of the track in the input file.
     * 
     */
    @Import(name="inputTrack", required=true)
    private Integer inputTrack;

    public Integer inputTrack() {
        return this.inputTrack;
    }

    /**
     * The zero-based index of the channel in the output audio stream.
     * 
     */
    @Import(name="outputChannel", required=true)
    private Integer outputChannel;

    public Integer outputChannel() {
        return this.outputChannel;
    }

    private AudioMappingResponse() {}

    private AudioMappingResponse(AudioMappingResponse $) {
        this.atomKey = $.atomKey;
        this.gainDb = $.gainDb;
        this.inputChannel = $.inputChannel;
        this.inputKey = $.inputKey;
        this.inputTrack = $.inputTrack;
        this.outputChannel = $.outputChannel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AudioMappingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AudioMappingResponse $;

        public Builder() {
            $ = new AudioMappingResponse();
        }

        public Builder(AudioMappingResponse defaults) {
            $ = new AudioMappingResponse(Objects.requireNonNull(defaults));
        }

        public Builder atomKey(String atomKey) {
            $.atomKey = atomKey;
            return this;
        }

        public Builder gainDb(Double gainDb) {
            $.gainDb = gainDb;
            return this;
        }

        public Builder inputChannel(Integer inputChannel) {
            $.inputChannel = inputChannel;
            return this;
        }

        public Builder inputKey(String inputKey) {
            $.inputKey = inputKey;
            return this;
        }

        public Builder inputTrack(Integer inputTrack) {
            $.inputTrack = inputTrack;
            return this;
        }

        public Builder outputChannel(Integer outputChannel) {
            $.outputChannel = outputChannel;
            return this;
        }

        public AudioMappingResponse build() {
            $.atomKey = Objects.requireNonNull($.atomKey, "expected parameter 'atomKey' to be non-null");
            $.gainDb = Objects.requireNonNull($.gainDb, "expected parameter 'gainDb' to be non-null");
            $.inputChannel = Objects.requireNonNull($.inputChannel, "expected parameter 'inputChannel' to be non-null");
            $.inputKey = Objects.requireNonNull($.inputKey, "expected parameter 'inputKey' to be non-null");
            $.inputTrack = Objects.requireNonNull($.inputTrack, "expected parameter 'inputTrack' to be non-null");
            $.outputChannel = Objects.requireNonNull($.outputChannel, "expected parameter 'outputChannel' to be non-null");
            return $;
        }
    }

}
