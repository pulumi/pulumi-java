// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.deploymentmanager.v2beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.deploymentmanager.v2beta.inputs.AsyncOptionsArgs;
import com.pulumi.googlenative.deploymentmanager.v2beta.inputs.InputMappingArgs;
import com.pulumi.googlenative.deploymentmanager.v2beta.inputs.ValidationOptionsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Options allows customized resource handling by Deployment Manager.
 * 
 */
public final class OptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final OptionsArgs Empty = new OptionsArgs();

    /**
     * Options regarding how to thread async requests.
     * 
     */
    @Import(name="asyncOptions")
    private @Nullable Output<List<AsyncOptionsArgs>> asyncOptions;

    /**
     * @return Options regarding how to thread async requests.
     * 
     */
    public Optional<Output<List<AsyncOptionsArgs>>> asyncOptions() {
        return Optional.ofNullable(this.asyncOptions);
    }

    /**
     * The mappings that apply for requests.
     * 
     */
    @Import(name="inputMappings")
    private @Nullable Output<List<InputMappingArgs>> inputMappings;

    /**
     * @return The mappings that apply for requests.
     * 
     */
    public Optional<Output<List<InputMappingArgs>>> inputMappings() {
        return Optional.ofNullable(this.inputMappings);
    }

    /**
     * Options for how to validate and process properties on a resource.
     * 
     */
    @Import(name="validationOptions")
    private @Nullable Output<ValidationOptionsArgs> validationOptions;

    /**
     * @return Options for how to validate and process properties on a resource.
     * 
     */
    public Optional<Output<ValidationOptionsArgs>> validationOptions() {
        return Optional.ofNullable(this.validationOptions);
    }

    /**
     * Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
     * 
     */
    @Import(name="virtualProperties")
    private @Nullable Output<String> virtualProperties;

    /**
     * @return Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
     * 
     */
    public Optional<Output<String>> virtualProperties() {
        return Optional.ofNullable(this.virtualProperties);
    }

    private OptionsArgs() {}

    private OptionsArgs(OptionsArgs $) {
        this.asyncOptions = $.asyncOptions;
        this.inputMappings = $.inputMappings;
        this.validationOptions = $.validationOptions;
        this.virtualProperties = $.virtualProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OptionsArgs $;

        public Builder() {
            $ = new OptionsArgs();
        }

        public Builder(OptionsArgs defaults) {
            $ = new OptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asyncOptions Options regarding how to thread async requests.
         * 
         * @return builder
         * 
         */
        public Builder asyncOptions(@Nullable Output<List<AsyncOptionsArgs>> asyncOptions) {
            $.asyncOptions = asyncOptions;
            return this;
        }

        /**
         * @param asyncOptions Options regarding how to thread async requests.
         * 
         * @return builder
         * 
         */
        public Builder asyncOptions(List<AsyncOptionsArgs> asyncOptions) {
            return asyncOptions(Output.of(asyncOptions));
        }

        /**
         * @param asyncOptions Options regarding how to thread async requests.
         * 
         * @return builder
         * 
         */
        public Builder asyncOptions(AsyncOptionsArgs... asyncOptions) {
            return asyncOptions(List.of(asyncOptions));
        }

        /**
         * @param inputMappings The mappings that apply for requests.
         * 
         * @return builder
         * 
         */
        public Builder inputMappings(@Nullable Output<List<InputMappingArgs>> inputMappings) {
            $.inputMappings = inputMappings;
            return this;
        }

        /**
         * @param inputMappings The mappings that apply for requests.
         * 
         * @return builder
         * 
         */
        public Builder inputMappings(List<InputMappingArgs> inputMappings) {
            return inputMappings(Output.of(inputMappings));
        }

        /**
         * @param inputMappings The mappings that apply for requests.
         * 
         * @return builder
         * 
         */
        public Builder inputMappings(InputMappingArgs... inputMappings) {
            return inputMappings(List.of(inputMappings));
        }

        /**
         * @param validationOptions Options for how to validate and process properties on a resource.
         * 
         * @return builder
         * 
         */
        public Builder validationOptions(@Nullable Output<ValidationOptionsArgs> validationOptions) {
            $.validationOptions = validationOptions;
            return this;
        }

        /**
         * @param validationOptions Options for how to validate and process properties on a resource.
         * 
         * @return builder
         * 
         */
        public Builder validationOptions(ValidationOptionsArgs validationOptions) {
            return validationOptions(Output.of(validationOptions));
        }

        /**
         * @param virtualProperties Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
         * 
         * @return builder
         * 
         */
        public Builder virtualProperties(@Nullable Output<String> virtualProperties) {
            $.virtualProperties = virtualProperties;
            return this;
        }

        /**
         * @param virtualProperties Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
         * 
         * @return builder
         * 
         */
        public Builder virtualProperties(String virtualProperties) {
            return virtualProperties(Output.of(virtualProperties));
        }

        public OptionsArgs build() {
            return $;
        }
    }

}
