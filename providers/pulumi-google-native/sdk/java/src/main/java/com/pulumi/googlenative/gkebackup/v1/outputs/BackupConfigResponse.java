// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkebackup.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.gkebackup.v1.outputs.EncryptionKeyResponse;
import com.pulumi.googlenative.gkebackup.v1.outputs.NamespacedNamesResponse;
import com.pulumi.googlenative.gkebackup.v1.outputs.NamespacesResponse;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class BackupConfigResponse {
    /**
     * @return If True, include all namespaced resources
     * 
     */
    private final Boolean allNamespaces;
    /**
     * @return This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34; portion (the Kubernetes resources) of Backups created via this plan. Default (empty): Config backup artifacts will not be encrypted.
     * 
     */
    private final EncryptionKeyResponse encryptionKey;
    /**
     * @return This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
     * 
     */
    private final Boolean includeSecrets;
    /**
     * @return This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
     * 
     */
    private final Boolean includeVolumeData;
    /**
     * @return If set, include just the resources referenced by the listed ProtectedApplications.
     * 
     */
    private final NamespacedNamesResponse selectedApplications;
    /**
     * @return If set, include just the resources in the listed namespaces.
     * 
     */
    private final NamespacesResponse selectedNamespaces;

    @CustomType.Constructor
    private BackupConfigResponse(
        @CustomType.Parameter("allNamespaces") Boolean allNamespaces,
        @CustomType.Parameter("encryptionKey") EncryptionKeyResponse encryptionKey,
        @CustomType.Parameter("includeSecrets") Boolean includeSecrets,
        @CustomType.Parameter("includeVolumeData") Boolean includeVolumeData,
        @CustomType.Parameter("selectedApplications") NamespacedNamesResponse selectedApplications,
        @CustomType.Parameter("selectedNamespaces") NamespacesResponse selectedNamespaces) {
        this.allNamespaces = allNamespaces;
        this.encryptionKey = encryptionKey;
        this.includeSecrets = includeSecrets;
        this.includeVolumeData = includeVolumeData;
        this.selectedApplications = selectedApplications;
        this.selectedNamespaces = selectedNamespaces;
    }

    /**
     * @return If True, include all namespaced resources
     * 
     */
    public Boolean allNamespaces() {
        return this.allNamespaces;
    }
    /**
     * @return This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34; portion (the Kubernetes resources) of Backups created via this plan. Default (empty): Config backup artifacts will not be encrypted.
     * 
     */
    public EncryptionKeyResponse encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
     * 
     */
    public Boolean includeSecrets() {
        return this.includeSecrets;
    }
    /**
     * @return This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
     * 
     */
    public Boolean includeVolumeData() {
        return this.includeVolumeData;
    }
    /**
     * @return If set, include just the resources referenced by the listed ProtectedApplications.
     * 
     */
    public NamespacedNamesResponse selectedApplications() {
        return this.selectedApplications;
    }
    /**
     * @return If set, include just the resources in the listed namespaces.
     * 
     */
    public NamespacesResponse selectedNamespaces() {
        return this.selectedNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allNamespaces;
        private EncryptionKeyResponse encryptionKey;
        private Boolean includeSecrets;
        private Boolean includeVolumeData;
        private NamespacedNamesResponse selectedApplications;
        private NamespacesResponse selectedNamespaces;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allNamespaces = defaults.allNamespaces;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.includeSecrets = defaults.includeSecrets;
    	      this.includeVolumeData = defaults.includeVolumeData;
    	      this.selectedApplications = defaults.selectedApplications;
    	      this.selectedNamespaces = defaults.selectedNamespaces;
        }

        public Builder allNamespaces(Boolean allNamespaces) {
            this.allNamespaces = Objects.requireNonNull(allNamespaces);
            return this;
        }
        public Builder encryptionKey(EncryptionKeyResponse encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        public Builder includeSecrets(Boolean includeSecrets) {
            this.includeSecrets = Objects.requireNonNull(includeSecrets);
            return this;
        }
        public Builder includeVolumeData(Boolean includeVolumeData) {
            this.includeVolumeData = Objects.requireNonNull(includeVolumeData);
            return this;
        }
        public Builder selectedApplications(NamespacedNamesResponse selectedApplications) {
            this.selectedApplications = Objects.requireNonNull(selectedApplications);
            return this;
        }
        public Builder selectedNamespaces(NamespacesResponse selectedNamespaces) {
            this.selectedNamespaces = Objects.requireNonNull(selectedNamespaces);
            return this;
        }        public BackupConfigResponse build() {
            return new BackupConfigResponse(allNamespaces, encryptionKey, includeSecrets, includeVolumeData, selectedApplications, selectedNamespaces);
        }
    }
}
