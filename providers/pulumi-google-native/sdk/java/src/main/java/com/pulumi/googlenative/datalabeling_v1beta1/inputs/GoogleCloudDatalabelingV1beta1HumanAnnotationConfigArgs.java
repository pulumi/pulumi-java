// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for how human labeling task should be done.
 * 
 */
public final class GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs Empty = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs();

    /**
     * Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
     * 
     */
    @Import(name="annotatedDatasetDescription")
    private @Nullable Output<String> annotatedDatasetDescription;

    public Optional<Output<String>> annotatedDatasetDescription() {
        return Optional.ofNullable(this.annotatedDatasetDescription);
    }

    /**
     * A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
     * 
     */
    @Import(name="annotatedDatasetDisplayName", required=true)
    private Output<String> annotatedDatasetDisplayName;

    public Output<String> annotatedDatasetDisplayName() {
        return this.annotatedDatasetDisplayName;
    }

    /**
     * Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
     * 
     */
    @Import(name="contributorEmails")
    private @Nullable Output<List<String>> contributorEmails;

    public Optional<Output<List<String>>> contributorEmails() {
        return Optional.ofNullable(this.contributorEmails);
    }

    /**
     * Instruction resource name.
     * 
     */
    @Import(name="instruction", required=true)
    private Output<String> instruction;

    public Output<String> instruction() {
        return this.instruction;
    }

    /**
     * Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
     * 
     */
    @Import(name="labelGroup")
    private @Nullable Output<String> labelGroup;

    public Optional<Output<String>> labelGroup() {
        return Optional.ofNullable(this.labelGroup);
    }

    /**
     * Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    /**
     * Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
     * 
     */
    @Import(name="questionDuration")
    private @Nullable Output<String> questionDuration;

    public Optional<Output<String>> questionDuration() {
        return Optional.ofNullable(this.questionDuration);
    }

    /**
     * Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
     * 
     */
    @Import(name="replicaCount")
    private @Nullable Output<Integer> replicaCount;

    public Optional<Output<Integer>> replicaCount() {
        return Optional.ofNullable(this.replicaCount);
    }

    /**
     * Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
     * 
     */
    @Import(name="userEmailAddress")
    private @Nullable Output<String> userEmailAddress;

    public Optional<Output<String>> userEmailAddress() {
        return Optional.ofNullable(this.userEmailAddress);
    }

    private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs() {}

    private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs $) {
        this.annotatedDatasetDescription = $.annotatedDatasetDescription;
        this.annotatedDatasetDisplayName = $.annotatedDatasetDisplayName;
        this.contributorEmails = $.contributorEmails;
        this.instruction = $.instruction;
        this.labelGroup = $.labelGroup;
        this.languageCode = $.languageCode;
        this.questionDuration = $.questionDuration;
        this.replicaCount = $.replicaCount;
        this.userEmailAddress = $.userEmailAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs $;

        public Builder() {
            $ = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs();
        }

        public Builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs defaults) {
            $ = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotatedDatasetDescription(@Nullable Output<String> annotatedDatasetDescription) {
            $.annotatedDatasetDescription = annotatedDatasetDescription;
            return this;
        }

        public Builder annotatedDatasetDescription(String annotatedDatasetDescription) {
            return annotatedDatasetDescription(Output.of(annotatedDatasetDescription));
        }

        public Builder annotatedDatasetDisplayName(Output<String> annotatedDatasetDisplayName) {
            $.annotatedDatasetDisplayName = annotatedDatasetDisplayName;
            return this;
        }

        public Builder annotatedDatasetDisplayName(String annotatedDatasetDisplayName) {
            return annotatedDatasetDisplayName(Output.of(annotatedDatasetDisplayName));
        }

        public Builder contributorEmails(@Nullable Output<List<String>> contributorEmails) {
            $.contributorEmails = contributorEmails;
            return this;
        }

        public Builder contributorEmails(List<String> contributorEmails) {
            return contributorEmails(Output.of(contributorEmails));
        }

        public Builder contributorEmails(String... contributorEmails) {
            return contributorEmails(List.of(contributorEmails));
        }

        public Builder instruction(Output<String> instruction) {
            $.instruction = instruction;
            return this;
        }

        public Builder instruction(String instruction) {
            return instruction(Output.of(instruction));
        }

        public Builder labelGroup(@Nullable Output<String> labelGroup) {
            $.labelGroup = labelGroup;
            return this;
        }

        public Builder labelGroup(String labelGroup) {
            return labelGroup(Output.of(labelGroup));
        }

        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder questionDuration(@Nullable Output<String> questionDuration) {
            $.questionDuration = questionDuration;
            return this;
        }

        public Builder questionDuration(String questionDuration) {
            return questionDuration(Output.of(questionDuration));
        }

        public Builder replicaCount(@Nullable Output<Integer> replicaCount) {
            $.replicaCount = replicaCount;
            return this;
        }

        public Builder replicaCount(Integer replicaCount) {
            return replicaCount(Output.of(replicaCount));
        }

        public Builder userEmailAddress(@Nullable Output<String> userEmailAddress) {
            $.userEmailAddress = userEmailAddress;
            return this;
        }

        public Builder userEmailAddress(String userEmailAddress) {
            return userEmailAddress(Output.of(userEmailAddress));
        }

        public GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs build() {
            $.annotatedDatasetDisplayName = Objects.requireNonNull($.annotatedDatasetDisplayName, "expected parameter 'annotatedDatasetDisplayName' to be non-null");
            $.instruction = Objects.requireNonNull($.instruction, "expected parameter 'instruction' to be non-null");
            return $;
        }
    }

}
