// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudkms_v1.inputs.ServiceResolverArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EkmConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EkmConnectionArgs Empty = new EkmConnectionArgs();

    @Import(name="ekmConnectionId", required=true)
    private Output<String> ekmConnectionId;

    public Output<String> ekmConnectionId() {
        return this.ekmConnectionId;
    }

    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
     * 
     */
    @Import(name="serviceResolvers")
    private @Nullable Output<List<ServiceResolverArgs>> serviceResolvers;

    public Optional<Output<List<ServiceResolverArgs>>> serviceResolvers() {
        return Optional.ofNullable(this.serviceResolvers);
    }

    private EkmConnectionArgs() {}

    private EkmConnectionArgs(EkmConnectionArgs $) {
        this.ekmConnectionId = $.ekmConnectionId;
        this.etag = $.etag;
        this.location = $.location;
        this.project = $.project;
        this.serviceResolvers = $.serviceResolvers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EkmConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EkmConnectionArgs $;

        public Builder() {
            $ = new EkmConnectionArgs();
        }

        public Builder(EkmConnectionArgs defaults) {
            $ = new EkmConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder ekmConnectionId(Output<String> ekmConnectionId) {
            $.ekmConnectionId = ekmConnectionId;
            return this;
        }

        public Builder ekmConnectionId(String ekmConnectionId) {
            return ekmConnectionId(Output.of(ekmConnectionId));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder serviceResolvers(@Nullable Output<List<ServiceResolverArgs>> serviceResolvers) {
            $.serviceResolvers = serviceResolvers;
            return this;
        }

        public Builder serviceResolvers(List<ServiceResolverArgs> serviceResolvers) {
            return serviceResolvers(Output.of(serviceResolvers));
        }

        public Builder serviceResolvers(ServiceResolverArgs... serviceResolvers) {
            return serviceResolvers(List.of(serviceResolvers));
        }

        public EkmConnectionArgs build() {
            $.ekmConnectionId = Objects.requireNonNull($.ekmConnectionId, "expected parameter 'ekmConnectionId' to be non-null");
            return $;
        }
    }

}
