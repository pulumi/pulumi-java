// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.remotebuildexecution_v1alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.remotebuildexecution_v1alpha.enums.GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyLinuxIsolation;
import com.pulumi.googlenative.remotebuildexecution_v1alpha.inputs.GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * FeaturePolicy defines features allowed to be used on RBE instances, as well as instance-wide behavior changes that take effect without opt-in or opt-out at usage time.
 * 
 */
public final class GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs Empty = new GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs();

    /**
     * Which container image sources are allowed. Currently only RBE-supported registry (gcr.io) is allowed. One can allow all repositories under a project or one specific repository only. E.g. container_image_sources { policy: RESTRICTED allowed_values: [ &#34;gcr.io/project-foo&#34;, &#34;gcr.io/project-bar/repo-baz&#34;, ] } will allow any repositories under &#34;gcr.io/project-foo&#34; plus the repository &#34;gcr.io/project-bar/repo-baz&#34;. Default (UNSPECIFIED) is equivalent to any source is allowed.
     * 
     */
    @Import(name="containerImageSources")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> containerImageSources;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> containerImageSources() {
        return Optional.ofNullable(this.containerImageSources);
    }

    /**
     * Whether dockerAddCapabilities can be used or what capabilities are allowed.
     * 
     */
    @Import(name="dockerAddCapabilities")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerAddCapabilities;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerAddCapabilities() {
        return Optional.ofNullable(this.dockerAddCapabilities);
    }

    /**
     * Whether dockerChrootPath can be used.
     * 
     */
    @Import(name="dockerChrootPath")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerChrootPath;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerChrootPath() {
        return Optional.ofNullable(this.dockerChrootPath);
    }

    /**
     * Whether dockerNetwork can be used or what network modes are allowed. E.g. one may allow `off` value only via `allowed_values`.
     * 
     */
    @Import(name="dockerNetwork")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerNetwork;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerNetwork() {
        return Optional.ofNullable(this.dockerNetwork);
    }

    /**
     * Whether dockerPrivileged can be used.
     * 
     */
    @Import(name="dockerPrivileged")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerPrivileged;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerPrivileged() {
        return Optional.ofNullable(this.dockerPrivileged);
    }

    /**
     * Whether dockerRunAsRoot can be used.
     * 
     */
    @Import(name="dockerRunAsRoot")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerRunAsRoot;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerRunAsRoot() {
        return Optional.ofNullable(this.dockerRunAsRoot);
    }

    /**
     * Whether dockerRuntime is allowed to be set or what runtimes are allowed. Note linux_isolation takes precedence, and if set, docker_runtime values may be rejected if they are incompatible with the selected isolation.
     * 
     */
    @Import(name="dockerRuntime")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerRuntime;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerRuntime() {
        return Optional.ofNullable(this.dockerRuntime);
    }

    /**
     * Whether dockerSiblingContainers can be used.
     * 
     */
    @Import(name="dockerSiblingContainers")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerSiblingContainers;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs>> dockerSiblingContainers() {
        return Optional.ofNullable(this.dockerSiblingContainers);
    }

    /**
     * linux_isolation allows overriding the docker runtime used for containers started on Linux.
     * 
     */
    @Import(name="linuxIsolation")
    private @Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyLinuxIsolation> linuxIsolation;

    public Optional<Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyLinuxIsolation>> linuxIsolation() {
        return Optional.ofNullable(this.linuxIsolation);
    }

    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs() {}

    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs $) {
        this.containerImageSources = $.containerImageSources;
        this.dockerAddCapabilities = $.dockerAddCapabilities;
        this.dockerChrootPath = $.dockerChrootPath;
        this.dockerNetwork = $.dockerNetwork;
        this.dockerPrivileged = $.dockerPrivileged;
        this.dockerRunAsRoot = $.dockerRunAsRoot;
        this.dockerRuntime = $.dockerRuntime;
        this.dockerSiblingContainers = $.dockerSiblingContainers;
        this.linuxIsolation = $.linuxIsolation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs $;

        public Builder() {
            $ = new GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs();
        }

        public Builder(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs defaults) {
            $ = new GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder containerImageSources(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> containerImageSources) {
            $.containerImageSources = containerImageSources;
            return this;
        }

        public Builder containerImageSources(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs containerImageSources) {
            return containerImageSources(Output.of(containerImageSources));
        }

        public Builder dockerAddCapabilities(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerAddCapabilities) {
            $.dockerAddCapabilities = dockerAddCapabilities;
            return this;
        }

        public Builder dockerAddCapabilities(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerAddCapabilities) {
            return dockerAddCapabilities(Output.of(dockerAddCapabilities));
        }

        public Builder dockerChrootPath(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerChrootPath) {
            $.dockerChrootPath = dockerChrootPath;
            return this;
        }

        public Builder dockerChrootPath(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerChrootPath) {
            return dockerChrootPath(Output.of(dockerChrootPath));
        }

        public Builder dockerNetwork(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerNetwork) {
            $.dockerNetwork = dockerNetwork;
            return this;
        }

        public Builder dockerNetwork(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerNetwork) {
            return dockerNetwork(Output.of(dockerNetwork));
        }

        public Builder dockerPrivileged(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerPrivileged) {
            $.dockerPrivileged = dockerPrivileged;
            return this;
        }

        public Builder dockerPrivileged(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerPrivileged) {
            return dockerPrivileged(Output.of(dockerPrivileged));
        }

        public Builder dockerRunAsRoot(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerRunAsRoot) {
            $.dockerRunAsRoot = dockerRunAsRoot;
            return this;
        }

        public Builder dockerRunAsRoot(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerRunAsRoot) {
            return dockerRunAsRoot(Output.of(dockerRunAsRoot));
        }

        public Builder dockerRuntime(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerRuntime) {
            $.dockerRuntime = dockerRuntime;
            return this;
        }

        public Builder dockerRuntime(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerRuntime) {
            return dockerRuntime(Output.of(dockerRuntime));
        }

        public Builder dockerSiblingContainers(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs> dockerSiblingContainers) {
            $.dockerSiblingContainers = dockerSiblingContainers;
            return this;
        }

        public Builder dockerSiblingContainers(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureArgs dockerSiblingContainers) {
            return dockerSiblingContainers(Output.of(dockerSiblingContainers));
        }

        public Builder linuxIsolation(@Nullable Output<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyLinuxIsolation> linuxIsolation) {
            $.linuxIsolation = linuxIsolation;
            return this;
        }

        public Builder linuxIsolation(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyLinuxIsolation linuxIsolation) {
            return linuxIsolation(Output.of(linuxIsolation));
        }

        public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyArgs build() {
            return $;
        }
    }

}
