// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow.v2.enums.DocumentKnowledgeTypesItem;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentArgs Empty = new DocumentArgs();

    /**
     * The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
     * 
     */
    @Import(name="contentUri")
    private @Nullable Output<String> contentUri;

    /**
     * @return The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
     * 
     */
    public Optional<Output<String>> contentUri() {
        return Optional.ofNullable(this.contentUri);
    }

    /**
     * The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don&#39;t try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
     * 
     */
    @Import(name="enableAutoReload")
    private @Nullable Output<Boolean> enableAutoReload;

    /**
     * @return Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don&#39;t try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
     * 
     */
    public Optional<Output<Boolean>> enableAutoReload() {
        return Optional.ofNullable(this.enableAutoReload);
    }

    @Import(name="knowledgeBaseId", required=true)
    private Output<String> knowledgeBaseId;

    public Output<String> knowledgeBaseId() {
        return this.knowledgeBaseId;
    }

    /**
     * The knowledge type of document content.
     * 
     */
    @Import(name="knowledgeTypes", required=true)
    private Output<List<DocumentKnowledgeTypesItem>> knowledgeTypes;

    /**
     * @return The knowledge type of document content.
     * 
     */
    public Output<List<DocumentKnowledgeTypesItem>> knowledgeTypes() {
        return this.knowledgeTypes;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document&#39;s title, an external URL distinct from the document&#39;s content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document&#39;s title, an external URL distinct from the document&#39;s content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The MIME type of this document.
     * 
     */
    @Import(name="mimeType", required=true)
    private Output<String> mimeType;

    /**
     * @return The MIME type of this document.
     * 
     */
    public Output<String> mimeType() {
        return this.mimeType;
    }

    /**
     * Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
     * 
     */
    @Import(name="rawContent")
    private @Nullable Output<String> rawContent;

    /**
     * @return The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
     * 
     */
    public Optional<Output<String>> rawContent() {
        return Optional.ofNullable(this.rawContent);
    }

    private DocumentArgs() {}

    private DocumentArgs(DocumentArgs $) {
        this.contentUri = $.contentUri;
        this.displayName = $.displayName;
        this.enableAutoReload = $.enableAutoReload;
        this.knowledgeBaseId = $.knowledgeBaseId;
        this.knowledgeTypes = $.knowledgeTypes;
        this.location = $.location;
        this.metadata = $.metadata;
        this.mimeType = $.mimeType;
        this.name = $.name;
        this.project = $.project;
        this.rawContent = $.rawContent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentArgs $;

        public Builder() {
            $ = new DocumentArgs();
        }

        public Builder(DocumentArgs defaults) {
            $ = new DocumentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentUri The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
         * 
         * @return builder
         * 
         */
        public Builder contentUri(@Nullable Output<String> contentUri) {
            $.contentUri = contentUri;
            return this;
        }

        /**
         * @param contentUri The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
         * 
         * @return builder
         * 
         */
        public Builder contentUri(String contentUri) {
            return contentUri(Output.of(contentUri));
        }

        /**
         * @param displayName The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enableAutoReload Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don&#39;t try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoReload(@Nullable Output<Boolean> enableAutoReload) {
            $.enableAutoReload = enableAutoReload;
            return this;
        }

        /**
         * @param enableAutoReload Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don&#39;t try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoReload(Boolean enableAutoReload) {
            return enableAutoReload(Output.of(enableAutoReload));
        }

        public Builder knowledgeBaseId(Output<String> knowledgeBaseId) {
            $.knowledgeBaseId = knowledgeBaseId;
            return this;
        }

        public Builder knowledgeBaseId(String knowledgeBaseId) {
            return knowledgeBaseId(Output.of(knowledgeBaseId));
        }

        /**
         * @param knowledgeTypes The knowledge type of document content.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeTypes(Output<List<DocumentKnowledgeTypesItem>> knowledgeTypes) {
            $.knowledgeTypes = knowledgeTypes;
            return this;
        }

        /**
         * @param knowledgeTypes The knowledge type of document content.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeTypes(List<DocumentKnowledgeTypesItem> knowledgeTypes) {
            return knowledgeTypes(Output.of(knowledgeTypes));
        }

        /**
         * @param knowledgeTypes The knowledge type of document content.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeTypes(DocumentKnowledgeTypesItem... knowledgeTypes) {
            return knowledgeTypes(List.of(knowledgeTypes));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param metadata Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document&#39;s title, an external URL distinct from the document&#39;s content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document&#39;s title, an external URL distinct from the document&#39;s content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param mimeType The MIME type of this document.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(Output<String> mimeType) {
            $.mimeType = mimeType;
            return this;
        }

        /**
         * @param mimeType The MIME type of this document.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(String mimeType) {
            return mimeType(Output.of(mimeType));
        }

        /**
         * @param name Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rawContent The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
         * 
         * @return builder
         * 
         */
        public Builder rawContent(@Nullable Output<String> rawContent) {
            $.rawContent = rawContent;
            return this;
        }

        /**
         * @param rawContent The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
         * 
         * @return builder
         * 
         */
        public Builder rawContent(String rawContent) {
            return rawContent(Output.of(rawContent));
        }

        public DocumentArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.knowledgeBaseId = Objects.requireNonNull($.knowledgeBaseId, "expected parameter 'knowledgeBaseId' to be non-null");
            $.knowledgeTypes = Objects.requireNonNull($.knowledgeTypes, "expected parameter 'knowledgeTypes' to be non-null");
            $.mimeType = Objects.requireNonNull($.mimeType, "expected parameter 'mimeType' to be non-null");
            return $;
        }
    }

}
