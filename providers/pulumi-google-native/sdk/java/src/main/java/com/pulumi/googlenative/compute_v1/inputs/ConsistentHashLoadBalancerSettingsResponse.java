// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.inputs.ConsistentHashLoadBalancerSettingsHttpCookieResponse;
import java.lang.String;
import java.util.Objects;


/**
 * This message defines settings for a consistent hash style load balancer.
 * 
 */
public final class ConsistentHashLoadBalancerSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConsistentHashLoadBalancerSettingsResponse Empty = new ConsistentHashLoadBalancerSettingsResponse();

    /**
     * Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    @Import(name="httpCookie", required=true)
    private ConsistentHashLoadBalancerSettingsHttpCookieResponse httpCookie;

    public ConsistentHashLoadBalancerSettingsHttpCookieResponse httpCookie() {
        return this.httpCookie;
    }

    /**
     * The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    @Import(name="httpHeaderName", required=true)
    private String httpHeaderName;

    public String httpHeaderName() {
        return this.httpHeaderName;
    }

    /**
     * The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
     * 
     */
    @Import(name="minimumRingSize", required=true)
    private String minimumRingSize;

    public String minimumRingSize() {
        return this.minimumRingSize;
    }

    private ConsistentHashLoadBalancerSettingsResponse() {}

    private ConsistentHashLoadBalancerSettingsResponse(ConsistentHashLoadBalancerSettingsResponse $) {
        this.httpCookie = $.httpCookie;
        this.httpHeaderName = $.httpHeaderName;
        this.minimumRingSize = $.minimumRingSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsistentHashLoadBalancerSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsistentHashLoadBalancerSettingsResponse $;

        public Builder() {
            $ = new ConsistentHashLoadBalancerSettingsResponse();
        }

        public Builder(ConsistentHashLoadBalancerSettingsResponse defaults) {
            $ = new ConsistentHashLoadBalancerSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder httpCookie(ConsistentHashLoadBalancerSettingsHttpCookieResponse httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        public Builder httpHeaderName(String httpHeaderName) {
            $.httpHeaderName = httpHeaderName;
            return this;
        }

        public Builder minimumRingSize(String minimumRingSize) {
            $.minimumRingSize = minimumRingSize;
            return this;
        }

        public ConsistentHashLoadBalancerSettingsResponse build() {
            $.httpCookie = Objects.requireNonNull($.httpCookie, "expected parameter 'httpCookie' to be non-null");
            $.httpHeaderName = Objects.requireNonNull($.httpHeaderName, "expected parameter 'httpHeaderName' to be non-null");
            $.minimumRingSize = Objects.requireNonNull($.minimumRingSize, "expected parameter 'minimumRingSize' to be non-null");
            return $;
        }
    }

}
