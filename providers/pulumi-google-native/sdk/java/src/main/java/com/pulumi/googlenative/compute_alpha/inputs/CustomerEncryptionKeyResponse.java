// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CustomerEncryptionKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomerEncryptionKeyResponse Empty = new CustomerEncryptionKeyResponse();

    /**
     * The name of the encryption key that is stored in Google Cloud KMS. For example: &#34;kmsKeyName&#34;: &#34;projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key
     * 
     */
    @Import(name="kmsKeyName", required=true)
    private String kmsKeyName;

    /**
     * @return The name of the encryption key that is stored in Google Cloud KMS. For example: &#34;kmsKeyName&#34;: &#34;projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key
     * 
     */
    public String kmsKeyName() {
        return this.kmsKeyName;
    }

    /**
     * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: &#34;kmsKeyServiceAccount&#34;: &#34;name@project_id.iam.gserviceaccount.com/
     * 
     */
    @Import(name="kmsKeyServiceAccount", required=true)
    private String kmsKeyServiceAccount;

    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: &#34;kmsKeyServiceAccount&#34;: &#34;name@project_id.iam.gserviceaccount.com/
     * 
     */
    public String kmsKeyServiceAccount() {
        return this.kmsKeyServiceAccount;
    }

    /**
     * Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: &#34;rawKey&#34;: &#34;SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=&#34;
     * 
     */
    @Import(name="rawKey", required=true)
    private String rawKey;

    /**
     * @return Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: &#34;rawKey&#34;: &#34;SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=&#34;
     * 
     */
    public String rawKey() {
        return this.rawKey;
    }

    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: &#34;rsaEncryptedKey&#34;: &#34;ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==&#34; The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
     * 
     */
    @Import(name="rsaEncryptedKey", required=true)
    private String rsaEncryptedKey;

    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: &#34;rsaEncryptedKey&#34;: &#34;ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==&#34; The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
     * 
     */
    public String rsaEncryptedKey() {
        return this.rsaEncryptedKey;
    }

    /**
     * [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     * 
     */
    @Import(name="sha256", required=true)
    private String sha256;

    /**
     * @return [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     * 
     */
    public String sha256() {
        return this.sha256;
    }

    private CustomerEncryptionKeyResponse() {}

    private CustomerEncryptionKeyResponse(CustomerEncryptionKeyResponse $) {
        this.kmsKeyName = $.kmsKeyName;
        this.kmsKeyServiceAccount = $.kmsKeyServiceAccount;
        this.rawKey = $.rawKey;
        this.rsaEncryptedKey = $.rsaEncryptedKey;
        this.sha256 = $.sha256;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomerEncryptionKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomerEncryptionKeyResponse $;

        public Builder() {
            $ = new CustomerEncryptionKeyResponse();
        }

        public Builder(CustomerEncryptionKeyResponse defaults) {
            $ = new CustomerEncryptionKeyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param kmsKeyName The name of the encryption key that is stored in Google Cloud KMS. For example: &#34;kmsKeyName&#34;: &#34;projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(String kmsKeyName) {
            $.kmsKeyName = kmsKeyName;
            return this;
        }

        /**
         * @param kmsKeyServiceAccount The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: &#34;kmsKeyServiceAccount&#34;: &#34;name@project_id.iam.gserviceaccount.com/
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyServiceAccount(String kmsKeyServiceAccount) {
            $.kmsKeyServiceAccount = kmsKeyServiceAccount;
            return this;
        }

        /**
         * @param rawKey Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: &#34;rawKey&#34;: &#34;SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=&#34;
         * 
         * @return builder
         * 
         */
        public Builder rawKey(String rawKey) {
            $.rawKey = rawKey;
            return this;
        }

        /**
         * @param rsaEncryptedKey Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: &#34;rsaEncryptedKey&#34;: &#34;ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==&#34; The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
         * 
         * @return builder
         * 
         */
        public Builder rsaEncryptedKey(String rsaEncryptedKey) {
            $.rsaEncryptedKey = rsaEncryptedKey;
            return this;
        }

        /**
         * @param sha256 [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
         * 
         * @return builder
         * 
         */
        public Builder sha256(String sha256) {
            $.sha256 = sha256;
            return this;
        }

        public CustomerEncryptionKeyResponse build() {
            $.kmsKeyName = Objects.requireNonNull($.kmsKeyName, "expected parameter 'kmsKeyName' to be non-null");
            $.kmsKeyServiceAccount = Objects.requireNonNull($.kmsKeyServiceAccount, "expected parameter 'kmsKeyServiceAccount' to be non-null");
            $.rawKey = Objects.requireNonNull($.rawKey, "expected parameter 'rawKey' to be non-null");
            $.rsaEncryptedKey = Objects.requireNonNull($.rsaEncryptedKey, "expected parameter 'rsaEncryptedKey' to be non-null");
            $.sha256 = Objects.requireNonNull($.sha256, "expected parameter 'sha256' to be non-null");
            return $;
        }
    }

}
