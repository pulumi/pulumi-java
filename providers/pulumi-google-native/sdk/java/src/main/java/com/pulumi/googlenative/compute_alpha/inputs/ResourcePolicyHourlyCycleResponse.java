// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Time window specified for hourly operations.
 * 
 */
public final class ResourcePolicyHourlyCycleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResourcePolicyHourlyCycleResponse Empty = new ResourcePolicyHourlyCycleResponse();

    /**
     * [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
     * 
     */
    @Import(name="duration", required=true)
    private String duration;

    /**
     * @return [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
     * 
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
     * 
     */
    @Import(name="hoursInCycle", required=true)
    private Integer hoursInCycle;

    /**
     * @return Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
     * 
     */
    public Integer hoursInCycle() {
        return this.hoursInCycle;
    }

    /**
     * Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    private ResourcePolicyHourlyCycleResponse() {}

    private ResourcePolicyHourlyCycleResponse(ResourcePolicyHourlyCycleResponse $) {
        this.duration = $.duration;
        this.hoursInCycle = $.hoursInCycle;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicyHourlyCycleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicyHourlyCycleResponse $;

        public Builder() {
            $ = new ResourcePolicyHourlyCycleResponse();
        }

        public Builder(ResourcePolicyHourlyCycleResponse defaults) {
            $ = new ResourcePolicyHourlyCycleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param duration [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param hoursInCycle Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
         * 
         * @return builder
         * 
         */
        public Builder hoursInCycle(Integer hoursInCycle) {
            $.hoursInCycle = hoursInCycle;
            return this;
        }

        /**
         * @param startTime Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public ResourcePolicyHourlyCycleResponse build() {
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.hoursInCycle = Objects.requireNonNull($.hoursInCycle, "expected parameter 'hoursInCycle' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
