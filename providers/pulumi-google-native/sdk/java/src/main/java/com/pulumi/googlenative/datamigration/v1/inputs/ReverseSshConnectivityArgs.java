// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
 * 
 */
public final class ReverseSshConnectivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReverseSshConnectivityArgs Empty = new ReverseSshConnectivityArgs();

    /**
     * The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    @Import(name="vm")
    private @Nullable Output<String> vm;

    /**
     * @return The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    public Optional<Output<String>> vm() {
        return Optional.ofNullable(this.vm);
    }

    /**
     * The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    @Import(name="vmIp", required=true)
    private Output<String> vmIp;

    /**
     * @return The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    public Output<String> vmIp() {
        return this.vmIp;
    }

    /**
     * The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    @Import(name="vmPort", required=true)
    private Output<Integer> vmPort;

    /**
     * @return The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    public Output<Integer> vmPort() {
        return this.vmPort;
    }

    /**
     * The name of the VPC to peer with the Cloud SQL private network.
     * 
     */
    @Import(name="vpc")
    private @Nullable Output<String> vpc;

    /**
     * @return The name of the VPC to peer with the Cloud SQL private network.
     * 
     */
    public Optional<Output<String>> vpc() {
        return Optional.ofNullable(this.vpc);
    }

    private ReverseSshConnectivityArgs() {}

    private ReverseSshConnectivityArgs(ReverseSshConnectivityArgs $) {
        this.vm = $.vm;
        this.vmIp = $.vmIp;
        this.vmPort = $.vmPort;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReverseSshConnectivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReverseSshConnectivityArgs $;

        public Builder() {
            $ = new ReverseSshConnectivityArgs();
        }

        public Builder(ReverseSshConnectivityArgs defaults) {
            $ = new ReverseSshConnectivityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param vm The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder vm(@Nullable Output<String> vm) {
            $.vm = vm;
            return this;
        }

        /**
         * @param vm The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder vm(String vm) {
            return vm(Output.of(vm));
        }

        /**
         * @param vmIp The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder vmIp(Output<String> vmIp) {
            $.vmIp = vmIp;
            return this;
        }

        /**
         * @param vmIp The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder vmIp(String vmIp) {
            return vmIp(Output.of(vmIp));
        }

        /**
         * @param vmPort The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder vmPort(Output<Integer> vmPort) {
            $.vmPort = vmPort;
            return this;
        }

        /**
         * @param vmPort The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
         * 
         * @return builder
         * 
         */
        public Builder vmPort(Integer vmPort) {
            return vmPort(Output.of(vmPort));
        }

        /**
         * @param vpc The name of the VPC to peer with the Cloud SQL private network.
         * 
         * @return builder
         * 
         */
        public Builder vpc(@Nullable Output<String> vpc) {
            $.vpc = vpc;
            return this;
        }

        /**
         * @param vpc The name of the VPC to peer with the Cloud SQL private network.
         * 
         * @return builder
         * 
         */
        public Builder vpc(String vpc) {
            return vpc(Output.of(vpc));
        }

        public ReverseSshConnectivityArgs build() {
            $.vmIp = Objects.requireNonNull($.vmIp, "expected parameter 'vmIp' to be non-null");
            $.vmPort = Objects.requireNonNull($.vmPort, "expected parameter 'vmPort' to be non-null");
            return $;
        }
    }

}
