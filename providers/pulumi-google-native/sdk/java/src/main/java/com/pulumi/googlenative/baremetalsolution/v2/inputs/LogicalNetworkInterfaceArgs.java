// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.baremetalsolution.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.baremetalsolution.v2.enums.LogicalNetworkInterfaceNetworkType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Each logical network interface is effectively a network and IP pair.
 * 
 */
public final class LogicalNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogicalNetworkInterfaceArgs Empty = new LogicalNetworkInterfaceArgs();

    /**
     * Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
     * 
     */
    @Import(name="defaultGateway")
    private @Nullable Output<Boolean> defaultGateway;

    /**
     * @return Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
     * 
     */
    public Optional<Output<Boolean>> defaultGateway() {
        return Optional.ofNullable(this.defaultGateway);
    }

    /**
     * An identifier for the `Network`, generated by the backend.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return An identifier for the `Network`, generated by the backend.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * IP address in the network
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address in the network
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Name of the network
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Name of the network
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Type of network.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<LogicalNetworkInterfaceNetworkType> networkType;

    /**
     * @return Type of network.
     * 
     */
    public Optional<Output<LogicalNetworkInterfaceNetworkType>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    private LogicalNetworkInterfaceArgs() {}

    private LogicalNetworkInterfaceArgs(LogicalNetworkInterfaceArgs $) {
        this.defaultGateway = $.defaultGateway;
        this.id = $.id;
        this.ipAddress = $.ipAddress;
        this.network = $.network;
        this.networkType = $.networkType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogicalNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogicalNetworkInterfaceArgs $;

        public Builder() {
            $ = new LogicalNetworkInterfaceArgs();
        }

        public Builder(LogicalNetworkInterfaceArgs defaults) {
            $ = new LogicalNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultGateway Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
         * 
         * @return builder
         * 
         */
        public Builder defaultGateway(@Nullable Output<Boolean> defaultGateway) {
            $.defaultGateway = defaultGateway;
            return this;
        }

        /**
         * @param defaultGateway Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
         * 
         * @return builder
         * 
         */
        public Builder defaultGateway(Boolean defaultGateway) {
            return defaultGateway(Output.of(defaultGateway));
        }

        /**
         * @param id An identifier for the `Network`, generated by the backend.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id An identifier for the `Network`, generated by the backend.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ipAddress IP address in the network
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address in the network
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param network Name of the network
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Name of the network
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param networkType Type of network.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<LogicalNetworkInterfaceNetworkType> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType Type of network.
         * 
         * @return builder
         * 
         */
        public Builder networkType(LogicalNetworkInterfaceNetworkType networkType) {
            return networkType(Output.of(networkType));
        }

        public LogicalNetworkInterfaceArgs build() {
            return $;
        }
    }

}
