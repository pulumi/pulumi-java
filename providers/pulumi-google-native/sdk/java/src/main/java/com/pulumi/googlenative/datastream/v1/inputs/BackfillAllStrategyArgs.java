// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream.v1.inputs.MysqlRdbmsArgs;
import com.pulumi.googlenative.datastream.v1.inputs.OracleRdbmsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
 * 
 */
public final class BackfillAllStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackfillAllStrategyArgs Empty = new BackfillAllStrategyArgs();

    /**
     * MySQL data source objects to avoid backfilling.
     * 
     */
    @Import(name="mysqlExcludedObjects")
    private @Nullable Output<MysqlRdbmsArgs> mysqlExcludedObjects;

    /**
     * @return MySQL data source objects to avoid backfilling.
     * 
     */
    public Optional<Output<MysqlRdbmsArgs>> mysqlExcludedObjects() {
        return Optional.ofNullable(this.mysqlExcludedObjects);
    }

    /**
     * Oracle data source objects to avoid backfilling.
     * 
     */
    @Import(name="oracleExcludedObjects")
    private @Nullable Output<OracleRdbmsArgs> oracleExcludedObjects;

    /**
     * @return Oracle data source objects to avoid backfilling.
     * 
     */
    public Optional<Output<OracleRdbmsArgs>> oracleExcludedObjects() {
        return Optional.ofNullable(this.oracleExcludedObjects);
    }

    private BackfillAllStrategyArgs() {}

    private BackfillAllStrategyArgs(BackfillAllStrategyArgs $) {
        this.mysqlExcludedObjects = $.mysqlExcludedObjects;
        this.oracleExcludedObjects = $.oracleExcludedObjects;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackfillAllStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackfillAllStrategyArgs $;

        public Builder() {
            $ = new BackfillAllStrategyArgs();
        }

        public Builder(BackfillAllStrategyArgs defaults) {
            $ = new BackfillAllStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mysqlExcludedObjects MySQL data source objects to avoid backfilling.
         * 
         * @return builder
         * 
         */
        public Builder mysqlExcludedObjects(@Nullable Output<MysqlRdbmsArgs> mysqlExcludedObjects) {
            $.mysqlExcludedObjects = mysqlExcludedObjects;
            return this;
        }

        /**
         * @param mysqlExcludedObjects MySQL data source objects to avoid backfilling.
         * 
         * @return builder
         * 
         */
        public Builder mysqlExcludedObjects(MysqlRdbmsArgs mysqlExcludedObjects) {
            return mysqlExcludedObjects(Output.of(mysqlExcludedObjects));
        }

        /**
         * @param oracleExcludedObjects Oracle data source objects to avoid backfilling.
         * 
         * @return builder
         * 
         */
        public Builder oracleExcludedObjects(@Nullable Output<OracleRdbmsArgs> oracleExcludedObjects) {
            $.oracleExcludedObjects = oracleExcludedObjects;
            return this;
        }

        /**
         * @param oracleExcludedObjects Oracle data source objects to avoid backfilling.
         * 
         * @return builder
         * 
         */
        public Builder oracleExcludedObjects(OracleRdbmsArgs oracleExcludedObjects) {
            return oracleExcludedObjects(Output.of(oracleExcludedObjects));
        }

        public BackfillAllStrategyArgs build() {
            return $;
        }
    }

}
