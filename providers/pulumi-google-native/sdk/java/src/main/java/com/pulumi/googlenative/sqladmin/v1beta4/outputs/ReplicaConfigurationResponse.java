// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1beta4.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.sqladmin.v1beta4.outputs.MySqlReplicaConfigurationResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ReplicaConfigurationResponse {
    /**
     * @return Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
     * 
     */
    private final Boolean failoverTarget;
    /**
     * @return This is always `sql#replicaConfiguration`.
     * 
     */
    private final String kind;
    /**
     * @return MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
     * 
     */
    private final MySqlReplicaConfigurationResponse mysqlReplicaConfiguration;

    @CustomType.Constructor
    private ReplicaConfigurationResponse(
        @CustomType.Parameter("failoverTarget") Boolean failoverTarget,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("mysqlReplicaConfiguration") MySqlReplicaConfigurationResponse mysqlReplicaConfiguration) {
        this.failoverTarget = failoverTarget;
        this.kind = kind;
        this.mysqlReplicaConfiguration = mysqlReplicaConfiguration;
    }

    /**
     * @return Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
     * 
     */
    public Boolean failoverTarget() {
        return this.failoverTarget;
    }
    /**
     * @return This is always `sql#replicaConfiguration`.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
     * 
     */
    public MySqlReplicaConfigurationResponse mysqlReplicaConfiguration() {
        return this.mysqlReplicaConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicaConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean failoverTarget;
        private String kind;
        private MySqlReplicaConfigurationResponse mysqlReplicaConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicaConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.kind = defaults.kind;
    	      this.mysqlReplicaConfiguration = defaults.mysqlReplicaConfiguration;
        }

        public Builder failoverTarget(Boolean failoverTarget) {
            this.failoverTarget = Objects.requireNonNull(failoverTarget);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder mysqlReplicaConfiguration(MySqlReplicaConfigurationResponse mysqlReplicaConfiguration) {
            this.mysqlReplicaConfiguration = Objects.requireNonNull(mysqlReplicaConfiguration);
            return this;
        }        public ReplicaConfigurationResponse build() {
            return new ReplicaConfigurationResponse(failoverTarget, kind, mysqlReplicaConfiguration);
        }
    }
}
