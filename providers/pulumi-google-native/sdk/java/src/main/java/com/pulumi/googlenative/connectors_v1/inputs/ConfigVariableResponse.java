// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.connectors_v1.inputs.SecretResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
 * 
 */
public final class ConfigVariableResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConfigVariableResponse Empty = new ConfigVariableResponse();

    /**
     * Value is a bool.
     * 
     */
    @Import(name="boolValue", required=true)
    private Boolean boolValue;

    /**
     * @return Value is a bool.
     * 
     */
    public Boolean boolValue() {
        return this.boolValue;
    }

    /**
     * Value is an integer
     * 
     */
    @Import(name="intValue", required=true)
    private String intValue;

    /**
     * @return Value is an integer
     * 
     */
    public String intValue() {
        return this.intValue;
    }

    /**
     * Key of the config variable.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return Key of the config variable.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * Value is a secret.
     * 
     */
    @Import(name="secretValue", required=true)
    private SecretResponse secretValue;

    /**
     * @return Value is a secret.
     * 
     */
    public SecretResponse secretValue() {
        return this.secretValue;
    }

    /**
     * Value is a string.
     * 
     */
    @Import(name="stringValue", required=true)
    private String stringValue;

    /**
     * @return Value is a string.
     * 
     */
    public String stringValue() {
        return this.stringValue;
    }

    private ConfigVariableResponse() {}

    private ConfigVariableResponse(ConfigVariableResponse $) {
        this.boolValue = $.boolValue;
        this.intValue = $.intValue;
        this.key = $.key;
        this.secretValue = $.secretValue;
        this.stringValue = $.stringValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigVariableResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigVariableResponse $;

        public Builder() {
            $ = new ConfigVariableResponse();
        }

        public Builder(ConfigVariableResponse defaults) {
            $ = new ConfigVariableResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param boolValue Value is a bool.
         * 
         * @return builder
         * 
         */
        public Builder boolValue(Boolean boolValue) {
            $.boolValue = boolValue;
            return this;
        }

        /**
         * @param intValue Value is an integer
         * 
         * @return builder
         * 
         */
        public Builder intValue(String intValue) {
            $.intValue = intValue;
            return this;
        }

        /**
         * @param key Key of the config variable.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param secretValue Value is a secret.
         * 
         * @return builder
         * 
         */
        public Builder secretValue(SecretResponse secretValue) {
            $.secretValue = secretValue;
            return this;
        }

        /**
         * @param stringValue Value is a string.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(String stringValue) {
            $.stringValue = stringValue;
            return this;
        }

        public ConfigVariableResponse build() {
            $.boolValue = Objects.requireNonNull($.boolValue, "expected parameter 'boolValue' to be non-null");
            $.intValue = Objects.requireNonNull($.intValue, "expected parameter 'intValue' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.secretValue = Objects.requireNonNull($.secretValue, "expected parameter 'secretValue' to be non-null");
            $.stringValue = Objects.requireNonNull($.stringValue, "expected parameter 'stringValue' to be non-null");
            return $;
        }
    }

}
