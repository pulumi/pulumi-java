// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca.v1.enums.CaPoolTier;
import com.pulumi.googlenative.privateca.v1.inputs.IssuancePolicyArgs;
import com.pulumi.googlenative.privateca.v1.inputs.PublishingOptionsArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaPoolArgs Empty = new CaPoolArgs();

    /**
     * Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    @Import(name="caPoolId", required=true)
    private Output<String> caPoolId;

    /**
     * @return Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    public Output<String> caPoolId() {
        return this.caPoolId;
    }

    /**
     * Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
     * 
     */
    @Import(name="issuancePolicy")
    private @Nullable Output<IssuancePolicyArgs> issuancePolicy;

    /**
     * @return Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
     * 
     */
    public Optional<Output<IssuancePolicyArgs>> issuancePolicy() {
        return Optional.ofNullable(this.issuancePolicy);
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels with user-defined metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
     * 
     */
    @Import(name="publishingOptions")
    private @Nullable Output<PublishingOptionsArgs> publishingOptions;

    /**
     * @return Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
     * 
     */
    public Optional<Output<PublishingOptionsArgs>> publishingOptions() {
        return Optional.ofNullable(this.publishingOptions);
    }

    /**
     * Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Immutable. The Tier of this CaPool.
     * 
     */
    @Import(name="tier", required=true)
    private Output<CaPoolTier> tier;

    /**
     * @return Immutable. The Tier of this CaPool.
     * 
     */
    public Output<CaPoolTier> tier() {
        return this.tier;
    }

    private CaPoolArgs() {}

    private CaPoolArgs(CaPoolArgs $) {
        this.caPoolId = $.caPoolId;
        this.issuancePolicy = $.issuancePolicy;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.publishingOptions = $.publishingOptions;
        this.requestId = $.requestId;
        this.tier = $.tier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaPoolArgs $;

        public Builder() {
            $ = new CaPoolArgs();
        }

        public Builder(CaPoolArgs defaults) {
            $ = new CaPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caPoolId Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder caPoolId(Output<String> caPoolId) {
            $.caPoolId = caPoolId;
            return this;
        }

        /**
         * @param caPoolId Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder caPoolId(String caPoolId) {
            return caPoolId(Output.of(caPoolId));
        }

        /**
         * @param issuancePolicy Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
         * 
         * @return builder
         * 
         */
        public Builder issuancePolicy(@Nullable Output<IssuancePolicyArgs> issuancePolicy) {
            $.issuancePolicy = issuancePolicy;
            return this;
        }

        /**
         * @param issuancePolicy Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
         * 
         * @return builder
         * 
         */
        public Builder issuancePolicy(IssuancePolicyArgs issuancePolicy) {
            return issuancePolicy(Output.of(issuancePolicy));
        }

        /**
         * @param labels Optional. Labels with user-defined metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels with user-defined metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param publishingOptions Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
         * 
         * @return builder
         * 
         */
        public Builder publishingOptions(@Nullable Output<PublishingOptionsArgs> publishingOptions) {
            $.publishingOptions = publishingOptions;
            return this;
        }

        /**
         * @param publishingOptions Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
         * 
         * @return builder
         * 
         */
        public Builder publishingOptions(PublishingOptionsArgs publishingOptions) {
            return publishingOptions(Output.of(publishingOptions));
        }

        /**
         * @param requestId Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param tier Immutable. The Tier of this CaPool.
         * 
         * @return builder
         * 
         */
        public Builder tier(Output<CaPoolTier> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier Immutable. The Tier of this CaPool.
         * 
         * @return builder
         * 
         */
        public Builder tier(CaPoolTier tier) {
            return tier(Output.of(tier));
        }

        public CaPoolArgs build() {
            $.caPoolId = Objects.requireNonNull($.caPoolId, "expected parameter 'caPoolId' to be non-null");
            $.tier = Objects.requireNonNull($.tier, "expected parameter 'tier' to be non-null");
            return $;
        }
    }

}
