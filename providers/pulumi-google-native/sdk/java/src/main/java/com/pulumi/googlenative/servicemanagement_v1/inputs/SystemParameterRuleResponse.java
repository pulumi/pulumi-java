// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SystemParameterResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Define a system parameter rule mapping system parameter definitions to methods.
 * 
 */
public final class SystemParameterRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final SystemParameterRuleResponse Empty = new SystemParameterRuleResponse();

    /**
     * Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
     * 
     */
    @Import(name="parameters", required=true)
    private List<SystemParameterResponse> parameters;

    public List<SystemParameterResponse> parameters() {
        return this.parameters;
    }

    /**
     * Selects the methods to which this rule applies. Use &#39;*&#39; to indicate all methods in all APIs. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector", required=true)
    private String selector;

    public String selector() {
        return this.selector;
    }

    private SystemParameterRuleResponse() {}

    private SystemParameterRuleResponse(SystemParameterRuleResponse $) {
        this.parameters = $.parameters;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemParameterRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemParameterRuleResponse $;

        public Builder() {
            $ = new SystemParameterRuleResponse();
        }

        public Builder(SystemParameterRuleResponse defaults) {
            $ = new SystemParameterRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder parameters(List<SystemParameterResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(SystemParameterResponse... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder selector(String selector) {
            $.selector = selector;
            return this;
        }

        public SystemParameterRuleResponse build() {
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.selector = Objects.requireNonNull($.selector, "expected parameter 'selector' to be non-null");
            return $;
        }
    }

}
