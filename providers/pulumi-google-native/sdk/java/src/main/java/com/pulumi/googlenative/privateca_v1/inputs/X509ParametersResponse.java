// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1.inputs.CaOptionsResponse;
import com.pulumi.googlenative.privateca_v1.inputs.KeyUsageResponse;
import com.pulumi.googlenative.privateca_v1.inputs.ObjectIdResponse;
import com.pulumi.googlenative.privateca_v1.inputs.X509ExtensionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
 * 
 */
public final class X509ParametersResponse extends com.pulumi.resources.InvokeArgs {

    public static final X509ParametersResponse Empty = new X509ParametersResponse();

    /**
     * Optional. Describes custom X.509 extensions.
     * 
     */
    @Import(name="additionalExtensions", required=true)
    private List<X509ExtensionResponse> additionalExtensions;

    public List<X509ExtensionResponse> additionalExtensions() {
        return this.additionalExtensions;
    }

    /**
     * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the &#34;Authority Information Access&#34; extension in the certificate.
     * 
     */
    @Import(name="aiaOcspServers", required=true)
    private List<String> aiaOcspServers;

    public List<String> aiaOcspServers() {
        return this.aiaOcspServers;
    }

    /**
     * Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
     * 
     */
    @Import(name="caOptions", required=true)
    private CaOptionsResponse caOptions;

    public CaOptionsResponse caOptions() {
        return this.caOptions;
    }

    /**
     * Optional. Indicates the intended use for keys that correspond to a certificate.
     * 
     */
    @Import(name="keyUsage", required=true)
    private KeyUsageResponse keyUsage;

    public KeyUsageResponse keyUsage() {
        return this.keyUsage;
    }

    /**
     * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
     * 
     */
    @Import(name="policyIds", required=true)
    private List<ObjectIdResponse> policyIds;

    public List<ObjectIdResponse> policyIds() {
        return this.policyIds;
    }

    private X509ParametersResponse() {}

    private X509ParametersResponse(X509ParametersResponse $) {
        this.additionalExtensions = $.additionalExtensions;
        this.aiaOcspServers = $.aiaOcspServers;
        this.caOptions = $.caOptions;
        this.keyUsage = $.keyUsage;
        this.policyIds = $.policyIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X509ParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X509ParametersResponse $;

        public Builder() {
            $ = new X509ParametersResponse();
        }

        public Builder(X509ParametersResponse defaults) {
            $ = new X509ParametersResponse(Objects.requireNonNull(defaults));
        }

        public Builder additionalExtensions(List<X509ExtensionResponse> additionalExtensions) {
            $.additionalExtensions = additionalExtensions;
            return this;
        }

        public Builder additionalExtensions(X509ExtensionResponse... additionalExtensions) {
            return additionalExtensions(List.of(additionalExtensions));
        }

        public Builder aiaOcspServers(List<String> aiaOcspServers) {
            $.aiaOcspServers = aiaOcspServers;
            return this;
        }

        public Builder aiaOcspServers(String... aiaOcspServers) {
            return aiaOcspServers(List.of(aiaOcspServers));
        }

        public Builder caOptions(CaOptionsResponse caOptions) {
            $.caOptions = caOptions;
            return this;
        }

        public Builder keyUsage(KeyUsageResponse keyUsage) {
            $.keyUsage = keyUsage;
            return this;
        }

        public Builder policyIds(List<ObjectIdResponse> policyIds) {
            $.policyIds = policyIds;
            return this;
        }

        public Builder policyIds(ObjectIdResponse... policyIds) {
            return policyIds(List.of(policyIds));
        }

        public X509ParametersResponse build() {
            $.additionalExtensions = Objects.requireNonNull($.additionalExtensions, "expected parameter 'additionalExtensions' to be non-null");
            $.aiaOcspServers = Objects.requireNonNull($.aiaOcspServers, "expected parameter 'aiaOcspServers' to be non-null");
            $.caOptions = Objects.requireNonNull($.caOptions, "expected parameter 'caOptions' to be non-null");
            $.keyUsage = Objects.requireNonNull($.keyUsage, "expected parameter 'keyUsage' to be non-null");
            $.policyIds = Objects.requireNonNull($.policyIds, "expected parameter 'policyIds' to be non-null");
            return $;
        }
    }

}
