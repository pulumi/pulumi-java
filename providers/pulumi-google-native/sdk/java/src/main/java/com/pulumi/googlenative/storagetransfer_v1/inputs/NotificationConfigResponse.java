// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following `PubsubMessage.attributes`: * `&#34;eventType&#34;`: one of the EventType values * `&#34;payloadFormat&#34;`: one of the PayloadFormat values * `&#34;projectId&#34;`: the project_id of the `TransferOperation` * `&#34;transferJobName&#34;`: the transfer_job_name of the `TransferOperation` * `&#34;transferOperationName&#34;`: the name of the `TransferOperation` The `PubsubMessage.data` contains a TransferOperation resource formatted according to the specified `PayloadFormat`.
 * 
 */
public final class NotificationConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final NotificationConfigResponse Empty = new NotificationConfigResponse();

    /**
     * Event types for which a notification is desired. If empty, send notifications for all event types.
     * 
     */
    @Import(name="eventTypes", required=true)
      private final List<String> eventTypes;

    public List<String> eventTypes() {
        return this.eventTypes;
    }

    /**
     * The desired format of the notification message payloads.
     * 
     */
    @Import(name="payloadFormat", required=true)
      private final String payloadFormat;

    public String payloadFormat() {
        return this.payloadFormat;
    }

    /**
     * The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
     * 
     */
    @Import(name="pubsubTopic", required=true)
      private final String pubsubTopic;

    public String pubsubTopic() {
        return this.pubsubTopic;
    }

    public NotificationConfigResponse(
        List<String> eventTypes,
        String payloadFormat,
        String pubsubTopic) {
        this.eventTypes = Objects.requireNonNull(eventTypes, "expected parameter 'eventTypes' to be non-null");
        this.payloadFormat = Objects.requireNonNull(payloadFormat, "expected parameter 'payloadFormat' to be non-null");
        this.pubsubTopic = Objects.requireNonNull(pubsubTopic, "expected parameter 'pubsubTopic' to be non-null");
    }

    private NotificationConfigResponse() {
        this.eventTypes = List.of();
        this.payloadFormat = null;
        this.pubsubTopic = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> eventTypes;
        private String payloadFormat;
        private String pubsubTopic;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventTypes = defaults.eventTypes;
    	      this.payloadFormat = defaults.payloadFormat;
    	      this.pubsubTopic = defaults.pubsubTopic;
        }

        public Builder eventTypes(List<String> eventTypes) {
            this.eventTypes = Objects.requireNonNull(eventTypes);
            return this;
        }
        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }
        public Builder payloadFormat(String payloadFormat) {
            this.payloadFormat = Objects.requireNonNull(payloadFormat);
            return this;
        }
        public Builder pubsubTopic(String pubsubTopic) {
            this.pubsubTopic = Objects.requireNonNull(pubsubTopic);
            return this;
        }        public NotificationConfigResponse build() {
            return new NotificationConfigResponse(eventTypes, payloadFormat, pubsubTopic);
        }
    }
}
