// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1beta1.inputs.AcceleratorConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.AdvancedMachineFeaturesResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.EphemeralStorageConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.GcfsConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.LinuxNodeConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.NodeKubeletConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.NodeTaintResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.ReservationAffinityResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.SandboxConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.ShieldedInstanceConfigResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.VirtualNICResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.WorkloadMetadataConfigResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Parameters that describe the nodes in a cluster.
 * 
 */
public final class NodeConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final NodeConfigResponse Empty = new NodeConfigResponse();

    /**
     * A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
     * 
     */
    @Import(name="accelerators", required=true)
    private List<AcceleratorConfigResponse> accelerators;

    /**
     * @return A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
     * 
     */
    public List<AcceleratorConfigResponse> accelerators() {
        return this.accelerators;
    }

    /**
     * Advanced features for the Compute Engine VM.
     * 
     */
    @Import(name="advancedMachineFeatures", required=true)
    private AdvancedMachineFeaturesResponse advancedMachineFeatures;

    /**
     * @return Advanced features for the Compute Engine VM.
     * 
     */
    public AdvancedMachineFeaturesResponse advancedMachineFeatures() {
        return this.advancedMachineFeatures;
    }

    /**
     *  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
     * 
     */
    @Import(name="bootDiskKmsKey", required=true)
    private String bootDiskKmsKey;

    /**
     * @return  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
     * 
     */
    public String bootDiskKmsKey() {
        return this.bootDiskKmsKey;
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
     * 
     */
    @Import(name="diskSizeGb", required=true)
    private Integer diskSizeGb;

    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }

    /**
     * Type of the disk attached to each node (e.g. &#39;pd-standard&#39;, &#39;pd-ssd&#39; or &#39;pd-balanced&#39;) If unspecified, the default disk type is &#39;pd-standard&#39;
     * 
     */
    @Import(name="diskType", required=true)
    private String diskType;

    /**
     * @return Type of the disk attached to each node (e.g. &#39;pd-standard&#39;, &#39;pd-ssd&#39; or &#39;pd-balanced&#39;) If unspecified, the default disk type is &#39;pd-standard&#39;
     * 
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    @Import(name="ephemeralStorageConfig", required=true)
    private EphemeralStorageConfigResponse ephemeralStorageConfig;

    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    public EphemeralStorageConfigResponse ephemeralStorageConfig() {
        return this.ephemeralStorageConfig;
    }

    /**
     * GCFS (Google Container File System) configs.
     * 
     */
    @Import(name="gcfsConfig", required=true)
    private GcfsConfigResponse gcfsConfig;

    /**
     * @return GCFS (Google Container File System) configs.
     * 
     */
    public GcfsConfigResponse gcfsConfig() {
        return this.gcfsConfig;
    }

    /**
     * Enable or disable gvnic on the node pool.
     * 
     */
    @Import(name="gvnic", required=true)
    private VirtualNICResponse gvnic;

    /**
     * @return Enable or disable gvnic on the node pool.
     * 
     */
    public VirtualNICResponse gvnic() {
        return this.gvnic;
    }

    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    @Import(name="imageType", required=true)
    private String imageType;

    /**
     * @return The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    public String imageType() {
        return this.imageType;
    }

    /**
     * Node kubelet configs.
     * 
     */
    @Import(name="kubeletConfig", required=true)
    private NodeKubeletConfigResponse kubeletConfig;

    /**
     * @return Node kubelet configs.
     * 
     */
    public NodeKubeletConfigResponse kubeletConfig() {
        return this.kubeletConfig;
    }

    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it&#39;s best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it&#39;s best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * Parameters that can be configured on Linux nodes.
     * 
     */
    @Import(name="linuxNodeConfig", required=true)
    private LinuxNodeConfigResponse linuxNodeConfig;

    /**
     * @return Parameters that can be configured on Linux nodes.
     * 
     */
    public LinuxNodeConfigResponse linuxNodeConfig() {
        return this.linuxNodeConfig;
    }

    /**
     * The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
     * 
     */
    @Import(name="localSsdCount", required=true)
    private Integer localSsdCount;

    /**
     * @return The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
     * 
     */
    public Integer localSsdCount() {
        return this.localSsdCount;
    }

    /**
     * The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.
     * 
     */
    @Import(name="machineType", required=true)
    private String machineType;

    /**
     * @return The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.
     * 
     */
    public String machineType() {
        return this.machineType;
    }

    /**
     * The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - &#34;cluster-location&#34; - &#34;cluster-name&#34; - &#34;cluster-uid&#34; - &#34;configure-sh&#34; - &#34;containerd-configure-sh&#34; - &#34;enable-oslogin&#34; - &#34;gci-ensure-gke-docker&#34; - &#34;gci-metrics-enabled&#34; - &#34;gci-update-strategy&#34; - &#34;instance-template&#34; - &#34;kube-env&#34; - &#34;startup-script&#34; - &#34;user-data&#34; - &#34;disable-address-manager&#34; - &#34;windows-startup-script-ps1&#34; - &#34;common-psm1&#34; - &#34;k8s-node-setup-psm1&#34; - &#34;install-ssh-psm1&#34; - &#34;user-profile-psm1&#34; Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value&#39;s size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
     * 
     */
    @Import(name="metadata", required=true)
    private Map<String,String> metadata;

    /**
     * @return The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - &#34;cluster-location&#34; - &#34;cluster-name&#34; - &#34;cluster-uid&#34; - &#34;configure-sh&#34; - &#34;containerd-configure-sh&#34; - &#34;enable-oslogin&#34; - &#34;gci-ensure-gke-docker&#34; - &#34;gci-metrics-enabled&#34; - &#34;gci-update-strategy&#34; - &#34;instance-template&#34; - &#34;kube-env&#34; - &#34;startup-script&#34; - &#34;user-data&#34; - &#34;disable-address-manager&#34; - &#34;windows-startup-script-ps1&#34; - &#34;common-psm1&#34; - &#34;k8s-node-setup-psm1&#34; - &#34;install-ssh-psm1&#34; - &#34;user-profile-psm1&#34; Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value&#39;s size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }

    /**
     * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: &#34;Intel Haswell&#34;` or `minCpuPlatform: &#34;Intel Sandy Bridge&#34;`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
     * 
     */
    @Import(name="minCpuPlatform", required=true)
    private String minCpuPlatform;

    /**
     * @return Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: &#34;Intel Haswell&#34;` or `minCpuPlatform: &#34;Intel Sandy Bridge&#34;`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
     * 
     */
    public String minCpuPlatform() {
        return this.minCpuPlatform;
    }

    /**
     * Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
     * 
     */
    @Import(name="nodeGroup", required=true)
    private String nodeGroup;

    /**
     * @return Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
     * 
     */
    public String nodeGroup() {
        return this.nodeGroup;
    }

    /**
     * The set of Google API scopes to be made available on all of the node VMs under the &#34;default&#34; service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
     * 
     */
    @Import(name="oauthScopes", required=true)
    private List<String> oauthScopes;

    /**
     * @return The set of Google API scopes to be made available on all of the node VMs under the &#34;default&#34; service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
     * 
     */
    public List<String> oauthScopes() {
        return this.oauthScopes;
    }

    /**
     * Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more inforamtion about preemptible VM instances.
     * 
     */
    @Import(name="preemptible", required=true)
    private Boolean preemptible;

    /**
     * @return Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more inforamtion about preemptible VM instances.
     * 
     */
    public Boolean preemptible() {
        return this.preemptible;
    }

    /**
     * The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
     * 
     */
    @Import(name="reservationAffinity", required=true)
    private ReservationAffinityResponse reservationAffinity;

    /**
     * @return The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
     * 
     */
    public ReservationAffinityResponse reservationAffinity() {
        return this.reservationAffinity;
    }

    /**
     * Sandbox configuration for this node.
     * 
     */
    @Import(name="sandboxConfig", required=true)
    private SandboxConfigResponse sandboxConfig;

    /**
     * @return Sandbox configuration for this node.
     * 
     */
    public SandboxConfigResponse sandboxConfig() {
        return this.sandboxConfig;
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the &#34;default&#34; service account is used.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the &#34;default&#34; service account is used.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * Shielded Instance options.
     * 
     */
    @Import(name="shieldedInstanceConfig", required=true)
    private ShieldedInstanceConfigResponse shieldedInstanceConfig;

    /**
     * @return Shielded Instance options.
     * 
     */
    public ShieldedInstanceConfigResponse shieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }

    /**
     * Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
     * 
     */
    @Import(name="spot", required=true)
    private Boolean spot;

    /**
     * @return Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
     * 
     */
    public Boolean spot() {
        return this.spot;
    }

    /**
     * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
     * 
     */
    @Import(name="tags", required=true)
    private List<String> tags;

    /**
     * @return The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
     * 
     */
    @Import(name="taints", required=true)
    private List<NodeTaintResponse> taints;

    /**
     * @return List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
     * 
     */
    public List<NodeTaintResponse> taints() {
        return this.taints;
    }

    /**
     * The workload metadata configuration for this node.
     * 
     */
    @Import(name="workloadMetadataConfig", required=true)
    private WorkloadMetadataConfigResponse workloadMetadataConfig;

    /**
     * @return The workload metadata configuration for this node.
     * 
     */
    public WorkloadMetadataConfigResponse workloadMetadataConfig() {
        return this.workloadMetadataConfig;
    }

    private NodeConfigResponse() {}

    private NodeConfigResponse(NodeConfigResponse $) {
        this.accelerators = $.accelerators;
        this.advancedMachineFeatures = $.advancedMachineFeatures;
        this.bootDiskKmsKey = $.bootDiskKmsKey;
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
        this.ephemeralStorageConfig = $.ephemeralStorageConfig;
        this.gcfsConfig = $.gcfsConfig;
        this.gvnic = $.gvnic;
        this.imageType = $.imageType;
        this.kubeletConfig = $.kubeletConfig;
        this.labels = $.labels;
        this.linuxNodeConfig = $.linuxNodeConfig;
        this.localSsdCount = $.localSsdCount;
        this.machineType = $.machineType;
        this.metadata = $.metadata;
        this.minCpuPlatform = $.minCpuPlatform;
        this.nodeGroup = $.nodeGroup;
        this.oauthScopes = $.oauthScopes;
        this.preemptible = $.preemptible;
        this.reservationAffinity = $.reservationAffinity;
        this.sandboxConfig = $.sandboxConfig;
        this.serviceAccount = $.serviceAccount;
        this.shieldedInstanceConfig = $.shieldedInstanceConfig;
        this.spot = $.spot;
        this.tags = $.tags;
        this.taints = $.taints;
        this.workloadMetadataConfig = $.workloadMetadataConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeConfigResponse $;

        public Builder() {
            $ = new NodeConfigResponse();
        }

        public Builder(NodeConfigResponse defaults) {
            $ = new NodeConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accelerators A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
         * 
         * @return builder
         * 
         */
        public Builder accelerators(List<AcceleratorConfigResponse> accelerators) {
            $.accelerators = accelerators;
            return this;
        }

        /**
         * @param accelerators A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
         * 
         * @return builder
         * 
         */
        public Builder accelerators(AcceleratorConfigResponse... accelerators) {
            return accelerators(List.of(accelerators));
        }

        /**
         * @param advancedMachineFeatures Advanced features for the Compute Engine VM.
         * 
         * @return builder
         * 
         */
        public Builder advancedMachineFeatures(AdvancedMachineFeaturesResponse advancedMachineFeatures) {
            $.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }

        /**
         * @param bootDiskKmsKey  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
         * 
         * @return builder
         * 
         */
        public Builder bootDiskKmsKey(String bootDiskKmsKey) {
            $.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }

        /**
         * @param diskSizeGb Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskType Type of the disk attached to each node (e.g. &#39;pd-standard&#39;, &#39;pd-ssd&#39; or &#39;pd-balanced&#39;) If unspecified, the default disk type is &#39;pd-standard&#39;
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param ephemeralStorageConfig Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorageConfig(EphemeralStorageConfigResponse ephemeralStorageConfig) {
            $.ephemeralStorageConfig = ephemeralStorageConfig;
            return this;
        }

        /**
         * @param gcfsConfig GCFS (Google Container File System) configs.
         * 
         * @return builder
         * 
         */
        public Builder gcfsConfig(GcfsConfigResponse gcfsConfig) {
            $.gcfsConfig = gcfsConfig;
            return this;
        }

        /**
         * @param gvnic Enable or disable gvnic on the node pool.
         * 
         * @return builder
         * 
         */
        public Builder gvnic(VirtualNICResponse gvnic) {
            $.gvnic = gvnic;
            return this;
        }

        /**
         * @param imageType The image type to use for this node. Note that for a given image type, the latest version of it will be used.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param kubeletConfig Node kubelet configs.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfig(NodeKubeletConfigResponse kubeletConfig) {
            $.kubeletConfig = kubeletConfig;
            return this;
        }

        /**
         * @param labels The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it&#39;s best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param linuxNodeConfig Parameters that can be configured on Linux nodes.
         * 
         * @return builder
         * 
         */
        public Builder linuxNodeConfig(LinuxNodeConfigResponse linuxNodeConfig) {
            $.linuxNodeConfig = linuxNodeConfig;
            return this;
        }

        /**
         * @param localSsdCount The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
         * 
         * @return builder
         * 
         */
        public Builder localSsdCount(Integer localSsdCount) {
            $.localSsdCount = localSsdCount;
            return this;
        }

        /**
         * @param machineType The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param metadata The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - &#34;cluster-location&#34; - &#34;cluster-name&#34; - &#34;cluster-uid&#34; - &#34;configure-sh&#34; - &#34;containerd-configure-sh&#34; - &#34;enable-oslogin&#34; - &#34;gci-ensure-gke-docker&#34; - &#34;gci-metrics-enabled&#34; - &#34;gci-update-strategy&#34; - &#34;instance-template&#34; - &#34;kube-env&#34; - &#34;startup-script&#34; - &#34;user-data&#34; - &#34;disable-address-manager&#34; - &#34;windows-startup-script-ps1&#34; - &#34;common-psm1&#34; - &#34;k8s-node-setup-psm1&#34; - &#34;install-ssh-psm1&#34; - &#34;user-profile-psm1&#34; Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value&#39;s size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param minCpuPlatform Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: &#34;Intel Haswell&#34;` or `minCpuPlatform: &#34;Intel Sandy Bridge&#34;`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
         * 
         * @return builder
         * 
         */
        public Builder minCpuPlatform(String minCpuPlatform) {
            $.minCpuPlatform = minCpuPlatform;
            return this;
        }

        /**
         * @param nodeGroup Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
         * 
         * @return builder
         * 
         */
        public Builder nodeGroup(String nodeGroup) {
            $.nodeGroup = nodeGroup;
            return this;
        }

        /**
         * @param oauthScopes The set of Google API scopes to be made available on all of the node VMs under the &#34;default&#34; service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(List<String> oauthScopes) {
            $.oauthScopes = oauthScopes;
            return this;
        }

        /**
         * @param oauthScopes The set of Google API scopes to be made available on all of the node VMs under the &#34;default&#34; service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }

        /**
         * @param preemptible Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more inforamtion about preemptible VM instances.
         * 
         * @return builder
         * 
         */
        public Builder preemptible(Boolean preemptible) {
            $.preemptible = preemptible;
            return this;
        }

        /**
         * @param reservationAffinity The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder reservationAffinity(ReservationAffinityResponse reservationAffinity) {
            $.reservationAffinity = reservationAffinity;
            return this;
        }

        /**
         * @param sandboxConfig Sandbox configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder sandboxConfig(SandboxConfigResponse sandboxConfig) {
            $.sandboxConfig = sandboxConfig;
            return this;
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the &#34;default&#34; service account is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param shieldedInstanceConfig Shielded Instance options.
         * 
         * @return builder
         * 
         */
        public Builder shieldedInstanceConfig(ShieldedInstanceConfigResponse shieldedInstanceConfig) {
            $.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        /**
         * @param spot Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
         * 
         * @return builder
         * 
         */
        public Builder spot(Boolean spot) {
            $.spot = spot;
            return this;
        }

        /**
         * @param tags The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param taints List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
         * 
         * @return builder
         * 
         */
        public Builder taints(List<NodeTaintResponse> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
         * 
         * @return builder
         * 
         */
        public Builder taints(NodeTaintResponse... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param workloadMetadataConfig The workload metadata configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder workloadMetadataConfig(WorkloadMetadataConfigResponse workloadMetadataConfig) {
            $.workloadMetadataConfig = workloadMetadataConfig;
            return this;
        }

        public NodeConfigResponse build() {
            $.accelerators = Objects.requireNonNull($.accelerators, "expected parameter 'accelerators' to be non-null");
            $.advancedMachineFeatures = Objects.requireNonNull($.advancedMachineFeatures, "expected parameter 'advancedMachineFeatures' to be non-null");
            $.bootDiskKmsKey = Objects.requireNonNull($.bootDiskKmsKey, "expected parameter 'bootDiskKmsKey' to be non-null");
            $.diskSizeGb = Objects.requireNonNull($.diskSizeGb, "expected parameter 'diskSizeGb' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.ephemeralStorageConfig = Objects.requireNonNull($.ephemeralStorageConfig, "expected parameter 'ephemeralStorageConfig' to be non-null");
            $.gcfsConfig = Objects.requireNonNull($.gcfsConfig, "expected parameter 'gcfsConfig' to be non-null");
            $.gvnic = Objects.requireNonNull($.gvnic, "expected parameter 'gvnic' to be non-null");
            $.imageType = Objects.requireNonNull($.imageType, "expected parameter 'imageType' to be non-null");
            $.kubeletConfig = Objects.requireNonNull($.kubeletConfig, "expected parameter 'kubeletConfig' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.linuxNodeConfig = Objects.requireNonNull($.linuxNodeConfig, "expected parameter 'linuxNodeConfig' to be non-null");
            $.localSsdCount = Objects.requireNonNull($.localSsdCount, "expected parameter 'localSsdCount' to be non-null");
            $.machineType = Objects.requireNonNull($.machineType, "expected parameter 'machineType' to be non-null");
            $.metadata = Objects.requireNonNull($.metadata, "expected parameter 'metadata' to be non-null");
            $.minCpuPlatform = Objects.requireNonNull($.minCpuPlatform, "expected parameter 'minCpuPlatform' to be non-null");
            $.nodeGroup = Objects.requireNonNull($.nodeGroup, "expected parameter 'nodeGroup' to be non-null");
            $.oauthScopes = Objects.requireNonNull($.oauthScopes, "expected parameter 'oauthScopes' to be non-null");
            $.preemptible = Objects.requireNonNull($.preemptible, "expected parameter 'preemptible' to be non-null");
            $.reservationAffinity = Objects.requireNonNull($.reservationAffinity, "expected parameter 'reservationAffinity' to be non-null");
            $.sandboxConfig = Objects.requireNonNull($.sandboxConfig, "expected parameter 'sandboxConfig' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.shieldedInstanceConfig = Objects.requireNonNull($.shieldedInstanceConfig, "expected parameter 'shieldedInstanceConfig' to be non-null");
            $.spot = Objects.requireNonNull($.spot, "expected parameter 'spot' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            $.taints = Objects.requireNonNull($.taints, "expected parameter 'taints' to be non-null");
            $.workloadMetadataConfig = Objects.requireNonNull($.workloadMetadataConfig, "expected parameter 'workloadMetadataConfig' to be non-null");
            return $;
        }
    }

}
