// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datalabeling.v1beta1.inputs.GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EvaluationJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final EvaluationJobArgs Empty = new EvaluationJobArgs();

    /**
     * Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: &#34;projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}&#34;
     * 
     */
    @Import(name="annotationSpecSet", required=true)
    private Output<String> annotationSpecSet;

    /**
     * @return Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: &#34;projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}&#34;
     * 
     */
    public Output<String> annotationSpecSet() {
        return this.annotationSpecSet;
    }

    /**
     * Description of the job. The description can be up to 25,000 characters long.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the job. The description can be up to 25,000 characters long.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Configuration details for the evaluation job.
     * 
     */
    @Import(name="evaluationJobConfig", required=true)
    private Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig;

    /**
     * @return Configuration details for the evaluation job.
     * 
     */
    public Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig() {
        return this.evaluationJobConfig;
    }

    /**
     * Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job&#39;s BigQuery table, set this to `false`.
     * 
     */
    @Import(name="labelMissingGroundTruth", required=true)
    private Output<Boolean> labelMissingGroundTruth;

    /**
     * @return Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job&#39;s BigQuery table, set this to `false`.
     * 
     */
    public Output<Boolean> labelMissingGroundTruth() {
        return this.labelMissingGroundTruth;
    }

    /**
     * The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: &#34;projects/{project_id}/models/{model_name}/versions/{version_name}&#34; There can only be one evaluation job per model version.
     * 
     */
    @Import(name="modelVersion", required=true)
    private Output<String> modelVersion;

    /**
     * @return The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: &#34;projects/{project_id}/models/{model_name}/versions/{version_name}&#34; There can only be one evaluation job per model version.
     * 
     */
    public Output<String> modelVersion() {
        return this.modelVersion;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
     * 
     */
    @Import(name="schedule", required=true)
    private Output<String> schedule;

    /**
     * @return Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
     * 
     */
    public Output<String> schedule() {
        return this.schedule;
    }

    private EvaluationJobArgs() {}

    private EvaluationJobArgs(EvaluationJobArgs $) {
        this.annotationSpecSet = $.annotationSpecSet;
        this.description = $.description;
        this.evaluationJobConfig = $.evaluationJobConfig;
        this.labelMissingGroundTruth = $.labelMissingGroundTruth;
        this.modelVersion = $.modelVersion;
        this.project = $.project;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EvaluationJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EvaluationJobArgs $;

        public Builder() {
            $ = new EvaluationJobArgs();
        }

        public Builder(EvaluationJobArgs defaults) {
            $ = new EvaluationJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotationSpecSet Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: &#34;projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder annotationSpecSet(Output<String> annotationSpecSet) {
            $.annotationSpecSet = annotationSpecSet;
            return this;
        }

        /**
         * @param annotationSpecSet Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: &#34;projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder annotationSpecSet(String annotationSpecSet) {
            return annotationSpecSet(Output.of(annotationSpecSet));
        }

        /**
         * @param description Description of the job. The description can be up to 25,000 characters long.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the job. The description can be up to 25,000 characters long.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param evaluationJobConfig Configuration details for the evaluation job.
         * 
         * @return builder
         * 
         */
        public Builder evaluationJobConfig(Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig) {
            $.evaluationJobConfig = evaluationJobConfig;
            return this;
        }

        /**
         * @param evaluationJobConfig Configuration details for the evaluation job.
         * 
         * @return builder
         * 
         */
        public Builder evaluationJobConfig(GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs evaluationJobConfig) {
            return evaluationJobConfig(Output.of(evaluationJobConfig));
        }

        /**
         * @param labelMissingGroundTruth Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job&#39;s BigQuery table, set this to `false`.
         * 
         * @return builder
         * 
         */
        public Builder labelMissingGroundTruth(Output<Boolean> labelMissingGroundTruth) {
            $.labelMissingGroundTruth = labelMissingGroundTruth;
            return this;
        }

        /**
         * @param labelMissingGroundTruth Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job&#39;s BigQuery table, set this to `false`.
         * 
         * @return builder
         * 
         */
        public Builder labelMissingGroundTruth(Boolean labelMissingGroundTruth) {
            return labelMissingGroundTruth(Output.of(labelMissingGroundTruth));
        }

        /**
         * @param modelVersion The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: &#34;projects/{project_id}/models/{model_name}/versions/{version_name}&#34; There can only be one evaluation job per model version.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: &#34;projects/{project_id}/models/{model_name}/versions/{version_name}&#34; There can only be one evaluation job per model version.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param schedule Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
         * 
         * @return builder
         * 
         */
        public Builder schedule(Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public EvaluationJobArgs build() {
            $.annotationSpecSet = Objects.requireNonNull($.annotationSpecSet, "expected parameter 'annotationSpecSet' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.evaluationJobConfig = Objects.requireNonNull($.evaluationJobConfig, "expected parameter 'evaluationJobConfig' to be non-null");
            $.labelMissingGroundTruth = Objects.requireNonNull($.labelMissingGroundTruth, "expected parameter 'labelMissingGroundTruth' to be non-null");
            $.modelVersion = Objects.requireNonNull($.modelVersion, "expected parameter 'modelVersion' to be non-null");
            $.schedule = Objects.requireNonNull($.schedule, "expected parameter 'schedule' to be non-null");
            return $;
        }
    }

}
