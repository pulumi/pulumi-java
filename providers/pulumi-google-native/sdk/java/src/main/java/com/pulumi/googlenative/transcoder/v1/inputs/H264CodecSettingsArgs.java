// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * H264 codec settings.
 * 
 */
public final class H264CodecSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final H264CodecSettingsArgs Empty = new H264CodecSettingsArgs();

    /**
     * Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
     */
    @Import(name="allowOpenGop")
    private @Nullable Output<Boolean> allowOpenGop;

    /**
     * @return Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
     */
    public Optional<Output<Boolean>> allowOpenGop() {
        return Optional.ofNullable(this.allowOpenGop);
    }

    /**
     * Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
     */
    @Import(name="aqStrength")
    private @Nullable Output<Double> aqStrength;

    /**
     * @return Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
     */
    public Optional<Output<Double>> aqStrength() {
        return Optional.ofNullable(this.aqStrength);
    }

    /**
     * The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
     */
    @Import(name="bFrameCount")
    private @Nullable Output<Integer> bFrameCount;

    /**
     * @return The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
     */
    public Optional<Output<Integer>> bFrameCount() {
        return Optional.ofNullable(this.bFrameCount);
    }

    /**
     * Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
     */
    @Import(name="bPyramid")
    private @Nullable Output<Boolean> bPyramid;

    /**
     * @return Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
     */
    public Optional<Output<Boolean>> bPyramid() {
        return Optional.ofNullable(this.bPyramid);
    }

    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
     */
    @Import(name="bitrateBps", required=true)
    private Output<Integer> bitrateBps;

    /**
     * @return The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
     */
    public Output<Integer> bitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
     */
    @Import(name="crfLevel")
    private @Nullable Output<Integer> crfLevel;

    /**
     * @return Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
     */
    public Optional<Output<Integer>> crfLevel() {
        return Optional.ofNullable(this.crfLevel);
    }

    /**
     * Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
     */
    @Import(name="enableTwoPass")
    private @Nullable Output<Boolean> enableTwoPass;

    /**
     * @return Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
     */
    public Optional<Output<Boolean>> enableTwoPass() {
        return Optional.ofNullable(this.enableTwoPass);
    }

    /**
     * The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
     * 
     */
    @Import(name="entropyCoder")
    private @Nullable Output<String> entropyCoder;

    /**
     * @return The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
     * 
     */
    public Optional<Output<String>> entropyCoder() {
        return Optional.ofNullable(this.entropyCoder);
    }

    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    @Import(name="frameRate", required=true)
    private Output<Double> frameRate;

    /**
     * @return The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    public Output<Double> frameRate() {
        return this.frameRate;
    }

    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    @Import(name="gopDuration")
    private @Nullable Output<String> gopDuration;

    /**
     * @return Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    public Optional<Output<String>> gopDuration() {
        return Optional.ofNullable(this.gopDuration);
    }

    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    @Import(name="gopFrameCount")
    private @Nullable Output<Integer> gopFrameCount;

    /**
     * @return Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    public Optional<Output<Integer>> gopFrameCount() {
        return Optional.ofNullable(this.gopFrameCount);
    }

    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    @Import(name="heightPixels")
    private @Nullable Output<Integer> heightPixels;

    /**
     * @return The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    public Optional<Output<Integer>> heightPixels() {
        return Optional.ofNullable(this.heightPixels);
    }

    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    @Import(name="pixelFormat")
    private @Nullable Output<String> pixelFormat;

    /**
     * @return Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    public Optional<Output<String>> pixelFormat() {
        return Optional.ofNullable(this.pixelFormat);
    }

    /**
     * Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    @Import(name="preset")
    private @Nullable Output<String> preset;

    /**
     * @return Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    public Optional<Output<String>> preset() {
        return Optional.ofNullable(this.preset);
    }

    /**
     * Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
     */
    @Import(name="rateControlMode")
    private @Nullable Output<String> rateControlMode;

    /**
     * @return Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
     */
    public Optional<Output<String>> rateControlMode() {
        return Optional.ofNullable(this.rateControlMode);
    }

    /**
     * Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    @Import(name="tune")
    private @Nullable Output<String> tune;

    /**
     * @return Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    public Optional<Output<String>> tune() {
        return Optional.ofNullable(this.tune);
    }

    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
     */
    @Import(name="vbvFullnessBits")
    private @Nullable Output<Integer> vbvFullnessBits;

    /**
     * @return Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
     */
    public Optional<Output<Integer>> vbvFullnessBits() {
        return Optional.ofNullable(this.vbvFullnessBits);
    }

    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
     */
    @Import(name="vbvSizeBits")
    private @Nullable Output<Integer> vbvSizeBits;

    /**
     * @return Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
     */
    public Optional<Output<Integer>> vbvSizeBits() {
        return Optional.ofNullable(this.vbvSizeBits);
    }

    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    @Import(name="widthPixels")
    private @Nullable Output<Integer> widthPixels;

    /**
     * @return The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    public Optional<Output<Integer>> widthPixels() {
        return Optional.ofNullable(this.widthPixels);
    }

    private H264CodecSettingsArgs() {}

    private H264CodecSettingsArgs(H264CodecSettingsArgs $) {
        this.allowOpenGop = $.allowOpenGop;
        this.aqStrength = $.aqStrength;
        this.bFrameCount = $.bFrameCount;
        this.bPyramid = $.bPyramid;
        this.bitrateBps = $.bitrateBps;
        this.crfLevel = $.crfLevel;
        this.enableTwoPass = $.enableTwoPass;
        this.entropyCoder = $.entropyCoder;
        this.frameRate = $.frameRate;
        this.gopDuration = $.gopDuration;
        this.gopFrameCount = $.gopFrameCount;
        this.heightPixels = $.heightPixels;
        this.pixelFormat = $.pixelFormat;
        this.preset = $.preset;
        this.profile = $.profile;
        this.rateControlMode = $.rateControlMode;
        this.tune = $.tune;
        this.vbvFullnessBits = $.vbvFullnessBits;
        this.vbvSizeBits = $.vbvSizeBits;
        this.widthPixels = $.widthPixels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(H264CodecSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private H264CodecSettingsArgs $;

        public Builder() {
            $ = new H264CodecSettingsArgs();
        }

        public Builder(H264CodecSettingsArgs defaults) {
            $ = new H264CodecSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowOpenGop Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowOpenGop(@Nullable Output<Boolean> allowOpenGop) {
            $.allowOpenGop = allowOpenGop;
            return this;
        }

        /**
         * @param allowOpenGop Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowOpenGop(Boolean allowOpenGop) {
            return allowOpenGop(Output.of(allowOpenGop));
        }

        /**
         * @param aqStrength Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder aqStrength(@Nullable Output<Double> aqStrength) {
            $.aqStrength = aqStrength;
            return this;
        }

        /**
         * @param aqStrength Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder aqStrength(Double aqStrength) {
            return aqStrength(Output.of(aqStrength));
        }

        /**
         * @param bFrameCount The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder bFrameCount(@Nullable Output<Integer> bFrameCount) {
            $.bFrameCount = bFrameCount;
            return this;
        }

        /**
         * @param bFrameCount The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder bFrameCount(Integer bFrameCount) {
            return bFrameCount(Output.of(bFrameCount));
        }

        /**
         * @param bPyramid Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bPyramid(@Nullable Output<Boolean> bPyramid) {
            $.bPyramid = bPyramid;
            return this;
        }

        /**
         * @param bPyramid Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bPyramid(Boolean bPyramid) {
            return bPyramid(Output.of(bPyramid));
        }

        /**
         * @param bitrateBps The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Output<Integer> bitrateBps) {
            $.bitrateBps = bitrateBps;
            return this;
        }

        /**
         * @param bitrateBps The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Integer bitrateBps) {
            return bitrateBps(Output.of(bitrateBps));
        }

        /**
         * @param crfLevel Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(@Nullable Output<Integer> crfLevel) {
            $.crfLevel = crfLevel;
            return this;
        }

        /**
         * @param crfLevel Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(Integer crfLevel) {
            return crfLevel(Output.of(crfLevel));
        }

        /**
         * @param enableTwoPass Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableTwoPass(@Nullable Output<Boolean> enableTwoPass) {
            $.enableTwoPass = enableTwoPass;
            return this;
        }

        /**
         * @param enableTwoPass Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableTwoPass(Boolean enableTwoPass) {
            return enableTwoPass(Output.of(enableTwoPass));
        }

        /**
         * @param entropyCoder The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
         * 
         * @return builder
         * 
         */
        public Builder entropyCoder(@Nullable Output<String> entropyCoder) {
            $.entropyCoder = entropyCoder;
            return this;
        }

        /**
         * @param entropyCoder The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
         * 
         * @return builder
         * 
         */
        public Builder entropyCoder(String entropyCoder) {
            return entropyCoder(Output.of(entropyCoder));
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Output<Double> frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Double frameRate) {
            return frameRate(Output.of(frameRate));
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(@Nullable Output<String> gopDuration) {
            $.gopDuration = gopDuration;
            return this;
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(String gopDuration) {
            return gopDuration(Output.of(gopDuration));
        }

        /**
         * @param gopFrameCount Select the GOP size based on the specified frame count. Must be greater than zero.
         * 
         * @return builder
         * 
         */
        public Builder gopFrameCount(@Nullable Output<Integer> gopFrameCount) {
            $.gopFrameCount = gopFrameCount;
            return this;
        }

        /**
         * @param gopFrameCount Select the GOP size based on the specified frame count. Must be greater than zero.
         * 
         * @return builder
         * 
         */
        public Builder gopFrameCount(Integer gopFrameCount) {
            return gopFrameCount(Output.of(gopFrameCount));
        }

        /**
         * @param heightPixels The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(@Nullable Output<Integer> heightPixels) {
            $.heightPixels = heightPixels;
            return this;
        }

        /**
         * @param heightPixels The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(Integer heightPixels) {
            return heightPixels(Output.of(heightPixels));
        }

        /**
         * @param pixelFormat Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(@Nullable Output<String> pixelFormat) {
            $.pixelFormat = pixelFormat;
            return this;
        }

        /**
         * @param pixelFormat Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(String pixelFormat) {
            return pixelFormat(Output.of(pixelFormat));
        }

        /**
         * @param preset Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder preset(@Nullable Output<String> preset) {
            $.preset = preset;
            return this;
        }

        /**
         * @param preset Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder preset(String preset) {
            return preset(Output.of(preset));
        }

        /**
         * @param profile Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param rateControlMode Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(@Nullable Output<String> rateControlMode) {
            $.rateControlMode = rateControlMode;
            return this;
        }

        /**
         * @param rateControlMode Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(String rateControlMode) {
            return rateControlMode(Output.of(rateControlMode));
        }

        /**
         * @param tune Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder tune(@Nullable Output<String> tune) {
            $.tune = tune;
            return this;
        }

        /**
         * @param tune Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder tune(String tune) {
            return tune(Output.of(tune));
        }

        /**
         * @param vbvFullnessBits Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
         * 
         * @return builder
         * 
         */
        public Builder vbvFullnessBits(@Nullable Output<Integer> vbvFullnessBits) {
            $.vbvFullnessBits = vbvFullnessBits;
            return this;
        }

        /**
         * @param vbvFullnessBits Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
         * 
         * @return builder
         * 
         */
        public Builder vbvFullnessBits(Integer vbvFullnessBits) {
            return vbvFullnessBits(Output.of(vbvFullnessBits));
        }

        /**
         * @param vbvSizeBits Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
         * 
         * @return builder
         * 
         */
        public Builder vbvSizeBits(@Nullable Output<Integer> vbvSizeBits) {
            $.vbvSizeBits = vbvSizeBits;
            return this;
        }

        /**
         * @param vbvSizeBits Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
         * 
         * @return builder
         * 
         */
        public Builder vbvSizeBits(Integer vbvSizeBits) {
            return vbvSizeBits(Output.of(vbvSizeBits));
        }

        /**
         * @param widthPixels The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(@Nullable Output<Integer> widthPixels) {
            $.widthPixels = widthPixels;
            return this;
        }

        /**
         * @param widthPixels The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(Integer widthPixels) {
            return widthPixels(Output.of(widthPixels));
        }

        public H264CodecSettingsArgs build() {
            $.bitrateBps = Objects.requireNonNull($.bitrateBps, "expected parameter 'bitrateBps' to be non-null");
            $.frameRate = Objects.requireNonNull($.frameRate, "expected parameter 'frameRate' to be non-null");
            return $;
        }
    }

}
