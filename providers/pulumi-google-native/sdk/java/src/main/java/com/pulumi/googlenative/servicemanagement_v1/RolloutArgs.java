// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.servicemanagement_v1.enums.RolloutStatus;
import com.pulumi.googlenative.servicemanagement_v1.inputs.DeleteServiceStrategyArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.TrafficPercentStrategyArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RolloutArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutArgs Empty = new RolloutArgs();

    /**
     * Creation time of the rollout. Readonly.
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> createTime() {
        return this.createTime == null ? Codegen.empty() : this.createTime;
    }

    /**
     * The strategy associated with a rollout to delete a `ManagedService`. Readonly.
     * 
     */
    @Import(name="deleteServiceStrategy")
      private final @Nullable Output<DeleteServiceStrategyArgs> deleteServiceStrategy;

    public Output<DeleteServiceStrategyArgs> deleteServiceStrategy() {
        return this.deleteServiceStrategy == null ? Codegen.empty() : this.deleteServiceStrategy;
    }

    /**
     * Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where &#34;date&#34; is the create date in ISO 8601 format. &#34;revision number&#34; is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is &#39;2016-02-16r1&#39;
     * 
     */
    @Import(name="rolloutId")
      private final @Nullable Output<String> rolloutId;

    public Output<String> rolloutId() {
        return this.rolloutId == null ? Codegen.empty() : this.rolloutId;
    }

    /**
     * The name of the service associated with this Rollout.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The status of this rollout. Readonly. In case of a failed rollout, the system will automatically rollback to the current Rollout version. Readonly.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<RolloutStatus> status;

    public Output<RolloutStatus> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * Google Service Control selects service configurations based on traffic percentage.
     * 
     */
    @Import(name="trafficPercentStrategy")
      private final @Nullable Output<TrafficPercentStrategyArgs> trafficPercentStrategy;

    public Output<TrafficPercentStrategyArgs> trafficPercentStrategy() {
        return this.trafficPercentStrategy == null ? Codegen.empty() : this.trafficPercentStrategy;
    }

    public RolloutArgs(
        @Nullable Output<String> createTime,
        @Nullable Output<DeleteServiceStrategyArgs> deleteServiceStrategy,
        @Nullable Output<String> rolloutId,
        Output<String> serviceName,
        @Nullable Output<RolloutStatus> status,
        @Nullable Output<TrafficPercentStrategyArgs> trafficPercentStrategy) {
        this.createTime = createTime;
        this.deleteServiceStrategy = deleteServiceStrategy;
        this.rolloutId = rolloutId;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.status = status;
        this.trafficPercentStrategy = trafficPercentStrategy;
    }

    private RolloutArgs() {
        this.createTime = Codegen.empty();
        this.deleteServiceStrategy = Codegen.empty();
        this.rolloutId = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.status = Codegen.empty();
        this.trafficPercentStrategy = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RolloutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createTime;
        private @Nullable Output<DeleteServiceStrategyArgs> deleteServiceStrategy;
        private @Nullable Output<String> rolloutId;
        private Output<String> serviceName;
        private @Nullable Output<RolloutStatus> status;
        private @Nullable Output<TrafficPercentStrategyArgs> trafficPercentStrategy;

        public Builder() {
    	      // Empty
        }

        public Builder(RolloutArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.deleteServiceStrategy = defaults.deleteServiceStrategy;
    	      this.rolloutId = defaults.rolloutId;
    	      this.serviceName = defaults.serviceName;
    	      this.status = defaults.status;
    	      this.trafficPercentStrategy = defaults.trafficPercentStrategy;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }
        public Builder createTime(@Nullable String createTime) {
            this.createTime = Codegen.ofNullable(createTime);
            return this;
        }
        public Builder deleteServiceStrategy(@Nullable Output<DeleteServiceStrategyArgs> deleteServiceStrategy) {
            this.deleteServiceStrategy = deleteServiceStrategy;
            return this;
        }
        public Builder deleteServiceStrategy(@Nullable DeleteServiceStrategyArgs deleteServiceStrategy) {
            this.deleteServiceStrategy = Codegen.ofNullable(deleteServiceStrategy);
            return this;
        }
        public Builder rolloutId(@Nullable Output<String> rolloutId) {
            this.rolloutId = rolloutId;
            return this;
        }
        public Builder rolloutId(@Nullable String rolloutId) {
            this.rolloutId = Codegen.ofNullable(rolloutId);
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder status(@Nullable Output<RolloutStatus> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable RolloutStatus status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder trafficPercentStrategy(@Nullable Output<TrafficPercentStrategyArgs> trafficPercentStrategy) {
            this.trafficPercentStrategy = trafficPercentStrategy;
            return this;
        }
        public Builder trafficPercentStrategy(@Nullable TrafficPercentStrategyArgs trafficPercentStrategy) {
            this.trafficPercentStrategy = Codegen.ofNullable(trafficPercentStrategy);
            return this;
        }        public RolloutArgs build() {
            return new RolloutArgs(createTime, deleteServiceStrategy, rolloutId, serviceName, status, trafficPercentStrategy);
        }
    }
}
