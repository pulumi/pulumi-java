// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1beta4.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Read-replica configuration specific to MySQL databases.
 * 
 */
public final class MySqlReplicaConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final MySqlReplicaConfigurationResponse Empty = new MySqlReplicaConfigurationResponse();

    /**
     * PEM representation of the trusted CA&#39;s x509 certificate.
     * 
     */
    @Import(name="caCertificate", required=true)
    private String caCertificate;

    public String caCertificate() {
        return this.caCertificate;
    }

    /**
     * PEM representation of the replica&#39;s x509 certificate.
     * 
     */
    @Import(name="clientCertificate", required=true)
    private String clientCertificate;

    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * PEM representation of the replica&#39;s private key. The corresponsing public key is encoded in the client&#39;s certificate.
     * 
     */
    @Import(name="clientKey", required=true)
    private String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    /**
     * Seconds to wait between connect retries. MySQL&#39;s default is 60 seconds.
     * 
     */
    @Import(name="connectRetryInterval", required=true)
    private Integer connectRetryInterval;

    public Integer connectRetryInterval() {
        return this.connectRetryInterval;
    }

    /**
     * Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
     * 
     */
    @Import(name="dumpFilePath", required=true)
    private String dumpFilePath;

    public String dumpFilePath() {
        return this.dumpFilePath;
    }

    /**
     * This is always `sql#mysqlReplicaConfiguration`.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * Interval in milliseconds between replication heartbeats.
     * 
     */
    @Import(name="masterHeartbeatPeriod", required=true)
    private String masterHeartbeatPeriod;

    public String masterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }

    /**
     * The password for the replication connection.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    /**
     * A list of permissible ciphers to use for SSL encryption.
     * 
     */
    @Import(name="sslCipher", required=true)
    private String sslCipher;

    public String sslCipher() {
        return this.sslCipher;
    }

    /**
     * The username for the replication connection.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    /**
     * Whether or not to check the primary instance&#39;s Common Name value in the certificate that it sends during the SSL handshake.
     * 
     */
    @Import(name="verifyServerCertificate", required=true)
    private Boolean verifyServerCertificate;

    public Boolean verifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    private MySqlReplicaConfigurationResponse() {}

    private MySqlReplicaConfigurationResponse(MySqlReplicaConfigurationResponse $) {
        this.caCertificate = $.caCertificate;
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.connectRetryInterval = $.connectRetryInterval;
        this.dumpFilePath = $.dumpFilePath;
        this.kind = $.kind;
        this.masterHeartbeatPeriod = $.masterHeartbeatPeriod;
        this.password = $.password;
        this.sslCipher = $.sslCipher;
        this.username = $.username;
        this.verifyServerCertificate = $.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlReplicaConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlReplicaConfigurationResponse $;

        public Builder() {
            $ = new MySqlReplicaConfigurationResponse();
        }

        public Builder(MySqlReplicaConfigurationResponse defaults) {
            $ = new MySqlReplicaConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder caCertificate(String caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder connectRetryInterval(Integer connectRetryInterval) {
            $.connectRetryInterval = connectRetryInterval;
            return this;
        }

        public Builder dumpFilePath(String dumpFilePath) {
            $.dumpFilePath = dumpFilePath;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder masterHeartbeatPeriod(String masterHeartbeatPeriod) {
            $.masterHeartbeatPeriod = masterHeartbeatPeriod;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder sslCipher(String sslCipher) {
            $.sslCipher = sslCipher;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            $.verifyServerCertificate = verifyServerCertificate;
            return this;
        }

        public MySqlReplicaConfigurationResponse build() {
            $.caCertificate = Objects.requireNonNull($.caCertificate, "expected parameter 'caCertificate' to be non-null");
            $.clientCertificate = Objects.requireNonNull($.clientCertificate, "expected parameter 'clientCertificate' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.connectRetryInterval = Objects.requireNonNull($.connectRetryInterval, "expected parameter 'connectRetryInterval' to be non-null");
            $.dumpFilePath = Objects.requireNonNull($.dumpFilePath, "expected parameter 'dumpFilePath' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.masterHeartbeatPeriod = Objects.requireNonNull($.masterHeartbeatPeriod, "expected parameter 'masterHeartbeatPeriod' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.sslCipher = Objects.requireNonNull($.sslCipher, "expected parameter 'sslCipher' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            $.verifyServerCertificate = Objects.requireNonNull($.verifyServerCertificate, "expected parameter 'verifyServerCertificate' to be non-null");
            return $;
        }
    }

}
