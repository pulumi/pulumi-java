// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.enums.MutualTlsMode;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * [Deprecated] Configuration for the mutual Tls mode for peer authentication. Configuration for the mutual Tls mode for peer authentication.
 * 
 */
public final class MutualTlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MutualTlsArgs Empty = new MutualTlsArgs();

    /**
     * Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<MutualTlsMode> mode;

    /**
     * @return Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS.
     * 
     */
    public Optional<Output<MutualTlsMode>> mode() {
        return Optional.ofNullable(this.mode);
    }

    private MutualTlsArgs() {}

    private MutualTlsArgs(MutualTlsArgs $) {
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MutualTlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MutualTlsArgs $;

        public Builder() {
            $ = new MutualTlsArgs();
        }

        public Builder(MutualTlsArgs defaults) {
            $ = new MutualTlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<MutualTlsMode> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS.
         * 
         * @return builder
         * 
         */
        public Builder mode(MutualTlsMode mode) {
            return mode(Output.of(mode));
        }

        public MutualTlsArgs build() {
            return $;
        }
    }

}
