// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.secretmanager.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
 * 
 */
public final class RotationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RotationArgs Empty = new RotationArgs();

    /**
     * Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
     * 
     */
    @Import(name="nextRotationTime")
    private @Nullable Output<String> nextRotationTime;

    /**
     * @return Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
     * 
     */
    public Optional<Output<String>> nextRotationTime() {
        return Optional.ofNullable(this.nextRotationTime);
    }

    /**
     * Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
     * 
     */
    @Import(name="rotationPeriod")
    private @Nullable Output<String> rotationPeriod;

    /**
     * @return Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
     * 
     */
    public Optional<Output<String>> rotationPeriod() {
        return Optional.ofNullable(this.rotationPeriod);
    }

    private RotationArgs() {}

    private RotationArgs(RotationArgs $) {
        this.nextRotationTime = $.nextRotationTime;
        this.rotationPeriod = $.rotationPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RotationArgs $;

        public Builder() {
            $ = new RotationArgs();
        }

        public Builder(RotationArgs defaults) {
            $ = new RotationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nextRotationTime Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
         * 
         * @return builder
         * 
         */
        public Builder nextRotationTime(@Nullable Output<String> nextRotationTime) {
            $.nextRotationTime = nextRotationTime;
            return this;
        }

        /**
         * @param nextRotationTime Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
         * 
         * @return builder
         * 
         */
        public Builder nextRotationTime(String nextRotationTime) {
            return nextRotationTime(Output.of(nextRotationTime));
        }

        /**
         * @param rotationPeriod Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(@Nullable Output<String> rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        /**
         * @param rotationPeriod Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(String rotationPeriod) {
            return rotationPeriod(Output.of(rotationPeriod));
        }

        public RotationArgs build() {
            return $;
        }
    }

}
