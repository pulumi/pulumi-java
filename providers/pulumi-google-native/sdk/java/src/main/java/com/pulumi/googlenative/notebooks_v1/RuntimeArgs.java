// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.notebooks_v1.inputs.RuntimeAccessConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.RuntimeSoftwareConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.VirtualMachineArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RuntimeArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuntimeArgs Empty = new RuntimeArgs();

    /**
     * The config settings for accessing runtime.
     * 
     */
    @Import(name="accessConfig")
      private final @Nullable Output<RuntimeAccessConfigArgs> accessConfig;

    public Output<RuntimeAccessConfigArgs> accessConfig() {
        return this.accessConfig == null ? Codegen.empty() : this.accessConfig;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="runtimeId", required=true)
      private final Output<String> runtimeId;

    public Output<String> runtimeId() {
        return this.runtimeId;
    }

    /**
     * The config settings for software inside the runtime.
     * 
     */
    @Import(name="softwareConfig")
      private final @Nullable Output<RuntimeSoftwareConfigArgs> softwareConfig;

    public Output<RuntimeSoftwareConfigArgs> softwareConfig() {
        return this.softwareConfig == null ? Codegen.empty() : this.softwareConfig;
    }

    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * 
     */
    @Import(name="virtualMachine")
      private final @Nullable Output<VirtualMachineArgs> virtualMachine;

    public Output<VirtualMachineArgs> virtualMachine() {
        return this.virtualMachine == null ? Codegen.empty() : this.virtualMachine;
    }

    public RuntimeArgs(
        @Nullable Output<RuntimeAccessConfigArgs> accessConfig,
        @Nullable Output<String> location,
        @Nullable Output<String> project,
        Output<String> runtimeId,
        @Nullable Output<RuntimeSoftwareConfigArgs> softwareConfig,
        @Nullable Output<VirtualMachineArgs> virtualMachine) {
        this.accessConfig = accessConfig;
        this.location = location;
        this.project = project;
        this.runtimeId = Objects.requireNonNull(runtimeId, "expected parameter 'runtimeId' to be non-null");
        this.softwareConfig = softwareConfig;
        this.virtualMachine = virtualMachine;
    }

    private RuntimeArgs() {
        this.accessConfig = Codegen.empty();
        this.location = Codegen.empty();
        this.project = Codegen.empty();
        this.runtimeId = Codegen.empty();
        this.softwareConfig = Codegen.empty();
        this.virtualMachine = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuntimeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RuntimeAccessConfigArgs> accessConfig;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;
        private Output<String> runtimeId;
        private @Nullable Output<RuntimeSoftwareConfigArgs> softwareConfig;
        private @Nullable Output<VirtualMachineArgs> virtualMachine;

        public Builder() {
    	      // Empty
        }

        public Builder(RuntimeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfig = defaults.accessConfig;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.runtimeId = defaults.runtimeId;
    	      this.softwareConfig = defaults.softwareConfig;
    	      this.virtualMachine = defaults.virtualMachine;
        }

        public Builder accessConfig(@Nullable Output<RuntimeAccessConfigArgs> accessConfig) {
            this.accessConfig = accessConfig;
            return this;
        }
        public Builder accessConfig(@Nullable RuntimeAccessConfigArgs accessConfig) {
            this.accessConfig = Codegen.ofNullable(accessConfig);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder runtimeId(Output<String> runtimeId) {
            this.runtimeId = Objects.requireNonNull(runtimeId);
            return this;
        }
        public Builder runtimeId(String runtimeId) {
            this.runtimeId = Output.of(Objects.requireNonNull(runtimeId));
            return this;
        }
        public Builder softwareConfig(@Nullable Output<RuntimeSoftwareConfigArgs> softwareConfig) {
            this.softwareConfig = softwareConfig;
            return this;
        }
        public Builder softwareConfig(@Nullable RuntimeSoftwareConfigArgs softwareConfig) {
            this.softwareConfig = Codegen.ofNullable(softwareConfig);
            return this;
        }
        public Builder virtualMachine(@Nullable Output<VirtualMachineArgs> virtualMachine) {
            this.virtualMachine = virtualMachine;
            return this;
        }
        public Builder virtualMachine(@Nullable VirtualMachineArgs virtualMachine) {
            this.virtualMachine = Codegen.ofNullable(virtualMachine);
            return this;
        }        public RuntimeArgs build() {
            return new RuntimeArgs(accessConfig, location, project, runtimeId, softwareConfig, virtualMachine);
        }
    }
}
