// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder_v1.inputs.AudioResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.ColorResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.CropResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.DeblockResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.DenoiseResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.PadResponse;
import java.util.Objects;


/**
 * Preprocessing configurations.
 * 
 */
public final class PreprocessingConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PreprocessingConfigResponse Empty = new PreprocessingConfigResponse();

    /**
     * Audio preprocessing configuration.
     * 
     */
    @Import(name="audio", required=true)
    private AudioResponse audio;

    /**
     * @return Audio preprocessing configuration.
     * 
     */
    public AudioResponse audio() {
        return this.audio;
    }

    /**
     * Color preprocessing configuration.
     * 
     */
    @Import(name="color", required=true)
    private ColorResponse color;

    /**
     * @return Color preprocessing configuration.
     * 
     */
    public ColorResponse color() {
        return this.color;
    }

    /**
     * Specify the video cropping configuration.
     * 
     */
    @Import(name="crop", required=true)
    private CropResponse crop;

    /**
     * @return Specify the video cropping configuration.
     * 
     */
    public CropResponse crop() {
        return this.crop;
    }

    /**
     * Deblock preprocessing configuration.
     * 
     */
    @Import(name="deblock", required=true)
    private DeblockResponse deblock;

    /**
     * @return Deblock preprocessing configuration.
     * 
     */
    public DeblockResponse deblock() {
        return this.deblock;
    }

    /**
     * Denoise preprocessing configuration.
     * 
     */
    @Import(name="denoise", required=true)
    private DenoiseResponse denoise;

    /**
     * @return Denoise preprocessing configuration.
     * 
     */
    public DenoiseResponse denoise() {
        return this.denoise;
    }

    /**
     * Specify the video pad filter configuration.
     * 
     */
    @Import(name="pad", required=true)
    private PadResponse pad;

    /**
     * @return Specify the video pad filter configuration.
     * 
     */
    public PadResponse pad() {
        return this.pad;
    }

    private PreprocessingConfigResponse() {}

    private PreprocessingConfigResponse(PreprocessingConfigResponse $) {
        this.audio = $.audio;
        this.color = $.color;
        this.crop = $.crop;
        this.deblock = $.deblock;
        this.denoise = $.denoise;
        this.pad = $.pad;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreprocessingConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreprocessingConfigResponse $;

        public Builder() {
            $ = new PreprocessingConfigResponse();
        }

        public Builder(PreprocessingConfigResponse defaults) {
            $ = new PreprocessingConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param audio Audio preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder audio(AudioResponse audio) {
            $.audio = audio;
            return this;
        }

        /**
         * @param color Color preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder color(ColorResponse color) {
            $.color = color;
            return this;
        }

        /**
         * @param crop Specify the video cropping configuration.
         * 
         * @return builder
         * 
         */
        public Builder crop(CropResponse crop) {
            $.crop = crop;
            return this;
        }

        /**
         * @param deblock Deblock preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder deblock(DeblockResponse deblock) {
            $.deblock = deblock;
            return this;
        }

        /**
         * @param denoise Denoise preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder denoise(DenoiseResponse denoise) {
            $.denoise = denoise;
            return this;
        }

        /**
         * @param pad Specify the video pad filter configuration.
         * 
         * @return builder
         * 
         */
        public Builder pad(PadResponse pad) {
            $.pad = pad;
            return this;
        }

        public PreprocessingConfigResponse build() {
            $.audio = Objects.requireNonNull($.audio, "expected parameter 'audio' to be non-null");
            $.color = Objects.requireNonNull($.color, "expected parameter 'color' to be non-null");
            $.crop = Objects.requireNonNull($.crop, "expected parameter 'crop' to be non-null");
            $.deblock = Objects.requireNonNull($.deblock, "expected parameter 'deblock' to be non-null");
            $.denoise = Objects.requireNonNull($.denoise, "expected parameter 'denoise' to be non-null");
            $.pad = Objects.requireNonNull($.pad, "expected parameter 'pad' to be non-null");
            return $;
        }
    }

}
