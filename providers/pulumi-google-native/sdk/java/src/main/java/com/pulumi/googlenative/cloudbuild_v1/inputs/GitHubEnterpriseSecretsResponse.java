// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
 * 
 */
public final class GitHubEnterpriseSecretsResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitHubEnterpriseSecretsResponse Empty = new GitHubEnterpriseSecretsResponse();

    /**
     * The resource name for the OAuth client ID secret in Secret Manager.
     * 
     */
    @Import(name="oauthClientIdName", required=true)
    private String oauthClientIdName;

    public String oauthClientIdName() {
        return this.oauthClientIdName;
    }

    /**
     * The resource name for the OAuth client ID secret version in Secret Manager.
     * 
     */
    @Import(name="oauthClientIdVersionName", required=true)
    private String oauthClientIdVersionName;

    public String oauthClientIdVersionName() {
        return this.oauthClientIdVersionName;
    }

    /**
     * The resource name for the OAuth secret in Secret Manager.
     * 
     */
    @Import(name="oauthSecretName", required=true)
    private String oauthSecretName;

    public String oauthSecretName() {
        return this.oauthSecretName;
    }

    /**
     * The resource name for the OAuth secret secret version in Secret Manager.
     * 
     */
    @Import(name="oauthSecretVersionName", required=true)
    private String oauthSecretVersionName;

    public String oauthSecretVersionName() {
        return this.oauthSecretVersionName;
    }

    /**
     * The resource name for the private key secret.
     * 
     */
    @Import(name="privateKeyName", required=true)
    private String privateKeyName;

    public String privateKeyName() {
        return this.privateKeyName;
    }

    /**
     * The resource name for the private key secret version.
     * 
     */
    @Import(name="privateKeyVersionName", required=true)
    private String privateKeyVersionName;

    public String privateKeyVersionName() {
        return this.privateKeyVersionName;
    }

    /**
     * The resource name for the webhook secret in Secret Manager.
     * 
     */
    @Import(name="webhookSecretName", required=true)
    private String webhookSecretName;

    public String webhookSecretName() {
        return this.webhookSecretName;
    }

    /**
     * The resource name for the webhook secret secret version in Secret Manager.
     * 
     */
    @Import(name="webhookSecretVersionName", required=true)
    private String webhookSecretVersionName;

    public String webhookSecretVersionName() {
        return this.webhookSecretVersionName;
    }

    private GitHubEnterpriseSecretsResponse() {}

    private GitHubEnterpriseSecretsResponse(GitHubEnterpriseSecretsResponse $) {
        this.oauthClientIdName = $.oauthClientIdName;
        this.oauthClientIdVersionName = $.oauthClientIdVersionName;
        this.oauthSecretName = $.oauthSecretName;
        this.oauthSecretVersionName = $.oauthSecretVersionName;
        this.privateKeyName = $.privateKeyName;
        this.privateKeyVersionName = $.privateKeyVersionName;
        this.webhookSecretName = $.webhookSecretName;
        this.webhookSecretVersionName = $.webhookSecretVersionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitHubEnterpriseSecretsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitHubEnterpriseSecretsResponse $;

        public Builder() {
            $ = new GitHubEnterpriseSecretsResponse();
        }

        public Builder(GitHubEnterpriseSecretsResponse defaults) {
            $ = new GitHubEnterpriseSecretsResponse(Objects.requireNonNull(defaults));
        }

        public Builder oauthClientIdName(String oauthClientIdName) {
            $.oauthClientIdName = oauthClientIdName;
            return this;
        }

        public Builder oauthClientIdVersionName(String oauthClientIdVersionName) {
            $.oauthClientIdVersionName = oauthClientIdVersionName;
            return this;
        }

        public Builder oauthSecretName(String oauthSecretName) {
            $.oauthSecretName = oauthSecretName;
            return this;
        }

        public Builder oauthSecretVersionName(String oauthSecretVersionName) {
            $.oauthSecretVersionName = oauthSecretVersionName;
            return this;
        }

        public Builder privateKeyName(String privateKeyName) {
            $.privateKeyName = privateKeyName;
            return this;
        }

        public Builder privateKeyVersionName(String privateKeyVersionName) {
            $.privateKeyVersionName = privateKeyVersionName;
            return this;
        }

        public Builder webhookSecretName(String webhookSecretName) {
            $.webhookSecretName = webhookSecretName;
            return this;
        }

        public Builder webhookSecretVersionName(String webhookSecretVersionName) {
            $.webhookSecretVersionName = webhookSecretVersionName;
            return this;
        }

        public GitHubEnterpriseSecretsResponse build() {
            $.oauthClientIdName = Objects.requireNonNull($.oauthClientIdName, "expected parameter 'oauthClientIdName' to be non-null");
            $.oauthClientIdVersionName = Objects.requireNonNull($.oauthClientIdVersionName, "expected parameter 'oauthClientIdVersionName' to be non-null");
            $.oauthSecretName = Objects.requireNonNull($.oauthSecretName, "expected parameter 'oauthSecretName' to be non-null");
            $.oauthSecretVersionName = Objects.requireNonNull($.oauthSecretVersionName, "expected parameter 'oauthSecretVersionName' to be non-null");
            $.privateKeyName = Objects.requireNonNull($.privateKeyName, "expected parameter 'privateKeyName' to be non-null");
            $.privateKeyVersionName = Objects.requireNonNull($.privateKeyVersionName, "expected parameter 'privateKeyVersionName' to be non-null");
            $.webhookSecretName = Objects.requireNonNull($.webhookSecretName, "expected parameter 'webhookSecretName' to be non-null");
            $.webhookSecretVersionName = Objects.requireNonNull($.webhookSecretVersionName, "expected parameter 'webhookSecretVersionName' to be non-null");
            return $;
        }
    }

}
