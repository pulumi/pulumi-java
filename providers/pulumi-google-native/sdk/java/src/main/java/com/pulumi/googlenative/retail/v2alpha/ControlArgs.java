// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.retail.v2alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.retail.v2alpha.enums.ControlSolutionTypesItem;
import com.pulumi.googlenative.retail.v2alpha.inputs.GoogleCloudRetailV2alphaRuleArgs;
import com.pulumi.googlenative.retail.v2alpha.inputs.GoogleCloudRetailV2alphaSearchRequestFacetSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlArgs Empty = new ControlArgs();

    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * Required. The ID to use for the Control, which will become the final component of the Control&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
     * 
     */
    @Import(name="controlId", required=true)
    private Output<String> controlId;

    /**
     * @return Required. The ID to use for the Control, which will become the final component of the Control&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
     * 
     */
    public Output<String> controlId() {
        return this.controlId;
    }

    /**
     * The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * A facet specification to perform faceted search.
     * 
     */
    @Import(name="facetSpec")
    private @Nullable Output<GoogleCloudRetailV2alphaSearchRequestFacetSpecArgs> facetSpec;

    /**
     * @return A facet specification to perform faceted search.
     * 
     */
    public Optional<Output<GoogleCloudRetailV2alphaSearchRequestFacetSpecArgs>> facetSpec() {
        return Optional.ofNullable(this.facetSpec);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}controls/*`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}controls/*`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A rule control - a condition-action pair. Enacts a set action when the condition is triggered. For example: Boost &#34;gShoe&#34; when query full matches &#34;Running Shoes&#34;.
     * 
     */
    @Import(name="rule")
    private @Nullable Output<GoogleCloudRetailV2alphaRuleArgs> rule;

    /**
     * @return A rule control - a condition-action pair. Enacts a set action when the condition is triggered. For example: Boost &#34;gShoe&#34; when query full matches &#34;Running Shoes&#34;.
     * 
     */
    public Optional<Output<GoogleCloudRetailV2alphaRuleArgs>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Immutable. The solution types that the serving config is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="solutionTypes", required=true)
    private Output<List<ControlSolutionTypesItem>> solutionTypes;

    /**
     * @return Immutable. The solution types that the serving config is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
     * 
     */
    public Output<List<ControlSolutionTypesItem>> solutionTypes() {
        return this.solutionTypes;
    }

    private ControlArgs() {}

    private ControlArgs(ControlArgs $) {
        this.catalogId = $.catalogId;
        this.controlId = $.controlId;
        this.displayName = $.displayName;
        this.facetSpec = $.facetSpec;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.rule = $.rule;
        this.solutionTypes = $.solutionTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlArgs $;

        public Builder() {
            $ = new ControlArgs();
        }

        public Builder(ControlArgs defaults) {
            $ = new ControlArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param controlId Required. The ID to use for the Control, which will become the final component of the Control&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
         * 
         * @return builder
         * 
         */
        public Builder controlId(Output<String> controlId) {
            $.controlId = controlId;
            return this;
        }

        /**
         * @param controlId Required. The ID to use for the Control, which will become the final component of the Control&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
         * 
         * @return builder
         * 
         */
        public Builder controlId(String controlId) {
            return controlId(Output.of(controlId));
        }

        /**
         * @param displayName The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param facetSpec A facet specification to perform faceted search.
         * 
         * @return builder
         * 
         */
        public Builder facetSpec(@Nullable Output<GoogleCloudRetailV2alphaSearchRequestFacetSpecArgs> facetSpec) {
            $.facetSpec = facetSpec;
            return this;
        }

        /**
         * @param facetSpec A facet specification to perform faceted search.
         * 
         * @return builder
         * 
         */
        public Builder facetSpec(GoogleCloudRetailV2alphaSearchRequestFacetSpecArgs facetSpec) {
            return facetSpec(Output.of(facetSpec));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}controls/*`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}controls/*`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rule A rule control - a condition-action pair. Enacts a set action when the condition is triggered. For example: Boost &#34;gShoe&#34; when query full matches &#34;Running Shoes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<GoogleCloudRetailV2alphaRuleArgs> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule A rule control - a condition-action pair. Enacts a set action when the condition is triggered. For example: Boost &#34;gShoe&#34; when query full matches &#34;Running Shoes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder rule(GoogleCloudRetailV2alphaRuleArgs rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param solutionTypes Immutable. The solution types that the serving config is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(Output<List<ControlSolutionTypesItem>> solutionTypes) {
            $.solutionTypes = solutionTypes;
            return this;
        }

        /**
         * @param solutionTypes Immutable. The solution types that the serving config is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(List<ControlSolutionTypesItem> solutionTypes) {
            return solutionTypes(Output.of(solutionTypes));
        }

        /**
         * @param solutionTypes Immutable. The solution types that the serving config is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(ControlSolutionTypesItem... solutionTypes) {
            return solutionTypes(List.of(solutionTypes));
        }

        public ControlArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            $.controlId = Objects.requireNonNull($.controlId, "expected parameter 'controlId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.solutionTypes = Objects.requireNonNull($.solutionTypes, "expected parameter 'solutionTypes' to be non-null");
            return $;
        }
    }

}
