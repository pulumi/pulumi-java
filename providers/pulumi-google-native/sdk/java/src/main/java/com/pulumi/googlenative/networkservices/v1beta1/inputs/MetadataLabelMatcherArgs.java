// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.enums.MetadataLabelMatcherMetadataLabelMatchCriteria;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.MetadataLabelsArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The matcher that is based on node metadata presented by xDS clients.
 * 
 */
public final class MetadataLabelMatcherArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetadataLabelMatcherArgs Empty = new MetadataLabelMatcherArgs();

    /**
     * Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
     * 
     */
    @Import(name="metadataLabelMatchCriteria")
    private @Nullable Output<MetadataLabelMatcherMetadataLabelMatchCriteria> metadataLabelMatchCriteria;

    /**
     * @return Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
     * 
     */
    public Optional<Output<MetadataLabelMatcherMetadataLabelMatchCriteria>> metadataLabelMatchCriteria() {
        return Optional.ofNullable(this.metadataLabelMatchCriteria);
    }

    /**
     * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
     * 
     */
    @Import(name="metadataLabels")
    private @Nullable Output<List<MetadataLabelsArgs>> metadataLabels;

    /**
     * @return The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
     * 
     */
    public Optional<Output<List<MetadataLabelsArgs>>> metadataLabels() {
        return Optional.ofNullable(this.metadataLabels);
    }

    private MetadataLabelMatcherArgs() {}

    private MetadataLabelMatcherArgs(MetadataLabelMatcherArgs $) {
        this.metadataLabelMatchCriteria = $.metadataLabelMatchCriteria;
        this.metadataLabels = $.metadataLabels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetadataLabelMatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetadataLabelMatcherArgs $;

        public Builder() {
            $ = new MetadataLabelMatcherArgs();
        }

        public Builder(MetadataLabelMatcherArgs defaults) {
            $ = new MetadataLabelMatcherArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metadataLabelMatchCriteria Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
         * 
         * @return builder
         * 
         */
        public Builder metadataLabelMatchCriteria(@Nullable Output<MetadataLabelMatcherMetadataLabelMatchCriteria> metadataLabelMatchCriteria) {
            $.metadataLabelMatchCriteria = metadataLabelMatchCriteria;
            return this;
        }

        /**
         * @param metadataLabelMatchCriteria Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
         * 
         * @return builder
         * 
         */
        public Builder metadataLabelMatchCriteria(MetadataLabelMatcherMetadataLabelMatchCriteria metadataLabelMatchCriteria) {
            return metadataLabelMatchCriteria(Output.of(metadataLabelMatchCriteria));
        }

        /**
         * @param metadataLabels The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
         * 
         * @return builder
         * 
         */
        public Builder metadataLabels(@Nullable Output<List<MetadataLabelsArgs>> metadataLabels) {
            $.metadataLabels = metadataLabels;
            return this;
        }

        /**
         * @param metadataLabels The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
         * 
         * @return builder
         * 
         */
        public Builder metadataLabels(List<MetadataLabelsArgs> metadataLabels) {
            return metadataLabels(Output.of(metadataLabels));
        }

        /**
         * @param metadataLabels The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
         * 
         * @return builder
         * 
         */
        public Builder metadataLabels(MetadataLabelsArgs... metadataLabels) {
            return metadataLabels(List.of(metadataLabels));
        }

        public MetadataLabelMatcherArgs build() {
            return $;
        }
    }

}
