// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Bind API methods to metrics. Binding a method to a metric causes that metric&#39;s configured quota behaviors to apply to the method call.
 * 
 */
public final class MetricRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetricRuleResponse Empty = new MetricRuleResponse();

    /**
     * Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    @Import(name="metricCosts", required=true)
    private Map<String,String> metricCosts;

    /**
     * @return Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    public Map<String,String> metricCosts() {
        return this.metricCosts;
    }

    /**
     * Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector", required=true)
    private String selector;

    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public String selector() {
        return this.selector;
    }

    private MetricRuleResponse() {}

    private MetricRuleResponse(MetricRuleResponse $) {
        this.metricCosts = $.metricCosts;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRuleResponse $;

        public Builder() {
            $ = new MetricRuleResponse();
        }

        public Builder(MetricRuleResponse defaults) {
            $ = new MetricRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricCosts Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
         * 
         * @return builder
         * 
         */
        public Builder metricCosts(Map<String,String> metricCosts) {
            $.metricCosts = metricCosts;
            return this;
        }

        /**
         * @param selector Selects the methods to which this rule applies. Refer to selector for syntax details.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            $.selector = selector;
            return this;
        }

        public MetricRuleResponse build() {
            $.metricCosts = Objects.requireNonNull($.metricCosts, "expected parameter 'metricCosts' to be non-null");
            $.selector = Objects.requireNonNull($.selector, "expected parameter 'selector' to be non-null");
            return $;
        }
    }

}
