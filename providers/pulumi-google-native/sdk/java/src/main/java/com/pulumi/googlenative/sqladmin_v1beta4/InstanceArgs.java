// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1beta4;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.sqladmin_v1beta4.enums.InstanceBackendType;
import com.pulumi.googlenative.sqladmin_v1beta4.enums.InstanceDatabaseVersion;
import com.pulumi.googlenative.sqladmin_v1beta4.enums.InstanceInstanceType;
import com.pulumi.googlenative.sqladmin_v1beta4.enums.InstanceState;
import com.pulumi.googlenative.sqladmin_v1beta4.enums.InstanceSuspensionReasonItem;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.DiskEncryptionConfigurationArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.DiskEncryptionStatusArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.InstanceFailoverReplicaArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.IpMappingArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.OnPremisesConfigurationArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.ReplicaConfigurationArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.SettingsArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.SqlOutOfDiskReportArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.SqlScheduledMaintenanceArgs;
import com.pulumi.googlenative.sqladmin_v1beta4.inputs.SslCertArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.
     * 
     */
    @Import(name="backendType")
    private @Nullable Output<InstanceBackendType> backendType;

    public Optional<Output<InstanceBackendType>> backendType() {
        return Optional.ofNullable(this.backendType);
    }

    /**
     * Connection name of the Cloud SQL instance used in connection strings.
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    /**
     * The current disk usage of the instance in bytes. This property has been deprecated. Use the &#34;cloudsql.googleapis.com/database/disk/bytes_used&#34; metric in Cloud Monitoring API instead. Please see [this announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ) for details.
     * 
     */
    @Import(name="currentDiskSize")
    private @Nullable Output<String> currentDiskSize;

    public Optional<Output<String>> currentDiskSize() {
        return Optional.ofNullable(this.currentDiskSize);
    }

    /**
     * The database engine type and version. The `databaseVersion` field cannot be changed after instance creation.
     * 
     */
    @Import(name="databaseVersion")
    private @Nullable Output<InstanceDatabaseVersion> databaseVersion;

    public Optional<Output<InstanceDatabaseVersion>> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }

    /**
     * Disk encryption configuration specific to an instance.
     * 
     */
    @Import(name="diskEncryptionConfiguration")
    private @Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration;

    public Optional<Output<DiskEncryptionConfigurationArgs>> diskEncryptionConfiguration() {
        return Optional.ofNullable(this.diskEncryptionConfiguration);
    }

    /**
     * Disk encryption status specific to an instance.
     * 
     */
    @Import(name="diskEncryptionStatus")
    private @Nullable Output<DiskEncryptionStatusArgs> diskEncryptionStatus;

    public Optional<Output<DiskEncryptionStatusArgs>> diskEncryptionStatus() {
        return Optional.ofNullable(this.diskEncryptionStatus);
    }

    /**
     * The name and status of the failover replica.
     * 
     */
    @Import(name="failoverReplica")
    private @Nullable Output<InstanceFailoverReplicaArgs> failoverReplica;

    public Optional<Output<InstanceFailoverReplicaArgs>> failoverReplica() {
        return Optional.ofNullable(this.failoverReplica);
    }

    /**
     * The Compute Engine zone that the instance is currently serving from. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary zone. WARNING: Changing this might restart the instance.
     * 
     */
    @Import(name="gceZone")
    private @Nullable Output<String> gceZone;

    public Optional<Output<String>> gceZone() {
        return Optional.ofNullable(this.gceZone);
    }

    /**
     * The instance type.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<InstanceInstanceType> instanceType;

    public Optional<Output<InstanceInstanceType>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The assigned IP addresses for the instance.
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<List<IpMappingArgs>> ipAddresses;

    public Optional<Output<List<IpMappingArgs>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * This is always `sql#instance`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The name of the instance which will act as primary in the replication setup.
     * 
     */
    @Import(name="masterInstanceName")
    private @Nullable Output<String> masterInstanceName;

    public Optional<Output<String>> masterInstanceName() {
        return Optional.ofNullable(this.masterInstanceName);
    }

    /**
     * The maximum disk size of the instance in bytes.
     * 
     */
    @Import(name="maxDiskSize")
    private @Nullable Output<String> maxDiskSize;

    public Optional<Output<String>> maxDiskSize() {
        return Optional.ofNullable(this.maxDiskSize);
    }

    /**
     * Name of the Cloud SQL instance. This does not include the project ID.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration specific to on-premises instances.
     * 
     */
    @Import(name="onPremisesConfiguration")
    private @Nullable Output<OnPremisesConfigurationArgs> onPremisesConfiguration;

    public Optional<Output<OnPremisesConfigurationArgs>> onPremisesConfiguration() {
        return Optional.ofNullable(this.onPremisesConfiguration);
    }

    /**
     * This field represents the report generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
     * 
     */
    @Import(name="outOfDiskReport")
    private @Nullable Output<SqlOutOfDiskReportArgs> outOfDiskReport;

    public Optional<Output<SqlOutOfDiskReportArgs>> outOfDiskReport() {
        return Optional.ofNullable(this.outOfDiskReport);
    }

    /**
     * The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The geographical region. Can be: * `us-central` (`FIRST_GEN` instances only) * `us-central1` (`SECOND_GEN` instances only) * `asia-east1` or `europe-west1`. Defaults to `us-central` or `us-central1` depending on the instance type. The region cannot be changed after instance creation.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Configuration specific to failover replicas and read replicas.
     * 
     */
    @Import(name="replicaConfiguration")
    private @Nullable Output<ReplicaConfigurationArgs> replicaConfiguration;

    public Optional<Output<ReplicaConfigurationArgs>> replicaConfiguration() {
        return Optional.ofNullable(this.replicaConfiguration);
    }

    /**
     * The replicas of the instance.
     * 
     */
    @Import(name="replicaNames")
    private @Nullable Output<List<String>> replicaNames;

    public Optional<Output<List<String>>> replicaNames() {
        return Optional.ofNullable(this.replicaNames);
    }

    /**
     * Initial root password. Use only on creation.
     * 
     */
    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    /**
     * The status indicating if instance satisfiesPzs. Reserved for future use.
     * 
     */
    @Import(name="satisfiesPzs")
    private @Nullable Output<Boolean> satisfiesPzs;

    public Optional<Output<Boolean>> satisfiesPzs() {
        return Optional.ofNullable(this.satisfiesPzs);
    }

    /**
     * The start time of any upcoming scheduled maintenance for this instance.
     * 
     */
    @Import(name="scheduledMaintenance")
    private @Nullable Output<SqlScheduledMaintenanceArgs> scheduledMaintenance;

    public Optional<Output<SqlScheduledMaintenanceArgs>> scheduledMaintenance() {
        return Optional.ofNullable(this.scheduledMaintenance);
    }

    /**
     * The Compute Engine zone that the failover instance is currently serving from for a regional instance. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary/failover zone. Reserved for future use.
     * 
     */
    @Import(name="secondaryGceZone")
    private @Nullable Output<String> secondaryGceZone;

    public Optional<Output<String>> secondaryGceZone() {
        return Optional.ofNullable(this.secondaryGceZone);
    }

    /**
     * The URI of this resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * SSL configuration.
     * 
     */
    @Import(name="serverCaCert")
    private @Nullable Output<SslCertArgs> serverCaCert;

    public Optional<Output<SslCertArgs>> serverCaCert() {
        return Optional.ofNullable(this.serverCaCert);
    }

    /**
     * The service account email address assigned to the instance. \This property is read-only.
     * 
     */
    @Import(name="serviceAccountEmailAddress")
    private @Nullable Output<String> serviceAccountEmailAddress;

    public Optional<Output<String>> serviceAccountEmailAddress() {
        return Optional.ofNullable(this.serviceAccountEmailAddress);
    }

    /**
     * The user settings.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<SettingsArgs> settings;

    public Optional<Output<SettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The current serving state of the Cloud SQL instance.
     * 
     */
    @Import(name="state")
    private @Nullable Output<InstanceState> state;

    public Optional<Output<InstanceState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * If the instance state is SUSPENDED, the reason for the suspension.
     * 
     */
    @Import(name="suspensionReason")
    private @Nullable Output<List<InstanceSuspensionReasonItem>> suspensionReason;

    public Optional<Output<List<InstanceSuspensionReasonItem>>> suspensionReason() {
        return Optional.ofNullable(this.suspensionReason);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.backendType = $.backendType;
        this.connectionName = $.connectionName;
        this.currentDiskSize = $.currentDiskSize;
        this.databaseVersion = $.databaseVersion;
        this.diskEncryptionConfiguration = $.diskEncryptionConfiguration;
        this.diskEncryptionStatus = $.diskEncryptionStatus;
        this.failoverReplica = $.failoverReplica;
        this.gceZone = $.gceZone;
        this.instanceType = $.instanceType;
        this.ipAddresses = $.ipAddresses;
        this.kind = $.kind;
        this.masterInstanceName = $.masterInstanceName;
        this.maxDiskSize = $.maxDiskSize;
        this.name = $.name;
        this.onPremisesConfiguration = $.onPremisesConfiguration;
        this.outOfDiskReport = $.outOfDiskReport;
        this.project = $.project;
        this.region = $.region;
        this.replicaConfiguration = $.replicaConfiguration;
        this.replicaNames = $.replicaNames;
        this.rootPassword = $.rootPassword;
        this.satisfiesPzs = $.satisfiesPzs;
        this.scheduledMaintenance = $.scheduledMaintenance;
        this.secondaryGceZone = $.secondaryGceZone;
        this.selfLink = $.selfLink;
        this.serverCaCert = $.serverCaCert;
        this.serviceAccountEmailAddress = $.serviceAccountEmailAddress;
        this.settings = $.settings;
        this.state = $.state;
        this.suspensionReason = $.suspensionReason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder backendType(@Nullable Output<InstanceBackendType> backendType) {
            $.backendType = backendType;
            return this;
        }

        public Builder backendType(InstanceBackendType backendType) {
            return backendType(Output.of(backendType));
        }

        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        public Builder currentDiskSize(@Nullable Output<String> currentDiskSize) {
            $.currentDiskSize = currentDiskSize;
            return this;
        }

        public Builder currentDiskSize(String currentDiskSize) {
            return currentDiskSize(Output.of(currentDiskSize));
        }

        public Builder databaseVersion(@Nullable Output<InstanceDatabaseVersion> databaseVersion) {
            $.databaseVersion = databaseVersion;
            return this;
        }

        public Builder databaseVersion(InstanceDatabaseVersion databaseVersion) {
            return databaseVersion(Output.of(databaseVersion));
        }

        public Builder diskEncryptionConfiguration(@Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration) {
            $.diskEncryptionConfiguration = diskEncryptionConfiguration;
            return this;
        }

        public Builder diskEncryptionConfiguration(DiskEncryptionConfigurationArgs diskEncryptionConfiguration) {
            return diskEncryptionConfiguration(Output.of(diskEncryptionConfiguration));
        }

        public Builder diskEncryptionStatus(@Nullable Output<DiskEncryptionStatusArgs> diskEncryptionStatus) {
            $.diskEncryptionStatus = diskEncryptionStatus;
            return this;
        }

        public Builder diskEncryptionStatus(DiskEncryptionStatusArgs diskEncryptionStatus) {
            return diskEncryptionStatus(Output.of(diskEncryptionStatus));
        }

        public Builder failoverReplica(@Nullable Output<InstanceFailoverReplicaArgs> failoverReplica) {
            $.failoverReplica = failoverReplica;
            return this;
        }

        public Builder failoverReplica(InstanceFailoverReplicaArgs failoverReplica) {
            return failoverReplica(Output.of(failoverReplica));
        }

        public Builder gceZone(@Nullable Output<String> gceZone) {
            $.gceZone = gceZone;
            return this;
        }

        public Builder gceZone(String gceZone) {
            return gceZone(Output.of(gceZone));
        }

        public Builder instanceType(@Nullable Output<InstanceInstanceType> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder instanceType(InstanceInstanceType instanceType) {
            return instanceType(Output.of(instanceType));
        }

        public Builder ipAddresses(@Nullable Output<List<IpMappingArgs>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        public Builder ipAddresses(List<IpMappingArgs> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        public Builder ipAddresses(IpMappingArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder masterInstanceName(@Nullable Output<String> masterInstanceName) {
            $.masterInstanceName = masterInstanceName;
            return this;
        }

        public Builder masterInstanceName(String masterInstanceName) {
            return masterInstanceName(Output.of(masterInstanceName));
        }

        public Builder maxDiskSize(@Nullable Output<String> maxDiskSize) {
            $.maxDiskSize = maxDiskSize;
            return this;
        }

        public Builder maxDiskSize(String maxDiskSize) {
            return maxDiskSize(Output.of(maxDiskSize));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder onPremisesConfiguration(@Nullable Output<OnPremisesConfigurationArgs> onPremisesConfiguration) {
            $.onPremisesConfiguration = onPremisesConfiguration;
            return this;
        }

        public Builder onPremisesConfiguration(OnPremisesConfigurationArgs onPremisesConfiguration) {
            return onPremisesConfiguration(Output.of(onPremisesConfiguration));
        }

        public Builder outOfDiskReport(@Nullable Output<SqlOutOfDiskReportArgs> outOfDiskReport) {
            $.outOfDiskReport = outOfDiskReport;
            return this;
        }

        public Builder outOfDiskReport(SqlOutOfDiskReportArgs outOfDiskReport) {
            return outOfDiskReport(Output.of(outOfDiskReport));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder replicaConfiguration(@Nullable Output<ReplicaConfigurationArgs> replicaConfiguration) {
            $.replicaConfiguration = replicaConfiguration;
            return this;
        }

        public Builder replicaConfiguration(ReplicaConfigurationArgs replicaConfiguration) {
            return replicaConfiguration(Output.of(replicaConfiguration));
        }

        public Builder replicaNames(@Nullable Output<List<String>> replicaNames) {
            $.replicaNames = replicaNames;
            return this;
        }

        public Builder replicaNames(List<String> replicaNames) {
            return replicaNames(Output.of(replicaNames));
        }

        public Builder replicaNames(String... replicaNames) {
            return replicaNames(List.of(replicaNames));
        }

        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        public Builder satisfiesPzs(@Nullable Output<Boolean> satisfiesPzs) {
            $.satisfiesPzs = satisfiesPzs;
            return this;
        }

        public Builder satisfiesPzs(Boolean satisfiesPzs) {
            return satisfiesPzs(Output.of(satisfiesPzs));
        }

        public Builder scheduledMaintenance(@Nullable Output<SqlScheduledMaintenanceArgs> scheduledMaintenance) {
            $.scheduledMaintenance = scheduledMaintenance;
            return this;
        }

        public Builder scheduledMaintenance(SqlScheduledMaintenanceArgs scheduledMaintenance) {
            return scheduledMaintenance(Output.of(scheduledMaintenance));
        }

        public Builder secondaryGceZone(@Nullable Output<String> secondaryGceZone) {
            $.secondaryGceZone = secondaryGceZone;
            return this;
        }

        public Builder secondaryGceZone(String secondaryGceZone) {
            return secondaryGceZone(Output.of(secondaryGceZone));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder serverCaCert(@Nullable Output<SslCertArgs> serverCaCert) {
            $.serverCaCert = serverCaCert;
            return this;
        }

        public Builder serverCaCert(SslCertArgs serverCaCert) {
            return serverCaCert(Output.of(serverCaCert));
        }

        public Builder serviceAccountEmailAddress(@Nullable Output<String> serviceAccountEmailAddress) {
            $.serviceAccountEmailAddress = serviceAccountEmailAddress;
            return this;
        }

        public Builder serviceAccountEmailAddress(String serviceAccountEmailAddress) {
            return serviceAccountEmailAddress(Output.of(serviceAccountEmailAddress));
        }

        public Builder settings(@Nullable Output<SettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(SettingsArgs settings) {
            return settings(Output.of(settings));
        }

        public Builder state(@Nullable Output<InstanceState> state) {
            $.state = state;
            return this;
        }

        public Builder state(InstanceState state) {
            return state(Output.of(state));
        }

        public Builder suspensionReason(@Nullable Output<List<InstanceSuspensionReasonItem>> suspensionReason) {
            $.suspensionReason = suspensionReason;
            return this;
        }

        public Builder suspensionReason(List<InstanceSuspensionReasonItem> suspensionReason) {
            return suspensionReason(Output.of(suspensionReason));
        }

        public Builder suspensionReason(InstanceSuspensionReasonItem... suspensionReason) {
            return suspensionReason(List.of(suspensionReason));
        }

        public InstanceArgs build() {
            return $;
        }
    }

}
