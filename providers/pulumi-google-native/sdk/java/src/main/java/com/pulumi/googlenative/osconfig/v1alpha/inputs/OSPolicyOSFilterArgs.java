// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Filtering criteria to select VMs based on OS details.
 * 
 */
public final class OSPolicyOSFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final OSPolicyOSFilterArgs Empty = new OSPolicyOSFilterArgs();

    /**
     * This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
     * 
     */
    @Import(name="osShortName")
    private @Nullable Output<String> osShortName;

    /**
     * @return This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
     * 
     */
    public Optional<Output<String>> osShortName() {
        return Optional.ofNullable(this.osShortName);
    }

    /**
     * This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    private OSPolicyOSFilterArgs() {}

    private OSPolicyOSFilterArgs(OSPolicyOSFilterArgs $) {
        this.osShortName = $.osShortName;
        this.osVersion = $.osVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OSPolicyOSFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OSPolicyOSFilterArgs $;

        public Builder() {
            $ = new OSPolicyOSFilterArgs();
        }

        public Builder(OSPolicyOSFilterArgs defaults) {
            $ = new OSPolicyOSFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param osShortName This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
         * 
         * @return builder
         * 
         */
        public Builder osShortName(@Nullable Output<String> osShortName) {
            $.osShortName = osShortName;
            return this;
        }

        /**
         * @param osShortName This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
         * 
         * @return builder
         * 
         */
        public Builder osShortName(String osShortName) {
            return osShortName(Output.of(osShortName));
        }

        /**
         * @param osVersion This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        public OSPolicyOSFilterArgs build() {
            return $;
        }
    }

}
