// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Details for an outcome with an INCONCLUSIVE outcome summary.
 * 
 */
public final class InconclusiveDetailResponse extends com.pulumi.resources.InvokeArgs {

    public static final InconclusiveDetailResponse Empty = new InconclusiveDetailResponse();

    /**
     * If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.
     * 
     */
    @Import(name="abortedByUser", required=true)
    private Boolean abortedByUser;

    public Boolean abortedByUser() {
        return this.abortedByUser;
    }

    /**
     * If results are being provided to the user in certain cases of infrastructure failures
     * 
     */
    @Import(name="hasErrorLogs", required=true)
    private Boolean hasErrorLogs;

    public Boolean hasErrorLogs() {
        return this.hasErrorLogs;
    }

    /**
     * If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.
     * 
     */
    @Import(name="infrastructureFailure", required=true)
    private Boolean infrastructureFailure;

    public Boolean infrastructureFailure() {
        return this.infrastructureFailure;
    }

    private InconclusiveDetailResponse() {}

    private InconclusiveDetailResponse(InconclusiveDetailResponse $) {
        this.abortedByUser = $.abortedByUser;
        this.hasErrorLogs = $.hasErrorLogs;
        this.infrastructureFailure = $.infrastructureFailure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InconclusiveDetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InconclusiveDetailResponse $;

        public Builder() {
            $ = new InconclusiveDetailResponse();
        }

        public Builder(InconclusiveDetailResponse defaults) {
            $ = new InconclusiveDetailResponse(Objects.requireNonNull(defaults));
        }

        public Builder abortedByUser(Boolean abortedByUser) {
            $.abortedByUser = abortedByUser;
            return this;
        }

        public Builder hasErrorLogs(Boolean hasErrorLogs) {
            $.hasErrorLogs = hasErrorLogs;
            return this;
        }

        public Builder infrastructureFailure(Boolean infrastructureFailure) {
            $.infrastructureFailure = infrastructureFailure;
            return this;
        }

        public InconclusiveDetailResponse build() {
            $.abortedByUser = Objects.requireNonNull($.abortedByUser, "expected parameter 'abortedByUser' to be non-null");
            $.hasErrorLogs = Objects.requireNonNull($.hasErrorLogs, "expected parameter 'hasErrorLogs' to be non-null");
            $.infrastructureFailure = Objects.requireNonNull($.infrastructureFailure, "expected parameter 'infrastructureFailure' to be non-null");
            return $;
        }
    }

}
