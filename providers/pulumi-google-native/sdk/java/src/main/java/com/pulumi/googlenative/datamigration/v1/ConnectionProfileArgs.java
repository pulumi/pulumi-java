// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datamigration.v1.enums.ConnectionProfileProvider;
import com.pulumi.googlenative.datamigration.v1.enums.ConnectionProfileState;
import com.pulumi.googlenative.datamigration.v1.inputs.CloudSqlConnectionProfileArgs;
import com.pulumi.googlenative.datamigration.v1.inputs.MySqlConnectionProfileArgs;
import com.pulumi.googlenative.datamigration.v1.inputs.PostgreSqlConnectionProfileArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionProfileArgs Empty = new ConnectionProfileArgs();

    /**
     * A CloudSQL database connection profile.
     * 
     */
    @Import(name="cloudsql")
    private @Nullable Output<CloudSqlConnectionProfileArgs> cloudsql;

    /**
     * @return A CloudSQL database connection profile.
     * 
     */
    public Optional<Output<CloudSqlConnectionProfileArgs>> cloudsql() {
        return Optional.ofNullable(this.cloudsql);
    }

    /**
     * Required. The connection profile identifier.
     * 
     */
    @Import(name="connectionProfileId", required=true)
    private Output<String> connectionProfileId;

    /**
     * @return Required. The connection profile identifier.
     * 
     */
    public Output<String> connectionProfileId() {
        return this.connectionProfileId;
    }

    /**
     * The connection profile display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The connection profile display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of &#34;key&#34;: &#34;value&#34; pairs. Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of &#34;key&#34;: &#34;value&#34; pairs. Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A MySQL database connection profile.
     * 
     */
    @Import(name="mysql")
    private @Nullable Output<MySqlConnectionProfileArgs> mysql;

    /**
     * @return A MySQL database connection profile.
     * 
     */
    public Optional<Output<MySqlConnectionProfileArgs>> mysql() {
        return Optional.ofNullable(this.mysql);
    }

    /**
     * The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A PostgreSQL database connection profile.
     * 
     */
    @Import(name="postgresql")
    private @Nullable Output<PostgreSqlConnectionProfileArgs> postgresql;

    /**
     * @return A PostgreSQL database connection profile.
     * 
     */
    public Optional<Output<PostgreSqlConnectionProfileArgs>> postgresql() {
        return Optional.ofNullable(this.postgresql);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The database provider.
     * 
     */
    @Import(name="provider")
    private @Nullable Output<ConnectionProfileProvider> provider;

    /**
     * @return The database provider.
     * 
     */
    public Optional<Output<ConnectionProfileProvider>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The current connection profile state (e.g. DRAFT, READY, or FAILED).
     * 
     */
    @Import(name="state")
    private @Nullable Output<ConnectionProfileState> state;

    /**
     * @return The current connection profile state (e.g. DRAFT, READY, or FAILED).
     * 
     */
    public Optional<Output<ConnectionProfileState>> state() {
        return Optional.ofNullable(this.state);
    }

    private ConnectionProfileArgs() {}

    private ConnectionProfileArgs(ConnectionProfileArgs $) {
        this.cloudsql = $.cloudsql;
        this.connectionProfileId = $.connectionProfileId;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.mysql = $.mysql;
        this.name = $.name;
        this.postgresql = $.postgresql;
        this.project = $.project;
        this.provider = $.provider;
        this.requestId = $.requestId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionProfileArgs $;

        public Builder() {
            $ = new ConnectionProfileArgs();
        }

        public Builder(ConnectionProfileArgs defaults) {
            $ = new ConnectionProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudsql A CloudSQL database connection profile.
         * 
         * @return builder
         * 
         */
        public Builder cloudsql(@Nullable Output<CloudSqlConnectionProfileArgs> cloudsql) {
            $.cloudsql = cloudsql;
            return this;
        }

        /**
         * @param cloudsql A CloudSQL database connection profile.
         * 
         * @return builder
         * 
         */
        public Builder cloudsql(CloudSqlConnectionProfileArgs cloudsql) {
            return cloudsql(Output.of(cloudsql));
        }

        /**
         * @param connectionProfileId Required. The connection profile identifier.
         * 
         * @return builder
         * 
         */
        public Builder connectionProfileId(Output<String> connectionProfileId) {
            $.connectionProfileId = connectionProfileId;
            return this;
        }

        /**
         * @param connectionProfileId Required. The connection profile identifier.
         * 
         * @return builder
         * 
         */
        public Builder connectionProfileId(String connectionProfileId) {
            return connectionProfileId(Output.of(connectionProfileId));
        }

        /**
         * @param displayName The connection profile display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The connection profile display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of &#34;key&#34;: &#34;value&#34; pairs. Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of &#34;key&#34;: &#34;value&#34; pairs. Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mysql A MySQL database connection profile.
         * 
         * @return builder
         * 
         */
        public Builder mysql(@Nullable Output<MySqlConnectionProfileArgs> mysql) {
            $.mysql = mysql;
            return this;
        }

        /**
         * @param mysql A MySQL database connection profile.
         * 
         * @return builder
         * 
         */
        public Builder mysql(MySqlConnectionProfileArgs mysql) {
            return mysql(Output.of(mysql));
        }

        /**
         * @param name The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param postgresql A PostgreSQL database connection profile.
         * 
         * @return builder
         * 
         */
        public Builder postgresql(@Nullable Output<PostgreSqlConnectionProfileArgs> postgresql) {
            $.postgresql = postgresql;
            return this;
        }

        /**
         * @param postgresql A PostgreSQL database connection profile.
         * 
         * @return builder
         * 
         */
        public Builder postgresql(PostgreSqlConnectionProfileArgs postgresql) {
            return postgresql(Output.of(postgresql));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param provider The database provider.
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<ConnectionProfileProvider> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider The database provider.
         * 
         * @return builder
         * 
         */
        public Builder provider(ConnectionProfileProvider provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param requestId A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param state The current connection profile state (e.g. DRAFT, READY, or FAILED).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<ConnectionProfileState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current connection profile state (e.g. DRAFT, READY, or FAILED).
         * 
         * @return builder
         * 
         */
        public Builder state(ConnectionProfileState state) {
            return state(Output.of(state));
        }

        public ConnectionProfileArgs build() {
            $.connectionProfileId = Objects.requireNonNull($.connectionProfileId, "expected parameter 'connectionProfileId' to be non-null");
            return $;
        }
    }

}
