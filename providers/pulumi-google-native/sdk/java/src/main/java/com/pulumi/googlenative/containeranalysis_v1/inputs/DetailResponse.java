// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.VersionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
 * 
 */
public final class DetailResponse extends com.pulumi.resources.InvokeArgs {

    public static final DetailResponse Empty = new DetailResponse();

    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
     * 
     */
    @Import(name="affectedCpeUri", required=true)
    private String affectedCpeUri;

    public String affectedCpeUri() {
        return this.affectedCpeUri;
    }

    /**
     * The package this vulnerability affects.
     * 
     */
    @Import(name="affectedPackage", required=true)
    private String affectedPackage;

    public String affectedPackage() {
        return this.affectedPackage;
    }

    /**
     * The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
     * 
     */
    @Import(name="affectedVersionEnd", required=true)
    private VersionResponse affectedVersionEnd;

    public VersionResponse affectedVersionEnd() {
        return this.affectedVersionEnd;
    }

    /**
     * The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
     * 
     */
    @Import(name="affectedVersionStart", required=true)
    private VersionResponse affectedVersionStart;

    public VersionResponse affectedVersionStart() {
        return this.affectedVersionStart;
    }

    /**
     * A vendor-specific description of this vulnerability.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
     * 
     */
    @Import(name="fixedCpeUri", required=true)
    private String fixedCpeUri;

    public String fixedCpeUri() {
        return this.fixedCpeUri;
    }

    /**
     * The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
     * 
     */
    @Import(name="fixedPackage", required=true)
    private String fixedPackage;

    public String fixedPackage() {
        return this.fixedPackage;
    }

    /**
     * The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
     * 
     */
    @Import(name="fixedVersion", required=true)
    private VersionResponse fixedVersion;

    public VersionResponse fixedVersion() {
        return this.fixedVersion;
    }

    /**
     * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
     * 
     */
    @Import(name="isObsolete", required=true)
    private Boolean isObsolete;

    public Boolean isObsolete() {
        return this.isObsolete;
    }

    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    @Import(name="packageType", required=true)
    private String packageType;

    public String packageType() {
        return this.packageType;
    }

    /**
     * The distro assigned severity of this vulnerability.
     * 
     */
    @Import(name="severityName", required=true)
    private String severityName;

    public String severityName() {
        return this.severityName;
    }

    /**
     * The source from which the information in this Detail was obtained.
     * 
     */
    @Import(name="source", required=true)
    private String source;

    public String source() {
        return this.source;
    }

    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     * 
     */
    @Import(name="sourceUpdateTime", required=true)
    private String sourceUpdateTime;

    public String sourceUpdateTime() {
        return this.sourceUpdateTime;
    }

    /**
     * The name of the vendor of the product.
     * 
     */
    @Import(name="vendor", required=true)
    private String vendor;

    public String vendor() {
        return this.vendor;
    }

    private DetailResponse() {}

    private DetailResponse(DetailResponse $) {
        this.affectedCpeUri = $.affectedCpeUri;
        this.affectedPackage = $.affectedPackage;
        this.affectedVersionEnd = $.affectedVersionEnd;
        this.affectedVersionStart = $.affectedVersionStart;
        this.description = $.description;
        this.fixedCpeUri = $.fixedCpeUri;
        this.fixedPackage = $.fixedPackage;
        this.fixedVersion = $.fixedVersion;
        this.isObsolete = $.isObsolete;
        this.packageType = $.packageType;
        this.severityName = $.severityName;
        this.source = $.source;
        this.sourceUpdateTime = $.sourceUpdateTime;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetailResponse $;

        public Builder() {
            $ = new DetailResponse();
        }

        public Builder(DetailResponse defaults) {
            $ = new DetailResponse(Objects.requireNonNull(defaults));
        }

        public Builder affectedCpeUri(String affectedCpeUri) {
            $.affectedCpeUri = affectedCpeUri;
            return this;
        }

        public Builder affectedPackage(String affectedPackage) {
            $.affectedPackage = affectedPackage;
            return this;
        }

        public Builder affectedVersionEnd(VersionResponse affectedVersionEnd) {
            $.affectedVersionEnd = affectedVersionEnd;
            return this;
        }

        public Builder affectedVersionStart(VersionResponse affectedVersionStart) {
            $.affectedVersionStart = affectedVersionStart;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder fixedCpeUri(String fixedCpeUri) {
            $.fixedCpeUri = fixedCpeUri;
            return this;
        }

        public Builder fixedPackage(String fixedPackage) {
            $.fixedPackage = fixedPackage;
            return this;
        }

        public Builder fixedVersion(VersionResponse fixedVersion) {
            $.fixedVersion = fixedVersion;
            return this;
        }

        public Builder isObsolete(Boolean isObsolete) {
            $.isObsolete = isObsolete;
            return this;
        }

        public Builder packageType(String packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder severityName(String severityName) {
            $.severityName = severityName;
            return this;
        }

        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public Builder sourceUpdateTime(String sourceUpdateTime) {
            $.sourceUpdateTime = sourceUpdateTime;
            return this;
        }

        public Builder vendor(String vendor) {
            $.vendor = vendor;
            return this;
        }

        public DetailResponse build() {
            $.affectedCpeUri = Objects.requireNonNull($.affectedCpeUri, "expected parameter 'affectedCpeUri' to be non-null");
            $.affectedPackage = Objects.requireNonNull($.affectedPackage, "expected parameter 'affectedPackage' to be non-null");
            $.affectedVersionEnd = Objects.requireNonNull($.affectedVersionEnd, "expected parameter 'affectedVersionEnd' to be non-null");
            $.affectedVersionStart = Objects.requireNonNull($.affectedVersionStart, "expected parameter 'affectedVersionStart' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.fixedCpeUri = Objects.requireNonNull($.fixedCpeUri, "expected parameter 'fixedCpeUri' to be non-null");
            $.fixedPackage = Objects.requireNonNull($.fixedPackage, "expected parameter 'fixedPackage' to be non-null");
            $.fixedVersion = Objects.requireNonNull($.fixedVersion, "expected parameter 'fixedVersion' to be non-null");
            $.isObsolete = Objects.requireNonNull($.isObsolete, "expected parameter 'isObsolete' to be non-null");
            $.packageType = Objects.requireNonNull($.packageType, "expected parameter 'packageType' to be non-null");
            $.severityName = Objects.requireNonNull($.severityName, "expected parameter 'severityName' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.sourceUpdateTime = Objects.requireNonNull($.sourceUpdateTime, "expected parameter 'sourceUpdateTime' to be non-null");
            $.vendor = Objects.requireNonNull($.vendor, "expected parameter 'vendor' to be non-null");
            return $;
        }
    }

}
