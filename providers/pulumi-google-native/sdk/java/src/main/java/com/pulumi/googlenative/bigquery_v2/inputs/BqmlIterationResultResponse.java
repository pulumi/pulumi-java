// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class BqmlIterationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final BqmlIterationResultResponse Empty = new BqmlIterationResultResponse();

    /**
     * [Output-only, Beta] Time taken to run the training iteration in milliseconds.
     * 
     */
    @Import(name="durationMs", required=true)
    private String durationMs;

    /**
     * @return [Output-only, Beta] Time taken to run the training iteration in milliseconds.
     * 
     */
    public String durationMs() {
        return this.durationMs;
    }

    /**
     * [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
     * 
     */
    @Import(name="evalLoss", required=true)
    private Double evalLoss;

    /**
     * @return [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
     * 
     */
    public Double evalLoss() {
        return this.evalLoss;
    }

    /**
     * [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
     * 
     */
    @Import(name="index", required=true)
    private Integer index;

    /**
     * @return [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
     * 
     */
    public Integer index() {
        return this.index;
    }

    /**
     * [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
     * 
     */
    @Import(name="learnRate", required=true)
    private Double learnRate;

    /**
     * @return [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
     * 
     */
    public Double learnRate() {
        return this.learnRate;
    }

    /**
     * [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
     * 
     */
    @Import(name="trainingLoss", required=true)
    private Double trainingLoss;

    /**
     * @return [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
     * 
     */
    public Double trainingLoss() {
        return this.trainingLoss;
    }

    private BqmlIterationResultResponse() {}

    private BqmlIterationResultResponse(BqmlIterationResultResponse $) {
        this.durationMs = $.durationMs;
        this.evalLoss = $.evalLoss;
        this.index = $.index;
        this.learnRate = $.learnRate;
        this.trainingLoss = $.trainingLoss;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BqmlIterationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BqmlIterationResultResponse $;

        public Builder() {
            $ = new BqmlIterationResultResponse();
        }

        public Builder(BqmlIterationResultResponse defaults) {
            $ = new BqmlIterationResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param durationMs [Output-only, Beta] Time taken to run the training iteration in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder durationMs(String durationMs) {
            $.durationMs = durationMs;
            return this;
        }

        /**
         * @param evalLoss [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
         * 
         * @return builder
         * 
         */
        public Builder evalLoss(Double evalLoss) {
            $.evalLoss = evalLoss;
            return this;
        }

        /**
         * @param index [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
         * 
         * @return builder
         * 
         */
        public Builder index(Integer index) {
            $.index = index;
            return this;
        }

        /**
         * @param learnRate [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
         * 
         * @return builder
         * 
         */
        public Builder learnRate(Double learnRate) {
            $.learnRate = learnRate;
            return this;
        }

        /**
         * @param trainingLoss [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
         * 
         * @return builder
         * 
         */
        public Builder trainingLoss(Double trainingLoss) {
            $.trainingLoss = trainingLoss;
            return this;
        }

        public BqmlIterationResultResponse build() {
            $.durationMs = Objects.requireNonNull($.durationMs, "expected parameter 'durationMs' to be non-null");
            $.evalLoss = Objects.requireNonNull($.evalLoss, "expected parameter 'evalLoss' to be non-null");
            $.index = Objects.requireNonNull($.index, "expected parameter 'index' to be non-null");
            $.learnRate = Objects.requireNonNull($.learnRate, "expected parameter 'learnRate' to be non-null");
            $.trainingLoss = Objects.requireNonNull($.trainingLoss, "expected parameter 'trainingLoss' to be non-null");
            return $;
        }
    }

}
