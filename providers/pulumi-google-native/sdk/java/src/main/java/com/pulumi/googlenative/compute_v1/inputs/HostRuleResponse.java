// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
 * 
 */
public final class HostRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final HostRuleResponse Empty = new HostRuleResponse();

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     * 
     */
    @Import(name="hosts", required=true)
    private List<String> hosts;

    public List<String> hosts() {
        return this.hosts;
    }

    /**
     * The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL&#39;s host portion.
     * 
     */
    @Import(name="pathMatcher", required=true)
    private String pathMatcher;

    public String pathMatcher() {
        return this.pathMatcher;
    }

    private HostRuleResponse() {}

    private HostRuleResponse(HostRuleResponse $) {
        this.description = $.description;
        this.hosts = $.hosts;
        this.pathMatcher = $.pathMatcher;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostRuleResponse $;

        public Builder() {
            $ = new HostRuleResponse();
        }

        public Builder(HostRuleResponse defaults) {
            $ = new HostRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder hosts(List<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder pathMatcher(String pathMatcher) {
            $.pathMatcher = pathMatcher;
            return this;
        }

        public HostRuleResponse build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.hosts = Objects.requireNonNull($.hosts, "expected parameter 'hosts' to be non-null");
            $.pathMatcher = Objects.requireNonNull($.pathMatcher, "expected parameter 'pathMatcher' to be non-null");
            return $;
        }
    }

}
