// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.enums.DiscoveryOccurrenceAnalysisStatus;
import com.pulumi.googlenative.containeranalysis_v1.enums.DiscoveryOccurrenceContinuousAnalysis;
import com.pulumi.googlenative.containeranalysis_v1.inputs.StatusArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provides information about the analysis status of a discovered resource.
 * 
 */
public final class DiscoveryOccurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryOccurrenceArgs Empty = new DiscoveryOccurrenceArgs();

    /**
     * The status of discovery for the resource.
     * 
     */
    @Import(name="analysisStatus")
    private @Nullable Output<DiscoveryOccurrenceAnalysisStatus> analysisStatus;

    public Optional<Output<DiscoveryOccurrenceAnalysisStatus>> analysisStatus() {
        return Optional.ofNullable(this.analysisStatus);
    }

    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     * 
     */
    @Import(name="analysisStatusError")
    private @Nullable Output<StatusArgs> analysisStatusError;

    public Optional<Output<StatusArgs>> analysisStatusError() {
        return Optional.ofNullable(this.analysisStatusError);
    }

    /**
     * Whether the resource is continuously analyzed.
     * 
     */
    @Import(name="continuousAnalysis")
    private @Nullable Output<DiscoveryOccurrenceContinuousAnalysis> continuousAnalysis;

    public Optional<Output<DiscoveryOccurrenceContinuousAnalysis>> continuousAnalysis() {
        return Optional.ofNullable(this.continuousAnalysis);
    }

    /**
     * The CPE of the resource being scanned.
     * 
     */
    @Import(name="cpe")
    private @Nullable Output<String> cpe;

    public Optional<Output<String>> cpe() {
        return Optional.ofNullable(this.cpe);
    }

    /**
     * The last time this resource was scanned.
     * 
     */
    @Import(name="lastScanTime")
    private @Nullable Output<String> lastScanTime;

    public Optional<Output<String>> lastScanTime() {
        return Optional.ofNullable(this.lastScanTime);
    }

    private DiscoveryOccurrenceArgs() {}

    private DiscoveryOccurrenceArgs(DiscoveryOccurrenceArgs $) {
        this.analysisStatus = $.analysisStatus;
        this.analysisStatusError = $.analysisStatusError;
        this.continuousAnalysis = $.continuousAnalysis;
        this.cpe = $.cpe;
        this.lastScanTime = $.lastScanTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryOccurrenceArgs $;

        public Builder() {
            $ = new DiscoveryOccurrenceArgs();
        }

        public Builder(DiscoveryOccurrenceArgs defaults) {
            $ = new DiscoveryOccurrenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder analysisStatus(@Nullable Output<DiscoveryOccurrenceAnalysisStatus> analysisStatus) {
            $.analysisStatus = analysisStatus;
            return this;
        }

        public Builder analysisStatus(DiscoveryOccurrenceAnalysisStatus analysisStatus) {
            return analysisStatus(Output.of(analysisStatus));
        }

        public Builder analysisStatusError(@Nullable Output<StatusArgs> analysisStatusError) {
            $.analysisStatusError = analysisStatusError;
            return this;
        }

        public Builder analysisStatusError(StatusArgs analysisStatusError) {
            return analysisStatusError(Output.of(analysisStatusError));
        }

        public Builder continuousAnalysis(@Nullable Output<DiscoveryOccurrenceContinuousAnalysis> continuousAnalysis) {
            $.continuousAnalysis = continuousAnalysis;
            return this;
        }

        public Builder continuousAnalysis(DiscoveryOccurrenceContinuousAnalysis continuousAnalysis) {
            return continuousAnalysis(Output.of(continuousAnalysis));
        }

        public Builder cpe(@Nullable Output<String> cpe) {
            $.cpe = cpe;
            return this;
        }

        public Builder cpe(String cpe) {
            return cpe(Output.of(cpe));
        }

        public Builder lastScanTime(@Nullable Output<String> lastScanTime) {
            $.lastScanTime = lastScanTime;
            return this;
        }

        public Builder lastScanTime(String lastScanTime) {
            return lastScanTime(Output.of(lastScanTime));
        }

        public DiscoveryOccurrenceArgs build() {
            return $;
        }
    }

}
