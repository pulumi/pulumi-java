// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer.v1.enums.TransferOptionsOverwriteWhen;
import com.pulumi.googlenative.storagetransfer.v1.inputs.MetadataOptionsArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * TransferOptions define the actions to be performed on objects in a transfer.
 * 
 */
public final class TransferOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferOptionsArgs Empty = new TransferOptionsArgs();

    /**
     * Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsFromSourceAfterTransfer")
    private @Nullable Output<Boolean> deleteObjectsFromSourceAfterTransfer;

    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    public Optional<Output<Boolean>> deleteObjectsFromSourceAfterTransfer() {
        return Optional.ofNullable(this.deleteObjectsFromSourceAfterTransfer);
    }

    /**
     * Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsUniqueInSink")
    private @Nullable Output<Boolean> deleteObjectsUniqueInSink;

    /**
     * @return Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    public Optional<Output<Boolean>> deleteObjectsUniqueInSink() {
        return Optional.ofNullable(this.deleteObjectsUniqueInSink);
    }

    /**
     * Represents the selected metadata options for a transfer job. This feature is in Preview.
     * 
     */
    @Import(name="metadataOptions")
    private @Nullable Output<MetadataOptionsArgs> metadataOptions;

    /**
     * @return Represents the selected metadata options for a transfer job. This feature is in Preview.
     * 
     */
    public Optional<Output<MetadataOptionsArgs>> metadataOptions() {
        return Optional.ofNullable(this.metadataOptions);
    }

    /**
     * When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    @Import(name="overwriteObjectsAlreadyExistingInSink")
    private @Nullable Output<Boolean> overwriteObjectsAlreadyExistingInSink;

    /**
     * @return When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    public Optional<Output<Boolean>> overwriteObjectsAlreadyExistingInSink() {
        return Optional.ofNullable(this.overwriteObjectsAlreadyExistingInSink);
    }

    /**
     * When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
     * 
     */
    @Import(name="overwriteWhen")
    private @Nullable Output<TransferOptionsOverwriteWhen> overwriteWhen;

    /**
     * @return When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
     * 
     */
    public Optional<Output<TransferOptionsOverwriteWhen>> overwriteWhen() {
        return Optional.ofNullable(this.overwriteWhen);
    }

    private TransferOptionsArgs() {}

    private TransferOptionsArgs(TransferOptionsArgs $) {
        this.deleteObjectsFromSourceAfterTransfer = $.deleteObjectsFromSourceAfterTransfer;
        this.deleteObjectsUniqueInSink = $.deleteObjectsUniqueInSink;
        this.metadataOptions = $.metadataOptions;
        this.overwriteObjectsAlreadyExistingInSink = $.overwriteObjectsAlreadyExistingInSink;
        this.overwriteWhen = $.overwriteWhen;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferOptionsArgs $;

        public Builder() {
            $ = new TransferOptionsArgs();
        }

        public Builder(TransferOptionsArgs defaults) {
            $ = new TransferOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteObjectsFromSourceAfterTransfer Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsFromSourceAfterTransfer(@Nullable Output<Boolean> deleteObjectsFromSourceAfterTransfer) {
            $.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            return this;
        }

        /**
         * @param deleteObjectsFromSourceAfterTransfer Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
            return deleteObjectsFromSourceAfterTransfer(Output.of(deleteObjectsFromSourceAfterTransfer));
        }

        /**
         * @param deleteObjectsUniqueInSink Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsUniqueInSink(@Nullable Output<Boolean> deleteObjectsUniqueInSink) {
            $.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            return this;
        }

        /**
         * @param deleteObjectsUniqueInSink Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
            return deleteObjectsUniqueInSink(Output.of(deleteObjectsUniqueInSink));
        }

        /**
         * @param metadataOptions Represents the selected metadata options for a transfer job. This feature is in Preview.
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(@Nullable Output<MetadataOptionsArgs> metadataOptions) {
            $.metadataOptions = metadataOptions;
            return this;
        }

        /**
         * @param metadataOptions Represents the selected metadata options for a transfer job. This feature is in Preview.
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(MetadataOptionsArgs metadataOptions) {
            return metadataOptions(Output.of(metadataOptions));
        }

        /**
         * @param overwriteObjectsAlreadyExistingInSink When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
         * 
         * @return builder
         * 
         */
        public Builder overwriteObjectsAlreadyExistingInSink(@Nullable Output<Boolean> overwriteObjectsAlreadyExistingInSink) {
            $.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            return this;
        }

        /**
         * @param overwriteObjectsAlreadyExistingInSink When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
         * 
         * @return builder
         * 
         */
        public Builder overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
            return overwriteObjectsAlreadyExistingInSink(Output.of(overwriteObjectsAlreadyExistingInSink));
        }

        /**
         * @param overwriteWhen When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
         * 
         * @return builder
         * 
         */
        public Builder overwriteWhen(@Nullable Output<TransferOptionsOverwriteWhen> overwriteWhen) {
            $.overwriteWhen = overwriteWhen;
            return this;
        }

        /**
         * @param overwriteWhen When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
         * 
         * @return builder
         * 
         */
        public Builder overwriteWhen(TransferOptionsOverwriteWhen overwriteWhen) {
            return overwriteWhen(Output.of(overwriteWhen));
        }

        public TransferOptionsArgs build() {
            return $;
        }
    }

}
