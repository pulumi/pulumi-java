// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.ml.v1.enums.GoogleCloudMlV1__ParameterSpecScaleType;
import com.pulumi.googlenative.ml.v1.enums.GoogleCloudMlV1__ParameterSpecType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a single hyperparameter to optimize.
 * 
 */
public final class GoogleCloudMlV1__ParameterSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__ParameterSpecArgs Empty = new GoogleCloudMlV1__ParameterSpecArgs();

    /**
     * Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    @Import(name="categoricalValues")
    private @Nullable Output<List<String>> categoricalValues;

    /**
     * @return Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    public Optional<Output<List<String>>> categoricalValues() {
        return Optional.ofNullable(this.categoricalValues);
    }

    /**
     * Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    @Import(name="discreteValues")
    private @Nullable Output<List<Double>> discreteValues;

    /**
     * @return Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    public Optional<Output<List<Double>>> discreteValues() {
        return Optional.ofNullable(this.discreteValues);
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    @Import(name="maxValue")
    private @Nullable Output<Double> maxValue;

    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    public Optional<Output<Double>> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    @Import(name="minValue")
    private @Nullable Output<Double> minValue;

    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    public Optional<Output<Double>> minValue() {
        return Optional.ofNullable(this.minValue);
    }

    /**
     * The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
     * 
     */
    @Import(name="parameterName", required=true)
    private Output<String> parameterName;

    /**
     * @return The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
     * 
     */
    public Output<String> parameterName() {
        return this.parameterName;
    }

    /**
     * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    @Import(name="scaleType")
    private @Nullable Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType;

    /**
     * @return Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    public Optional<Output<GoogleCloudMlV1__ParameterSpecScaleType>> scaleType() {
        return Optional.ofNullable(this.scaleType);
    }

    /**
     * The type of the parameter.
     * 
     */
    @Import(name="type", required=true)
    private Output<GoogleCloudMlV1__ParameterSpecType> type;

    /**
     * @return The type of the parameter.
     * 
     */
    public Output<GoogleCloudMlV1__ParameterSpecType> type() {
        return this.type;
    }

    private GoogleCloudMlV1__ParameterSpecArgs() {}

    private GoogleCloudMlV1__ParameterSpecArgs(GoogleCloudMlV1__ParameterSpecArgs $) {
        this.categoricalValues = $.categoricalValues;
        this.discreteValues = $.discreteValues;
        this.maxValue = $.maxValue;
        this.minValue = $.minValue;
        this.parameterName = $.parameterName;
        this.scaleType = $.scaleType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1__ParameterSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__ParameterSpecArgs $;

        public Builder() {
            $ = new GoogleCloudMlV1__ParameterSpecArgs();
        }

        public Builder(GoogleCloudMlV1__ParameterSpecArgs defaults) {
            $ = new GoogleCloudMlV1__ParameterSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoricalValues Required if type is `CATEGORICAL`. The list of possible categories.
         * 
         * @return builder
         * 
         */
        public Builder categoricalValues(@Nullable Output<List<String>> categoricalValues) {
            $.categoricalValues = categoricalValues;
            return this;
        }

        /**
         * @param categoricalValues Required if type is `CATEGORICAL`. The list of possible categories.
         * 
         * @return builder
         * 
         */
        public Builder categoricalValues(List<String> categoricalValues) {
            return categoricalValues(Output.of(categoricalValues));
        }

        /**
         * @param categoricalValues Required if type is `CATEGORICAL`. The list of possible categories.
         * 
         * @return builder
         * 
         */
        public Builder categoricalValues(String... categoricalValues) {
            return categoricalValues(List.of(categoricalValues));
        }

        /**
         * @param discreteValues Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
         * 
         * @return builder
         * 
         */
        public Builder discreteValues(@Nullable Output<List<Double>> discreteValues) {
            $.discreteValues = discreteValues;
            return this;
        }

        /**
         * @param discreteValues Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
         * 
         * @return builder
         * 
         */
        public Builder discreteValues(List<Double> discreteValues) {
            return discreteValues(Output.of(discreteValues));
        }

        /**
         * @param discreteValues Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
         * 
         * @return builder
         * 
         */
        public Builder discreteValues(Double... discreteValues) {
            return discreteValues(List.of(discreteValues));
        }

        /**
         * @param maxValue Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(@Nullable Output<Double> maxValue) {
            $.maxValue = maxValue;
            return this;
        }

        /**
         * @param maxValue Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(Double maxValue) {
            return maxValue(Output.of(maxValue));
        }

        /**
         * @param minValue Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
         * 
         * @return builder
         * 
         */
        public Builder minValue(@Nullable Output<Double> minValue) {
            $.minValue = minValue;
            return this;
        }

        /**
         * @param minValue Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
         * 
         * @return builder
         * 
         */
        public Builder minValue(Double minValue) {
            return minValue(Output.of(minValue));
        }

        /**
         * @param parameterName The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
         * 
         * @return builder
         * 
         */
        public Builder parameterName(Output<String> parameterName) {
            $.parameterName = parameterName;
            return this;
        }

        /**
         * @param parameterName The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
         * 
         * @return builder
         * 
         */
        public Builder parameterName(String parameterName) {
            return parameterName(Output.of(parameterName));
        }

        /**
         * @param scaleType Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
         * 
         * @return builder
         * 
         */
        public Builder scaleType(@Nullable Output<GoogleCloudMlV1__ParameterSpecScaleType> scaleType) {
            $.scaleType = scaleType;
            return this;
        }

        /**
         * @param scaleType Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
         * 
         * @return builder
         * 
         */
        public Builder scaleType(GoogleCloudMlV1__ParameterSpecScaleType scaleType) {
            return scaleType(Output.of(scaleType));
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<GoogleCloudMlV1__ParameterSpecType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(GoogleCloudMlV1__ParameterSpecType type) {
            return type(Output.of(type));
        }

        public GoogleCloudMlV1__ParameterSpecArgs build() {
            $.parameterName = Objects.requireNonNull($.parameterName, "expected parameter 'parameterName' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
