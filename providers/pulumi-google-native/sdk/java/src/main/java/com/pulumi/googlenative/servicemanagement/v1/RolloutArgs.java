// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement.v1.inputs.DeleteServiceStrategyArgs;
import com.pulumi.googlenative.servicemanagement.v1.inputs.TrafficPercentStrategyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolloutArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutArgs Empty = new RolloutArgs();

    /**
     * Creation time of the rollout. Readonly.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time of the rollout. Readonly.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The user who created the Rollout. Readonly.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The user who created the Rollout. Readonly.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The strategy associated with a rollout to delete a `ManagedService`. Readonly.
     * 
     */
    @Import(name="deleteServiceStrategy")
    private @Nullable Output<DeleteServiceStrategyArgs> deleteServiceStrategy;

    /**
     * @return The strategy associated with a rollout to delete a `ManagedService`. Readonly.
     * 
     */
    public Optional<Output<DeleteServiceStrategyArgs>> deleteServiceStrategy() {
        return Optional.ofNullable(this.deleteServiceStrategy);
    }

    /**
     * Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where &#34;date&#34; is the create date in ISO 8601 format. &#34;revision number&#34; is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is &#39;2016-02-16r1&#39;
     * 
     */
    @Import(name="rolloutId")
    private @Nullable Output<String> rolloutId;

    /**
     * @return Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where &#34;date&#34; is the create date in ISO 8601 format. &#34;revision number&#34; is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is &#39;2016-02-16r1&#39;
     * 
     */
    public Optional<Output<String>> rolloutId() {
        return Optional.ofNullable(this.rolloutId);
    }

    /**
     * The name of the service associated with this Rollout.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the service associated with this Rollout.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Google Service Control selects service configurations based on traffic percentage.
     * 
     */
    @Import(name="trafficPercentStrategy")
    private @Nullable Output<TrafficPercentStrategyArgs> trafficPercentStrategy;

    /**
     * @return Google Service Control selects service configurations based on traffic percentage.
     * 
     */
    public Optional<Output<TrafficPercentStrategyArgs>> trafficPercentStrategy() {
        return Optional.ofNullable(this.trafficPercentStrategy);
    }

    private RolloutArgs() {}

    private RolloutArgs(RolloutArgs $) {
        this.createTime = $.createTime;
        this.createdBy = $.createdBy;
        this.deleteServiceStrategy = $.deleteServiceStrategy;
        this.rolloutId = $.rolloutId;
        this.serviceName = $.serviceName;
        this.trafficPercentStrategy = $.trafficPercentStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutArgs $;

        public Builder() {
            $ = new RolloutArgs();
        }

        public Builder(RolloutArgs defaults) {
            $ = new RolloutArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Creation time of the rollout. Readonly.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time of the rollout. Readonly.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param createdBy The user who created the Rollout. Readonly.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user who created the Rollout. Readonly.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param deleteServiceStrategy The strategy associated with a rollout to delete a `ManagedService`. Readonly.
         * 
         * @return builder
         * 
         */
        public Builder deleteServiceStrategy(@Nullable Output<DeleteServiceStrategyArgs> deleteServiceStrategy) {
            $.deleteServiceStrategy = deleteServiceStrategy;
            return this;
        }

        /**
         * @param deleteServiceStrategy The strategy associated with a rollout to delete a `ManagedService`. Readonly.
         * 
         * @return builder
         * 
         */
        public Builder deleteServiceStrategy(DeleteServiceStrategyArgs deleteServiceStrategy) {
            return deleteServiceStrategy(Output.of(deleteServiceStrategy));
        }

        /**
         * @param rolloutId Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where &#34;date&#34; is the create date in ISO 8601 format. &#34;revision number&#34; is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is &#39;2016-02-16r1&#39;
         * 
         * @return builder
         * 
         */
        public Builder rolloutId(@Nullable Output<String> rolloutId) {
            $.rolloutId = rolloutId;
            return this;
        }

        /**
         * @param rolloutId Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where &#34;date&#34; is the create date in ISO 8601 format. &#34;revision number&#34; is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is &#39;2016-02-16r1&#39;
         * 
         * @return builder
         * 
         */
        public Builder rolloutId(String rolloutId) {
            return rolloutId(Output.of(rolloutId));
        }

        /**
         * @param serviceName The name of the service associated with this Rollout.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the service associated with this Rollout.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param trafficPercentStrategy Google Service Control selects service configurations based on traffic percentage.
         * 
         * @return builder
         * 
         */
        public Builder trafficPercentStrategy(@Nullable Output<TrafficPercentStrategyArgs> trafficPercentStrategy) {
            $.trafficPercentStrategy = trafficPercentStrategy;
            return this;
        }

        /**
         * @param trafficPercentStrategy Google Service Control selects service configurations based on traffic percentage.
         * 
         * @return builder
         * 
         */
        public Builder trafficPercentStrategy(TrafficPercentStrategyArgs trafficPercentStrategy) {
            return trafficPercentStrategy(Output.of(trafficPercentStrategy));
        }

        public RolloutArgs build() {
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
