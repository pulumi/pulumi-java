// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigqueryreservation.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetReservationResult {
    /**
     * @return Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    private final String concurrency;
    /**
     * @return Creation time of the reservation.
     * 
     */
    private final String creationTime;
    /**
     * @return If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.
     * 
     */
    private final Boolean ignoreIdleSlots;
    /**
     * @return Applicable only for reservations located within one of the BigQuery multi-regions (US or EU). If set to true, this reservation is placed in the organization&#39;s secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization&#39;s default region.
     * 
     */
    private final Boolean multiRegionAuxiliary;
    /**
     * @return The resource name of the reservation, e.g., `projects/*{@literal /}locations/*{@literal /}reservations/team1-prod`. The reservation_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.
     * 
     */
    private final String name;
    /**
     * @return Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false. If total slot_capacity of the reservation and its siblings exceeds the total slot_count of all capacity commitments, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. NOTE: for reservations in US or EU multi-regions, slot capacity constraints are checked separately for default and auxiliary regions. See multi_region_auxiliary flag for more details.
     * 
     */
    private final String slotCapacity;
    /**
     * @return Last update time of the reservation.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetReservationResult(
        @CustomType.Parameter("concurrency") String concurrency,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("ignoreIdleSlots") Boolean ignoreIdleSlots,
        @CustomType.Parameter("multiRegionAuxiliary") Boolean multiRegionAuxiliary,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("slotCapacity") String slotCapacity,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.concurrency = concurrency;
        this.creationTime = creationTime;
        this.ignoreIdleSlots = ignoreIdleSlots;
        this.multiRegionAuxiliary = multiRegionAuxiliary;
        this.name = name;
        this.slotCapacity = slotCapacity;
        this.updateTime = updateTime;
    }

    /**
     * @return Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    public String concurrency() {
        return this.concurrency;
    }
    /**
     * @return Creation time of the reservation.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.
     * 
     */
    public Boolean ignoreIdleSlots() {
        return this.ignoreIdleSlots;
    }
    /**
     * @return Applicable only for reservations located within one of the BigQuery multi-regions (US or EU). If set to true, this reservation is placed in the organization&#39;s secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization&#39;s default region.
     * 
     */
    public Boolean multiRegionAuxiliary() {
        return this.multiRegionAuxiliary;
    }
    /**
     * @return The resource name of the reservation, e.g., `projects/*{@literal /}locations/*{@literal /}reservations/team1-prod`. The reservation_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false. If total slot_capacity of the reservation and its siblings exceeds the total slot_count of all capacity commitments, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. NOTE: for reservations in US or EU multi-regions, slot capacity constraints are checked separately for default and auxiliary regions. See multi_region_auxiliary flag for more details.
     * 
     */
    public String slotCapacity() {
        return this.slotCapacity;
    }
    /**
     * @return Last update time of the reservation.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReservationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String concurrency;
        private String creationTime;
        private Boolean ignoreIdleSlots;
        private Boolean multiRegionAuxiliary;
        private String name;
        private String slotCapacity;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReservationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concurrency = defaults.concurrency;
    	      this.creationTime = defaults.creationTime;
    	      this.ignoreIdleSlots = defaults.ignoreIdleSlots;
    	      this.multiRegionAuxiliary = defaults.multiRegionAuxiliary;
    	      this.name = defaults.name;
    	      this.slotCapacity = defaults.slotCapacity;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder concurrency(String concurrency) {
            this.concurrency = Objects.requireNonNull(concurrency);
            return this;
        }
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        public Builder ignoreIdleSlots(Boolean ignoreIdleSlots) {
            this.ignoreIdleSlots = Objects.requireNonNull(ignoreIdleSlots);
            return this;
        }
        public Builder multiRegionAuxiliary(Boolean multiRegionAuxiliary) {
            this.multiRegionAuxiliary = Objects.requireNonNull(multiRegionAuxiliary);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder slotCapacity(String slotCapacity) {
            this.slotCapacity = Objects.requireNonNull(slotCapacity);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetReservationResult build() {
            return new GetReservationResult(concurrency, creationTime, ignoreIdleSlots, multiRegionAuxiliary, name, slotCapacity, updateTime);
        }
    }
}
