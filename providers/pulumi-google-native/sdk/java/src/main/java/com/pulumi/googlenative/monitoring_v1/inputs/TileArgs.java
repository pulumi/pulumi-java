// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.WidgetArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A single tile in the mosaic. The placement and size of the tile are configurable.
 * 
 */
public final class TileArgs extends com.pulumi.resources.ResourceArgs {

    public static final TileArgs Empty = new TileArgs();

    /**
     * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
     * 
     */
    @Import(name="height")
    private @Nullable Output<Integer> height;

    public Optional<Output<Integer>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The informational widget contained in the tile. For example an XyChart.
     * 
     */
    @Import(name="widget")
    private @Nullable Output<WidgetArgs> widget;

    public Optional<Output<WidgetArgs>> widget() {
        return Optional.ofNullable(this.widget);
    }

    /**
     * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
     * 
     */
    @Import(name="width")
    private @Nullable Output<Integer> width;

    public Optional<Output<Integer>> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.
     * 
     */
    @Import(name="xPos")
    private @Nullable Output<Integer> xPos;

    public Optional<Output<Integer>> xPos() {
        return Optional.ofNullable(this.xPos);
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.
     * 
     */
    @Import(name="yPos")
    private @Nullable Output<Integer> yPos;

    public Optional<Output<Integer>> yPos() {
        return Optional.ofNullable(this.yPos);
    }

    private TileArgs() {}

    private TileArgs(TileArgs $) {
        this.height = $.height;
        this.widget = $.widget;
        this.width = $.width;
        this.xPos = $.xPos;
        this.yPos = $.yPos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TileArgs $;

        public Builder() {
            $ = new TileArgs();
        }

        public Builder(TileArgs defaults) {
            $ = new TileArgs(Objects.requireNonNull(defaults));
        }

        public Builder height(@Nullable Output<Integer> height) {
            $.height = height;
            return this;
        }

        public Builder height(Integer height) {
            return height(Output.of(height));
        }

        public Builder widget(@Nullable Output<WidgetArgs> widget) {
            $.widget = widget;
            return this;
        }

        public Builder widget(WidgetArgs widget) {
            return widget(Output.of(widget));
        }

        public Builder width(@Nullable Output<Integer> width) {
            $.width = width;
            return this;
        }

        public Builder width(Integer width) {
            return width(Output.of(width));
        }

        public Builder xPos(@Nullable Output<Integer> xPos) {
            $.xPos = xPos;
            return this;
        }

        public Builder xPos(Integer xPos) {
            return xPos(Output.of(xPos));
        }

        public Builder yPos(@Nullable Output<Integer> yPos) {
            $.yPos = yPos;
            return this;
        }

        public Builder yPos(Integer yPos) {
            return yPos(Output.of(yPos));
        }

        public TileArgs build() {
            return $;
        }
    }

}
