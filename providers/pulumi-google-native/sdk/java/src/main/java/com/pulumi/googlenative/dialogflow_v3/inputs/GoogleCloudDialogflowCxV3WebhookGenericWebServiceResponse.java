// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Represents configuration for a generic web service.
 * 
 */
public final class GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse Empty = new GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse();

    /**
     * Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google&#39;s default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with &#34;subject alt name&#34;. For instance a certificate can be self-signed using the following command, openssl x509 -req -days 200 -in example.com.csr \ -signkey example.com.key \ -out example.com.crt \ -extfile &lt;(printf &#34;\nsubjectAltName=&#39;DNS:www.example.com&#39;&#34;)
     * 
     */
    @Import(name="allowedCaCerts", required=true)
    private List<String> allowedCaCerts;

    public List<String> allowedCaCerts() {
        return this.allowedCaCerts;
    }

    /**
     * The password for HTTP Basic authentication.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    /**
     * The HTTP request headers to send together with webhook requests.
     * 
     */
    @Import(name="requestHeaders", required=true)
    private Map<String,String> requestHeaders;

    public Map<String,String> requestHeaders() {
        return this.requestHeaders;
    }

    /**
     * The webhook URI for receiving POST requests. It must use https protocol.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    public String uri() {
        return this.uri;
    }

    /**
     * The user name for HTTP Basic authentication.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    private GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse() {}

    private GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse(GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse $) {
        this.allowedCaCerts = $.allowedCaCerts;
        this.password = $.password;
        this.requestHeaders = $.requestHeaders;
        this.uri = $.uri;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowedCaCerts(List<String> allowedCaCerts) {
            $.allowedCaCerts = allowedCaCerts;
            return this;
        }

        public Builder allowedCaCerts(String... allowedCaCerts) {
            return allowedCaCerts(List.of(allowedCaCerts));
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder requestHeaders(Map<String,String> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public GoogleCloudDialogflowCxV3WebhookGenericWebServiceResponse build() {
            $.allowedCaCerts = Objects.requireNonNull($.allowedCaCerts, "expected parameter 'allowedCaCerts' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.requestHeaders = Objects.requireNonNull($.requestHeaders, "expected parameter 'requestHeaders' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
