// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.sqladmin_v1.inputs.InstanceReferenceResponse;
import java.lang.String;
import java.util.Objects;


/**
 * On-premises instance configuration.
 * 
 */
public final class OnPremisesConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final OnPremisesConfigurationResponse Empty = new OnPremisesConfigurationResponse();

    /**
     * PEM representation of the trusted CA&#39;s x509 certificate.
     * 
     */
    @Import(name="caCertificate", required=true)
    private String caCertificate;

    public String caCertificate() {
        return this.caCertificate;
    }

    /**
     * PEM representation of the replica&#39;s x509 certificate.
     * 
     */
    @Import(name="clientCertificate", required=true)
    private String clientCertificate;

    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * PEM representation of the replica&#39;s private key. The corresponsing public key is encoded in the client&#39;s certificate.
     * 
     */
    @Import(name="clientKey", required=true)
    private String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    /**
     * The dump file to create the Cloud SQL replica.
     * 
     */
    @Import(name="dumpFilePath", required=true)
    private String dumpFilePath;

    public String dumpFilePath() {
        return this.dumpFilePath;
    }

    /**
     * The host and port of the on-premises instance in host:port format
     * 
     */
    @Import(name="hostPort", required=true)
    private String hostPort;

    public String hostPort() {
        return this.hostPort;
    }

    /**
     * This is always `sql#onPremisesConfiguration`.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * The password for connecting to on-premises instance.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    /**
     * The reference to Cloud SQL instance if the source is Cloud SQL.
     * 
     */
    @Import(name="sourceInstance", required=true)
    private InstanceReferenceResponse sourceInstance;

    public InstanceReferenceResponse sourceInstance() {
        return this.sourceInstance;
    }

    /**
     * The username for connecting to on-premises instance.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    private OnPremisesConfigurationResponse() {}

    private OnPremisesConfigurationResponse(OnPremisesConfigurationResponse $) {
        this.caCertificate = $.caCertificate;
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.dumpFilePath = $.dumpFilePath;
        this.hostPort = $.hostPort;
        this.kind = $.kind;
        this.password = $.password;
        this.sourceInstance = $.sourceInstance;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OnPremisesConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OnPremisesConfigurationResponse $;

        public Builder() {
            $ = new OnPremisesConfigurationResponse();
        }

        public Builder(OnPremisesConfigurationResponse defaults) {
            $ = new OnPremisesConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder caCertificate(String caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder dumpFilePath(String dumpFilePath) {
            $.dumpFilePath = dumpFilePath;
            return this;
        }

        public Builder hostPort(String hostPort) {
            $.hostPort = hostPort;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder sourceInstance(InstanceReferenceResponse sourceInstance) {
            $.sourceInstance = sourceInstance;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public OnPremisesConfigurationResponse build() {
            $.caCertificate = Objects.requireNonNull($.caCertificate, "expected parameter 'caCertificate' to be non-null");
            $.clientCertificate = Objects.requireNonNull($.clientCertificate, "expected parameter 'clientCertificate' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.dumpFilePath = Objects.requireNonNull($.dumpFilePath, "expected parameter 'dumpFilePath' to be non-null");
            $.hostPort = Objects.requireNonNull($.hostPort, "expected parameter 'hostPort' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.sourceInstance = Objects.requireNonNull($.sourceInstance, "expected parameter 'sourceInstance' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
