// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudidentity.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudidentity.v1.inputs.DynamicGroupMetadataArgs;
import com.pulumi.googlenative.cloudidentity.v1.inputs.EntityKeyArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupArgs Empty = new GroupArgs();

    /**
     * An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the `Group`.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the `Group`.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Optional. Dynamic group metadata like queries and status.
     * 
     */
    @Import(name="dynamicGroupMetadata")
    private @Nullable Output<DynamicGroupMetadataArgs> dynamicGroupMetadata;

    /**
     * @return Optional. Dynamic group metadata like queries and status.
     * 
     */
    public Optional<Output<DynamicGroupMetadataArgs>> dynamicGroupMetadata() {
        return Optional.ofNullable(this.dynamicGroupMetadata);
    }

    /**
     * The `EntityKey` of the `Group`.
     * 
     */
    @Import(name="groupKey", required=true)
    private Output<EntityKeyArgs> groupKey;

    /**
     * @return The `EntityKey` of the `Group`.
     * 
     */
    public Output<EntityKeyArgs> groupKey() {
        return this.groupKey;
    }

    /**
     * Optional. The initial configuration option for the `Group`.
     * 
     */
    @Import(name="initialGroupConfig")
    private @Nullable Output<String> initialGroupConfig;

    /**
     * @return Optional. The initial configuration option for the `Group`.
     * 
     */
    public Optional<Output<String>> initialGroupConfig() {
        return Optional.ofNullable(this.initialGroupConfig);
    }

    /**
     * One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
     * 
     */
    @Import(name="labels", required=true)
    private Output<Map<String,String>> labels;

    /**
     * @return One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }

    /**
     * Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external- identity-mapped groups or `customers/{customer}` for Google Groups. The `customer` must begin with &#34;C&#34; (for example, &#39;C046psxkn&#39;).
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external- identity-mapped groups or `customers/{customer}` for Google Groups. The `customer` must begin with &#34;C&#34; (for example, &#39;C046psxkn&#39;).
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    private GroupArgs() {}

    private GroupArgs(GroupArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.dynamicGroupMetadata = $.dynamicGroupMetadata;
        this.groupKey = $.groupKey;
        this.initialGroupConfig = $.initialGroupConfig;
        this.labels = $.labels;
        this.parent = $.parent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupArgs $;

        public Builder() {
            $ = new GroupArgs();
        }

        public Builder(GroupArgs defaults) {
            $ = new GroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the `Group`.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the `Group`.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dynamicGroupMetadata Optional. Dynamic group metadata like queries and status.
         * 
         * @return builder
         * 
         */
        public Builder dynamicGroupMetadata(@Nullable Output<DynamicGroupMetadataArgs> dynamicGroupMetadata) {
            $.dynamicGroupMetadata = dynamicGroupMetadata;
            return this;
        }

        /**
         * @param dynamicGroupMetadata Optional. Dynamic group metadata like queries and status.
         * 
         * @return builder
         * 
         */
        public Builder dynamicGroupMetadata(DynamicGroupMetadataArgs dynamicGroupMetadata) {
            return dynamicGroupMetadata(Output.of(dynamicGroupMetadata));
        }

        /**
         * @param groupKey The `EntityKey` of the `Group`.
         * 
         * @return builder
         * 
         */
        public Builder groupKey(Output<EntityKeyArgs> groupKey) {
            $.groupKey = groupKey;
            return this;
        }

        /**
         * @param groupKey The `EntityKey` of the `Group`.
         * 
         * @return builder
         * 
         */
        public Builder groupKey(EntityKeyArgs groupKey) {
            return groupKey(Output.of(groupKey));
        }

        /**
         * @param initialGroupConfig Optional. The initial configuration option for the `Group`.
         * 
         * @return builder
         * 
         */
        public Builder initialGroupConfig(@Nullable Output<String> initialGroupConfig) {
            $.initialGroupConfig = initialGroupConfig;
            return this;
        }

        /**
         * @param initialGroupConfig Optional. The initial configuration option for the `Group`.
         * 
         * @return builder
         * 
         */
        public Builder initialGroupConfig(String initialGroupConfig) {
            return initialGroupConfig(Output.of(initialGroupConfig));
        }

        /**
         * @param labels One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
         * 
         * @return builder
         * 
         */
        public Builder labels(Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param parent Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external- identity-mapped groups or `customers/{customer}` for Google Groups. The `customer` must begin with &#34;C&#34; (for example, &#39;C046psxkn&#39;).
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external- identity-mapped groups or `customers/{customer}` for Google Groups. The `customer` must begin with &#34;C&#34; (for example, &#39;C046psxkn&#39;).
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public GroupArgs build() {
            $.groupKey = Objects.requireNonNull($.groupKey, "expected parameter 'groupKey' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.parent = Objects.requireNonNull($.parent, "expected parameter 'parent' to be non-null");
            return $;
        }
    }

}
