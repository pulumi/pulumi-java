// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.BigtableColumnFamilyResponse;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;


public final class BigtableOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final BigtableOptionsResponse Empty = new BigtableOptionsResponse();

    /**
     * [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
     * 
     */
    @Import(name="columnFamilies", required=true)
    private List<BigtableColumnFamilyResponse> columnFamilies;

    /**
     * @return [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
     * 
     */
    public List<BigtableColumnFamilyResponse> columnFamilies() {
        return this.columnFamilies;
    }

    /**
     * [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
     */
    @Import(name="ignoreUnspecifiedColumnFamilies", required=true)
    private Boolean ignoreUnspecifiedColumnFamilies;

    /**
     * @return [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
     */
    public Boolean ignoreUnspecifiedColumnFamilies() {
        return this.ignoreUnspecifiedColumnFamilies;
    }

    /**
     * [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
     */
    @Import(name="readRowkeyAsString", required=true)
    private Boolean readRowkeyAsString;

    /**
     * @return [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
     */
    public Boolean readRowkeyAsString() {
        return this.readRowkeyAsString;
    }

    private BigtableOptionsResponse() {}

    private BigtableOptionsResponse(BigtableOptionsResponse $) {
        this.columnFamilies = $.columnFamilies;
        this.ignoreUnspecifiedColumnFamilies = $.ignoreUnspecifiedColumnFamilies;
        this.readRowkeyAsString = $.readRowkeyAsString;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BigtableOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BigtableOptionsResponse $;

        public Builder() {
            $ = new BigtableOptionsResponse();
        }

        public Builder(BigtableOptionsResponse defaults) {
            $ = new BigtableOptionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnFamilies [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
         * 
         * @return builder
         * 
         */
        public Builder columnFamilies(List<BigtableColumnFamilyResponse> columnFamilies) {
            $.columnFamilies = columnFamilies;
            return this;
        }

        /**
         * @param columnFamilies [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
         * 
         * @return builder
         * 
         */
        public Builder columnFamilies(BigtableColumnFamilyResponse... columnFamilies) {
            return columnFamilies(List.of(columnFamilies));
        }

        /**
         * @param ignoreUnspecifiedColumnFamilies [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreUnspecifiedColumnFamilies(Boolean ignoreUnspecifiedColumnFamilies) {
            $.ignoreUnspecifiedColumnFamilies = ignoreUnspecifiedColumnFamilies;
            return this;
        }

        /**
         * @param readRowkeyAsString [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder readRowkeyAsString(Boolean readRowkeyAsString) {
            $.readRowkeyAsString = readRowkeyAsString;
            return this;
        }

        public BigtableOptionsResponse build() {
            $.columnFamilies = Objects.requireNonNull($.columnFamilies, "expected parameter 'columnFamilies' to be non-null");
            $.ignoreUnspecifiedColumnFamilies = Objects.requireNonNull($.ignoreUnspecifiedColumnFamilies, "expected parameter 'ignoreUnspecifiedColumnFamilies' to be non-null");
            $.readRowkeyAsString = Objects.requireNonNull($.readRowkeyAsString, "expected parameter 'readRowkeyAsString' to be non-null");
            return $;
        }
    }

}
