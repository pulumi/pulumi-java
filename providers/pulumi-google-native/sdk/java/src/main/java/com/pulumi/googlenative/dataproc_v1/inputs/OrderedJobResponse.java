// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc_v1.inputs.HadoopJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.HiveJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.JobSchedulingResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.PigJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.PrestoJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.PySparkJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.SparkJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.SparkRJobResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.SparkSqlJobResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * A job executed by the workflow.
 * 
 */
public final class OrderedJobResponse extends com.pulumi.resources.InvokeArgs {

    public static final OrderedJobResponse Empty = new OrderedJobResponse();

    /**
     * Optional. Job is a Hadoop job.
     * 
     */
    @Import(name="hadoopJob", required=true)
      private final HadoopJobResponse hadoopJob;

    public HadoopJobResponse hadoopJob() {
        return this.hadoopJob;
    }

    /**
     * Optional. Job is a Hive job.
     * 
     */
    @Import(name="hiveJob", required=true)
      private final HiveJobResponse hiveJob;

    public HiveJobResponse hiveJob() {
        return this.hiveJob;
    }

    /**
     * Optional. The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 32 labels can be associated with a given job.
     * 
     */
    @Import(name="labels", required=true)
      private final Map<String,String> labels;

    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * Optional. Job is a Pig job.
     * 
     */
    @Import(name="pigJob", required=true)
      private final PigJobResponse pigJob;

    public PigJobResponse pigJob() {
        return this.pigJob;
    }

    /**
     * Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
     * 
     */
    @Import(name="prerequisiteStepIds", required=true)
      private final List<String> prerequisiteStepIds;

    public List<String> prerequisiteStepIds() {
        return this.prerequisiteStepIds;
    }

    /**
     * Optional. Job is a Presto job.
     * 
     */
    @Import(name="prestoJob", required=true)
      private final PrestoJobResponse prestoJob;

    public PrestoJobResponse prestoJob() {
        return this.prestoJob;
    }

    /**
     * Optional. Job is a PySpark job.
     * 
     */
    @Import(name="pysparkJob", required=true)
      private final PySparkJobResponse pysparkJob;

    public PySparkJobResponse pysparkJob() {
        return this.pysparkJob;
    }

    /**
     * Optional. Job scheduling configuration.
     * 
     */
    @Import(name="scheduling", required=true)
      private final JobSchedulingResponse scheduling;

    public JobSchedulingResponse scheduling() {
        return this.scheduling;
    }

    /**
     * Optional. Job is a Spark job.
     * 
     */
    @Import(name="sparkJob", required=true)
      private final SparkJobResponse sparkJob;

    public SparkJobResponse sparkJob() {
        return this.sparkJob;
    }

    /**
     * Optional. Job is a SparkR job.
     * 
     */
    @Import(name="sparkRJob", required=true)
      private final SparkRJobResponse sparkRJob;

    public SparkRJobResponse sparkRJob() {
        return this.sparkRJob;
    }

    /**
     * Optional. Job is a SparkSql job.
     * 
     */
    @Import(name="sparkSqlJob", required=true)
      private final SparkSqlJobResponse sparkSqlJob;

    public SparkSqlJobResponse sparkSqlJob() {
        return this.sparkSqlJob;
    }

    /**
     * The step id. The id must be unique among all jobs within the template.The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in prerequisiteStepIds field from other steps.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
     * 
     */
    @Import(name="stepId", required=true)
      private final String stepId;

    public String stepId() {
        return this.stepId;
    }

    public OrderedJobResponse(
        HadoopJobResponse hadoopJob,
        HiveJobResponse hiveJob,
        Map<String,String> labels,
        PigJobResponse pigJob,
        List<String> prerequisiteStepIds,
        PrestoJobResponse prestoJob,
        PySparkJobResponse pysparkJob,
        JobSchedulingResponse scheduling,
        SparkJobResponse sparkJob,
        SparkRJobResponse sparkRJob,
        SparkSqlJobResponse sparkSqlJob,
        String stepId) {
        this.hadoopJob = Objects.requireNonNull(hadoopJob, "expected parameter 'hadoopJob' to be non-null");
        this.hiveJob = Objects.requireNonNull(hiveJob, "expected parameter 'hiveJob' to be non-null");
        this.labels = Objects.requireNonNull(labels, "expected parameter 'labels' to be non-null");
        this.pigJob = Objects.requireNonNull(pigJob, "expected parameter 'pigJob' to be non-null");
        this.prerequisiteStepIds = Objects.requireNonNull(prerequisiteStepIds, "expected parameter 'prerequisiteStepIds' to be non-null");
        this.prestoJob = Objects.requireNonNull(prestoJob, "expected parameter 'prestoJob' to be non-null");
        this.pysparkJob = Objects.requireNonNull(pysparkJob, "expected parameter 'pysparkJob' to be non-null");
        this.scheduling = Objects.requireNonNull(scheduling, "expected parameter 'scheduling' to be non-null");
        this.sparkJob = Objects.requireNonNull(sparkJob, "expected parameter 'sparkJob' to be non-null");
        this.sparkRJob = Objects.requireNonNull(sparkRJob, "expected parameter 'sparkRJob' to be non-null");
        this.sparkSqlJob = Objects.requireNonNull(sparkSqlJob, "expected parameter 'sparkSqlJob' to be non-null");
        this.stepId = Objects.requireNonNull(stepId, "expected parameter 'stepId' to be non-null");
    }

    private OrderedJobResponse() {
        this.hadoopJob = null;
        this.hiveJob = null;
        this.labels = Map.of();
        this.pigJob = null;
        this.prerequisiteStepIds = List.of();
        this.prestoJob = null;
        this.pysparkJob = null;
        this.scheduling = null;
        this.sparkJob = null;
        this.sparkRJob = null;
        this.sparkSqlJob = null;
        this.stepId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrderedJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HadoopJobResponse hadoopJob;
        private HiveJobResponse hiveJob;
        private Map<String,String> labels;
        private PigJobResponse pigJob;
        private List<String> prerequisiteStepIds;
        private PrestoJobResponse prestoJob;
        private PySparkJobResponse pysparkJob;
        private JobSchedulingResponse scheduling;
        private SparkJobResponse sparkJob;
        private SparkRJobResponse sparkRJob;
        private SparkSqlJobResponse sparkSqlJob;
        private String stepId;

        public Builder() {
    	      // Empty
        }

        public Builder(OrderedJobResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hadoopJob = defaults.hadoopJob;
    	      this.hiveJob = defaults.hiveJob;
    	      this.labels = defaults.labels;
    	      this.pigJob = defaults.pigJob;
    	      this.prerequisiteStepIds = defaults.prerequisiteStepIds;
    	      this.prestoJob = defaults.prestoJob;
    	      this.pysparkJob = defaults.pysparkJob;
    	      this.scheduling = defaults.scheduling;
    	      this.sparkJob = defaults.sparkJob;
    	      this.sparkRJob = defaults.sparkRJob;
    	      this.sparkSqlJob = defaults.sparkSqlJob;
    	      this.stepId = defaults.stepId;
        }

        public Builder hadoopJob(HadoopJobResponse hadoopJob) {
            this.hadoopJob = Objects.requireNonNull(hadoopJob);
            return this;
        }
        public Builder hiveJob(HiveJobResponse hiveJob) {
            this.hiveJob = Objects.requireNonNull(hiveJob);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder pigJob(PigJobResponse pigJob) {
            this.pigJob = Objects.requireNonNull(pigJob);
            return this;
        }
        public Builder prerequisiteStepIds(List<String> prerequisiteStepIds) {
            this.prerequisiteStepIds = Objects.requireNonNull(prerequisiteStepIds);
            return this;
        }
        public Builder prerequisiteStepIds(String... prerequisiteStepIds) {
            return prerequisiteStepIds(List.of(prerequisiteStepIds));
        }
        public Builder prestoJob(PrestoJobResponse prestoJob) {
            this.prestoJob = Objects.requireNonNull(prestoJob);
            return this;
        }
        public Builder pysparkJob(PySparkJobResponse pysparkJob) {
            this.pysparkJob = Objects.requireNonNull(pysparkJob);
            return this;
        }
        public Builder scheduling(JobSchedulingResponse scheduling) {
            this.scheduling = Objects.requireNonNull(scheduling);
            return this;
        }
        public Builder sparkJob(SparkJobResponse sparkJob) {
            this.sparkJob = Objects.requireNonNull(sparkJob);
            return this;
        }
        public Builder sparkRJob(SparkRJobResponse sparkRJob) {
            this.sparkRJob = Objects.requireNonNull(sparkRJob);
            return this;
        }
        public Builder sparkSqlJob(SparkSqlJobResponse sparkSqlJob) {
            this.sparkSqlJob = Objects.requireNonNull(sparkSqlJob);
            return this;
        }
        public Builder stepId(String stepId) {
            this.stepId = Objects.requireNonNull(stepId);
            return this;
        }        public OrderedJobResponse build() {
            return new OrderedJobResponse(hadoopJob, hiveJob, labels, pigJob, prerequisiteStepIds, prestoJob, pysparkJob, scheduling, sparkJob, sparkRJob, sparkSqlJob, stepId);
        }
    }
}
