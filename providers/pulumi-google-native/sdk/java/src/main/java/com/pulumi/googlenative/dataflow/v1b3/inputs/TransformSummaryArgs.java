// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow.v1b3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow.v1b3.enums.TransformSummaryKind;
import com.pulumi.googlenative.dataflow.v1b3.inputs.DisplayDataArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Description of the type, names/ids, and input/outputs for a transform.
 * 
 */
public final class TransformSummaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformSummaryArgs Empty = new TransformSummaryArgs();

    /**
     * Transform-specific display data.
     * 
     */
    @Import(name="displayData")
    private @Nullable Output<List<DisplayDataArgs>> displayData;

    /**
     * @return Transform-specific display data.
     * 
     */
    public Optional<Output<List<DisplayDataArgs>>> displayData() {
        return Optional.ofNullable(this.displayData);
    }

    /**
     * SDK generated id of this transform instance.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return SDK generated id of this transform instance.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * User names for all collection inputs to this transform.
     * 
     */
    @Import(name="inputCollectionName")
    private @Nullable Output<List<String>> inputCollectionName;

    /**
     * @return User names for all collection inputs to this transform.
     * 
     */
    public Optional<Output<List<String>>> inputCollectionName() {
        return Optional.ofNullable(this.inputCollectionName);
    }

    /**
     * Type of transform.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<TransformSummaryKind> kind;

    /**
     * @return Type of transform.
     * 
     */
    public Optional<Output<TransformSummaryKind>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * User provided name for this transform instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return User provided name for this transform instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * User names for all collection outputs to this transform.
     * 
     */
    @Import(name="outputCollectionName")
    private @Nullable Output<List<String>> outputCollectionName;

    /**
     * @return User names for all collection outputs to this transform.
     * 
     */
    public Optional<Output<List<String>>> outputCollectionName() {
        return Optional.ofNullable(this.outputCollectionName);
    }

    private TransformSummaryArgs() {}

    private TransformSummaryArgs(TransformSummaryArgs $) {
        this.displayData = $.displayData;
        this.id = $.id;
        this.inputCollectionName = $.inputCollectionName;
        this.kind = $.kind;
        this.name = $.name;
        this.outputCollectionName = $.outputCollectionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformSummaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformSummaryArgs $;

        public Builder() {
            $ = new TransformSummaryArgs();
        }

        public Builder(TransformSummaryArgs defaults) {
            $ = new TransformSummaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayData Transform-specific display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(@Nullable Output<List<DisplayDataArgs>> displayData) {
            $.displayData = displayData;
            return this;
        }

        /**
         * @param displayData Transform-specific display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(List<DisplayDataArgs> displayData) {
            return displayData(Output.of(displayData));
        }

        /**
         * @param displayData Transform-specific display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(DisplayDataArgs... displayData) {
            return displayData(List.of(displayData));
        }

        /**
         * @param id SDK generated id of this transform instance.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id SDK generated id of this transform instance.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputCollectionName User names for all collection inputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder inputCollectionName(@Nullable Output<List<String>> inputCollectionName) {
            $.inputCollectionName = inputCollectionName;
            return this;
        }

        /**
         * @param inputCollectionName User names for all collection inputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder inputCollectionName(List<String> inputCollectionName) {
            return inputCollectionName(Output.of(inputCollectionName));
        }

        /**
         * @param inputCollectionName User names for all collection inputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder inputCollectionName(String... inputCollectionName) {
            return inputCollectionName(List.of(inputCollectionName));
        }

        /**
         * @param kind Type of transform.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<TransformSummaryKind> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Type of transform.
         * 
         * @return builder
         * 
         */
        public Builder kind(TransformSummaryKind kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name User provided name for this transform instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name User provided name for this transform instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputCollectionName User names for all collection outputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder outputCollectionName(@Nullable Output<List<String>> outputCollectionName) {
            $.outputCollectionName = outputCollectionName;
            return this;
        }

        /**
         * @param outputCollectionName User names for all collection outputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder outputCollectionName(List<String> outputCollectionName) {
            return outputCollectionName(Output.of(outputCollectionName));
        }

        /**
         * @param outputCollectionName User names for all collection outputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder outputCollectionName(String... outputCollectionName) {
            return outputCollectionName(List.of(outputCollectionName));
        }

        public TransformSummaryArgs build() {
            return $;
        }
    }

}
