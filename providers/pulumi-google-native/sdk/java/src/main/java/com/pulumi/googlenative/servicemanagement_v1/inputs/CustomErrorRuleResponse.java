// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A custom error rule.
 * 
 */
public final class CustomErrorRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomErrorRuleResponse Empty = new CustomErrorRuleResponse();

    /**
     * Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.
     * 
     */
    @Import(name="isErrorType", required=true)
    private Boolean isErrorType;

    public Boolean isErrorType() {
        return this.isErrorType;
    }

    /**
     * Selects messages to which this rule applies. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector", required=true)
    private String selector;

    public String selector() {
        return this.selector;
    }

    private CustomErrorRuleResponse() {}

    private CustomErrorRuleResponse(CustomErrorRuleResponse $) {
        this.isErrorType = $.isErrorType;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomErrorRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomErrorRuleResponse $;

        public Builder() {
            $ = new CustomErrorRuleResponse();
        }

        public Builder(CustomErrorRuleResponse defaults) {
            $ = new CustomErrorRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder isErrorType(Boolean isErrorType) {
            $.isErrorType = isErrorType;
            return this;
        }

        public Builder selector(String selector) {
            $.selector = selector;
            return this;
        }

        public CustomErrorRuleResponse build() {
            $.isErrorType = Objects.requireNonNull($.isErrorType, "expected parameter 'isErrorType' to be non-null");
            $.selector = Objects.requireNonNull($.selector, "expected parameter 'selector' to be non-null");
            return $;
        }
    }

}
