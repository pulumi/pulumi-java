// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1beta4.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.sqladmin.v1beta4.enums.BackupRetentionSettingsRetentionUnit;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * We currently only support backup retention by specifying the number of backups we will retain.
 * 
 */
public final class BackupRetentionSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupRetentionSettingsArgs Empty = new BackupRetentionSettingsArgs();

    /**
     * Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
     * 
     */
    @Import(name="retainedBackups")
    private @Nullable Output<Integer> retainedBackups;

    /**
     * @return Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
     * 
     */
    public Optional<Output<Integer>> retainedBackups() {
        return Optional.ofNullable(this.retainedBackups);
    }

    /**
     * The unit that &#39;retained_backups&#39; represents.
     * 
     */
    @Import(name="retentionUnit")
    private @Nullable Output<BackupRetentionSettingsRetentionUnit> retentionUnit;

    /**
     * @return The unit that &#39;retained_backups&#39; represents.
     * 
     */
    public Optional<Output<BackupRetentionSettingsRetentionUnit>> retentionUnit() {
        return Optional.ofNullable(this.retentionUnit);
    }

    private BackupRetentionSettingsArgs() {}

    private BackupRetentionSettingsArgs(BackupRetentionSettingsArgs $) {
        this.retainedBackups = $.retainedBackups;
        this.retentionUnit = $.retentionUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupRetentionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupRetentionSettingsArgs $;

        public Builder() {
            $ = new BackupRetentionSettingsArgs();
        }

        public Builder(BackupRetentionSettingsArgs defaults) {
            $ = new BackupRetentionSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param retainedBackups Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
         * 
         * @return builder
         * 
         */
        public Builder retainedBackups(@Nullable Output<Integer> retainedBackups) {
            $.retainedBackups = retainedBackups;
            return this;
        }

        /**
         * @param retainedBackups Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is &#39;COUNT&#39;, we will retain this many backups.
         * 
         * @return builder
         * 
         */
        public Builder retainedBackups(Integer retainedBackups) {
            return retainedBackups(Output.of(retainedBackups));
        }

        /**
         * @param retentionUnit The unit that &#39;retained_backups&#39; represents.
         * 
         * @return builder
         * 
         */
        public Builder retentionUnit(@Nullable Output<BackupRetentionSettingsRetentionUnit> retentionUnit) {
            $.retentionUnit = retentionUnit;
            return this;
        }

        /**
         * @param retentionUnit The unit that &#39;retained_backups&#39; represents.
         * 
         * @return builder
         * 
         */
        public Builder retentionUnit(BackupRetentionSettingsRetentionUnit retentionUnit) {
            return retentionUnit(Output.of(retentionUnit));
        }

        public BackupRetentionSettingsArgs build() {
            return $;
        }
    }

}
