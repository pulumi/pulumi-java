// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 &lt;= i &lt; N-1): boundsi Lower bound (1 &lt;= i &lt; N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
 * 
 */
public final class ExplicitArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExplicitArgs Empty = new ExplicitArgs();

    /**
     * The values must be monotonically increasing.
     * 
     */
    @Import(name="bounds")
    private @Nullable Output<List<Double>> bounds;

    /**
     * @return The values must be monotonically increasing.
     * 
     */
    public Optional<Output<List<Double>>> bounds() {
        return Optional.ofNullable(this.bounds);
    }

    private ExplicitArgs() {}

    private ExplicitArgs(ExplicitArgs $) {
        this.bounds = $.bounds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExplicitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExplicitArgs $;

        public Builder() {
            $ = new ExplicitArgs();
        }

        public Builder(ExplicitArgs defaults) {
            $ = new ExplicitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bounds The values must be monotonically increasing.
         * 
         * @return builder
         * 
         */
        public Builder bounds(@Nullable Output<List<Double>> bounds) {
            $.bounds = bounds;
            return this;
        }

        /**
         * @param bounds The values must be monotonically increasing.
         * 
         * @return builder
         * 
         */
        public Builder bounds(List<Double> bounds) {
            return bounds(Output.of(bounds));
        }

        /**
         * @param bounds The values must be monotonically increasing.
         * 
         * @return builder
         * 
         */
        public Builder bounds(Double... bounds) {
            return bounds(List.of(bounds));
        }

        public ExplicitArgs build() {
            return $;
        }
    }

}
