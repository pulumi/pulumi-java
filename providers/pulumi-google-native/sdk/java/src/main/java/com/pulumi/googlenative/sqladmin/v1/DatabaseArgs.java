// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.sqladmin.v1.inputs.SqlServerDatabaseDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * The Cloud SQL charset value.
     * 
     */
    @Import(name="charset")
    private @Nullable Output<String> charset;

    /**
     * @return The Cloud SQL charset value.
     * 
     */
    public Optional<Output<String>> charset() {
        return Optional.ofNullable(this.charset);
    }

    /**
     * The Cloud SQL collation value.
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    /**
     * @return The Cloud SQL collation value.
     * 
     */
    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * This field is deprecated and will be removed from a future version of the API.
     * 
     * @deprecated
     * This field is deprecated and will be removed from a future version of the API.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return This field is deprecated and will be removed from a future version of the API.
     * 
     * @deprecated
     * This field is deprecated and will be removed from a future version of the API.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The name of the Cloud SQL instance. This does not include the project ID.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The name of the Cloud SQL instance. This does not include the project ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * This is always `sql#database`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return This is always `sql#database`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The URI of this resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of this resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    @Import(name="sqlserverDatabaseDetails")
    private @Nullable Output<SqlServerDatabaseDetailsArgs> sqlserverDatabaseDetails;

    public Optional<Output<SqlServerDatabaseDetailsArgs>> sqlserverDatabaseDetails() {
        return Optional.ofNullable(this.sqlserverDatabaseDetails);
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.charset = $.charset;
        this.collation = $.collation;
        this.etag = $.etag;
        this.instance = $.instance;
        this.kind = $.kind;
        this.name = $.name;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.sqlserverDatabaseDetails = $.sqlserverDatabaseDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param charset The Cloud SQL charset value.
         * 
         * @return builder
         * 
         */
        public Builder charset(@Nullable Output<String> charset) {
            $.charset = charset;
            return this;
        }

        /**
         * @param charset The Cloud SQL charset value.
         * 
         * @return builder
         * 
         */
        public Builder charset(String charset) {
            return charset(Output.of(charset));
        }

        /**
         * @param collation The Cloud SQL collation value.
         * 
         * @return builder
         * 
         */
        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        /**
         * @param collation The Cloud SQL collation value.
         * 
         * @return builder
         * 
         */
        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        /**
         * @param etag This field is deprecated and will be removed from a future version of the API.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed from a future version of the API.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag This field is deprecated and will be removed from a future version of the API.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed from a future version of the API.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param instance The name of the Cloud SQL instance. This does not include the project ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The name of the Cloud SQL instance. This does not include the project ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param kind This is always `sql#database`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind This is always `sql#database`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param selfLink The URI of this resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of this resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder sqlserverDatabaseDetails(@Nullable Output<SqlServerDatabaseDetailsArgs> sqlserverDatabaseDetails) {
            $.sqlserverDatabaseDetails = sqlserverDatabaseDetails;
            return this;
        }

        public Builder sqlserverDatabaseDetails(SqlServerDatabaseDetailsArgs sqlserverDatabaseDetails) {
            return sqlserverDatabaseDetails(Output.of(sqlserverDatabaseDetails));
        }

        public DatabaseArgs build() {
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            return $;
        }
    }

}
