// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


/**
 * These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
 * 
 */
public final class UpgradeSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final UpgradeSettingsResponse Empty = new UpgradeSettingsResponse();

    /**
     * The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
     * 
     */
    @Import(name="maxSurge", required=true)
    private Integer maxSurge;

    public Integer maxSurge() {
        return this.maxSurge;
    }

    /**
     * The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
     * 
     */
    @Import(name="maxUnavailable", required=true)
    private Integer maxUnavailable;

    public Integer maxUnavailable() {
        return this.maxUnavailable;
    }

    private UpgradeSettingsResponse() {}

    private UpgradeSettingsResponse(UpgradeSettingsResponse $) {
        this.maxSurge = $.maxSurge;
        this.maxUnavailable = $.maxUnavailable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpgradeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpgradeSettingsResponse $;

        public Builder() {
            $ = new UpgradeSettingsResponse();
        }

        public Builder(UpgradeSettingsResponse defaults) {
            $ = new UpgradeSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder maxSurge(Integer maxSurge) {
            $.maxSurge = maxSurge;
            return this;
        }

        public Builder maxUnavailable(Integer maxUnavailable) {
            $.maxUnavailable = maxUnavailable;
            return this;
        }

        public UpgradeSettingsResponse build() {
            $.maxSurge = Objects.requireNonNull($.maxSurge, "expected parameter 'maxSurge' to be non-null");
            $.maxUnavailable = Objects.requireNonNull($.maxUnavailable, "expected parameter 'maxUnavailable' to be non-null");
            return $;
        }
    }

}
