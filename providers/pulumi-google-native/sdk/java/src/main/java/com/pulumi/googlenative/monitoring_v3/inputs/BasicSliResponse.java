// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v3.inputs.AvailabilityCriteriaResponse;
import com.pulumi.googlenative.monitoring_v3.inputs.LatencyCriteriaResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
 * 
 */
public final class BasicSliResponse extends com.pulumi.resources.InvokeArgs {

    public static final BasicSliResponse Empty = new BasicSliResponse();

    /**
     * Good service is defined to be the count of requests made to this service that return successfully.
     * 
     */
    @Import(name="availability", required=true)
    private AvailabilityCriteriaResponse availability;

    /**
     * @return Good service is defined to be the count of requests made to this service that return successfully.
     * 
     */
    public AvailabilityCriteriaResponse availability() {
        return this.availability;
    }

    /**
     * Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
     * 
     */
    @Import(name="latency", required=true)
    private LatencyCriteriaResponse latency;

    /**
     * @return Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
     * 
     */
    public LatencyCriteriaResponse latency() {
        return this.latency;
    }

    /**
     * OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
     * 
     */
    @Import(name="location", required=true)
    private List<String> location;

    /**
     * @return OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
     * 
     */
    public List<String> location() {
        return this.location;
    }

    /**
     * OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
     * 
     */
    @Import(name="method", required=true)
    private List<String> method;

    /**
     * @return OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
     * 
     */
    public List<String> method() {
        return this.method;
    }

    /**
     * OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
     * 
     */
    @Import(name="version", required=true)
    private List<String> version;

    /**
     * @return OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
     * 
     */
    public List<String> version() {
        return this.version;
    }

    private BasicSliResponse() {}

    private BasicSliResponse(BasicSliResponse $) {
        this.availability = $.availability;
        this.latency = $.latency;
        this.location = $.location;
        this.method = $.method;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicSliResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicSliResponse $;

        public Builder() {
            $ = new BasicSliResponse();
        }

        public Builder(BasicSliResponse defaults) {
            $ = new BasicSliResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param availability Good service is defined to be the count of requests made to this service that return successfully.
         * 
         * @return builder
         * 
         */
        public Builder availability(AvailabilityCriteriaResponse availability) {
            $.availability = availability;
            return this;
        }

        /**
         * @param latency Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
         * 
         * @return builder
         * 
         */
        public Builder latency(LatencyCriteriaResponse latency) {
            $.latency = latency;
            return this;
        }

        /**
         * @param location OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder location(List<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder location(String... location) {
            return location(List.of(location));
        }

        /**
         * @param method OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder method(List<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder method(String... method) {
            return method(List.of(method));
        }

        /**
         * @param version OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder version(List<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder version(String... version) {
            return version(List.of(version));
        }

        public BasicSliResponse build() {
            $.availability = Objects.requireNonNull($.availability, "expected parameter 'availability' to be non-null");
            $.latency = Objects.requireNonNull($.latency, "expected parameter 'latency' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.method = Objects.requireNonNull($.method, "expected parameter 'method' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
