// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.osconfig_v1beta.enums.WeeklyScheduleDayOfWeek;
import java.util.Objects;


/**
 * Represents a weekly schedule.
 * 
 */
public final class WeeklyScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WeeklyScheduleArgs Empty = new WeeklyScheduleArgs();

    /**
     * Day of the week.
     * 
     */
    @Import(name="dayOfWeek", required=true)
      private final Output<WeeklyScheduleDayOfWeek> dayOfWeek;

    public Output<WeeklyScheduleDayOfWeek> dayOfWeek() {
        return this.dayOfWeek;
    }

    public WeeklyScheduleArgs(Output<WeeklyScheduleDayOfWeek> dayOfWeek) {
        this.dayOfWeek = Objects.requireNonNull(dayOfWeek, "expected parameter 'dayOfWeek' to be non-null");
    }

    private WeeklyScheduleArgs() {
        this.dayOfWeek = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WeeklyScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<WeeklyScheduleDayOfWeek> dayOfWeek;

        public Builder() {
    	      // Empty
        }

        public Builder(WeeklyScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dayOfWeek = defaults.dayOfWeek;
        }

        public Builder dayOfWeek(Output<WeeklyScheduleDayOfWeek> dayOfWeek) {
            this.dayOfWeek = Objects.requireNonNull(dayOfWeek);
            return this;
        }
        public Builder dayOfWeek(WeeklyScheduleDayOfWeek dayOfWeek) {
            this.dayOfWeek = Output.of(Objects.requireNonNull(dayOfWeek));
            return this;
        }        public WeeklyScheduleArgs build() {
            return new WeeklyScheduleArgs(dayOfWeek);
        }
    }
}
