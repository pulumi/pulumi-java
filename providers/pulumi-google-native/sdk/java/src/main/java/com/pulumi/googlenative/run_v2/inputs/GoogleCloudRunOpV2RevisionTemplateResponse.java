// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2ContainerResponse;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2RevisionScalingResponse;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2VolumeResponse;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2VpcAccessResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * RevisionTemplate describes the data a revision should have when created from a template.
 * 
 */
public final class GoogleCloudRunOpV2RevisionTemplateResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudRunOpV2RevisionTemplateResponse Empty = new GoogleCloudRunOpV2RevisionTemplateResponse();

    /**
     * KRM-style annotations for the resource.
     * 
     */
    @Import(name="annotations", required=true)
    private Map<String,String> annotations;

    public Map<String,String> annotations() {
        return this.annotations;
    }

    /**
     * Enables Confidential Cloud Run in Revisions created using this template.
     * 
     */
    @Import(name="confidential", required=true)
    private Boolean confidential;

    public Boolean confidential() {
        return this.confidential;
    }

    /**
     * Sets the maximum number of requests that each serving instance can receive.
     * 
     */
    @Import(name="containerConcurrency", required=true)
    private Integer containerConcurrency;

    public Integer containerConcurrency() {
        return this.containerConcurrency;
    }

    /**
     * Holds the single container that defines the unit of execution for this Revision.
     * 
     */
    @Import(name="containers", required=true)
    private List<GoogleCloudRunOpV2ContainerResponse> containers;

    public List<GoogleCloudRunOpV2ContainerResponse> containers() {
        return this.containers;
    }

    /**
     * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     * 
     */
    @Import(name="encryptionKey", required=true)
    private String encryptionKey;

    public String encryptionKey() {
        return this.encryptionKey;
    }

    /**
     * The sandbox environment to host this Revision.
     * 
     */
    @Import(name="executionEnvironment", required=true)
    private String executionEnvironment;

    public String executionEnvironment() {
        return this.executionEnvironment;
    }

    /**
     * KRM-style labels for the resource.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
     * 
     */
    @Import(name="revision", required=true)
    private String revision;

    public String revision() {
        return this.revision;
    }

    /**
     * Scaling settings for this Revision.
     * 
     */
    @Import(name="scaling", required=true)
    private GoogleCloudRunOpV2RevisionScalingResponse scaling;

    public GoogleCloudRunOpV2RevisionScalingResponse scaling() {
        return this.scaling;
    }

    /**
     * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * Max allowed time for an instance to respond to a request.
     * 
     */
    @Import(name="timeout", required=true)
    private String timeout;

    public String timeout() {
        return this.timeout;
    }

    /**
     * A list of Volumes to make available to containers.
     * 
     */
    @Import(name="volumes", required=true)
    private List<GoogleCloudRunOpV2VolumeResponse> volumes;

    public List<GoogleCloudRunOpV2VolumeResponse> volumes() {
        return this.volumes;
    }

    /**
     * VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     * 
     */
    @Import(name="vpcAccess", required=true)
    private GoogleCloudRunOpV2VpcAccessResponse vpcAccess;

    public GoogleCloudRunOpV2VpcAccessResponse vpcAccess() {
        return this.vpcAccess;
    }

    private GoogleCloudRunOpV2RevisionTemplateResponse() {}

    private GoogleCloudRunOpV2RevisionTemplateResponse(GoogleCloudRunOpV2RevisionTemplateResponse $) {
        this.annotations = $.annotations;
        this.confidential = $.confidential;
        this.containerConcurrency = $.containerConcurrency;
        this.containers = $.containers;
        this.encryptionKey = $.encryptionKey;
        this.executionEnvironment = $.executionEnvironment;
        this.labels = $.labels;
        this.revision = $.revision;
        this.scaling = $.scaling;
        this.serviceAccount = $.serviceAccount;
        this.timeout = $.timeout;
        this.volumes = $.volumes;
        this.vpcAccess = $.vpcAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudRunOpV2RevisionTemplateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRunOpV2RevisionTemplateResponse $;

        public Builder() {
            $ = new GoogleCloudRunOpV2RevisionTemplateResponse();
        }

        public Builder(GoogleCloudRunOpV2RevisionTemplateResponse defaults) {
            $ = new GoogleCloudRunOpV2RevisionTemplateResponse(Objects.requireNonNull(defaults));
        }

        public Builder annotations(Map<String,String> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder confidential(Boolean confidential) {
            $.confidential = confidential;
            return this;
        }

        public Builder containerConcurrency(Integer containerConcurrency) {
            $.containerConcurrency = containerConcurrency;
            return this;
        }

        public Builder containers(List<GoogleCloudRunOpV2ContainerResponse> containers) {
            $.containers = containers;
            return this;
        }

        public Builder containers(GoogleCloudRunOpV2ContainerResponse... containers) {
            return containers(List.of(containers));
        }

        public Builder encryptionKey(String encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder executionEnvironment(String executionEnvironment) {
            $.executionEnvironment = executionEnvironment;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        public Builder revision(String revision) {
            $.revision = revision;
            return this;
        }

        public Builder scaling(GoogleCloudRunOpV2RevisionScalingResponse scaling) {
            $.scaling = scaling;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder timeout(String timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder volumes(List<GoogleCloudRunOpV2VolumeResponse> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(GoogleCloudRunOpV2VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }

        public Builder vpcAccess(GoogleCloudRunOpV2VpcAccessResponse vpcAccess) {
            $.vpcAccess = vpcAccess;
            return this;
        }

        public GoogleCloudRunOpV2RevisionTemplateResponse build() {
            $.annotations = Objects.requireNonNull($.annotations, "expected parameter 'annotations' to be non-null");
            $.confidential = Objects.requireNonNull($.confidential, "expected parameter 'confidential' to be non-null");
            $.containerConcurrency = Objects.requireNonNull($.containerConcurrency, "expected parameter 'containerConcurrency' to be non-null");
            $.containers = Objects.requireNonNull($.containers, "expected parameter 'containers' to be non-null");
            $.encryptionKey = Objects.requireNonNull($.encryptionKey, "expected parameter 'encryptionKey' to be non-null");
            $.executionEnvironment = Objects.requireNonNull($.executionEnvironment, "expected parameter 'executionEnvironment' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.revision = Objects.requireNonNull($.revision, "expected parameter 'revision' to be non-null");
            $.scaling = Objects.requireNonNull($.scaling, "expected parameter 'scaling' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.volumes = Objects.requireNonNull($.volumes, "expected parameter 'volumes' to be non-null");
            $.vpcAccess = Objects.requireNonNull($.vpcAccess, "expected parameter 'vpcAccess' to be non-null");
            return $;
        }
    }

}
