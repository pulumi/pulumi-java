// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2ContainerPortResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2EnvVarResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2ResourceRequirementsResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2VolumeMountResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GoogleCloudRunV2ContainerResponse {
    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    private final List<String> args;
    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    private final List<String> command;
    /**
     * @return List of environment variables to set in the container.
     * 
     */
    private final List<GoogleCloudRunV2EnvVarResponse> env;
    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    private final String image;
    /**
     * @return Name of the container specified as a DNS_LABEL.
     * 
     */
    private final String name;
    /**
     * @return List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     * 
     */
    private final List<GoogleCloudRunV2ContainerPortResponse> ports;
    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * 
     */
    private final GoogleCloudRunV2ResourceRequirementsResponse resources;
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * 
     */
    private final List<GoogleCloudRunV2VolumeMountResponse> volumeMounts;

    @CustomType.Constructor
    private GoogleCloudRunV2ContainerResponse(
        @CustomType.Parameter("args") List<String> args,
        @CustomType.Parameter("command") List<String> command,
        @CustomType.Parameter("env") List<GoogleCloudRunV2EnvVarResponse> env,
        @CustomType.Parameter("image") String image,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("ports") List<GoogleCloudRunV2ContainerPortResponse> ports,
        @CustomType.Parameter("resources") GoogleCloudRunV2ResourceRequirementsResponse resources,
        @CustomType.Parameter("volumeMounts") List<GoogleCloudRunV2VolumeMountResponse> volumeMounts) {
        this.args = args;
        this.command = command;
        this.env = env;
        this.image = image;
        this.name = name;
        this.ports = ports;
        this.resources = resources;
        this.volumeMounts = volumeMounts;
    }

    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public List<String> args() {
        return this.args;
    }
    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public List<String> command() {
        return this.command;
    }
    /**
     * @return List of environment variables to set in the container.
     * 
     */
    public List<GoogleCloudRunV2EnvVarResponse> env() {
        return this.env;
    }
    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return Name of the container specified as a DNS_LABEL.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     * 
     */
    public List<GoogleCloudRunV2ContainerPortResponse> ports() {
        return this.ports;
    }
    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * 
     */
    public GoogleCloudRunV2ResourceRequirementsResponse resources() {
        return this.resources;
    }
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * 
     */
    public List<GoogleCloudRunV2VolumeMountResponse> volumeMounts() {
        return this.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRunV2ContainerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> args;
        private List<String> command;
        private List<GoogleCloudRunV2EnvVarResponse> env;
        private String image;
        private String name;
        private List<GoogleCloudRunV2ContainerPortResponse> ports;
        private GoogleCloudRunV2ResourceRequirementsResponse resources;
        private List<GoogleCloudRunV2VolumeMountResponse> volumeMounts;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRunV2ContainerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.command = defaults.command;
    	      this.env = defaults.env;
    	      this.image = defaults.image;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.resources = defaults.resources;
    	      this.volumeMounts = defaults.volumeMounts;
        }

        public Builder args(List<String> args) {
            this.args = Objects.requireNonNull(args);
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        public Builder command(List<String> command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }
        public Builder command(String... command) {
            return command(List.of(command));
        }
        public Builder env(List<GoogleCloudRunV2EnvVarResponse> env) {
            this.env = Objects.requireNonNull(env);
            return this;
        }
        public Builder env(GoogleCloudRunV2EnvVarResponse... env) {
            return env(List.of(env));
        }
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder ports(List<GoogleCloudRunV2ContainerPortResponse> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public Builder ports(GoogleCloudRunV2ContainerPortResponse... ports) {
            return ports(List.of(ports));
        }
        public Builder resources(GoogleCloudRunV2ResourceRequirementsResponse resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder volumeMounts(List<GoogleCloudRunV2VolumeMountResponse> volumeMounts) {
            this.volumeMounts = Objects.requireNonNull(volumeMounts);
            return this;
        }
        public Builder volumeMounts(GoogleCloudRunV2VolumeMountResponse... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }        public GoogleCloudRunV2ContainerResponse build() {
            return new GoogleCloudRunV2ContainerResponse(args, command, env, image, name, ports, resources, volumeMounts);
        }
    }
}
