// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ModelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelArgs Empty = new ModelArgs();

    /**
     * Optional. The description specified for the model when it was created.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> etag() {
        return this.etag == null ? Codegen.empty() : this.etag;
    }

    /**
     * Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The name specified for the model when it was created. The model name must be unique within the project it is created in.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.
     * 
     */
    @Import(name="onlinePredictionConsoleLogging")
      private final @Nullable Output<Boolean> onlinePredictionConsoleLogging;

    public Output<Boolean> onlinePredictionConsoleLogging() {
        return this.onlinePredictionConsoleLogging == null ? Codegen.empty() : this.onlinePredictionConsoleLogging;
    }

    /**
     * Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.
     * 
     */
    @Import(name="onlinePredictionLogging")
      private final @Nullable Output<Boolean> onlinePredictionLogging;

    public Output<Boolean> onlinePredictionLogging() {
        return this.onlinePredictionLogging == null ? Codegen.empty() : this.onlinePredictionLogging;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.
     * 
     */
    @Import(name="regions")
      private final @Nullable Output<List<String>> regions;

    public Output<List<String>> regions() {
        return this.regions == null ? Codegen.empty() : this.regions;
    }

    public ModelArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> etag,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> name,
        @Nullable Output<Boolean> onlinePredictionConsoleLogging,
        @Nullable Output<Boolean> onlinePredictionLogging,
        @Nullable Output<String> project,
        @Nullable Output<List<String>> regions) {
        this.description = description;
        this.etag = etag;
        this.labels = labels;
        this.name = name;
        this.onlinePredictionConsoleLogging = onlinePredictionConsoleLogging;
        this.onlinePredictionLogging = onlinePredictionLogging;
        this.project = project;
        this.regions = regions;
    }

    private ModelArgs() {
        this.description = Codegen.empty();
        this.etag = Codegen.empty();
        this.labels = Codegen.empty();
        this.name = Codegen.empty();
        this.onlinePredictionConsoleLogging = Codegen.empty();
        this.onlinePredictionLogging = Codegen.empty();
        this.project = Codegen.empty();
        this.regions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> etag;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> name;
        private @Nullable Output<Boolean> onlinePredictionConsoleLogging;
        private @Nullable Output<Boolean> onlinePredictionLogging;
        private @Nullable Output<String> project;
        private @Nullable Output<List<String>> regions;

        public Builder() {
    	      // Empty
        }

        public Builder(ModelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.onlinePredictionConsoleLogging = defaults.onlinePredictionConsoleLogging;
    	      this.onlinePredictionLogging = defaults.onlinePredictionLogging;
    	      this.project = defaults.project;
    	      this.regions = defaults.regions;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Codegen.ofNullable(etag);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder onlinePredictionConsoleLogging(@Nullable Output<Boolean> onlinePredictionConsoleLogging) {
            this.onlinePredictionConsoleLogging = onlinePredictionConsoleLogging;
            return this;
        }
        public Builder onlinePredictionConsoleLogging(@Nullable Boolean onlinePredictionConsoleLogging) {
            this.onlinePredictionConsoleLogging = Codegen.ofNullable(onlinePredictionConsoleLogging);
            return this;
        }
        public Builder onlinePredictionLogging(@Nullable Output<Boolean> onlinePredictionLogging) {
            this.onlinePredictionLogging = onlinePredictionLogging;
            return this;
        }
        public Builder onlinePredictionLogging(@Nullable Boolean onlinePredictionLogging) {
            this.onlinePredictionLogging = Codegen.ofNullable(onlinePredictionLogging);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder regions(@Nullable Output<List<String>> regions) {
            this.regions = regions;
            return this;
        }
        public Builder regions(@Nullable List<String> regions) {
            this.regions = Codegen.ofNullable(regions);
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }        public ModelArgs build() {
            return new ModelArgs(description, etag, labels, name, onlinePredictionConsoleLogging, onlinePredictionLogging, project, regions);
        }
    }
}
