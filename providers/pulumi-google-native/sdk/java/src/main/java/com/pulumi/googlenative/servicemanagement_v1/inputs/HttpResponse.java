// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.HttpRuleResponse;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;


/**
 * Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
 * 
 */
public final class HttpResponse extends com.pulumi.resources.InvokeArgs {

    public static final HttpResponse Empty = new HttpResponse();

    /**
     * When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where &#34;%2F&#34; will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
     * 
     */
    @Import(name="fullyDecodeReservedExpansion", required=true)
    private Boolean fullyDecodeReservedExpansion;

    /**
     * @return When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where &#34;%2F&#34; will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
     * 
     */
    public Boolean fullyDecodeReservedExpansion() {
        return this.fullyDecodeReservedExpansion;
    }

    /**
     * A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    @Import(name="rules", required=true)
    private List<HttpRuleResponse> rules;

    /**
     * @return A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    public List<HttpRuleResponse> rules() {
        return this.rules;
    }

    private HttpResponse() {}

    private HttpResponse(HttpResponse $) {
        this.fullyDecodeReservedExpansion = $.fullyDecodeReservedExpansion;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpResponse $;

        public Builder() {
            $ = new HttpResponse();
        }

        public Builder(HttpResponse defaults) {
            $ = new HttpResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param fullyDecodeReservedExpansion When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where &#34;%2F&#34; will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
         * 
         * @return builder
         * 
         */
        public Builder fullyDecodeReservedExpansion(Boolean fullyDecodeReservedExpansion) {
            $.fullyDecodeReservedExpansion = fullyDecodeReservedExpansion;
            return this;
        }

        /**
         * @param rules A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<HttpRuleResponse> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
         * 
         * @return builder
         * 
         */
        public Builder rules(HttpRuleResponse... rules) {
            return rules(List.of(rules));
        }

        public HttpResponse build() {
            $.fullyDecodeReservedExpansion = Objects.requireNonNull($.fullyDecodeReservedExpansion, "expected parameter 'fullyDecodeReservedExpansion' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
