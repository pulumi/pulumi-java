// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The bucket&#39;s website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
 * 
 */
public final class BucketWebsiteArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketWebsiteArgs Empty = new BucketWebsiteArgs();

    /**
     * If the requested object path is missing, the service will ensure the path has a trailing &#39;/&#39;, append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.
     * 
     */
    @Import(name="mainPageSuffix")
    private @Nullable Output<String> mainPageSuffix;

    /**
     * @return If the requested object path is missing, the service will ensure the path has a trailing &#39;/&#39;, append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.
     * 
     */
    public Optional<Output<String>> mainPageSuffix() {
        return Optional.ofNullable(this.mainPageSuffix);
    }

    /**
     * If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result.
     * 
     */
    @Import(name="notFoundPage")
    private @Nullable Output<String> notFoundPage;

    /**
     * @return If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result.
     * 
     */
    public Optional<Output<String>> notFoundPage() {
        return Optional.ofNullable(this.notFoundPage);
    }

    private BucketWebsiteArgs() {}

    private BucketWebsiteArgs(BucketWebsiteArgs $) {
        this.mainPageSuffix = $.mainPageSuffix;
        this.notFoundPage = $.notFoundPage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketWebsiteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketWebsiteArgs $;

        public Builder() {
            $ = new BucketWebsiteArgs();
        }

        public Builder(BucketWebsiteArgs defaults) {
            $ = new BucketWebsiteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mainPageSuffix If the requested object path is missing, the service will ensure the path has a trailing &#39;/&#39;, append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.
         * 
         * @return builder
         * 
         */
        public Builder mainPageSuffix(@Nullable Output<String> mainPageSuffix) {
            $.mainPageSuffix = mainPageSuffix;
            return this;
        }

        /**
         * @param mainPageSuffix If the requested object path is missing, the service will ensure the path has a trailing &#39;/&#39;, append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.
         * 
         * @return builder
         * 
         */
        public Builder mainPageSuffix(String mainPageSuffix) {
            return mainPageSuffix(Output.of(mainPageSuffix));
        }

        /**
         * @param notFoundPage If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result.
         * 
         * @return builder
         * 
         */
        public Builder notFoundPage(@Nullable Output<String> notFoundPage) {
            $.notFoundPage = notFoundPage;
            return this;
        }

        /**
         * @param notFoundPage If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result.
         * 
         * @return builder
         * 
         */
        public Builder notFoundPage(String notFoundPage) {
            return notFoundPage(Output.of(notFoundPage));
        }

        public BucketWebsiteArgs build() {
            return $;
        }
    }

}
