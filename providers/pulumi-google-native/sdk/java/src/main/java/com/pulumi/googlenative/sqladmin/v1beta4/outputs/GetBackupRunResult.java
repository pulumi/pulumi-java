// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1beta4.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.sqladmin.v1beta4.outputs.DiskEncryptionConfigurationResponse;
import com.pulumi.googlenative.sqladmin.v1beta4.outputs.DiskEncryptionStatusResponse;
import com.pulumi.googlenative.sqladmin.v1beta4.outputs.OperationErrorResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackupRunResult {
    /**
     * @return Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
     * 
     */
    private final String backupKind;
    /**
     * @return The description of this run, only applicable to on-demand backups.
     * 
     */
    private final String description;
    /**
     * @return Encryption configuration specific to a backup.
     * 
     */
    private final DiskEncryptionConfigurationResponse diskEncryptionConfiguration;
    /**
     * @return Encryption status specific to a backup.
     * 
     */
    private final DiskEncryptionStatusResponse diskEncryptionStatus;
    /**
     * @return The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    private final String endTime;
    /**
     * @return The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    private final String enqueuedTime;
    /**
     * @return Information about why the backup operation failed. This is only present if the run has the FAILED status.
     * 
     */
    private final OperationErrorResponse error;
    /**
     * @return Name of the database instance.
     * 
     */
    private final String instance;
    /**
     * @return This is always `sql#backupRun`.
     * 
     */
    private final String kind;
    /**
     * @return Location of the backups.
     * 
     */
    private final String location;
    /**
     * @return The URI of this resource.
     * 
     */
    private final String selfLink;
    /**
     * @return The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    private final String startTime;
    /**
     * @return The status of this run.
     * 
     */
    private final String status;
    /**
     * @return The type of this run; can be either &#34;AUTOMATED&#34; or &#34;ON_DEMAND&#34;. This field defaults to &#34;ON_DEMAND&#34; and is ignored, when specified for insert requests.
     * 
     */
    private final String type;
    /**
     * @return The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    private final String windowStartTime;

    @CustomType.Constructor
    private GetBackupRunResult(
        @CustomType.Parameter("backupKind") String backupKind,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("diskEncryptionConfiguration") DiskEncryptionConfigurationResponse diskEncryptionConfiguration,
        @CustomType.Parameter("diskEncryptionStatus") DiskEncryptionStatusResponse diskEncryptionStatus,
        @CustomType.Parameter("endTime") String endTime,
        @CustomType.Parameter("enqueuedTime") String enqueuedTime,
        @CustomType.Parameter("error") OperationErrorResponse error,
        @CustomType.Parameter("instance") String instance,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("selfLink") String selfLink,
        @CustomType.Parameter("startTime") String startTime,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("windowStartTime") String windowStartTime) {
        this.backupKind = backupKind;
        this.description = description;
        this.diskEncryptionConfiguration = diskEncryptionConfiguration;
        this.diskEncryptionStatus = diskEncryptionStatus;
        this.endTime = endTime;
        this.enqueuedTime = enqueuedTime;
        this.error = error;
        this.instance = instance;
        this.kind = kind;
        this.location = location;
        this.selfLink = selfLink;
        this.startTime = startTime;
        this.status = status;
        this.type = type;
        this.windowStartTime = windowStartTime;
    }

    /**
     * @return Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
     * 
     */
    public String backupKind() {
        return this.backupKind;
    }
    /**
     * @return The description of this run, only applicable to on-demand backups.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Encryption configuration specific to a backup.
     * 
     */
    public DiskEncryptionConfigurationResponse diskEncryptionConfiguration() {
        return this.diskEncryptionConfiguration;
    }
    /**
     * @return Encryption status specific to a backup.
     * 
     */
    public DiskEncryptionStatusResponse diskEncryptionStatus() {
        return this.diskEncryptionStatus;
    }
    /**
     * @return The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    public String enqueuedTime() {
        return this.enqueuedTime;
    }
    /**
     * @return Information about why the backup operation failed. This is only present if the run has the FAILED status.
     * 
     */
    public OperationErrorResponse error() {
        return this.error;
    }
    /**
     * @return Name of the database instance.
     * 
     */
    public String instance() {
        return this.instance;
    }
    /**
     * @return This is always `sql#backupRun`.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Location of the backups.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The URI of this resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The status of this run.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of this run; can be either &#34;AUTOMATED&#34; or &#34;ON_DEMAND&#34;. This field defaults to &#34;ON_DEMAND&#34; and is ignored, when specified for insert requests.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    public String windowStartTime() {
        return this.windowStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupRunResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backupKind;
        private String description;
        private DiskEncryptionConfigurationResponse diskEncryptionConfiguration;
        private DiskEncryptionStatusResponse diskEncryptionStatus;
        private String endTime;
        private String enqueuedTime;
        private OperationErrorResponse error;
        private String instance;
        private String kind;
        private String location;
        private String selfLink;
        private String startTime;
        private String status;
        private String type;
        private String windowStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupRunResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupKind = defaults.backupKind;
    	      this.description = defaults.description;
    	      this.diskEncryptionConfiguration = defaults.diskEncryptionConfiguration;
    	      this.diskEncryptionStatus = defaults.diskEncryptionStatus;
    	      this.endTime = defaults.endTime;
    	      this.enqueuedTime = defaults.enqueuedTime;
    	      this.error = defaults.error;
    	      this.instance = defaults.instance;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.selfLink = defaults.selfLink;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.windowStartTime = defaults.windowStartTime;
        }

        public Builder backupKind(String backupKind) {
            this.backupKind = Objects.requireNonNull(backupKind);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder diskEncryptionConfiguration(DiskEncryptionConfigurationResponse diskEncryptionConfiguration) {
            this.diskEncryptionConfiguration = Objects.requireNonNull(diskEncryptionConfiguration);
            return this;
        }
        public Builder diskEncryptionStatus(DiskEncryptionStatusResponse diskEncryptionStatus) {
            this.diskEncryptionStatus = Objects.requireNonNull(diskEncryptionStatus);
            return this;
        }
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder enqueuedTime(String enqueuedTime) {
            this.enqueuedTime = Objects.requireNonNull(enqueuedTime);
            return this;
        }
        public Builder error(OperationErrorResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        public Builder instance(String instance) {
            this.instance = Objects.requireNonNull(instance);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder windowStartTime(String windowStartTime) {
            this.windowStartTime = Objects.requireNonNull(windowStartTime);
            return this;
        }        public GetBackupRunResult build() {
            return new GetBackupRunResult(backupKind, description, diskEncryptionConfiguration, diskEncryptionStatus, endTime, enqueuedTime, error, instance, kind, location, selfLink, startTime, status, type, windowStartTime);
        }
    }
}
