// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer.v1.inputs.AwsS3DataArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.AzureBlobStorageDataArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.GcsDataArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.HttpDataArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.ObjectConditionsArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.PosixFilesystemArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.TransferManifestArgs;
import com.pulumi.googlenative.storagetransfer.v1.inputs.TransferOptionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for running a transfer.
 * 
 */
public final class TransferSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferSpecArgs Empty = new TransferSpecArgs();

    /**
     * An AWS S3 data source.
     * 
     */
    @Import(name="awsS3DataSource")
    private @Nullable Output<AwsS3DataArgs> awsS3DataSource;

    /**
     * @return An AWS S3 data source.
     * 
     */
    public Optional<Output<AwsS3DataArgs>> awsS3DataSource() {
        return Optional.ofNullable(this.awsS3DataSource);
    }

    /**
     * An Azure Blob Storage data source.
     * 
     */
    @Import(name="azureBlobStorageDataSource")
    private @Nullable Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource;

    /**
     * @return An Azure Blob Storage data source.
     * 
     */
    public Optional<Output<AzureBlobStorageDataArgs>> azureBlobStorageDataSource() {
        return Optional.ofNullable(this.azureBlobStorageDataSource);
    }

    /**
     * A Cloud Storage data sink.
     * 
     */
    @Import(name="gcsDataSink")
    private @Nullable Output<GcsDataArgs> gcsDataSink;

    /**
     * @return A Cloud Storage data sink.
     * 
     */
    public Optional<Output<GcsDataArgs>> gcsDataSink() {
        return Optional.ofNullable(this.gcsDataSink);
    }

    /**
     * A Cloud Storage data source.
     * 
     */
    @Import(name="gcsDataSource")
    private @Nullable Output<GcsDataArgs> gcsDataSource;

    /**
     * @return A Cloud Storage data source.
     * 
     */
    public Optional<Output<GcsDataArgs>> gcsDataSource() {
        return Optional.ofNullable(this.gcsDataSource);
    }

    /**
     * Cloud Storage intermediate data location.
     * 
     */
    @Import(name="gcsIntermediateDataLocation")
    private @Nullable Output<GcsDataArgs> gcsIntermediateDataLocation;

    /**
     * @return Cloud Storage intermediate data location.
     * 
     */
    public Optional<Output<GcsDataArgs>> gcsIntermediateDataLocation() {
        return Optional.ofNullable(this.gcsIntermediateDataLocation);
    }

    /**
     * An HTTP URL data source.
     * 
     */
    @Import(name="httpDataSource")
    private @Nullable Output<HttpDataArgs> httpDataSource;

    /**
     * @return An HTTP URL data source.
     * 
     */
    public Optional<Output<HttpDataArgs>> httpDataSource() {
        return Optional.ofNullable(this.httpDataSource);
    }

    /**
     * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
     * 
     */
    @Import(name="objectConditions")
    private @Nullable Output<ObjectConditionsArgs> objectConditions;

    /**
     * @return Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
     * 
     */
    public Optional<Output<ObjectConditionsArgs>> objectConditions() {
        return Optional.ofNullable(this.objectConditions);
    }

    /**
     * A POSIX Filesystem data sink.
     * 
     */
    @Import(name="posixDataSink")
    private @Nullable Output<PosixFilesystemArgs> posixDataSink;

    /**
     * @return A POSIX Filesystem data sink.
     * 
     */
    public Optional<Output<PosixFilesystemArgs>> posixDataSink() {
        return Optional.ofNullable(this.posixDataSink);
    }

    /**
     * A POSIX Filesystem data source.
     * 
     */
    @Import(name="posixDataSource")
    private @Nullable Output<PosixFilesystemArgs> posixDataSource;

    /**
     * @return A POSIX Filesystem data source.
     * 
     */
    public Optional<Output<PosixFilesystemArgs>> posixDataSource() {
        return Optional.ofNullable(this.posixDataSource);
    }

    /**
     * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    @Import(name="sinkAgentPoolName")
    private @Nullable Output<String> sinkAgentPoolName;

    /**
     * @return Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    public Optional<Output<String>> sinkAgentPoolName() {
        return Optional.ofNullable(this.sinkAgentPoolName);
    }

    /**
     * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    @Import(name="sourceAgentPoolName")
    private @Nullable Output<String> sourceAgentPoolName;

    /**
     * @return Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    public Optional<Output<String>> sourceAgentPoolName() {
        return Optional.ofNullable(this.sourceAgentPoolName);
    }

    /**
     * A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    @Import(name="transferManifest")
    private @Nullable Output<TransferManifestArgs> transferManifest;

    /**
     * @return A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    public Optional<Output<TransferManifestArgs>> transferManifest() {
        return Optional.ofNullable(this.transferManifest);
    }

    /**
     * If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    @Import(name="transferOptions")
    private @Nullable Output<TransferOptionsArgs> transferOptions;

    /**
     * @return If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    public Optional<Output<TransferOptionsArgs>> transferOptions() {
        return Optional.ofNullable(this.transferOptions);
    }

    private TransferSpecArgs() {}

    private TransferSpecArgs(TransferSpecArgs $) {
        this.awsS3DataSource = $.awsS3DataSource;
        this.azureBlobStorageDataSource = $.azureBlobStorageDataSource;
        this.gcsDataSink = $.gcsDataSink;
        this.gcsDataSource = $.gcsDataSource;
        this.gcsIntermediateDataLocation = $.gcsIntermediateDataLocation;
        this.httpDataSource = $.httpDataSource;
        this.objectConditions = $.objectConditions;
        this.posixDataSink = $.posixDataSink;
        this.posixDataSource = $.posixDataSource;
        this.sinkAgentPoolName = $.sinkAgentPoolName;
        this.sourceAgentPoolName = $.sourceAgentPoolName;
        this.transferManifest = $.transferManifest;
        this.transferOptions = $.transferOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferSpecArgs $;

        public Builder() {
            $ = new TransferSpecArgs();
        }

        public Builder(TransferSpecArgs defaults) {
            $ = new TransferSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsS3DataSource An AWS S3 data source.
         * 
         * @return builder
         * 
         */
        public Builder awsS3DataSource(@Nullable Output<AwsS3DataArgs> awsS3DataSource) {
            $.awsS3DataSource = awsS3DataSource;
            return this;
        }

        /**
         * @param awsS3DataSource An AWS S3 data source.
         * 
         * @return builder
         * 
         */
        public Builder awsS3DataSource(AwsS3DataArgs awsS3DataSource) {
            return awsS3DataSource(Output.of(awsS3DataSource));
        }

        /**
         * @param azureBlobStorageDataSource An Azure Blob Storage data source.
         * 
         * @return builder
         * 
         */
        public Builder azureBlobStorageDataSource(@Nullable Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource) {
            $.azureBlobStorageDataSource = azureBlobStorageDataSource;
            return this;
        }

        /**
         * @param azureBlobStorageDataSource An Azure Blob Storage data source.
         * 
         * @return builder
         * 
         */
        public Builder azureBlobStorageDataSource(AzureBlobStorageDataArgs azureBlobStorageDataSource) {
            return azureBlobStorageDataSource(Output.of(azureBlobStorageDataSource));
        }

        /**
         * @param gcsDataSink A Cloud Storage data sink.
         * 
         * @return builder
         * 
         */
        public Builder gcsDataSink(@Nullable Output<GcsDataArgs> gcsDataSink) {
            $.gcsDataSink = gcsDataSink;
            return this;
        }

        /**
         * @param gcsDataSink A Cloud Storage data sink.
         * 
         * @return builder
         * 
         */
        public Builder gcsDataSink(GcsDataArgs gcsDataSink) {
            return gcsDataSink(Output.of(gcsDataSink));
        }

        /**
         * @param gcsDataSource A Cloud Storage data source.
         * 
         * @return builder
         * 
         */
        public Builder gcsDataSource(@Nullable Output<GcsDataArgs> gcsDataSource) {
            $.gcsDataSource = gcsDataSource;
            return this;
        }

        /**
         * @param gcsDataSource A Cloud Storage data source.
         * 
         * @return builder
         * 
         */
        public Builder gcsDataSource(GcsDataArgs gcsDataSource) {
            return gcsDataSource(Output.of(gcsDataSource));
        }

        /**
         * @param gcsIntermediateDataLocation Cloud Storage intermediate data location.
         * 
         * @return builder
         * 
         */
        public Builder gcsIntermediateDataLocation(@Nullable Output<GcsDataArgs> gcsIntermediateDataLocation) {
            $.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
            return this;
        }

        /**
         * @param gcsIntermediateDataLocation Cloud Storage intermediate data location.
         * 
         * @return builder
         * 
         */
        public Builder gcsIntermediateDataLocation(GcsDataArgs gcsIntermediateDataLocation) {
            return gcsIntermediateDataLocation(Output.of(gcsIntermediateDataLocation));
        }

        /**
         * @param httpDataSource An HTTP URL data source.
         * 
         * @return builder
         * 
         */
        public Builder httpDataSource(@Nullable Output<HttpDataArgs> httpDataSource) {
            $.httpDataSource = httpDataSource;
            return this;
        }

        /**
         * @param httpDataSource An HTTP URL data source.
         * 
         * @return builder
         * 
         */
        public Builder httpDataSource(HttpDataArgs httpDataSource) {
            return httpDataSource(Output.of(httpDataSource));
        }

        /**
         * @param objectConditions Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
         * 
         * @return builder
         * 
         */
        public Builder objectConditions(@Nullable Output<ObjectConditionsArgs> objectConditions) {
            $.objectConditions = objectConditions;
            return this;
        }

        /**
         * @param objectConditions Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
         * 
         * @return builder
         * 
         */
        public Builder objectConditions(ObjectConditionsArgs objectConditions) {
            return objectConditions(Output.of(objectConditions));
        }

        /**
         * @param posixDataSink A POSIX Filesystem data sink.
         * 
         * @return builder
         * 
         */
        public Builder posixDataSink(@Nullable Output<PosixFilesystemArgs> posixDataSink) {
            $.posixDataSink = posixDataSink;
            return this;
        }

        /**
         * @param posixDataSink A POSIX Filesystem data sink.
         * 
         * @return builder
         * 
         */
        public Builder posixDataSink(PosixFilesystemArgs posixDataSink) {
            return posixDataSink(Output.of(posixDataSink));
        }

        /**
         * @param posixDataSource A POSIX Filesystem data source.
         * 
         * @return builder
         * 
         */
        public Builder posixDataSource(@Nullable Output<PosixFilesystemArgs> posixDataSource) {
            $.posixDataSource = posixDataSource;
            return this;
        }

        /**
         * @param posixDataSource A POSIX Filesystem data source.
         * 
         * @return builder
         * 
         */
        public Builder posixDataSource(PosixFilesystemArgs posixDataSource) {
            return posixDataSource(Output.of(posixDataSource));
        }

        /**
         * @param sinkAgentPoolName Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
         * 
         * @return builder
         * 
         */
        public Builder sinkAgentPoolName(@Nullable Output<String> sinkAgentPoolName) {
            $.sinkAgentPoolName = sinkAgentPoolName;
            return this;
        }

        /**
         * @param sinkAgentPoolName Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
         * 
         * @return builder
         * 
         */
        public Builder sinkAgentPoolName(String sinkAgentPoolName) {
            return sinkAgentPoolName(Output.of(sinkAgentPoolName));
        }

        /**
         * @param sourceAgentPoolName Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
         * 
         * @return builder
         * 
         */
        public Builder sourceAgentPoolName(@Nullable Output<String> sourceAgentPoolName) {
            $.sourceAgentPoolName = sourceAgentPoolName;
            return this;
        }

        /**
         * @param sourceAgentPoolName Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
         * 
         * @return builder
         * 
         */
        public Builder sourceAgentPoolName(String sourceAgentPoolName) {
            return sourceAgentPoolName(Output.of(sourceAgentPoolName));
        }

        /**
         * @param transferManifest A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
         * 
         * @return builder
         * 
         */
        public Builder transferManifest(@Nullable Output<TransferManifestArgs> transferManifest) {
            $.transferManifest = transferManifest;
            return this;
        }

        /**
         * @param transferManifest A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
         * 
         * @return builder
         * 
         */
        public Builder transferManifest(TransferManifestArgs transferManifest) {
            return transferManifest(Output.of(transferManifest));
        }

        /**
         * @param transferOptions If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
         * 
         * @return builder
         * 
         */
        public Builder transferOptions(@Nullable Output<TransferOptionsArgs> transferOptions) {
            $.transferOptions = transferOptions;
            return this;
        }

        /**
         * @param transferOptions If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
         * 
         * @return builder
         * 
         */
        public Builder transferOptions(TransferOptionsArgs transferOptions) {
            return transferOptions(Output.of(transferOptions));
        }

        public TransferSpecArgs build() {
            return $;
        }
    }

}
