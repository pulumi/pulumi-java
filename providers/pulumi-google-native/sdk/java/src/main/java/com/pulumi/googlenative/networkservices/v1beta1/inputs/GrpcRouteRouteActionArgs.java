// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.GrpcRouteDestinationArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.GrpcRouteFaultInjectionPolicyArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.GrpcRouteRetryPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies how to route matched traffic.
 * 
 */
public final class GrpcRouteRouteActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrpcRouteRouteActionArgs Empty = new GrpcRouteRouteActionArgs();

    /**
     * Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<GrpcRouteDestinationArgs>> destinations;

    /**
     * @return Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
     * 
     */
    public Optional<Output<List<GrpcRouteDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     * 
     */
    @Import(name="faultInjectionPolicy")
    private @Nullable Output<GrpcRouteFaultInjectionPolicyArgs> faultInjectionPolicy;

    /**
     * @return Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     * 
     */
    public Optional<Output<GrpcRouteFaultInjectionPolicyArgs>> faultInjectionPolicy() {
        return Optional.ofNullable(this.faultInjectionPolicy);
    }

    /**
     * Optional. Specifies the retry policy associated with this route.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<GrpcRouteRetryPolicyArgs> retryPolicy;

    /**
     * @return Optional. Specifies the retry policy associated with this route.
     * 
     */
    public Optional<Output<GrpcRouteRetryPolicyArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private GrpcRouteRouteActionArgs() {}

    private GrpcRouteRouteActionArgs(GrpcRouteRouteActionArgs $) {
        this.destinations = $.destinations;
        this.faultInjectionPolicy = $.faultInjectionPolicy;
        this.retryPolicy = $.retryPolicy;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrpcRouteRouteActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrpcRouteRouteActionArgs $;

        public Builder() {
            $ = new GrpcRouteRouteActionArgs();
        }

        public Builder(GrpcRouteRouteActionArgs defaults) {
            $ = new GrpcRouteRouteActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinations Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<GrpcRouteDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<GrpcRouteDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(GrpcRouteDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param faultInjectionPolicy Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
         * 
         * @return builder
         * 
         */
        public Builder faultInjectionPolicy(@Nullable Output<GrpcRouteFaultInjectionPolicyArgs> faultInjectionPolicy) {
            $.faultInjectionPolicy = faultInjectionPolicy;
            return this;
        }

        /**
         * @param faultInjectionPolicy Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
         * 
         * @return builder
         * 
         */
        public Builder faultInjectionPolicy(GrpcRouteFaultInjectionPolicyArgs faultInjectionPolicy) {
            return faultInjectionPolicy(Output.of(faultInjectionPolicy));
        }

        /**
         * @param retryPolicy Optional. Specifies the retry policy associated with this route.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(@Nullable Output<GrpcRouteRetryPolicyArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        /**
         * @param retryPolicy Optional. Specifies the retry policy associated with this route.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(GrpcRouteRetryPolicyArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        /**
         * @param timeout Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public GrpcRouteRouteActionArgs build() {
            return $;
        }
    }

}
