// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner.v1alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.websecurityscanner.v1alpha.enums.ScanRunExecutionState;
import com.pulumi.googlenative.websecurityscanner.v1alpha.enums.ScanRunResultState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A ScanRun is a output-only resource representing an actual run of the scan.
 * 
 */
public final class ScanRunArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScanRunArgs Empty = new ScanRunArgs();

    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The execution state of the ScanRun.
     * 
     */
    @Import(name="executionState")
    private @Nullable Output<ScanRunExecutionState> executionState;

    /**
     * @return The execution state of the ScanRun.
     * 
     */
    public Optional<Output<ScanRunExecutionState>> executionState() {
        return Optional.ofNullable(this.executionState);
    }

    /**
     * Whether the scan run has found any vulnerabilities.
     * 
     */
    @Import(name="hasVulnerabilities")
    private @Nullable Output<Boolean> hasVulnerabilities;

    /**
     * @return Whether the scan run has found any vulnerabilities.
     * 
     */
    public Optional<Output<Boolean>> hasVulnerabilities() {
        return Optional.ofNullable(this.hasVulnerabilities);
    }

    /**
     * The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    @Import(name="progressPercent")
    private @Nullable Output<Integer> progressPercent;

    /**
     * @return The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    public Optional<Output<Integer>> progressPercent() {
        return Optional.ofNullable(this.progressPercent);
    }

    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
     * 
     */
    @Import(name="resultState")
    private @Nullable Output<ScanRunResultState> resultState;

    /**
     * @return The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
     * 
     */
    public Optional<Output<ScanRunResultState>> resultState() {
        return Optional.ofNullable(this.resultState);
    }

    /**
     * The time at which the ScanRun started.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The time at which the ScanRun started.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    @Import(name="urlsCrawledCount")
    private @Nullable Output<String> urlsCrawledCount;

    /**
     * @return The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    public Optional<Output<String>> urlsCrawledCount() {
        return Optional.ofNullable(this.urlsCrawledCount);
    }

    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    @Import(name="urlsTestedCount")
    private @Nullable Output<String> urlsTestedCount;

    /**
     * @return The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    public Optional<Output<String>> urlsTestedCount() {
        return Optional.ofNullable(this.urlsTestedCount);
    }

    private ScanRunArgs() {}

    private ScanRunArgs(ScanRunArgs $) {
        this.endTime = $.endTime;
        this.executionState = $.executionState;
        this.hasVulnerabilities = $.hasVulnerabilities;
        this.name = $.name;
        this.progressPercent = $.progressPercent;
        this.resultState = $.resultState;
        this.startTime = $.startTime;
        this.urlsCrawledCount = $.urlsCrawledCount;
        this.urlsTestedCount = $.urlsTestedCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScanRunArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScanRunArgs $;

        public Builder() {
            $ = new ScanRunArgs();
        }

        public Builder(ScanRunArgs defaults) {
            $ = new ScanRunArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param executionState The execution state of the ScanRun.
         * 
         * @return builder
         * 
         */
        public Builder executionState(@Nullable Output<ScanRunExecutionState> executionState) {
            $.executionState = executionState;
            return this;
        }

        /**
         * @param executionState The execution state of the ScanRun.
         * 
         * @return builder
         * 
         */
        public Builder executionState(ScanRunExecutionState executionState) {
            return executionState(Output.of(executionState));
        }

        /**
         * @param hasVulnerabilities Whether the scan run has found any vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder hasVulnerabilities(@Nullable Output<Boolean> hasVulnerabilities) {
            $.hasVulnerabilities = hasVulnerabilities;
            return this;
        }

        /**
         * @param hasVulnerabilities Whether the scan run has found any vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder hasVulnerabilities(Boolean hasVulnerabilities) {
            return hasVulnerabilities(Output.of(hasVulnerabilities));
        }

        /**
         * @param name The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param progressPercent The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
         * 
         * @return builder
         * 
         */
        public Builder progressPercent(@Nullable Output<Integer> progressPercent) {
            $.progressPercent = progressPercent;
            return this;
        }

        /**
         * @param progressPercent The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
         * 
         * @return builder
         * 
         */
        public Builder progressPercent(Integer progressPercent) {
            return progressPercent(Output.of(progressPercent));
        }

        /**
         * @param resultState The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resultState(@Nullable Output<ScanRunResultState> resultState) {
            $.resultState = resultState;
            return this;
        }

        /**
         * @param resultState The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resultState(ScanRunResultState resultState) {
            return resultState(Output.of(resultState));
        }

        /**
         * @param startTime The time at which the ScanRun started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time at which the ScanRun started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param urlsCrawledCount The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
         * 
         * @return builder
         * 
         */
        public Builder urlsCrawledCount(@Nullable Output<String> urlsCrawledCount) {
            $.urlsCrawledCount = urlsCrawledCount;
            return this;
        }

        /**
         * @param urlsCrawledCount The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
         * 
         * @return builder
         * 
         */
        public Builder urlsCrawledCount(String urlsCrawledCount) {
            return urlsCrawledCount(Output.of(urlsCrawledCount));
        }

        /**
         * @param urlsTestedCount The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
         * 
         * @return builder
         * 
         */
        public Builder urlsTestedCount(@Nullable Output<String> urlsTestedCount) {
            $.urlsTestedCount = urlsTestedCount;
            return this;
        }

        /**
         * @param urlsTestedCount The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
         * 
         * @return builder
         * 
         */
        public Builder urlsTestedCount(String urlsTestedCount) {
            return urlsTestedCount(Output.of(urlsTestedCount));
        }

        public ScanRunArgs build() {
            return $;
        }
    }

}
