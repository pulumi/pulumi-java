// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sourcerepo.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration to automatically mirror a repository from another hosting service, for example GitHub or Bitbucket.
 * 
 */
public final class MirrorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MirrorConfigArgs Empty = new MirrorConfigArgs();

    /**
     * ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.
     * 
     */
    @Import(name="deployKeyId")
    private @Nullable Output<String> deployKeyId;

    /**
     * @return ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.
     * 
     */
    public Optional<Output<String>> deployKeyId() {
        return Optional.ofNullable(this.deployKeyId);
    }

    /**
     * URL of the main repository at the other hosting service.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL of the main repository at the other hosting service.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.
     * 
     */
    @Import(name="webhookId")
    private @Nullable Output<String> webhookId;

    /**
     * @return ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.
     * 
     */
    public Optional<Output<String>> webhookId() {
        return Optional.ofNullable(this.webhookId);
    }

    private MirrorConfigArgs() {}

    private MirrorConfigArgs(MirrorConfigArgs $) {
        this.deployKeyId = $.deployKeyId;
        this.url = $.url;
        this.webhookId = $.webhookId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MirrorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MirrorConfigArgs $;

        public Builder() {
            $ = new MirrorConfigArgs();
        }

        public Builder(MirrorConfigArgs defaults) {
            $ = new MirrorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deployKeyId ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.
         * 
         * @return builder
         * 
         */
        public Builder deployKeyId(@Nullable Output<String> deployKeyId) {
            $.deployKeyId = deployKeyId;
            return this;
        }

        /**
         * @param deployKeyId ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.
         * 
         * @return builder
         * 
         */
        public Builder deployKeyId(String deployKeyId) {
            return deployKeyId(Output.of(deployKeyId));
        }

        /**
         * @param url URL of the main repository at the other hosting service.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the main repository at the other hosting service.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param webhookId ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.
         * 
         * @return builder
         * 
         */
        public Builder webhookId(@Nullable Output<String> webhookId) {
            $.webhookId = webhookId;
            return this;
        }

        /**
         * @param webhookId ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.
         * 
         * @return builder
         * 
         */
        public Builder webhookId(String webhookId) {
            return webhookId(Output.of(webhookId));
        }

        public MirrorConfigArgs build() {
            return $;
        }
    }

}
