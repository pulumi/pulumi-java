// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer_v1.inputs.AwsS3DataResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.AzureBlobStorageDataResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.GcsDataResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.HttpDataResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.ObjectConditionsResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.PosixFilesystemResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.TransferManifestResponse;
import com.pulumi.googlenative.storagetransfer_v1.inputs.TransferOptionsResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Configuration for running a transfer.
 * 
 */
public final class TransferSpecResponse extends com.pulumi.resources.InvokeArgs {

    public static final TransferSpecResponse Empty = new TransferSpecResponse();

    /**
     * An AWS S3 data source.
     * 
     */
    @Import(name="awsS3DataSource", required=true)
    private AwsS3DataResponse awsS3DataSource;

    public AwsS3DataResponse awsS3DataSource() {
        return this.awsS3DataSource;
    }

    /**
     * An Azure Blob Storage data source.
     * 
     */
    @Import(name="azureBlobStorageDataSource", required=true)
    private AzureBlobStorageDataResponse azureBlobStorageDataSource;

    public AzureBlobStorageDataResponse azureBlobStorageDataSource() {
        return this.azureBlobStorageDataSource;
    }

    /**
     * A Cloud Storage data sink.
     * 
     */
    @Import(name="gcsDataSink", required=true)
    private GcsDataResponse gcsDataSink;

    public GcsDataResponse gcsDataSink() {
        return this.gcsDataSink;
    }

    /**
     * A Cloud Storage data source.
     * 
     */
    @Import(name="gcsDataSource", required=true)
    private GcsDataResponse gcsDataSource;

    public GcsDataResponse gcsDataSource() {
        return this.gcsDataSource;
    }

    /**
     * Cloud Storage intermediate data location.
     * 
     */
    @Import(name="gcsIntermediateDataLocation", required=true)
    private GcsDataResponse gcsIntermediateDataLocation;

    public GcsDataResponse gcsIntermediateDataLocation() {
        return this.gcsIntermediateDataLocation;
    }

    /**
     * An HTTP URL data source.
     * 
     */
    @Import(name="httpDataSource", required=true)
    private HttpDataResponse httpDataSource;

    public HttpDataResponse httpDataSource() {
        return this.httpDataSource;
    }

    /**
     * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
     * 
     */
    @Import(name="objectConditions", required=true)
    private ObjectConditionsResponse objectConditions;

    public ObjectConditionsResponse objectConditions() {
        return this.objectConditions;
    }

    /**
     * A POSIX Filesystem data sink.
     * 
     */
    @Import(name="posixDataSink", required=true)
    private PosixFilesystemResponse posixDataSink;

    public PosixFilesystemResponse posixDataSink() {
        return this.posixDataSink;
    }

    /**
     * A POSIX Filesystem data source.
     * 
     */
    @Import(name="posixDataSource", required=true)
    private PosixFilesystemResponse posixDataSource;

    public PosixFilesystemResponse posixDataSource() {
        return this.posixDataSource;
    }

    /**
     * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    @Import(name="sinkAgentPoolName", required=true)
    private String sinkAgentPoolName;

    public String sinkAgentPoolName() {
        return this.sinkAgentPoolName;
    }

    /**
     * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    @Import(name="sourceAgentPoolName", required=true)
    private String sourceAgentPoolName;

    public String sourceAgentPoolName() {
        return this.sourceAgentPoolName;
    }

    /**
     * A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    @Import(name="transferManifest", required=true)
    private TransferManifestResponse transferManifest;

    public TransferManifestResponse transferManifest() {
        return this.transferManifest;
    }

    /**
     * If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    @Import(name="transferOptions", required=true)
    private TransferOptionsResponse transferOptions;

    public TransferOptionsResponse transferOptions() {
        return this.transferOptions;
    }

    private TransferSpecResponse() {}

    private TransferSpecResponse(TransferSpecResponse $) {
        this.awsS3DataSource = $.awsS3DataSource;
        this.azureBlobStorageDataSource = $.azureBlobStorageDataSource;
        this.gcsDataSink = $.gcsDataSink;
        this.gcsDataSource = $.gcsDataSource;
        this.gcsIntermediateDataLocation = $.gcsIntermediateDataLocation;
        this.httpDataSource = $.httpDataSource;
        this.objectConditions = $.objectConditions;
        this.posixDataSink = $.posixDataSink;
        this.posixDataSource = $.posixDataSource;
        this.sinkAgentPoolName = $.sinkAgentPoolName;
        this.sourceAgentPoolName = $.sourceAgentPoolName;
        this.transferManifest = $.transferManifest;
        this.transferOptions = $.transferOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferSpecResponse $;

        public Builder() {
            $ = new TransferSpecResponse();
        }

        public Builder(TransferSpecResponse defaults) {
            $ = new TransferSpecResponse(Objects.requireNonNull(defaults));
        }

        public Builder awsS3DataSource(AwsS3DataResponse awsS3DataSource) {
            $.awsS3DataSource = awsS3DataSource;
            return this;
        }

        public Builder azureBlobStorageDataSource(AzureBlobStorageDataResponse azureBlobStorageDataSource) {
            $.azureBlobStorageDataSource = azureBlobStorageDataSource;
            return this;
        }

        public Builder gcsDataSink(GcsDataResponse gcsDataSink) {
            $.gcsDataSink = gcsDataSink;
            return this;
        }

        public Builder gcsDataSource(GcsDataResponse gcsDataSource) {
            $.gcsDataSource = gcsDataSource;
            return this;
        }

        public Builder gcsIntermediateDataLocation(GcsDataResponse gcsIntermediateDataLocation) {
            $.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
            return this;
        }

        public Builder httpDataSource(HttpDataResponse httpDataSource) {
            $.httpDataSource = httpDataSource;
            return this;
        }

        public Builder objectConditions(ObjectConditionsResponse objectConditions) {
            $.objectConditions = objectConditions;
            return this;
        }

        public Builder posixDataSink(PosixFilesystemResponse posixDataSink) {
            $.posixDataSink = posixDataSink;
            return this;
        }

        public Builder posixDataSource(PosixFilesystemResponse posixDataSource) {
            $.posixDataSource = posixDataSource;
            return this;
        }

        public Builder sinkAgentPoolName(String sinkAgentPoolName) {
            $.sinkAgentPoolName = sinkAgentPoolName;
            return this;
        }

        public Builder sourceAgentPoolName(String sourceAgentPoolName) {
            $.sourceAgentPoolName = sourceAgentPoolName;
            return this;
        }

        public Builder transferManifest(TransferManifestResponse transferManifest) {
            $.transferManifest = transferManifest;
            return this;
        }

        public Builder transferOptions(TransferOptionsResponse transferOptions) {
            $.transferOptions = transferOptions;
            return this;
        }

        public TransferSpecResponse build() {
            $.awsS3DataSource = Objects.requireNonNull($.awsS3DataSource, "expected parameter 'awsS3DataSource' to be non-null");
            $.azureBlobStorageDataSource = Objects.requireNonNull($.azureBlobStorageDataSource, "expected parameter 'azureBlobStorageDataSource' to be non-null");
            $.gcsDataSink = Objects.requireNonNull($.gcsDataSink, "expected parameter 'gcsDataSink' to be non-null");
            $.gcsDataSource = Objects.requireNonNull($.gcsDataSource, "expected parameter 'gcsDataSource' to be non-null");
            $.gcsIntermediateDataLocation = Objects.requireNonNull($.gcsIntermediateDataLocation, "expected parameter 'gcsIntermediateDataLocation' to be non-null");
            $.httpDataSource = Objects.requireNonNull($.httpDataSource, "expected parameter 'httpDataSource' to be non-null");
            $.objectConditions = Objects.requireNonNull($.objectConditions, "expected parameter 'objectConditions' to be non-null");
            $.posixDataSink = Objects.requireNonNull($.posixDataSink, "expected parameter 'posixDataSink' to be non-null");
            $.posixDataSource = Objects.requireNonNull($.posixDataSource, "expected parameter 'posixDataSource' to be non-null");
            $.sinkAgentPoolName = Objects.requireNonNull($.sinkAgentPoolName, "expected parameter 'sinkAgentPoolName' to be non-null");
            $.sourceAgentPoolName = Objects.requireNonNull($.sourceAgentPoolName, "expected parameter 'sourceAgentPoolName' to be non-null");
            $.transferManifest = Objects.requireNonNull($.transferManifest, "expected parameter 'transferManifest' to be non-null");
            $.transferOptions = Objects.requireNonNull($.transferOptions, "expected parameter 'transferOptions' to be non-null");
            return $;
        }
    }

}
