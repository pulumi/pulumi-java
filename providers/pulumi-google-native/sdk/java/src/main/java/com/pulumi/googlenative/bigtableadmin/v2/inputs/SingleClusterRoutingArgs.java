// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigtableadmin.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
 * 
 */
public final class SingleClusterRoutingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SingleClusterRoutingArgs Empty = new SingleClusterRoutingArgs();

    /**
     * Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
     * 
     */
    @Import(name="allowTransactionalWrites")
    private @Nullable Output<Boolean> allowTransactionalWrites;

    /**
     * @return Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
     * 
     */
    public Optional<Output<Boolean>> allowTransactionalWrites() {
        return Optional.ofNullable(this.allowTransactionalWrites);
    }

    /**
     * The cluster to which read/write requests should be routed.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The cluster to which read/write requests should be routed.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    private SingleClusterRoutingArgs() {}

    private SingleClusterRoutingArgs(SingleClusterRoutingArgs $) {
        this.allowTransactionalWrites = $.allowTransactionalWrites;
        this.clusterId = $.clusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingleClusterRoutingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingleClusterRoutingArgs $;

        public Builder() {
            $ = new SingleClusterRoutingArgs();
        }

        public Builder(SingleClusterRoutingArgs defaults) {
            $ = new SingleClusterRoutingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowTransactionalWrites Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
         * 
         * @return builder
         * 
         */
        public Builder allowTransactionalWrites(@Nullable Output<Boolean> allowTransactionalWrites) {
            $.allowTransactionalWrites = allowTransactionalWrites;
            return this;
        }

        /**
         * @param allowTransactionalWrites Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
         * 
         * @return builder
         * 
         */
        public Builder allowTransactionalWrites(Boolean allowTransactionalWrites) {
            return allowTransactionalWrites(Output.of(allowTransactionalWrites));
        }

        /**
         * @param clusterId The cluster to which read/write requests should be routed.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster to which read/write requests should be routed.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        public SingleClusterRoutingArgs build() {
            return $;
        }
    }

}
