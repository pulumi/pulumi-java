// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc.v1beta2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc.v1beta2.inputs.ClusterSelectorArgs;
import com.pulumi.googlenative.dataproc.v1beta2.inputs.ManagedClusterArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies workflow execution target.Either managed_cluster or cluster_selector is required.
 * 
 */
public final class WorkflowTemplatePlacementArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowTemplatePlacementArgs Empty = new WorkflowTemplatePlacementArgs();

    /**
     * Optional. A selector that chooses target cluster for jobs based on metadata.The selector is evaluated at the time each job is submitted.
     * 
     */
    @Import(name="clusterSelector")
    private @Nullable Output<ClusterSelectorArgs> clusterSelector;

    /**
     * @return Optional. A selector that chooses target cluster for jobs based on metadata.The selector is evaluated at the time each job is submitted.
     * 
     */
    public Optional<Output<ClusterSelectorArgs>> clusterSelector() {
        return Optional.ofNullable(this.clusterSelector);
    }

    /**
     * Optional. A cluster that is managed by the workflow.
     * 
     */
    @Import(name="managedCluster")
    private @Nullable Output<ManagedClusterArgs> managedCluster;

    /**
     * @return Optional. A cluster that is managed by the workflow.
     * 
     */
    public Optional<Output<ManagedClusterArgs>> managedCluster() {
        return Optional.ofNullable(this.managedCluster);
    }

    private WorkflowTemplatePlacementArgs() {}

    private WorkflowTemplatePlacementArgs(WorkflowTemplatePlacementArgs $) {
        this.clusterSelector = $.clusterSelector;
        this.managedCluster = $.managedCluster;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowTemplatePlacementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowTemplatePlacementArgs $;

        public Builder() {
            $ = new WorkflowTemplatePlacementArgs();
        }

        public Builder(WorkflowTemplatePlacementArgs defaults) {
            $ = new WorkflowTemplatePlacementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterSelector Optional. A selector that chooses target cluster for jobs based on metadata.The selector is evaluated at the time each job is submitted.
         * 
         * @return builder
         * 
         */
        public Builder clusterSelector(@Nullable Output<ClusterSelectorArgs> clusterSelector) {
            $.clusterSelector = clusterSelector;
            return this;
        }

        /**
         * @param clusterSelector Optional. A selector that chooses target cluster for jobs based on metadata.The selector is evaluated at the time each job is submitted.
         * 
         * @return builder
         * 
         */
        public Builder clusterSelector(ClusterSelectorArgs clusterSelector) {
            return clusterSelector(Output.of(clusterSelector));
        }

        /**
         * @param managedCluster Optional. A cluster that is managed by the workflow.
         * 
         * @return builder
         * 
         */
        public Builder managedCluster(@Nullable Output<ManagedClusterArgs> managedCluster) {
            $.managedCluster = managedCluster;
            return this;
        }

        /**
         * @param managedCluster Optional. A cluster that is managed by the workflow.
         * 
         * @return builder
         * 
         */
        public Builder managedCluster(ManagedClusterArgs managedCluster) {
            return managedCluster(Output.of(managedCluster));
        }

        public WorkflowTemplatePlacementArgs build() {
            return $;
        }
    }

}
