// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.monitoring_v1.inputs.TileArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.
 * 
 */
public final class MosaicLayoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final MosaicLayoutArgs Empty = new MosaicLayoutArgs();

    /**
     * The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.
     * 
     */
    @Import(name="columns")
      private final @Nullable Output<Integer> columns;

    public Output<Integer> columns() {
        return this.columns == null ? Codegen.empty() : this.columns;
    }

    /**
     * The tiles to display.
     * 
     */
    @Import(name="tiles")
      private final @Nullable Output<List<TileArgs>> tiles;

    public Output<List<TileArgs>> tiles() {
        return this.tiles == null ? Codegen.empty() : this.tiles;
    }

    public MosaicLayoutArgs(
        @Nullable Output<Integer> columns,
        @Nullable Output<List<TileArgs>> tiles) {
        this.columns = columns;
        this.tiles = tiles;
    }

    private MosaicLayoutArgs() {
        this.columns = Codegen.empty();
        this.tiles = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MosaicLayoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> columns;
        private @Nullable Output<List<TileArgs>> tiles;

        public Builder() {
    	      // Empty
        }

        public Builder(MosaicLayoutArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.tiles = defaults.tiles;
        }

        public Builder columns(@Nullable Output<Integer> columns) {
            this.columns = columns;
            return this;
        }
        public Builder columns(@Nullable Integer columns) {
            this.columns = Codegen.ofNullable(columns);
            return this;
        }
        public Builder tiles(@Nullable Output<List<TileArgs>> tiles) {
            this.tiles = tiles;
            return this;
        }
        public Builder tiles(@Nullable List<TileArgs> tiles) {
            this.tiles = Codegen.ofNullable(tiles);
            return this;
        }
        public Builder tiles(TileArgs... tiles) {
            return tiles(List.of(tiles));
        }        public MosaicLayoutArgs build() {
            return new MosaicLayoutArgs(columns, tiles);
        }
    }
}
