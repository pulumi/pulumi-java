// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ConfidentialInstanceConfigResponse {
    /**
     * @return Defines the type of technology used by the confidential instance.
     * 
     */
    private final String confidentialInstanceType;
    /**
     * @return Defines whether the instance should have confidential compute enabled.
     * 
     */
    private final Boolean enableConfidentialCompute;

    @CustomType.Constructor
    private ConfidentialInstanceConfigResponse(
        @CustomType.Parameter("confidentialInstanceType") String confidentialInstanceType,
        @CustomType.Parameter("enableConfidentialCompute") Boolean enableConfidentialCompute) {
        this.confidentialInstanceType = confidentialInstanceType;
        this.enableConfidentialCompute = enableConfidentialCompute;
    }

    /**
     * @return Defines the type of technology used by the confidential instance.
     * 
     */
    public String confidentialInstanceType() {
        return this.confidentialInstanceType;
    }
    /**
     * @return Defines whether the instance should have confidential compute enabled.
     * 
     */
    public Boolean enableConfidentialCompute() {
        return this.enableConfidentialCompute;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfidentialInstanceConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String confidentialInstanceType;
        private Boolean enableConfidentialCompute;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfidentialInstanceConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.confidentialInstanceType = defaults.confidentialInstanceType;
    	      this.enableConfidentialCompute = defaults.enableConfidentialCompute;
        }

        public Builder confidentialInstanceType(String confidentialInstanceType) {
            this.confidentialInstanceType = Objects.requireNonNull(confidentialInstanceType);
            return this;
        }
        public Builder enableConfidentialCompute(Boolean enableConfidentialCompute) {
            this.enableConfidentialCompute = Objects.requireNonNull(enableConfidentialCompute);
            return this;
        }        public ConfidentialInstanceConfigResponse build() {
            return new ConfidentialInstanceConfigResponse(confidentialInstanceType, enableConfidentialCompute);
        }
    }
}
