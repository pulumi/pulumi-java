// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.OptionResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A single field of a message type.
 * 
 */
public final class FieldResponse extends com.pulumi.resources.InvokeArgs {

    public static final FieldResponse Empty = new FieldResponse();

    /**
     * The field cardinality.
     * 
     */
    @Import(name="cardinality", required=true)
    private String cardinality;

    public String cardinality() {
        return this.cardinality;
    }

    /**
     * The string value of the default value of this field. Proto2 syntax only.
     * 
     */
    @Import(name="defaultValue", required=true)
    private String defaultValue;

    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * The field JSON name.
     * 
     */
    @Import(name="jsonName", required=true)
    private String jsonName;

    public String jsonName() {
        return this.jsonName;
    }

    /**
     * The field type.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * The field name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The field number.
     * 
     */
    @Import(name="number", required=true)
    private Integer number;

    public Integer number() {
        return this.number;
    }

    /**
     * The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
     * 
     */
    @Import(name="oneofIndex", required=true)
    private Integer oneofIndex;

    public Integer oneofIndex() {
        return this.oneofIndex;
    }

    /**
     * The protocol buffer options.
     * 
     */
    @Import(name="options", required=true)
    private List<OptionResponse> options;

    public List<OptionResponse> options() {
        return this.options;
    }

    /**
     * Whether to use alternative packed wire representation.
     * 
     */
    @Import(name="packed", required=true)
    private Boolean packed;

    public Boolean packed() {
        return this.packed;
    }

    /**
     * The field type URL, without the scheme, for message or enumeration types. Example: `&#34;type.googleapis.com/google.protobuf.Timestamp&#34;`.
     * 
     */
    @Import(name="typeUrl", required=true)
    private String typeUrl;

    public String typeUrl() {
        return this.typeUrl;
    }

    private FieldResponse() {}

    private FieldResponse(FieldResponse $) {
        this.cardinality = $.cardinality;
        this.defaultValue = $.defaultValue;
        this.jsonName = $.jsonName;
        this.kind = $.kind;
        this.name = $.name;
        this.number = $.number;
        this.oneofIndex = $.oneofIndex;
        this.options = $.options;
        this.packed = $.packed;
        this.typeUrl = $.typeUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldResponse $;

        public Builder() {
            $ = new FieldResponse();
        }

        public Builder(FieldResponse defaults) {
            $ = new FieldResponse(Objects.requireNonNull(defaults));
        }

        public Builder cardinality(String cardinality) {
            $.cardinality = cardinality;
            return this;
        }

        public Builder defaultValue(String defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder jsonName(String jsonName) {
            $.jsonName = jsonName;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder number(Integer number) {
            $.number = number;
            return this;
        }

        public Builder oneofIndex(Integer oneofIndex) {
            $.oneofIndex = oneofIndex;
            return this;
        }

        public Builder options(List<OptionResponse> options) {
            $.options = options;
            return this;
        }

        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }

        public Builder packed(Boolean packed) {
            $.packed = packed;
            return this;
        }

        public Builder typeUrl(String typeUrl) {
            $.typeUrl = typeUrl;
            return this;
        }

        public FieldResponse build() {
            $.cardinality = Objects.requireNonNull($.cardinality, "expected parameter 'cardinality' to be non-null");
            $.defaultValue = Objects.requireNonNull($.defaultValue, "expected parameter 'defaultValue' to be non-null");
            $.jsonName = Objects.requireNonNull($.jsonName, "expected parameter 'jsonName' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.number = Objects.requireNonNull($.number, "expected parameter 'number' to be non-null");
            $.oneofIndex = Objects.requireNonNull($.oneofIndex, "expected parameter 'oneofIndex' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.packed = Objects.requireNonNull($.packed, "expected parameter 'packed' to be non-null");
            $.typeUrl = Objects.requireNonNull($.typeUrl, "expected parameter 'typeUrl' to be non-null");
            return $;
        }
    }

}
