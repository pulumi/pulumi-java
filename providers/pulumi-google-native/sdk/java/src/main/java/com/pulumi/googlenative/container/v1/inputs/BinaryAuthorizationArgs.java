// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container.v1.enums.BinaryAuthorizationEvaluationMode;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for Binary Authorization.
 * 
 */
public final class BinaryAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BinaryAuthorizationArgs Empty = new BinaryAuthorizationArgs();

    /**
     * Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Mode of operation for binauthz policy evaluation. Currently the only options are equivalent to enable/disable. If unspecified, defaults to DISABLED.
     * 
     */
    @Import(name="evaluationMode")
    private @Nullable Output<BinaryAuthorizationEvaluationMode> evaluationMode;

    /**
     * @return Mode of operation for binauthz policy evaluation. Currently the only options are equivalent to enable/disable. If unspecified, defaults to DISABLED.
     * 
     */
    public Optional<Output<BinaryAuthorizationEvaluationMode>> evaluationMode() {
        return Optional.ofNullable(this.evaluationMode);
    }

    private BinaryAuthorizationArgs() {}

    private BinaryAuthorizationArgs(BinaryAuthorizationArgs $) {
        this.enabled = $.enabled;
        this.evaluationMode = $.evaluationMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BinaryAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BinaryAuthorizationArgs $;

        public Builder() {
            $ = new BinaryAuthorizationArgs();
        }

        public Builder(BinaryAuthorizationArgs defaults) {
            $ = new BinaryAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param evaluationMode Mode of operation for binauthz policy evaluation. Currently the only options are equivalent to enable/disable. If unspecified, defaults to DISABLED.
         * 
         * @return builder
         * 
         */
        public Builder evaluationMode(@Nullable Output<BinaryAuthorizationEvaluationMode> evaluationMode) {
            $.evaluationMode = evaluationMode;
            return this;
        }

        /**
         * @param evaluationMode Mode of operation for binauthz policy evaluation. Currently the only options are equivalent to enable/disable. If unspecified, defaults to DISABLED.
         * 
         * @return builder
         * 
         */
        public Builder evaluationMode(BinaryAuthorizationEvaluationMode evaluationMode) {
            return evaluationMode(Output.of(evaluationMode));
        }

        public BinaryAuthorizationArgs build() {
            return $;
        }
    }

}
