// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.bigquery.v2.outputs.UserDefinedFunctionResourceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ViewDefinitionResponse {
    /**
     * @return [Required] A query that BigQuery executes when the view is referenced.
     * 
     */
    private final String query;
    /**
     * @return True if the column names are explicitly specified. For example by using the &#39;CREATE VIEW v(c1, c2) AS ...&#39; syntax. Can only be set using BigQuery&#39;s standard SQL: https://cloud.google.com/bigquery/sql-reference/
     * 
     */
    private final Boolean useExplicitColumnNames;
    /**
     * @return Specifies whether to use BigQuery&#39;s legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery&#39;s standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
     * 
     */
    private final Boolean useLegacySql;
    /**
     * @return Describes user-defined function resources used in the query.
     * 
     */
    private final List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;

    @CustomType.Constructor
    private ViewDefinitionResponse(
        @CustomType.Parameter("query") String query,
        @CustomType.Parameter("useExplicitColumnNames") Boolean useExplicitColumnNames,
        @CustomType.Parameter("useLegacySql") Boolean useLegacySql,
        @CustomType.Parameter("userDefinedFunctionResources") List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources) {
        this.query = query;
        this.useExplicitColumnNames = useExplicitColumnNames;
        this.useLegacySql = useLegacySql;
        this.userDefinedFunctionResources = userDefinedFunctionResources;
    }

    /**
     * @return [Required] A query that BigQuery executes when the view is referenced.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return True if the column names are explicitly specified. For example by using the &#39;CREATE VIEW v(c1, c2) AS ...&#39; syntax. Can only be set using BigQuery&#39;s standard SQL: https://cloud.google.com/bigquery/sql-reference/
     * 
     */
    public Boolean useExplicitColumnNames() {
        return this.useExplicitColumnNames;
    }
    /**
     * @return Specifies whether to use BigQuery&#39;s legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery&#39;s standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
     * 
     */
    public Boolean useLegacySql() {
        return this.useLegacySql;
    }
    /**
     * @return Describes user-defined function resources used in the query.
     * 
     */
    public List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources() {
        return this.userDefinedFunctionResources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ViewDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String query;
        private Boolean useExplicitColumnNames;
        private Boolean useLegacySql;
        private List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;

        public Builder() {
    	      // Empty
        }

        public Builder(ViewDefinitionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.query = defaults.query;
    	      this.useExplicitColumnNames = defaults.useExplicitColumnNames;
    	      this.useLegacySql = defaults.useLegacySql;
    	      this.userDefinedFunctionResources = defaults.userDefinedFunctionResources;
        }

        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        public Builder useExplicitColumnNames(Boolean useExplicitColumnNames) {
            this.useExplicitColumnNames = Objects.requireNonNull(useExplicitColumnNames);
            return this;
        }
        public Builder useLegacySql(Boolean useLegacySql) {
            this.useLegacySql = Objects.requireNonNull(useLegacySql);
            return this;
        }
        public Builder userDefinedFunctionResources(List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = Objects.requireNonNull(userDefinedFunctionResources);
            return this;
        }
        public Builder userDefinedFunctionResources(UserDefinedFunctionResourceResponse... userDefinedFunctionResources) {
            return userDefinedFunctionResources(List.of(userDefinedFunctionResources));
        }        public ViewDefinitionResponse build() {
            return new ViewDefinitionResponse(query, useExplicitColumnNames, useLegacySql, userDefinedFunctionResources);
        }
    }
}
