// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGatewayResult {
    /**
     * @return The timestamp when the resource was created.
     * 
     */
    private final String createTime;
    /**
     * @return Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    private final String description;
    /**
     * @return Optional. Set of label tags associated with the Gateway resource.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Name of the Gateway resource. It matches pattern `projects/*{@literal /}locations/*{@literal /}gateways/`.
     * 
     */
    private final String name;
    /**
     * @return One or more ports that the Gateway must receive traffic on. The proxy binds to the ports specified. Gateway listen on 0.0.0.0 on the ports specified below.
     * 
     */
    private final List<Integer> ports;
    /**
     * @return Immutable. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    private final String scope;
    /**
     * @return Server-defined URL of this resource
     * 
     */
    private final String selfLink;
    /**
     * @return Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     * 
     */
    private final String serverTlsPolicy;
    /**
     * @return Immutable. The type of the customer managed gateway.
     * 
     */
    private final String type;
    /**
     * @return The timestamp when the resource was updated.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetGatewayResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("ports") List<Integer> ports,
        @CustomType.Parameter("scope") String scope,
        @CustomType.Parameter("selfLink") String selfLink,
        @CustomType.Parameter("serverTlsPolicy") String serverTlsPolicy,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.createTime = createTime;
        this.description = description;
        this.labels = labels;
        this.name = name;
        this.ports = ports;
        this.scope = scope;
        this.selfLink = selfLink;
        this.serverTlsPolicy = serverTlsPolicy;
        this.type = type;
        this.updateTime = updateTime;
    }

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Optional. Set of label tags associated with the Gateway resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Name of the Gateway resource. It matches pattern `projects/*{@literal /}locations/*{@literal /}gateways/`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return One or more ports that the Gateway must receive traffic on. The proxy binds to the ports specified. Gateway listen on 0.0.0.0 on the ports specified below.
     * 
     */
    public List<Integer> ports() {
        return this.ports;
    }
    /**
     * @return Immutable. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return Server-defined URL of this resource
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     * 
     */
    public String serverTlsPolicy() {
        return this.serverTlsPolicy;
    }
    /**
     * @return Immutable. The type of the customer managed gateway.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The timestamp when the resource was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String description;
        private Map<String,String> labels;
        private String name;
        private List<Integer> ports;
        private String scope;
        private String selfLink;
        private String serverTlsPolicy;
        private String type;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.scope = defaults.scope;
    	      this.selfLink = defaults.selfLink;
    	      this.serverTlsPolicy = defaults.serverTlsPolicy;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder ports(List<Integer> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder serverTlsPolicy(String serverTlsPolicy) {
            this.serverTlsPolicy = Objects.requireNonNull(serverTlsPolicy);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetGatewayResult build() {
            return new GetGatewayResult(createTime, description, labels, name, ports, scope, selfLink, serverTlsPolicy, type, updateTime);
        }
    }
}
