// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * A backend rule provides configuration for an individual API element.
 * 
 */
public final class BackendRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendRuleResponse Empty = new BackendRuleResponse();

    /**
     * The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
     * 
     */
    @Import(name="address", required=true)
    private String address;

    /**
     * @return The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
     * 
     */
    public String address() {
        return this.address;
    }

    /**
     * The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
     * 
     */
    @Import(name="deadline", required=true)
    private Double deadline;

    /**
     * @return The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
     * 
     */
    public Double deadline() {
        return this.deadline;
    }

    /**
     * When disable_auth is true, a JWT ID token won&#39;t be generated and the original &#34;Authorization&#34; HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
     * 
     */
    @Import(name="disableAuth", required=true)
    private Boolean disableAuth;

    /**
     * @return When disable_auth is true, a JWT ID token won&#39;t be generated and the original &#34;Authorization&#34; HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
     * 
     */
    public Boolean disableAuth() {
        return this.disableAuth;
    }

    /**
     * The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP &#34;authorization&#34; header, and sent to the backend.
     * 
     */
    @Import(name="jwtAudience", required=true)
    private String jwtAudience;

    /**
     * @return The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP &#34;authorization&#34; header, and sent to the backend.
     * 
     */
    public String jwtAudience() {
        return this.jwtAudience;
    }

    /**
     * The number of seconds to wait for the completion of a long running operation. The default is no deadline.
     * 
     */
    @Import(name="operationDeadline", required=true)
    private Double operationDeadline;

    /**
     * @return The number of seconds to wait for the completion of a long running operation. The default is no deadline.
     * 
     */
    public Double operationDeadline() {
        return this.operationDeadline;
    }

    @Import(name="pathTranslation", required=true)
    private String pathTranslation;

    public String pathTranslation() {
        return this.pathTranslation;
    }

    /**
     * The protocol used for sending a request to the backend. The supported values are &#34;http/1.1&#34; and &#34;h2&#34;. The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to &#34;h2&#34; for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return The protocol used for sending a request to the backend. The supported values are &#34;http/1.1&#34; and &#34;h2&#34;. The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to &#34;h2&#34; for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector", required=true)
    private String selector;

    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public String selector() {
        return this.selector;
    }

    private BackendRuleResponse() {}

    private BackendRuleResponse(BackendRuleResponse $) {
        this.address = $.address;
        this.deadline = $.deadline;
        this.disableAuth = $.disableAuth;
        this.jwtAudience = $.jwtAudience;
        this.operationDeadline = $.operationDeadline;
        this.pathTranslation = $.pathTranslation;
        this.protocol = $.protocol;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendRuleResponse $;

        public Builder() {
            $ = new BackendRuleResponse();
        }

        public Builder(BackendRuleResponse defaults) {
            $ = new BackendRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            $.address = address;
            return this;
        }

        /**
         * @param deadline The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
         * 
         * @return builder
         * 
         */
        public Builder deadline(Double deadline) {
            $.deadline = deadline;
            return this;
        }

        /**
         * @param disableAuth When disable_auth is true, a JWT ID token won&#39;t be generated and the original &#34;Authorization&#34; HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
         * 
         * @return builder
         * 
         */
        public Builder disableAuth(Boolean disableAuth) {
            $.disableAuth = disableAuth;
            return this;
        }

        /**
         * @param jwtAudience The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP &#34;authorization&#34; header, and sent to the backend.
         * 
         * @return builder
         * 
         */
        public Builder jwtAudience(String jwtAudience) {
            $.jwtAudience = jwtAudience;
            return this;
        }

        /**
         * @param operationDeadline The number of seconds to wait for the completion of a long running operation. The default is no deadline.
         * 
         * @return builder
         * 
         */
        public Builder operationDeadline(Double operationDeadline) {
            $.operationDeadline = operationDeadline;
            return this;
        }

        public Builder pathTranslation(String pathTranslation) {
            $.pathTranslation = pathTranslation;
            return this;
        }

        /**
         * @param protocol The protocol used for sending a request to the backend. The supported values are &#34;http/1.1&#34; and &#34;h2&#34;. The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to &#34;h2&#34; for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param selector Selects the methods to which this rule applies. Refer to selector for syntax details.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            $.selector = selector;
            return this;
        }

        public BackendRuleResponse build() {
            $.address = Objects.requireNonNull($.address, "expected parameter 'address' to be non-null");
            $.deadline = Objects.requireNonNull($.deadline, "expected parameter 'deadline' to be non-null");
            $.disableAuth = Objects.requireNonNull($.disableAuth, "expected parameter 'disableAuth' to be non-null");
            $.jwtAudience = Objects.requireNonNull($.jwtAudience, "expected parameter 'jwtAudience' to be non-null");
            $.operationDeadline = Objects.requireNonNull($.operationDeadline, "expected parameter 'operationDeadline' to be non-null");
            $.pathTranslation = Objects.requireNonNull($.pathTranslation, "expected parameter 'pathTranslation' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.selector = Objects.requireNonNull($.selector, "expected parameter 'selector' to be non-null");
            return $;
        }
    }

}
