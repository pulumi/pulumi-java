// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Location of the source in a Google Cloud Source Repository.
 * 
 */
public final class RepoSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final RepoSourceResponse Empty = new RepoSourceResponse();

    /**
     * Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="branchName", required=true)
    private String branchName;

    /**
     * @return Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    public String branchName() {
        return this.branchName;
    }

    /**
     * Explicit commit SHA to build.
     * 
     */
    @Import(name="commitSha", required=true)
    private String commitSha;

    /**
     * @return Explicit commit SHA to build.
     * 
     */
    public String commitSha() {
        return this.commitSha;
    }

    /**
     * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step&#39;s `dir` is specified and is an absolute path, this value is ignored for that step&#39;s execution.
     * 
     */
    @Import(name="dir", required=true)
    private String dir;

    /**
     * @return Directory, relative to the source root, in which to run the build. This must be a relative path. If a step&#39;s `dir` is specified and is an absolute path, this value is ignored for that step&#39;s execution.
     * 
     */
    public String dir() {
        return this.dir;
    }

    /**
     * Only trigger a build if the revision regex does NOT match the revision regex.
     * 
     */
    @Import(name="invertRegex", required=true)
    private Boolean invertRegex;

    /**
     * @return Only trigger a build if the revision regex does NOT match the revision regex.
     * 
     */
    public Boolean invertRegex() {
        return this.invertRegex;
    }

    /**
     * ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
     * 
     */
    public String project() {
        return this.project;
    }

    /**
     * Name of the Cloud Source Repository.
     * 
     */
    @Import(name="repoName", required=true)
    private String repoName;

    /**
     * @return Name of the Cloud Source Repository.
     * 
     */
    public String repoName() {
        return this.repoName;
    }

    /**
     * Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
     * 
     */
    @Import(name="substitutions", required=true)
    private Map<String,String> substitutions;

    /**
     * @return Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
     * 
     */
    public Map<String,String> substitutions() {
        return this.substitutions;
    }

    /**
     * Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="tagName", required=true)
    private String tagName;

    /**
     * @return Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    public String tagName() {
        return this.tagName;
    }

    private RepoSourceResponse() {}

    private RepoSourceResponse(RepoSourceResponse $) {
        this.branchName = $.branchName;
        this.commitSha = $.commitSha;
        this.dir = $.dir;
        this.invertRegex = $.invertRegex;
        this.project = $.project;
        this.repoName = $.repoName;
        this.substitutions = $.substitutions;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepoSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepoSourceResponse $;

        public Builder() {
            $ = new RepoSourceResponse();
        }

        public Builder(RepoSourceResponse defaults) {
            $ = new RepoSourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param commitSha Explicit commit SHA to build.
         * 
         * @return builder
         * 
         */
        public Builder commitSha(String commitSha) {
            $.commitSha = commitSha;
            return this;
        }

        /**
         * @param dir Directory, relative to the source root, in which to run the build. This must be a relative path. If a step&#39;s `dir` is specified and is an absolute path, this value is ignored for that step&#39;s execution.
         * 
         * @return builder
         * 
         */
        public Builder dir(String dir) {
            $.dir = dir;
            return this;
        }

        /**
         * @param invertRegex Only trigger a build if the revision regex does NOT match the revision regex.
         * 
         * @return builder
         * 
         */
        public Builder invertRegex(Boolean invertRegex) {
            $.invertRegex = invertRegex;
            return this;
        }

        /**
         * @param project ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repoName Name of the Cloud Source Repository.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param substitutions Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
         * 
         * @return builder
         * 
         */
        public Builder substitutions(Map<String,String> substitutions) {
            $.substitutions = substitutions;
            return this;
        }

        /**
         * @param tagName Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            $.tagName = tagName;
            return this;
        }

        public RepoSourceResponse build() {
            $.branchName = Objects.requireNonNull($.branchName, "expected parameter 'branchName' to be non-null");
            $.commitSha = Objects.requireNonNull($.commitSha, "expected parameter 'commitSha' to be non-null");
            $.dir = Objects.requireNonNull($.dir, "expected parameter 'dir' to be non-null");
            $.invertRegex = Objects.requireNonNull($.invertRegex, "expected parameter 'invertRegex' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.repoName = Objects.requireNonNull($.repoName, "expected parameter 'repoName' to be non-null");
            $.substitutions = Objects.requireNonNull($.substitutions, "expected parameter 'substitutions' to be non-null");
            $.tagName = Objects.requireNonNull($.tagName, "expected parameter 'tagName' to be non-null");
            return $;
        }
    }

}
