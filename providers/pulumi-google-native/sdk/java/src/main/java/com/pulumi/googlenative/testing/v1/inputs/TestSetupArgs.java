// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing.v1.inputs.AccountArgs;
import com.pulumi.googlenative.testing.v1.inputs.ApkArgs;
import com.pulumi.googlenative.testing.v1.inputs.DeviceFileArgs;
import com.pulumi.googlenative.testing.v1.inputs.EnvironmentVariableArgs;
import com.pulumi.googlenative.testing.v1.inputs.SystraceSetupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A description of how to set up the Android device prior to running the test.
 * 
 */
public final class TestSetupArgs extends com.pulumi.resources.ResourceArgs {

    public static final TestSetupArgs Empty = new TestSetupArgs();

    /**
     * The device will be logged in on this account for the duration of the test.
     * 
     */
    @Import(name="account")
    private @Nullable Output<AccountArgs> account;

    /**
     * @return The device will be logged in on this account for the duration of the test.
     * 
     */
    public Optional<Output<AccountArgs>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * APKs to install in addition to those being directly tested. Currently capped at 100.
     * 
     */
    @Import(name="additionalApks")
    private @Nullable Output<List<ApkArgs>> additionalApks;

    /**
     * @return APKs to install in addition to those being directly tested. Currently capped at 100.
     * 
     */
    public Optional<Output<List<ApkArgs>>> additionalApks() {
        return Optional.ofNullable(this.additionalApks);
    }

    /**
     * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     * 
     */
    @Import(name="directoriesToPull")
    private @Nullable Output<List<String>> directoriesToPull;

    /**
     * @return List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     * 
     */
    public Optional<Output<List<String>>> directoriesToPull() {
        return Optional.ofNullable(this.directoriesToPull);
    }

    /**
     * Whether to prevent all runtime permissions to be granted at app install
     * 
     */
    @Import(name="dontAutograntPermissions")
    private @Nullable Output<Boolean> dontAutograntPermissions;

    /**
     * @return Whether to prevent all runtime permissions to be granted at app install
     * 
     */
    public Optional<Output<Boolean>> dontAutograntPermissions() {
        return Optional.ofNullable(this.dontAutograntPermissions);
    }

    /**
     * Environment variables to set for the test (only applicable for instrumentation tests).
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<EnvironmentVariableArgs>> environmentVariables;

    /**
     * @return Environment variables to set for the test (only applicable for instrumentation tests).
     * 
     */
    public Optional<Output<List<EnvironmentVariableArgs>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * List of files to push to the device before starting the test.
     * 
     */
    @Import(name="filesToPush")
    private @Nullable Output<List<DeviceFileArgs>> filesToPush;

    /**
     * @return List of files to push to the device before starting the test.
     * 
     */
    public Optional<Output<List<DeviceFileArgs>>> filesToPush() {
        return Optional.ofNullable(this.filesToPush);
    }

    /**
     * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * 
     */
    @Import(name="networkProfile")
    private @Nullable Output<String> networkProfile;

    /**
     * @return The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * 
     */
    public Optional<Output<String>> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }

    /**
     * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     * @deprecated
     * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     */
    @Deprecated /* Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run. */
    @Import(name="systrace")
    private @Nullable Output<SystraceSetupArgs> systrace;

    /**
     * @return Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     * @deprecated
     * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     */
    @Deprecated /* Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run. */
    public Optional<Output<SystraceSetupArgs>> systrace() {
        return Optional.ofNullable(this.systrace);
    }

    private TestSetupArgs() {}

    private TestSetupArgs(TestSetupArgs $) {
        this.account = $.account;
        this.additionalApks = $.additionalApks;
        this.directoriesToPull = $.directoriesToPull;
        this.dontAutograntPermissions = $.dontAutograntPermissions;
        this.environmentVariables = $.environmentVariables;
        this.filesToPush = $.filesToPush;
        this.networkProfile = $.networkProfile;
        this.systrace = $.systrace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestSetupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestSetupArgs $;

        public Builder() {
            $ = new TestSetupArgs();
        }

        public Builder(TestSetupArgs defaults) {
            $ = new TestSetupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account The device will be logged in on this account for the duration of the test.
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<AccountArgs> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account The device will be logged in on this account for the duration of the test.
         * 
         * @return builder
         * 
         */
        public Builder account(AccountArgs account) {
            return account(Output.of(account));
        }

        /**
         * @param additionalApks APKs to install in addition to those being directly tested. Currently capped at 100.
         * 
         * @return builder
         * 
         */
        public Builder additionalApks(@Nullable Output<List<ApkArgs>> additionalApks) {
            $.additionalApks = additionalApks;
            return this;
        }

        /**
         * @param additionalApks APKs to install in addition to those being directly tested. Currently capped at 100.
         * 
         * @return builder
         * 
         */
        public Builder additionalApks(List<ApkArgs> additionalApks) {
            return additionalApks(Output.of(additionalApks));
        }

        /**
         * @param additionalApks APKs to install in addition to those being directly tested. Currently capped at 100.
         * 
         * @return builder
         * 
         */
        public Builder additionalApks(ApkArgs... additionalApks) {
            return additionalApks(List.of(additionalApks));
        }

        /**
         * @param directoriesToPull List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
         * 
         * @return builder
         * 
         */
        public Builder directoriesToPull(@Nullable Output<List<String>> directoriesToPull) {
            $.directoriesToPull = directoriesToPull;
            return this;
        }

        /**
         * @param directoriesToPull List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
         * 
         * @return builder
         * 
         */
        public Builder directoriesToPull(List<String> directoriesToPull) {
            return directoriesToPull(Output.of(directoriesToPull));
        }

        /**
         * @param directoriesToPull List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
         * 
         * @return builder
         * 
         */
        public Builder directoriesToPull(String... directoriesToPull) {
            return directoriesToPull(List.of(directoriesToPull));
        }

        /**
         * @param dontAutograntPermissions Whether to prevent all runtime permissions to be granted at app install
         * 
         * @return builder
         * 
         */
        public Builder dontAutograntPermissions(@Nullable Output<Boolean> dontAutograntPermissions) {
            $.dontAutograntPermissions = dontAutograntPermissions;
            return this;
        }

        /**
         * @param dontAutograntPermissions Whether to prevent all runtime permissions to be granted at app install
         * 
         * @return builder
         * 
         */
        public Builder dontAutograntPermissions(Boolean dontAutograntPermissions) {
            return dontAutograntPermissions(Output.of(dontAutograntPermissions));
        }

        /**
         * @param environmentVariables Environment variables to set for the test (only applicable for instrumentation tests).
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<List<EnvironmentVariableArgs>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables to set for the test (only applicable for instrumentation tests).
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(List<EnvironmentVariableArgs> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param environmentVariables Environment variables to set for the test (only applicable for instrumentation tests).
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(EnvironmentVariableArgs... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param filesToPush List of files to push to the device before starting the test.
         * 
         * @return builder
         * 
         */
        public Builder filesToPush(@Nullable Output<List<DeviceFileArgs>> filesToPush) {
            $.filesToPush = filesToPush;
            return this;
        }

        /**
         * @param filesToPush List of files to push to the device before starting the test.
         * 
         * @return builder
         * 
         */
        public Builder filesToPush(List<DeviceFileArgs> filesToPush) {
            return filesToPush(Output.of(filesToPush));
        }

        /**
         * @param filesToPush List of files to push to the device before starting the test.
         * 
         * @return builder
         * 
         */
        public Builder filesToPush(DeviceFileArgs... filesToPush) {
            return filesToPush(List.of(filesToPush));
        }

        /**
         * @param networkProfile The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
         * 
         * @return builder
         * 
         */
        public Builder networkProfile(@Nullable Output<String> networkProfile) {
            $.networkProfile = networkProfile;
            return this;
        }

        /**
         * @param networkProfile The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
         * 
         * @return builder
         * 
         */
        public Builder networkProfile(String networkProfile) {
            return networkProfile(Output.of(networkProfile));
        }

        /**
         * @param systrace Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
         * 
         */
        @Deprecated /* Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run. */
        public Builder systrace(@Nullable Output<SystraceSetupArgs> systrace) {
            $.systrace = systrace;
            return this;
        }

        /**
         * @param systrace Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
         * 
         */
        @Deprecated /* Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run. */
        public Builder systrace(SystraceSetupArgs systrace) {
            return systrace(Output.of(systrace));
        }

        public TestSetupArgs build() {
            return $;
        }
    }

}
