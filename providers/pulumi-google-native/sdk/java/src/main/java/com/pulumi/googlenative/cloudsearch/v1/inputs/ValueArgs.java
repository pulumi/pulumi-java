// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudsearch.v1.inputs.DateArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of a single value with generic type.
 * 
 */
public final class ValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValueArgs Empty = new ValueArgs();

    @Import(name="booleanValue")
    private @Nullable Output<Boolean> booleanValue;

    public Optional<Output<Boolean>> booleanValue() {
        return Optional.ofNullable(this.booleanValue);
    }

    @Import(name="dateValue")
    private @Nullable Output<DateArgs> dateValue;

    public Optional<Output<DateArgs>> dateValue() {
        return Optional.ofNullable(this.dateValue);
    }

    @Import(name="doubleValue")
    private @Nullable Output<Double> doubleValue;

    public Optional<Output<Double>> doubleValue() {
        return Optional.ofNullable(this.doubleValue);
    }

    @Import(name="integerValue")
    private @Nullable Output<String> integerValue;

    public Optional<Output<String>> integerValue() {
        return Optional.ofNullable(this.integerValue);
    }

    @Import(name="stringValue")
    private @Nullable Output<String> stringValue;

    public Optional<Output<String>> stringValue() {
        return Optional.ofNullable(this.stringValue);
    }

    @Import(name="timestampValue")
    private @Nullable Output<String> timestampValue;

    public Optional<Output<String>> timestampValue() {
        return Optional.ofNullable(this.timestampValue);
    }

    private ValueArgs() {}

    private ValueArgs(ValueArgs $) {
        this.booleanValue = $.booleanValue;
        this.dateValue = $.dateValue;
        this.doubleValue = $.doubleValue;
        this.integerValue = $.integerValue;
        this.stringValue = $.stringValue;
        this.timestampValue = $.timestampValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValueArgs $;

        public Builder() {
            $ = new ValueArgs();
        }

        public Builder(ValueArgs defaults) {
            $ = new ValueArgs(Objects.requireNonNull(defaults));
        }

        public Builder booleanValue(@Nullable Output<Boolean> booleanValue) {
            $.booleanValue = booleanValue;
            return this;
        }

        public Builder booleanValue(Boolean booleanValue) {
            return booleanValue(Output.of(booleanValue));
        }

        public Builder dateValue(@Nullable Output<DateArgs> dateValue) {
            $.dateValue = dateValue;
            return this;
        }

        public Builder dateValue(DateArgs dateValue) {
            return dateValue(Output.of(dateValue));
        }

        public Builder doubleValue(@Nullable Output<Double> doubleValue) {
            $.doubleValue = doubleValue;
            return this;
        }

        public Builder doubleValue(Double doubleValue) {
            return doubleValue(Output.of(doubleValue));
        }

        public Builder integerValue(@Nullable Output<String> integerValue) {
            $.integerValue = integerValue;
            return this;
        }

        public Builder integerValue(String integerValue) {
            return integerValue(Output.of(integerValue));
        }

        public Builder stringValue(@Nullable Output<String> stringValue) {
            $.stringValue = stringValue;
            return this;
        }

        public Builder stringValue(String stringValue) {
            return stringValue(Output.of(stringValue));
        }

        public Builder timestampValue(@Nullable Output<String> timestampValue) {
            $.timestampValue = timestampValue;
            return this;
        }

        public Builder timestampValue(String timestampValue) {
            return timestampValue(Output.of(timestampValue));
        }

        public ValueArgs build() {
            return $;
        }
    }

}
