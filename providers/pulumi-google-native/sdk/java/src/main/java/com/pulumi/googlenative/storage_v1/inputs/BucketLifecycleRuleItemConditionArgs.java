// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The condition(s) under which the action will be taken.
 * 
 */
public final class BucketLifecycleRuleItemConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleRuleItemConditionArgs Empty = new BucketLifecycleRuleItemConditionArgs();

    /**
     * Age of an object (in days). This condition is satisfied when an object reaches the specified age.
     * 
     */
    @Import(name="age")
      private final @Nullable Output<Integer> age;

    public Output<Integer> age() {
        return this.age == null ? Codegen.empty() : this.age;
    }

    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
     * 
     */
    @Import(name="createdBefore")
      private final @Nullable Output<String> createdBefore;

    public Output<String> createdBefore() {
        return this.createdBefore == null ? Codegen.empty() : this.createdBefore;
    }

    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC.
     * 
     */
    @Import(name="customTimeBefore")
      private final @Nullable Output<String> customTimeBefore;

    public Output<String> customTimeBefore() {
        return this.customTimeBefore == null ? Codegen.empty() : this.customTimeBefore;
    }

    /**
     * Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
     * 
     */
    @Import(name="daysSinceCustomTime")
      private final @Nullable Output<Integer> daysSinceCustomTime;

    public Output<Integer> daysSinceCustomTime() {
        return this.daysSinceCustomTime == null ? Codegen.empty() : this.daysSinceCustomTime;
    }

    /**
     * Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
     * 
     */
    @Import(name="daysSinceNoncurrentTime")
      private final @Nullable Output<Integer> daysSinceNoncurrentTime;

    public Output<Integer> daysSinceNoncurrentTime() {
        return this.daysSinceNoncurrentTime == null ? Codegen.empty() : this.daysSinceNoncurrentTime;
    }

    /**
     * Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
     * 
     */
    @Import(name="isLive")
      private final @Nullable Output<Boolean> isLive;

    public Output<Boolean> isLive() {
        return this.isLive == null ? Codegen.empty() : this.isLive;
    }

    /**
     * A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
     * 
     */
    @Import(name="matchesPattern")
      private final @Nullable Output<String> matchesPattern;

    public Output<String> matchesPattern() {
        return this.matchesPattern == null ? Codegen.empty() : this.matchesPattern;
    }

    /**
     * Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
     * 
     */
    @Import(name="matchesStorageClass")
      private final @Nullable Output<List<String>> matchesStorageClass;

    public Output<List<String>> matchesStorageClass() {
        return this.matchesStorageClass == null ? Codegen.empty() : this.matchesStorageClass;
    }

    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
     * 
     */
    @Import(name="noncurrentTimeBefore")
      private final @Nullable Output<String> noncurrentTimeBefore;

    public Output<String> noncurrentTimeBefore() {
        return this.noncurrentTimeBefore == null ? Codegen.empty() : this.noncurrentTimeBefore;
    }

    /**
     * Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
     * 
     */
    @Import(name="numNewerVersions")
      private final @Nullable Output<Integer> numNewerVersions;

    public Output<Integer> numNewerVersions() {
        return this.numNewerVersions == null ? Codegen.empty() : this.numNewerVersions;
    }

    public BucketLifecycleRuleItemConditionArgs(
        @Nullable Output<Integer> age,
        @Nullable Output<String> createdBefore,
        @Nullable Output<String> customTimeBefore,
        @Nullable Output<Integer> daysSinceCustomTime,
        @Nullable Output<Integer> daysSinceNoncurrentTime,
        @Nullable Output<Boolean> isLive,
        @Nullable Output<String> matchesPattern,
        @Nullable Output<List<String>> matchesStorageClass,
        @Nullable Output<String> noncurrentTimeBefore,
        @Nullable Output<Integer> numNewerVersions) {
        this.age = age;
        this.createdBefore = createdBefore;
        this.customTimeBefore = customTimeBefore;
        this.daysSinceCustomTime = daysSinceCustomTime;
        this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
        this.isLive = isLive;
        this.matchesPattern = matchesPattern;
        this.matchesStorageClass = matchesStorageClass;
        this.noncurrentTimeBefore = noncurrentTimeBefore;
        this.numNewerVersions = numNewerVersions;
    }

    private BucketLifecycleRuleItemConditionArgs() {
        this.age = Codegen.empty();
        this.createdBefore = Codegen.empty();
        this.customTimeBefore = Codegen.empty();
        this.daysSinceCustomTime = Codegen.empty();
        this.daysSinceNoncurrentTime = Codegen.empty();
        this.isLive = Codegen.empty();
        this.matchesPattern = Codegen.empty();
        this.matchesStorageClass = Codegen.empty();
        this.noncurrentTimeBefore = Codegen.empty();
        this.numNewerVersions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleRuleItemConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> age;
        private @Nullable Output<String> createdBefore;
        private @Nullable Output<String> customTimeBefore;
        private @Nullable Output<Integer> daysSinceCustomTime;
        private @Nullable Output<Integer> daysSinceNoncurrentTime;
        private @Nullable Output<Boolean> isLive;
        private @Nullable Output<String> matchesPattern;
        private @Nullable Output<List<String>> matchesStorageClass;
        private @Nullable Output<String> noncurrentTimeBefore;
        private @Nullable Output<Integer> numNewerVersions;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketLifecycleRuleItemConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.createdBefore = defaults.createdBefore;
    	      this.customTimeBefore = defaults.customTimeBefore;
    	      this.daysSinceCustomTime = defaults.daysSinceCustomTime;
    	      this.daysSinceNoncurrentTime = defaults.daysSinceNoncurrentTime;
    	      this.isLive = defaults.isLive;
    	      this.matchesPattern = defaults.matchesPattern;
    	      this.matchesStorageClass = defaults.matchesStorageClass;
    	      this.noncurrentTimeBefore = defaults.noncurrentTimeBefore;
    	      this.numNewerVersions = defaults.numNewerVersions;
        }

        public Builder age(@Nullable Output<Integer> age) {
            this.age = age;
            return this;
        }
        public Builder age(@Nullable Integer age) {
            this.age = Codegen.ofNullable(age);
            return this;
        }
        public Builder createdBefore(@Nullable Output<String> createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }
        public Builder createdBefore(@Nullable String createdBefore) {
            this.createdBefore = Codegen.ofNullable(createdBefore);
            return this;
        }
        public Builder customTimeBefore(@Nullable Output<String> customTimeBefore) {
            this.customTimeBefore = customTimeBefore;
            return this;
        }
        public Builder customTimeBefore(@Nullable String customTimeBefore) {
            this.customTimeBefore = Codegen.ofNullable(customTimeBefore);
            return this;
        }
        public Builder daysSinceCustomTime(@Nullable Output<Integer> daysSinceCustomTime) {
            this.daysSinceCustomTime = daysSinceCustomTime;
            return this;
        }
        public Builder daysSinceCustomTime(@Nullable Integer daysSinceCustomTime) {
            this.daysSinceCustomTime = Codegen.ofNullable(daysSinceCustomTime);
            return this;
        }
        public Builder daysSinceNoncurrentTime(@Nullable Output<Integer> daysSinceNoncurrentTime) {
            this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            return this;
        }
        public Builder daysSinceNoncurrentTime(@Nullable Integer daysSinceNoncurrentTime) {
            this.daysSinceNoncurrentTime = Codegen.ofNullable(daysSinceNoncurrentTime);
            return this;
        }
        public Builder isLive(@Nullable Output<Boolean> isLive) {
            this.isLive = isLive;
            return this;
        }
        public Builder isLive(@Nullable Boolean isLive) {
            this.isLive = Codegen.ofNullable(isLive);
            return this;
        }
        public Builder matchesPattern(@Nullable Output<String> matchesPattern) {
            this.matchesPattern = matchesPattern;
            return this;
        }
        public Builder matchesPattern(@Nullable String matchesPattern) {
            this.matchesPattern = Codegen.ofNullable(matchesPattern);
            return this;
        }
        public Builder matchesStorageClass(@Nullable Output<List<String>> matchesStorageClass) {
            this.matchesStorageClass = matchesStorageClass;
            return this;
        }
        public Builder matchesStorageClass(@Nullable List<String> matchesStorageClass) {
            this.matchesStorageClass = Codegen.ofNullable(matchesStorageClass);
            return this;
        }
        public Builder matchesStorageClass(String... matchesStorageClass) {
            return matchesStorageClass(List.of(matchesStorageClass));
        }
        public Builder noncurrentTimeBefore(@Nullable Output<String> noncurrentTimeBefore) {
            this.noncurrentTimeBefore = noncurrentTimeBefore;
            return this;
        }
        public Builder noncurrentTimeBefore(@Nullable String noncurrentTimeBefore) {
            this.noncurrentTimeBefore = Codegen.ofNullable(noncurrentTimeBefore);
            return this;
        }
        public Builder numNewerVersions(@Nullable Output<Integer> numNewerVersions) {
            this.numNewerVersions = numNewerVersions;
            return this;
        }
        public Builder numNewerVersions(@Nullable Integer numNewerVersions) {
            this.numNewerVersions = Codegen.ofNullable(numNewerVersions);
            return this;
        }        public BucketLifecycleRuleItemConditionArgs build() {
            return new BucketLifecycleRuleItemConditionArgs(age, createdBefore, customTimeBefore, daysSinceCustomTime, daysSinceNoncurrentTime, isLive, matchesPattern, matchesStorageClass, noncurrentTimeBefore, numNewerVersions);
        }
    }
}
