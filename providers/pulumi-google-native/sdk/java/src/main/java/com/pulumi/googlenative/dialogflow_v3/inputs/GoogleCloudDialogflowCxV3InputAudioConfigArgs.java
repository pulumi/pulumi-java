// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3.enums.GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding;
import com.pulumi.googlenative.dialogflow_v3.enums.GoogleCloudDialogflowCxV3InputAudioConfigModelVariant;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Instructs the speech recognizer on how to process the audio content.
 * 
 */
public final class GoogleCloudDialogflowCxV3InputAudioConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDialogflowCxV3InputAudioConfigArgs Empty = new GoogleCloudDialogflowCxV3InputAudioConfigArgs();

    /**
     * Audio encoding of the audio content to process.
     * 
     */
    @Import(name="audioEncoding", required=true)
    private Output<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding> audioEncoding;

    public Output<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding> audioEncoding() {
        return this.audioEncoding;
    }

    /**
     * Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn&#39;t return any word-level information.
     * 
     */
    @Import(name="enableWordInfo")
    private @Nullable Output<Boolean> enableWordInfo;

    public Optional<Output<Boolean>> enableWordInfo() {
        return Optional.ofNullable(this.enableWordInfo);
    }

    /**
     * Optional. Which Speech model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the InputAudioConfig. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details.
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * Optional. Which variant of the Speech model to use.
     * 
     */
    @Import(name="modelVariant")
    private @Nullable Output<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant> modelVariant;

    public Optional<Output<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant>> modelVariant() {
        return Optional.ofNullable(this.modelVariant);
    }

    /**
     * Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.
     * 
     */
    @Import(name="phraseHints")
    private @Nullable Output<List<String>> phraseHints;

    public Optional<Output<List<String>>> phraseHints() {
        return Optional.ofNullable(this.phraseHints);
    }

    /**
     * Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.
     * 
     */
    @Import(name="sampleRateHertz")
    private @Nullable Output<Integer> sampleRateHertz;

    public Optional<Output<Integer>> sampleRateHertz() {
        return Optional.ofNullable(this.sampleRateHertz);
    }

    /**
     * Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio&#39;s voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.
     * 
     */
    @Import(name="singleUtterance")
    private @Nullable Output<Boolean> singleUtterance;

    public Optional<Output<Boolean>> singleUtterance() {
        return Optional.ofNullable(this.singleUtterance);
    }

    private GoogleCloudDialogflowCxV3InputAudioConfigArgs() {}

    private GoogleCloudDialogflowCxV3InputAudioConfigArgs(GoogleCloudDialogflowCxV3InputAudioConfigArgs $) {
        this.audioEncoding = $.audioEncoding;
        this.enableWordInfo = $.enableWordInfo;
        this.model = $.model;
        this.modelVariant = $.modelVariant;
        this.phraseHints = $.phraseHints;
        this.sampleRateHertz = $.sampleRateHertz;
        this.singleUtterance = $.singleUtterance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3InputAudioConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3InputAudioConfigArgs $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3InputAudioConfigArgs();
        }

        public Builder(GoogleCloudDialogflowCxV3InputAudioConfigArgs defaults) {
            $ = new GoogleCloudDialogflowCxV3InputAudioConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder audioEncoding(Output<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding> audioEncoding) {
            $.audioEncoding = audioEncoding;
            return this;
        }

        public Builder audioEncoding(GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding audioEncoding) {
            return audioEncoding(Output.of(audioEncoding));
        }

        public Builder enableWordInfo(@Nullable Output<Boolean> enableWordInfo) {
            $.enableWordInfo = enableWordInfo;
            return this;
        }

        public Builder enableWordInfo(Boolean enableWordInfo) {
            return enableWordInfo(Output.of(enableWordInfo));
        }

        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        public Builder model(String model) {
            return model(Output.of(model));
        }

        public Builder modelVariant(@Nullable Output<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant> modelVariant) {
            $.modelVariant = modelVariant;
            return this;
        }

        public Builder modelVariant(GoogleCloudDialogflowCxV3InputAudioConfigModelVariant modelVariant) {
            return modelVariant(Output.of(modelVariant));
        }

        public Builder phraseHints(@Nullable Output<List<String>> phraseHints) {
            $.phraseHints = phraseHints;
            return this;
        }

        public Builder phraseHints(List<String> phraseHints) {
            return phraseHints(Output.of(phraseHints));
        }

        public Builder phraseHints(String... phraseHints) {
            return phraseHints(List.of(phraseHints));
        }

        public Builder sampleRateHertz(@Nullable Output<Integer> sampleRateHertz) {
            $.sampleRateHertz = sampleRateHertz;
            return this;
        }

        public Builder sampleRateHertz(Integer sampleRateHertz) {
            return sampleRateHertz(Output.of(sampleRateHertz));
        }

        public Builder singleUtterance(@Nullable Output<Boolean> singleUtterance) {
            $.singleUtterance = singleUtterance;
            return this;
        }

        public Builder singleUtterance(Boolean singleUtterance) {
            return singleUtterance(Output.of(singleUtterance));
        }

        public GoogleCloudDialogflowCxV3InputAudioConfigArgs build() {
            $.audioEncoding = Objects.requireNonNull($.audioEncoding, "expected parameter 'audioEncoding' to be non-null");
            return $;
        }
    }

}
