// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.TimeSpanResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.VolumeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A step in the build pipeline.
 * 
 */
public final class BuildStepResponse extends com.pulumi.resources.InvokeArgs {

    public static final BuildStepResponse Empty = new BuildStepResponse();

    /**
     * A list of arguments that will be presented to the step when it is started. If the image used to run the step&#39;s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
     * 
     */
    @Import(name="args", required=true)
    private List<String> args;

    /**
     * @return A list of arguments that will be presented to the step when it is started. If the image used to run the step&#39;s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
     * 
     */
    public List<String> args() {
        return this.args;
    }

    /**
     * Working directory to use when running this step&#39;s container. If this value is a relative path, it is relative to the build&#39;s working directory. If this value is absolute, it may be outside the build&#39;s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step&#39;s execution.
     * 
     */
    @Import(name="dir", required=true)
    private String dir;

    /**
     * @return Working directory to use when running this step&#39;s container. If this value is a relative path, it is relative to the build&#39;s working directory. If this value is absolute, it may be outside the build&#39;s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step&#39;s execution.
     * 
     */
    public String dir() {
        return this.dir;
    }

    /**
     * Entrypoint to be used instead of the build step image&#39;s default entrypoint. If unset, the image&#39;s default entrypoint is used.
     * 
     */
    @Import(name="entrypoint", required=true)
    private String entrypoint;

    /**
     * @return Entrypoint to be used instead of the build step image&#39;s default entrypoint. If unset, the image&#39;s default entrypoint is used.
     * 
     */
    public String entrypoint() {
        return this.entrypoint;
    }

    /**
     * A list of environment variable definitions to be used when running a step. The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    @Import(name="env", required=true)
    private List<String> env;

    /**
     * @return A list of environment variable definitions to be used when running a step. The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    public List<String> env() {
        return this.env;
    }

    /**
     * The name of the container image that will run this particular build step. If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account&#39;s credentials if necessary. The Docker daemon&#39;s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host&#39;s Docker daemon&#39;s cache and is available to use as the name for a later build step.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the container image that will run this particular build step. If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account&#39;s credentials if necessary. The Docker daemon&#39;s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host&#39;s Docker daemon&#39;s cache and is available to use as the name for a later build step.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Stores timing information for pulling this build step&#39;s builder image only.
     * 
     */
    @Import(name="pullTiming", required=true)
    private TimeSpanResponse pullTiming;

    /**
     * @return Stores timing information for pulling this build step&#39;s builder image only.
     * 
     */
    public TimeSpanResponse pullTiming() {
        return this.pullTiming;
    }

    /**
     * A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
     * 
     */
    @Import(name="script", required=true)
    private String script;

    /**
     * @return A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
     * 
     */
    public String script() {
        return this.script;
    }

    /**
     * A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s `Secret`.
     * 
     */
    @Import(name="secretEnv", required=true)
    private List<String> secretEnv;

    /**
     * @return A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s `Secret`.
     * 
     */
    public List<String> secretEnv() {
        return this.secretEnv;
    }

    /**
     * Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
     * 
     */
    @Import(name="timeout", required=true)
    private String timeout;

    /**
     * @return Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
     * 
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Stores timing information for executing this build step.
     * 
     */
    @Import(name="timing", required=true)
    private TimeSpanResponse timing;

    /**
     * @return Stores timing information for executing this build step.
     * 
     */
    public TimeSpanResponse timing() {
        return this.timing;
    }

    /**
     * List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
     * 
     */
    @Import(name="volumes", required=true)
    private List<VolumeResponse> volumes;

    /**
     * @return List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    /**
     * The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
     * 
     */
    @Import(name="waitFor", required=true)
    private List<String> waitFor;

    /**
     * @return The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
     * 
     */
    public List<String> waitFor() {
        return this.waitFor;
    }

    private BuildStepResponse() {}

    private BuildStepResponse(BuildStepResponse $) {
        this.args = $.args;
        this.dir = $.dir;
        this.entrypoint = $.entrypoint;
        this.env = $.env;
        this.name = $.name;
        this.pullTiming = $.pullTiming;
        this.script = $.script;
        this.secretEnv = $.secretEnv;
        this.status = $.status;
        this.timeout = $.timeout;
        this.timing = $.timing;
        this.volumes = $.volumes;
        this.waitFor = $.waitFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildStepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildStepResponse $;

        public Builder() {
            $ = new BuildStepResponse();
        }

        public Builder(BuildStepResponse defaults) {
            $ = new BuildStepResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param args A list of arguments that will be presented to the step when it is started. If the image used to run the step&#39;s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args A list of arguments that will be presented to the step when it is started. If the image used to run the step&#39;s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param dir Working directory to use when running this step&#39;s container. If this value is a relative path, it is relative to the build&#39;s working directory. If this value is absolute, it may be outside the build&#39;s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step&#39;s execution.
         * 
         * @return builder
         * 
         */
        public Builder dir(String dir) {
            $.dir = dir;
            return this;
        }

        /**
         * @param entrypoint Entrypoint to be used instead of the build step image&#39;s default entrypoint. If unset, the image&#39;s default entrypoint is used.
         * 
         * @return builder
         * 
         */
        public Builder entrypoint(String entrypoint) {
            $.entrypoint = entrypoint;
            return this;
        }

        /**
         * @param env A list of environment variable definitions to be used when running a step. The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder env(List<String> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env A list of environment variable definitions to be used when running a step. The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder env(String... env) {
            return env(List.of(env));
        }

        /**
         * @param name The name of the container image that will run this particular build step. If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account&#39;s credentials if necessary. The Docker daemon&#39;s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host&#39;s Docker daemon&#39;s cache and is available to use as the name for a later build step.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param pullTiming Stores timing information for pulling this build step&#39;s builder image only.
         * 
         * @return builder
         * 
         */
        public Builder pullTiming(TimeSpanResponse pullTiming) {
            $.pullTiming = pullTiming;
            return this;
        }

        /**
         * @param script A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            $.script = script;
            return this;
        }

        /**
         * @param secretEnv A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder secretEnv(List<String> secretEnv) {
            $.secretEnv = secretEnv;
            return this;
        }

        /**
         * @param secretEnv A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder secretEnv(String... secretEnv) {
            return secretEnv(List.of(secretEnv));
        }

        /**
         * @param status Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param timeout Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timing Stores timing information for executing this build step.
         * 
         * @return builder
         * 
         */
        public Builder timing(TimeSpanResponse timing) {
            $.timing = timing;
            return this;
        }

        /**
         * @param volumes List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<VolumeResponse> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
         * 
         * @return builder
         * 
         */
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }

        /**
         * @param waitFor The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder waitFor(List<String> waitFor) {
            $.waitFor = waitFor;
            return this;
        }

        /**
         * @param waitFor The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder waitFor(String... waitFor) {
            return waitFor(List.of(waitFor));
        }

        public BuildStepResponse build() {
            $.args = Objects.requireNonNull($.args, "expected parameter 'args' to be non-null");
            $.dir = Objects.requireNonNull($.dir, "expected parameter 'dir' to be non-null");
            $.entrypoint = Objects.requireNonNull($.entrypoint, "expected parameter 'entrypoint' to be non-null");
            $.env = Objects.requireNonNull($.env, "expected parameter 'env' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.pullTiming = Objects.requireNonNull($.pullTiming, "expected parameter 'pullTiming' to be non-null");
            $.script = Objects.requireNonNull($.script, "expected parameter 'script' to be non-null");
            $.secretEnv = Objects.requireNonNull($.secretEnv, "expected parameter 'secretEnv' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.timing = Objects.requireNonNull($.timing, "expected parameter 'timing' to be non-null");
            $.volumes = Objects.requireNonNull($.volumes, "expected parameter 'volumes' to be non-null");
            $.waitFor = Objects.requireNonNull($.waitFor, "expected parameter 'waitFor' to be non-null");
            return $;
        }
    }

}
