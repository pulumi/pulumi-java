// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement.v1.enums.LabelDescriptorValueType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A description of a label.
 * 
 */
public final class LabelDescriptorArgs extends com.pulumi.resources.ResourceArgs {

    public static final LabelDescriptorArgs Empty = new LabelDescriptorArgs();

    /**
     * A human-readable description for the label.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description for the label.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The label key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The label key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The type of data that can be assigned to the label.
     * 
     */
    @Import(name="valueType")
    private @Nullable Output<LabelDescriptorValueType> valueType;

    /**
     * @return The type of data that can be assigned to the label.
     * 
     */
    public Optional<Output<LabelDescriptorValueType>> valueType() {
        return Optional.ofNullable(this.valueType);
    }

    private LabelDescriptorArgs() {}

    private LabelDescriptorArgs(LabelDescriptorArgs $) {
        this.description = $.description;
        this.key = $.key;
        this.valueType = $.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabelDescriptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabelDescriptorArgs $;

        public Builder() {
            $ = new LabelDescriptorArgs();
        }

        public Builder(LabelDescriptorArgs defaults) {
            $ = new LabelDescriptorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A human-readable description for the label.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description for the label.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param key The label key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The label key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param valueType The type of data that can be assigned to the label.
         * 
         * @return builder
         * 
         */
        public Builder valueType(@Nullable Output<LabelDescriptorValueType> valueType) {
            $.valueType = valueType;
            return this;
        }

        /**
         * @param valueType The type of data that can be assigned to the label.
         * 
         * @return builder
         * 
         */
        public Builder valueType(LabelDescriptorValueType valueType) {
            return valueType(Output.of(valueType));
        }

        public LabelDescriptorArgs build() {
            return $;
        }
    }

}
