// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsupport_v2beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * An object containing information about the effective user and authenticated principal responsible for an action.
 * 
 */
public final class ActorResponse extends com.pulumi.resources.InvokeArgs {

    public static final ActorResponse Empty = new ActorResponse();

    /**
     * The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
     * 
     */
    @Import(name="email", required=true)
    private String email;

    /**
     * @return The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
     * 
     */
    public String email() {
        return this.email;
    }

    /**
     * Whether the actor is a Google support actor.
     * 
     */
    @Import(name="googleSupport", required=true)
    private Boolean googleSupport;

    /**
     * @return Whether the actor is a Google support actor.
     * 
     */
    public Boolean googleSupport() {
        return this.googleSupport;
    }

    /**
     * An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
     * 
     */
    @Import(name="principalId", required=true)
    private String principalId;

    /**
     * @return An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
     * 
     */
    public String principalId() {
        return this.principalId;
    }

    private ActorResponse() {}

    private ActorResponse(ActorResponse $) {
        this.displayName = $.displayName;
        this.email = $.email;
        this.googleSupport = $.googleSupport;
        this.principalId = $.principalId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActorResponse $;

        public Builder() {
            $ = new ActorResponse();
        }

        public Builder(ActorResponse defaults) {
            $ = new ActorResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param email The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            $.email = email;
            return this;
        }

        /**
         * @param googleSupport Whether the actor is a Google support actor.
         * 
         * @return builder
         * 
         */
        public Builder googleSupport(Boolean googleSupport) {
            $.googleSupport = googleSupport;
            return this;
        }

        /**
         * @param principalId An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            $.principalId = principalId;
            return this;
        }

        public ActorResponse build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.googleSupport = Objects.requireNonNull($.googleSupport, "expected parameter 'googleSupport' to be non-null");
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            return $;
        }
    }

}
