// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storage_v1.inputs.ObjectAccessControlProjectTeamResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An access-control entry.
 * 
 */
public final class ObjectAccessControlResponse extends com.pulumi.resources.InvokeArgs {

    public static final ObjectAccessControlResponse Empty = new ObjectAccessControlResponse();

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="bucket", required=true)
    private String bucket;

    /**
     * @return The name of the bucket.
     * 
     */
    public String bucket() {
        return this.bucket;
    }

    /**
     * The domain associated with the entity, if any.
     * 
     */
    @Import(name="domain", required=true)
    private String domain;

    /**
     * @return The domain associated with the entity, if any.
     * 
     */
    public String domain() {
        return this.domain;
    }

    /**
     * The email address associated with the entity, if any.
     * 
     */
    @Import(name="email", required=true)
    private String email;

    /**
     * @return The email address associated with the entity, if any.
     * 
     */
    public String email() {
        return this.email;
    }

    /**
     * The entity holding the permission, in one of the following forms:
     * - user-userId
     * - user-email
     * - group-groupId
     * - group-email
     * - domain-domain
     * - project-team-projectId
     * - allUsers
     * - allAuthenticatedUsers Examples:
     * - The user liz@example.com would be user-liz@example.com.
     * - The group example@googlegroups.com would be group-example@googlegroups.com.
     * - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
     * 
     */
    @Import(name="entity", required=true)
    private String entity;

    /**
     * @return The entity holding the permission, in one of the following forms:
     * - user-userId
     * - user-email
     * - group-groupId
     * - group-email
     * - domain-domain
     * - project-team-projectId
     * - allUsers
     * - allAuthenticatedUsers Examples:
     * - The user liz@example.com would be user-liz@example.com.
     * - The group example@googlegroups.com would be group-example@googlegroups.com.
     * - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
     * 
     */
    public String entity() {
        return this.entity;
    }

    /**
     * The ID for the entity, if any.
     * 
     */
    @Import(name="entityId", required=true)
    private String entityId;

    /**
     * @return The ID for the entity, if any.
     * 
     */
    public String entityId() {
        return this.entityId;
    }

    /**
     * HTTP 1.1 Entity tag for the access-control entry.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return HTTP 1.1 Entity tag for the access-control entry.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * The content generation of the object, if applied to an object.
     * 
     */
    @Import(name="generation", required=true)
    private String generation;

    /**
     * @return The content generation of the object, if applied to an object.
     * 
     */
    public String generation() {
        return this.generation;
    }

    /**
     * The kind of item this is. For object access control entries, this is always storage#objectAccessControl.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    /**
     * @return The kind of item this is. For object access control entries, this is always storage#objectAccessControl.
     * 
     */
    public String kind() {
        return this.kind;
    }

    /**
     * The name of the object, if applied to an object.
     * 
     */
    @Import(name="object", required=true)
    private String object;

    /**
     * @return The name of the object, if applied to an object.
     * 
     */
    public String object() {
        return this.object;
    }

    /**
     * The project team associated with the entity, if any.
     * 
     */
    @Import(name="projectTeam", required=true)
    private ObjectAccessControlProjectTeamResponse projectTeam;

    /**
     * @return The project team associated with the entity, if any.
     * 
     */
    public ObjectAccessControlProjectTeamResponse projectTeam() {
        return this.projectTeam;
    }

    /**
     * The access permission for the entity.
     * 
     */
    @Import(name="role", required=true)
    private String role;

    /**
     * @return The access permission for the entity.
     * 
     */
    public String role() {
        return this.role;
    }

    /**
     * The link to this access-control entry.
     * 
     */
    @Import(name="selfLink", required=true)
    private String selfLink;

    /**
     * @return The link to this access-control entry.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }

    private ObjectAccessControlResponse() {}

    private ObjectAccessControlResponse(ObjectAccessControlResponse $) {
        this.bucket = $.bucket;
        this.domain = $.domain;
        this.email = $.email;
        this.entity = $.entity;
        this.entityId = $.entityId;
        this.etag = $.etag;
        this.generation = $.generation;
        this.kind = $.kind;
        this.object = $.object;
        this.projectTeam = $.projectTeam;
        this.role = $.role;
        this.selfLink = $.selfLink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectAccessControlResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectAccessControlResponse $;

        public Builder() {
            $ = new ObjectAccessControlResponse();
        }

        public Builder(ObjectAccessControlResponse defaults) {
            $ = new ObjectAccessControlResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param domain The domain associated with the entity, if any.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param email The email address associated with the entity, if any.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            $.email = email;
            return this;
        }

        /**
         * @param entity The entity holding the permission, in one of the following forms:
         * - user-userId
         * - user-email
         * - group-groupId
         * - group-email
         * - domain-domain
         * - project-team-projectId
         * - allUsers
         * - allAuthenticatedUsers Examples:
         * - The user liz@example.com would be user-liz@example.com.
         * - The group example@googlegroups.com would be group-example@googlegroups.com.
         * - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
         * 
         * @return builder
         * 
         */
        public Builder entity(String entity) {
            $.entity = entity;
            return this;
        }

        /**
         * @param entityId The ID for the entity, if any.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param etag HTTP 1.1 Entity tag for the access-control entry.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param generation The content generation of the object, if applied to an object.
         * 
         * @return builder
         * 
         */
        public Builder generation(String generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param kind The kind of item this is. For object access control entries, this is always storage#objectAccessControl.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param object The name of the object, if applied to an object.
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            $.object = object;
            return this;
        }

        /**
         * @param projectTeam The project team associated with the entity, if any.
         * 
         * @return builder
         * 
         */
        public Builder projectTeam(ObjectAccessControlProjectTeamResponse projectTeam) {
            $.projectTeam = projectTeam;
            return this;
        }

        /**
         * @param role The access permission for the entity.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            $.role = role;
            return this;
        }

        /**
         * @param selfLink The link to this access-control entry.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public ObjectAccessControlResponse build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.entity = Objects.requireNonNull($.entity, "expected parameter 'entity' to be non-null");
            $.entityId = Objects.requireNonNull($.entityId, "expected parameter 'entityId' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.generation = Objects.requireNonNull($.generation, "expected parameter 'generation' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.object = Objects.requireNonNull($.object, "expected parameter 'object' to be non-null");
            $.projectTeam = Objects.requireNonNull($.projectTeam, "expected parameter 'projectTeam' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.selfLink = Objects.requireNonNull($.selfLink, "expected parameter 'selfLink' to be non-null");
            return $;
        }
    }

}
