// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.inputs.TableDisplayOptionsArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.TimeSeriesQueryArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Groups a time series query definition with table options.
 * 
 */
public final class TableDataSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableDataSetArgs Empty = new TableDataSetArgs();

    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     * 
     */
    @Import(name="minAlignmentPeriod")
    private @Nullable Output<String> minAlignmentPeriod;

    /**
     * @return Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     * 
     */
    public Optional<Output<String>> minAlignmentPeriod() {
        return Optional.ofNullable(this.minAlignmentPeriod);
    }

    /**
     * Optional. Table display options for configuring how the table is rendered.
     * 
     */
    @Import(name="tableDisplayOptions")
    private @Nullable Output<TableDisplayOptionsArgs> tableDisplayOptions;

    /**
     * @return Optional. Table display options for configuring how the table is rendered.
     * 
     */
    public Optional<Output<TableDisplayOptionsArgs>> tableDisplayOptions() {
        return Optional.ofNullable(this.tableDisplayOptions);
    }

    /**
     * Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value i.e. &#34;${resource.labels.project_id}.&#34;
     * 
     */
    @Import(name="tableTemplate")
    private @Nullable Output<String> tableTemplate;

    /**
     * @return Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value i.e. &#34;${resource.labels.project_id}.&#34;
     * 
     */
    public Optional<Output<String>> tableTemplate() {
        return Optional.ofNullable(this.tableTemplate);
    }

    /**
     * Fields for querying time series data from the Stackdriver metrics API.
     * 
     */
    @Import(name="timeSeriesQuery", required=true)
    private Output<TimeSeriesQueryArgs> timeSeriesQuery;

    /**
     * @return Fields for querying time series data from the Stackdriver metrics API.
     * 
     */
    public Output<TimeSeriesQueryArgs> timeSeriesQuery() {
        return this.timeSeriesQuery;
    }

    private TableDataSetArgs() {}

    private TableDataSetArgs(TableDataSetArgs $) {
        this.minAlignmentPeriod = $.minAlignmentPeriod;
        this.tableDisplayOptions = $.tableDisplayOptions;
        this.tableTemplate = $.tableTemplate;
        this.timeSeriesQuery = $.timeSeriesQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableDataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableDataSetArgs $;

        public Builder() {
            $ = new TableDataSetArgs();
        }

        public Builder(TableDataSetArgs defaults) {
            $ = new TableDataSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minAlignmentPeriod Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
         * 
         * @return builder
         * 
         */
        public Builder minAlignmentPeriod(@Nullable Output<String> minAlignmentPeriod) {
            $.minAlignmentPeriod = minAlignmentPeriod;
            return this;
        }

        /**
         * @param minAlignmentPeriod Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
         * 
         * @return builder
         * 
         */
        public Builder minAlignmentPeriod(String minAlignmentPeriod) {
            return minAlignmentPeriod(Output.of(minAlignmentPeriod));
        }

        /**
         * @param tableDisplayOptions Optional. Table display options for configuring how the table is rendered.
         * 
         * @return builder
         * 
         */
        public Builder tableDisplayOptions(@Nullable Output<TableDisplayOptionsArgs> tableDisplayOptions) {
            $.tableDisplayOptions = tableDisplayOptions;
            return this;
        }

        /**
         * @param tableDisplayOptions Optional. Table display options for configuring how the table is rendered.
         * 
         * @return builder
         * 
         */
        public Builder tableDisplayOptions(TableDisplayOptionsArgs tableDisplayOptions) {
            return tableDisplayOptions(Output.of(tableDisplayOptions));
        }

        /**
         * @param tableTemplate Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value i.e. &#34;${resource.labels.project_id}.&#34;
         * 
         * @return builder
         * 
         */
        public Builder tableTemplate(@Nullable Output<String> tableTemplate) {
            $.tableTemplate = tableTemplate;
            return this;
        }

        /**
         * @param tableTemplate Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value i.e. &#34;${resource.labels.project_id}.&#34;
         * 
         * @return builder
         * 
         */
        public Builder tableTemplate(String tableTemplate) {
            return tableTemplate(Output.of(tableTemplate));
        }

        /**
         * @param timeSeriesQuery Fields for querying time series data from the Stackdriver metrics API.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesQuery(Output<TimeSeriesQueryArgs> timeSeriesQuery) {
            $.timeSeriesQuery = timeSeriesQuery;
            return this;
        }

        /**
         * @param timeSeriesQuery Fields for querying time series data from the Stackdriver metrics API.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesQuery(TimeSeriesQueryArgs timeSeriesQuery) {
            return timeSeriesQuery(Output.of(timeSeriesQuery));
        }

        public TableDataSetArgs build() {
            $.timeSeriesQuery = Objects.requireNonNull($.timeSeriesQuery, "expected parameter 'timeSeriesQuery' to be non-null");
            return $;
        }
    }

}
