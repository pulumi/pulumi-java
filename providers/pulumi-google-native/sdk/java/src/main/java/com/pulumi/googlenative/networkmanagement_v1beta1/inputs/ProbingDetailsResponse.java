// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkmanagement_v1beta1.inputs.EndpointInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1beta1.inputs.LatencyDistributionResponse;
import com.pulumi.googlenative.networkmanagement_v1beta1.inputs.StatusResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Results of active probing from the last run of the test.
 * 
 */
public final class ProbingDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ProbingDetailsResponse Empty = new ProbingDetailsResponse();

    /**
     * The reason probing was aborted.
     * 
     */
    @Import(name="abortCause", required=true)
    private String abortCause;

    /**
     * @return The reason probing was aborted.
     * 
     */
    public String abortCause() {
        return this.abortCause;
    }

    /**
     * The source and destination endpoints derived from the test input and used for active probing.
     * 
     */
    @Import(name="endpointInfo", required=true)
    private EndpointInfoResponse endpointInfo;

    /**
     * @return The source and destination endpoints derived from the test input and used for active probing.
     * 
     */
    public EndpointInfoResponse endpointInfo() {
        return this.endpointInfo;
    }

    /**
     * Details about an internal failure or the cancellation of active probing.
     * 
     */
    @Import(name="error", required=true)
    private StatusResponse error;

    /**
     * @return Details about an internal failure or the cancellation of active probing.
     * 
     */
    public StatusResponse error() {
        return this.error;
    }

    /**
     * Latency as measured by active probing in one direction: from the source to the destination endpoint.
     * 
     */
    @Import(name="probingLatency", required=true)
    private LatencyDistributionResponse probingLatency;

    /**
     * @return Latency as measured by active probing in one direction: from the source to the destination endpoint.
     * 
     */
    public LatencyDistributionResponse probingLatency() {
        return this.probingLatency;
    }

    /**
     * The overall result of active probing.
     * 
     */
    @Import(name="result", required=true)
    private String result;

    /**
     * @return The overall result of active probing.
     * 
     */
    public String result() {
        return this.result;
    }

    /**
     * Number of probes sent.
     * 
     */
    @Import(name="sentProbeCount", required=true)
    private Integer sentProbeCount;

    /**
     * @return Number of probes sent.
     * 
     */
    public Integer sentProbeCount() {
        return this.sentProbeCount;
    }

    /**
     * Number of probes that reached the destination.
     * 
     */
    @Import(name="successfulProbeCount", required=true)
    private Integer successfulProbeCount;

    /**
     * @return Number of probes that reached the destination.
     * 
     */
    public Integer successfulProbeCount() {
        return this.successfulProbeCount;
    }

    /**
     * The time that reachability was assessed through active probing.
     * 
     */
    @Import(name="verifyTime", required=true)
    private String verifyTime;

    /**
     * @return The time that reachability was assessed through active probing.
     * 
     */
    public String verifyTime() {
        return this.verifyTime;
    }

    private ProbingDetailsResponse() {}

    private ProbingDetailsResponse(ProbingDetailsResponse $) {
        this.abortCause = $.abortCause;
        this.endpointInfo = $.endpointInfo;
        this.error = $.error;
        this.probingLatency = $.probingLatency;
        this.result = $.result;
        this.sentProbeCount = $.sentProbeCount;
        this.successfulProbeCount = $.successfulProbeCount;
        this.verifyTime = $.verifyTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProbingDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProbingDetailsResponse $;

        public Builder() {
            $ = new ProbingDetailsResponse();
        }

        public Builder(ProbingDetailsResponse defaults) {
            $ = new ProbingDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param abortCause The reason probing was aborted.
         * 
         * @return builder
         * 
         */
        public Builder abortCause(String abortCause) {
            $.abortCause = abortCause;
            return this;
        }

        /**
         * @param endpointInfo The source and destination endpoints derived from the test input and used for active probing.
         * 
         * @return builder
         * 
         */
        public Builder endpointInfo(EndpointInfoResponse endpointInfo) {
            $.endpointInfo = endpointInfo;
            return this;
        }

        /**
         * @param error Details about an internal failure or the cancellation of active probing.
         * 
         * @return builder
         * 
         */
        public Builder error(StatusResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param probingLatency Latency as measured by active probing in one direction: from the source to the destination endpoint.
         * 
         * @return builder
         * 
         */
        public Builder probingLatency(LatencyDistributionResponse probingLatency) {
            $.probingLatency = probingLatency;
            return this;
        }

        /**
         * @param result The overall result of active probing.
         * 
         * @return builder
         * 
         */
        public Builder result(String result) {
            $.result = result;
            return this;
        }

        /**
         * @param sentProbeCount Number of probes sent.
         * 
         * @return builder
         * 
         */
        public Builder sentProbeCount(Integer sentProbeCount) {
            $.sentProbeCount = sentProbeCount;
            return this;
        }

        /**
         * @param successfulProbeCount Number of probes that reached the destination.
         * 
         * @return builder
         * 
         */
        public Builder successfulProbeCount(Integer successfulProbeCount) {
            $.successfulProbeCount = successfulProbeCount;
            return this;
        }

        /**
         * @param verifyTime The time that reachability was assessed through active probing.
         * 
         * @return builder
         * 
         */
        public Builder verifyTime(String verifyTime) {
            $.verifyTime = verifyTime;
            return this;
        }

        public ProbingDetailsResponse build() {
            $.abortCause = Objects.requireNonNull($.abortCause, "expected parameter 'abortCause' to be non-null");
            $.endpointInfo = Objects.requireNonNull($.endpointInfo, "expected parameter 'endpointInfo' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.probingLatency = Objects.requireNonNull($.probingLatency, "expected parameter 'probingLatency' to be non-null");
            $.result = Objects.requireNonNull($.result, "expected parameter 'result' to be non-null");
            $.sentProbeCount = Objects.requireNonNull($.sentProbeCount, "expected parameter 'sentProbeCount' to be non-null");
            $.successfulProbeCount = Objects.requireNonNull($.successfulProbeCount, "expected parameter 'successfulProbeCount' to be non-null");
            $.verifyTime = Objects.requireNonNull($.verifyTime, "expected parameter 'verifyTime' to be non-null");
            return $;
        }
    }

}
