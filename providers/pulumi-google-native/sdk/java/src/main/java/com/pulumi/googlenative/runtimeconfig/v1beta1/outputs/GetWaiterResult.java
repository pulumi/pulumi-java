// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.runtimeconfig.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.runtimeconfig.v1beta1.outputs.EndConditionResponse;
import com.pulumi.googlenative.runtimeconfig.v1beta1.outputs.StatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWaiterResult {
    /**
     * @return The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.
     * 
     */
    private final String createTime;
    /**
     * @return If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.
     * 
     */
    private final Boolean done;
    /**
     * @return If the waiter ended due to a failure or timeout, this value will be set.
     * 
     */
    private final StatusResponse error;
    /**
     * @return [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
     * 
     */
    private final EndConditionResponse failure;
    /**
     * @return The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
     * 
     */
    private final String name;
    /**
     * @return [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
     * 
     */
    private final EndConditionResponse success;
    /**
     * @return [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
     * 
     */
    private final String timeout;

    @CustomType.Constructor
    private GetWaiterResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("done") Boolean done,
        @CustomType.Parameter("error") StatusResponse error,
        @CustomType.Parameter("failure") EndConditionResponse failure,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("success") EndConditionResponse success,
        @CustomType.Parameter("timeout") String timeout) {
        this.createTime = createTime;
        this.done = done;
        this.error = error;
        this.failure = failure;
        this.name = name;
        this.success = success;
        this.timeout = timeout;
    }

    /**
     * @return The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.
     * 
     */
    public Boolean done() {
        return this.done;
    }
    /**
     * @return If the waiter ended due to a failure or timeout, this value will be set.
     * 
     */
    public StatusResponse error() {
        return this.error;
    }
    /**
     * @return [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
     * 
     */
    public EndConditionResponse failure() {
        return this.failure;
    }
    /**
     * @return The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
     * 
     */
    public EndConditionResponse success() {
        return this.success;
    }
    /**
     * @return [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
     * 
     */
    public String timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWaiterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private Boolean done;
        private StatusResponse error;
        private EndConditionResponse failure;
        private String name;
        private EndConditionResponse success;
        private String timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWaiterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.done = defaults.done;
    	      this.error = defaults.error;
    	      this.failure = defaults.failure;
    	      this.name = defaults.name;
    	      this.success = defaults.success;
    	      this.timeout = defaults.timeout;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder done(Boolean done) {
            this.done = Objects.requireNonNull(done);
            return this;
        }
        public Builder error(StatusResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        public Builder failure(EndConditionResponse failure) {
            this.failure = Objects.requireNonNull(failure);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder success(EndConditionResponse success) {
            this.success = Objects.requireNonNull(success);
            return this;
        }
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }        public GetWaiterResult build() {
            return new GetWaiterResult(createTime, done, error, failure, name, success, timeout);
        }
    }
}
