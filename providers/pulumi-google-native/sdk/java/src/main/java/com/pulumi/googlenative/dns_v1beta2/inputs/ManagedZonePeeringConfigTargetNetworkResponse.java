// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ManagedZonePeeringConfigTargetNetworkResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedZonePeeringConfigTargetNetworkResponse Empty = new ManagedZonePeeringConfigTargetNetworkResponse();

    /**
     * The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
     * 
     */
    @Import(name="deactivateTime", required=true)
    private String deactivateTime;

    /**
     * @return The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
     * 
     */
    public String deactivateTime() {
        return this.deactivateTime;
    }

    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
     * 
     */
    @Import(name="networkUrl", required=true)
    private String networkUrl;

    /**
     * @return The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
     * 
     */
    public String networkUrl() {
        return this.networkUrl;
    }

    private ManagedZonePeeringConfigTargetNetworkResponse() {}

    private ManagedZonePeeringConfigTargetNetworkResponse(ManagedZonePeeringConfigTargetNetworkResponse $) {
        this.deactivateTime = $.deactivateTime;
        this.kind = $.kind;
        this.networkUrl = $.networkUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZonePeeringConfigTargetNetworkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZonePeeringConfigTargetNetworkResponse $;

        public Builder() {
            $ = new ManagedZonePeeringConfigTargetNetworkResponse();
        }

        public Builder(ManagedZonePeeringConfigTargetNetworkResponse defaults) {
            $ = new ManagedZonePeeringConfigTargetNetworkResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param deactivateTime The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
         * 
         * @return builder
         * 
         */
        public Builder deactivateTime(String deactivateTime) {
            $.deactivateTime = deactivateTime;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param networkUrl The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
         * 
         * @return builder
         * 
         */
        public Builder networkUrl(String networkUrl) {
            $.networkUrl = networkUrl;
            return this;
        }

        public ManagedZonePeeringConfigTargetNetworkResponse build() {
            $.deactivateTime = Objects.requireNonNull($.deactivateTime, "expected parameter 'deactivateTime' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.networkUrl = Objects.requireNonNull($.networkUrl, "expected parameter 'networkUrl' to be non-null");
            return $;
        }
    }

}
