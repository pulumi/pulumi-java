// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement.v1.inputs.MetricRuleArgs;
import com.pulumi.googlenative.servicemanagement.v1.inputs.QuotaLimitArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: &#34;1/min/{project}&#34; # rate limit for consumer projects values: STANDARD: 10000 # The metric rules bind all methods to the read_calls metric, # except for the UpdateBook and DeleteBook methods. These two methods # are mapped to the write_calls metric, with the UpdateBook method # consuming at twice rate as the DeleteBook method. metric_rules: - selector: &#34;*&#34; metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64
 * 
 */
public final class QuotaArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuotaArgs Empty = new QuotaArgs();

    /**
     * List of `QuotaLimit` definitions for the service.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<List<QuotaLimitArgs>> limits;

    /**
     * @return List of `QuotaLimit` definitions for the service.
     * 
     */
    public Optional<Output<List<QuotaLimitArgs>>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
     * 
     */
    @Import(name="metricRules")
    private @Nullable Output<List<MetricRuleArgs>> metricRules;

    /**
     * @return List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
     * 
     */
    public Optional<Output<List<MetricRuleArgs>>> metricRules() {
        return Optional.ofNullable(this.metricRules);
    }

    private QuotaArgs() {}

    private QuotaArgs(QuotaArgs $) {
        this.limits = $.limits;
        this.metricRules = $.metricRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaArgs $;

        public Builder() {
            $ = new QuotaArgs();
        }

        public Builder(QuotaArgs defaults) {
            $ = new QuotaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limits List of `QuotaLimit` definitions for the service.
         * 
         * @return builder
         * 
         */
        public Builder limits(@Nullable Output<List<QuotaLimitArgs>> limits) {
            $.limits = limits;
            return this;
        }

        /**
         * @param limits List of `QuotaLimit` definitions for the service.
         * 
         * @return builder
         * 
         */
        public Builder limits(List<QuotaLimitArgs> limits) {
            return limits(Output.of(limits));
        }

        /**
         * @param limits List of `QuotaLimit` definitions for the service.
         * 
         * @return builder
         * 
         */
        public Builder limits(QuotaLimitArgs... limits) {
            return limits(List.of(limits));
        }

        /**
         * @param metricRules List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
         * 
         * @return builder
         * 
         */
        public Builder metricRules(@Nullable Output<List<MetricRuleArgs>> metricRules) {
            $.metricRules = metricRules;
            return this;
        }

        /**
         * @param metricRules List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
         * 
         * @return builder
         * 
         */
        public Builder metricRules(List<MetricRuleArgs> metricRules) {
            return metricRules(Output.of(metricRules));
        }

        /**
         * @param metricRules List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
         * 
         * @return builder
         * 
         */
        public Builder metricRules(MetricRuleArgs... metricRules) {
            return metricRules(List.of(metricRules));
        }

        public QuotaArgs build() {
            return $;
        }
    }

}
