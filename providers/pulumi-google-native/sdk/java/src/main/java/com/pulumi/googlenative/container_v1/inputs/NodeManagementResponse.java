// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.AutoUpgradeOptionsResponse;
import java.lang.Boolean;
import java.util.Objects;


/**
 * NodeManagement defines the set of node management services turned on for the node pool.
 * 
 */
public final class NodeManagementResponse extends com.pulumi.resources.InvokeArgs {

    public static final NodeManagementResponse Empty = new NodeManagementResponse();

    /**
     * A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
     * 
     */
    @Import(name="autoRepair", required=true)
    private Boolean autoRepair;

    public Boolean autoRepair() {
        return this.autoRepair;
    }

    /**
     * A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
     * 
     */
    @Import(name="autoUpgrade", required=true)
    private Boolean autoUpgrade;

    public Boolean autoUpgrade() {
        return this.autoUpgrade;
    }

    /**
     * Specifies the Auto Upgrade knobs for the node pool.
     * 
     */
    @Import(name="upgradeOptions", required=true)
    private AutoUpgradeOptionsResponse upgradeOptions;

    public AutoUpgradeOptionsResponse upgradeOptions() {
        return this.upgradeOptions;
    }

    private NodeManagementResponse() {}

    private NodeManagementResponse(NodeManagementResponse $) {
        this.autoRepair = $.autoRepair;
        this.autoUpgrade = $.autoUpgrade;
        this.upgradeOptions = $.upgradeOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeManagementResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeManagementResponse $;

        public Builder() {
            $ = new NodeManagementResponse();
        }

        public Builder(NodeManagementResponse defaults) {
            $ = new NodeManagementResponse(Objects.requireNonNull(defaults));
        }

        public Builder autoRepair(Boolean autoRepair) {
            $.autoRepair = autoRepair;
            return this;
        }

        public Builder autoUpgrade(Boolean autoUpgrade) {
            $.autoUpgrade = autoUpgrade;
            return this;
        }

        public Builder upgradeOptions(AutoUpgradeOptionsResponse upgradeOptions) {
            $.upgradeOptions = upgradeOptions;
            return this;
        }

        public NodeManagementResponse build() {
            $.autoRepair = Objects.requireNonNull($.autoRepair, "expected parameter 'autoRepair' to be non-null");
            $.autoUpgrade = Objects.requireNonNull($.autoUpgrade, "expected parameter 'autoUpgrade' to be non-null");
            $.upgradeOptions = Objects.requireNonNull($.upgradeOptions, "expected parameter 'upgradeOptions' to be non-null");
            return $;
        }
    }

}
