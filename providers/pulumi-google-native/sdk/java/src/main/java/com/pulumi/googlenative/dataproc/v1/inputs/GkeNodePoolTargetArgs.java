// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc.v1.enums.GkeNodePoolTargetRolesItem;
import com.pulumi.googlenative.dataproc.v1.inputs.GkeNodePoolConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * GKE node pools that Dataproc workloads run on.
 * 
 */
public final class GkeNodePoolTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GkeNodePoolTargetArgs Empty = new GkeNodePoolTargetArgs();

    /**
     * The target GKE node pool. Format: &#39;projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}&#39;
     * 
     */
    @Import(name="nodePool", required=true)
    private Output<String> nodePool;

    /**
     * @return The target GKE node pool. Format: &#39;projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}&#39;
     * 
     */
    public Output<String> nodePool() {
        return this.nodePool;
    }

    /**
     * Input only. The configuration for the GKE node pool.If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail.If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values.This is an input only field. It will not be returned by the API.
     * 
     */
    @Import(name="nodePoolConfig")
    private @Nullable Output<GkeNodePoolConfigArgs> nodePoolConfig;

    /**
     * @return Input only. The configuration for the GKE node pool.If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail.If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values.This is an input only field. It will not be returned by the API.
     * 
     */
    public Optional<Output<GkeNodePoolConfigArgs>> nodePoolConfig() {
        return Optional.ofNullable(this.nodePoolConfig);
    }

    /**
     * The roles associated with the GKE node pool.
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<GkeNodePoolTargetRolesItem>> roles;

    /**
     * @return The roles associated with the GKE node pool.
     * 
     */
    public Output<List<GkeNodePoolTargetRolesItem>> roles() {
        return this.roles;
    }

    private GkeNodePoolTargetArgs() {}

    private GkeNodePoolTargetArgs(GkeNodePoolTargetArgs $) {
        this.nodePool = $.nodePool;
        this.nodePoolConfig = $.nodePoolConfig;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GkeNodePoolTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GkeNodePoolTargetArgs $;

        public Builder() {
            $ = new GkeNodePoolTargetArgs();
        }

        public Builder(GkeNodePoolTargetArgs defaults) {
            $ = new GkeNodePoolTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodePool The target GKE node pool. Format: &#39;projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}&#39;
         * 
         * @return builder
         * 
         */
        public Builder nodePool(Output<String> nodePool) {
            $.nodePool = nodePool;
            return this;
        }

        /**
         * @param nodePool The target GKE node pool. Format: &#39;projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}&#39;
         * 
         * @return builder
         * 
         */
        public Builder nodePool(String nodePool) {
            return nodePool(Output.of(nodePool));
        }

        /**
         * @param nodePoolConfig Input only. The configuration for the GKE node pool.If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail.If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values.This is an input only field. It will not be returned by the API.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolConfig(@Nullable Output<GkeNodePoolConfigArgs> nodePoolConfig) {
            $.nodePoolConfig = nodePoolConfig;
            return this;
        }

        /**
         * @param nodePoolConfig Input only. The configuration for the GKE node pool.If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail.If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values.This is an input only field. It will not be returned by the API.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolConfig(GkeNodePoolConfigArgs nodePoolConfig) {
            return nodePoolConfig(Output.of(nodePoolConfig));
        }

        /**
         * @param roles The roles associated with the GKE node pool.
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<GkeNodePoolTargetRolesItem>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The roles associated with the GKE node pool.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<GkeNodePoolTargetRolesItem> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The roles associated with the GKE node pool.
         * 
         * @return builder
         * 
         */
        public Builder roles(GkeNodePoolTargetRolesItem... roles) {
            return roles(List.of(roles));
        }

        public GkeNodePoolTargetArgs build() {
            $.nodePool = Objects.requireNonNull($.nodePool, "expected parameter 'nodePool' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            return $;
        }
    }

}
