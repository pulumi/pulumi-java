// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The BigQuery table where the server writes output.
 * 
 */
public final class GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse Empty = new GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse();

    /**
     * Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    @Import(name="force", required=true)
    private Boolean force;

    /**
     * @return Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    public Boolean force() {
        return this.force;
    }

    /**
     * BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
     * 
     */
    @Import(name="tableUri", required=true)
    private String tableUri;

    /**
     * @return BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
     * 
     */
    public String tableUri() {
        return this.tableUri;
    }

    /**
     * Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    @Import(name="writeDisposition", required=true)
    private String writeDisposition;

    /**
     * @return Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    public String writeDisposition() {
        return this.writeDisposition;
    }

    private GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse() {}

    private GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse(GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse $) {
        this.force = $.force;
        this.tableUri = $.tableUri;
        this.writeDisposition = $.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse $;

        public Builder() {
            $ = new GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse();
        }

        public Builder(GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse defaults) {
            $ = new GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param force Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            $.force = force;
            return this;
        }

        /**
         * @param tableUri BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
         * 
         * @return builder
         * 
         */
        public Builder tableUri(String tableUri) {
            $.tableUri = tableUri;
            return this;
        }

        /**
         * @param writeDisposition Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
         * 
         * @return builder
         * 
         */
        public Builder writeDisposition(String writeDisposition) {
            $.writeDisposition = writeDisposition;
            return this;
        }

        public GoogleCloudHealthcareV1beta1DicomBigQueryDestinationResponse build() {
            $.force = Objects.requireNonNull($.force, "expected parameter 'force' to be non-null");
            $.tableUri = Objects.requireNonNull($.tableUri, "expected parameter 'tableUri' to be non-null");
            $.writeDisposition = Objects.requireNonNull($.writeDisposition, "expected parameter 'writeDisposition' to be non-null");
            return $;
        }
    }

}
