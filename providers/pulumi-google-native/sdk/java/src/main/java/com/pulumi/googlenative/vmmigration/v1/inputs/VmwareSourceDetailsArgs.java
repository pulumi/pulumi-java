// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VmwareSourceDetails message describes a specific source details for the vmware source type.
 * 
 */
public final class VmwareSourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmwareSourceDetailsArgs Empty = new VmwareSourceDetailsArgs();

    /**
     * Input only. The credentials password. This is write only and can not be read in a GET operation.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Input only. The credentials password. This is write only and can not be read in a GET operation.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The thumbprint representing the certificate for the vcenter.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The thumbprint representing the certificate for the vcenter.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    /**
     * The credentials username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The credentials username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * The ip address of the vcenter this Source represents.
     * 
     */
    @Import(name="vcenterIp")
    private @Nullable Output<String> vcenterIp;

    /**
     * @return The ip address of the vcenter this Source represents.
     * 
     */
    public Optional<Output<String>> vcenterIp() {
        return Optional.ofNullable(this.vcenterIp);
    }

    private VmwareSourceDetailsArgs() {}

    private VmwareSourceDetailsArgs(VmwareSourceDetailsArgs $) {
        this.password = $.password;
        this.thumbprint = $.thumbprint;
        this.username = $.username;
        this.vcenterIp = $.vcenterIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareSourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareSourceDetailsArgs $;

        public Builder() {
            $ = new VmwareSourceDetailsArgs();
        }

        public Builder(VmwareSourceDetailsArgs defaults) {
            $ = new VmwareSourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Input only. The credentials password. This is write only and can not be read in a GET operation.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Input only. The credentials password. This is write only and can not be read in a GET operation.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param thumbprint The thumbprint representing the certificate for the vcenter.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The thumbprint representing the certificate for the vcenter.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        /**
         * @param username The credentials username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The credentials username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vcenterIp The ip address of the vcenter this Source represents.
         * 
         * @return builder
         * 
         */
        public Builder vcenterIp(@Nullable Output<String> vcenterIp) {
            $.vcenterIp = vcenterIp;
            return this;
        }

        /**
         * @param vcenterIp The ip address of the vcenter this Source represents.
         * 
         * @return builder
         * 
         */
        public Builder vcenterIp(String vcenterIp) {
            return vcenterIp(Output.of(vcenterIp));
        }

        public VmwareSourceDetailsArgs build() {
            return $;
        }
    }

}
