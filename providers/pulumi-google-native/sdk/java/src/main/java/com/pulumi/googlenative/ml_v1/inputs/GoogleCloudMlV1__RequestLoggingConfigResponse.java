// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Configuration for logging request-response pairs to a BigQuery table. Online prediction requests to a model version and the responses to these requests are converted to raw strings and saved to the specified BigQuery table. Logging is constrained by [BigQuery quotas and limits](/bigquery/quotas). If your project exceeds BigQuery quotas or limits, AI Platform Prediction does not log request-response pairs, but it continues to serve predictions. If you are using [continuous evaluation](/ml-engine/docs/continuous-evaluation/), you do not need to specify this configuration manually. Setting up continuous evaluation automatically enables logging of request-response pairs.
 * 
 */
public final class GoogleCloudMlV1__RequestLoggingConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudMlV1__RequestLoggingConfigResponse Empty = new GoogleCloudMlV1__RequestLoggingConfigResponse();

    /**
     * Fully qualified BigQuery table name in the following format: &#34; project_id.dataset_name.table_name&#34; The specified table must already exist, and the &#34;Cloud ML Service Agent&#34; for your project must have permission to write to it. The table must have the following [schema](/bigquery/docs/schemas): Field nameType Mode model STRING REQUIRED model_version STRING REQUIRED time TIMESTAMP REQUIRED raw_data STRING REQUIRED raw_prediction STRING NULLABLE groundtruth STRING NULLABLE
     * 
     */
    @Import(name="bigqueryTableName", required=true)
    private String bigqueryTableName;

    public String bigqueryTableName() {
        return this.bigqueryTableName;
    }

    /**
     * Percentage of requests to be logged, expressed as a fraction from 0 to 1. For example, if you want to log 10% of requests, enter `0.1`. The sampling window is the lifetime of the model version. Defaults to 0.
     * 
     */
    @Import(name="samplingPercentage", required=true)
    private Double samplingPercentage;

    public Double samplingPercentage() {
        return this.samplingPercentage;
    }

    private GoogleCloudMlV1__RequestLoggingConfigResponse() {}

    private GoogleCloudMlV1__RequestLoggingConfigResponse(GoogleCloudMlV1__RequestLoggingConfigResponse $) {
        this.bigqueryTableName = $.bigqueryTableName;
        this.samplingPercentage = $.samplingPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1__RequestLoggingConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__RequestLoggingConfigResponse $;

        public Builder() {
            $ = new GoogleCloudMlV1__RequestLoggingConfigResponse();
        }

        public Builder(GoogleCloudMlV1__RequestLoggingConfigResponse defaults) {
            $ = new GoogleCloudMlV1__RequestLoggingConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder bigqueryTableName(String bigqueryTableName) {
            $.bigqueryTableName = bigqueryTableName;
            return this;
        }

        public Builder samplingPercentage(Double samplingPercentage) {
            $.samplingPercentage = samplingPercentage;
            return this;
        }

        public GoogleCloudMlV1__RequestLoggingConfigResponse build() {
            $.bigqueryTableName = Objects.requireNonNull($.bigqueryTableName, "expected parameter 'bigqueryTableName' to be non-null");
            $.samplingPercentage = Objects.requireNonNull($.samplingPercentage, "expected parameter 'samplingPercentage' to be non-null");
            return $;
        }
    }

}
