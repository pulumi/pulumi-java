// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.CloudRunRewriteResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
 * 
 */
public final class RewriteResponse extends com.pulumi.resources.InvokeArgs {

    public static final RewriteResponse Empty = new RewriteResponse();

    /**
     * The request will be forwarded to Firebase Dynamic Links.
     * 
     */
    @Import(name="dynamicLinks", required=true)
    private Boolean dynamicLinks;

    /**
     * @return The request will be forwarded to Firebase Dynamic Links.
     * 
     */
    public Boolean dynamicLinks() {
        return this.dynamicLinks;
    }

    /**
     * The function to proxy requests to. Must match the exported function name exactly.
     * 
     */
    @Import(name="function", required=true)
    private String function;

    /**
     * @return The function to proxy requests to. Must match the exported function name exactly.
     * 
     */
    public String function() {
        return this.function;
    }

    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     * 
     */
    @Import(name="glob", required=true)
    private String glob;

    /**
     * @return The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     * 
     */
    public String glob() {
        return this.glob;
    }

    /**
     * The URL path to rewrite the request to.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return The URL path to rewrite the request to.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     * 
     */
    @Import(name="regex", required=true)
    private String regex;

    /**
     * @return The user-supplied RE2 regular expression to match against the request URL path.
     * 
     */
    public String regex() {
        return this.regex;
    }

    /**
     * The request will be forwarded to Cloud Run.
     * 
     */
    @Import(name="run", required=true)
    private CloudRunRewriteResponse run;

    /**
     * @return The request will be forwarded to Cloud Run.
     * 
     */
    public CloudRunRewriteResponse run() {
        return this.run;
    }

    private RewriteResponse() {}

    private RewriteResponse(RewriteResponse $) {
        this.dynamicLinks = $.dynamicLinks;
        this.function = $.function;
        this.glob = $.glob;
        this.path = $.path;
        this.regex = $.regex;
        this.run = $.run;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RewriteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RewriteResponse $;

        public Builder() {
            $ = new RewriteResponse();
        }

        public Builder(RewriteResponse defaults) {
            $ = new RewriteResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dynamicLinks The request will be forwarded to Firebase Dynamic Links.
         * 
         * @return builder
         * 
         */
        public Builder dynamicLinks(Boolean dynamicLinks) {
            $.dynamicLinks = dynamicLinks;
            return this;
        }

        /**
         * @param function The function to proxy requests to. Must match the exported function name exactly.
         * 
         * @return builder
         * 
         */
        public Builder function(String function) {
            $.function = function;
            return this;
        }

        /**
         * @param glob The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
         * 
         * @return builder
         * 
         */
        public Builder glob(String glob) {
            $.glob = glob;
            return this;
        }

        /**
         * @param path The URL path to rewrite the request to.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param regex The user-supplied RE2 regular expression to match against the request URL path.
         * 
         * @return builder
         * 
         */
        public Builder regex(String regex) {
            $.regex = regex;
            return this;
        }

        /**
         * @param run The request will be forwarded to Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder run(CloudRunRewriteResponse run) {
            $.run = run;
            return this;
        }

        public RewriteResponse build() {
            $.dynamicLinks = Objects.requireNonNull($.dynamicLinks, "expected parameter 'dynamicLinks' to be non-null");
            $.function = Objects.requireNonNull($.function, "expected parameter 'function' to be non-null");
            $.glob = Objects.requireNonNull($.glob, "expected parameter 'glob' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.regex = Objects.requireNonNull($.regex, "expected parameter 'regex' to be non-null");
            $.run = Objects.requireNonNull($.run, "expected parameter 'run' to be non-null");
            return $;
        }
    }

}
