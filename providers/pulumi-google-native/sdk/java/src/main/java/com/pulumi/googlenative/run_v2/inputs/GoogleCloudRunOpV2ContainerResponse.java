// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2ContainerPortResponse;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2EnvVarResponse;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2ResourceRequirementsResponse;
import com.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2VolumeMountResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 * 
 */
public final class GoogleCloudRunOpV2ContainerResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudRunOpV2ContainerResponse Empty = new GoogleCloudRunOpV2ContainerResponse();

    /**
     * Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @Import(name="args", required=true)
    private List<String> args;

    public List<String> args() {
        return this.args;
    }

    /**
     * Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @Import(name="command", required=true)
    private List<String> command;

    public List<String> command() {
        return this.command;
    }

    /**
     * List of environment variables to set in the container.
     * 
     */
    @Import(name="env", required=true)
    private List<GoogleCloudRunOpV2EnvVarResponse> env;

    public List<GoogleCloudRunOpV2EnvVarResponse> env() {
        return this.env;
    }

    /**
     * URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    @Import(name="image", required=true)
    private String image;

    public String image() {
        return this.image;
    }

    /**
     * Name of the container specified as a DNS_LABEL.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     * 
     */
    @Import(name="ports", required=true)
    private List<GoogleCloudRunOpV2ContainerPortResponse> ports;

    public List<GoogleCloudRunOpV2ContainerPortResponse> ports() {
        return this.ports;
    }

    /**
     * Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * 
     */
    @Import(name="resources", required=true)
    private GoogleCloudRunOpV2ResourceRequirementsResponse resources;

    public GoogleCloudRunOpV2ResourceRequirementsResponse resources() {
        return this.resources;
    }

    /**
     * Volume to mount into the container&#39;s filesystem.
     * 
     */
    @Import(name="volumeMounts", required=true)
    private List<GoogleCloudRunOpV2VolumeMountResponse> volumeMounts;

    public List<GoogleCloudRunOpV2VolumeMountResponse> volumeMounts() {
        return this.volumeMounts;
    }

    private GoogleCloudRunOpV2ContainerResponse() {}

    private GoogleCloudRunOpV2ContainerResponse(GoogleCloudRunOpV2ContainerResponse $) {
        this.args = $.args;
        this.command = $.command;
        this.env = $.env;
        this.image = $.image;
        this.name = $.name;
        this.ports = $.ports;
        this.resources = $.resources;
        this.volumeMounts = $.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudRunOpV2ContainerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRunOpV2ContainerResponse $;

        public Builder() {
            $ = new GoogleCloudRunOpV2ContainerResponse();
        }

        public Builder(GoogleCloudRunOpV2ContainerResponse defaults) {
            $ = new GoogleCloudRunOpV2ContainerResponse(Objects.requireNonNull(defaults));
        }

        public Builder args(List<String> args) {
            $.args = args;
            return this;
        }

        public Builder args(String... args) {
            return args(List.of(args));
        }

        public Builder command(List<String> command) {
            $.command = command;
            return this;
        }

        public Builder command(String... command) {
            return command(List.of(command));
        }

        public Builder env(List<GoogleCloudRunOpV2EnvVarResponse> env) {
            $.env = env;
            return this;
        }

        public Builder env(GoogleCloudRunOpV2EnvVarResponse... env) {
            return env(List.of(env));
        }

        public Builder image(String image) {
            $.image = image;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder ports(List<GoogleCloudRunOpV2ContainerPortResponse> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(GoogleCloudRunOpV2ContainerPortResponse... ports) {
            return ports(List.of(ports));
        }

        public Builder resources(GoogleCloudRunOpV2ResourceRequirementsResponse resources) {
            $.resources = resources;
            return this;
        }

        public Builder volumeMounts(List<GoogleCloudRunOpV2VolumeMountResponse> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        public Builder volumeMounts(GoogleCloudRunOpV2VolumeMountResponse... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public GoogleCloudRunOpV2ContainerResponse build() {
            $.args = Objects.requireNonNull($.args, "expected parameter 'args' to be non-null");
            $.command = Objects.requireNonNull($.command, "expected parameter 'command' to be non-null");
            $.env = Objects.requireNonNull($.env, "expected parameter 'env' to be non-null");
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.ports = Objects.requireNonNull($.ports, "expected parameter 'ports' to be non-null");
            $.resources = Objects.requireNonNull($.resources, "expected parameter 'resources' to be non-null");
            $.volumeMounts = Objects.requireNonNull($.volumeMounts, "expected parameter 'volumeMounts' to be non-null");
            return $;
        }
    }

}
