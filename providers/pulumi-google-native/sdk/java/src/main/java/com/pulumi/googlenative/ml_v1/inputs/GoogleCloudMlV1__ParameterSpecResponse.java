// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Represents a single hyperparameter to optimize.
 * 
 */
public final class GoogleCloudMlV1__ParameterSpecResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudMlV1__ParameterSpecResponse Empty = new GoogleCloudMlV1__ParameterSpecResponse();

    /**
     * Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    @Import(name="categoricalValues", required=true)
    private List<String> categoricalValues;

    /**
     * @return Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    public List<String> categoricalValues() {
        return this.categoricalValues;
    }

    /**
     * Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    @Import(name="discreteValues", required=true)
    private List<Double> discreteValues;

    /**
     * @return Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    public List<Double> discreteValues() {
        return this.discreteValues;
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    @Import(name="maxValue", required=true)
    private Double maxValue;

    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    public Double maxValue() {
        return this.maxValue;
    }

    /**
     * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    @Import(name="minValue", required=true)
    private Double minValue;

    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    public Double minValue() {
        return this.minValue;
    }

    /**
     * The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
     * 
     */
    @Import(name="parameterName", required=true)
    private String parameterName;

    /**
     * @return The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
     * 
     */
    public String parameterName() {
        return this.parameterName;
    }

    /**
     * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    @Import(name="scaleType", required=true)
    private String scaleType;

    /**
     * @return Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    public String scaleType() {
        return this.scaleType;
    }

    /**
     * The type of the parameter.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of the parameter.
     * 
     */
    public String type() {
        return this.type;
    }

    private GoogleCloudMlV1__ParameterSpecResponse() {}

    private GoogleCloudMlV1__ParameterSpecResponse(GoogleCloudMlV1__ParameterSpecResponse $) {
        this.categoricalValues = $.categoricalValues;
        this.discreteValues = $.discreteValues;
        this.maxValue = $.maxValue;
        this.minValue = $.minValue;
        this.parameterName = $.parameterName;
        this.scaleType = $.scaleType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1__ParameterSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__ParameterSpecResponse $;

        public Builder() {
            $ = new GoogleCloudMlV1__ParameterSpecResponse();
        }

        public Builder(GoogleCloudMlV1__ParameterSpecResponse defaults) {
            $ = new GoogleCloudMlV1__ParameterSpecResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoricalValues Required if type is `CATEGORICAL`. The list of possible categories.
         * 
         * @return builder
         * 
         */
        public Builder categoricalValues(List<String> categoricalValues) {
            $.categoricalValues = categoricalValues;
            return this;
        }

        /**
         * @param categoricalValues Required if type is `CATEGORICAL`. The list of possible categories.
         * 
         * @return builder
         * 
         */
        public Builder categoricalValues(String... categoricalValues) {
            return categoricalValues(List.of(categoricalValues));
        }

        /**
         * @param discreteValues Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
         * 
         * @return builder
         * 
         */
        public Builder discreteValues(List<Double> discreteValues) {
            $.discreteValues = discreteValues;
            return this;
        }

        /**
         * @param discreteValues Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
         * 
         * @return builder
         * 
         */
        public Builder discreteValues(Double... discreteValues) {
            return discreteValues(List.of(discreteValues));
        }

        /**
         * @param maxValue Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(Double maxValue) {
            $.maxValue = maxValue;
            return this;
        }

        /**
         * @param minValue Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
         * 
         * @return builder
         * 
         */
        public Builder minValue(Double minValue) {
            $.minValue = minValue;
            return this;
        }

        /**
         * @param parameterName The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
         * 
         * @return builder
         * 
         */
        public Builder parameterName(String parameterName) {
            $.parameterName = parameterName;
            return this;
        }

        /**
         * @param scaleType Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
         * 
         * @return builder
         * 
         */
        public Builder scaleType(String scaleType) {
            $.scaleType = scaleType;
            return this;
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GoogleCloudMlV1__ParameterSpecResponse build() {
            $.categoricalValues = Objects.requireNonNull($.categoricalValues, "expected parameter 'categoricalValues' to be non-null");
            $.discreteValues = Objects.requireNonNull($.discreteValues, "expected parameter 'discreteValues' to be non-null");
            $.maxValue = Objects.requireNonNull($.maxValue, "expected parameter 'maxValue' to be non-null");
            $.minValue = Objects.requireNonNull($.minValue, "expected parameter 'minValue' to be non-null");
            $.parameterName = Objects.requireNonNull($.parameterName, "expected parameter 'parameterName' to be non-null");
            $.scaleType = Objects.requireNonNull($.scaleType, "expected parameter 'scaleType' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
