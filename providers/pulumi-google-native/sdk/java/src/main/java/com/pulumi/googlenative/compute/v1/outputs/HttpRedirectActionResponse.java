// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class HttpRedirectActionResponse {
    /**
     * @return The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
     * 
     */
    private final String hostRedirect;
    /**
     * @return If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
     * 
     */
    private final Boolean httpsRedirect;
    /**
     * @return The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    private final String pathRedirect;
    /**
     * @return The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    private final String prefixRedirect;
    /**
     * @return The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained.
     * 
     */
    private final String redirectResponseCode;
    /**
     * @return If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
     * 
     */
    private final Boolean stripQuery;

    @CustomType.Constructor
    private HttpRedirectActionResponse(
        @CustomType.Parameter("hostRedirect") String hostRedirect,
        @CustomType.Parameter("httpsRedirect") Boolean httpsRedirect,
        @CustomType.Parameter("pathRedirect") String pathRedirect,
        @CustomType.Parameter("prefixRedirect") String prefixRedirect,
        @CustomType.Parameter("redirectResponseCode") String redirectResponseCode,
        @CustomType.Parameter("stripQuery") Boolean stripQuery) {
        this.hostRedirect = hostRedirect;
        this.httpsRedirect = httpsRedirect;
        this.pathRedirect = pathRedirect;
        this.prefixRedirect = prefixRedirect;
        this.redirectResponseCode = redirectResponseCode;
        this.stripQuery = stripQuery;
    }

    /**
     * @return The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
     * 
     */
    public String hostRedirect() {
        return this.hostRedirect;
    }
    /**
     * @return If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
     * 
     */
    public Boolean httpsRedirect() {
        return this.httpsRedirect;
    }
    /**
     * @return The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    public String pathRedirect() {
        return this.pathRedirect;
    }
    /**
     * @return The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    public String prefixRedirect() {
        return this.prefixRedirect;
    }
    /**
     * @return The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained.
     * 
     */
    public String redirectResponseCode() {
        return this.redirectResponseCode;
    }
    /**
     * @return If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
     * 
     */
    public Boolean stripQuery() {
        return this.stripQuery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRedirectActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String hostRedirect;
        private Boolean httpsRedirect;
        private String pathRedirect;
        private String prefixRedirect;
        private String redirectResponseCode;
        private Boolean stripQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRedirectActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostRedirect = defaults.hostRedirect;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.pathRedirect = defaults.pathRedirect;
    	      this.prefixRedirect = defaults.prefixRedirect;
    	      this.redirectResponseCode = defaults.redirectResponseCode;
    	      this.stripQuery = defaults.stripQuery;
        }

        public Builder hostRedirect(String hostRedirect) {
            this.hostRedirect = Objects.requireNonNull(hostRedirect);
            return this;
        }
        public Builder httpsRedirect(Boolean httpsRedirect) {
            this.httpsRedirect = Objects.requireNonNull(httpsRedirect);
            return this;
        }
        public Builder pathRedirect(String pathRedirect) {
            this.pathRedirect = Objects.requireNonNull(pathRedirect);
            return this;
        }
        public Builder prefixRedirect(String prefixRedirect) {
            this.prefixRedirect = Objects.requireNonNull(prefixRedirect);
            return this;
        }
        public Builder redirectResponseCode(String redirectResponseCode) {
            this.redirectResponseCode = Objects.requireNonNull(redirectResponseCode);
            return this;
        }
        public Builder stripQuery(Boolean stripQuery) {
            this.stripQuery = Objects.requireNonNull(stripQuery);
            return this;
        }        public HttpRedirectActionResponse build() {
            return new HttpRedirectActionResponse(hostRedirect, httpsRedirect, pathRedirect, prefixRedirect, redirectResponseCode, stripQuery);
        }
    }
}
