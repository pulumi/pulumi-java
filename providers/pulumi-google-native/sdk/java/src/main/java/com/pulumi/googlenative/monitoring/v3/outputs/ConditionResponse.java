// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v3.outputs.LogMatchResponse;
import com.pulumi.googlenative.monitoring.v3.outputs.MetricAbsenceResponse;
import com.pulumi.googlenative.monitoring.v3.outputs.MetricThresholdResponse;
import com.pulumi.googlenative.monitoring.v3.outputs.MonitoringQueryLanguageConditionResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ConditionResponse {
    /**
     * @return A condition that checks that a time series continues to receive new data points.
     * 
     */
    private final MetricAbsenceResponse conditionAbsent;
    /**
     * @return A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
     * 
     */
    private final LogMatchResponse conditionMatchedLog;
    /**
     * @return A condition that uses the Monitoring Query Language to define alerts.
     * 
     */
    private final MonitoringQueryLanguageConditionResponse conditionMonitoringQueryLanguage;
    /**
     * @return A condition that compares a time series against a threshold.
     * 
     */
    private final MetricThresholdResponse conditionThreshold;
    /**
     * @return A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don&#39;t use the same display name for multiple conditions in the same policy.
     * 
     */
    private final String displayName;
    /**
     * @return Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
     * 
     */
    private final String name;

    @CustomType.Constructor
    private ConditionResponse(
        @CustomType.Parameter("conditionAbsent") MetricAbsenceResponse conditionAbsent,
        @CustomType.Parameter("conditionMatchedLog") LogMatchResponse conditionMatchedLog,
        @CustomType.Parameter("conditionMonitoringQueryLanguage") MonitoringQueryLanguageConditionResponse conditionMonitoringQueryLanguage,
        @CustomType.Parameter("conditionThreshold") MetricThresholdResponse conditionThreshold,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("name") String name) {
        this.conditionAbsent = conditionAbsent;
        this.conditionMatchedLog = conditionMatchedLog;
        this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
        this.conditionThreshold = conditionThreshold;
        this.displayName = displayName;
        this.name = name;
    }

    /**
     * @return A condition that checks that a time series continues to receive new data points.
     * 
     */
    public MetricAbsenceResponse conditionAbsent() {
        return this.conditionAbsent;
    }
    /**
     * @return A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
     * 
     */
    public LogMatchResponse conditionMatchedLog() {
        return this.conditionMatchedLog;
    }
    /**
     * @return A condition that uses the Monitoring Query Language to define alerts.
     * 
     */
    public MonitoringQueryLanguageConditionResponse conditionMonitoringQueryLanguage() {
        return this.conditionMonitoringQueryLanguage;
    }
    /**
     * @return A condition that compares a time series against a threshold.
     * 
     */
    public MetricThresholdResponse conditionThreshold() {
        return this.conditionThreshold;
    }
    /**
     * @return A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don&#39;t use the same display name for multiple conditions in the same policy.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAbsenceResponse conditionAbsent;
        private LogMatchResponse conditionMatchedLog;
        private MonitoringQueryLanguageConditionResponse conditionMonitoringQueryLanguage;
        private MetricThresholdResponse conditionThreshold;
        private String displayName;
        private String name;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionAbsent = defaults.conditionAbsent;
    	      this.conditionMatchedLog = defaults.conditionMatchedLog;
    	      this.conditionMonitoringQueryLanguage = defaults.conditionMonitoringQueryLanguage;
    	      this.conditionThreshold = defaults.conditionThreshold;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
        }

        public Builder conditionAbsent(MetricAbsenceResponse conditionAbsent) {
            this.conditionAbsent = Objects.requireNonNull(conditionAbsent);
            return this;
        }
        public Builder conditionMatchedLog(LogMatchResponse conditionMatchedLog) {
            this.conditionMatchedLog = Objects.requireNonNull(conditionMatchedLog);
            return this;
        }
        public Builder conditionMonitoringQueryLanguage(MonitoringQueryLanguageConditionResponse conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = Objects.requireNonNull(conditionMonitoringQueryLanguage);
            return this;
        }
        public Builder conditionThreshold(MetricThresholdResponse conditionThreshold) {
            this.conditionThreshold = Objects.requireNonNull(conditionThreshold);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }        public ConditionResponse build() {
            return new ConditionResponse(conditionAbsent, conditionMatchedLog, conditionMonitoringQueryLanguage, conditionThreshold, displayName, name);
        }
    }
}
