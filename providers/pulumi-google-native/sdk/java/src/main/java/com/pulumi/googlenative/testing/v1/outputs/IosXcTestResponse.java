// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.testing.v1.outputs.FileReferenceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class IosXcTestResponse {
    /**
     * @return The bundle id for the application under test.
     * 
     */
    private final String appBundleId;
    /**
     * @return The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
     * 
     */
    private final Boolean testSpecialEntitlements;
    /**
     * @return The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
     * 
     */
    private final FileReferenceResponse testsZip;
    /**
     * @return The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
     * 
     */
    private final String xcodeVersion;
    /**
     * @return An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
     * 
     */
    private final FileReferenceResponse xctestrun;

    @CustomType.Constructor
    private IosXcTestResponse(
        @CustomType.Parameter("appBundleId") String appBundleId,
        @CustomType.Parameter("testSpecialEntitlements") Boolean testSpecialEntitlements,
        @CustomType.Parameter("testsZip") FileReferenceResponse testsZip,
        @CustomType.Parameter("xcodeVersion") String xcodeVersion,
        @CustomType.Parameter("xctestrun") FileReferenceResponse xctestrun) {
        this.appBundleId = appBundleId;
        this.testSpecialEntitlements = testSpecialEntitlements;
        this.testsZip = testsZip;
        this.xcodeVersion = xcodeVersion;
        this.xctestrun = xctestrun;
    }

    /**
     * @return The bundle id for the application under test.
     * 
     */
    public String appBundleId() {
        return this.appBundleId;
    }
    /**
     * @return The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
     * 
     */
    public Boolean testSpecialEntitlements() {
        return this.testSpecialEntitlements;
    }
    /**
     * @return The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
     * 
     */
    public FileReferenceResponse testsZip() {
        return this.testsZip;
    }
    /**
     * @return The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
     * 
     */
    public String xcodeVersion() {
        return this.xcodeVersion;
    }
    /**
     * @return An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
     * 
     */
    public FileReferenceResponse xctestrun() {
        return this.xctestrun;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IosXcTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appBundleId;
        private Boolean testSpecialEntitlements;
        private FileReferenceResponse testsZip;
        private String xcodeVersion;
        private FileReferenceResponse xctestrun;

        public Builder() {
    	      // Empty
        }

        public Builder(IosXcTestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appBundleId = defaults.appBundleId;
    	      this.testSpecialEntitlements = defaults.testSpecialEntitlements;
    	      this.testsZip = defaults.testsZip;
    	      this.xcodeVersion = defaults.xcodeVersion;
    	      this.xctestrun = defaults.xctestrun;
        }

        public Builder appBundleId(String appBundleId) {
            this.appBundleId = Objects.requireNonNull(appBundleId);
            return this;
        }
        public Builder testSpecialEntitlements(Boolean testSpecialEntitlements) {
            this.testSpecialEntitlements = Objects.requireNonNull(testSpecialEntitlements);
            return this;
        }
        public Builder testsZip(FileReferenceResponse testsZip) {
            this.testsZip = Objects.requireNonNull(testsZip);
            return this;
        }
        public Builder xcodeVersion(String xcodeVersion) {
            this.xcodeVersion = Objects.requireNonNull(xcodeVersion);
            return this;
        }
        public Builder xctestrun(FileReferenceResponse xctestrun) {
            this.xctestrun = Objects.requireNonNull(xctestrun);
            return this;
        }        public IosXcTestResponse build() {
            return new IosXcTestResponse(appBundleId, testSpecialEntitlements, testsZip, xcodeVersion, xctestrun);
        }
    }
}
