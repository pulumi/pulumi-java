// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.toolresults_v1beta3.enums.HistoryTestPlatform;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HistoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final HistoryArgs Empty = new HistoryArgs();

    /**
     * A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
     * 
     */
    @Import(name="historyId")
      private final @Nullable Output<String> historyId;

    public Output<String> historyId() {
        return this.historyId == null ? Codegen.empty() : this.historyId;
    }

    /**
     * A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    /**
     * The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
     * 
     */
    @Import(name="testPlatform")
      private final @Nullable Output<HistoryTestPlatform> testPlatform;

    public Output<HistoryTestPlatform> testPlatform() {
        return this.testPlatform == null ? Codegen.empty() : this.testPlatform;
    }

    public HistoryArgs(
        @Nullable Output<String> displayName,
        @Nullable Output<String> historyId,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        @Nullable Output<HistoryTestPlatform> testPlatform) {
        this.displayName = displayName;
        this.historyId = historyId;
        this.name = name;
        this.project = project;
        this.requestId = requestId;
        this.testPlatform = testPlatform;
    }

    private HistoryArgs() {
        this.displayName = Codegen.empty();
        this.historyId = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.requestId = Codegen.empty();
        this.testPlatform = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HistoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> historyId;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private @Nullable Output<HistoryTestPlatform> testPlatform;

        public Builder() {
    	      // Empty
        }

        public Builder(HistoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.historyId = defaults.historyId;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.testPlatform = defaults.testPlatform;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder historyId(@Nullable Output<String> historyId) {
            this.historyId = historyId;
            return this;
        }
        public Builder historyId(@Nullable String historyId) {
            this.historyId = Codegen.ofNullable(historyId);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }
        public Builder testPlatform(@Nullable Output<HistoryTestPlatform> testPlatform) {
            this.testPlatform = testPlatform;
            return this;
        }
        public Builder testPlatform(@Nullable HistoryTestPlatform testPlatform) {
            this.testPlatform = Codegen.ofNullable(testPlatform);
            return this;
        }        public HistoryArgs build() {
            return new HistoryArgs(displayName, historyId, name, project, requestId, testPlatform);
        }
    }
}
