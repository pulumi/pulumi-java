// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc_v1.inputs.ConfidentialInstanceConfigResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.NodeGroupAffinityResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.ReservationAffinityResponse;
import com.pulumi.googlenative.dataproc_v1.inputs.ShieldedInstanceConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
 * 
 */
public final class GceClusterConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GceClusterConfigResponse Empty = new GceClusterConfigResponse();

    /**
     * Optional. Confidential Instance Config for clusters using Confidential VMs (https://cloud.google.com/compute/confidential-vm/docs).
     * 
     */
    @Import(name="confidentialInstanceConfig", required=true)
    private ConfidentialInstanceConfigResponse confidentialInstanceConfig;

    public ConfidentialInstanceConfigResponse confidentialInstanceConfig() {
        return this.confidentialInstanceConfig;
    }

    /**
     * Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
     * 
     */
    @Import(name="internalIpOnly", required=true)
    private Boolean internalIpOnly;

    public Boolean internalIpOnly() {
        return this.internalIpOnly;
    }

    /**
     * The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
     * 
     */
    @Import(name="metadata", required=true)
    private Map<String,String> metadata;

    public Map<String,String> metadata() {
        return this.metadata;
    }

    /**
     * Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the &#34;default&#34; network of the project is used, if it exists. Cannot be a &#34;Custom Subnet Network&#34; (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default projects/[project_id]/regions/global/default default
     * 
     */
    @Import(name="networkUri", required=true)
    private String networkUri;

    public String networkUri() {
        return this.networkUri;
    }

    /**
     * Optional. Node Group Affinity for sole-tenant clusters.
     * 
     */
    @Import(name="nodeGroupAffinity", required=true)
    private NodeGroupAffinityResponse nodeGroupAffinity;

    public NodeGroupAffinityResponse nodeGroupAffinity() {
        return this.nodeGroupAffinity;
    }

    /**
     * Optional. The type of IPv6 access for a cluster.
     * 
     */
    @Import(name="privateIpv6GoogleAccess", required=true)
    private String privateIpv6GoogleAccess;

    public String privateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }

    /**
     * Optional. Reservation Affinity for consuming Zonal reservation.
     * 
     */
    @Import(name="reservationAffinity", required=true)
    private ReservationAffinityResponse reservationAffinity;

    public ReservationAffinityResponse reservationAffinity() {
        return this.reservationAffinity;
    }

    /**
     * Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control
     * 
     */
    @Import(name="serviceAccountScopes", required=true)
    private List<String> serviceAccountScopes;

    public List<String> serviceAccountScopes() {
        return this.serviceAccountScopes;
    }

    /**
     * Optional. Shielded Instance Config for clusters using Compute Engine Shielded VMs (https://cloud.google.com/security/shielded-cloud/shielded-vm).
     * 
     */
    @Import(name="shieldedInstanceConfig", required=true)
    private ShieldedInstanceConfigResponse shieldedInstanceConfig;

    public ShieldedInstanceConfigResponse shieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }

    /**
     * Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0 projects/[project_id]/regions/us-east1/subnetworks/sub0 sub0
     * 
     */
    @Import(name="subnetworkUri", required=true)
    private String subnetworkUri;

    public String subnetworkUri() {
        return this.subnetworkUri;
    }

    /**
     * The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     * 
     */
    @Import(name="tags", required=true)
    private List<String> tags;

    public List<String> tags() {
        return this.tags;
    }

    /**
     * Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the &#34;global&#34; region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] us-central1-f
     * 
     */
    @Import(name="zoneUri", required=true)
    private String zoneUri;

    public String zoneUri() {
        return this.zoneUri;
    }

    private GceClusterConfigResponse() {}

    private GceClusterConfigResponse(GceClusterConfigResponse $) {
        this.confidentialInstanceConfig = $.confidentialInstanceConfig;
        this.internalIpOnly = $.internalIpOnly;
        this.metadata = $.metadata;
        this.networkUri = $.networkUri;
        this.nodeGroupAffinity = $.nodeGroupAffinity;
        this.privateIpv6GoogleAccess = $.privateIpv6GoogleAccess;
        this.reservationAffinity = $.reservationAffinity;
        this.serviceAccount = $.serviceAccount;
        this.serviceAccountScopes = $.serviceAccountScopes;
        this.shieldedInstanceConfig = $.shieldedInstanceConfig;
        this.subnetworkUri = $.subnetworkUri;
        this.tags = $.tags;
        this.zoneUri = $.zoneUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GceClusterConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GceClusterConfigResponse $;

        public Builder() {
            $ = new GceClusterConfigResponse();
        }

        public Builder(GceClusterConfigResponse defaults) {
            $ = new GceClusterConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder confidentialInstanceConfig(ConfidentialInstanceConfigResponse confidentialInstanceConfig) {
            $.confidentialInstanceConfig = confidentialInstanceConfig;
            return this;
        }

        public Builder internalIpOnly(Boolean internalIpOnly) {
            $.internalIpOnly = internalIpOnly;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder networkUri(String networkUri) {
            $.networkUri = networkUri;
            return this;
        }

        public Builder nodeGroupAffinity(NodeGroupAffinityResponse nodeGroupAffinity) {
            $.nodeGroupAffinity = nodeGroupAffinity;
            return this;
        }

        public Builder privateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            $.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            return this;
        }

        public Builder reservationAffinity(ReservationAffinityResponse reservationAffinity) {
            $.reservationAffinity = reservationAffinity;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccountScopes(List<String> serviceAccountScopes) {
            $.serviceAccountScopes = serviceAccountScopes;
            return this;
        }

        public Builder serviceAccountScopes(String... serviceAccountScopes) {
            return serviceAccountScopes(List.of(serviceAccountScopes));
        }

        public Builder shieldedInstanceConfig(ShieldedInstanceConfigResponse shieldedInstanceConfig) {
            $.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder subnetworkUri(String subnetworkUri) {
            $.subnetworkUri = subnetworkUri;
            return this;
        }

        public Builder tags(List<String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder zoneUri(String zoneUri) {
            $.zoneUri = zoneUri;
            return this;
        }

        public GceClusterConfigResponse build() {
            $.confidentialInstanceConfig = Objects.requireNonNull($.confidentialInstanceConfig, "expected parameter 'confidentialInstanceConfig' to be non-null");
            $.internalIpOnly = Objects.requireNonNull($.internalIpOnly, "expected parameter 'internalIpOnly' to be non-null");
            $.metadata = Objects.requireNonNull($.metadata, "expected parameter 'metadata' to be non-null");
            $.networkUri = Objects.requireNonNull($.networkUri, "expected parameter 'networkUri' to be non-null");
            $.nodeGroupAffinity = Objects.requireNonNull($.nodeGroupAffinity, "expected parameter 'nodeGroupAffinity' to be non-null");
            $.privateIpv6GoogleAccess = Objects.requireNonNull($.privateIpv6GoogleAccess, "expected parameter 'privateIpv6GoogleAccess' to be non-null");
            $.reservationAffinity = Objects.requireNonNull($.reservationAffinity, "expected parameter 'reservationAffinity' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.serviceAccountScopes = Objects.requireNonNull($.serviceAccountScopes, "expected parameter 'serviceAccountScopes' to be non-null");
            $.shieldedInstanceConfig = Objects.requireNonNull($.shieldedInstanceConfig, "expected parameter 'shieldedInstanceConfig' to be non-null");
            $.subnetworkUri = Objects.requireNonNull($.subnetworkUri, "expected parameter 'subnetworkUri' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            $.zoneUri = Objects.requireNonNull($.zoneUri, "expected parameter 'zoneUri' to be non-null");
            return $;
        }
    }

}
