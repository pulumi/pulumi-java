// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.InstanceGroupManagerInstanceLifecyclePolicyMetadataBasedReadinessSignalResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class InstanceGroupManagerInstanceLifecyclePolicyResponse {
    /**
     * @return A bit indicating whether to forcefully apply the group&#39;s latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. However, if you&#39;ve set up a proactive type of update policy, then configuration updates are applied as usual. - YES: If configuration updates are available, they are applied during repair.
     * 
     */
    private final String forceUpdateOnRepair;
    /**
     * @return The configuration for metadata based readiness signal sent by the instance during initialization when stopping / suspending an instance. The Instance Group Manager will wait for a signal that indicates successful initialization before stopping / suspending an instance. If a successful readiness signal is not sent before timeout, the corresponding instance will not be stopped / suspended. Instead, an error will be visible in the lastAttempt.errors field of the managed instance in the listmanagedinstances method. If metadataBasedReadinessSignal.timeoutSec is unset, the Instance Group Manager will directly proceed to suspend / stop instances, skipping initialization on them.
     * 
     */
    private final InstanceGroupManagerInstanceLifecyclePolicyMetadataBasedReadinessSignalResponse metadataBasedReadinessSignal;

    @CustomType.Constructor
    private InstanceGroupManagerInstanceLifecyclePolicyResponse(
        @CustomType.Parameter("forceUpdateOnRepair") String forceUpdateOnRepair,
        @CustomType.Parameter("metadataBasedReadinessSignal") InstanceGroupManagerInstanceLifecyclePolicyMetadataBasedReadinessSignalResponse metadataBasedReadinessSignal) {
        this.forceUpdateOnRepair = forceUpdateOnRepair;
        this.metadataBasedReadinessSignal = metadataBasedReadinessSignal;
    }

    /**
     * @return A bit indicating whether to forcefully apply the group&#39;s latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. However, if you&#39;ve set up a proactive type of update policy, then configuration updates are applied as usual. - YES: If configuration updates are available, they are applied during repair.
     * 
     */
    public String forceUpdateOnRepair() {
        return this.forceUpdateOnRepair;
    }
    /**
     * @return The configuration for metadata based readiness signal sent by the instance during initialization when stopping / suspending an instance. The Instance Group Manager will wait for a signal that indicates successful initialization before stopping / suspending an instance. If a successful readiness signal is not sent before timeout, the corresponding instance will not be stopped / suspended. Instead, an error will be visible in the lastAttempt.errors field of the managed instance in the listmanagedinstances method. If metadataBasedReadinessSignal.timeoutSec is unset, the Instance Group Manager will directly proceed to suspend / stop instances, skipping initialization on them.
     * 
     */
    public InstanceGroupManagerInstanceLifecyclePolicyMetadataBasedReadinessSignalResponse metadataBasedReadinessSignal() {
        return this.metadataBasedReadinessSignal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceGroupManagerInstanceLifecyclePolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String forceUpdateOnRepair;
        private InstanceGroupManagerInstanceLifecyclePolicyMetadataBasedReadinessSignalResponse metadataBasedReadinessSignal;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceGroupManagerInstanceLifecyclePolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.forceUpdateOnRepair = defaults.forceUpdateOnRepair;
    	      this.metadataBasedReadinessSignal = defaults.metadataBasedReadinessSignal;
        }

        public Builder forceUpdateOnRepair(String forceUpdateOnRepair) {
            this.forceUpdateOnRepair = Objects.requireNonNull(forceUpdateOnRepair);
            return this;
        }
        public Builder metadataBasedReadinessSignal(InstanceGroupManagerInstanceLifecyclePolicyMetadataBasedReadinessSignalResponse metadataBasedReadinessSignal) {
            this.metadataBasedReadinessSignal = Objects.requireNonNull(metadataBasedReadinessSignal);
            return this;
        }        public InstanceGroupManagerInstanceLifecyclePolicyResponse build() {
            return new InstanceGroupManagerInstanceLifecyclePolicyResponse(forceUpdateOnRepair, metadataBasedReadinessSignal);
        }
    }
}
