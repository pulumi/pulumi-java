// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v1.outputs.TimeSeriesQueryResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DataSetResponse {
    /**
     * @return A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value.
     * 
     */
    private final String legendTemplate;
    /**
     * @return Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     * 
     */
    private final String minAlignmentPeriod;
    /**
     * @return How this data should be plotted on the chart.
     * 
     */
    private final String plotType;
    /**
     * @return Optional. The target axis to use for plotting the metric.
     * 
     */
    private final String targetAxis;
    /**
     * @return Fields for querying time series data from the Stackdriver metrics API.
     * 
     */
    private final TimeSeriesQueryResponse timeSeriesQuery;

    @CustomType.Constructor
    private DataSetResponse(
        @CustomType.Parameter("legendTemplate") String legendTemplate,
        @CustomType.Parameter("minAlignmentPeriod") String minAlignmentPeriod,
        @CustomType.Parameter("plotType") String plotType,
        @CustomType.Parameter("targetAxis") String targetAxis,
        @CustomType.Parameter("timeSeriesQuery") TimeSeriesQueryResponse timeSeriesQuery) {
        this.legendTemplate = legendTemplate;
        this.minAlignmentPeriod = minAlignmentPeriod;
        this.plotType = plotType;
        this.targetAxis = targetAxis;
        this.timeSeriesQuery = timeSeriesQuery;
    }

    /**
     * @return A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value.
     * 
     */
    public String legendTemplate() {
        return this.legendTemplate;
    }
    /**
     * @return Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     * 
     */
    public String minAlignmentPeriod() {
        return this.minAlignmentPeriod;
    }
    /**
     * @return How this data should be plotted on the chart.
     * 
     */
    public String plotType() {
        return this.plotType;
    }
    /**
     * @return Optional. The target axis to use for plotting the metric.
     * 
     */
    public String targetAxis() {
        return this.targetAxis;
    }
    /**
     * @return Fields for querying time series data from the Stackdriver metrics API.
     * 
     */
    public TimeSeriesQueryResponse timeSeriesQuery() {
        return this.timeSeriesQuery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String legendTemplate;
        private String minAlignmentPeriod;
        private String plotType;
        private String targetAxis;
        private TimeSeriesQueryResponse timeSeriesQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.legendTemplate = defaults.legendTemplate;
    	      this.minAlignmentPeriod = defaults.minAlignmentPeriod;
    	      this.plotType = defaults.plotType;
    	      this.targetAxis = defaults.targetAxis;
    	      this.timeSeriesQuery = defaults.timeSeriesQuery;
        }

        public Builder legendTemplate(String legendTemplate) {
            this.legendTemplate = Objects.requireNonNull(legendTemplate);
            return this;
        }
        public Builder minAlignmentPeriod(String minAlignmentPeriod) {
            this.minAlignmentPeriod = Objects.requireNonNull(minAlignmentPeriod);
            return this;
        }
        public Builder plotType(String plotType) {
            this.plotType = Objects.requireNonNull(plotType);
            return this;
        }
        public Builder targetAxis(String targetAxis) {
            this.targetAxis = Objects.requireNonNull(targetAxis);
            return this;
        }
        public Builder timeSeriesQuery(TimeSeriesQueryResponse timeSeriesQuery) {
            this.timeSeriesQuery = Objects.requireNonNull(timeSeriesQuery);
            return this;
        }        public DataSetResponse build() {
            return new DataSetResponse(legendTemplate, minAlignmentPeriod, plotType, targetAxis, timeSeriesQuery);
        }
    }
}
