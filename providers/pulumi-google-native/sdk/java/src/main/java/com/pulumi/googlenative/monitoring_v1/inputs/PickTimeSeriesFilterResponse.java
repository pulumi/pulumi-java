// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.
 * 
 */
public final class PickTimeSeriesFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final PickTimeSeriesFilterResponse Empty = new PickTimeSeriesFilterResponse();

    /**
     * How to use the ranking to select time series that pass through the filter.
     * 
     */
    @Import(name="direction", required=true)
    private String direction;

    /**
     * @return How to use the ranking to select time series that pass through the filter.
     * 
     */
    public String direction() {
        return this.direction;
    }

    /**
     * How many time series to allow to pass through the filter.
     * 
     */
    @Import(name="numTimeSeries", required=true)
    private Integer numTimeSeries;

    /**
     * @return How many time series to allow to pass through the filter.
     * 
     */
    public Integer numTimeSeries() {
        return this.numTimeSeries;
    }

    /**
     * ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
     * 
     */
    @Import(name="rankingMethod", required=true)
    private String rankingMethod;

    /**
     * @return ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
     * 
     */
    public String rankingMethod() {
        return this.rankingMethod;
    }

    private PickTimeSeriesFilterResponse() {}

    private PickTimeSeriesFilterResponse(PickTimeSeriesFilterResponse $) {
        this.direction = $.direction;
        this.numTimeSeries = $.numTimeSeries;
        this.rankingMethod = $.rankingMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PickTimeSeriesFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PickTimeSeriesFilterResponse $;

        public Builder() {
            $ = new PickTimeSeriesFilterResponse();
        }

        public Builder(PickTimeSeriesFilterResponse defaults) {
            $ = new PickTimeSeriesFilterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction How to use the ranking to select time series that pass through the filter.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param numTimeSeries How many time series to allow to pass through the filter.
         * 
         * @return builder
         * 
         */
        public Builder numTimeSeries(Integer numTimeSeries) {
            $.numTimeSeries = numTimeSeries;
            return this;
        }

        /**
         * @param rankingMethod ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
         * 
         * @return builder
         * 
         */
        public Builder rankingMethod(String rankingMethod) {
            $.rankingMethod = rankingMethod;
            return this;
        }

        public PickTimeSeriesFilterResponse build() {
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.numTimeSeries = Objects.requireNonNull($.numTimeSeries, "expected parameter 'numTimeSeries' to be non-null");
            $.rankingMethod = Objects.requireNonNull($.rankingMethod, "expected parameter 'rankingMethod' to be non-null");
            return $;
        }
    }

}
