// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class StreamingbufferResponse extends com.pulumi.resources.InvokeArgs {

    public static final StreamingbufferResponse Empty = new StreamingbufferResponse();

    /**
     * A lower-bound estimate of the number of bytes currently in the streaming buffer.
     * 
     */
    @Import(name="estimatedBytes", required=true)
    private String estimatedBytes;

    /**
     * @return A lower-bound estimate of the number of bytes currently in the streaming buffer.
     * 
     */
    public String estimatedBytes() {
        return this.estimatedBytes;
    }

    /**
     * A lower-bound estimate of the number of rows currently in the streaming buffer.
     * 
     */
    @Import(name="estimatedRows", required=true)
    private String estimatedRows;

    /**
     * @return A lower-bound estimate of the number of rows currently in the streaming buffer.
     * 
     */
    public String estimatedRows() {
        return this.estimatedRows;
    }

    /**
     * Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
     * 
     */
    @Import(name="oldestEntryTime", required=true)
    private String oldestEntryTime;

    /**
     * @return Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
     * 
     */
    public String oldestEntryTime() {
        return this.oldestEntryTime;
    }

    private StreamingbufferResponse() {}

    private StreamingbufferResponse(StreamingbufferResponse $) {
        this.estimatedBytes = $.estimatedBytes;
        this.estimatedRows = $.estimatedRows;
        this.oldestEntryTime = $.oldestEntryTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingbufferResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingbufferResponse $;

        public Builder() {
            $ = new StreamingbufferResponse();
        }

        public Builder(StreamingbufferResponse defaults) {
            $ = new StreamingbufferResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param estimatedBytes A lower-bound estimate of the number of bytes currently in the streaming buffer.
         * 
         * @return builder
         * 
         */
        public Builder estimatedBytes(String estimatedBytes) {
            $.estimatedBytes = estimatedBytes;
            return this;
        }

        /**
         * @param estimatedRows A lower-bound estimate of the number of rows currently in the streaming buffer.
         * 
         * @return builder
         * 
         */
        public Builder estimatedRows(String estimatedRows) {
            $.estimatedRows = estimatedRows;
            return this;
        }

        /**
         * @param oldestEntryTime Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
         * 
         * @return builder
         * 
         */
        public Builder oldestEntryTime(String oldestEntryTime) {
            $.oldestEntryTime = oldestEntryTime;
            return this;
        }

        public StreamingbufferResponse build() {
            $.estimatedBytes = Objects.requireNonNull($.estimatedBytes, "expected parameter 'estimatedBytes' to be non-null");
            $.estimatedRows = Objects.requireNonNull($.estimatedRows, "expected parameter 'estimatedRows' to be non-null");
            $.oldestEntryTime = Objects.requireNonNull($.oldestEntryTime, "expected parameter 'oldestEntryTime' to be non-null");
            return $;
        }
    }

}
