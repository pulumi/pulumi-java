// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.policysimulator_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.policysimulator_v1.inputs.GoogleTypeDateResponse;
import java.lang.Integer;
import java.util.Objects;


/**
 * Summary statistics about the replayed log entries.
 * 
 */
public final class GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse Empty = new GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse();

    /**
     * The number of replayed log entries with a difference between baseline and simulated policies.
     * 
     */
    @Import(name="differenceCount", required=true)
    private Integer differenceCount;

    /**
     * @return The number of replayed log entries with a difference between baseline and simulated policies.
     * 
     */
    public Integer differenceCount() {
        return this.differenceCount;
    }

    /**
     * The number of log entries that could not be replayed.
     * 
     */
    @Import(name="errorCount", required=true)
    private Integer errorCount;

    /**
     * @return The number of log entries that could not be replayed.
     * 
     */
    public Integer errorCount() {
        return this.errorCount;
    }

    /**
     * The total number of log entries replayed.
     * 
     */
    @Import(name="logCount", required=true)
    private Integer logCount;

    /**
     * @return The total number of log entries replayed.
     * 
     */
    public Integer logCount() {
        return this.logCount;
    }

    /**
     * The date of the newest log entry replayed.
     * 
     */
    @Import(name="newestDate", required=true)
    private GoogleTypeDateResponse newestDate;

    /**
     * @return The date of the newest log entry replayed.
     * 
     */
    public GoogleTypeDateResponse newestDate() {
        return this.newestDate;
    }

    /**
     * The date of the oldest log entry replayed.
     * 
     */
    @Import(name="oldestDate", required=true)
    private GoogleTypeDateResponse oldestDate;

    /**
     * @return The date of the oldest log entry replayed.
     * 
     */
    public GoogleTypeDateResponse oldestDate() {
        return this.oldestDate;
    }

    /**
     * The number of replayed log entries with no difference between baseline and simulated policies.
     * 
     */
    @Import(name="unchangedCount", required=true)
    private Integer unchangedCount;

    /**
     * @return The number of replayed log entries with no difference between baseline and simulated policies.
     * 
     */
    public Integer unchangedCount() {
        return this.unchangedCount;
    }

    private GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse() {}

    private GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse(GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse $) {
        this.differenceCount = $.differenceCount;
        this.errorCount = $.errorCount;
        this.logCount = $.logCount;
        this.newestDate = $.newestDate;
        this.oldestDate = $.oldestDate;
        this.unchangedCount = $.unchangedCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse $;

        public Builder() {
            $ = new GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse();
        }

        public Builder(GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse defaults) {
            $ = new GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param differenceCount The number of replayed log entries with a difference between baseline and simulated policies.
         * 
         * @return builder
         * 
         */
        public Builder differenceCount(Integer differenceCount) {
            $.differenceCount = differenceCount;
            return this;
        }

        /**
         * @param errorCount The number of log entries that could not be replayed.
         * 
         * @return builder
         * 
         */
        public Builder errorCount(Integer errorCount) {
            $.errorCount = errorCount;
            return this;
        }

        /**
         * @param logCount The total number of log entries replayed.
         * 
         * @return builder
         * 
         */
        public Builder logCount(Integer logCount) {
            $.logCount = logCount;
            return this;
        }

        /**
         * @param newestDate The date of the newest log entry replayed.
         * 
         * @return builder
         * 
         */
        public Builder newestDate(GoogleTypeDateResponse newestDate) {
            $.newestDate = newestDate;
            return this;
        }

        /**
         * @param oldestDate The date of the oldest log entry replayed.
         * 
         * @return builder
         * 
         */
        public Builder oldestDate(GoogleTypeDateResponse oldestDate) {
            $.oldestDate = oldestDate;
            return this;
        }

        /**
         * @param unchangedCount The number of replayed log entries with no difference between baseline and simulated policies.
         * 
         * @return builder
         * 
         */
        public Builder unchangedCount(Integer unchangedCount) {
            $.unchangedCount = unchangedCount;
            return this;
        }

        public GoogleCloudPolicysimulatorV1ReplayResultsSummaryResponse build() {
            $.differenceCount = Objects.requireNonNull($.differenceCount, "expected parameter 'differenceCount' to be non-null");
            $.errorCount = Objects.requireNonNull($.errorCount, "expected parameter 'errorCount' to be non-null");
            $.logCount = Objects.requireNonNull($.logCount, "expected parameter 'logCount' to be non-null");
            $.newestDate = Objects.requireNonNull($.newestDate, "expected parameter 'newestDate' to be non-null");
            $.oldestDate = Objects.requireNonNull($.oldestDate, "expected parameter 'oldestDate' to be non-null");
            $.unchangedCount = Objects.requireNonNull($.unchangedCount, "expected parameter 'unchangedCount' to be non-null");
            return $;
        }
    }

}
