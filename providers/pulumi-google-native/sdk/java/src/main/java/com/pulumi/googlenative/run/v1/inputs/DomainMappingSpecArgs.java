// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run.v1.enums.DomainMappingSpecCertificateMode;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The desired state of the Domain Mapping.
 * 
 */
public final class DomainMappingSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainMappingSpecArgs Empty = new DomainMappingSpecArgs();

    /**
     * The mode of the certificate.
     * 
     */
    @Import(name="certificateMode")
    private @Nullable Output<DomainMappingSpecCertificateMode> certificateMode;

    /**
     * @return The mode of the certificate.
     * 
     */
    public Optional<Output<DomainMappingSpecCertificateMode>> certificateMode() {
        return Optional.ofNullable(this.certificateMode);
    }

    /**
     * If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
     * 
     */
    @Import(name="forceOverride")
    private @Nullable Output<Boolean> forceOverride;

    /**
     * @return If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
     * 
     */
    public Optional<Output<Boolean>> forceOverride() {
        return Optional.ofNullable(this.forceOverride);
    }

    /**
     * The name of the Knative Route that this DomainMapping applies to. The route must exist.
     * 
     */
    @Import(name="routeName")
    private @Nullable Output<String> routeName;

    /**
     * @return The name of the Knative Route that this DomainMapping applies to. The route must exist.
     * 
     */
    public Optional<Output<String>> routeName() {
        return Optional.ofNullable(this.routeName);
    }

    private DomainMappingSpecArgs() {}

    private DomainMappingSpecArgs(DomainMappingSpecArgs $) {
        this.certificateMode = $.certificateMode;
        this.forceOverride = $.forceOverride;
        this.routeName = $.routeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainMappingSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainMappingSpecArgs $;

        public Builder() {
            $ = new DomainMappingSpecArgs();
        }

        public Builder(DomainMappingSpecArgs defaults) {
            $ = new DomainMappingSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateMode The mode of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(@Nullable Output<DomainMappingSpecCertificateMode> certificateMode) {
            $.certificateMode = certificateMode;
            return this;
        }

        /**
         * @param certificateMode The mode of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(DomainMappingSpecCertificateMode certificateMode) {
            return certificateMode(Output.of(certificateMode));
        }

        /**
         * @param forceOverride If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
         * 
         * @return builder
         * 
         */
        public Builder forceOverride(@Nullable Output<Boolean> forceOverride) {
            $.forceOverride = forceOverride;
            return this;
        }

        /**
         * @param forceOverride If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
         * 
         * @return builder
         * 
         */
        public Builder forceOverride(Boolean forceOverride) {
            return forceOverride(Output.of(forceOverride));
        }

        /**
         * @param routeName The name of the Knative Route that this DomainMapping applies to. The route must exist.
         * 
         * @return builder
         * 
         */
        public Builder routeName(@Nullable Output<String> routeName) {
            $.routeName = routeName;
            return this;
        }

        /**
         * @param routeName The name of the Knative Route that this DomainMapping applies to. The route must exist.
         * 
         * @return builder
         * 
         */
        public Builder routeName(String routeName) {
            return routeName(Output.of(routeName));
        }

        public DomainMappingSpecArgs build() {
            return $;
        }
    }

}
