// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.container_v1beta1.inputs.TimeWindowArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents an arbitrary window of time that recurs.
 * 
 */
public final class RecurringTimeWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecurringTimeWindowArgs Empty = new RecurringTimeWindowArgs();

    /**
     * An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
     * 
     */
    @Import(name="recurrence")
      private final @Nullable Output<String> recurrence;

    public Output<String> recurrence() {
        return this.recurrence == null ? Codegen.empty() : this.recurrence;
    }

    /**
     * The window of the first recurrence.
     * 
     */
    @Import(name="window")
      private final @Nullable Output<TimeWindowArgs> window;

    public Output<TimeWindowArgs> window() {
        return this.window == null ? Codegen.empty() : this.window;
    }

    public RecurringTimeWindowArgs(
        @Nullable Output<String> recurrence,
        @Nullable Output<TimeWindowArgs> window) {
        this.recurrence = recurrence;
        this.window = window;
    }

    private RecurringTimeWindowArgs() {
        this.recurrence = Codegen.empty();
        this.window = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecurringTimeWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> recurrence;
        private @Nullable Output<TimeWindowArgs> window;

        public Builder() {
    	      // Empty
        }

        public Builder(RecurringTimeWindowArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurrence = defaults.recurrence;
    	      this.window = defaults.window;
        }

        public Builder recurrence(@Nullable Output<String> recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        public Builder recurrence(@Nullable String recurrence) {
            this.recurrence = Codegen.ofNullable(recurrence);
            return this;
        }
        public Builder window(@Nullable Output<TimeWindowArgs> window) {
            this.window = window;
            return this;
        }
        public Builder window(@Nullable TimeWindowArgs window) {
            this.window = Codegen.ofNullable(window);
            return this;
        }        public RecurringTimeWindowArgs build() {
            return new RecurringTimeWindowArgs(recurrence, window);
        }
    }
}
