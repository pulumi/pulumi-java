// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.metastore.v1alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.metastore.v1alpha.inputs.DatabaseDumpArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetadataImportArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetadataImportArgs Empty = new MetadataImportArgs();

    /**
     * Immutable. A database dump from a pre-existing metastore&#39;s database.
     * 
     */
    @Import(name="databaseDump")
    private @Nullable Output<DatabaseDumpArgs> databaseDump;

    /**
     * @return Immutable. A database dump from a pre-existing metastore&#39;s database.
     * 
     */
    public Optional<Output<DatabaseDumpArgs>> databaseDump() {
        return Optional.ofNullable(this.databaseDump);
    }

    /**
     * The description of the metadata import.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the metadata import.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Required. The ID of the metadata import, which is used as the final component of the metadata import&#39;s name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.
     * 
     */
    @Import(name="metadataImportId", required=true)
    private Output<String> metadataImportId;

    /**
     * @return Required. The ID of the metadata import, which is used as the final component of the metadata import&#39;s name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.
     * 
     */
    public Output<String> metadataImportId() {
        return this.metadataImportId;
    }

    /**
     * Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    public Output<String> serviceId() {
        return this.serviceId;
    }

    private MetadataImportArgs() {}

    private MetadataImportArgs(MetadataImportArgs $) {
        this.databaseDump = $.databaseDump;
        this.description = $.description;
        this.location = $.location;
        this.metadataImportId = $.metadataImportId;
        this.name = $.name;
        this.project = $.project;
        this.requestId = $.requestId;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetadataImportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetadataImportArgs $;

        public Builder() {
            $ = new MetadataImportArgs();
        }

        public Builder(MetadataImportArgs defaults) {
            $ = new MetadataImportArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseDump Immutable. A database dump from a pre-existing metastore&#39;s database.
         * 
         * @return builder
         * 
         */
        public Builder databaseDump(@Nullable Output<DatabaseDumpArgs> databaseDump) {
            $.databaseDump = databaseDump;
            return this;
        }

        /**
         * @param databaseDump Immutable. A database dump from a pre-existing metastore&#39;s database.
         * 
         * @return builder
         * 
         */
        public Builder databaseDump(DatabaseDumpArgs databaseDump) {
            return databaseDump(Output.of(databaseDump));
        }

        /**
         * @param description The description of the metadata import.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the metadata import.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param metadataImportId Required. The ID of the metadata import, which is used as the final component of the metadata import&#39;s name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.
         * 
         * @return builder
         * 
         */
        public Builder metadataImportId(Output<String> metadataImportId) {
            $.metadataImportId = metadataImportId;
            return this;
        }

        /**
         * @param metadataImportId Required. The ID of the metadata import, which is used as the final component of the metadata import&#39;s name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.
         * 
         * @return builder
         * 
         */
        public Builder metadataImportId(String metadataImportId) {
            return metadataImportId(Output.of(metadataImportId));
        }

        /**
         * @param name Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public MetadataImportArgs build() {
            $.metadataImportId = Objects.requireNonNull($.metadataImportId, "expected parameter 'metadataImportId' to be non-null");
            $.serviceId = Objects.requireNonNull($.serviceId, "expected parameter 'serviceId' to be non-null");
            return $;
        }
    }

}
