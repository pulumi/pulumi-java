// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * GitRepoSource describes a repo and ref of a code repository.
 * 
 */
public final class GitRepoSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitRepoSourceResponse Empty = new GitRepoSourceResponse();

    /**
     * The branch or tag to use. Must start with &#34;refs/&#34; (required).
     * 
     */
    @Import(name="ref", required=true)
    private String ref;

    public String ref() {
        return this.ref;
    }

    /**
     * See RepoType below.
     * 
     */
    @Import(name="repoType", required=true)
    private String repoType;

    public String repoType() {
        return this.repoType;
    }

    /**
     * The URI of the repo (required).
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    public String uri() {
        return this.uri;
    }

    private GitRepoSourceResponse() {}

    private GitRepoSourceResponse(GitRepoSourceResponse $) {
        this.ref = $.ref;
        this.repoType = $.repoType;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepoSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepoSourceResponse $;

        public Builder() {
            $ = new GitRepoSourceResponse();
        }

        public Builder(GitRepoSourceResponse defaults) {
            $ = new GitRepoSourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder ref(String ref) {
            $.ref = ref;
            return this;
        }

        public Builder repoType(String repoType) {
            $.repoType = repoType;
            return this;
        }

        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public GitRepoSourceResponse build() {
            $.ref = Objects.requireNonNull($.ref, "expected parameter 'ref' to be non-null");
            $.repoType = Objects.requireNonNull($.repoType, "expected parameter 'repoType' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
