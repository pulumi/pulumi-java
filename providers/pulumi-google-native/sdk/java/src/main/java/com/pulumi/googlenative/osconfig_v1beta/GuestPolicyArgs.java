// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.osconfig_v1beta.inputs.AssignmentArgs;
import com.pulumi.googlenative.osconfig_v1beta.inputs.PackageArgs;
import com.pulumi.googlenative.osconfig_v1beta.inputs.PackageRepositoryArgs;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GuestPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GuestPolicyArgs Empty = new GuestPolicyArgs();

    /**
     * Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
     * 
     */
    @Import(name="assignment", required=true)
      private final Output<AssignmentArgs> assignment;

    public Output<AssignmentArgs> assignment() {
        return this.assignment;
    }

    /**
     * Description of the guest policy. Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The etag for this guest policy. If this is provided on update, it must match the server's etag.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> etag() {
        return this.etag == null ? Codegen.empty() : this.etag;
    }

    @Import(name="guestPolicyId", required=true)
      private final Output<String> guestPolicyId;

    public Output<String> guestPolicyId() {
        return this.guestPolicyId;
    }

    /**
     * Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
     * 
     */
    @Import(name="packageRepositories")
      private final @Nullable Output<List<PackageRepositoryArgs>> packageRepositories;

    public Output<List<PackageRepositoryArgs>> packageRepositories() {
        return this.packageRepositories == null ? Codegen.empty() : this.packageRepositories;
    }

    /**
     * The software packages to be managed by this policy.
     * 
     */
    @Import(name="packages")
      private final @Nullable Output<List<PackageArgs>> packages;

    public Output<List<PackageArgs>> packages() {
        return this.packages == null ? Codegen.empty() : this.packages;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * A list of Recipes to install on the VM instance.
     * 
     */
    @Import(name="recipes")
      private final @Nullable Output<List<SoftwareRecipeArgs>> recipes;

    public Output<List<SoftwareRecipeArgs>> recipes() {
        return this.recipes == null ? Codegen.empty() : this.recipes;
    }

    public GuestPolicyArgs(
        Output<AssignmentArgs> assignment,
        @Nullable Output<String> description,
        @Nullable Output<String> etag,
        Output<String> guestPolicyId,
        @Nullable Output<String> name,
        @Nullable Output<List<PackageRepositoryArgs>> packageRepositories,
        @Nullable Output<List<PackageArgs>> packages,
        @Nullable Output<String> project,
        @Nullable Output<List<SoftwareRecipeArgs>> recipes) {
        this.assignment = Objects.requireNonNull(assignment, "expected parameter 'assignment' to be non-null");
        this.description = description;
        this.etag = etag;
        this.guestPolicyId = Objects.requireNonNull(guestPolicyId, "expected parameter 'guestPolicyId' to be non-null");
        this.name = name;
        this.packageRepositories = packageRepositories;
        this.packages = packages;
        this.project = project;
        this.recipes = recipes;
    }

    private GuestPolicyArgs() {
        this.assignment = Codegen.empty();
        this.description = Codegen.empty();
        this.etag = Codegen.empty();
        this.guestPolicyId = Codegen.empty();
        this.name = Codegen.empty();
        this.packageRepositories = Codegen.empty();
        this.packages = Codegen.empty();
        this.project = Codegen.empty();
        this.recipes = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GuestPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<AssignmentArgs> assignment;
        private @Nullable Output<String> description;
        private @Nullable Output<String> etag;
        private Output<String> guestPolicyId;
        private @Nullable Output<String> name;
        private @Nullable Output<List<PackageRepositoryArgs>> packageRepositories;
        private @Nullable Output<List<PackageArgs>> packages;
        private @Nullable Output<String> project;
        private @Nullable Output<List<SoftwareRecipeArgs>> recipes;

        public Builder() {
    	      // Empty
        }

        public Builder(GuestPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignment = defaults.assignment;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.guestPolicyId = defaults.guestPolicyId;
    	      this.name = defaults.name;
    	      this.packageRepositories = defaults.packageRepositories;
    	      this.packages = defaults.packages;
    	      this.project = defaults.project;
    	      this.recipes = defaults.recipes;
        }

        public Builder assignment(Output<AssignmentArgs> assignment) {
            this.assignment = Objects.requireNonNull(assignment);
            return this;
        }
        public Builder assignment(AssignmentArgs assignment) {
            this.assignment = Output.of(Objects.requireNonNull(assignment));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Codegen.ofNullable(etag);
            return this;
        }
        public Builder guestPolicyId(Output<String> guestPolicyId) {
            this.guestPolicyId = Objects.requireNonNull(guestPolicyId);
            return this;
        }
        public Builder guestPolicyId(String guestPolicyId) {
            this.guestPolicyId = Output.of(Objects.requireNonNull(guestPolicyId));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder packageRepositories(@Nullable Output<List<PackageRepositoryArgs>> packageRepositories) {
            this.packageRepositories = packageRepositories;
            return this;
        }
        public Builder packageRepositories(@Nullable List<PackageRepositoryArgs> packageRepositories) {
            this.packageRepositories = Codegen.ofNullable(packageRepositories);
            return this;
        }
        public Builder packageRepositories(PackageRepositoryArgs... packageRepositories) {
            return packageRepositories(List.of(packageRepositories));
        }
        public Builder packages(@Nullable Output<List<PackageArgs>> packages) {
            this.packages = packages;
            return this;
        }
        public Builder packages(@Nullable List<PackageArgs> packages) {
            this.packages = Codegen.ofNullable(packages);
            return this;
        }
        public Builder packages(PackageArgs... packages) {
            return packages(List.of(packages));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder recipes(@Nullable Output<List<SoftwareRecipeArgs>> recipes) {
            this.recipes = recipes;
            return this;
        }
        public Builder recipes(@Nullable List<SoftwareRecipeArgs> recipes) {
            this.recipes = Codegen.ofNullable(recipes);
            return this;
        }
        public Builder recipes(SoftwareRecipeArgs... recipes) {
            return recipes(List.of(recipes));
        }        public GuestPolicyArgs build() {
            return new GuestPolicyArgs(assignment, description, etag, guestPolicyId, name, packageRepositories, packages, project, recipes);
        }
    }
}
