// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.runtimeconfig_v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.runtimeconfig_v1beta1.inputs.EndConditionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WaiterArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaiterArgs Empty = new WaiterArgs();

    @Import(name="configId", required=true)
    private Output<String> configId;

    public Output<String> configId() {
        return this.configId;
    }

    /**
     * [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
     * 
     */
    @Import(name="failure")
    private @Nullable Output<EndConditionArgs> failure;

    public Optional<Output<EndConditionArgs>> failure() {
        return Optional.ofNullable(this.failure);
    }

    /**
     * The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
     * 
     */
    @Import(name="success")
    private @Nullable Output<EndConditionArgs> success;

    public Optional<Output<EndConditionArgs>> success() {
        return Optional.ofNullable(this.success);
    }

    /**
     * [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private WaiterArgs() {}

    private WaiterArgs(WaiterArgs $) {
        this.configId = $.configId;
        this.failure = $.failure;
        this.name = $.name;
        this.project = $.project;
        this.requestId = $.requestId;
        this.success = $.success;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaiterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaiterArgs $;

        public Builder() {
            $ = new WaiterArgs();
        }

        public Builder(WaiterArgs defaults) {
            $ = new WaiterArgs(Objects.requireNonNull(defaults));
        }

        public Builder configId(Output<String> configId) {
            $.configId = configId;
            return this;
        }

        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        public Builder failure(@Nullable Output<EndConditionArgs> failure) {
            $.failure = failure;
            return this;
        }

        public Builder failure(EndConditionArgs failure) {
            return failure(Output.of(failure));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder success(@Nullable Output<EndConditionArgs> success) {
            $.success = success;
            return this;
        }

        public Builder success(EndConditionArgs success) {
            return success(Output.of(success));
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public WaiterArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            return $;
        }
    }

}
