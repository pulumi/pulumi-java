// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkebackup.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.gkebackup.v1.outputs.GroupKindResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class SubstitutionRuleResponse {
    /**
     * @return This is the new value to set for any fields that pass the filtering and selection criteria. To remove a value from a Kubernetes resource, either leave this field unspecified, or set it to the empty string (&#34;&#34;).
     * 
     */
    private final String newValue;
    /**
     * @return (Filtering parameter) This is a [regular expression] (https://en.wikipedia.org/wiki/Regular_expression) that is compared against the fields matched by the target_json_path expression (and must also have passed the previous filters). Substitution will not be performed against fields whose value does not match this expression. If this field is NOT specified, then ALL fields matched by the target_json_path expression will undergo substitution. Note that an empty (e.g., &#34;&#34;, rather than unspecified) value for for this field will only match empty fields.
     * 
     */
    private final String originalValuePattern;
    /**
     * @return (Filtering parameter) Any resource subject to substitution must belong to one of the listed &#34;types&#34;. If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for substitution).
     * 
     */
    private final List<GroupKindResponse> targetGroupKinds;
    /**
     * @return This is a [JSONPath] (https://kubernetes.io/docs/reference/kubectl/jsonpath/) expression that matches specific fields of candidate resources and it operates as both a filtering parameter (resources that are not matched with this expression will not be candidates for substitution) as well as a field identifier (identifies exactly which fields out of the candidate resources will be modified).
     * 
     */
    private final String targetJsonPath;
    /**
     * @return (Filtering parameter) Any resource subject to substitution must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for substitution). To mix cluster-scoped and namespaced resources in the same rule, use an empty string (&#34;&#34;) as one of the target namespaces.
     * 
     */
    private final List<String> targetNamespaces;

    @CustomType.Constructor
    private SubstitutionRuleResponse(
        @CustomType.Parameter("newValue") String newValue,
        @CustomType.Parameter("originalValuePattern") String originalValuePattern,
        @CustomType.Parameter("targetGroupKinds") List<GroupKindResponse> targetGroupKinds,
        @CustomType.Parameter("targetJsonPath") String targetJsonPath,
        @CustomType.Parameter("targetNamespaces") List<String> targetNamespaces) {
        this.newValue = newValue;
        this.originalValuePattern = originalValuePattern;
        this.targetGroupKinds = targetGroupKinds;
        this.targetJsonPath = targetJsonPath;
        this.targetNamespaces = targetNamespaces;
    }

    /**
     * @return This is the new value to set for any fields that pass the filtering and selection criteria. To remove a value from a Kubernetes resource, either leave this field unspecified, or set it to the empty string (&#34;&#34;).
     * 
     */
    public String newValue() {
        return this.newValue;
    }
    /**
     * @return (Filtering parameter) This is a [regular expression] (https://en.wikipedia.org/wiki/Regular_expression) that is compared against the fields matched by the target_json_path expression (and must also have passed the previous filters). Substitution will not be performed against fields whose value does not match this expression. If this field is NOT specified, then ALL fields matched by the target_json_path expression will undergo substitution. Note that an empty (e.g., &#34;&#34;, rather than unspecified) value for for this field will only match empty fields.
     * 
     */
    public String originalValuePattern() {
        return this.originalValuePattern;
    }
    /**
     * @return (Filtering parameter) Any resource subject to substitution must belong to one of the listed &#34;types&#34;. If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for substitution).
     * 
     */
    public List<GroupKindResponse> targetGroupKinds() {
        return this.targetGroupKinds;
    }
    /**
     * @return This is a [JSONPath] (https://kubernetes.io/docs/reference/kubectl/jsonpath/) expression that matches specific fields of candidate resources and it operates as both a filtering parameter (resources that are not matched with this expression will not be candidates for substitution) as well as a field identifier (identifies exactly which fields out of the candidate resources will be modified).
     * 
     */
    public String targetJsonPath() {
        return this.targetJsonPath;
    }
    /**
     * @return (Filtering parameter) Any resource subject to substitution must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for substitution). To mix cluster-scoped and namespaced resources in the same rule, use an empty string (&#34;&#34;) as one of the target namespaces.
     * 
     */
    public List<String> targetNamespaces() {
        return this.targetNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubstitutionRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String newValue;
        private String originalValuePattern;
        private List<GroupKindResponse> targetGroupKinds;
        private String targetJsonPath;
        private List<String> targetNamespaces;

        public Builder() {
    	      // Empty
        }

        public Builder(SubstitutionRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.newValue = defaults.newValue;
    	      this.originalValuePattern = defaults.originalValuePattern;
    	      this.targetGroupKinds = defaults.targetGroupKinds;
    	      this.targetJsonPath = defaults.targetJsonPath;
    	      this.targetNamespaces = defaults.targetNamespaces;
        }

        public Builder newValue(String newValue) {
            this.newValue = Objects.requireNonNull(newValue);
            return this;
        }
        public Builder originalValuePattern(String originalValuePattern) {
            this.originalValuePattern = Objects.requireNonNull(originalValuePattern);
            return this;
        }
        public Builder targetGroupKinds(List<GroupKindResponse> targetGroupKinds) {
            this.targetGroupKinds = Objects.requireNonNull(targetGroupKinds);
            return this;
        }
        public Builder targetGroupKinds(GroupKindResponse... targetGroupKinds) {
            return targetGroupKinds(List.of(targetGroupKinds));
        }
        public Builder targetJsonPath(String targetJsonPath) {
            this.targetJsonPath = Objects.requireNonNull(targetJsonPath);
            return this;
        }
        public Builder targetNamespaces(List<String> targetNamespaces) {
            this.targetNamespaces = Objects.requireNonNull(targetNamespaces);
            return this;
        }
        public Builder targetNamespaces(String... targetNamespaces) {
            return targetNamespaces(List.of(targetNamespaces));
        }        public SubstitutionRuleResponse build() {
            return new SubstitutionRuleResponse(newValue, originalValuePattern, targetGroupKinds, targetJsonPath, targetNamespaces);
        }
    }
}
