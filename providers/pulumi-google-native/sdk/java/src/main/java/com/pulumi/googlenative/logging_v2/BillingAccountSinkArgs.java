// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging_v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.logging_v2.inputs.BigQueryOptionsArgs;
import com.pulumi.googlenative.logging_v2.inputs.LogExclusionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BillingAccountSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final BillingAccountSinkArgs Empty = new BillingAccountSinkArgs();

    /**
     * Optional. Options that affect sinks exporting data to BigQuery.
     * 
     */
    @Import(name="bigqueryOptions")
    private @Nullable Output<BigQueryOptionsArgs> bigqueryOptions;

    public Optional<Output<BigQueryOptionsArgs>> bigqueryOptions() {
        return Optional.ofNullable(this.bigqueryOptions);
    }

    @Import(name="billingAccountId", required=true)
    private Output<String> billingAccountId;

    public Output<String> billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Optional. A description of this sink.The maximum length of the description is 8000 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The export destination: &#34;storage.googleapis.com/[GCS_BUCKET]&#34; &#34;bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]&#34; &#34;pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]&#34; The sink&#39;s writer_identity, set when the sink is created, must have permission to write to the destination or else the log entries are not exported. For more information, see Exporting Logs with Sinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    public Output<String> destination() {
        return this.destination;
    }

    /**
     * Optional. If set to true, then this sink is disabled and it does not export any log entries.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Optional. Log entries that match any of these exclusion filters will not be exported.If a log entry is matched by both filter and one of exclusion_filters it will not be exported.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<LogExclusionArgs>> exclusions;

    public Optional<Output<List<LogExclusionArgs>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=&#34;projects/[PROJECT_ID]/logs/[LOG_ID]&#34; AND severity&gt;=ERROR
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Optional. This field applies only to sinks owned by organizations and folders. If the field is false, the default, only the logs owned by the sink&#39;s parent resource are available for export. If the field is true, then log entries from all the projects, folders, and billing accounts contained in the sink&#39;s parent resource are also available for export. Whether a particular log entry from the children is exported depends on the sink&#39;s filter expression.For example, if this field is true, then the filter resource.type=gce_instance would export all Compute Engine VM instance log entries from all projects in the sink&#39;s parent.To only export entries from certain child projects, filter on the project part of the log name:logName:(&#34;projects/test-project1/&#34; OR &#34;projects/test-project2/&#34;) AND resource.type=gce_instance
     * 
     */
    @Import(name="includeChildren")
    private @Nullable Output<Boolean> includeChildren;

    public Optional<Output<Boolean>> includeChildren() {
        return Optional.ofNullable(this.includeChildren);
    }

    /**
     * The client-assigned sink identifier, unique within the project.For example: &#34;my-syslog-errors-to-pubsub&#34;. Sink identifiers are limited to 100 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods. First character has to be alphanumeric.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="uniqueWriterIdentity")
    private @Nullable Output<String> uniqueWriterIdentity;

    public Optional<Output<String>> uniqueWriterIdentity() {
        return Optional.ofNullable(this.uniqueWriterIdentity);
    }

    private BillingAccountSinkArgs() {}

    private BillingAccountSinkArgs(BillingAccountSinkArgs $) {
        this.bigqueryOptions = $.bigqueryOptions;
        this.billingAccountId = $.billingAccountId;
        this.description = $.description;
        this.destination = $.destination;
        this.disabled = $.disabled;
        this.exclusions = $.exclusions;
        this.filter = $.filter;
        this.includeChildren = $.includeChildren;
        this.name = $.name;
        this.uniqueWriterIdentity = $.uniqueWriterIdentity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BillingAccountSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BillingAccountSinkArgs $;

        public Builder() {
            $ = new BillingAccountSinkArgs();
        }

        public Builder(BillingAccountSinkArgs defaults) {
            $ = new BillingAccountSinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder bigqueryOptions(@Nullable Output<BigQueryOptionsArgs> bigqueryOptions) {
            $.bigqueryOptions = bigqueryOptions;
            return this;
        }

        public Builder bigqueryOptions(BigQueryOptionsArgs bigqueryOptions) {
            return bigqueryOptions(Output.of(bigqueryOptions));
        }

        public Builder billingAccountId(Output<String> billingAccountId) {
            $.billingAccountId = billingAccountId;
            return this;
        }

        public Builder billingAccountId(String billingAccountId) {
            return billingAccountId(Output.of(billingAccountId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder exclusions(@Nullable Output<List<LogExclusionArgs>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        public Builder exclusions(List<LogExclusionArgs> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        public Builder exclusions(LogExclusionArgs... exclusions) {
            return exclusions(List.of(exclusions));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder includeChildren(@Nullable Output<Boolean> includeChildren) {
            $.includeChildren = includeChildren;
            return this;
        }

        public Builder includeChildren(Boolean includeChildren) {
            return includeChildren(Output.of(includeChildren));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder uniqueWriterIdentity(@Nullable Output<String> uniqueWriterIdentity) {
            $.uniqueWriterIdentity = uniqueWriterIdentity;
            return this;
        }

        public Builder uniqueWriterIdentity(String uniqueWriterIdentity) {
            return uniqueWriterIdentity(Output.of(uniqueWriterIdentity));
        }

        public BillingAccountSinkArgs build() {
            $.billingAccountId = Objects.requireNonNull($.billingAccountId, "expected parameter 'billingAccountId' to be non-null");
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            return $;
        }
    }

}
