// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow.v3.enums.ExperimentState;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3ExperimentDefinitionArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3ExperimentResultArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3RolloutConfigArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3RolloutStateArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3VariantsHistoryArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentArgs Empty = new ExperimentArgs();

    @Import(name="agentId", required=true)
    private Output<String> agentId;

    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * Creation time of this experiment.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time of this experiment.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The definition of the experiment.
     * 
     */
    @Import(name="definition")
    private @Nullable Output<GoogleCloudDialogflowCxV3ExperimentDefinitionArgs> definition;

    /**
     * @return The definition of the experiment.
     * 
     */
    public Optional<Output<GoogleCloudDialogflowCxV3ExperimentDefinitionArgs>> definition() {
        return Optional.ofNullable(this.definition);
    }

    /**
     * The human-readable description of the experiment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description of the experiment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * End time of this experiment.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return End time of this experiment.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
     * 
     */
    @Import(name="experimentLength")
    private @Nullable Output<String> experimentLength;

    /**
     * @return Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
     * 
     */
    public Optional<Output<String>> experimentLength() {
        return Optional.ofNullable(this.experimentLength);
    }

    /**
     * Last update time of this experiment.
     * 
     */
    @Import(name="lastUpdateTime")
    private @Nullable Output<String> lastUpdateTime;

    /**
     * @return Last update time of this experiment.
     * 
     */
    public Optional<Output<String>> lastUpdateTime() {
        return Optional.ofNullable(this.lastUpdateTime);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the experiment. Format: projects//locations//agents//environments//experiments/..
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the experiment. Format: projects//locations//agents//environments//experiments/..
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Inference result of the experiment.
     * 
     */
    @Import(name="result")
    private @Nullable Output<GoogleCloudDialogflowCxV3ExperimentResultArgs> result;

    /**
     * @return Inference result of the experiment.
     * 
     */
    public Optional<Output<GoogleCloudDialogflowCxV3ExperimentResultArgs>> result() {
        return Optional.ofNullable(this.result);
    }

    /**
     * The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
     * 
     */
    @Import(name="rolloutConfig")
    private @Nullable Output<GoogleCloudDialogflowCxV3RolloutConfigArgs> rolloutConfig;

    /**
     * @return The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
     * 
     */
    public Optional<Output<GoogleCloudDialogflowCxV3RolloutConfigArgs>> rolloutConfig() {
        return Optional.ofNullable(this.rolloutConfig);
    }

    /**
     * The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
     * 
     */
    @Import(name="rolloutFailureReason")
    private @Nullable Output<String> rolloutFailureReason;

    /**
     * @return The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
     * 
     */
    public Optional<Output<String>> rolloutFailureReason() {
        return Optional.ofNullable(this.rolloutFailureReason);
    }

    /**
     * State of the auto rollout process.
     * 
     */
    @Import(name="rolloutState")
    private @Nullable Output<GoogleCloudDialogflowCxV3RolloutStateArgs> rolloutState;

    /**
     * @return State of the auto rollout process.
     * 
     */
    public Optional<Output<GoogleCloudDialogflowCxV3RolloutStateArgs>> rolloutState() {
        return Optional.ofNullable(this.rolloutState);
    }

    /**
     * Start time of this experiment.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Start time of this experiment.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
     * 
     */
    @Import(name="state")
    private @Nullable Output<ExperimentState> state;

    /**
     * @return The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
     * 
     */
    public Optional<Output<ExperimentState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The history of updates to the experiment variants.
     * 
     */
    @Import(name="variantsHistory")
    private @Nullable Output<List<GoogleCloudDialogflowCxV3VariantsHistoryArgs>> variantsHistory;

    /**
     * @return The history of updates to the experiment variants.
     * 
     */
    public Optional<Output<List<GoogleCloudDialogflowCxV3VariantsHistoryArgs>>> variantsHistory() {
        return Optional.ofNullable(this.variantsHistory);
    }

    private ExperimentArgs() {}

    private ExperimentArgs(ExperimentArgs $) {
        this.agentId = $.agentId;
        this.createTime = $.createTime;
        this.definition = $.definition;
        this.description = $.description;
        this.displayName = $.displayName;
        this.endTime = $.endTime;
        this.environmentId = $.environmentId;
        this.experimentLength = $.experimentLength;
        this.lastUpdateTime = $.lastUpdateTime;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.result = $.result;
        this.rolloutConfig = $.rolloutConfig;
        this.rolloutFailureReason = $.rolloutFailureReason;
        this.rolloutState = $.rolloutState;
        this.startTime = $.startTime;
        this.state = $.state;
        this.variantsHistory = $.variantsHistory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentArgs $;

        public Builder() {
            $ = new ExperimentArgs();
        }

        public Builder(ExperimentArgs defaults) {
            $ = new ExperimentArgs(Objects.requireNonNull(defaults));
        }

        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param createTime Creation time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param definition The definition of the experiment.
         * 
         * @return builder
         * 
         */
        public Builder definition(@Nullable Output<GoogleCloudDialogflowCxV3ExperimentDefinitionArgs> definition) {
            $.definition = definition;
            return this;
        }

        /**
         * @param definition The definition of the experiment.
         * 
         * @return builder
         * 
         */
        public Builder definition(GoogleCloudDialogflowCxV3ExperimentDefinitionArgs definition) {
            return definition(Output.of(definition));
        }

        /**
         * @param description The human-readable description of the experiment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description of the experiment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endTime End time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime End time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param experimentLength Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
         * 
         * @return builder
         * 
         */
        public Builder experimentLength(@Nullable Output<String> experimentLength) {
            $.experimentLength = experimentLength;
            return this;
        }

        /**
         * @param experimentLength Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
         * 
         * @return builder
         * 
         */
        public Builder experimentLength(String experimentLength) {
            return experimentLength(Output.of(experimentLength));
        }

        /**
         * @param lastUpdateTime Last update time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateTime(@Nullable Output<String> lastUpdateTime) {
            $.lastUpdateTime = lastUpdateTime;
            return this;
        }

        /**
         * @param lastUpdateTime Last update time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateTime(String lastUpdateTime) {
            return lastUpdateTime(Output.of(lastUpdateTime));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the experiment. Format: projects//locations//agents//environments//experiments/..
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the experiment. Format: projects//locations//agents//environments//experiments/..
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param result Inference result of the experiment.
         * 
         * @return builder
         * 
         */
        public Builder result(@Nullable Output<GoogleCloudDialogflowCxV3ExperimentResultArgs> result) {
            $.result = result;
            return this;
        }

        /**
         * @param result Inference result of the experiment.
         * 
         * @return builder
         * 
         */
        public Builder result(GoogleCloudDialogflowCxV3ExperimentResultArgs result) {
            return result(Output.of(result));
        }

        /**
         * @param rolloutConfig The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
         * 
         * @return builder
         * 
         */
        public Builder rolloutConfig(@Nullable Output<GoogleCloudDialogflowCxV3RolloutConfigArgs> rolloutConfig) {
            $.rolloutConfig = rolloutConfig;
            return this;
        }

        /**
         * @param rolloutConfig The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
         * 
         * @return builder
         * 
         */
        public Builder rolloutConfig(GoogleCloudDialogflowCxV3RolloutConfigArgs rolloutConfig) {
            return rolloutConfig(Output.of(rolloutConfig));
        }

        /**
         * @param rolloutFailureReason The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
         * 
         * @return builder
         * 
         */
        public Builder rolloutFailureReason(@Nullable Output<String> rolloutFailureReason) {
            $.rolloutFailureReason = rolloutFailureReason;
            return this;
        }

        /**
         * @param rolloutFailureReason The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
         * 
         * @return builder
         * 
         */
        public Builder rolloutFailureReason(String rolloutFailureReason) {
            return rolloutFailureReason(Output.of(rolloutFailureReason));
        }

        /**
         * @param rolloutState State of the auto rollout process.
         * 
         * @return builder
         * 
         */
        public Builder rolloutState(@Nullable Output<GoogleCloudDialogflowCxV3RolloutStateArgs> rolloutState) {
            $.rolloutState = rolloutState;
            return this;
        }

        /**
         * @param rolloutState State of the auto rollout process.
         * 
         * @return builder
         * 
         */
        public Builder rolloutState(GoogleCloudDialogflowCxV3RolloutStateArgs rolloutState) {
            return rolloutState(Output.of(rolloutState));
        }

        /**
         * @param startTime Start time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Start time of this experiment.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param state The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<ExperimentState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
         * 
         * @return builder
         * 
         */
        public Builder state(ExperimentState state) {
            return state(Output.of(state));
        }

        /**
         * @param variantsHistory The history of updates to the experiment variants.
         * 
         * @return builder
         * 
         */
        public Builder variantsHistory(@Nullable Output<List<GoogleCloudDialogflowCxV3VariantsHistoryArgs>> variantsHistory) {
            $.variantsHistory = variantsHistory;
            return this;
        }

        /**
         * @param variantsHistory The history of updates to the experiment variants.
         * 
         * @return builder
         * 
         */
        public Builder variantsHistory(List<GoogleCloudDialogflowCxV3VariantsHistoryArgs> variantsHistory) {
            return variantsHistory(Output.of(variantsHistory));
        }

        /**
         * @param variantsHistory The history of updates to the experiment variants.
         * 
         * @return builder
         * 
         */
        public Builder variantsHistory(GoogleCloudDialogflowCxV3VariantsHistoryArgs... variantsHistory) {
            return variantsHistory(List.of(variantsHistory));
        }

        public ExperimentArgs build() {
            $.agentId = Objects.requireNonNull($.agentId, "expected parameter 'agentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            return $;
        }
    }

}
