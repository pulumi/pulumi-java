// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.AuthorityArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.BasisArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.BuildArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.DeployableArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.DiscoveryArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.DocumentNoteArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.FileNoteArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.InTotoArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.PackageArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.PackageInfoNoteArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.RelatedUrlArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.RelationshipNoteArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.VulnerabilityArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NoteArgs extends com.pulumi.resources.ResourceArgs {

    public static final NoteArgs Empty = new NoteArgs();

    /**
     * A note describing an attestation role.
     * 
     */
    @Import(name="attestationAuthority")
    private @Nullable Output<AuthorityArgs> attestationAuthority;

    /**
     * @return A note describing an attestation role.
     * 
     */
    public Optional<Output<AuthorityArgs>> attestationAuthority() {
        return Optional.ofNullable(this.attestationAuthority);
    }

    /**
     * A note describing a base image.
     * 
     */
    @Import(name="baseImage")
    private @Nullable Output<BasisArgs> baseImage;

    /**
     * @return A note describing a base image.
     * 
     */
    public Optional<Output<BasisArgs>> baseImage() {
        return Optional.ofNullable(this.baseImage);
    }

    /**
     * A note describing build provenance for a verifiable build.
     * 
     */
    @Import(name="build")
    private @Nullable Output<BuildArgs> build;

    /**
     * @return A note describing build provenance for a verifiable build.
     * 
     */
    public Optional<Output<BuildArgs>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * A note describing something that can be deployed.
     * 
     */
    @Import(name="deployable")
    private @Nullable Output<DeployableArgs> deployable;

    /**
     * @return A note describing something that can be deployed.
     * 
     */
    public Optional<Output<DeployableArgs>> deployable() {
        return Optional.ofNullable(this.deployable);
    }

    /**
     * A note describing the initial analysis of a resource.
     * 
     */
    @Import(name="discovery")
    private @Nullable Output<DiscoveryArgs> discovery;

    /**
     * @return A note describing the initial analysis of a resource.
     * 
     */
    public Optional<Output<DiscoveryArgs>> discovery() {
        return Optional.ofNullable(this.discovery);
    }

    /**
     * Time of expiration for this note. Empty if note does not expire.
     * 
     */
    @Import(name="expirationTime")
    private @Nullable Output<String> expirationTime;

    /**
     * @return Time of expiration for this note. Empty if note does not expire.
     * 
     */
    public Optional<Output<String>> expirationTime() {
        return Optional.ofNullable(this.expirationTime);
    }

    /**
     * A note describing an in-toto link.
     * 
     */
    @Import(name="intoto")
    private @Nullable Output<InTotoArgs> intoto;

    /**
     * @return A note describing an in-toto link.
     * 
     */
    public Optional<Output<InTotoArgs>> intoto() {
        return Optional.ofNullable(this.intoto);
    }

    /**
     * A detailed description of this note.
     * 
     */
    @Import(name="longDescription")
    private @Nullable Output<String> longDescription;

    /**
     * @return A detailed description of this note.
     * 
     */
    public Optional<Output<String>> longDescription() {
        return Optional.ofNullable(this.longDescription);
    }

    /**
     * Required. The ID to use for this note.
     * 
     */
    @Import(name="noteId", required=true)
    private Output<String> noteId;

    /**
     * @return Required. The ID to use for this note.
     * 
     */
    public Output<String> noteId() {
        return this.noteId;
    }

    /**
     * A note describing a package hosted by various package managers.
     * 
     */
    @Import(name="package")
    private @Nullable Output<PackageArgs> package_;

    /**
     * @return A note describing a package hosted by various package managers.
     * 
     */
    public Optional<Output<PackageArgs>> package_() {
        return Optional.ofNullable(this.package_);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Other notes related to this note.
     * 
     */
    @Import(name="relatedNoteNames")
    private @Nullable Output<List<String>> relatedNoteNames;

    /**
     * @return Other notes related to this note.
     * 
     */
    public Optional<Output<List<String>>> relatedNoteNames() {
        return Optional.ofNullable(this.relatedNoteNames);
    }

    /**
     * URLs associated with this note.
     * 
     */
    @Import(name="relatedUrl")
    private @Nullable Output<List<RelatedUrlArgs>> relatedUrl;

    /**
     * @return URLs associated with this note.
     * 
     */
    public Optional<Output<List<RelatedUrlArgs>>> relatedUrl() {
        return Optional.ofNullable(this.relatedUrl);
    }

    /**
     * A note describing a software bill of materials.
     * 
     */
    @Import(name="sbom")
    private @Nullable Output<DocumentNoteArgs> sbom;

    /**
     * @return A note describing a software bill of materials.
     * 
     */
    public Optional<Output<DocumentNoteArgs>> sbom() {
        return Optional.ofNullable(this.sbom);
    }

    /**
     * A one sentence description of this note.
     * 
     */
    @Import(name="shortDescription")
    private @Nullable Output<String> shortDescription;

    /**
     * @return A one sentence description of this note.
     * 
     */
    public Optional<Output<String>> shortDescription() {
        return Optional.ofNullable(this.shortDescription);
    }

    /**
     * A note describing an SPDX File.
     * 
     */
    @Import(name="spdxFile")
    private @Nullable Output<FileNoteArgs> spdxFile;

    /**
     * @return A note describing an SPDX File.
     * 
     */
    public Optional<Output<FileNoteArgs>> spdxFile() {
        return Optional.ofNullable(this.spdxFile);
    }

    /**
     * A note describing an SPDX Package.
     * 
     */
    @Import(name="spdxPackage")
    private @Nullable Output<PackageInfoNoteArgs> spdxPackage;

    /**
     * @return A note describing an SPDX Package.
     * 
     */
    public Optional<Output<PackageInfoNoteArgs>> spdxPackage() {
        return Optional.ofNullable(this.spdxPackage);
    }

    /**
     * A note describing an SPDX File.
     * 
     */
    @Import(name="spdxRelationship")
    private @Nullable Output<RelationshipNoteArgs> spdxRelationship;

    /**
     * @return A note describing an SPDX File.
     * 
     */
    public Optional<Output<RelationshipNoteArgs>> spdxRelationship() {
        return Optional.ofNullable(this.spdxRelationship);
    }

    /**
     * A note describing a package vulnerability.
     * 
     */
    @Import(name="vulnerability")
    private @Nullable Output<VulnerabilityArgs> vulnerability;

    /**
     * @return A note describing a package vulnerability.
     * 
     */
    public Optional<Output<VulnerabilityArgs>> vulnerability() {
        return Optional.ofNullable(this.vulnerability);
    }

    private NoteArgs() {}

    private NoteArgs(NoteArgs $) {
        this.attestationAuthority = $.attestationAuthority;
        this.baseImage = $.baseImage;
        this.build = $.build;
        this.deployable = $.deployable;
        this.discovery = $.discovery;
        this.expirationTime = $.expirationTime;
        this.intoto = $.intoto;
        this.longDescription = $.longDescription;
        this.noteId = $.noteId;
        this.package_ = $.package_;
        this.project = $.project;
        this.relatedNoteNames = $.relatedNoteNames;
        this.relatedUrl = $.relatedUrl;
        this.sbom = $.sbom;
        this.shortDescription = $.shortDescription;
        this.spdxFile = $.spdxFile;
        this.spdxPackage = $.spdxPackage;
        this.spdxRelationship = $.spdxRelationship;
        this.vulnerability = $.vulnerability;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NoteArgs $;

        public Builder() {
            $ = new NoteArgs();
        }

        public Builder(NoteArgs defaults) {
            $ = new NoteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attestationAuthority A note describing an attestation role.
         * 
         * @return builder
         * 
         */
        public Builder attestationAuthority(@Nullable Output<AuthorityArgs> attestationAuthority) {
            $.attestationAuthority = attestationAuthority;
            return this;
        }

        /**
         * @param attestationAuthority A note describing an attestation role.
         * 
         * @return builder
         * 
         */
        public Builder attestationAuthority(AuthorityArgs attestationAuthority) {
            return attestationAuthority(Output.of(attestationAuthority));
        }

        /**
         * @param baseImage A note describing a base image.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(@Nullable Output<BasisArgs> baseImage) {
            $.baseImage = baseImage;
            return this;
        }

        /**
         * @param baseImage A note describing a base image.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(BasisArgs baseImage) {
            return baseImage(Output.of(baseImage));
        }

        /**
         * @param build A note describing build provenance for a verifiable build.
         * 
         * @return builder
         * 
         */
        public Builder build(@Nullable Output<BuildArgs> build) {
            $.build = build;
            return this;
        }

        /**
         * @param build A note describing build provenance for a verifiable build.
         * 
         * @return builder
         * 
         */
        public Builder build(BuildArgs build) {
            return build(Output.of(build));
        }

        /**
         * @param deployable A note describing something that can be deployed.
         * 
         * @return builder
         * 
         */
        public Builder deployable(@Nullable Output<DeployableArgs> deployable) {
            $.deployable = deployable;
            return this;
        }

        /**
         * @param deployable A note describing something that can be deployed.
         * 
         * @return builder
         * 
         */
        public Builder deployable(DeployableArgs deployable) {
            return deployable(Output.of(deployable));
        }

        /**
         * @param discovery A note describing the initial analysis of a resource.
         * 
         * @return builder
         * 
         */
        public Builder discovery(@Nullable Output<DiscoveryArgs> discovery) {
            $.discovery = discovery;
            return this;
        }

        /**
         * @param discovery A note describing the initial analysis of a resource.
         * 
         * @return builder
         * 
         */
        public Builder discovery(DiscoveryArgs discovery) {
            return discovery(Output.of(discovery));
        }

        /**
         * @param expirationTime Time of expiration for this note. Empty if note does not expire.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(@Nullable Output<String> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param expirationTime Time of expiration for this note. Empty if note does not expire.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        /**
         * @param intoto A note describing an in-toto link.
         * 
         * @return builder
         * 
         */
        public Builder intoto(@Nullable Output<InTotoArgs> intoto) {
            $.intoto = intoto;
            return this;
        }

        /**
         * @param intoto A note describing an in-toto link.
         * 
         * @return builder
         * 
         */
        public Builder intoto(InTotoArgs intoto) {
            return intoto(Output.of(intoto));
        }

        /**
         * @param longDescription A detailed description of this note.
         * 
         * @return builder
         * 
         */
        public Builder longDescription(@Nullable Output<String> longDescription) {
            $.longDescription = longDescription;
            return this;
        }

        /**
         * @param longDescription A detailed description of this note.
         * 
         * @return builder
         * 
         */
        public Builder longDescription(String longDescription) {
            return longDescription(Output.of(longDescription));
        }

        /**
         * @param noteId Required. The ID to use for this note.
         * 
         * @return builder
         * 
         */
        public Builder noteId(Output<String> noteId) {
            $.noteId = noteId;
            return this;
        }

        /**
         * @param noteId Required. The ID to use for this note.
         * 
         * @return builder
         * 
         */
        public Builder noteId(String noteId) {
            return noteId(Output.of(noteId));
        }

        /**
         * @param package_ A note describing a package hosted by various package managers.
         * 
         * @return builder
         * 
         */
        public Builder package_(@Nullable Output<PackageArgs> package_) {
            $.package_ = package_;
            return this;
        }

        /**
         * @param package_ A note describing a package hosted by various package managers.
         * 
         * @return builder
         * 
         */
        public Builder package_(PackageArgs package_) {
            return package_(Output.of(package_));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param relatedNoteNames Other notes related to this note.
         * 
         * @return builder
         * 
         */
        public Builder relatedNoteNames(@Nullable Output<List<String>> relatedNoteNames) {
            $.relatedNoteNames = relatedNoteNames;
            return this;
        }

        /**
         * @param relatedNoteNames Other notes related to this note.
         * 
         * @return builder
         * 
         */
        public Builder relatedNoteNames(List<String> relatedNoteNames) {
            return relatedNoteNames(Output.of(relatedNoteNames));
        }

        /**
         * @param relatedNoteNames Other notes related to this note.
         * 
         * @return builder
         * 
         */
        public Builder relatedNoteNames(String... relatedNoteNames) {
            return relatedNoteNames(List.of(relatedNoteNames));
        }

        /**
         * @param relatedUrl URLs associated with this note.
         * 
         * @return builder
         * 
         */
        public Builder relatedUrl(@Nullable Output<List<RelatedUrlArgs>> relatedUrl) {
            $.relatedUrl = relatedUrl;
            return this;
        }

        /**
         * @param relatedUrl URLs associated with this note.
         * 
         * @return builder
         * 
         */
        public Builder relatedUrl(List<RelatedUrlArgs> relatedUrl) {
            return relatedUrl(Output.of(relatedUrl));
        }

        /**
         * @param relatedUrl URLs associated with this note.
         * 
         * @return builder
         * 
         */
        public Builder relatedUrl(RelatedUrlArgs... relatedUrl) {
            return relatedUrl(List.of(relatedUrl));
        }

        /**
         * @param sbom A note describing a software bill of materials.
         * 
         * @return builder
         * 
         */
        public Builder sbom(@Nullable Output<DocumentNoteArgs> sbom) {
            $.sbom = sbom;
            return this;
        }

        /**
         * @param sbom A note describing a software bill of materials.
         * 
         * @return builder
         * 
         */
        public Builder sbom(DocumentNoteArgs sbom) {
            return sbom(Output.of(sbom));
        }

        /**
         * @param shortDescription A one sentence description of this note.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(@Nullable Output<String> shortDescription) {
            $.shortDescription = shortDescription;
            return this;
        }

        /**
         * @param shortDescription A one sentence description of this note.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(String shortDescription) {
            return shortDescription(Output.of(shortDescription));
        }

        /**
         * @param spdxFile A note describing an SPDX File.
         * 
         * @return builder
         * 
         */
        public Builder spdxFile(@Nullable Output<FileNoteArgs> spdxFile) {
            $.spdxFile = spdxFile;
            return this;
        }

        /**
         * @param spdxFile A note describing an SPDX File.
         * 
         * @return builder
         * 
         */
        public Builder spdxFile(FileNoteArgs spdxFile) {
            return spdxFile(Output.of(spdxFile));
        }

        /**
         * @param spdxPackage A note describing an SPDX Package.
         * 
         * @return builder
         * 
         */
        public Builder spdxPackage(@Nullable Output<PackageInfoNoteArgs> spdxPackage) {
            $.spdxPackage = spdxPackage;
            return this;
        }

        /**
         * @param spdxPackage A note describing an SPDX Package.
         * 
         * @return builder
         * 
         */
        public Builder spdxPackage(PackageInfoNoteArgs spdxPackage) {
            return spdxPackage(Output.of(spdxPackage));
        }

        /**
         * @param spdxRelationship A note describing an SPDX File.
         * 
         * @return builder
         * 
         */
        public Builder spdxRelationship(@Nullable Output<RelationshipNoteArgs> spdxRelationship) {
            $.spdxRelationship = spdxRelationship;
            return this;
        }

        /**
         * @param spdxRelationship A note describing an SPDX File.
         * 
         * @return builder
         * 
         */
        public Builder spdxRelationship(RelationshipNoteArgs spdxRelationship) {
            return spdxRelationship(Output.of(spdxRelationship));
        }

        /**
         * @param vulnerability A note describing a package vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder vulnerability(@Nullable Output<VulnerabilityArgs> vulnerability) {
            $.vulnerability = vulnerability;
            return this;
        }

        /**
         * @param vulnerability A note describing a package vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder vulnerability(VulnerabilityArgs vulnerability) {
            return vulnerability(Output.of(vulnerability));
        }

        public NoteArgs build() {
            $.noteId = Objects.requireNonNull($.noteId, "expected parameter 'noteId' to be non-null");
            return $;
        }
    }

}
