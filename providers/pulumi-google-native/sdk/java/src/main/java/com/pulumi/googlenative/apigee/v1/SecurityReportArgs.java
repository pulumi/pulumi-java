// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.apigee.v1.inputs.GoogleCloudApigeeV1SecurityReportQueryMetricArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityReportArgs Empty = new SecurityReportArgs();

    /**
     * Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
     * 
     */
    @Import(name="csvDelimiter")
    private @Nullable Output<String> csvDelimiter;

    /**
     * @return Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
     * 
     */
    public Optional<Output<String>> csvDelimiter() {
        return Optional.ofNullable(this.csvDelimiter);
    }

    /**
     * A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<String>> dimensions;

    /**
     * @return A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
     * 
     */
    public Optional<Output<List<String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Security Report display name which users can specify.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Security Report display name which users can specify.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.
     * 
     */
    @Import(name="envgroupHostname")
    private @Nullable Output<String> envgroupHostname;

    /**
     * @return Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.
     * 
     */
    public Optional<Output<String>> envgroupHostname() {
        return Optional.ofNullable(this.envgroupHostname);
    }

    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
     * 
     */
    @Import(name="groupByTimeUnit")
    private @Nullable Output<String> groupByTimeUnit;

    /**
     * @return Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
     * 
     */
    public Optional<Output<String>> groupByTimeUnit() {
        return Optional.ofNullable(this.groupByTimeUnit);
    }

    /**
     * Maximum number of rows that can be returned in the result.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return Maximum number of rows that can be returned in the result.
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * A list of Metrics.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<GoogleCloudApigeeV1SecurityReportQueryMetricArgs>> metrics;

    /**
     * @return A list of Metrics.
     * 
     */
    public Optional<Output<List<GoogleCloudApigeeV1SecurityReportQueryMetricArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
     * 
     */
    @Import(name="mimeType")
    private @Nullable Output<String> mimeType;

    /**
     * @return Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
     * 
     */
    public Optional<Output<String>> mimeType() {
        return Optional.ofNullable(this.mimeType);
    }

    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Report Definition ID.
     * 
     */
    @Import(name="reportDefinitionId")
    private @Nullable Output<String> reportDefinitionId;

    /**
     * @return Report Definition ID.
     * 
     */
    public Optional<Output<String>> reportDefinitionId() {
        return Optional.ofNullable(this.reportDefinitionId);
    }

    /**
     * Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: &#34;timeRange&#34;: { &#34;start&#34;: &#34;2018-07-29T00:13:00Z&#34;, &#34;end&#34;: &#34;2018-08-01T00:18:00Z&#34; }
     * 
     */
    @Import(name="timeRange", required=true)
    private Output<Object> timeRange;

    /**
     * @return Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: &#34;timeRange&#34;: { &#34;start&#34;: &#34;2018-07-29T00:13:00Z&#34;, &#34;end&#34;: &#34;2018-08-01T00:18:00Z&#34; }
     * 
     */
    public Output<Object> timeRange() {
        return this.timeRange;
    }

    private SecurityReportArgs() {}

    private SecurityReportArgs(SecurityReportArgs $) {
        this.csvDelimiter = $.csvDelimiter;
        this.dimensions = $.dimensions;
        this.displayName = $.displayName;
        this.envgroupHostname = $.envgroupHostname;
        this.environmentId = $.environmentId;
        this.filter = $.filter;
        this.groupByTimeUnit = $.groupByTimeUnit;
        this.limit = $.limit;
        this.metrics = $.metrics;
        this.mimeType = $.mimeType;
        this.organizationId = $.organizationId;
        this.reportDefinitionId = $.reportDefinitionId;
        this.timeRange = $.timeRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityReportArgs $;

        public Builder() {
            $ = new SecurityReportArgs();
        }

        public Builder(SecurityReportArgs defaults) {
            $ = new SecurityReportArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param csvDelimiter Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
         * 
         * @return builder
         * 
         */
        public Builder csvDelimiter(@Nullable Output<String> csvDelimiter) {
            $.csvDelimiter = csvDelimiter;
            return this;
        }

        /**
         * @param csvDelimiter Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
         * 
         * @return builder
         * 
         */
        public Builder csvDelimiter(String csvDelimiter) {
            return csvDelimiter(Output.of(csvDelimiter));
        }

        /**
         * @param dimensions A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
         * 
         * @return builder
         * 
         */
        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param dimensions A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
         * 
         * @return builder
         * 
         */
        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param displayName Security Report display name which users can specify.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Security Report display name which users can specify.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param envgroupHostname Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.
         * 
         * @return builder
         * 
         */
        public Builder envgroupHostname(@Nullable Output<String> envgroupHostname) {
            $.envgroupHostname = envgroupHostname;
            return this;
        }

        /**
         * @param envgroupHostname Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.
         * 
         * @return builder
         * 
         */
        public Builder envgroupHostname(String envgroupHostname) {
            return envgroupHostname(Output.of(envgroupHostname));
        }

        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param filter Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param groupByTimeUnit Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
         * 
         * @return builder
         * 
         */
        public Builder groupByTimeUnit(@Nullable Output<String> groupByTimeUnit) {
            $.groupByTimeUnit = groupByTimeUnit;
            return this;
        }

        /**
         * @param groupByTimeUnit Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
         * 
         * @return builder
         * 
         */
        public Builder groupByTimeUnit(String groupByTimeUnit) {
            return groupByTimeUnit(Output.of(groupByTimeUnit));
        }

        /**
         * @param limit Maximum number of rows that can be returned in the result.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Maximum number of rows that can be returned in the result.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param metrics A list of Metrics.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<List<GoogleCloudApigeeV1SecurityReportQueryMetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics A list of Metrics.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<GoogleCloudApigeeV1SecurityReportQueryMetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics A list of Metrics.
         * 
         * @return builder
         * 
         */
        public Builder metrics(GoogleCloudApigeeV1SecurityReportQueryMetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param mimeType Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(@Nullable Output<String> mimeType) {
            $.mimeType = mimeType;
            return this;
        }

        /**
         * @param mimeType Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(String mimeType) {
            return mimeType(Output.of(mimeType));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param reportDefinitionId Report Definition ID.
         * 
         * @return builder
         * 
         */
        public Builder reportDefinitionId(@Nullable Output<String> reportDefinitionId) {
            $.reportDefinitionId = reportDefinitionId;
            return this;
        }

        /**
         * @param reportDefinitionId Report Definition ID.
         * 
         * @return builder
         * 
         */
        public Builder reportDefinitionId(String reportDefinitionId) {
            return reportDefinitionId(Output.of(reportDefinitionId));
        }

        /**
         * @param timeRange Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: &#34;timeRange&#34;: { &#34;start&#34;: &#34;2018-07-29T00:13:00Z&#34;, &#34;end&#34;: &#34;2018-08-01T00:18:00Z&#34; }
         * 
         * @return builder
         * 
         */
        public Builder timeRange(Output<Object> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: &#34;timeRange&#34;: { &#34;start&#34;: &#34;2018-07-29T00:13:00Z&#34;, &#34;end&#34;: &#34;2018-08-01T00:18:00Z&#34; }
         * 
         * @return builder
         * 
         */
        public Builder timeRange(Object timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public SecurityReportArgs build() {
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            $.timeRange = Objects.requireNonNull($.timeRange, "expected parameter 'timeRange' to be non-null");
            return $;
        }
    }

}
