// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudfunctions.v1.inputs.FailurePolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes EventTrigger, used to request events be sent from another service.
 * 
 */
public final class EventTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventTriggerArgs Empty = new EventTriggerArgs();

    /**
     * The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*{@literal /}eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is &#39;change&#39;. These parts are lower case.
     * 
     */
    @Import(name="eventType", required=true)
    private Output<String> eventType;

    /**
     * @return The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*{@literal /}eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is &#39;change&#39;. These parts are lower case.
     * 
     */
    public Output<String> eventType() {
        return this.eventType;
    }

    /**
     * Specifies policy for failed executions.
     * 
     */
    @Import(name="failurePolicy")
    private @Nullable Output<FailurePolicyArgs> failurePolicy;

    /**
     * @return Specifies policy for failed executions.
     * 
     */
    public Optional<Output<FailurePolicyArgs>> failurePolicy() {
        return Optional.ofNullable(this.failurePolicy);
    }

    /**
     * The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of &#34;google.pubsub.topic.publish&#34; should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized &#34;long&#34; format. See each *service&#39;s* documentation for supported formats.
     * 
     */
    @Import(name="resource", required=true)
    private Output<String> resource;

    /**
     * @return The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of &#34;google.pubsub.topic.publish&#34; should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized &#34;long&#34; format. See each *service&#39;s* documentation for supported formats.
     * 
     */
    public Output<String> resource() {
        return this.resource;
    }

    /**
     * The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    private EventTriggerArgs() {}

    private EventTriggerArgs(EventTriggerArgs $) {
        this.eventType = $.eventType;
        this.failurePolicy = $.failurePolicy;
        this.resource = $.resource;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventTriggerArgs $;

        public Builder() {
            $ = new EventTriggerArgs();
        }

        public Builder(EventTriggerArgs defaults) {
            $ = new EventTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventType The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*{@literal /}eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is &#39;change&#39;. These parts are lower case.
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*{@literal /}eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is &#39;change&#39;. These parts are lower case.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param failurePolicy Specifies policy for failed executions.
         * 
         * @return builder
         * 
         */
        public Builder failurePolicy(@Nullable Output<FailurePolicyArgs> failurePolicy) {
            $.failurePolicy = failurePolicy;
            return this;
        }

        /**
         * @param failurePolicy Specifies policy for failed executions.
         * 
         * @return builder
         * 
         */
        public Builder failurePolicy(FailurePolicyArgs failurePolicy) {
            return failurePolicy(Output.of(failurePolicy));
        }

        /**
         * @param resource The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of &#34;google.pubsub.topic.publish&#34; should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized &#34;long&#34; format. See each *service&#39;s* documentation for supported formats.
         * 
         * @return builder
         * 
         */
        public Builder resource(Output<String> resource) {
            $.resource = resource;
            return this;
        }

        /**
         * @param resource The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of &#34;google.pubsub.topic.publish&#34; should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized &#34;long&#34; format. See each *service&#39;s* documentation for supported formats.
         * 
         * @return builder
         * 
         */
        public Builder resource(String resource) {
            return resource(Output.of(resource));
        }

        /**
         * @param service The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public EventTriggerArgs build() {
            $.eventType = Objects.requireNonNull($.eventType, "expected parameter 'eventType' to be non-null");
            $.resource = Objects.requireNonNull($.resource, "expected parameter 'resource' to be non-null");
            return $;
        }
    }

}
