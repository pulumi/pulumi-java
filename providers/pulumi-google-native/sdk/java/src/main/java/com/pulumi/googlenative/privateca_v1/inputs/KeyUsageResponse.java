// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1.inputs.ExtendedKeyUsageOptionsResponse;
import com.pulumi.googlenative.privateca_v1.inputs.KeyUsageOptionsResponse;
import com.pulumi.googlenative.privateca_v1.inputs.ObjectIdResponse;
import java.util.List;
import java.util.Objects;


/**
 * A KeyUsage describes key usage values that may appear in an X.509 certificate.
 * 
 */
public final class KeyUsageResponse extends com.pulumi.resources.InvokeArgs {

    public static final KeyUsageResponse Empty = new KeyUsageResponse();

    /**
     * Describes high-level ways in which a key may be used.
     * 
     */
    @Import(name="baseKeyUsage", required=true)
      private final KeyUsageOptionsResponse baseKeyUsage;

    public KeyUsageOptionsResponse baseKeyUsage() {
        return this.baseKeyUsage;
    }

    /**
     * Detailed scenarios in which a key may be used.
     * 
     */
    @Import(name="extendedKeyUsage", required=true)
      private final ExtendedKeyUsageOptionsResponse extendedKeyUsage;

    public ExtendedKeyUsageOptionsResponse extendedKeyUsage() {
        return this.extendedKeyUsage;
    }

    /**
     * Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
     * 
     */
    @Import(name="unknownExtendedKeyUsages", required=true)
      private final List<ObjectIdResponse> unknownExtendedKeyUsages;

    public List<ObjectIdResponse> unknownExtendedKeyUsages() {
        return this.unknownExtendedKeyUsages;
    }

    public KeyUsageResponse(
        KeyUsageOptionsResponse baseKeyUsage,
        ExtendedKeyUsageOptionsResponse extendedKeyUsage,
        List<ObjectIdResponse> unknownExtendedKeyUsages) {
        this.baseKeyUsage = Objects.requireNonNull(baseKeyUsage, "expected parameter 'baseKeyUsage' to be non-null");
        this.extendedKeyUsage = Objects.requireNonNull(extendedKeyUsage, "expected parameter 'extendedKeyUsage' to be non-null");
        this.unknownExtendedKeyUsages = Objects.requireNonNull(unknownExtendedKeyUsages, "expected parameter 'unknownExtendedKeyUsages' to be non-null");
    }

    private KeyUsageResponse() {
        this.baseKeyUsage = null;
        this.extendedKeyUsage = null;
        this.unknownExtendedKeyUsages = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyUsageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyUsageOptionsResponse baseKeyUsage;
        private ExtendedKeyUsageOptionsResponse extendedKeyUsage;
        private List<ObjectIdResponse> unknownExtendedKeyUsages;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyUsageResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseKeyUsage = defaults.baseKeyUsage;
    	      this.extendedKeyUsage = defaults.extendedKeyUsage;
    	      this.unknownExtendedKeyUsages = defaults.unknownExtendedKeyUsages;
        }

        public Builder baseKeyUsage(KeyUsageOptionsResponse baseKeyUsage) {
            this.baseKeyUsage = Objects.requireNonNull(baseKeyUsage);
            return this;
        }
        public Builder extendedKeyUsage(ExtendedKeyUsageOptionsResponse extendedKeyUsage) {
            this.extendedKeyUsage = Objects.requireNonNull(extendedKeyUsage);
            return this;
        }
        public Builder unknownExtendedKeyUsages(List<ObjectIdResponse> unknownExtendedKeyUsages) {
            this.unknownExtendedKeyUsages = Objects.requireNonNull(unknownExtendedKeyUsages);
            return this;
        }
        public Builder unknownExtendedKeyUsages(ObjectIdResponse... unknownExtendedKeyUsages) {
            return unknownExtendedKeyUsages(List.of(unknownExtendedKeyUsages));
        }        public KeyUsageResponse build() {
            return new KeyUsageResponse(baseKeyUsage, extendedKeyUsage, unknownExtendedKeyUsages);
        }
    }
}
