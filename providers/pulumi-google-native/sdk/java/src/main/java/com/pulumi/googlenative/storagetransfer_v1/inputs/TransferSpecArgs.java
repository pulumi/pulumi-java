// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.storagetransfer_v1.inputs.AwsS3DataArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.AzureBlobStorageDataArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.GcsDataArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.HttpDataArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.ObjectConditionsArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.PosixFilesystemArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.TransferManifestArgs;
import com.pulumi.googlenative.storagetransfer_v1.inputs.TransferOptionsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for running a transfer.
 * 
 */
public final class TransferSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferSpecArgs Empty = new TransferSpecArgs();

    /**
     * An AWS S3 data source.
     * 
     */
    @Import(name="awsS3DataSource")
      private final @Nullable Output<AwsS3DataArgs> awsS3DataSource;

    public Output<AwsS3DataArgs> awsS3DataSource() {
        return this.awsS3DataSource == null ? Codegen.empty() : this.awsS3DataSource;
    }

    /**
     * An Azure Blob Storage data source.
     * 
     */
    @Import(name="azureBlobStorageDataSource")
      private final @Nullable Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource;

    public Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource() {
        return this.azureBlobStorageDataSource == null ? Codegen.empty() : this.azureBlobStorageDataSource;
    }

    /**
     * A Cloud Storage data sink.
     * 
     */
    @Import(name="gcsDataSink")
      private final @Nullable Output<GcsDataArgs> gcsDataSink;

    public Output<GcsDataArgs> gcsDataSink() {
        return this.gcsDataSink == null ? Codegen.empty() : this.gcsDataSink;
    }

    /**
     * A Cloud Storage data source.
     * 
     */
    @Import(name="gcsDataSource")
      private final @Nullable Output<GcsDataArgs> gcsDataSource;

    public Output<GcsDataArgs> gcsDataSource() {
        return this.gcsDataSource == null ? Codegen.empty() : this.gcsDataSource;
    }

    /**
     * Cloud Storage intermediate data location.
     * 
     */
    @Import(name="gcsIntermediateDataLocation")
      private final @Nullable Output<GcsDataArgs> gcsIntermediateDataLocation;

    public Output<GcsDataArgs> gcsIntermediateDataLocation() {
        return this.gcsIntermediateDataLocation == null ? Codegen.empty() : this.gcsIntermediateDataLocation;
    }

    /**
     * An HTTP URL data source.
     * 
     */
    @Import(name="httpDataSource")
      private final @Nullable Output<HttpDataArgs> httpDataSource;

    public Output<HttpDataArgs> httpDataSource() {
        return this.httpDataSource == null ? Codegen.empty() : this.httpDataSource;
    }

    /**
     * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
     * 
     */
    @Import(name="objectConditions")
      private final @Nullable Output<ObjectConditionsArgs> objectConditions;

    public Output<ObjectConditionsArgs> objectConditions() {
        return this.objectConditions == null ? Codegen.empty() : this.objectConditions;
    }

    /**
     * A POSIX Filesystem data sink.
     * 
     */
    @Import(name="posixDataSink")
      private final @Nullable Output<PosixFilesystemArgs> posixDataSink;

    public Output<PosixFilesystemArgs> posixDataSink() {
        return this.posixDataSink == null ? Codegen.empty() : this.posixDataSink;
    }

    /**
     * A POSIX Filesystem data source.
     * 
     */
    @Import(name="posixDataSource")
      private final @Nullable Output<PosixFilesystemArgs> posixDataSource;

    public Output<PosixFilesystemArgs> posixDataSource() {
        return this.posixDataSource == null ? Codegen.empty() : this.posixDataSource;
    }

    /**
     * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    @Import(name="sinkAgentPoolName")
      private final @Nullable Output<String> sinkAgentPoolName;

    public Output<String> sinkAgentPoolName() {
        return this.sinkAgentPoolName == null ? Codegen.empty() : this.sinkAgentPoolName;
    }

    /**
     * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    @Import(name="sourceAgentPoolName")
      private final @Nullable Output<String> sourceAgentPoolName;

    public Output<String> sourceAgentPoolName() {
        return this.sourceAgentPoolName == null ? Codegen.empty() : this.sourceAgentPoolName;
    }

    /**
     * A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    @Import(name="transferManifest")
      private final @Nullable Output<TransferManifestArgs> transferManifest;

    public Output<TransferManifestArgs> transferManifest() {
        return this.transferManifest == null ? Codegen.empty() : this.transferManifest;
    }

    /**
     * If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    @Import(name="transferOptions")
      private final @Nullable Output<TransferOptionsArgs> transferOptions;

    public Output<TransferOptionsArgs> transferOptions() {
        return this.transferOptions == null ? Codegen.empty() : this.transferOptions;
    }

    public TransferSpecArgs(
        @Nullable Output<AwsS3DataArgs> awsS3DataSource,
        @Nullable Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource,
        @Nullable Output<GcsDataArgs> gcsDataSink,
        @Nullable Output<GcsDataArgs> gcsDataSource,
        @Nullable Output<GcsDataArgs> gcsIntermediateDataLocation,
        @Nullable Output<HttpDataArgs> httpDataSource,
        @Nullable Output<ObjectConditionsArgs> objectConditions,
        @Nullable Output<PosixFilesystemArgs> posixDataSink,
        @Nullable Output<PosixFilesystemArgs> posixDataSource,
        @Nullable Output<String> sinkAgentPoolName,
        @Nullable Output<String> sourceAgentPoolName,
        @Nullable Output<TransferManifestArgs> transferManifest,
        @Nullable Output<TransferOptionsArgs> transferOptions) {
        this.awsS3DataSource = awsS3DataSource;
        this.azureBlobStorageDataSource = azureBlobStorageDataSource;
        this.gcsDataSink = gcsDataSink;
        this.gcsDataSource = gcsDataSource;
        this.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
        this.httpDataSource = httpDataSource;
        this.objectConditions = objectConditions;
        this.posixDataSink = posixDataSink;
        this.posixDataSource = posixDataSource;
        this.sinkAgentPoolName = sinkAgentPoolName;
        this.sourceAgentPoolName = sourceAgentPoolName;
        this.transferManifest = transferManifest;
        this.transferOptions = transferOptions;
    }

    private TransferSpecArgs() {
        this.awsS3DataSource = Codegen.empty();
        this.azureBlobStorageDataSource = Codegen.empty();
        this.gcsDataSink = Codegen.empty();
        this.gcsDataSource = Codegen.empty();
        this.gcsIntermediateDataLocation = Codegen.empty();
        this.httpDataSource = Codegen.empty();
        this.objectConditions = Codegen.empty();
        this.posixDataSink = Codegen.empty();
        this.posixDataSource = Codegen.empty();
        this.sinkAgentPoolName = Codegen.empty();
        this.sourceAgentPoolName = Codegen.empty();
        this.transferManifest = Codegen.empty();
        this.transferOptions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AwsS3DataArgs> awsS3DataSource;
        private @Nullable Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource;
        private @Nullable Output<GcsDataArgs> gcsDataSink;
        private @Nullable Output<GcsDataArgs> gcsDataSource;
        private @Nullable Output<GcsDataArgs> gcsIntermediateDataLocation;
        private @Nullable Output<HttpDataArgs> httpDataSource;
        private @Nullable Output<ObjectConditionsArgs> objectConditions;
        private @Nullable Output<PosixFilesystemArgs> posixDataSink;
        private @Nullable Output<PosixFilesystemArgs> posixDataSource;
        private @Nullable Output<String> sinkAgentPoolName;
        private @Nullable Output<String> sourceAgentPoolName;
        private @Nullable Output<TransferManifestArgs> transferManifest;
        private @Nullable Output<TransferOptionsArgs> transferOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsS3DataSource = defaults.awsS3DataSource;
    	      this.azureBlobStorageDataSource = defaults.azureBlobStorageDataSource;
    	      this.gcsDataSink = defaults.gcsDataSink;
    	      this.gcsDataSource = defaults.gcsDataSource;
    	      this.gcsIntermediateDataLocation = defaults.gcsIntermediateDataLocation;
    	      this.httpDataSource = defaults.httpDataSource;
    	      this.objectConditions = defaults.objectConditions;
    	      this.posixDataSink = defaults.posixDataSink;
    	      this.posixDataSource = defaults.posixDataSource;
    	      this.sinkAgentPoolName = defaults.sinkAgentPoolName;
    	      this.sourceAgentPoolName = defaults.sourceAgentPoolName;
    	      this.transferManifest = defaults.transferManifest;
    	      this.transferOptions = defaults.transferOptions;
        }

        public Builder awsS3DataSource(@Nullable Output<AwsS3DataArgs> awsS3DataSource) {
            this.awsS3DataSource = awsS3DataSource;
            return this;
        }
        public Builder awsS3DataSource(@Nullable AwsS3DataArgs awsS3DataSource) {
            this.awsS3DataSource = Codegen.ofNullable(awsS3DataSource);
            return this;
        }
        public Builder azureBlobStorageDataSource(@Nullable Output<AzureBlobStorageDataArgs> azureBlobStorageDataSource) {
            this.azureBlobStorageDataSource = azureBlobStorageDataSource;
            return this;
        }
        public Builder azureBlobStorageDataSource(@Nullable AzureBlobStorageDataArgs azureBlobStorageDataSource) {
            this.azureBlobStorageDataSource = Codegen.ofNullable(azureBlobStorageDataSource);
            return this;
        }
        public Builder gcsDataSink(@Nullable Output<GcsDataArgs> gcsDataSink) {
            this.gcsDataSink = gcsDataSink;
            return this;
        }
        public Builder gcsDataSink(@Nullable GcsDataArgs gcsDataSink) {
            this.gcsDataSink = Codegen.ofNullable(gcsDataSink);
            return this;
        }
        public Builder gcsDataSource(@Nullable Output<GcsDataArgs> gcsDataSource) {
            this.gcsDataSource = gcsDataSource;
            return this;
        }
        public Builder gcsDataSource(@Nullable GcsDataArgs gcsDataSource) {
            this.gcsDataSource = Codegen.ofNullable(gcsDataSource);
            return this;
        }
        public Builder gcsIntermediateDataLocation(@Nullable Output<GcsDataArgs> gcsIntermediateDataLocation) {
            this.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
            return this;
        }
        public Builder gcsIntermediateDataLocation(@Nullable GcsDataArgs gcsIntermediateDataLocation) {
            this.gcsIntermediateDataLocation = Codegen.ofNullable(gcsIntermediateDataLocation);
            return this;
        }
        public Builder httpDataSource(@Nullable Output<HttpDataArgs> httpDataSource) {
            this.httpDataSource = httpDataSource;
            return this;
        }
        public Builder httpDataSource(@Nullable HttpDataArgs httpDataSource) {
            this.httpDataSource = Codegen.ofNullable(httpDataSource);
            return this;
        }
        public Builder objectConditions(@Nullable Output<ObjectConditionsArgs> objectConditions) {
            this.objectConditions = objectConditions;
            return this;
        }
        public Builder objectConditions(@Nullable ObjectConditionsArgs objectConditions) {
            this.objectConditions = Codegen.ofNullable(objectConditions);
            return this;
        }
        public Builder posixDataSink(@Nullable Output<PosixFilesystemArgs> posixDataSink) {
            this.posixDataSink = posixDataSink;
            return this;
        }
        public Builder posixDataSink(@Nullable PosixFilesystemArgs posixDataSink) {
            this.posixDataSink = Codegen.ofNullable(posixDataSink);
            return this;
        }
        public Builder posixDataSource(@Nullable Output<PosixFilesystemArgs> posixDataSource) {
            this.posixDataSource = posixDataSource;
            return this;
        }
        public Builder posixDataSource(@Nullable PosixFilesystemArgs posixDataSource) {
            this.posixDataSource = Codegen.ofNullable(posixDataSource);
            return this;
        }
        public Builder sinkAgentPoolName(@Nullable Output<String> sinkAgentPoolName) {
            this.sinkAgentPoolName = sinkAgentPoolName;
            return this;
        }
        public Builder sinkAgentPoolName(@Nullable String sinkAgentPoolName) {
            this.sinkAgentPoolName = Codegen.ofNullable(sinkAgentPoolName);
            return this;
        }
        public Builder sourceAgentPoolName(@Nullable Output<String> sourceAgentPoolName) {
            this.sourceAgentPoolName = sourceAgentPoolName;
            return this;
        }
        public Builder sourceAgentPoolName(@Nullable String sourceAgentPoolName) {
            this.sourceAgentPoolName = Codegen.ofNullable(sourceAgentPoolName);
            return this;
        }
        public Builder transferManifest(@Nullable Output<TransferManifestArgs> transferManifest) {
            this.transferManifest = transferManifest;
            return this;
        }
        public Builder transferManifest(@Nullable TransferManifestArgs transferManifest) {
            this.transferManifest = Codegen.ofNullable(transferManifest);
            return this;
        }
        public Builder transferOptions(@Nullable Output<TransferOptionsArgs> transferOptions) {
            this.transferOptions = transferOptions;
            return this;
        }
        public Builder transferOptions(@Nullable TransferOptionsArgs transferOptions) {
            this.transferOptions = Codegen.ofNullable(transferOptions);
            return this;
        }        public TransferSpecArgs build() {
            return new TransferSpecArgs(awsS3DataSource, azureBlobStorageDataSource, gcsDataSink, gcsDataSource, gcsIntermediateDataLocation, httpDataSource, objectConditions, posixDataSink, posixDataSource, sinkAgentPoolName, sourceAgentPoolName, transferManifest, transferOptions);
        }
    }
}
