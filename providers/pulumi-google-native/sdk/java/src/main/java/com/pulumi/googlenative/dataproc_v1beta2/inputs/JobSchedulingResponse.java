// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


/**
 * Job scheduling options.
 * 
 */
public final class JobSchedulingResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobSchedulingResponse Empty = new JobSchedulingResponse();

    /**
     * Optional. Maximum number of times per hour a driver may be restarted as a result of driver terminating with non-zero code before job is reported failed.A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window.Maximum value is 10.
     * 
     */
    @Import(name="maxFailuresPerHour", required=true)
    private Integer maxFailuresPerHour;

    public Integer maxFailuresPerHour() {
        return this.maxFailuresPerHour;
    }

    /**
     * Optional. Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240.
     * 
     */
    @Import(name="maxFailuresTotal", required=true)
    private Integer maxFailuresTotal;

    public Integer maxFailuresTotal() {
        return this.maxFailuresTotal;
    }

    private JobSchedulingResponse() {}

    private JobSchedulingResponse(JobSchedulingResponse $) {
        this.maxFailuresPerHour = $.maxFailuresPerHour;
        this.maxFailuresTotal = $.maxFailuresTotal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobSchedulingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobSchedulingResponse $;

        public Builder() {
            $ = new JobSchedulingResponse();
        }

        public Builder(JobSchedulingResponse defaults) {
            $ = new JobSchedulingResponse(Objects.requireNonNull(defaults));
        }

        public Builder maxFailuresPerHour(Integer maxFailuresPerHour) {
            $.maxFailuresPerHour = maxFailuresPerHour;
            return this;
        }

        public Builder maxFailuresTotal(Integer maxFailuresTotal) {
            $.maxFailuresTotal = maxFailuresTotal;
            return this;
        }

        public JobSchedulingResponse build() {
            $.maxFailuresPerHour = Objects.requireNonNull($.maxFailuresPerHour, "expected parameter 'maxFailuresPerHour' to be non-null");
            $.maxFailuresTotal = Objects.requireNonNull($.maxFailuresTotal, "expected parameter 'maxFailuresTotal' to be non-null");
            return $;
        }
    }

}
