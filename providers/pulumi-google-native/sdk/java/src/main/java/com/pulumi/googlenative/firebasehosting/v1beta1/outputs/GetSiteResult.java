// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSiteResult {
    /**
     * @return Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.
     * 
     */
    private final String appId;
    /**
     * @return The default URL for the Hosting site.
     * 
     */
    private final String defaultUrl;
    /**
     * @return Optional. User-specified labels for the Hosting site.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project&#39;s [`ProjectNumber`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google&#39;s [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     * 
     */
    private final String name;
    /**
     * @return The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetSiteResult(
        @CustomType.Parameter("appId") String appId,
        @CustomType.Parameter("defaultUrl") String defaultUrl,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("type") String type) {
        this.appId = appId;
        this.defaultUrl = defaultUrl;
        this.labels = labels;
        this.name = name;
        this.type = type;
    }

    /**
     * @return Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.
     * 
     */
    public String appId() {
        return this.appId;
    }
    /**
     * @return The default URL for the Hosting site.
     * 
     */
    public String defaultUrl() {
        return this.defaultUrl;
    }
    /**
     * @return Optional. User-specified labels for the Hosting site.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project&#39;s [`ProjectNumber`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google&#39;s [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSiteResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appId;
        private String defaultUrl;
        private Map<String,String> labels;
        private String name;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSiteResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.defaultUrl = defaults.defaultUrl;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        public Builder appId(String appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }
        public Builder defaultUrl(String defaultUrl) {
            this.defaultUrl = Objects.requireNonNull(defaultUrl);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetSiteResult build() {
            return new GetSiteResult(appId, defaultUrl, labels, name, type);
        }
    }
}
