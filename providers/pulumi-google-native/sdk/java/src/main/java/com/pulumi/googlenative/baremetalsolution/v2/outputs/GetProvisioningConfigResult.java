// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.baremetalsolution.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.baremetalsolution.v2.outputs.InstanceConfigResponse;
import com.pulumi.googlenative.baremetalsolution.v2.outputs.NetworkConfigResponse;
import com.pulumi.googlenative.baremetalsolution.v2.outputs.VolumeConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProvisioningConfigResult {
    /**
     * @return URI to Cloud Console UI view of this provisioning config.
     * 
     */
    private final String cloudConsoleUri;
    /**
     * @return Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     * @deprecated
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     */
    @Deprecated /* Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
    private final String email;
    /**
     * @return A service account to enable customers to access instance credentials upon handover.
     * 
     */
    private final String handoverServiceAccount;
    /**
     * @return Instances to be created.
     * 
     */
    private final List<InstanceConfigResponse> instances;
    /**
     * @return Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
     * 
     */
    private final String location;
    /**
     * @return The name of the provisioning config.
     * 
     */
    private final String name;
    /**
     * @return Networks to be created.
     * 
     */
    private final List<NetworkConfigResponse> networks;
    /**
     * @return State of ProvisioningConfig.
     * 
     */
    private final String state;
    /**
     * @return Optional status messages associated with the FAILED state.
     * 
     */
    private final String statusMessage;
    /**
     * @return A generated ticket id to track provisioning request.
     * 
     */
    private final String ticketId;
    /**
     * @return Last update timestamp.
     * 
     */
    private final String updateTime;
    /**
     * @return Volumes to be created.
     * 
     */
    private final List<VolumeConfigResponse> volumes;
    /**
     * @return If true, VPC SC is enabled for the cluster.
     * 
     */
    private final Boolean vpcScEnabled;

    @CustomType.Constructor
    private GetProvisioningConfigResult(
        @CustomType.Parameter("cloudConsoleUri") String cloudConsoleUri,
        @CustomType.Parameter("email") String email,
        @CustomType.Parameter("handoverServiceAccount") String handoverServiceAccount,
        @CustomType.Parameter("instances") List<InstanceConfigResponse> instances,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networks") List<NetworkConfigResponse> networks,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("statusMessage") String statusMessage,
        @CustomType.Parameter("ticketId") String ticketId,
        @CustomType.Parameter("updateTime") String updateTime,
        @CustomType.Parameter("volumes") List<VolumeConfigResponse> volumes,
        @CustomType.Parameter("vpcScEnabled") Boolean vpcScEnabled) {
        this.cloudConsoleUri = cloudConsoleUri;
        this.email = email;
        this.handoverServiceAccount = handoverServiceAccount;
        this.instances = instances;
        this.location = location;
        this.name = name;
        this.networks = networks;
        this.state = state;
        this.statusMessage = statusMessage;
        this.ticketId = ticketId;
        this.updateTime = updateTime;
        this.volumes = volumes;
        this.vpcScEnabled = vpcScEnabled;
    }

    /**
     * @return URI to Cloud Console UI view of this provisioning config.
     * 
     */
    public String cloudConsoleUri() {
        return this.cloudConsoleUri;
    }
    /**
     * @return Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     * @deprecated
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     */
    @Deprecated /* Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
    public String email() {
        return this.email;
    }
    /**
     * @return A service account to enable customers to access instance credentials upon handover.
     * 
     */
    public String handoverServiceAccount() {
        return this.handoverServiceAccount;
    }
    /**
     * @return Instances to be created.
     * 
     */
    public List<InstanceConfigResponse> instances() {
        return this.instances;
    }
    /**
     * @return Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the provisioning config.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Networks to be created.
     * 
     */
    public List<NetworkConfigResponse> networks() {
        return this.networks;
    }
    /**
     * @return State of ProvisioningConfig.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Optional status messages associated with the FAILED state.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return A generated ticket id to track provisioning request.
     * 
     */
    public String ticketId() {
        return this.ticketId;
    }
    /**
     * @return Last update timestamp.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return Volumes to be created.
     * 
     */
    public List<VolumeConfigResponse> volumes() {
        return this.volumes;
    }
    /**
     * @return If true, VPC SC is enabled for the cluster.
     * 
     */
    public Boolean vpcScEnabled() {
        return this.vpcScEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProvisioningConfigResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String cloudConsoleUri;
        private String email;
        private String handoverServiceAccount;
        private List<InstanceConfigResponse> instances;
        private String location;
        private String name;
        private List<NetworkConfigResponse> networks;
        private String state;
        private String statusMessage;
        private String ticketId;
        private String updateTime;
        private List<VolumeConfigResponse> volumes;
        private Boolean vpcScEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProvisioningConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudConsoleUri = defaults.cloudConsoleUri;
    	      this.email = defaults.email;
    	      this.handoverServiceAccount = defaults.handoverServiceAccount;
    	      this.instances = defaults.instances;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
    	      this.state = defaults.state;
    	      this.statusMessage = defaults.statusMessage;
    	      this.ticketId = defaults.ticketId;
    	      this.updateTime = defaults.updateTime;
    	      this.volumes = defaults.volumes;
    	      this.vpcScEnabled = defaults.vpcScEnabled;
        }

        public Builder cloudConsoleUri(String cloudConsoleUri) {
            this.cloudConsoleUri = Objects.requireNonNull(cloudConsoleUri);
            return this;
        }
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder handoverServiceAccount(String handoverServiceAccount) {
            this.handoverServiceAccount = Objects.requireNonNull(handoverServiceAccount);
            return this;
        }
        public Builder instances(List<InstanceConfigResponse> instances) {
            this.instances = Objects.requireNonNull(instances);
            return this;
        }
        public Builder instances(InstanceConfigResponse... instances) {
            return instances(List.of(instances));
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networks(List<NetworkConfigResponse> networks) {
            this.networks = Objects.requireNonNull(networks);
            return this;
        }
        public Builder networks(NetworkConfigResponse... networks) {
            return networks(List.of(networks));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        public Builder ticketId(String ticketId) {
            this.ticketId = Objects.requireNonNull(ticketId);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public Builder volumes(List<VolumeConfigResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(VolumeConfigResponse... volumes) {
            return volumes(List.of(volumes));
        }
        public Builder vpcScEnabled(Boolean vpcScEnabled) {
            this.vpcScEnabled = Objects.requireNonNull(vpcScEnabled);
            return this;
        }        public GetProvisioningConfigResult build() {
            return new GetProvisioningConfigResult(cloudConsoleUri, email, handoverServiceAccount, instances, location, name, networks, state, statusMessage, ticketId, updateTime, volumes, vpcScEnabled);
        }
    }
}
