// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.osconfig_v1beta.inputs.PatchInstanceFilterGroupLabelArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
 * 
 */
public final class PatchInstanceFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final PatchInstanceFilterArgs Empty = new PatchInstanceFilterArgs();

    /**
     * Target all VM instances in the project. If true, no other criteria is permitted.
     * 
     */
    @Import(name="all")
      private final @Nullable Output<Boolean> all;

    public Output<Boolean> all() {
        return this.all == null ? Codegen.empty() : this.all;
    }

    /**
     * Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example &#34;env=prod or env=staging&#34;.
     * 
     */
    @Import(name="groupLabels")
      private final @Nullable Output<List<PatchInstanceFilterGroupLabelArgs>> groupLabels;

    public Output<List<PatchInstanceFilterGroupLabelArgs>> groupLabels() {
        return this.groupLabels == null ? Codegen.empty() : this.groupLabels;
    }

    /**
     * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=&#34;prod-&#34;.
     * 
     */
    @Import(name="instanceNamePrefixes")
      private final @Nullable Output<List<String>> instanceNamePrefixes;

    public Output<List<String>> instanceNamePrefixes() {
        return this.instanceNamePrefixes == null ? Codegen.empty() : this.instanceNamePrefixes;
    }

    /**
     * Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
     * 
     */
    @Import(name="instances")
      private final @Nullable Output<List<String>> instances;

    public Output<List<String>> instances() {
        return this.instances == null ? Codegen.empty() : this.instances;
    }

    /**
     * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
     * 
     */
    @Import(name="zones")
      private final @Nullable Output<List<String>> zones;

    public Output<List<String>> zones() {
        return this.zones == null ? Codegen.empty() : this.zones;
    }

    public PatchInstanceFilterArgs(
        @Nullable Output<Boolean> all,
        @Nullable Output<List<PatchInstanceFilterGroupLabelArgs>> groupLabels,
        @Nullable Output<List<String>> instanceNamePrefixes,
        @Nullable Output<List<String>> instances,
        @Nullable Output<List<String>> zones) {
        this.all = all;
        this.groupLabels = groupLabels;
        this.instanceNamePrefixes = instanceNamePrefixes;
        this.instances = instances;
        this.zones = zones;
    }

    private PatchInstanceFilterArgs() {
        this.all = Codegen.empty();
        this.groupLabels = Codegen.empty();
        this.instanceNamePrefixes = Codegen.empty();
        this.instances = Codegen.empty();
        this.zones = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PatchInstanceFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> all;
        private @Nullable Output<List<PatchInstanceFilterGroupLabelArgs>> groupLabels;
        private @Nullable Output<List<String>> instanceNamePrefixes;
        private @Nullable Output<List<String>> instances;
        private @Nullable Output<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(PatchInstanceFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.all = defaults.all;
    	      this.groupLabels = defaults.groupLabels;
    	      this.instanceNamePrefixes = defaults.instanceNamePrefixes;
    	      this.instances = defaults.instances;
    	      this.zones = defaults.zones;
        }

        public Builder all(@Nullable Output<Boolean> all) {
            this.all = all;
            return this;
        }
        public Builder all(@Nullable Boolean all) {
            this.all = Codegen.ofNullable(all);
            return this;
        }
        public Builder groupLabels(@Nullable Output<List<PatchInstanceFilterGroupLabelArgs>> groupLabels) {
            this.groupLabels = groupLabels;
            return this;
        }
        public Builder groupLabels(@Nullable List<PatchInstanceFilterGroupLabelArgs> groupLabels) {
            this.groupLabels = Codegen.ofNullable(groupLabels);
            return this;
        }
        public Builder groupLabels(PatchInstanceFilterGroupLabelArgs... groupLabels) {
            return groupLabels(List.of(groupLabels));
        }
        public Builder instanceNamePrefixes(@Nullable Output<List<String>> instanceNamePrefixes) {
            this.instanceNamePrefixes = instanceNamePrefixes;
            return this;
        }
        public Builder instanceNamePrefixes(@Nullable List<String> instanceNamePrefixes) {
            this.instanceNamePrefixes = Codegen.ofNullable(instanceNamePrefixes);
            return this;
        }
        public Builder instanceNamePrefixes(String... instanceNamePrefixes) {
            return instanceNamePrefixes(List.of(instanceNamePrefixes));
        }
        public Builder instances(@Nullable Output<List<String>> instances) {
            this.instances = instances;
            return this;
        }
        public Builder instances(@Nullable List<String> instances) {
            this.instances = Codegen.ofNullable(instances);
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        public Builder zones(@Nullable Output<List<String>> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = Codegen.ofNullable(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public PatchInstanceFilterArgs build() {
            return new PatchInstanceFilterArgs(all, groupLabels, instanceNamePrefixes, instances, zones);
        }
    }
}
