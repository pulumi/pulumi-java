// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * For display only. Metadata associated with a Cloud SQL instance.
 * 
 */
public final class CloudSQLInstanceInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final CloudSQLInstanceInfoResponse Empty = new CloudSQLInstanceInfoResponse();

    /**
     * Name of a Cloud SQL instance.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * External IP address of a Cloud SQL instance.
     * 
     */
    @Import(name="externalIp", required=true)
    private String externalIp;

    public String externalIp() {
        return this.externalIp;
    }

    /**
     * Internal IP address of a Cloud SQL instance.
     * 
     */
    @Import(name="internalIp", required=true)
    private String internalIp;

    public String internalIp() {
        return this.internalIp;
    }

    /**
     * URI of a Cloud SQL instance network or empty string if the instance does not have one.
     * 
     */
    @Import(name="networkUri", required=true)
    private String networkUri;

    public String networkUri() {
        return this.networkUri;
    }

    /**
     * Region in which the Cloud SQL instance is running.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    public String region() {
        return this.region;
    }

    /**
     * URI of a Cloud SQL instance.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    public String uri() {
        return this.uri;
    }

    private CloudSQLInstanceInfoResponse() {}

    private CloudSQLInstanceInfoResponse(CloudSQLInstanceInfoResponse $) {
        this.displayName = $.displayName;
        this.externalIp = $.externalIp;
        this.internalIp = $.internalIp;
        this.networkUri = $.networkUri;
        this.region = $.region;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudSQLInstanceInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudSQLInstanceInfoResponse $;

        public Builder() {
            $ = new CloudSQLInstanceInfoResponse();
        }

        public Builder(CloudSQLInstanceInfoResponse defaults) {
            $ = new CloudSQLInstanceInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder externalIp(String externalIp) {
            $.externalIp = externalIp;
            return this;
        }

        public Builder internalIp(String internalIp) {
            $.internalIp = internalIp;
            return this;
        }

        public Builder networkUri(String networkUri) {
            $.networkUri = networkUri;
            return this;
        }

        public Builder region(String region) {
            $.region = region;
            return this;
        }

        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public CloudSQLInstanceInfoResponse build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.externalIp = Objects.requireNonNull($.externalIp, "expected parameter 'externalIp' to be non-null");
            $.internalIp = Objects.requireNonNull($.internalIp, "expected parameter 'internalIp' to be non-null");
            $.networkUri = Objects.requireNonNull($.networkUri, "expected parameter 'networkUri' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
