// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2FieldIdResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2InfoTypeResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GoogleProtobufEmptyResponse;
import java.lang.String;
import java.util.Objects;


/**
 * A column with a semantic tag attached.
 * 
 */
public final class GooglePrivacyDlpV2TaggedFieldResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2TaggedFieldResponse Empty = new GooglePrivacyDlpV2TaggedFieldResponse();

    /**
     * A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
     * 
     */
    @Import(name="customTag", required=true)
      private final String customTag;

    public String customTag() {
        return this.customTag;
    }

    /**
     * Identifies the column.
     * 
     */
    @Import(name="field", required=true)
      private final GooglePrivacyDlpV2FieldIdResponse field;

    public GooglePrivacyDlpV2FieldIdResponse field() {
        return this.field;
    }

    /**
     * If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
     * 
     */
    @Import(name="inferred", required=true)
      private final GoogleProtobufEmptyResponse inferred;

    public GoogleProtobufEmptyResponse inferred() {
        return this.inferred;
    }

    /**
     * A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
     * 
     */
    @Import(name="infoType", required=true)
      private final GooglePrivacyDlpV2InfoTypeResponse infoType;

    public GooglePrivacyDlpV2InfoTypeResponse infoType() {
        return this.infoType;
    }

    public GooglePrivacyDlpV2TaggedFieldResponse(
        String customTag,
        GooglePrivacyDlpV2FieldIdResponse field,
        GoogleProtobufEmptyResponse inferred,
        GooglePrivacyDlpV2InfoTypeResponse infoType) {
        this.customTag = Objects.requireNonNull(customTag, "expected parameter 'customTag' to be non-null");
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.inferred = Objects.requireNonNull(inferred, "expected parameter 'inferred' to be non-null");
        this.infoType = Objects.requireNonNull(infoType, "expected parameter 'infoType' to be non-null");
    }

    private GooglePrivacyDlpV2TaggedFieldResponse() {
        this.customTag = null;
        this.field = null;
        this.inferred = null;
        this.infoType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2TaggedFieldResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String customTag;
        private GooglePrivacyDlpV2FieldIdResponse field;
        private GoogleProtobufEmptyResponse inferred;
        private GooglePrivacyDlpV2InfoTypeResponse infoType;

        public Builder() {
    	      // Empty
        }

        public Builder(GooglePrivacyDlpV2TaggedFieldResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customTag = defaults.customTag;
    	      this.field = defaults.field;
    	      this.inferred = defaults.inferred;
    	      this.infoType = defaults.infoType;
        }

        public Builder customTag(String customTag) {
            this.customTag = Objects.requireNonNull(customTag);
            return this;
        }
        public Builder field(GooglePrivacyDlpV2FieldIdResponse field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        public Builder inferred(GoogleProtobufEmptyResponse inferred) {
            this.inferred = Objects.requireNonNull(inferred);
            return this;
        }
        public Builder infoType(GooglePrivacyDlpV2InfoTypeResponse infoType) {
            this.infoType = Objects.requireNonNull(infoType);
            return this;
        }        public GooglePrivacyDlpV2TaggedFieldResponse build() {
            return new GooglePrivacyDlpV2TaggedFieldResponse(customTag, field, inferred, infoType);
        }
    }
}
