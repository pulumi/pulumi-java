// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2DetectionRuleResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2DictionaryResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2InfoTypeResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2RegexResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2StoredTypeResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2SurrogateTypeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
 * 
 */
public final class GooglePrivacyDlpV2CustomInfoTypeResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2CustomInfoTypeResponse Empty = new GooglePrivacyDlpV2CustomInfoTypeResponse();

    /**
     * Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
     * 
     */
    @Import(name="detectionRules", required=true)
    private List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules;

    public List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules() {
        return this.detectionRules;
    }

    /**
     * A list of phrases to detect as a CustomInfoType.
     * 
     */
    @Import(name="dictionary", required=true)
    private GooglePrivacyDlpV2DictionaryResponse dictionary;

    public GooglePrivacyDlpV2DictionaryResponse dictionary() {
        return this.dictionary;
    }

    /**
     * If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
     * 
     */
    @Import(name="exclusionType", required=true)
    private String exclusionType;

    public String exclusionType() {
        return this.exclusionType;
    }

    /**
     * CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
     * 
     */
    @Import(name="infoType", required=true)
    private GooglePrivacyDlpV2InfoTypeResponse infoType;

    public GooglePrivacyDlpV2InfoTypeResponse infoType() {
        return this.infoType;
    }

    /**
     * Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
     * 
     */
    @Import(name="likelihood", required=true)
    private String likelihood;

    public String likelihood() {
        return this.likelihood;
    }

    /**
     * Regular expression based CustomInfoType.
     * 
     */
    @Import(name="regex", required=true)
    private GooglePrivacyDlpV2RegexResponse regex;

    public GooglePrivacyDlpV2RegexResponse regex() {
        return this.regex;
    }

    /**
     * Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
     * 
     */
    @Import(name="storedType", required=true)
    private GooglePrivacyDlpV2StoredTypeResponse storedType;

    public GooglePrivacyDlpV2StoredTypeResponse storedType() {
        return this.storedType;
    }

    /**
     * Message for detecting output from deidentification transformations that support reversing.
     * 
     */
    @Import(name="surrogateType", required=true)
    private GooglePrivacyDlpV2SurrogateTypeResponse surrogateType;

    public GooglePrivacyDlpV2SurrogateTypeResponse surrogateType() {
        return this.surrogateType;
    }

    private GooglePrivacyDlpV2CustomInfoTypeResponse() {}

    private GooglePrivacyDlpV2CustomInfoTypeResponse(GooglePrivacyDlpV2CustomInfoTypeResponse $) {
        this.detectionRules = $.detectionRules;
        this.dictionary = $.dictionary;
        this.exclusionType = $.exclusionType;
        this.infoType = $.infoType;
        this.likelihood = $.likelihood;
        this.regex = $.regex;
        this.storedType = $.storedType;
        this.surrogateType = $.surrogateType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CustomInfoTypeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CustomInfoTypeResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CustomInfoTypeResponse();
        }

        public Builder(GooglePrivacyDlpV2CustomInfoTypeResponse defaults) {
            $ = new GooglePrivacyDlpV2CustomInfoTypeResponse(Objects.requireNonNull(defaults));
        }

        public Builder detectionRules(List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules) {
            $.detectionRules = detectionRules;
            return this;
        }

        public Builder detectionRules(GooglePrivacyDlpV2DetectionRuleResponse... detectionRules) {
            return detectionRules(List.of(detectionRules));
        }

        public Builder dictionary(GooglePrivacyDlpV2DictionaryResponse dictionary) {
            $.dictionary = dictionary;
            return this;
        }

        public Builder exclusionType(String exclusionType) {
            $.exclusionType = exclusionType;
            return this;
        }

        public Builder infoType(GooglePrivacyDlpV2InfoTypeResponse infoType) {
            $.infoType = infoType;
            return this;
        }

        public Builder likelihood(String likelihood) {
            $.likelihood = likelihood;
            return this;
        }

        public Builder regex(GooglePrivacyDlpV2RegexResponse regex) {
            $.regex = regex;
            return this;
        }

        public Builder storedType(GooglePrivacyDlpV2StoredTypeResponse storedType) {
            $.storedType = storedType;
            return this;
        }

        public Builder surrogateType(GooglePrivacyDlpV2SurrogateTypeResponse surrogateType) {
            $.surrogateType = surrogateType;
            return this;
        }

        public GooglePrivacyDlpV2CustomInfoTypeResponse build() {
            $.detectionRules = Objects.requireNonNull($.detectionRules, "expected parameter 'detectionRules' to be non-null");
            $.dictionary = Objects.requireNonNull($.dictionary, "expected parameter 'dictionary' to be non-null");
            $.exclusionType = Objects.requireNonNull($.exclusionType, "expected parameter 'exclusionType' to be non-null");
            $.infoType = Objects.requireNonNull($.infoType, "expected parameter 'infoType' to be non-null");
            $.likelihood = Objects.requireNonNull($.likelihood, "expected parameter 'likelihood' to be non-null");
            $.regex = Objects.requireNonNull($.regex, "expected parameter 'regex' to be non-null");
            $.storedType = Objects.requireNonNull($.storedType, "expected parameter 'storedType' to be non-null");
            $.surrogateType = Objects.requireNonNull($.surrogateType, "expected parameter 'surrogateType' to be non-null");
            return $;
        }
    }

}
