// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class OwnerReferenceResponse {
    /**
     * @return API version of the referent.
     * 
     */
    private final String apiVersion;
    /**
     * @return If true, AND if the owner has the &#34;foregroundDeletion&#34; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs &#34;delete&#34; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
     * 
     */
    private final Boolean blockOwnerDeletion;
    /**
     * @return If true, this reference points to the managing controller. +optional
     * 
     */
    private final Boolean controller;
    /**
     * @return Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    private final String kind;
    /**
     * @return Name of the referent. More info: https://kubernetes.io/docs/user-guide/identifiers#names
     * 
     */
    private final String name;
    /**
     * @return UID of the referent. More info: https://kubernetes.io/docs/user-guide/identifiers#uids
     * 
     */
    private final String uid;

    @CustomType.Constructor
    private OwnerReferenceResponse(
        @CustomType.Parameter("apiVersion") String apiVersion,
        @CustomType.Parameter("blockOwnerDeletion") Boolean blockOwnerDeletion,
        @CustomType.Parameter("controller") Boolean controller,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("uid") String uid) {
        this.apiVersion = apiVersion;
        this.blockOwnerDeletion = blockOwnerDeletion;
        this.controller = controller;
        this.kind = kind;
        this.name = name;
        this.uid = uid;
    }

    /**
     * @return API version of the referent.
     * 
     */
    public String apiVersion() {
        return this.apiVersion;
    }
    /**
     * @return If true, AND if the owner has the &#34;foregroundDeletion&#34; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs &#34;delete&#34; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
     * 
     */
    public Boolean blockOwnerDeletion() {
        return this.blockOwnerDeletion;
    }
    /**
     * @return If true, this reference points to the managing controller. +optional
     * 
     */
    public Boolean controller() {
        return this.controller;
    }
    /**
     * @return Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Name of the referent. More info: https://kubernetes.io/docs/user-guide/identifiers#names
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return UID of the referent. More info: https://kubernetes.io/docs/user-guide/identifiers#uids
     * 
     */
    public String uid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OwnerReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String apiVersion;
        private Boolean blockOwnerDeletion;
        private Boolean controller;
        private String kind;
        private String name;
        private String uid;

        public Builder() {
    	      // Empty
        }

        public Builder(OwnerReferenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.blockOwnerDeletion = defaults.blockOwnerDeletion;
    	      this.controller = defaults.controller;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.uid = defaults.uid;
        }

        public Builder apiVersion(String apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }
        public Builder blockOwnerDeletion(Boolean blockOwnerDeletion) {
            this.blockOwnerDeletion = Objects.requireNonNull(blockOwnerDeletion);
            return this;
        }
        public Builder controller(Boolean controller) {
            this.controller = Objects.requireNonNull(controller);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }        public OwnerReferenceResponse build() {
            return new OwnerReferenceResponse(apiVersion, blockOwnerDeletion, controller, kind, name, uid);
        }
    }
}
