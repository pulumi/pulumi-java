// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.genomics_v1alpha2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.genomics_v1alpha2.inputs.DiskResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The system resources for the pipeline run.
 * 
 */
public final class PipelineResourcesResponse extends com.pulumi.resources.InvokeArgs {

    public static final PipelineResourcesResponse Empty = new PipelineResourcesResponse();

    /**
     * Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
     * 
     */
    @Import(name="acceleratorCount", required=true)
      private final String acceleratorCount;

    public String acceleratorCount() {
        return this.acceleratorCount;
    }

    /**
     * Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
     * 
     */
    @Import(name="acceleratorType", required=true)
      private final String acceleratorType;

    public String acceleratorType() {
        return this.acceleratorType;
    }

    /**
     * The size of the boot disk. Defaults to 10 (GB).
     * 
     */
    @Import(name="bootDiskSizeGb", required=true)
      private final Integer bootDiskSizeGb;

    public Integer bootDiskSizeGb() {
        return this.bootDiskSizeGb;
    }

    /**
     * Disks to attach.
     * 
     */
    @Import(name="disks", required=true)
      private final List<DiskResponse> disks;

    public List<DiskResponse> disks() {
        return this.disks;
    }

    /**
     * The minimum number of cores to use. Defaults to 1.
     * 
     */
    @Import(name="minimumCpuCores", required=true)
      private final Integer minimumCpuCores;

    public Integer minimumCpuCores() {
        return this.minimumCpuCores;
    }

    /**
     * The minimum amount of RAM to use. Defaults to 3.75 (GB)
     * 
     */
    @Import(name="minimumRamGb", required=true)
      private final Double minimumRamGb;

    public Double minimumRamGb() {
        return this.minimumRamGb;
    }

    /**
     * Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM&#39;s Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
     * 
     */
    @Import(name="noAddress", required=true)
      private final Boolean noAddress;

    public Boolean noAddress() {
        return this.noAddress;
    }

    /**
     * Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
     * 
     */
    @Import(name="preemptible", required=true)
      private final Boolean preemptible;

    public Boolean preemptible() {
        return this.preemptible;
    }

    /**
     * List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
     * 
     */
    @Import(name="zones", required=true)
      private final List<String> zones;

    public List<String> zones() {
        return this.zones;
    }

    public PipelineResourcesResponse(
        String acceleratorCount,
        String acceleratorType,
        Integer bootDiskSizeGb,
        List<DiskResponse> disks,
        Integer minimumCpuCores,
        Double minimumRamGb,
        Boolean noAddress,
        Boolean preemptible,
        List<String> zones) {
        this.acceleratorCount = Objects.requireNonNull(acceleratorCount, "expected parameter 'acceleratorCount' to be non-null");
        this.acceleratorType = Objects.requireNonNull(acceleratorType, "expected parameter 'acceleratorType' to be non-null");
        this.bootDiskSizeGb = Objects.requireNonNull(bootDiskSizeGb, "expected parameter 'bootDiskSizeGb' to be non-null");
        this.disks = Objects.requireNonNull(disks, "expected parameter 'disks' to be non-null");
        this.minimumCpuCores = Objects.requireNonNull(minimumCpuCores, "expected parameter 'minimumCpuCores' to be non-null");
        this.minimumRamGb = Objects.requireNonNull(minimumRamGb, "expected parameter 'minimumRamGb' to be non-null");
        this.noAddress = Objects.requireNonNull(noAddress, "expected parameter 'noAddress' to be non-null");
        this.preemptible = Objects.requireNonNull(preemptible, "expected parameter 'preemptible' to be non-null");
        this.zones = Objects.requireNonNull(zones, "expected parameter 'zones' to be non-null");
    }

    private PipelineResourcesResponse() {
        this.acceleratorCount = null;
        this.acceleratorType = null;
        this.bootDiskSizeGb = null;
        this.disks = List.of();
        this.minimumCpuCores = null;
        this.minimumRamGb = null;
        this.noAddress = null;
        this.preemptible = null;
        this.zones = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineResourcesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String acceleratorCount;
        private String acceleratorType;
        private Integer bootDiskSizeGb;
        private List<DiskResponse> disks;
        private Integer minimumCpuCores;
        private Double minimumRamGb;
        private Boolean noAddress;
        private Boolean preemptible;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineResourcesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorCount = defaults.acceleratorCount;
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.disks = defaults.disks;
    	      this.minimumCpuCores = defaults.minimumCpuCores;
    	      this.minimumRamGb = defaults.minimumRamGb;
    	      this.noAddress = defaults.noAddress;
    	      this.preemptible = defaults.preemptible;
    	      this.zones = defaults.zones;
        }

        public Builder acceleratorCount(String acceleratorCount) {
            this.acceleratorCount = Objects.requireNonNull(acceleratorCount);
            return this;
        }
        public Builder acceleratorType(String acceleratorType) {
            this.acceleratorType = Objects.requireNonNull(acceleratorType);
            return this;
        }
        public Builder bootDiskSizeGb(Integer bootDiskSizeGb) {
            this.bootDiskSizeGb = Objects.requireNonNull(bootDiskSizeGb);
            return this;
        }
        public Builder disks(List<DiskResponse> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(DiskResponse... disks) {
            return disks(List.of(disks));
        }
        public Builder minimumCpuCores(Integer minimumCpuCores) {
            this.minimumCpuCores = Objects.requireNonNull(minimumCpuCores);
            return this;
        }
        public Builder minimumRamGb(Double minimumRamGb) {
            this.minimumRamGb = Objects.requireNonNull(minimumRamGb);
            return this;
        }
        public Builder noAddress(Boolean noAddress) {
            this.noAddress = Objects.requireNonNull(noAddress);
            return this;
        }
        public Builder preemptible(Boolean preemptible) {
            this.preemptible = Objects.requireNonNull(preemptible);
            return this;
        }
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public PipelineResourcesResponse build() {
            return new PipelineResourcesResponse(acceleratorCount, acceleratorType, bootDiskSizeGb, disks, minimumCpuCores, minimumRamGb, noAddress, preemptible, zones);
        }
    }
}
