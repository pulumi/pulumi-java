// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow_v1b3.inputs.BigQueryIODetailsResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.BigTableIODetailsResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.DatastoreIODetailsResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.FileIODetailsResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.PubSubIODetailsResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.SdkVersionResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.SpannerIODetailsResponse;
import java.util.List;
import java.util.Objects;


/**
 * Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
 * 
 */
public final class JobMetadataResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobMetadataResponse Empty = new JobMetadataResponse();

    /**
     * Identification of a Cloud Bigtable source used in the Dataflow job.
     * 
     */
    @Import(name="bigTableDetails", required=true)
      private final List<BigTableIODetailsResponse> bigTableDetails;

    public List<BigTableIODetailsResponse> bigTableDetails() {
        return this.bigTableDetails;
    }

    /**
     * Identification of a BigQuery source used in the Dataflow job.
     * 
     */
    @Import(name="bigqueryDetails", required=true)
      private final List<BigQueryIODetailsResponse> bigqueryDetails;

    public List<BigQueryIODetailsResponse> bigqueryDetails() {
        return this.bigqueryDetails;
    }

    /**
     * Identification of a Datastore source used in the Dataflow job.
     * 
     */
    @Import(name="datastoreDetails", required=true)
      private final List<DatastoreIODetailsResponse> datastoreDetails;

    public List<DatastoreIODetailsResponse> datastoreDetails() {
        return this.datastoreDetails;
    }

    /**
     * Identification of a File source used in the Dataflow job.
     * 
     */
    @Import(name="fileDetails", required=true)
      private final List<FileIODetailsResponse> fileDetails;

    public List<FileIODetailsResponse> fileDetails() {
        return this.fileDetails;
    }

    /**
     * Identification of a Pub/Sub source used in the Dataflow job.
     * 
     */
    @Import(name="pubsubDetails", required=true)
      private final List<PubSubIODetailsResponse> pubsubDetails;

    public List<PubSubIODetailsResponse> pubsubDetails() {
        return this.pubsubDetails;
    }

    /**
     * The SDK version used to run the job.
     * 
     */
    @Import(name="sdkVersion", required=true)
      private final SdkVersionResponse sdkVersion;

    public SdkVersionResponse sdkVersion() {
        return this.sdkVersion;
    }

    /**
     * Identification of a Spanner source used in the Dataflow job.
     * 
     */
    @Import(name="spannerDetails", required=true)
      private final List<SpannerIODetailsResponse> spannerDetails;

    public List<SpannerIODetailsResponse> spannerDetails() {
        return this.spannerDetails;
    }

    public JobMetadataResponse(
        List<BigTableIODetailsResponse> bigTableDetails,
        List<BigQueryIODetailsResponse> bigqueryDetails,
        List<DatastoreIODetailsResponse> datastoreDetails,
        List<FileIODetailsResponse> fileDetails,
        List<PubSubIODetailsResponse> pubsubDetails,
        SdkVersionResponse sdkVersion,
        List<SpannerIODetailsResponse> spannerDetails) {
        this.bigTableDetails = Objects.requireNonNull(bigTableDetails, "expected parameter 'bigTableDetails' to be non-null");
        this.bigqueryDetails = Objects.requireNonNull(bigqueryDetails, "expected parameter 'bigqueryDetails' to be non-null");
        this.datastoreDetails = Objects.requireNonNull(datastoreDetails, "expected parameter 'datastoreDetails' to be non-null");
        this.fileDetails = Objects.requireNonNull(fileDetails, "expected parameter 'fileDetails' to be non-null");
        this.pubsubDetails = Objects.requireNonNull(pubsubDetails, "expected parameter 'pubsubDetails' to be non-null");
        this.sdkVersion = Objects.requireNonNull(sdkVersion, "expected parameter 'sdkVersion' to be non-null");
        this.spannerDetails = Objects.requireNonNull(spannerDetails, "expected parameter 'spannerDetails' to be non-null");
    }

    private JobMetadataResponse() {
        this.bigTableDetails = List.of();
        this.bigqueryDetails = List.of();
        this.datastoreDetails = List.of();
        this.fileDetails = List.of();
        this.pubsubDetails = List.of();
        this.sdkVersion = null;
        this.spannerDetails = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobMetadataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<BigTableIODetailsResponse> bigTableDetails;
        private List<BigQueryIODetailsResponse> bigqueryDetails;
        private List<DatastoreIODetailsResponse> datastoreDetails;
        private List<FileIODetailsResponse> fileDetails;
        private List<PubSubIODetailsResponse> pubsubDetails;
        private SdkVersionResponse sdkVersion;
        private List<SpannerIODetailsResponse> spannerDetails;

        public Builder() {
    	      // Empty
        }

        public Builder(JobMetadataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigTableDetails = defaults.bigTableDetails;
    	      this.bigqueryDetails = defaults.bigqueryDetails;
    	      this.datastoreDetails = defaults.datastoreDetails;
    	      this.fileDetails = defaults.fileDetails;
    	      this.pubsubDetails = defaults.pubsubDetails;
    	      this.sdkVersion = defaults.sdkVersion;
    	      this.spannerDetails = defaults.spannerDetails;
        }

        public Builder bigTableDetails(List<BigTableIODetailsResponse> bigTableDetails) {
            this.bigTableDetails = Objects.requireNonNull(bigTableDetails);
            return this;
        }
        public Builder bigTableDetails(BigTableIODetailsResponse... bigTableDetails) {
            return bigTableDetails(List.of(bigTableDetails));
        }
        public Builder bigqueryDetails(List<BigQueryIODetailsResponse> bigqueryDetails) {
            this.bigqueryDetails = Objects.requireNonNull(bigqueryDetails);
            return this;
        }
        public Builder bigqueryDetails(BigQueryIODetailsResponse... bigqueryDetails) {
            return bigqueryDetails(List.of(bigqueryDetails));
        }
        public Builder datastoreDetails(List<DatastoreIODetailsResponse> datastoreDetails) {
            this.datastoreDetails = Objects.requireNonNull(datastoreDetails);
            return this;
        }
        public Builder datastoreDetails(DatastoreIODetailsResponse... datastoreDetails) {
            return datastoreDetails(List.of(datastoreDetails));
        }
        public Builder fileDetails(List<FileIODetailsResponse> fileDetails) {
            this.fileDetails = Objects.requireNonNull(fileDetails);
            return this;
        }
        public Builder fileDetails(FileIODetailsResponse... fileDetails) {
            return fileDetails(List.of(fileDetails));
        }
        public Builder pubsubDetails(List<PubSubIODetailsResponse> pubsubDetails) {
            this.pubsubDetails = Objects.requireNonNull(pubsubDetails);
            return this;
        }
        public Builder pubsubDetails(PubSubIODetailsResponse... pubsubDetails) {
            return pubsubDetails(List.of(pubsubDetails));
        }
        public Builder sdkVersion(SdkVersionResponse sdkVersion) {
            this.sdkVersion = Objects.requireNonNull(sdkVersion);
            return this;
        }
        public Builder spannerDetails(List<SpannerIODetailsResponse> spannerDetails) {
            this.spannerDetails = Objects.requireNonNull(spannerDetails);
            return this;
        }
        public Builder spannerDetails(SpannerIODetailsResponse... spannerDetails) {
            return spannerDetails(List.of(spannerDetails));
        }        public JobMetadataResponse build() {
            return new JobMetadataResponse(bigTableDetails, bigqueryDetails, datastoreDetails, fileDetails, pubsubDetails, sdkVersion, spannerDetails);
        }
    }
}
