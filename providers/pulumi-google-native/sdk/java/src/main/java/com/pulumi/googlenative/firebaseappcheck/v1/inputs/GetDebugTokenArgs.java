// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebaseappcheck.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDebugTokenArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDebugTokenArgs Empty = new GetDebugTokenArgs();

    @Import(name="appId", required=true)
    private Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }

    @Import(name="debugTokenId", required=true)
    private Output<String> debugTokenId;

    public Output<String> debugTokenId() {
        return this.debugTokenId;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetDebugTokenArgs() {}

    private GetDebugTokenArgs(GetDebugTokenArgs $) {
        this.appId = $.appId;
        this.debugTokenId = $.debugTokenId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDebugTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDebugTokenArgs $;

        public Builder() {
            $ = new GetDebugTokenArgs();
        }

        public Builder(GetDebugTokenArgs defaults) {
            $ = new GetDebugTokenArgs(Objects.requireNonNull(defaults));
        }

        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        public Builder debugTokenId(Output<String> debugTokenId) {
            $.debugTokenId = debugTokenId;
            return this;
        }

        public Builder debugTokenId(String debugTokenId) {
            return debugTokenId(Output.of(debugTokenId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetDebugTokenArgs build() {
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.debugTokenId = Objects.requireNonNull($.debugTokenId, "expected parameter 'debugTokenId' to be non-null");
            return $;
        }
    }

}
