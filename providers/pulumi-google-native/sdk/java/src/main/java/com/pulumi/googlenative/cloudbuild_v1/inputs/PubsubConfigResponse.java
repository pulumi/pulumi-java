// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
 * 
 */
public final class PubsubConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PubsubConfigResponse Empty = new PubsubConfigResponse();

    /**
     * Service account that will make the push request.
     * 
     */
    @Import(name="serviceAccountEmail", required=true)
    private String serviceAccountEmail;

    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    /**
     * Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
     * 
     */
    @Import(name="subscription", required=true)
    private String subscription;

    public String subscription() {
        return this.subscription;
    }

    /**
     * The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
     * 
     */
    @Import(name="topic", required=true)
    private String topic;

    public String topic() {
        return this.topic;
    }

    private PubsubConfigResponse() {}

    private PubsubConfigResponse(PubsubConfigResponse $) {
        this.serviceAccountEmail = $.serviceAccountEmail;
        this.state = $.state;
        this.subscription = $.subscription;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PubsubConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PubsubConfigResponse $;

        public Builder() {
            $ = new PubsubConfigResponse();
        }

        public Builder(PubsubConfigResponse defaults) {
            $ = new PubsubConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            $.serviceAccountEmail = serviceAccountEmail;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder subscription(String subscription) {
            $.subscription = subscription;
            return this;
        }

        public Builder topic(String topic) {
            $.topic = topic;
            return this;
        }

        public PubsubConfigResponse build() {
            $.serviceAccountEmail = Objects.requireNonNull($.serviceAccountEmail, "expected parameter 'serviceAccountEmail' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.subscription = Objects.requireNonNull($.subscription, "expected parameter 'subscription' to be non-null");
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
