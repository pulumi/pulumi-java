// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.v1.outputs.BackendResponse;
import com.pulumi.googlenative.compute.v1.outputs.BackendServiceCdnPolicyResponse;
import com.pulumi.googlenative.compute.v1.outputs.BackendServiceConnectionTrackingPolicyResponse;
import com.pulumi.googlenative.compute.v1.outputs.BackendServiceFailoverPolicyResponse;
import com.pulumi.googlenative.compute.v1.outputs.BackendServiceIAPResponse;
import com.pulumi.googlenative.compute.v1.outputs.BackendServiceLocalityLoadBalancingPolicyConfigResponse;
import com.pulumi.googlenative.compute.v1.outputs.BackendServiceLogConfigResponse;
import com.pulumi.googlenative.compute.v1.outputs.CircuitBreakersResponse;
import com.pulumi.googlenative.compute.v1.outputs.ConnectionDrainingResponse;
import com.pulumi.googlenative.compute.v1.outputs.ConsistentHashLoadBalancerSettingsResponse;
import com.pulumi.googlenative.compute.v1.outputs.DurationResponse;
import com.pulumi.googlenative.compute.v1.outputs.OutlierDetectionResponse;
import com.pulumi.googlenative.compute.v1.outputs.SecuritySettingsResponse;
import com.pulumi.googlenative.compute.v1.outputs.SubsettingResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegionBackendServiceResult {
    /**
     * @return Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    private final Integer affinityCookieTtlSec;
    /**
     * @return The list of backends that serve this BackendService.
     * 
     */
    private final List<BackendResponse> backends;
    /**
     * @return Cloud CDN configuration for this BackendService. Only available for specified load balancer types.
     * 
     */
    private final BackendServiceCdnPolicyResponse cdnPolicy;
    private final CircuitBreakersResponse circuitBreakers;
    private final ConnectionDrainingResponse connectionDraining;
    /**
     * @return Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP/UDP Load Balancing.
     * 
     */
    private final BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy;
    /**
     * @return Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    private final ConsistentHashLoadBalancerSettingsResponse consistentHash;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private final String creationTimestamp;
    /**
     * @return Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    private final List<String> customRequestHeaders;
    /**
     * @return Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    private final List<String> customResponseHeaders;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private final String description;
    /**
     * @return The resource URL for the edge security policy associated with this backend service.
     * 
     */
    private final String edgeSecurityPolicy;
    /**
     * @return If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer.
     * 
     */
    private final Boolean enableCDN;
    /**
     * @return Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
     * 
     */
    private final BackendServiceFailoverPolicyResponse failoverPolicy;
    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.
     * 
     */
    private final String fingerprint;
    /**
     * @return The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
     * 
     */
    private final List<String> healthChecks;
    /**
     * @return The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing.
     * 
     */
    private final BackendServiceIAPResponse iap;
    /**
     * @return Type of resource. Always compute#backendService for backend services.
     * 
     */
    private final String kind;
    /**
     * @return Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
     * 
     */
    private final String loadBalancingScheme;
    /**
     * @return A list of locality load balancing policies to be used in order of preference. Either the policy or the customPolicy field should be set. Overrides any value set in the localityLbPolicy field. localityLbPolicies is only supported when the BackendService is referenced by a URL Map that is referenced by a target gRPC proxy that has the validateForProxyless field set to true.
     * 
     */
    private final List<BackendServiceLocalityLoadBalancingPolicyConfigResponse> localityLbPolicies;
    /**
     * @return The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    private final String localityLbPolicy;
    /**
     * @return This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
     * 
     */
    private final BackendServiceLogConfigResponse logConfig;
    /**
     * @return Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
     * 
     */
    private final DurationResponse maxStreamDuration;
    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private final String name;
    /**
     * @return The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    private final String network;
    /**
     * @return Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    private final OutlierDetectionResponse outlierDetection;
    /**
     * @return Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port.
     * 
     * @deprecated
     * Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port.
     * 
     */
    @Deprecated /* Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port. */
    private final Integer port;
    /**
     * @return A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port_name.
     * 
     */
    private final String portName;
    /**
     * @return The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
     * 
     */
    private final String protocol;
    /**
     * @return URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    private final String region;
    /**
     * @return The resource URL for the security policy associated with this backend service.
     * 
     */
    private final String securityPolicy;
    /**
     * @return This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    private final SecuritySettingsResponse securitySettings;
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    private final String selfLink;
    /**
     * @return URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL_SELF_MANAGED. If set, lists of backends and health checks must be both empty.
     * 
     */
    private final List<String> serviceBindings;
    /**
     * @return Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
     * 
     */
    private final String sessionAffinity;
    private final SubsettingResponse subsetting;
    /**
     * @return The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
     * 
     */
    private final Integer timeoutSec;

    @CustomType.Constructor
    private GetRegionBackendServiceResult(
        @CustomType.Parameter("affinityCookieTtlSec") Integer affinityCookieTtlSec,
        @CustomType.Parameter("backends") List<BackendResponse> backends,
        @CustomType.Parameter("cdnPolicy") BackendServiceCdnPolicyResponse cdnPolicy,
        @CustomType.Parameter("circuitBreakers") CircuitBreakersResponse circuitBreakers,
        @CustomType.Parameter("connectionDraining") ConnectionDrainingResponse connectionDraining,
        @CustomType.Parameter("connectionTrackingPolicy") BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy,
        @CustomType.Parameter("consistentHash") ConsistentHashLoadBalancerSettingsResponse consistentHash,
        @CustomType.Parameter("creationTimestamp") String creationTimestamp,
        @CustomType.Parameter("customRequestHeaders") List<String> customRequestHeaders,
        @CustomType.Parameter("customResponseHeaders") List<String> customResponseHeaders,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("edgeSecurityPolicy") String edgeSecurityPolicy,
        @CustomType.Parameter("enableCDN") Boolean enableCDN,
        @CustomType.Parameter("failoverPolicy") BackendServiceFailoverPolicyResponse failoverPolicy,
        @CustomType.Parameter("fingerprint") String fingerprint,
        @CustomType.Parameter("healthChecks") List<String> healthChecks,
        @CustomType.Parameter("iap") BackendServiceIAPResponse iap,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("loadBalancingScheme") String loadBalancingScheme,
        @CustomType.Parameter("localityLbPolicies") List<BackendServiceLocalityLoadBalancingPolicyConfigResponse> localityLbPolicies,
        @CustomType.Parameter("localityLbPolicy") String localityLbPolicy,
        @CustomType.Parameter("logConfig") BackendServiceLogConfigResponse logConfig,
        @CustomType.Parameter("maxStreamDuration") DurationResponse maxStreamDuration,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("network") String network,
        @CustomType.Parameter("outlierDetection") OutlierDetectionResponse outlierDetection,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("portName") String portName,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("securityPolicy") String securityPolicy,
        @CustomType.Parameter("securitySettings") SecuritySettingsResponse securitySettings,
        @CustomType.Parameter("selfLink") String selfLink,
        @CustomType.Parameter("serviceBindings") List<String> serviceBindings,
        @CustomType.Parameter("sessionAffinity") String sessionAffinity,
        @CustomType.Parameter("subsetting") SubsettingResponse subsetting,
        @CustomType.Parameter("timeoutSec") Integer timeoutSec) {
        this.affinityCookieTtlSec = affinityCookieTtlSec;
        this.backends = backends;
        this.cdnPolicy = cdnPolicy;
        this.circuitBreakers = circuitBreakers;
        this.connectionDraining = connectionDraining;
        this.connectionTrackingPolicy = connectionTrackingPolicy;
        this.consistentHash = consistentHash;
        this.creationTimestamp = creationTimestamp;
        this.customRequestHeaders = customRequestHeaders;
        this.customResponseHeaders = customResponseHeaders;
        this.description = description;
        this.edgeSecurityPolicy = edgeSecurityPolicy;
        this.enableCDN = enableCDN;
        this.failoverPolicy = failoverPolicy;
        this.fingerprint = fingerprint;
        this.healthChecks = healthChecks;
        this.iap = iap;
        this.kind = kind;
        this.loadBalancingScheme = loadBalancingScheme;
        this.localityLbPolicies = localityLbPolicies;
        this.localityLbPolicy = localityLbPolicy;
        this.logConfig = logConfig;
        this.maxStreamDuration = maxStreamDuration;
        this.name = name;
        this.network = network;
        this.outlierDetection = outlierDetection;
        this.port = port;
        this.portName = portName;
        this.protocol = protocol;
        this.region = region;
        this.securityPolicy = securityPolicy;
        this.securitySettings = securitySettings;
        this.selfLink = selfLink;
        this.serviceBindings = serviceBindings;
        this.sessionAffinity = sessionAffinity;
        this.subsetting = subsetting;
        this.timeoutSec = timeoutSec;
    }

    /**
     * @return Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Integer affinityCookieTtlSec() {
        return this.affinityCookieTtlSec;
    }
    /**
     * @return The list of backends that serve this BackendService.
     * 
     */
    public List<BackendResponse> backends() {
        return this.backends;
    }
    /**
     * @return Cloud CDN configuration for this BackendService. Only available for specified load balancer types.
     * 
     */
    public BackendServiceCdnPolicyResponse cdnPolicy() {
        return this.cdnPolicy;
    }
    public CircuitBreakersResponse circuitBreakers() {
        return this.circuitBreakers;
    }
    public ConnectionDrainingResponse connectionDraining() {
        return this.connectionDraining;
    }
    /**
     * @return Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP/UDP Load Balancing.
     * 
     */
    public BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy() {
        return this.connectionTrackingPolicy;
    }
    /**
     * @return Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    public ConsistentHashLoadBalancerSettingsResponse consistentHash() {
        return this.consistentHash;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    public List<String> customRequestHeaders() {
        return this.customRequestHeaders;
    }
    /**
     * @return Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
     * 
     */
    public List<String> customResponseHeaders() {
        return this.customResponseHeaders;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The resource URL for the edge security policy associated with this backend service.
     * 
     */
    public String edgeSecurityPolicy() {
        return this.edgeSecurityPolicy;
    }
    /**
     * @return If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer.
     * 
     */
    public Boolean enableCDN() {
        return this.enableCDN;
    }
    /**
     * @return Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
     * 
     */
    public BackendServiceFailoverPolicyResponse failoverPolicy() {
        return this.failoverPolicy;
    }
    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
     * 
     */
    public List<String> healthChecks() {
        return this.healthChecks;
    }
    /**
     * @return The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing.
     * 
     */
    public BackendServiceIAPResponse iap() {
        return this.iap;
    }
    /**
     * @return Type of resource. Always compute#backendService for backend services.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
     * 
     */
    public String loadBalancingScheme() {
        return this.loadBalancingScheme;
    }
    /**
     * @return A list of locality load balancing policies to be used in order of preference. Either the policy or the customPolicy field should be set. Overrides any value set in the localityLbPolicy field. localityLbPolicies is only supported when the BackendService is referenced by a URL Map that is referenced by a target gRPC proxy that has the validateForProxyless field set to true.
     * 
     */
    public List<BackendServiceLocalityLoadBalancingPolicyConfigResponse> localityLbPolicies() {
        return this.localityLbPolicies;
    }
    /**
     * @return The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public String localityLbPolicy() {
        return this.localityLbPolicy;
    }
    /**
     * @return This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
     * 
     */
    public BackendServiceLogConfigResponse logConfig() {
        return this.logConfig;
    }
    /**
     * @return Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
     * 
     */
    public DurationResponse maxStreamDuration() {
        return this.maxStreamDuration;
    }
    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public OutlierDetectionResponse outlierDetection() {
        return this.outlierDetection;
    }
    /**
     * @return Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port.
     * 
     * @deprecated
     * Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port.
     * 
     */
    @Deprecated /* Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port. */
    public Integer port() {
        return this.port;
    }
    /**
     * @return A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port_name.
     * 
     */
    public String portName() {
        return this.portName;
    }
    /**
     * @return The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The resource URL for the security policy associated with this backend service.
     * 
     */
    public String securityPolicy() {
        return this.securityPolicy;
    }
    /**
     * @return This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    public SecuritySettingsResponse securitySettings() {
        return this.securitySettings;
    }
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL_SELF_MANAGED. If set, lists of backends and health checks must be both empty.
     * 
     */
    public List<String> serviceBindings() {
        return this.serviceBindings;
    }
    /**
     * @return Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
     * 
     */
    public String sessionAffinity() {
        return this.sessionAffinity;
    }
    public SubsettingResponse subsetting() {
        return this.subsetting;
    }
    /**
     * @return The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
     * 
     */
    public Integer timeoutSec() {
        return this.timeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionBackendServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer affinityCookieTtlSec;
        private List<BackendResponse> backends;
        private BackendServiceCdnPolicyResponse cdnPolicy;
        private CircuitBreakersResponse circuitBreakers;
        private ConnectionDrainingResponse connectionDraining;
        private BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy;
        private ConsistentHashLoadBalancerSettingsResponse consistentHash;
        private String creationTimestamp;
        private List<String> customRequestHeaders;
        private List<String> customResponseHeaders;
        private String description;
        private String edgeSecurityPolicy;
        private Boolean enableCDN;
        private BackendServiceFailoverPolicyResponse failoverPolicy;
        private String fingerprint;
        private List<String> healthChecks;
        private BackendServiceIAPResponse iap;
        private String kind;
        private String loadBalancingScheme;
        private List<BackendServiceLocalityLoadBalancingPolicyConfigResponse> localityLbPolicies;
        private String localityLbPolicy;
        private BackendServiceLogConfigResponse logConfig;
        private DurationResponse maxStreamDuration;
        private String name;
        private String network;
        private OutlierDetectionResponse outlierDetection;
        private Integer port;
        private String portName;
        private String protocol;
        private String region;
        private String securityPolicy;
        private SecuritySettingsResponse securitySettings;
        private String selfLink;
        private List<String> serviceBindings;
        private String sessionAffinity;
        private SubsettingResponse subsetting;
        private Integer timeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegionBackendServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieTtlSec = defaults.affinityCookieTtlSec;
    	      this.backends = defaults.backends;
    	      this.cdnPolicy = defaults.cdnPolicy;
    	      this.circuitBreakers = defaults.circuitBreakers;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.connectionTrackingPolicy = defaults.connectionTrackingPolicy;
    	      this.consistentHash = defaults.consistentHash;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.customRequestHeaders = defaults.customRequestHeaders;
    	      this.customResponseHeaders = defaults.customResponseHeaders;
    	      this.description = defaults.description;
    	      this.edgeSecurityPolicy = defaults.edgeSecurityPolicy;
    	      this.enableCDN = defaults.enableCDN;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.fingerprint = defaults.fingerprint;
    	      this.healthChecks = defaults.healthChecks;
    	      this.iap = defaults.iap;
    	      this.kind = defaults.kind;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.localityLbPolicies = defaults.localityLbPolicies;
    	      this.localityLbPolicy = defaults.localityLbPolicy;
    	      this.logConfig = defaults.logConfig;
    	      this.maxStreamDuration = defaults.maxStreamDuration;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.port = defaults.port;
    	      this.portName = defaults.portName;
    	      this.protocol = defaults.protocol;
    	      this.region = defaults.region;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.securitySettings = defaults.securitySettings;
    	      this.selfLink = defaults.selfLink;
    	      this.serviceBindings = defaults.serviceBindings;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.subsetting = defaults.subsetting;
    	      this.timeoutSec = defaults.timeoutSec;
        }

        public Builder affinityCookieTtlSec(Integer affinityCookieTtlSec) {
            this.affinityCookieTtlSec = Objects.requireNonNull(affinityCookieTtlSec);
            return this;
        }
        public Builder backends(List<BackendResponse> backends) {
            this.backends = Objects.requireNonNull(backends);
            return this;
        }
        public Builder backends(BackendResponse... backends) {
            return backends(List.of(backends));
        }
        public Builder cdnPolicy(BackendServiceCdnPolicyResponse cdnPolicy) {
            this.cdnPolicy = Objects.requireNonNull(cdnPolicy);
            return this;
        }
        public Builder circuitBreakers(CircuitBreakersResponse circuitBreakers) {
            this.circuitBreakers = Objects.requireNonNull(circuitBreakers);
            return this;
        }
        public Builder connectionDraining(ConnectionDrainingResponse connectionDraining) {
            this.connectionDraining = Objects.requireNonNull(connectionDraining);
            return this;
        }
        public Builder connectionTrackingPolicy(BackendServiceConnectionTrackingPolicyResponse connectionTrackingPolicy) {
            this.connectionTrackingPolicy = Objects.requireNonNull(connectionTrackingPolicy);
            return this;
        }
        public Builder consistentHash(ConsistentHashLoadBalancerSettingsResponse consistentHash) {
            this.consistentHash = Objects.requireNonNull(consistentHash);
            return this;
        }
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        public Builder customRequestHeaders(List<String> customRequestHeaders) {
            this.customRequestHeaders = Objects.requireNonNull(customRequestHeaders);
            return this;
        }
        public Builder customRequestHeaders(String... customRequestHeaders) {
            return customRequestHeaders(List.of(customRequestHeaders));
        }
        public Builder customResponseHeaders(List<String> customResponseHeaders) {
            this.customResponseHeaders = Objects.requireNonNull(customResponseHeaders);
            return this;
        }
        public Builder customResponseHeaders(String... customResponseHeaders) {
            return customResponseHeaders(List.of(customResponseHeaders));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder edgeSecurityPolicy(String edgeSecurityPolicy) {
            this.edgeSecurityPolicy = Objects.requireNonNull(edgeSecurityPolicy);
            return this;
        }
        public Builder enableCDN(Boolean enableCDN) {
            this.enableCDN = Objects.requireNonNull(enableCDN);
            return this;
        }
        public Builder failoverPolicy(BackendServiceFailoverPolicyResponse failoverPolicy) {
            this.failoverPolicy = Objects.requireNonNull(failoverPolicy);
            return this;
        }
        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }
        public Builder healthChecks(List<String> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }
        public Builder healthChecks(String... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        public Builder iap(BackendServiceIAPResponse iap) {
            this.iap = Objects.requireNonNull(iap);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            this.loadBalancingScheme = Objects.requireNonNull(loadBalancingScheme);
            return this;
        }
        public Builder localityLbPolicies(List<BackendServiceLocalityLoadBalancingPolicyConfigResponse> localityLbPolicies) {
            this.localityLbPolicies = Objects.requireNonNull(localityLbPolicies);
            return this;
        }
        public Builder localityLbPolicies(BackendServiceLocalityLoadBalancingPolicyConfigResponse... localityLbPolicies) {
            return localityLbPolicies(List.of(localityLbPolicies));
        }
        public Builder localityLbPolicy(String localityLbPolicy) {
            this.localityLbPolicy = Objects.requireNonNull(localityLbPolicy);
            return this;
        }
        public Builder logConfig(BackendServiceLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }
        public Builder maxStreamDuration(DurationResponse maxStreamDuration) {
            this.maxStreamDuration = Objects.requireNonNull(maxStreamDuration);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder outlierDetection(OutlierDetectionResponse outlierDetection) {
            this.outlierDetection = Objects.requireNonNull(outlierDetection);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder portName(String portName) {
            this.portName = Objects.requireNonNull(portName);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder securityPolicy(String securityPolicy) {
            this.securityPolicy = Objects.requireNonNull(securityPolicy);
            return this;
        }
        public Builder securitySettings(SecuritySettingsResponse securitySettings) {
            this.securitySettings = Objects.requireNonNull(securitySettings);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder serviceBindings(List<String> serviceBindings) {
            this.serviceBindings = Objects.requireNonNull(serviceBindings);
            return this;
        }
        public Builder serviceBindings(String... serviceBindings) {
            return serviceBindings(List.of(serviceBindings));
        }
        public Builder sessionAffinity(String sessionAffinity) {
            this.sessionAffinity = Objects.requireNonNull(sessionAffinity);
            return this;
        }
        public Builder subsetting(SubsettingResponse subsetting) {
            this.subsetting = Objects.requireNonNull(subsetting);
            return this;
        }
        public Builder timeoutSec(Integer timeoutSec) {
            this.timeoutSec = Objects.requireNonNull(timeoutSec);
            return this;
        }        public GetRegionBackendServiceResult build() {
            return new GetRegionBackendServiceResult(affinityCookieTtlSec, backends, cdnPolicy, circuitBreakers, connectionDraining, connectionTrackingPolicy, consistentHash, creationTimestamp, customRequestHeaders, customResponseHeaders, description, edgeSecurityPolicy, enableCDN, failoverPolicy, fingerprint, healthChecks, iap, kind, loadBalancingScheme, localityLbPolicies, localityLbPolicy, logConfig, maxStreamDuration, name, network, outlierDetection, port, portName, protocol, region, securityPolicy, securitySettings, selfLink, serviceBindings, sessionAffinity, subsetting, timeoutSec);
        }
    }
}
