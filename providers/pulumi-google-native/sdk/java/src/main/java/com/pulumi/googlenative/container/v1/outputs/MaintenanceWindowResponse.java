// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.container.v1.outputs.DailyMaintenanceWindowResponse;
import com.pulumi.googlenative.container.v1.outputs.RecurringTimeWindowResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class MaintenanceWindowResponse {
    /**
     * @return DailyMaintenanceWindow specifies a daily maintenance operation window.
     * 
     */
    private final DailyMaintenanceWindowResponse dailyMaintenanceWindow;
    /**
     * @return Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
     * 
     */
    private final Map<String,String> maintenanceExclusions;
    /**
     * @return RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
     * 
     */
    private final RecurringTimeWindowResponse recurringWindow;

    @CustomType.Constructor
    private MaintenanceWindowResponse(
        @CustomType.Parameter("dailyMaintenanceWindow") DailyMaintenanceWindowResponse dailyMaintenanceWindow,
        @CustomType.Parameter("maintenanceExclusions") Map<String,String> maintenanceExclusions,
        @CustomType.Parameter("recurringWindow") RecurringTimeWindowResponse recurringWindow) {
        this.dailyMaintenanceWindow = dailyMaintenanceWindow;
        this.maintenanceExclusions = maintenanceExclusions;
        this.recurringWindow = recurringWindow;
    }

    /**
     * @return DailyMaintenanceWindow specifies a daily maintenance operation window.
     * 
     */
    public DailyMaintenanceWindowResponse dailyMaintenanceWindow() {
        return this.dailyMaintenanceWindow;
    }
    /**
     * @return Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
     * 
     */
    public Map<String,String> maintenanceExclusions() {
        return this.maintenanceExclusions;
    }
    /**
     * @return RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
     * 
     */
    public RecurringTimeWindowResponse recurringWindow() {
        return this.recurringWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DailyMaintenanceWindowResponse dailyMaintenanceWindow;
        private Map<String,String> maintenanceExclusions;
        private RecurringTimeWindowResponse recurringWindow;

        public Builder() {
    	      // Empty
        }

        public Builder(MaintenanceWindowResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dailyMaintenanceWindow = defaults.dailyMaintenanceWindow;
    	      this.maintenanceExclusions = defaults.maintenanceExclusions;
    	      this.recurringWindow = defaults.recurringWindow;
        }

        public Builder dailyMaintenanceWindow(DailyMaintenanceWindowResponse dailyMaintenanceWindow) {
            this.dailyMaintenanceWindow = Objects.requireNonNull(dailyMaintenanceWindow);
            return this;
        }
        public Builder maintenanceExclusions(Map<String,String> maintenanceExclusions) {
            this.maintenanceExclusions = Objects.requireNonNull(maintenanceExclusions);
            return this;
        }
        public Builder recurringWindow(RecurringTimeWindowResponse recurringWindow) {
            this.recurringWindow = Objects.requireNonNull(recurringWindow);
            return this;
        }        public MaintenanceWindowResponse build() {
            return new MaintenanceWindowResponse(dailyMaintenanceWindow, maintenanceExclusions, recurringWindow);
        }
    }
}
