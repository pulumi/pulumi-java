// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.VersionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
 * 
 */
public final class PackageIssueArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageIssueArgs Empty = new PackageIssueArgs();

    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
     * 
     */
    @Import(name="affectedCpeUri", required=true)
    private Output<String> affectedCpeUri;

    public Output<String> affectedCpeUri() {
        return this.affectedCpeUri;
    }

    /**
     * The package this vulnerability was found in.
     * 
     */
    @Import(name="affectedPackage", required=true)
    private Output<String> affectedPackage;

    public Output<String> affectedPackage() {
        return this.affectedPackage;
    }

    /**
     * The version of the package that is installed on the resource affected by this vulnerability.
     * 
     */
    @Import(name="affectedVersion", required=true)
    private Output<VersionArgs> affectedVersion;

    public Output<VersionArgs> affectedVersion() {
        return this.affectedVersion;
    }

    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
     * 
     */
    @Import(name="fixedCpeUri")
    private @Nullable Output<String> fixedCpeUri;

    public Optional<Output<String>> fixedCpeUri() {
        return Optional.ofNullable(this.fixedCpeUri);
    }

    /**
     * The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
     * 
     */
    @Import(name="fixedPackage")
    private @Nullable Output<String> fixedPackage;

    public Optional<Output<String>> fixedPackage() {
        return Optional.ofNullable(this.fixedPackage);
    }

    /**
     * The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
     * 
     */
    @Import(name="fixedVersion", required=true)
    private Output<VersionArgs> fixedVersion;

    public Output<VersionArgs> fixedVersion() {
        return this.fixedVersion;
    }

    /**
     * The type of package (e.g. OS, MAVEN, GO).
     * 
     */
    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    private PackageIssueArgs() {}

    private PackageIssueArgs(PackageIssueArgs $) {
        this.affectedCpeUri = $.affectedCpeUri;
        this.affectedPackage = $.affectedPackage;
        this.affectedVersion = $.affectedVersion;
        this.fixedCpeUri = $.fixedCpeUri;
        this.fixedPackage = $.fixedPackage;
        this.fixedVersion = $.fixedVersion;
        this.packageType = $.packageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageIssueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageIssueArgs $;

        public Builder() {
            $ = new PackageIssueArgs();
        }

        public Builder(PackageIssueArgs defaults) {
            $ = new PackageIssueArgs(Objects.requireNonNull(defaults));
        }

        public Builder affectedCpeUri(Output<String> affectedCpeUri) {
            $.affectedCpeUri = affectedCpeUri;
            return this;
        }

        public Builder affectedCpeUri(String affectedCpeUri) {
            return affectedCpeUri(Output.of(affectedCpeUri));
        }

        public Builder affectedPackage(Output<String> affectedPackage) {
            $.affectedPackage = affectedPackage;
            return this;
        }

        public Builder affectedPackage(String affectedPackage) {
            return affectedPackage(Output.of(affectedPackage));
        }

        public Builder affectedVersion(Output<VersionArgs> affectedVersion) {
            $.affectedVersion = affectedVersion;
            return this;
        }

        public Builder affectedVersion(VersionArgs affectedVersion) {
            return affectedVersion(Output.of(affectedVersion));
        }

        public Builder fixedCpeUri(@Nullable Output<String> fixedCpeUri) {
            $.fixedCpeUri = fixedCpeUri;
            return this;
        }

        public Builder fixedCpeUri(String fixedCpeUri) {
            return fixedCpeUri(Output.of(fixedCpeUri));
        }

        public Builder fixedPackage(@Nullable Output<String> fixedPackage) {
            $.fixedPackage = fixedPackage;
            return this;
        }

        public Builder fixedPackage(String fixedPackage) {
            return fixedPackage(Output.of(fixedPackage));
        }

        public Builder fixedVersion(Output<VersionArgs> fixedVersion) {
            $.fixedVersion = fixedVersion;
            return this;
        }

        public Builder fixedVersion(VersionArgs fixedVersion) {
            return fixedVersion(Output.of(fixedVersion));
        }

        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        public PackageIssueArgs build() {
            $.affectedCpeUri = Objects.requireNonNull($.affectedCpeUri, "expected parameter 'affectedCpeUri' to be non-null");
            $.affectedPackage = Objects.requireNonNull($.affectedPackage, "expected parameter 'affectedPackage' to be non-null");
            $.affectedVersion = Objects.requireNonNull($.affectedVersion, "expected parameter 'affectedVersion' to be non-null");
            $.fixedVersion = Objects.requireNonNull($.fixedVersion, "expected parameter 'fixedVersion' to be non-null");
            return $;
        }
    }

}
