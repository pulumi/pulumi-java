// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.appengine_v1.inputs.VolumeResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Machine resources for a version.
 * 
 */
public final class ResourcesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResourcesResponse Empty = new ResourcesResponse();

    /**
     * Number of CPU cores needed.
     * 
     */
    @Import(name="cpu", required=true)
    private Double cpu;

    /**
     * @return Number of CPU cores needed.
     * 
     */
    public Double cpu() {
        return this.cpu;
    }

    /**
     * Disk size (GB) needed.
     * 
     */
    @Import(name="diskGb", required=true)
    private Double diskGb;

    /**
     * @return Disk size (GB) needed.
     * 
     */
    public Double diskGb() {
        return this.diskGb;
    }

    /**
     * The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
     * 
     */
    @Import(name="kmsKeyReference", required=true)
    private String kmsKeyReference;

    /**
     * @return The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
     * 
     */
    public String kmsKeyReference() {
        return this.kmsKeyReference;
    }

    /**
     * Memory (GB) needed.
     * 
     */
    @Import(name="memoryGb", required=true)
    private Double memoryGb;

    /**
     * @return Memory (GB) needed.
     * 
     */
    public Double memoryGb() {
        return this.memoryGb;
    }

    /**
     * User specified volumes.
     * 
     */
    @Import(name="volumes", required=true)
    private List<VolumeResponse> volumes;

    /**
     * @return User specified volumes.
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    private ResourcesResponse() {}

    private ResourcesResponse(ResourcesResponse $) {
        this.cpu = $.cpu;
        this.diskGb = $.diskGb;
        this.kmsKeyReference = $.kmsKeyReference;
        this.memoryGb = $.memoryGb;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcesResponse $;

        public Builder() {
            $ = new ResourcesResponse();
        }

        public Builder(ResourcesResponse defaults) {
            $ = new ResourcesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpu Number of CPU cores needed.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param diskGb Disk size (GB) needed.
         * 
         * @return builder
         * 
         */
        public Builder diskGb(Double diskGb) {
            $.diskGb = diskGb;
            return this;
        }

        /**
         * @param kmsKeyReference The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyReference(String kmsKeyReference) {
            $.kmsKeyReference = kmsKeyReference;
            return this;
        }

        /**
         * @param memoryGb Memory (GB) needed.
         * 
         * @return builder
         * 
         */
        public Builder memoryGb(Double memoryGb) {
            $.memoryGb = memoryGb;
            return this;
        }

        /**
         * @param volumes User specified volumes.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<VolumeResponse> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes User specified volumes.
         * 
         * @return builder
         * 
         */
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }

        public ResourcesResponse build() {
            $.cpu = Objects.requireNonNull($.cpu, "expected parameter 'cpu' to be non-null");
            $.diskGb = Objects.requireNonNull($.diskGb, "expected parameter 'diskGb' to be non-null");
            $.kmsKeyReference = Objects.requireNonNull($.kmsKeyReference, "expected parameter 'kmsKeyReference' to be non-null");
            $.memoryGb = Objects.requireNonNull($.memoryGb, "expected parameter 'memoryGb' to be non-null");
            $.volumes = Objects.requireNonNull($.volumes, "expected parameter 'volumes' to be non-null");
            return $;
        }
    }

}
