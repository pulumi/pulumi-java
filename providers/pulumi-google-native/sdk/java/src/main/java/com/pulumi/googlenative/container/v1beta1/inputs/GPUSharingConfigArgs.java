// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container.v1beta1.enums.GPUSharingConfigGpuSharingStrategy;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
 * 
 */
public final class GPUSharingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GPUSharingConfigArgs Empty = new GPUSharingConfigArgs();

    /**
     * The type of GPU sharing strategy to enable on the GPU node.
     * 
     */
    @Import(name="gpuSharingStrategy")
    private @Nullable Output<GPUSharingConfigGpuSharingStrategy> gpuSharingStrategy;

    /**
     * @return The type of GPU sharing strategy to enable on the GPU node.
     * 
     */
    public Optional<Output<GPUSharingConfigGpuSharingStrategy>> gpuSharingStrategy() {
        return Optional.ofNullable(this.gpuSharingStrategy);
    }

    /**
     * The max number of containers that can share a physical GPU.
     * 
     */
    @Import(name="maxSharedClientsPerGpu")
    private @Nullable Output<String> maxSharedClientsPerGpu;

    /**
     * @return The max number of containers that can share a physical GPU.
     * 
     */
    public Optional<Output<String>> maxSharedClientsPerGpu() {
        return Optional.ofNullable(this.maxSharedClientsPerGpu);
    }

    private GPUSharingConfigArgs() {}

    private GPUSharingConfigArgs(GPUSharingConfigArgs $) {
        this.gpuSharingStrategy = $.gpuSharingStrategy;
        this.maxSharedClientsPerGpu = $.maxSharedClientsPerGpu;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GPUSharingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GPUSharingConfigArgs $;

        public Builder() {
            $ = new GPUSharingConfigArgs();
        }

        public Builder(GPUSharingConfigArgs defaults) {
            $ = new GPUSharingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gpuSharingStrategy The type of GPU sharing strategy to enable on the GPU node.
         * 
         * @return builder
         * 
         */
        public Builder gpuSharingStrategy(@Nullable Output<GPUSharingConfigGpuSharingStrategy> gpuSharingStrategy) {
            $.gpuSharingStrategy = gpuSharingStrategy;
            return this;
        }

        /**
         * @param gpuSharingStrategy The type of GPU sharing strategy to enable on the GPU node.
         * 
         * @return builder
         * 
         */
        public Builder gpuSharingStrategy(GPUSharingConfigGpuSharingStrategy gpuSharingStrategy) {
            return gpuSharingStrategy(Output.of(gpuSharingStrategy));
        }

        /**
         * @param maxSharedClientsPerGpu The max number of containers that can share a physical GPU.
         * 
         * @return builder
         * 
         */
        public Builder maxSharedClientsPerGpu(@Nullable Output<String> maxSharedClientsPerGpu) {
            $.maxSharedClientsPerGpu = maxSharedClientsPerGpu;
            return this;
        }

        /**
         * @param maxSharedClientsPerGpu The max number of containers that can share a physical GPU.
         * 
         * @return builder
         * 
         */
        public Builder maxSharedClientsPerGpu(String maxSharedClientsPerGpu) {
            return maxSharedClientsPerGpu(Output.of(maxSharedClientsPerGpu));
        }

        public GPUSharingConfigArgs build() {
            return $;
        }
    }

}
