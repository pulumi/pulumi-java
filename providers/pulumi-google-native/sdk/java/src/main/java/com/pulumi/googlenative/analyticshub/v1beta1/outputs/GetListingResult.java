// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.analyticshub.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.analyticshub.v1beta1.outputs.BigQueryDatasetSourceResponse;
import com.pulumi.googlenative.analyticshub.v1beta1.outputs.DataProviderResponse;
import com.pulumi.googlenative.analyticshub.v1beta1.outputs.PublisherResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListingResult {
    /**
     * @return Shared dataset i.e. BigQuery dataset source.
     * 
     */
    private final BigQueryDatasetSourceResponse bigqueryDataset;
    /**
     * @return Optional. Categories of the listing. Up to two categories are allowed.
     * 
     */
    private final List<String> categories;
    /**
     * @return Optional. Details of the data provider who owns the source data.
     * 
     */
    private final DataProviderResponse dataProvider;
    /**
     * @return Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
     * 
     */
    private final String description;
    /**
     * @return Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can&#39;t start or end with spaces. Default value is an empty string. Max length: 63 bytes.
     * 
     */
    private final String displayName;
    /**
     * @return Optional. Documentation describing the listing.
     * 
     */
    private final String documentation;
    /**
     * @return Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
     * 
     */
    private final String icon;
    /**
     * @return The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`
     * 
     */
    private final String name;
    /**
     * @return Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.
     * 
     */
    private final String primaryContact;
    /**
     * @return Optional. Details of the publisher who owns the listing and who can share the source data.
     * 
     */
    private final PublisherResponse publisher;
    /**
     * @return Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.
     * 
     */
    private final String requestAccess;
    /**
     * @return Current state of the listing.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private GetListingResult(
        @CustomType.Parameter("bigqueryDataset") BigQueryDatasetSourceResponse bigqueryDataset,
        @CustomType.Parameter("categories") List<String> categories,
        @CustomType.Parameter("dataProvider") DataProviderResponse dataProvider,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("documentation") String documentation,
        @CustomType.Parameter("icon") String icon,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("primaryContact") String primaryContact,
        @CustomType.Parameter("publisher") PublisherResponse publisher,
        @CustomType.Parameter("requestAccess") String requestAccess,
        @CustomType.Parameter("state") String state) {
        this.bigqueryDataset = bigqueryDataset;
        this.categories = categories;
        this.dataProvider = dataProvider;
        this.description = description;
        this.displayName = displayName;
        this.documentation = documentation;
        this.icon = icon;
        this.name = name;
        this.primaryContact = primaryContact;
        this.publisher = publisher;
        this.requestAccess = requestAccess;
        this.state = state;
    }

    /**
     * @return Shared dataset i.e. BigQuery dataset source.
     * 
     */
    public BigQueryDatasetSourceResponse bigqueryDataset() {
        return this.bigqueryDataset;
    }
    /**
     * @return Optional. Categories of the listing. Up to two categories are allowed.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    /**
     * @return Optional. Details of the data provider who owns the source data.
     * 
     */
    public DataProviderResponse dataProvider() {
        return this.dataProvider;
    }
    /**
     * @return Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can&#39;t start or end with spaces. Default value is an empty string. Max length: 63 bytes.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Optional. Documentation describing the listing.
     * 
     */
    public String documentation() {
        return this.documentation;
    }
    /**
     * @return Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
     * 
     */
    public String icon() {
        return this.icon;
    }
    /**
     * @return The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.
     * 
     */
    public String primaryContact() {
        return this.primaryContact;
    }
    /**
     * @return Optional. Details of the publisher who owns the listing and who can share the source data.
     * 
     */
    public PublisherResponse publisher() {
        return this.publisher;
    }
    /**
     * @return Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.
     * 
     */
    public String requestAccess() {
        return this.requestAccess;
    }
    /**
     * @return Current state of the listing.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BigQueryDatasetSourceResponse bigqueryDataset;
        private List<String> categories;
        private DataProviderResponse dataProvider;
        private String description;
        private String displayName;
        private String documentation;
        private String icon;
        private String name;
        private String primaryContact;
        private PublisherResponse publisher;
        private String requestAccess;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetListingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigqueryDataset = defaults.bigqueryDataset;
    	      this.categories = defaults.categories;
    	      this.dataProvider = defaults.dataProvider;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.documentation = defaults.documentation;
    	      this.icon = defaults.icon;
    	      this.name = defaults.name;
    	      this.primaryContact = defaults.primaryContact;
    	      this.publisher = defaults.publisher;
    	      this.requestAccess = defaults.requestAccess;
    	      this.state = defaults.state;
        }

        public Builder bigqueryDataset(BigQueryDatasetSourceResponse bigqueryDataset) {
            this.bigqueryDataset = Objects.requireNonNull(bigqueryDataset);
            return this;
        }
        public Builder categories(List<String> categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        public Builder dataProvider(DataProviderResponse dataProvider) {
            this.dataProvider = Objects.requireNonNull(dataProvider);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder documentation(String documentation) {
            this.documentation = Objects.requireNonNull(documentation);
            return this;
        }
        public Builder icon(String icon) {
            this.icon = Objects.requireNonNull(icon);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder primaryContact(String primaryContact) {
            this.primaryContact = Objects.requireNonNull(primaryContact);
            return this;
        }
        public Builder publisher(PublisherResponse publisher) {
            this.publisher = Objects.requireNonNull(publisher);
            return this;
        }
        public Builder requestAccess(String requestAccess) {
            this.requestAccess = Objects.requireNonNull(requestAccess);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetListingResult build() {
            return new GetListingResult(bigqueryDataset, categories, dataProvider, description, displayName, documentation, icon, name, primaryContact, publisher, requestAccess, state);
        }
    }
}
