// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.recaptchaenterprise.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse {
    /**
     * @return If set to true, it means allowed_domains will not be enforced.
     * 
     */
    private final Boolean allowAllDomains;
    /**
     * @return If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
     * 
     */
    private final Boolean allowAmpTraffic;
    /**
     * @return Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: &#39;example.com&#39; or &#39;subdomain.example.com&#39;
     * 
     */
    private final List<String> allowedDomains;
    /**
     * @return Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.
     * 
     */
    private final String challengeSecurityPreference;
    /**
     * @return Describes how this key is integrated with the website.
     * 
     */
    private final String integrationType;

    @CustomType.Constructor
    private GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse(
        @CustomType.Parameter("allowAllDomains") Boolean allowAllDomains,
        @CustomType.Parameter("allowAmpTraffic") Boolean allowAmpTraffic,
        @CustomType.Parameter("allowedDomains") List<String> allowedDomains,
        @CustomType.Parameter("challengeSecurityPreference") String challengeSecurityPreference,
        @CustomType.Parameter("integrationType") String integrationType) {
        this.allowAllDomains = allowAllDomains;
        this.allowAmpTraffic = allowAmpTraffic;
        this.allowedDomains = allowedDomains;
        this.challengeSecurityPreference = challengeSecurityPreference;
        this.integrationType = integrationType;
    }

    /**
     * @return If set to true, it means allowed_domains will not be enforced.
     * 
     */
    public Boolean allowAllDomains() {
        return this.allowAllDomains;
    }
    /**
     * @return If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
     * 
     */
    public Boolean allowAmpTraffic() {
        return this.allowAmpTraffic;
    }
    /**
     * @return Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: &#39;example.com&#39; or &#39;subdomain.example.com&#39;
     * 
     */
    public List<String> allowedDomains() {
        return this.allowedDomains;
    }
    /**
     * @return Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.
     * 
     */
    public String challengeSecurityPreference() {
        return this.challengeSecurityPreference;
    }
    /**
     * @return Describes how this key is integrated with the website.
     * 
     */
    public String integrationType() {
        return this.integrationType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowAllDomains;
        private Boolean allowAmpTraffic;
        private List<String> allowedDomains;
        private String challengeSecurityPreference;
        private String integrationType;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowAllDomains = defaults.allowAllDomains;
    	      this.allowAmpTraffic = defaults.allowAmpTraffic;
    	      this.allowedDomains = defaults.allowedDomains;
    	      this.challengeSecurityPreference = defaults.challengeSecurityPreference;
    	      this.integrationType = defaults.integrationType;
        }

        public Builder allowAllDomains(Boolean allowAllDomains) {
            this.allowAllDomains = Objects.requireNonNull(allowAllDomains);
            return this;
        }
        public Builder allowAmpTraffic(Boolean allowAmpTraffic) {
            this.allowAmpTraffic = Objects.requireNonNull(allowAmpTraffic);
            return this;
        }
        public Builder allowedDomains(List<String> allowedDomains) {
            this.allowedDomains = Objects.requireNonNull(allowedDomains);
            return this;
        }
        public Builder allowedDomains(String... allowedDomains) {
            return allowedDomains(List.of(allowedDomains));
        }
        public Builder challengeSecurityPreference(String challengeSecurityPreference) {
            this.challengeSecurityPreference = Objects.requireNonNull(challengeSecurityPreference);
            return this;
        }
        public Builder integrationType(String integrationType) {
            this.integrationType = Objects.requireNonNull(integrationType);
            return this;
        }        public GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse build() {
            return new GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse(allowAllDomains, allowAmpTraffic, allowedDomains, challengeSecurityPreference, integrationType);
        }
    }
}
