// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Active Directory configuration, relevant only for Cloud SQL for SQL Server.
 * 
 */
public final class SqlActiveDirectoryConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlActiveDirectoryConfigResponse Empty = new SqlActiveDirectoryConfigResponse();

    /**
     * The name of the domain (e.g., mydomain.com).
     * 
     */
    @Import(name="domain", required=true)
    private String domain;

    public String domain() {
        return this.domain;
    }

    /**
     * This is always sql#activeDirectoryConfig.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    private SqlActiveDirectoryConfigResponse() {}

    private SqlActiveDirectoryConfigResponse(SqlActiveDirectoryConfigResponse $) {
        this.domain = $.domain;
        this.kind = $.kind;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlActiveDirectoryConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlActiveDirectoryConfigResponse $;

        public Builder() {
            $ = new SqlActiveDirectoryConfigResponse();
        }

        public Builder(SqlActiveDirectoryConfigResponse defaults) {
            $ = new SqlActiveDirectoryConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public SqlActiveDirectoryConfigResponse build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            return $;
        }
    }

}
