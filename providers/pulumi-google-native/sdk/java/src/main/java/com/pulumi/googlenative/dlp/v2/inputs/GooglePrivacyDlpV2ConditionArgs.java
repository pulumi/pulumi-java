// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp.v2.enums.GooglePrivacyDlpV2ConditionOperator;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2FieldIdArgs;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2ValueArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of &#39;HH:mm:ss&#39;. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
 * 
 */
public final class GooglePrivacyDlpV2ConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2ConditionArgs Empty = new GooglePrivacyDlpV2ConditionArgs();

    /**
     * Field within the record this condition is evaluated against.
     * 
     */
    @Import(name="field", required=true)
    private Output<GooglePrivacyDlpV2FieldIdArgs> field;

    /**
     * @return Field within the record this condition is evaluated against.
     * 
     */
    public Output<GooglePrivacyDlpV2FieldIdArgs> field() {
        return this.field;
    }

    /**
     * Operator used to compare the field or infoType to the value.
     * 
     */
    @Import(name="operator", required=true)
    private Output<GooglePrivacyDlpV2ConditionOperator> operator;

    /**
     * @return Operator used to compare the field or infoType to the value.
     * 
     */
    public Output<GooglePrivacyDlpV2ConditionOperator> operator() {
        return this.operator;
    }

    /**
     * Value to compare against. [Mandatory, except for `EXISTS` tests.]
     * 
     */
    @Import(name="value")
    private @Nullable Output<GooglePrivacyDlpV2ValueArgs> value;

    /**
     * @return Value to compare against. [Mandatory, except for `EXISTS` tests.]
     * 
     */
    public Optional<Output<GooglePrivacyDlpV2ValueArgs>> value() {
        return Optional.ofNullable(this.value);
    }

    private GooglePrivacyDlpV2ConditionArgs() {}

    private GooglePrivacyDlpV2ConditionArgs(GooglePrivacyDlpV2ConditionArgs $) {
        this.field = $.field;
        this.operator = $.operator;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2ConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2ConditionArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2ConditionArgs();
        }

        public Builder(GooglePrivacyDlpV2ConditionArgs defaults) {
            $ = new GooglePrivacyDlpV2ConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param field Field within the record this condition is evaluated against.
         * 
         * @return builder
         * 
         */
        public Builder field(Output<GooglePrivacyDlpV2FieldIdArgs> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field Field within the record this condition is evaluated against.
         * 
         * @return builder
         * 
         */
        public Builder field(GooglePrivacyDlpV2FieldIdArgs field) {
            return field(Output.of(field));
        }

        /**
         * @param operator Operator used to compare the field or infoType to the value.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<GooglePrivacyDlpV2ConditionOperator> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator used to compare the field or infoType to the value.
         * 
         * @return builder
         * 
         */
        public Builder operator(GooglePrivacyDlpV2ConditionOperator operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param value Value to compare against. [Mandatory, except for `EXISTS` tests.]
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<GooglePrivacyDlpV2ValueArgs> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value to compare against. [Mandatory, except for `EXISTS` tests.]
         * 
         * @return builder
         * 
         */
        public Builder value(GooglePrivacyDlpV2ValueArgs value) {
            return value(Output.of(value));
        }

        public GooglePrivacyDlpV2ConditionArgs build() {
            $.field = Objects.requireNonNull($.field, "expected parameter 'field' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            return $;
        }
    }

}
