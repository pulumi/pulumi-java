// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkebackup.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.gkebackup.v1.inputs.EncryptionKeyArgs;
import com.pulumi.googlenative.gkebackup.v1.inputs.NamespacedNamesArgs;
import com.pulumi.googlenative.gkebackup.v1.inputs.NamespacesArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * BackupConfig defines the configuration of Backups created via this BackupPlan.
 * 
 */
public final class BackupConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupConfigArgs Empty = new BackupConfigArgs();

    /**
     * If True, include all namespaced resources
     * 
     */
    @Import(name="allNamespaces")
    private @Nullable Output<Boolean> allNamespaces;

    /**
     * @return If True, include all namespaced resources
     * 
     */
    public Optional<Output<Boolean>> allNamespaces() {
        return Optional.ofNullable(this.allNamespaces);
    }

    /**
     * This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34; portion (the Kubernetes resources) of Backups created via this plan. Default (empty): Config backup artifacts will not be encrypted.
     * 
     */
    @Import(name="encryptionKey")
    private @Nullable Output<EncryptionKeyArgs> encryptionKey;

    /**
     * @return This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34; portion (the Kubernetes resources) of Backups created via this plan. Default (empty): Config backup artifacts will not be encrypted.
     * 
     */
    public Optional<Output<EncryptionKeyArgs>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    /**
     * This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
     * 
     */
    @Import(name="includeSecrets")
    private @Nullable Output<Boolean> includeSecrets;

    /**
     * @return This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
     * 
     */
    public Optional<Output<Boolean>> includeSecrets() {
        return Optional.ofNullable(this.includeSecrets);
    }

    /**
     * This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
     * 
     */
    @Import(name="includeVolumeData")
    private @Nullable Output<Boolean> includeVolumeData;

    /**
     * @return This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
     * 
     */
    public Optional<Output<Boolean>> includeVolumeData() {
        return Optional.ofNullable(this.includeVolumeData);
    }

    /**
     * If set, include just the resources referenced by the listed ProtectedApplications.
     * 
     */
    @Import(name="selectedApplications")
    private @Nullable Output<NamespacedNamesArgs> selectedApplications;

    /**
     * @return If set, include just the resources referenced by the listed ProtectedApplications.
     * 
     */
    public Optional<Output<NamespacedNamesArgs>> selectedApplications() {
        return Optional.ofNullable(this.selectedApplications);
    }

    /**
     * If set, include just the resources in the listed namespaces.
     * 
     */
    @Import(name="selectedNamespaces")
    private @Nullable Output<NamespacesArgs> selectedNamespaces;

    /**
     * @return If set, include just the resources in the listed namespaces.
     * 
     */
    public Optional<Output<NamespacesArgs>> selectedNamespaces() {
        return Optional.ofNullable(this.selectedNamespaces);
    }

    private BackupConfigArgs() {}

    private BackupConfigArgs(BackupConfigArgs $) {
        this.allNamespaces = $.allNamespaces;
        this.encryptionKey = $.encryptionKey;
        this.includeSecrets = $.includeSecrets;
        this.includeVolumeData = $.includeVolumeData;
        this.selectedApplications = $.selectedApplications;
        this.selectedNamespaces = $.selectedNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupConfigArgs $;

        public Builder() {
            $ = new BackupConfigArgs();
        }

        public Builder(BackupConfigArgs defaults) {
            $ = new BackupConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allNamespaces If True, include all namespaced resources
         * 
         * @return builder
         * 
         */
        public Builder allNamespaces(@Nullable Output<Boolean> allNamespaces) {
            $.allNamespaces = allNamespaces;
            return this;
        }

        /**
         * @param allNamespaces If True, include all namespaced resources
         * 
         * @return builder
         * 
         */
        public Builder allNamespaces(Boolean allNamespaces) {
            return allNamespaces(Output.of(allNamespaces));
        }

        /**
         * @param encryptionKey This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34; portion (the Kubernetes resources) of Backups created via this plan. Default (empty): Config backup artifacts will not be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(@Nullable Output<EncryptionKeyArgs> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        /**
         * @param encryptionKey This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34; portion (the Kubernetes resources) of Backups created via this plan. Default (empty): Config backup artifacts will not be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(EncryptionKeyArgs encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        /**
         * @param includeSecrets This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
         * 
         * @return builder
         * 
         */
        public Builder includeSecrets(@Nullable Output<Boolean> includeSecrets) {
            $.includeSecrets = includeSecrets;
            return this;
        }

        /**
         * @param includeSecrets This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
         * 
         * @return builder
         * 
         */
        public Builder includeSecrets(Boolean includeSecrets) {
            return includeSecrets(Output.of(includeSecrets));
        }

        /**
         * @param includeVolumeData This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
         * 
         * @return builder
         * 
         */
        public Builder includeVolumeData(@Nullable Output<Boolean> includeVolumeData) {
            $.includeVolumeData = includeVolumeData;
            return this;
        }

        /**
         * @param includeVolumeData This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
         * 
         * @return builder
         * 
         */
        public Builder includeVolumeData(Boolean includeVolumeData) {
            return includeVolumeData(Output.of(includeVolumeData));
        }

        /**
         * @param selectedApplications If set, include just the resources referenced by the listed ProtectedApplications.
         * 
         * @return builder
         * 
         */
        public Builder selectedApplications(@Nullable Output<NamespacedNamesArgs> selectedApplications) {
            $.selectedApplications = selectedApplications;
            return this;
        }

        /**
         * @param selectedApplications If set, include just the resources referenced by the listed ProtectedApplications.
         * 
         * @return builder
         * 
         */
        public Builder selectedApplications(NamespacedNamesArgs selectedApplications) {
            return selectedApplications(Output.of(selectedApplications));
        }

        /**
         * @param selectedNamespaces If set, include just the resources in the listed namespaces.
         * 
         * @return builder
         * 
         */
        public Builder selectedNamespaces(@Nullable Output<NamespacesArgs> selectedNamespaces) {
            $.selectedNamespaces = selectedNamespaces;
            return this;
        }

        /**
         * @param selectedNamespaces If set, include just the resources in the listed namespaces.
         * 
         * @return builder
         * 
         */
        public Builder selectedNamespaces(NamespacesArgs selectedNamespaces) {
            return selectedNamespaces(Output.of(selectedNamespaces));
        }

        public BackupConfigArgs build() {
            return $;
        }
    }

}
