// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.connectors.v1.inputs.SecretArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
 * 
 */
public final class ConfigVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigVariableArgs Empty = new ConfigVariableArgs();

    /**
     * Value is a bool.
     * 
     */
    @Import(name="boolValue")
    private @Nullable Output<Boolean> boolValue;

    /**
     * @return Value is a bool.
     * 
     */
    public Optional<Output<Boolean>> boolValue() {
        return Optional.ofNullable(this.boolValue);
    }

    /**
     * Value is an integer
     * 
     */
    @Import(name="intValue")
    private @Nullable Output<String> intValue;

    /**
     * @return Value is an integer
     * 
     */
    public Optional<Output<String>> intValue() {
        return Optional.ofNullable(this.intValue);
    }

    /**
     * Key of the config variable.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Key of the config variable.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Value is a secret.
     * 
     */
    @Import(name="secretValue")
    private @Nullable Output<SecretArgs> secretValue;

    /**
     * @return Value is a secret.
     * 
     */
    public Optional<Output<SecretArgs>> secretValue() {
        return Optional.ofNullable(this.secretValue);
    }

    /**
     * Value is a string.
     * 
     */
    @Import(name="stringValue")
    private @Nullable Output<String> stringValue;

    /**
     * @return Value is a string.
     * 
     */
    public Optional<Output<String>> stringValue() {
        return Optional.ofNullable(this.stringValue);
    }

    private ConfigVariableArgs() {}

    private ConfigVariableArgs(ConfigVariableArgs $) {
        this.boolValue = $.boolValue;
        this.intValue = $.intValue;
        this.key = $.key;
        this.secretValue = $.secretValue;
        this.stringValue = $.stringValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigVariableArgs $;

        public Builder() {
            $ = new ConfigVariableArgs();
        }

        public Builder(ConfigVariableArgs defaults) {
            $ = new ConfigVariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boolValue Value is a bool.
         * 
         * @return builder
         * 
         */
        public Builder boolValue(@Nullable Output<Boolean> boolValue) {
            $.boolValue = boolValue;
            return this;
        }

        /**
         * @param boolValue Value is a bool.
         * 
         * @return builder
         * 
         */
        public Builder boolValue(Boolean boolValue) {
            return boolValue(Output.of(boolValue));
        }

        /**
         * @param intValue Value is an integer
         * 
         * @return builder
         * 
         */
        public Builder intValue(@Nullable Output<String> intValue) {
            $.intValue = intValue;
            return this;
        }

        /**
         * @param intValue Value is an integer
         * 
         * @return builder
         * 
         */
        public Builder intValue(String intValue) {
            return intValue(Output.of(intValue));
        }

        /**
         * @param key Key of the config variable.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Key of the config variable.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param secretValue Value is a secret.
         * 
         * @return builder
         * 
         */
        public Builder secretValue(@Nullable Output<SecretArgs> secretValue) {
            $.secretValue = secretValue;
            return this;
        }

        /**
         * @param secretValue Value is a secret.
         * 
         * @return builder
         * 
         */
        public Builder secretValue(SecretArgs secretValue) {
            return secretValue(Output.of(secretValue));
        }

        /**
         * @param stringValue Value is a string.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(@Nullable Output<String> stringValue) {
            $.stringValue = stringValue;
            return this;
        }

        /**
         * @param stringValue Value is a string.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(String stringValue) {
            return stringValue(Output.of(stringValue));
        }

        public ConfigVariableArgs build() {
            return $;
        }
    }

}
