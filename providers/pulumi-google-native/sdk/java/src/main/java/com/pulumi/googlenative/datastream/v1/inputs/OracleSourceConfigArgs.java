// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream.v1.inputs.DropLargeObjectsArgs;
import com.pulumi.googlenative.datastream.v1.inputs.OracleRdbmsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Oracle data source configuration
 * 
 */
public final class OracleSourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final OracleSourceConfigArgs Empty = new OracleSourceConfigArgs();

    /**
     * Drop large object values.
     * 
     */
    @Import(name="dropLargeObjects")
    private @Nullable Output<DropLargeObjectsArgs> dropLargeObjects;

    /**
     * @return Drop large object values.
     * 
     */
    public Optional<Output<DropLargeObjectsArgs>> dropLargeObjects() {
        return Optional.ofNullable(this.dropLargeObjects);
    }

    /**
     * Oracle objects to exclude from the stream.
     * 
     */
    @Import(name="excludeObjects")
    private @Nullable Output<OracleRdbmsArgs> excludeObjects;

    /**
     * @return Oracle objects to exclude from the stream.
     * 
     */
    public Optional<Output<OracleRdbmsArgs>> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }

    /**
     * Oracle objects to include in the stream.
     * 
     */
    @Import(name="includeObjects")
    private @Nullable Output<OracleRdbmsArgs> includeObjects;

    /**
     * @return Oracle objects to include in the stream.
     * 
     */
    public Optional<Output<OracleRdbmsArgs>> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }

    private OracleSourceConfigArgs() {}

    private OracleSourceConfigArgs(OracleSourceConfigArgs $) {
        this.dropLargeObjects = $.dropLargeObjects;
        this.excludeObjects = $.excludeObjects;
        this.includeObjects = $.includeObjects;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OracleSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OracleSourceConfigArgs $;

        public Builder() {
            $ = new OracleSourceConfigArgs();
        }

        public Builder(OracleSourceConfigArgs defaults) {
            $ = new OracleSourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dropLargeObjects Drop large object values.
         * 
         * @return builder
         * 
         */
        public Builder dropLargeObjects(@Nullable Output<DropLargeObjectsArgs> dropLargeObjects) {
            $.dropLargeObjects = dropLargeObjects;
            return this;
        }

        /**
         * @param dropLargeObjects Drop large object values.
         * 
         * @return builder
         * 
         */
        public Builder dropLargeObjects(DropLargeObjectsArgs dropLargeObjects) {
            return dropLargeObjects(Output.of(dropLargeObjects));
        }

        /**
         * @param excludeObjects Oracle objects to exclude from the stream.
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(@Nullable Output<OracleRdbmsArgs> excludeObjects) {
            $.excludeObjects = excludeObjects;
            return this;
        }

        /**
         * @param excludeObjects Oracle objects to exclude from the stream.
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(OracleRdbmsArgs excludeObjects) {
            return excludeObjects(Output.of(excludeObjects));
        }

        /**
         * @param includeObjects Oracle objects to include in the stream.
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(@Nullable Output<OracleRdbmsArgs> includeObjects) {
            $.includeObjects = includeObjects;
            return this;
        }

        /**
         * @param includeObjects Oracle objects to include in the stream.
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(OracleRdbmsArgs includeObjects) {
            return includeObjects(Output.of(includeObjects));
        }

        public OracleSourceConfigArgs build() {
            return $;
        }
    }

}
