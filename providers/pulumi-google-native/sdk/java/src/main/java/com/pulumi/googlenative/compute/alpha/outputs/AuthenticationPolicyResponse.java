// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.OriginAuthenticationMethodResponse;
import com.pulumi.googlenative.compute.alpha.outputs.PeerAuthenticationMethodResponse;
import com.pulumi.googlenative.compute.alpha.outputs.TlsContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AuthenticationPolicyResponse {
    /**
     * @return List of authentication methods that can be used for origin authentication. Similar to peers, these will be evaluated in order the first valid one will be used to set origin identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if origin authentication is not required.
     * 
     */
    private final List<OriginAuthenticationMethodResponse> origins;
    /**
     * @return List of authentication methods that can be used for peer authentication. They will be evaluated in order the first valid one will be used to set peer identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if peer authentication is not required.
     * 
     */
    private final List<PeerAuthenticationMethodResponse> peers;
    /**
     * @return Define whether peer or origin identity should be used for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request. This field can be set to one of the following: USE_PEER: Principal will be set to the identity from peer authentication. USE_ORIGIN: Principal will be set to the identity from origin authentication.
     * 
     */
    private final String principalBinding;
    /**
     * @return Configures the mechanism to obtain server-side security certificates and identity information.
     * 
     */
    private final TlsContextResponse serverTlsContext;

    @CustomType.Constructor
    private AuthenticationPolicyResponse(
        @CustomType.Parameter("origins") List<OriginAuthenticationMethodResponse> origins,
        @CustomType.Parameter("peers") List<PeerAuthenticationMethodResponse> peers,
        @CustomType.Parameter("principalBinding") String principalBinding,
        @CustomType.Parameter("serverTlsContext") TlsContextResponse serverTlsContext) {
        this.origins = origins;
        this.peers = peers;
        this.principalBinding = principalBinding;
        this.serverTlsContext = serverTlsContext;
    }

    /**
     * @return List of authentication methods that can be used for origin authentication. Similar to peers, these will be evaluated in order the first valid one will be used to set origin identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if origin authentication is not required.
     * 
     */
    public List<OriginAuthenticationMethodResponse> origins() {
        return this.origins;
    }
    /**
     * @return List of authentication methods that can be used for peer authentication. They will be evaluated in order the first valid one will be used to set peer identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if peer authentication is not required.
     * 
     */
    public List<PeerAuthenticationMethodResponse> peers() {
        return this.peers;
    }
    /**
     * @return Define whether peer or origin identity should be used for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request. This field can be set to one of the following: USE_PEER: Principal will be set to the identity from peer authentication. USE_ORIGIN: Principal will be set to the identity from origin authentication.
     * 
     */
    public String principalBinding() {
        return this.principalBinding;
    }
    /**
     * @return Configures the mechanism to obtain server-side security certificates and identity information.
     * 
     */
    public TlsContextResponse serverTlsContext() {
        return this.serverTlsContext;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthenticationPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<OriginAuthenticationMethodResponse> origins;
        private List<PeerAuthenticationMethodResponse> peers;
        private String principalBinding;
        private TlsContextResponse serverTlsContext;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthenticationPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.origins = defaults.origins;
    	      this.peers = defaults.peers;
    	      this.principalBinding = defaults.principalBinding;
    	      this.serverTlsContext = defaults.serverTlsContext;
        }

        public Builder origins(List<OriginAuthenticationMethodResponse> origins) {
            this.origins = Objects.requireNonNull(origins);
            return this;
        }
        public Builder origins(OriginAuthenticationMethodResponse... origins) {
            return origins(List.of(origins));
        }
        public Builder peers(List<PeerAuthenticationMethodResponse> peers) {
            this.peers = Objects.requireNonNull(peers);
            return this;
        }
        public Builder peers(PeerAuthenticationMethodResponse... peers) {
            return peers(List.of(peers));
        }
        public Builder principalBinding(String principalBinding) {
            this.principalBinding = Objects.requireNonNull(principalBinding);
            return this;
        }
        public Builder serverTlsContext(TlsContextResponse serverTlsContext) {
            this.serverTlsContext = Objects.requireNonNull(serverTlsContext);
            return this;
        }        public AuthenticationPolicyResponse build() {
            return new AuthenticationPolicyResponse(origins, peers, principalBinding, serverTlsContext);
        }
    }
}
