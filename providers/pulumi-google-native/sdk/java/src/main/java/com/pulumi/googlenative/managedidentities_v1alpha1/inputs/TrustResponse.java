// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.managedidentities_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Represents a relationship between two domains which makes it possible for users in one domain to be authenticated by a dc in another domain. Refer https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc731335(v%3dws.10) If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 * 
 */
public final class TrustResponse extends com.pulumi.resources.InvokeArgs {

    public static final TrustResponse Empty = new TrustResponse();

    /**
     * The time the instance was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return The time the instance was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * The last heartbeat time when the trust was known to be connected.
     * 
     */
    @Import(name="lastKnownTrustConnectedHeartbeatTime", required=true)
    private String lastKnownTrustConnectedHeartbeatTime;

    /**
     * @return The last heartbeat time when the trust was known to be connected.
     * 
     */
    public String lastKnownTrustConnectedHeartbeatTime() {
        return this.lastKnownTrustConnectedHeartbeatTime;
    }

    /**
     * The trust authentication type which decides whether the trusted side has forest/domain wide access or selective access to approved set of resources.
     * 
     */
    @Import(name="selectiveAuthentication", required=true)
    private Boolean selectiveAuthentication;

    /**
     * @return The trust authentication type which decides whether the trusted side has forest/domain wide access or selective access to approved set of resources.
     * 
     */
    public Boolean selectiveAuthentication() {
        return this.selectiveAuthentication;
    }

    /**
     * The current state of this trust.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return The current state of this trust.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Additional information about the current state of this trust, if available.
     * 
     */
    @Import(name="stateDescription", required=true)
    private String stateDescription;

    /**
     * @return Additional information about the current state of this trust, if available.
     * 
     */
    public String stateDescription() {
        return this.stateDescription;
    }

    /**
     * The target dns server ip addresses which can resolve the remote domain involved in trust.
     * 
     */
    @Import(name="targetDnsIpAddresses", required=true)
    private List<String> targetDnsIpAddresses;

    /**
     * @return The target dns server ip addresses which can resolve the remote domain involved in trust.
     * 
     */
    public List<String> targetDnsIpAddresses() {
        return this.targetDnsIpAddresses;
    }

    /**
     * The fully qualified target domain name which will be in trust with current domain.
     * 
     */
    @Import(name="targetDomainName", required=true)
    private String targetDomainName;

    /**
     * @return The fully qualified target domain name which will be in trust with current domain.
     * 
     */
    public String targetDomainName() {
        return this.targetDomainName;
    }

    /**
     * The trust direction decides the current domain is trusted, trusting or both.
     * 
     */
    @Import(name="trustDirection", required=true)
    private String trustDirection;

    /**
     * @return The trust direction decides the current domain is trusted, trusting or both.
     * 
     */
    public String trustDirection() {
        return this.trustDirection;
    }

    /**
     * Input only, and will not be stored. The trust secret used for handshake with target domain.
     * 
     */
    @Import(name="trustHandshakeSecret", required=true)
    private String trustHandshakeSecret;

    /**
     * @return Input only, and will not be stored. The trust secret used for handshake with target domain.
     * 
     */
    public String trustHandshakeSecret() {
        return this.trustHandshakeSecret;
    }

    /**
     * The type of trust represented by the trust resource.
     * 
     */
    @Import(name="trustType", required=true)
    private String trustType;

    /**
     * @return The type of trust represented by the trust resource.
     * 
     */
    public String trustType() {
        return this.trustType;
    }

    /**
     * Last update time.
     * 
     */
    @Import(name="updateTime", required=true)
    private String updateTime;

    /**
     * @return Last update time.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    private TrustResponse() {}

    private TrustResponse(TrustResponse $) {
        this.createTime = $.createTime;
        this.lastKnownTrustConnectedHeartbeatTime = $.lastKnownTrustConnectedHeartbeatTime;
        this.selectiveAuthentication = $.selectiveAuthentication;
        this.state = $.state;
        this.stateDescription = $.stateDescription;
        this.targetDnsIpAddresses = $.targetDnsIpAddresses;
        this.targetDomainName = $.targetDomainName;
        this.trustDirection = $.trustDirection;
        this.trustHandshakeSecret = $.trustHandshakeSecret;
        this.trustType = $.trustType;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrustResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrustResponse $;

        public Builder() {
            $ = new TrustResponse();
        }

        public Builder(TrustResponse defaults) {
            $ = new TrustResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param lastKnownTrustConnectedHeartbeatTime The last heartbeat time when the trust was known to be connected.
         * 
         * @return builder
         * 
         */
        public Builder lastKnownTrustConnectedHeartbeatTime(String lastKnownTrustConnectedHeartbeatTime) {
            $.lastKnownTrustConnectedHeartbeatTime = lastKnownTrustConnectedHeartbeatTime;
            return this;
        }

        /**
         * @param selectiveAuthentication The trust authentication type which decides whether the trusted side has forest/domain wide access or selective access to approved set of resources.
         * 
         * @return builder
         * 
         */
        public Builder selectiveAuthentication(Boolean selectiveAuthentication) {
            $.selectiveAuthentication = selectiveAuthentication;
            return this;
        }

        /**
         * @param state The current state of this trust.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param stateDescription Additional information about the current state of this trust, if available.
         * 
         * @return builder
         * 
         */
        public Builder stateDescription(String stateDescription) {
            $.stateDescription = stateDescription;
            return this;
        }

        /**
         * @param targetDnsIpAddresses The target dns server ip addresses which can resolve the remote domain involved in trust.
         * 
         * @return builder
         * 
         */
        public Builder targetDnsIpAddresses(List<String> targetDnsIpAddresses) {
            $.targetDnsIpAddresses = targetDnsIpAddresses;
            return this;
        }

        /**
         * @param targetDnsIpAddresses The target dns server ip addresses which can resolve the remote domain involved in trust.
         * 
         * @return builder
         * 
         */
        public Builder targetDnsIpAddresses(String... targetDnsIpAddresses) {
            return targetDnsIpAddresses(List.of(targetDnsIpAddresses));
        }

        /**
         * @param targetDomainName The fully qualified target domain name which will be in trust with current domain.
         * 
         * @return builder
         * 
         */
        public Builder targetDomainName(String targetDomainName) {
            $.targetDomainName = targetDomainName;
            return this;
        }

        /**
         * @param trustDirection The trust direction decides the current domain is trusted, trusting or both.
         * 
         * @return builder
         * 
         */
        public Builder trustDirection(String trustDirection) {
            $.trustDirection = trustDirection;
            return this;
        }

        /**
         * @param trustHandshakeSecret Input only, and will not be stored. The trust secret used for handshake with target domain.
         * 
         * @return builder
         * 
         */
        public Builder trustHandshakeSecret(String trustHandshakeSecret) {
            $.trustHandshakeSecret = trustHandshakeSecret;
            return this;
        }

        /**
         * @param trustType The type of trust represented by the trust resource.
         * 
         * @return builder
         * 
         */
        public Builder trustType(String trustType) {
            $.trustType = trustType;
            return this;
        }

        /**
         * @param updateTime Last update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public TrustResponse build() {
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.lastKnownTrustConnectedHeartbeatTime = Objects.requireNonNull($.lastKnownTrustConnectedHeartbeatTime, "expected parameter 'lastKnownTrustConnectedHeartbeatTime' to be non-null");
            $.selectiveAuthentication = Objects.requireNonNull($.selectiveAuthentication, "expected parameter 'selectiveAuthentication' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateDescription = Objects.requireNonNull($.stateDescription, "expected parameter 'stateDescription' to be non-null");
            $.targetDnsIpAddresses = Objects.requireNonNull($.targetDnsIpAddresses, "expected parameter 'targetDnsIpAddresses' to be non-null");
            $.targetDomainName = Objects.requireNonNull($.targetDomainName, "expected parameter 'targetDomainName' to be non-null");
            $.trustDirection = Objects.requireNonNull($.trustDirection, "expected parameter 'trustDirection' to be non-null");
            $.trustHandshakeSecret = Objects.requireNonNull($.trustHandshakeSecret, "expected parameter 'trustHandshakeSecret' to be non-null");
            $.trustType = Objects.requireNonNull($.trustType, "expected parameter 'trustType' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
