// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.GoogleCloudStorageResponse;
import com.pulumi.googlenative.testing_v1.inputs.ToolResultsExecutionResponse;
import com.pulumi.googlenative.testing_v1.inputs.ToolResultsHistoryResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Locations where the results of running the test are stored.
 * 
 */
public final class ResultStorageResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResultStorageResponse Empty = new ResultStorageResponse();

    /**
     * Required.
     * 
     */
    @Import(name="googleCloudStorage", required=true)
    private GoogleCloudStorageResponse googleCloudStorage;

    /**
     * @return Required.
     * 
     */
    public GoogleCloudStorageResponse googleCloudStorage() {
        return this.googleCloudStorage;
    }

    /**
     * URL to the results in the Firebase Web Console.
     * 
     */
    @Import(name="resultsUrl", required=true)
    private String resultsUrl;

    /**
     * @return URL to the results in the Firebase Web Console.
     * 
     */
    public String resultsUrl() {
        return this.resultsUrl;
    }

    /**
     * The tool results execution that results are written to.
     * 
     */
    @Import(name="toolResultsExecution", required=true)
    private ToolResultsExecutionResponse toolResultsExecution;

    /**
     * @return The tool results execution that results are written to.
     * 
     */
    public ToolResultsExecutionResponse toolResultsExecution() {
        return this.toolResultsExecution;
    }

    /**
     * The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
     * 
     */
    @Import(name="toolResultsHistory", required=true)
    private ToolResultsHistoryResponse toolResultsHistory;

    /**
     * @return The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
     * 
     */
    public ToolResultsHistoryResponse toolResultsHistory() {
        return this.toolResultsHistory;
    }

    private ResultStorageResponse() {}

    private ResultStorageResponse(ResultStorageResponse $) {
        this.googleCloudStorage = $.googleCloudStorage;
        this.resultsUrl = $.resultsUrl;
        this.toolResultsExecution = $.toolResultsExecution;
        this.toolResultsHistory = $.toolResultsHistory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResultStorageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResultStorageResponse $;

        public Builder() {
            $ = new ResultStorageResponse();
        }

        public Builder(ResultStorageResponse defaults) {
            $ = new ResultStorageResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param googleCloudStorage Required.
         * 
         * @return builder
         * 
         */
        public Builder googleCloudStorage(GoogleCloudStorageResponse googleCloudStorage) {
            $.googleCloudStorage = googleCloudStorage;
            return this;
        }

        /**
         * @param resultsUrl URL to the results in the Firebase Web Console.
         * 
         * @return builder
         * 
         */
        public Builder resultsUrl(String resultsUrl) {
            $.resultsUrl = resultsUrl;
            return this;
        }

        /**
         * @param toolResultsExecution The tool results execution that results are written to.
         * 
         * @return builder
         * 
         */
        public Builder toolResultsExecution(ToolResultsExecutionResponse toolResultsExecution) {
            $.toolResultsExecution = toolResultsExecution;
            return this;
        }

        /**
         * @param toolResultsHistory The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
         * 
         * @return builder
         * 
         */
        public Builder toolResultsHistory(ToolResultsHistoryResponse toolResultsHistory) {
            $.toolResultsHistory = toolResultsHistory;
            return this;
        }

        public ResultStorageResponse build() {
            $.googleCloudStorage = Objects.requireNonNull($.googleCloudStorage, "expected parameter 'googleCloudStorage' to be non-null");
            $.resultsUrl = Objects.requireNonNull($.resultsUrl, "expected parameter 'resultsUrl' to be non-null");
            $.toolResultsExecution = Objects.requireNonNull($.toolResultsExecution, "expected parameter 'toolResultsExecution' to be non-null");
            $.toolResultsHistory = Objects.requireNonNull($.toolResultsHistory, "expected parameter 'toolResultsHistory' to be non-null");
            return $;
        }
    }

}
