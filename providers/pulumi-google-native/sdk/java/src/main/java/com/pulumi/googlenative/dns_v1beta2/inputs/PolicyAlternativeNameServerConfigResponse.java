// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dns_v1beta2.inputs.PolicyAlternativeNameServerConfigTargetNameServerResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class PolicyAlternativeNameServerConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PolicyAlternativeNameServerConfigResponse Empty = new PolicyAlternativeNameServerConfigResponse();

    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
     * 
     */
    @Import(name="targetNameServers", required=true)
    private List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers;

    public List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers() {
        return this.targetNameServers;
    }

    private PolicyAlternativeNameServerConfigResponse() {}

    private PolicyAlternativeNameServerConfigResponse(PolicyAlternativeNameServerConfigResponse $) {
        this.kind = $.kind;
        this.targetNameServers = $.targetNameServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyAlternativeNameServerConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyAlternativeNameServerConfigResponse $;

        public Builder() {
            $ = new PolicyAlternativeNameServerConfigResponse();
        }

        public Builder(PolicyAlternativeNameServerConfigResponse defaults) {
            $ = new PolicyAlternativeNameServerConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder targetNameServers(List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers) {
            $.targetNameServers = targetNameServers;
            return this;
        }

        public Builder targetNameServers(PolicyAlternativeNameServerConfigTargetNameServerResponse... targetNameServers) {
            return targetNameServers(List.of(targetNameServers));
        }

        public PolicyAlternativeNameServerConfigResponse build() {
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.targetNameServers = Objects.requireNonNull($.targetNameServers, "expected parameter 'targetNameServers' to be non-null");
            return $;
        }
    }

}
