// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1alpha1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream_v1alpha1.enums.StreamState;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.BackfillAllStrategyArgs;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.BackfillNoneStrategyArgs;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.DestinationConfigArgs;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.SourceConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamArgs Empty = new StreamArgs();

    /**
     * Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     * 
     */
    @Import(name="backfillAll")
    private @Nullable Output<BackfillAllStrategyArgs> backfillAll;

    public Optional<Output<BackfillAllStrategyArgs>> backfillAll() {
        return Optional.ofNullable(this.backfillAll);
    }

    /**
     * Do not automatically backfill any objects.
     * 
     */
    @Import(name="backfillNone")
    private @Nullable Output<BackfillNoneStrategyArgs> backfillNone;

    public Optional<Output<BackfillNoneStrategyArgs>> backfillNone() {
        return Optional.ofNullable(this.backfillNone);
    }

    /**
     * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Import(name="customerManagedEncryptionKey")
    private @Nullable Output<String> customerManagedEncryptionKey;

    public Optional<Output<String>> customerManagedEncryptionKey() {
        return Optional.ofNullable(this.customerManagedEncryptionKey);
    }

    /**
     * Destination connection profile configuration.
     * 
     */
    @Import(name="destinationConfig", required=true)
    private Output<DestinationConfigArgs> destinationConfig;

    public Output<DestinationConfigArgs> destinationConfig() {
        return this.destinationConfig;
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="force")
    private @Nullable Output<String> force;

    public Optional<Output<String>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Source connection profile configuration.
     * 
     */
    @Import(name="sourceConfig", required=true)
    private Output<SourceConfigArgs> sourceConfig;

    public Output<SourceConfigArgs> sourceConfig() {
        return this.sourceConfig;
    }

    /**
     * The state of the stream.
     * 
     */
    @Import(name="state")
    private @Nullable Output<StreamState> state;

    public Optional<Output<StreamState>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="streamId", required=true)
    private Output<String> streamId;

    public Output<String> streamId() {
        return this.streamId;
    }

    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private StreamArgs() {}

    private StreamArgs(StreamArgs $) {
        this.backfillAll = $.backfillAll;
        this.backfillNone = $.backfillNone;
        this.customerManagedEncryptionKey = $.customerManagedEncryptionKey;
        this.destinationConfig = $.destinationConfig;
        this.displayName = $.displayName;
        this.force = $.force;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.requestId = $.requestId;
        this.sourceConfig = $.sourceConfig;
        this.state = $.state;
        this.streamId = $.streamId;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamArgs $;

        public Builder() {
            $ = new StreamArgs();
        }

        public Builder(StreamArgs defaults) {
            $ = new StreamArgs(Objects.requireNonNull(defaults));
        }

        public Builder backfillAll(@Nullable Output<BackfillAllStrategyArgs> backfillAll) {
            $.backfillAll = backfillAll;
            return this;
        }

        public Builder backfillAll(BackfillAllStrategyArgs backfillAll) {
            return backfillAll(Output.of(backfillAll));
        }

        public Builder backfillNone(@Nullable Output<BackfillNoneStrategyArgs> backfillNone) {
            $.backfillNone = backfillNone;
            return this;
        }

        public Builder backfillNone(BackfillNoneStrategyArgs backfillNone) {
            return backfillNone(Output.of(backfillNone));
        }

        public Builder customerManagedEncryptionKey(@Nullable Output<String> customerManagedEncryptionKey) {
            $.customerManagedEncryptionKey = customerManagedEncryptionKey;
            return this;
        }

        public Builder customerManagedEncryptionKey(String customerManagedEncryptionKey) {
            return customerManagedEncryptionKey(Output.of(customerManagedEncryptionKey));
        }

        public Builder destinationConfig(Output<DestinationConfigArgs> destinationConfig) {
            $.destinationConfig = destinationConfig;
            return this;
        }

        public Builder destinationConfig(DestinationConfigArgs destinationConfig) {
            return destinationConfig(Output.of(destinationConfig));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder force(@Nullable Output<String> force) {
            $.force = force;
            return this;
        }

        public Builder force(String force) {
            return force(Output.of(force));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder sourceConfig(Output<SourceConfigArgs> sourceConfig) {
            $.sourceConfig = sourceConfig;
            return this;
        }

        public Builder sourceConfig(SourceConfigArgs sourceConfig) {
            return sourceConfig(Output.of(sourceConfig));
        }

        public Builder state(@Nullable Output<StreamState> state) {
            $.state = state;
            return this;
        }

        public Builder state(StreamState state) {
            return state(Output.of(state));
        }

        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public StreamArgs build() {
            $.destinationConfig = Objects.requireNonNull($.destinationConfig, "expected parameter 'destinationConfig' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.sourceConfig = Objects.requireNonNull($.sourceConfig, "expected parameter 'sourceConfig' to be non-null");
            $.streamId = Objects.requireNonNull($.streamId, "expected parameter 'streamId' to be non-null");
            return $;
        }
    }

}
