// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1alpha1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.datastream_v1alpha1.enums.StreamState;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.BackfillAllStrategyArgs;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.BackfillNoneStrategyArgs;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.DestinationConfigArgs;
import com.pulumi.googlenative.datastream_v1alpha1.inputs.SourceConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamArgs Empty = new StreamArgs();

    /**
     * Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     * 
     */
    @Import(name="backfillAll")
      private final @Nullable Output<BackfillAllStrategyArgs> backfillAll;

    public Output<BackfillAllStrategyArgs> backfillAll() {
        return this.backfillAll == null ? Codegen.empty() : this.backfillAll;
    }

    /**
     * Do not automatically backfill any objects.
     * 
     */
    @Import(name="backfillNone")
      private final @Nullable Output<BackfillNoneStrategyArgs> backfillNone;

    public Output<BackfillNoneStrategyArgs> backfillNone() {
        return this.backfillNone == null ? Codegen.empty() : this.backfillNone;
    }

    /**
     * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Import(name="customerManagedEncryptionKey")
      private final @Nullable Output<String> customerManagedEncryptionKey;

    public Output<String> customerManagedEncryptionKey() {
        return this.customerManagedEncryptionKey == null ? Codegen.empty() : this.customerManagedEncryptionKey;
    }

    /**
     * Destination connection profile configuration.
     * 
     */
    @Import(name="destinationConfig", required=true)
      private final Output<DestinationConfigArgs> destinationConfig;

    public Output<DestinationConfigArgs> destinationConfig() {
        return this.destinationConfig;
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="force")
      private final @Nullable Output<String> force;

    public Output<String> force() {
        return this.force == null ? Codegen.empty() : this.force;
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    /**
     * Source connection profile configuration.
     * 
     */
    @Import(name="sourceConfig", required=true)
      private final Output<SourceConfigArgs> sourceConfig;

    public Output<SourceConfigArgs> sourceConfig() {
        return this.sourceConfig;
    }

    /**
     * The state of the stream.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<StreamState> state;

    public Output<StreamState> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    @Import(name="streamId", required=true)
      private final Output<String> streamId;

    public Output<String> streamId() {
        return this.streamId;
    }

    @Import(name="validateOnly")
      private final @Nullable Output<String> validateOnly;

    public Output<String> validateOnly() {
        return this.validateOnly == null ? Codegen.empty() : this.validateOnly;
    }

    public StreamArgs(
        @Nullable Output<BackfillAllStrategyArgs> backfillAll,
        @Nullable Output<BackfillNoneStrategyArgs> backfillNone,
        @Nullable Output<String> customerManagedEncryptionKey,
        Output<DestinationConfigArgs> destinationConfig,
        Output<String> displayName,
        @Nullable Output<String> force,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        Output<SourceConfigArgs> sourceConfig,
        @Nullable Output<StreamState> state,
        Output<String> streamId,
        @Nullable Output<String> validateOnly) {
        this.backfillAll = backfillAll;
        this.backfillNone = backfillNone;
        this.customerManagedEncryptionKey = customerManagedEncryptionKey;
        this.destinationConfig = Objects.requireNonNull(destinationConfig, "expected parameter 'destinationConfig' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.force = force;
        this.labels = labels;
        this.location = location;
        this.project = project;
        this.requestId = requestId;
        this.sourceConfig = Objects.requireNonNull(sourceConfig, "expected parameter 'sourceConfig' to be non-null");
        this.state = state;
        this.streamId = Objects.requireNonNull(streamId, "expected parameter 'streamId' to be non-null");
        this.validateOnly = validateOnly;
    }

    private StreamArgs() {
        this.backfillAll = Codegen.empty();
        this.backfillNone = Codegen.empty();
        this.customerManagedEncryptionKey = Codegen.empty();
        this.destinationConfig = Codegen.empty();
        this.displayName = Codegen.empty();
        this.force = Codegen.empty();
        this.labels = Codegen.empty();
        this.location = Codegen.empty();
        this.project = Codegen.empty();
        this.requestId = Codegen.empty();
        this.sourceConfig = Codegen.empty();
        this.state = Codegen.empty();
        this.streamId = Codegen.empty();
        this.validateOnly = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BackfillAllStrategyArgs> backfillAll;
        private @Nullable Output<BackfillNoneStrategyArgs> backfillNone;
        private @Nullable Output<String> customerManagedEncryptionKey;
        private Output<DestinationConfigArgs> destinationConfig;
        private Output<String> displayName;
        private @Nullable Output<String> force;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private Output<SourceConfigArgs> sourceConfig;
        private @Nullable Output<StreamState> state;
        private Output<String> streamId;
        private @Nullable Output<String> validateOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(StreamArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backfillAll = defaults.backfillAll;
    	      this.backfillNone = defaults.backfillNone;
    	      this.customerManagedEncryptionKey = defaults.customerManagedEncryptionKey;
    	      this.destinationConfig = defaults.destinationConfig;
    	      this.displayName = defaults.displayName;
    	      this.force = defaults.force;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.sourceConfig = defaults.sourceConfig;
    	      this.state = defaults.state;
    	      this.streamId = defaults.streamId;
    	      this.validateOnly = defaults.validateOnly;
        }

        public Builder backfillAll(@Nullable Output<BackfillAllStrategyArgs> backfillAll) {
            this.backfillAll = backfillAll;
            return this;
        }
        public Builder backfillAll(@Nullable BackfillAllStrategyArgs backfillAll) {
            this.backfillAll = Codegen.ofNullable(backfillAll);
            return this;
        }
        public Builder backfillNone(@Nullable Output<BackfillNoneStrategyArgs> backfillNone) {
            this.backfillNone = backfillNone;
            return this;
        }
        public Builder backfillNone(@Nullable BackfillNoneStrategyArgs backfillNone) {
            this.backfillNone = Codegen.ofNullable(backfillNone);
            return this;
        }
        public Builder customerManagedEncryptionKey(@Nullable Output<String> customerManagedEncryptionKey) {
            this.customerManagedEncryptionKey = customerManagedEncryptionKey;
            return this;
        }
        public Builder customerManagedEncryptionKey(@Nullable String customerManagedEncryptionKey) {
            this.customerManagedEncryptionKey = Codegen.ofNullable(customerManagedEncryptionKey);
            return this;
        }
        public Builder destinationConfig(Output<DestinationConfigArgs> destinationConfig) {
            this.destinationConfig = Objects.requireNonNull(destinationConfig);
            return this;
        }
        public Builder destinationConfig(DestinationConfigArgs destinationConfig) {
            this.destinationConfig = Output.of(Objects.requireNonNull(destinationConfig));
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder force(@Nullable Output<String> force) {
            this.force = force;
            return this;
        }
        public Builder force(@Nullable String force) {
            this.force = Codegen.ofNullable(force);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }
        public Builder sourceConfig(Output<SourceConfigArgs> sourceConfig) {
            this.sourceConfig = Objects.requireNonNull(sourceConfig);
            return this;
        }
        public Builder sourceConfig(SourceConfigArgs sourceConfig) {
            this.sourceConfig = Output.of(Objects.requireNonNull(sourceConfig));
            return this;
        }
        public Builder state(@Nullable Output<StreamState> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable StreamState state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder streamId(Output<String> streamId) {
            this.streamId = Objects.requireNonNull(streamId);
            return this;
        }
        public Builder streamId(String streamId) {
            this.streamId = Output.of(Objects.requireNonNull(streamId));
            return this;
        }
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            this.validateOnly = validateOnly;
            return this;
        }
        public Builder validateOnly(@Nullable String validateOnly) {
            this.validateOnly = Codegen.ofNullable(validateOnly);
            return this;
        }        public StreamArgs build() {
            return new StreamArgs(backfillAll, backfillNone, customerManagedEncryptionKey, destinationConfig, displayName, force, labels, location, project, requestId, sourceConfig, state, streamId, validateOnly);
        }
    }
}
