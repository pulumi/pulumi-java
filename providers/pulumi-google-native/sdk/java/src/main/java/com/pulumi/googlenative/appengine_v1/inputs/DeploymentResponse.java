// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.appengine_v1.inputs.CloudBuildOptionsResponse;
import com.pulumi.googlenative.appengine_v1.inputs.ContainerInfoResponse;
import com.pulumi.googlenative.appengine_v1.inputs.ZipInfoResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Code and application artifacts used to deploy a version to App Engine.
 * 
 */
public final class DeploymentResponse extends com.pulumi.resources.InvokeArgs {

    public static final DeploymentResponse Empty = new DeploymentResponse();

    /**
     * Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
     * 
     */
    @Import(name="cloudBuildOptions", required=true)
    private CloudBuildOptionsResponse cloudBuildOptions;

    /**
     * @return Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
     * 
     */
    public CloudBuildOptionsResponse cloudBuildOptions() {
        return this.cloudBuildOptions;
    }

    /**
     * The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    @Import(name="container", required=true)
    private ContainerInfoResponse container;

    /**
     * @return The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    public ContainerInfoResponse container() {
        return this.container;
    }

    /**
     * Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
     * 
     */
    @Import(name="files", required=true)
    private Map<String,String> files;

    /**
     * @return Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
     * 
     */
    public Map<String,String> files() {
        return this.files;
    }

    /**
     * The zip file for this deployment, if this is a zip deployment.
     * 
     */
    @Import(name="zip", required=true)
    private ZipInfoResponse zip;

    /**
     * @return The zip file for this deployment, if this is a zip deployment.
     * 
     */
    public ZipInfoResponse zip() {
        return this.zip;
    }

    private DeploymentResponse() {}

    private DeploymentResponse(DeploymentResponse $) {
        this.cloudBuildOptions = $.cloudBuildOptions;
        this.container = $.container;
        this.files = $.files;
        this.zip = $.zip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentResponse $;

        public Builder() {
            $ = new DeploymentResponse();
        }

        public Builder(DeploymentResponse defaults) {
            $ = new DeploymentResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudBuildOptions Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
         * 
         * @return builder
         * 
         */
        public Builder cloudBuildOptions(CloudBuildOptionsResponse cloudBuildOptions) {
            $.cloudBuildOptions = cloudBuildOptions;
            return this;
        }

        /**
         * @param container The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
         * 
         * @return builder
         * 
         */
        public Builder container(ContainerInfoResponse container) {
            $.container = container;
            return this;
        }

        /**
         * @param files Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
         * 
         * @return builder
         * 
         */
        public Builder files(Map<String,String> files) {
            $.files = files;
            return this;
        }

        /**
         * @param zip The zip file for this deployment, if this is a zip deployment.
         * 
         * @return builder
         * 
         */
        public Builder zip(ZipInfoResponse zip) {
            $.zip = zip;
            return this;
        }

        public DeploymentResponse build() {
            $.cloudBuildOptions = Objects.requireNonNull($.cloudBuildOptions, "expected parameter 'cloudBuildOptions' to be non-null");
            $.container = Objects.requireNonNull($.container, "expected parameter 'container' to be non-null");
            $.files = Objects.requireNonNull($.files, "expected parameter 'files' to be non-null");
            $.zip = Objects.requireNonNull($.zip, "expected parameter 'zip' to be non-null");
            return $;
        }
    }

}
