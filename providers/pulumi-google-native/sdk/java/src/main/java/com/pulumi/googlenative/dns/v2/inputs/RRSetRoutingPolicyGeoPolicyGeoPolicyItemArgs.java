// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ResourceRecordSet data for one geo location.
 * 
 */
public final class RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs Empty = new RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs();

    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. &#34;us-east1&#34;, &#34;southamerica-east1&#34;, &#34;asia-east1&#34;, etc.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. &#34;us-east1&#34;, &#34;southamerica-east1&#34;, &#34;asia-east1&#34;, etc.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="rrdatas")
    private @Nullable Output<List<String>> rrdatas;

    public Optional<Output<List<String>>> rrdatas() {
        return Optional.ofNullable(this.rrdatas);
    }

    /**
     * DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there&#39;s a restriction of 1 ip per item. .
     * 
     */
    @Import(name="signatureRrdatas")
    private @Nullable Output<List<String>> signatureRrdatas;

    /**
     * @return DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there&#39;s a restriction of 1 ip per item. .
     * 
     */
    public Optional<Output<List<String>>> signatureRrdatas() {
        return Optional.ofNullable(this.signatureRrdatas);
    }

    private RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs() {}

    private RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs $) {
        this.kind = $.kind;
        this.location = $.location;
        this.rrdatas = $.rrdatas;
        this.signatureRrdatas = $.signatureRrdatas;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs $;

        public Builder() {
            $ = new RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs();
        }

        public Builder(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs defaults) {
            $ = new RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs(Objects.requireNonNull(defaults));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param location The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. &#34;us-east1&#34;, &#34;southamerica-east1&#34;, &#34;asia-east1&#34;, etc.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. &#34;us-east1&#34;, &#34;southamerica-east1&#34;, &#34;asia-east1&#34;, etc.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder rrdatas(@Nullable Output<List<String>> rrdatas) {
            $.rrdatas = rrdatas;
            return this;
        }

        public Builder rrdatas(List<String> rrdatas) {
            return rrdatas(Output.of(rrdatas));
        }

        public Builder rrdatas(String... rrdatas) {
            return rrdatas(List.of(rrdatas));
        }

        /**
         * @param signatureRrdatas DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there&#39;s a restriction of 1 ip per item. .
         * 
         * @return builder
         * 
         */
        public Builder signatureRrdatas(@Nullable Output<List<String>> signatureRrdatas) {
            $.signatureRrdatas = signatureRrdatas;
            return this;
        }

        /**
         * @param signatureRrdatas DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there&#39;s a restriction of 1 ip per item. .
         * 
         * @return builder
         * 
         */
        public Builder signatureRrdatas(List<String> signatureRrdatas) {
            return signatureRrdatas(Output.of(signatureRrdatas));
        }

        /**
         * @param signatureRrdatas DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there&#39;s a restriction of 1 ip per item. .
         * 
         * @return builder
         * 
         */
        public Builder signatureRrdatas(String... signatureRrdatas) {
            return signatureRrdatas(List.of(signatureRrdatas));
        }

        public RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs build() {
            return $;
        }
    }

}
