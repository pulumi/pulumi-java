// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * TrafficTarget holds a single entry of the routing table for a Route.
 * 
 */
public final class TrafficTargetResponse extends com.pulumi.resources.InvokeArgs {

    public static final TrafficTargetResponse Empty = new TrafficTargetResponse();

    /**
     * ConfigurationName of a configuration to whose latest revision we will send this portion of traffic. When the &#34;status.latestReadyRevisionName&#34; of the referenced configuration changes, we will automatically migrate traffic from the prior &#34;latest ready&#34; revision to the new one. This field is never set in Route&#39;s status, only its spec. This is mutually exclusive with RevisionName. Cloud Run currently supports a single ConfigurationName.
     * 
     */
    @Import(name="configurationName", required=true)
    private String configurationName;

    /**
     * @return ConfigurationName of a configuration to whose latest revision we will send this portion of traffic. When the &#34;status.latestReadyRevisionName&#34; of the referenced configuration changes, we will automatically migrate traffic from the prior &#34;latest ready&#34; revision to the new one. This field is never set in Route&#39;s status, only its spec. This is mutually exclusive with RevisionName. Cloud Run currently supports a single ConfigurationName.
     * 
     */
    public String configurationName() {
        return this.configurationName;
    }

    /**
     * Optional. LatestRevision may be provided to indicate that the latest ready Revision of the Configuration should be used for this traffic target. When provided LatestRevision must be true if RevisionName is empty; it must be false when RevisionName is non-empty.
     * 
     */
    @Import(name="latestRevision", required=true)
    private Boolean latestRevision;

    /**
     * @return Optional. LatestRevision may be provided to indicate that the latest ready Revision of the Configuration should be used for this traffic target. When provided LatestRevision must be true if RevisionName is empty; it must be false when RevisionName is non-empty.
     * 
     */
    public Boolean latestRevision() {
        return this.latestRevision;
    }

    /**
     * Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
     * 
     */
    @Import(name="percent", required=true)
    private Integer percent;

    /**
     * @return Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
     * 
     */
    public Integer percent() {
        return this.percent;
    }

    /**
     * RevisionName of a specific revision to which to send this portion of traffic. This is mutually exclusive with ConfigurationName.
     * 
     */
    @Import(name="revisionName", required=true)
    private String revisionName;

    /**
     * @return RevisionName of a specific revision to which to send this portion of traffic. This is mutually exclusive with ConfigurationName.
     * 
     */
    public String revisionName() {
        return this.revisionName;
    }

    /**
     * Optional. Tag is used to expose a dedicated url for referencing this target exclusively.
     * 
     */
    @Import(name="tag", required=true)
    private String tag;

    /**
     * @return Optional. Tag is used to expose a dedicated url for referencing this target exclusively.
     * 
     */
    public String tag() {
        return this.tag;
    }

    /**
     * URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. http://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
     * 
     */
    @Import(name="url", required=true)
    private String url;

    /**
     * @return URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. http://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
     * 
     */
    public String url() {
        return this.url;
    }

    private TrafficTargetResponse() {}

    private TrafficTargetResponse(TrafficTargetResponse $) {
        this.configurationName = $.configurationName;
        this.latestRevision = $.latestRevision;
        this.percent = $.percent;
        this.revisionName = $.revisionName;
        this.tag = $.tag;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficTargetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficTargetResponse $;

        public Builder() {
            $ = new TrafficTargetResponse();
        }

        public Builder(TrafficTargetResponse defaults) {
            $ = new TrafficTargetResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationName ConfigurationName of a configuration to whose latest revision we will send this portion of traffic. When the &#34;status.latestReadyRevisionName&#34; of the referenced configuration changes, we will automatically migrate traffic from the prior &#34;latest ready&#34; revision to the new one. This field is never set in Route&#39;s status, only its spec. This is mutually exclusive with RevisionName. Cloud Run currently supports a single ConfigurationName.
         * 
         * @return builder
         * 
         */
        public Builder configurationName(String configurationName) {
            $.configurationName = configurationName;
            return this;
        }

        /**
         * @param latestRevision Optional. LatestRevision may be provided to indicate that the latest ready Revision of the Configuration should be used for this traffic target. When provided LatestRevision must be true if RevisionName is empty; it must be false when RevisionName is non-empty.
         * 
         * @return builder
         * 
         */
        public Builder latestRevision(Boolean latestRevision) {
            $.latestRevision = latestRevision;
            return this;
        }

        /**
         * @param percent Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder percent(Integer percent) {
            $.percent = percent;
            return this;
        }

        /**
         * @param revisionName RevisionName of a specific revision to which to send this portion of traffic. This is mutually exclusive with ConfigurationName.
         * 
         * @return builder
         * 
         */
        public Builder revisionName(String revisionName) {
            $.revisionName = revisionName;
            return this;
        }

        /**
         * @param tag Optional. Tag is used to expose a dedicated url for referencing this target exclusively.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param url URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. http://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public TrafficTargetResponse build() {
            $.configurationName = Objects.requireNonNull($.configurationName, "expected parameter 'configurationName' to be non-null");
            $.latestRevision = Objects.requireNonNull($.latestRevision, "expected parameter 'latestRevision' to be non-null");
            $.percent = Objects.requireNonNull($.percent, "expected parameter 'percent' to be non-null");
            $.revisionName = Objects.requireNonNull($.revisionName, "expected parameter 'revisionName' to be non-null");
            $.tag = Objects.requireNonNull($.tag, "expected parameter 'tag' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
