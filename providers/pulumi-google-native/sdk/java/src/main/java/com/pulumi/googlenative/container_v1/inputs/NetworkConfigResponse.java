// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.DNSConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.DefaultSnatStatusResponse;
import com.pulumi.googlenative.container_v1.inputs.ServiceExternalIPsConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * NetworkConfig reports the relative names of network &amp; subnetwork.
 * 
 */
public final class NetworkConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkConfigResponse Empty = new NetworkConfigResponse();

    /**
     * The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
     * 
     */
    @Import(name="datapathProvider", required=true)
    private String datapathProvider;

    public String datapathProvider() {
        return this.datapathProvider;
    }

    /**
     * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
     * 
     */
    @Import(name="defaultSnatStatus", required=true)
    private DefaultSnatStatusResponse defaultSnatStatus;

    public DefaultSnatStatusResponse defaultSnatStatus() {
        return this.defaultSnatStatus;
    }

    /**
     * DNSConfig contains clusterDNS config for this cluster.
     * 
     */
    @Import(name="dnsConfig", required=true)
    private DNSConfigResponse dnsConfig;

    public DNSConfigResponse dnsConfig() {
        return this.dnsConfig;
    }

    /**
     * Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
     * 
     */
    @Import(name="enableIntraNodeVisibility", required=true)
    private Boolean enableIntraNodeVisibility;

    public Boolean enableIntraNodeVisibility() {
        return this.enableIntraNodeVisibility;
    }

    /**
     * Whether L4ILB Subsetting is enabled for this cluster.
     * 
     */
    @Import(name="enableL4ilbSubsetting", required=true)
    private Boolean enableL4ilbSubsetting;

    public Boolean enableL4ilbSubsetting() {
        return this.enableL4ilbSubsetting;
    }

    /**
     * The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
     * 
     */
    @Import(name="privateIpv6GoogleAccess", required=true)
    private String privateIpv6GoogleAccess;

    public String privateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }

    /**
     * ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
     * 
     */
    @Import(name="serviceExternalIpsConfig", required=true)
    private ServiceExternalIPsConfigResponse serviceExternalIpsConfig;

    public ServiceExternalIPsConfigResponse serviceExternalIpsConfig() {
        return this.serviceExternalIpsConfig;
    }

    /**
     * The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
     * 
     */
    @Import(name="subnetwork", required=true)
    private String subnetwork;

    public String subnetwork() {
        return this.subnetwork;
    }

    private NetworkConfigResponse() {}

    private NetworkConfigResponse(NetworkConfigResponse $) {
        this.datapathProvider = $.datapathProvider;
        this.defaultSnatStatus = $.defaultSnatStatus;
        this.dnsConfig = $.dnsConfig;
        this.enableIntraNodeVisibility = $.enableIntraNodeVisibility;
        this.enableL4ilbSubsetting = $.enableL4ilbSubsetting;
        this.network = $.network;
        this.privateIpv6GoogleAccess = $.privateIpv6GoogleAccess;
        this.serviceExternalIpsConfig = $.serviceExternalIpsConfig;
        this.subnetwork = $.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConfigResponse $;

        public Builder() {
            $ = new NetworkConfigResponse();
        }

        public Builder(NetworkConfigResponse defaults) {
            $ = new NetworkConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder datapathProvider(String datapathProvider) {
            $.datapathProvider = datapathProvider;
            return this;
        }

        public Builder defaultSnatStatus(DefaultSnatStatusResponse defaultSnatStatus) {
            $.defaultSnatStatus = defaultSnatStatus;
            return this;
        }

        public Builder dnsConfig(DNSConfigResponse dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        public Builder enableIntraNodeVisibility(Boolean enableIntraNodeVisibility) {
            $.enableIntraNodeVisibility = enableIntraNodeVisibility;
            return this;
        }

        public Builder enableL4ilbSubsetting(Boolean enableL4ilbSubsetting) {
            $.enableL4ilbSubsetting = enableL4ilbSubsetting;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder privateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            $.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            return this;
        }

        public Builder serviceExternalIpsConfig(ServiceExternalIPsConfigResponse serviceExternalIpsConfig) {
            $.serviceExternalIpsConfig = serviceExternalIpsConfig;
            return this;
        }

        public Builder subnetwork(String subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        public NetworkConfigResponse build() {
            $.datapathProvider = Objects.requireNonNull($.datapathProvider, "expected parameter 'datapathProvider' to be non-null");
            $.defaultSnatStatus = Objects.requireNonNull($.defaultSnatStatus, "expected parameter 'defaultSnatStatus' to be non-null");
            $.dnsConfig = Objects.requireNonNull($.dnsConfig, "expected parameter 'dnsConfig' to be non-null");
            $.enableIntraNodeVisibility = Objects.requireNonNull($.enableIntraNodeVisibility, "expected parameter 'enableIntraNodeVisibility' to be non-null");
            $.enableL4ilbSubsetting = Objects.requireNonNull($.enableL4ilbSubsetting, "expected parameter 'enableL4ilbSubsetting' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.privateIpv6GoogleAccess = Objects.requireNonNull($.privateIpv6GoogleAccess, "expected parameter 'privateIpv6GoogleAccess' to be non-null");
            $.serviceExternalIpsConfig = Objects.requireNonNull($.serviceExternalIpsConfig, "expected parameter 'serviceExternalIpsConfig' to be non-null");
            $.subnetwork = Objects.requireNonNull($.subnetwork, "expected parameter 'subnetwork' to be non-null");
            return $;
        }
    }

}
