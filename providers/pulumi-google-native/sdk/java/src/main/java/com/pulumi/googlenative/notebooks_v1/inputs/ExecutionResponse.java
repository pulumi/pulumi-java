// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.notebooks_v1.inputs.ExecutionTemplateResponse;
import java.lang.String;
import java.util.Objects;


/**
 * The definition of a single executed notebook.
 * 
 */
public final class ExecutionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExecutionResponse Empty = new ExecutionResponse();

    /**
     * Time the Execution was instantiated.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return Time the Execution was instantiated.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * A brief description of this execution.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return A brief description of this execution.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * Name used for UI purposes. Name can only contain alphanumeric characters and underscores &#39;_&#39;.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return Name used for UI purposes. Name can only contain alphanumeric characters and underscores &#39;_&#39;.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * execute metadata including name, hardware spec, region, labels, etc.
     * 
     */
    @Import(name="executionTemplate", required=true)
    private ExecutionTemplateResponse executionTemplate;

    /**
     * @return execute metadata including name, hardware spec, region, labels, etc.
     * 
     */
    public ExecutionTemplateResponse executionTemplate() {
        return this.executionTemplate;
    }

    /**
     * The URI of the external job used to execute the notebook.
     * 
     */
    @Import(name="jobUri", required=true)
    private String jobUri;

    /**
     * @return The URI of the external job used to execute the notebook.
     * 
     */
    public String jobUri() {
        return this.jobUri;
    }

    /**
     * The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Output notebook file generated by this execution
     * 
     */
    @Import(name="outputNotebookFile", required=true)
    private String outputNotebookFile;

    /**
     * @return Output notebook file generated by this execution
     * 
     */
    public String outputNotebookFile() {
        return this.outputNotebookFile;
    }

    /**
     * State of the underlying AI Platform job.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return State of the underlying AI Platform job.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Time the Execution was last updated.
     * 
     */
    @Import(name="updateTime", required=true)
    private String updateTime;

    /**
     * @return Time the Execution was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    private ExecutionResponse() {}

    private ExecutionResponse(ExecutionResponse $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.executionTemplate = $.executionTemplate;
        this.jobUri = $.jobUri;
        this.name = $.name;
        this.outputNotebookFile = $.outputNotebookFile;
        this.state = $.state;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecutionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecutionResponse $;

        public Builder() {
            $ = new ExecutionResponse();
        }

        public Builder(ExecutionResponse defaults) {
            $ = new ExecutionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Time the Execution was instantiated.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param description A brief description of this execution.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param displayName Name used for UI purposes. Name can only contain alphanumeric characters and underscores &#39;_&#39;.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param executionTemplate execute metadata including name, hardware spec, region, labels, etc.
         * 
         * @return builder
         * 
         */
        public Builder executionTemplate(ExecutionTemplateResponse executionTemplate) {
            $.executionTemplate = executionTemplate;
            return this;
        }

        /**
         * @param jobUri The URI of the external job used to execute the notebook.
         * 
         * @return builder
         * 
         */
        public Builder jobUri(String jobUri) {
            $.jobUri = jobUri;
            return this;
        }

        /**
         * @param name The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param outputNotebookFile Output notebook file generated by this execution
         * 
         * @return builder
         * 
         */
        public Builder outputNotebookFile(String outputNotebookFile) {
            $.outputNotebookFile = outputNotebookFile;
            return this;
        }

        /**
         * @param state State of the underlying AI Platform job.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param updateTime Time the Execution was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public ExecutionResponse build() {
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.executionTemplate = Objects.requireNonNull($.executionTemplate, "expected parameter 'executionTemplate' to be non-null");
            $.jobUri = Objects.requireNonNull($.jobUri, "expected parameter 'jobUri' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.outputNotebookFile = Objects.requireNonNull($.outputNotebookFile, "expected parameter 'outputNotebookFile' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
