// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ManagedZoneForwardingConfigNameServerTargetResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedZoneForwardingConfigNameServerTargetResponse Empty = new ManagedZoneForwardingConfigNameServerTargetResponse();

    /**
     * Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
     * 
     */
    @Import(name="forwardingPath", required=true)
    private String forwardingPath;

    /**
     * @return Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
     * 
     */
    public String forwardingPath() {
        return this.forwardingPath;
    }

    /**
     * IPv4 address of a target name server.
     * 
     */
    @Import(name="ipv4Address", required=true)
    private String ipv4Address;

    /**
     * @return IPv4 address of a target name server.
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    /**
     * IPv6 address of a target name server. Does not accept both fields (ipv4 &amp; ipv6) being populated.
     * 
     */
    @Import(name="ipv6Address", required=true)
    private String ipv6Address;

    /**
     * @return IPv6 address of a target name server. Does not accept both fields (ipv4 &amp; ipv6) being populated.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }

    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    private ManagedZoneForwardingConfigNameServerTargetResponse() {}

    private ManagedZoneForwardingConfigNameServerTargetResponse(ManagedZoneForwardingConfigNameServerTargetResponse $) {
        this.forwardingPath = $.forwardingPath;
        this.ipv4Address = $.ipv4Address;
        this.ipv6Address = $.ipv6Address;
        this.kind = $.kind;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZoneForwardingConfigNameServerTargetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZoneForwardingConfigNameServerTargetResponse $;

        public Builder() {
            $ = new ManagedZoneForwardingConfigNameServerTargetResponse();
        }

        public Builder(ManagedZoneForwardingConfigNameServerTargetResponse defaults) {
            $ = new ManagedZoneForwardingConfigNameServerTargetResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param forwardingPath Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
         * 
         * @return builder
         * 
         */
        public Builder forwardingPath(String forwardingPath) {
            $.forwardingPath = forwardingPath;
            return this;
        }

        /**
         * @param ipv4Address IPv4 address of a target name server.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(String ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        /**
         * @param ipv6Address IPv6 address of a target name server. Does not accept both fields (ipv4 &amp; ipv6) being populated.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public ManagedZoneForwardingConfigNameServerTargetResponse build() {
            $.forwardingPath = Objects.requireNonNull($.forwardingPath, "expected parameter 'forwardingPath' to be non-null");
            $.ipv4Address = Objects.requireNonNull($.ipv4Address, "expected parameter 'ipv4Address' to be non-null");
            $.ipv6Address = Objects.requireNonNull($.ipv6Address, "expected parameter 'ipv6Address' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            return $;
        }
    }

}
