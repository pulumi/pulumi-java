// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration.v1alpha1.enums.TargetVMDetailsDiskType;
import com.pulumi.googlenative.vmmigration.v1alpha1.enums.TargetVMDetailsLicenseType;
import com.pulumi.googlenative.vmmigration.v1alpha1.inputs.ComputeSchedulingArgs;
import com.pulumi.googlenative.vmmigration.v1alpha1.inputs.NetworkInterfaceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 * 
 */
public final class TargetVMDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetVMDetailsArgs Empty = new TargetVMDetailsArgs();

    /**
     * Compute instance scheduling information (if empty default is used).
     * 
     */
    @Import(name="computeScheduling")
    private @Nullable Output<ComputeSchedulingArgs> computeScheduling;

    /**
     * @return Compute instance scheduling information (if empty default is used).
     * 
     */
    public Optional<Output<ComputeSchedulingArgs>> computeScheduling() {
        return Optional.ofNullable(this.computeScheduling);
    }

    /**
     * The disk type to use in the VM.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<TargetVMDetailsDiskType> diskType;

    /**
     * @return The disk type to use in the VM.
     * 
     */
    public Optional<Output<TargetVMDetailsDiskType>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * The external IP to define in the VM.
     * 
     */
    @Import(name="externalIp")
    private @Nullable Output<String> externalIp;

    /**
     * @return The external IP to define in the VM.
     * 
     */
    public Optional<Output<String>> externalIp() {
        return Optional.ofNullable(this.externalIp);
    }

    /**
     * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     * 
     */
    @Import(name="internalIp")
    private @Nullable Output<String> internalIp;

    /**
     * @return The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     * 
     */
    public Optional<Output<String>> internalIp() {
        return Optional.ofNullable(this.internalIp);
    }

    /**
     * A map of labels to associate with the VM.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A map of labels to associate with the VM.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The license type to use in OS adaptation.
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<TargetVMDetailsLicenseType> licenseType;

    /**
     * @return The license type to use in OS adaptation.
     * 
     */
    public Optional<Output<TargetVMDetailsLicenseType>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The machine type to create the VM with.
     * 
     */
    @Import(name="machineType")
    private @Nullable Output<String> machineType;

    /**
     * @return The machine type to create the VM with.
     * 
     */
    public Optional<Output<String>> machineType() {
        return Optional.ofNullable(this.machineType);
    }

    /**
     * The machine type series to create the VM with.
     * 
     */
    @Import(name="machineTypeSeries")
    private @Nullable Output<String> machineTypeSeries;

    /**
     * @return The machine type series to create the VM with.
     * 
     */
    public Optional<Output<String>> machineTypeSeries() {
        return Optional.ofNullable(this.machineTypeSeries);
    }

    /**
     * The metadata key/value pairs to assign to the VM.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return The metadata key/value pairs to assign to the VM.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the VM to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VM to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network to connect the VM to.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The network to connect the VM to.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * List of NICs connected to this VM.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<NetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return List of NICs connected to this VM.
     * 
     */
    public Optional<Output<List<NetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * A map of network tags to associate with the VM.
     * 
     */
    @Import(name="networkTags")
    private @Nullable Output<List<String>> networkTags;

    /**
     * @return A map of network tags to associate with the VM.
     * 
     */
    public Optional<Output<List<String>>> networkTags() {
        return Optional.ofNullable(this.networkTags);
    }

    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     * 
     */
    @Import(name="secureBoot")
    private @Nullable Output<Boolean> secureBoot;

    /**
     * @return Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     * 
     */
    public Optional<Output<Boolean>> secureBoot() {
        return Optional.ofNullable(this.secureBoot);
    }

    /**
     * The service account to associate the VM with.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return The service account to associate the VM with.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * The subnetwork to connect the VM to.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return The subnetwork to connect the VM to.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     * 
     */
    @Import(name="targetProject")
    private @Nullable Output<String> targetProject;

    /**
     * @return The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     * 
     */
    public Optional<Output<String>> targetProject() {
        return Optional.ofNullable(this.targetProject);
    }

    /**
     * The zone in which to create the VM.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone in which to create the VM.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private TargetVMDetailsArgs() {}

    private TargetVMDetailsArgs(TargetVMDetailsArgs $) {
        this.computeScheduling = $.computeScheduling;
        this.diskType = $.diskType;
        this.externalIp = $.externalIp;
        this.internalIp = $.internalIp;
        this.labels = $.labels;
        this.licenseType = $.licenseType;
        this.machineType = $.machineType;
        this.machineTypeSeries = $.machineTypeSeries;
        this.metadata = $.metadata;
        this.name = $.name;
        this.network = $.network;
        this.networkInterfaces = $.networkInterfaces;
        this.networkTags = $.networkTags;
        this.secureBoot = $.secureBoot;
        this.serviceAccount = $.serviceAccount;
        this.subnetwork = $.subnetwork;
        this.targetProject = $.targetProject;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetVMDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetVMDetailsArgs $;

        public Builder() {
            $ = new TargetVMDetailsArgs();
        }

        public Builder(TargetVMDetailsArgs defaults) {
            $ = new TargetVMDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeScheduling Compute instance scheduling information (if empty default is used).
         * 
         * @return builder
         * 
         */
        public Builder computeScheduling(@Nullable Output<ComputeSchedulingArgs> computeScheduling) {
            $.computeScheduling = computeScheduling;
            return this;
        }

        /**
         * @param computeScheduling Compute instance scheduling information (if empty default is used).
         * 
         * @return builder
         * 
         */
        public Builder computeScheduling(ComputeSchedulingArgs computeScheduling) {
            return computeScheduling(Output.of(computeScheduling));
        }

        /**
         * @param diskType The disk type to use in the VM.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<TargetVMDetailsDiskType> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType The disk type to use in the VM.
         * 
         * @return builder
         * 
         */
        public Builder diskType(TargetVMDetailsDiskType diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param externalIp The external IP to define in the VM.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(@Nullable Output<String> externalIp) {
            $.externalIp = externalIp;
            return this;
        }

        /**
         * @param externalIp The external IP to define in the VM.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(String externalIp) {
            return externalIp(Output.of(externalIp));
        }

        /**
         * @param internalIp The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(@Nullable Output<String> internalIp) {
            $.internalIp = internalIp;
            return this;
        }

        /**
         * @param internalIp The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(String internalIp) {
            return internalIp(Output.of(internalIp));
        }

        /**
         * @param labels A map of labels to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A map of labels to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param licenseType The license type to use in OS adaptation.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable Output<TargetVMDetailsLicenseType> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType The license type to use in OS adaptation.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(TargetVMDetailsLicenseType licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param machineType The machine type to create the VM with.
         * 
         * @return builder
         * 
         */
        public Builder machineType(@Nullable Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineType The machine type to create the VM with.
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        /**
         * @param machineTypeSeries The machine type series to create the VM with.
         * 
         * @return builder
         * 
         */
        public Builder machineTypeSeries(@Nullable Output<String> machineTypeSeries) {
            $.machineTypeSeries = machineTypeSeries;
            return this;
        }

        /**
         * @param machineTypeSeries The machine type series to create the VM with.
         * 
         * @return builder
         * 
         */
        public Builder machineTypeSeries(String machineTypeSeries) {
            return machineTypeSeries(Output.of(machineTypeSeries));
        }

        /**
         * @param metadata The metadata key/value pairs to assign to the VM.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata The metadata key/value pairs to assign to the VM.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The name of the VM to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VM to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The network to connect the VM to.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network to connect the VM to.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param networkInterfaces List of NICs connected to this VM.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<NetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces List of NICs connected to this VM.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<NetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces List of NICs connected to this VM.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(NetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param networkTags A map of network tags to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(@Nullable Output<List<String>> networkTags) {
            $.networkTags = networkTags;
            return this;
        }

        /**
         * @param networkTags A map of network tags to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(List<String> networkTags) {
            return networkTags(Output.of(networkTags));
        }

        /**
         * @param networkTags A map of network tags to associate with the VM.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }

        /**
         * @param secureBoot Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
         * 
         * @return builder
         * 
         */
        public Builder secureBoot(@Nullable Output<Boolean> secureBoot) {
            $.secureBoot = secureBoot;
            return this;
        }

        /**
         * @param secureBoot Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
         * 
         * @return builder
         * 
         */
        public Builder secureBoot(Boolean secureBoot) {
            return secureBoot(Output.of(secureBoot));
        }

        /**
         * @param serviceAccount The service account to associate the VM with.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount The service account to associate the VM with.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param subnetwork The subnetwork to connect the VM to.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork The subnetwork to connect the VM to.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param targetProject The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
         * 
         * @return builder
         * 
         */
        public Builder targetProject(@Nullable Output<String> targetProject) {
            $.targetProject = targetProject;
            return this;
        }

        /**
         * @param targetProject The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
         * 
         * @return builder
         * 
         */
        public Builder targetProject(String targetProject) {
            return targetProject(Output.of(targetProject));
        }

        /**
         * @param zone The zone in which to create the VM.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone in which to create the VM.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public TargetVMDetailsArgs build() {
            return $;
        }
    }

}
