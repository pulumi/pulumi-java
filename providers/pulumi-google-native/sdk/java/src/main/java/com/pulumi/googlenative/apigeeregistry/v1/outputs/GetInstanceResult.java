// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigeeregistry.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.apigeeregistry.v1.outputs.ConfigResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return Config of the Instance.
     * 
     */
    private final ConfigResponse config;
    /**
     * @return Creation timestamp.
     * 
     */
    private final String createTime;
    /**
     * @return Format: `projects/*{@literal /}locations/*{@literal /}instance`. Currently only locations/global is supported.
     * 
     */
    private final String name;
    /**
     * @return The current state of the Instance.
     * 
     */
    private final String state;
    /**
     * @return Extra information of Instance.State if the state is `FAILED`.
     * 
     */
    private final String stateMessage;
    /**
     * @return Last update timestamp.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetInstanceResult(
        @CustomType.Parameter("config") ConfigResponse config,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("stateMessage") String stateMessage,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.config = config;
        this.createTime = createTime;
        this.name = name;
        this.state = state;
        this.stateMessage = stateMessage;
        this.updateTime = updateTime;
    }

    /**
     * @return Config of the Instance.
     * 
     */
    public ConfigResponse config() {
        return this.config;
    }
    /**
     * @return Creation timestamp.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Format: `projects/*{@literal /}locations/*{@literal /}instance`. Currently only locations/global is supported.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current state of the Instance.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Extra information of Instance.State if the state is `FAILED`.
     * 
     */
    public String stateMessage() {
        return this.stateMessage;
    }
    /**
     * @return Last update timestamp.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigResponse config;
        private String createTime;
        private String name;
        private String state;
        private String stateMessage;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder config(ConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder stateMessage(String stateMessage) {
            this.stateMessage = Objects.requireNonNull(stateMessage);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetInstanceResult build() {
            return new GetInstanceResult(config, createTime, name, state, stateMessage, updateTime);
        }
    }
}
