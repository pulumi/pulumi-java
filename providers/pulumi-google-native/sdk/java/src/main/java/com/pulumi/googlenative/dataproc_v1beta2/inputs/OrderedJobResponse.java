// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.HadoopJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.HiveJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.JobSchedulingResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.PigJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.PrestoJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.PySparkJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.SparkJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.SparkRJobResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.SparkSqlJobResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * A job executed by the workflow.
 * 
 */
public final class OrderedJobResponse extends com.pulumi.resources.InvokeArgs {

    public static final OrderedJobResponse Empty = new OrderedJobResponse();

    /**
     * Optional. Job is a Hadoop job.
     * 
     */
    @Import(name="hadoopJob", required=true)
    private HadoopJobResponse hadoopJob;

    public HadoopJobResponse hadoopJob() {
        return this.hadoopJob;
    }

    /**
     * Optional. Job is a Hive job.
     * 
     */
    @Import(name="hiveJob", required=true)
    private HiveJobResponse hiveJob;

    public HiveJobResponse hiveJob() {
        return this.hiveJob;
    }

    /**
     * Optional. The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 32 labels can be associated with a given job.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * Optional. Job is a Pig job.
     * 
     */
    @Import(name="pigJob", required=true)
    private PigJobResponse pigJob;

    public PigJobResponse pigJob() {
        return this.pigJob;
    }

    /**
     * Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
     * 
     */
    @Import(name="prerequisiteStepIds", required=true)
    private List<String> prerequisiteStepIds;

    public List<String> prerequisiteStepIds() {
        return this.prerequisiteStepIds;
    }

    /**
     * Optional. Job is a Presto job.
     * 
     */
    @Import(name="prestoJob", required=true)
    private PrestoJobResponse prestoJob;

    public PrestoJobResponse prestoJob() {
        return this.prestoJob;
    }

    /**
     * Optional. Job is a PySpark job.
     * 
     */
    @Import(name="pysparkJob", required=true)
    private PySparkJobResponse pysparkJob;

    public PySparkJobResponse pysparkJob() {
        return this.pysparkJob;
    }

    /**
     * Optional. Job scheduling configuration.
     * 
     */
    @Import(name="scheduling", required=true)
    private JobSchedulingResponse scheduling;

    public JobSchedulingResponse scheduling() {
        return this.scheduling;
    }

    /**
     * Optional. Job is a Spark job.
     * 
     */
    @Import(name="sparkJob", required=true)
    private SparkJobResponse sparkJob;

    public SparkJobResponse sparkJob() {
        return this.sparkJob;
    }

    /**
     * Optional. Job is a SparkR job.
     * 
     */
    @Import(name="sparkRJob", required=true)
    private SparkRJobResponse sparkRJob;

    public SparkRJobResponse sparkRJob() {
        return this.sparkRJob;
    }

    /**
     * Optional. Job is a SparkSql job.
     * 
     */
    @Import(name="sparkSqlJob", required=true)
    private SparkSqlJobResponse sparkSqlJob;

    public SparkSqlJobResponse sparkSqlJob() {
        return this.sparkSqlJob;
    }

    /**
     * The step id. The id must be unique among all jobs within the template.The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in prerequisiteStepIds field from other steps.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
     * 
     */
    @Import(name="stepId", required=true)
    private String stepId;

    public String stepId() {
        return this.stepId;
    }

    private OrderedJobResponse() {}

    private OrderedJobResponse(OrderedJobResponse $) {
        this.hadoopJob = $.hadoopJob;
        this.hiveJob = $.hiveJob;
        this.labels = $.labels;
        this.pigJob = $.pigJob;
        this.prerequisiteStepIds = $.prerequisiteStepIds;
        this.prestoJob = $.prestoJob;
        this.pysparkJob = $.pysparkJob;
        this.scheduling = $.scheduling;
        this.sparkJob = $.sparkJob;
        this.sparkRJob = $.sparkRJob;
        this.sparkSqlJob = $.sparkSqlJob;
        this.stepId = $.stepId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrderedJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrderedJobResponse $;

        public Builder() {
            $ = new OrderedJobResponse();
        }

        public Builder(OrderedJobResponse defaults) {
            $ = new OrderedJobResponse(Objects.requireNonNull(defaults));
        }

        public Builder hadoopJob(HadoopJobResponse hadoopJob) {
            $.hadoopJob = hadoopJob;
            return this;
        }

        public Builder hiveJob(HiveJobResponse hiveJob) {
            $.hiveJob = hiveJob;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        public Builder pigJob(PigJobResponse pigJob) {
            $.pigJob = pigJob;
            return this;
        }

        public Builder prerequisiteStepIds(List<String> prerequisiteStepIds) {
            $.prerequisiteStepIds = prerequisiteStepIds;
            return this;
        }

        public Builder prerequisiteStepIds(String... prerequisiteStepIds) {
            return prerequisiteStepIds(List.of(prerequisiteStepIds));
        }

        public Builder prestoJob(PrestoJobResponse prestoJob) {
            $.prestoJob = prestoJob;
            return this;
        }

        public Builder pysparkJob(PySparkJobResponse pysparkJob) {
            $.pysparkJob = pysparkJob;
            return this;
        }

        public Builder scheduling(JobSchedulingResponse scheduling) {
            $.scheduling = scheduling;
            return this;
        }

        public Builder sparkJob(SparkJobResponse sparkJob) {
            $.sparkJob = sparkJob;
            return this;
        }

        public Builder sparkRJob(SparkRJobResponse sparkRJob) {
            $.sparkRJob = sparkRJob;
            return this;
        }

        public Builder sparkSqlJob(SparkSqlJobResponse sparkSqlJob) {
            $.sparkSqlJob = sparkSqlJob;
            return this;
        }

        public Builder stepId(String stepId) {
            $.stepId = stepId;
            return this;
        }

        public OrderedJobResponse build() {
            $.hadoopJob = Objects.requireNonNull($.hadoopJob, "expected parameter 'hadoopJob' to be non-null");
            $.hiveJob = Objects.requireNonNull($.hiveJob, "expected parameter 'hiveJob' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.pigJob = Objects.requireNonNull($.pigJob, "expected parameter 'pigJob' to be non-null");
            $.prerequisiteStepIds = Objects.requireNonNull($.prerequisiteStepIds, "expected parameter 'prerequisiteStepIds' to be non-null");
            $.prestoJob = Objects.requireNonNull($.prestoJob, "expected parameter 'prestoJob' to be non-null");
            $.pysparkJob = Objects.requireNonNull($.pysparkJob, "expected parameter 'pysparkJob' to be non-null");
            $.scheduling = Objects.requireNonNull($.scheduling, "expected parameter 'scheduling' to be non-null");
            $.sparkJob = Objects.requireNonNull($.sparkJob, "expected parameter 'sparkJob' to be non-null");
            $.sparkRJob = Objects.requireNonNull($.sparkRJob, "expected parameter 'sparkRJob' to be non-null");
            $.sparkSqlJob = Objects.requireNonNull($.sparkSqlJob, "expected parameter 'sparkSqlJob' to be non-null");
            $.stepId = Objects.requireNonNull($.stepId, "expected parameter 'stepId' to be non-null");
            return $;
        }
    }

}
