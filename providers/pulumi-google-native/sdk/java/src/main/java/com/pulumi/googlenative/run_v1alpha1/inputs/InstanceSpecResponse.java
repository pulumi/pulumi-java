// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1alpha1.inputs.ContainerResponse;
import com.pulumi.googlenative.run_v1alpha1.inputs.VolumeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * InstanceSpec is a description of an instance.
 * 
 */
public final class InstanceSpecResponse extends com.pulumi.resources.InvokeArgs {

    public static final InstanceSpecResponse Empty = new InstanceSpecResponse();

    /**
     * Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
     * 
     */
    @Import(name="activeDeadlineSeconds", required=true)
    private String activeDeadlineSeconds;

    public String activeDeadlineSeconds() {
        return this.activeDeadlineSeconds;
    }

    /**
     * Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
     * 
     */
    @Import(name="containers", required=true)
    private List<ContainerResponse> containers;

    public List<ContainerResponse> containers() {
        return this.containers;
    }

    /**
     * Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
     * 
     */
    @Import(name="restartPolicy", required=true)
    private String restartPolicy;

    public String restartPolicy() {
        return this.restartPolicy;
    }

    /**
     * Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project&#39;s default service account. +optional
     * 
     */
    @Import(name="serviceAccountName", required=true)
    private String serviceAccountName;

    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    /**
     * Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
     * 
     */
    @Import(name="terminationGracePeriodSeconds", required=true)
    private String terminationGracePeriodSeconds;

    public String terminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds;
    }

    /**
     * Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
     * 
     */
    @Import(name="volumes", required=true)
    private List<VolumeResponse> volumes;

    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    private InstanceSpecResponse() {}

    private InstanceSpecResponse(InstanceSpecResponse $) {
        this.activeDeadlineSeconds = $.activeDeadlineSeconds;
        this.containers = $.containers;
        this.restartPolicy = $.restartPolicy;
        this.serviceAccountName = $.serviceAccountName;
        this.terminationGracePeriodSeconds = $.terminationGracePeriodSeconds;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceSpecResponse $;

        public Builder() {
            $ = new InstanceSpecResponse();
        }

        public Builder(InstanceSpecResponse defaults) {
            $ = new InstanceSpecResponse(Objects.requireNonNull(defaults));
        }

        public Builder activeDeadlineSeconds(String activeDeadlineSeconds) {
            $.activeDeadlineSeconds = activeDeadlineSeconds;
            return this;
        }

        public Builder containers(List<ContainerResponse> containers) {
            $.containers = containers;
            return this;
        }

        public Builder containers(ContainerResponse... containers) {
            return containers(List.of(containers));
        }

        public Builder restartPolicy(String restartPolicy) {
            $.restartPolicy = restartPolicy;
            return this;
        }

        public Builder serviceAccountName(String serviceAccountName) {
            $.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder terminationGracePeriodSeconds(String terminationGracePeriodSeconds) {
            $.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        public Builder volumes(List<VolumeResponse> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }

        public InstanceSpecResponse build() {
            $.activeDeadlineSeconds = Objects.requireNonNull($.activeDeadlineSeconds, "expected parameter 'activeDeadlineSeconds' to be non-null");
            $.containers = Objects.requireNonNull($.containers, "expected parameter 'containers' to be non-null");
            $.restartPolicy = Objects.requireNonNull($.restartPolicy, "expected parameter 'restartPolicy' to be non-null");
            $.serviceAccountName = Objects.requireNonNull($.serviceAccountName, "expected parameter 'serviceAccountName' to be non-null");
            $.terminationGracePeriodSeconds = Objects.requireNonNull($.terminationGracePeriodSeconds, "expected parameter 'terminationGracePeriodSeconds' to be non-null");
            $.volumes = Objects.requireNonNull($.volumes, "expected parameter 'volumes' to be non-null");
            return $;
        }
    }

}
