// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v3.enums.MetricThresholdComparison;
import com.pulumi.googlenative.monitoring.v3.enums.MetricThresholdEvaluationMissingData;
import com.pulumi.googlenative.monitoring.v3.inputs.AggregationArgs;
import com.pulumi.googlenative.monitoring.v3.inputs.TriggerArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A condition type that compares a collection of time series against a threshold.
 * 
 */
public final class MetricThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricThresholdArgs Empty = new MetricThresholdArgs();

    /**
     * Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
     * 
     */
    @Import(name="aggregations")
    private @Nullable Output<List<AggregationArgs>> aggregations;

    /**
     * @return Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
     * 
     */
    public Optional<Output<List<AggregationArgs>>> aggregations() {
        return Optional.ofNullable(this.aggregations);
    }

    /**
     * The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
     * 
     */
    @Import(name="comparison")
    private @Nullable Output<MetricThresholdComparison> comparison;

    /**
     * @return The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
     * 
     */
    public Optional<Output<MetricThresholdComparison>> comparison() {
        return Optional.ofNullable(this.comparison);
    }

    /**
     * Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
     * 
     */
    @Import(name="denominatorAggregations")
    private @Nullable Output<List<AggregationArgs>> denominatorAggregations;

    /**
     * @return Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
     * 
     */
    public Optional<Output<List<AggregationArgs>>> denominatorAggregations() {
        return Optional.ofNullable(this.denominatorAggregations);
    }

    /**
     * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
     * 
     */
    @Import(name="denominatorFilter")
    private @Nullable Output<String> denominatorFilter;

    /**
     * @return A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
     * 
     */
    public Optional<Output<String>> denominatorFilter() {
        return Optional.ofNullable(this.denominatorFilter);
    }

    /**
     * The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
     * 
     */
    @Import(name="evaluationMissingData")
    private @Nullable Output<MetricThresholdEvaluationMissingData> evaluationMissingData;

    /**
     * @return A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
     * 
     */
    public Optional<Output<MetricThresholdEvaluationMissingData>> evaluationMissingData() {
        return Optional.ofNullable(this.evaluationMissingData);
    }

    /**
     * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     * A value against which to compare the time series.
     * 
     */
    @Import(name="thresholdValue")
    private @Nullable Output<Double> thresholdValue;

    /**
     * @return A value against which to compare the time series.
     * 
     */
    public Optional<Output<Double>> thresholdValue() {
        return Optional.ofNullable(this.thresholdValue);
    }

    /**
     * The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
     * 
     */
    @Import(name="trigger")
    private @Nullable Output<TriggerArgs> trigger;

    /**
     * @return The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
     * 
     */
    public Optional<Output<TriggerArgs>> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    private MetricThresholdArgs() {}

    private MetricThresholdArgs(MetricThresholdArgs $) {
        this.aggregations = $.aggregations;
        this.comparison = $.comparison;
        this.denominatorAggregations = $.denominatorAggregations;
        this.denominatorFilter = $.denominatorFilter;
        this.duration = $.duration;
        this.evaluationMissingData = $.evaluationMissingData;
        this.filter = $.filter;
        this.thresholdValue = $.thresholdValue;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricThresholdArgs $;

        public Builder() {
            $ = new MetricThresholdArgs();
        }

        public Builder(MetricThresholdArgs defaults) {
            $ = new MetricThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregations Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(@Nullable Output<List<AggregationArgs>> aggregations) {
            $.aggregations = aggregations;
            return this;
        }

        /**
         * @param aggregations Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(List<AggregationArgs> aggregations) {
            return aggregations(Output.of(aggregations));
        }

        /**
         * @param aggregations Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(AggregationArgs... aggregations) {
            return aggregations(List.of(aggregations));
        }

        /**
         * @param comparison The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
         * 
         * @return builder
         * 
         */
        public Builder comparison(@Nullable Output<MetricThresholdComparison> comparison) {
            $.comparison = comparison;
            return this;
        }

        /**
         * @param comparison The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
         * 
         * @return builder
         * 
         */
        public Builder comparison(MetricThresholdComparison comparison) {
            return comparison(Output.of(comparison));
        }

        /**
         * @param denominatorAggregations Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
         * 
         * @return builder
         * 
         */
        public Builder denominatorAggregations(@Nullable Output<List<AggregationArgs>> denominatorAggregations) {
            $.denominatorAggregations = denominatorAggregations;
            return this;
        }

        /**
         * @param denominatorAggregations Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
         * 
         * @return builder
         * 
         */
        public Builder denominatorAggregations(List<AggregationArgs> denominatorAggregations) {
            return denominatorAggregations(Output.of(denominatorAggregations));
        }

        /**
         * @param denominatorAggregations Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
         * 
         * @return builder
         * 
         */
        public Builder denominatorAggregations(AggregationArgs... denominatorAggregations) {
            return denominatorAggregations(List.of(denominatorAggregations));
        }

        /**
         * @param denominatorFilter A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
         * 
         * @return builder
         * 
         */
        public Builder denominatorFilter(@Nullable Output<String> denominatorFilter) {
            $.denominatorFilter = denominatorFilter;
            return this;
        }

        /**
         * @param denominatorFilter A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
         * 
         * @return builder
         * 
         */
        public Builder denominatorFilter(String denominatorFilter) {
            return denominatorFilter(Output.of(denominatorFilter));
        }

        /**
         * @param duration The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param evaluationMissingData A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
         * 
         * @return builder
         * 
         */
        public Builder evaluationMissingData(@Nullable Output<MetricThresholdEvaluationMissingData> evaluationMissingData) {
            $.evaluationMissingData = evaluationMissingData;
            return this;
        }

        /**
         * @param evaluationMissingData A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
         * 
         * @return builder
         * 
         */
        public Builder evaluationMissingData(MetricThresholdEvaluationMissingData evaluationMissingData) {
            return evaluationMissingData(Output.of(evaluationMissingData));
        }

        /**
         * @param filter A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param thresholdValue A value against which to compare the time series.
         * 
         * @return builder
         * 
         */
        public Builder thresholdValue(@Nullable Output<Double> thresholdValue) {
            $.thresholdValue = thresholdValue;
            return this;
        }

        /**
         * @param thresholdValue A value against which to compare the time series.
         * 
         * @return builder
         * 
         */
        public Builder thresholdValue(Double thresholdValue) {
            return thresholdValue(Output.of(thresholdValue));
        }

        /**
         * @param trigger The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
         * 
         * @return builder
         * 
         */
        public Builder trigger(@Nullable Output<TriggerArgs> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
         * 
         * @return builder
         * 
         */
        public Builder trigger(TriggerArgs trigger) {
            return trigger(Output.of(trigger));
        }

        public MetricThresholdArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
