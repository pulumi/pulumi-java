// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.jobs_v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.jobs_v3.enums.CompensationEntryType;
import com.pulumi.googlenative.jobs_v3.enums.CompensationEntryUnit;
import com.pulumi.googlenative.jobs_v3.inputs.CompensationRangeArgs;
import com.pulumi.googlenative.jobs_v3.inputs.MoneyArgs;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
 * 
 */
public final class CompensationEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CompensationEntryArgs Empty = new CompensationEntryArgs();

    /**
     * Optional. Compensation amount.
     * 
     */
    @Import(name="amount")
    private @Nullable Output<MoneyArgs> amount;

    public Optional<Output<MoneyArgs>> amount() {
        return Optional.ofNullable(this.amount);
    }

    /**
     * Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
     * 
     */
    @Import(name="expectedUnitsPerYear")
    private @Nullable Output<Double> expectedUnitsPerYear;

    public Optional<Output<Double>> expectedUnitsPerYear() {
        return Optional.ofNullable(this.expectedUnitsPerYear);
    }

    /**
     * Optional. Compensation range.
     * 
     */
    @Import(name="range")
    private @Nullable Output<CompensationRangeArgs> range;

    public Optional<Output<CompensationRangeArgs>> range() {
        return Optional.ofNullable(this.range);
    }

    /**
     * Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
     * 
     */
    @Import(name="type")
    private @Nullable Output<CompensationEntryType> type;

    public Optional<Output<CompensationEntryType>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<CompensationEntryUnit> unit;

    public Optional<Output<CompensationEntryUnit>> unit() {
        return Optional.ofNullable(this.unit);
    }

    private CompensationEntryArgs() {}

    private CompensationEntryArgs(CompensationEntryArgs $) {
        this.amount = $.amount;
        this.description = $.description;
        this.expectedUnitsPerYear = $.expectedUnitsPerYear;
        this.range = $.range;
        this.type = $.type;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CompensationEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CompensationEntryArgs $;

        public Builder() {
            $ = new CompensationEntryArgs();
        }

        public Builder(CompensationEntryArgs defaults) {
            $ = new CompensationEntryArgs(Objects.requireNonNull(defaults));
        }

        public Builder amount(@Nullable Output<MoneyArgs> amount) {
            $.amount = amount;
            return this;
        }

        public Builder amount(MoneyArgs amount) {
            return amount(Output.of(amount));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder expectedUnitsPerYear(@Nullable Output<Double> expectedUnitsPerYear) {
            $.expectedUnitsPerYear = expectedUnitsPerYear;
            return this;
        }

        public Builder expectedUnitsPerYear(Double expectedUnitsPerYear) {
            return expectedUnitsPerYear(Output.of(expectedUnitsPerYear));
        }

        public Builder range(@Nullable Output<CompensationRangeArgs> range) {
            $.range = range;
            return this;
        }

        public Builder range(CompensationRangeArgs range) {
            return range(Output.of(range));
        }

        public Builder type(@Nullable Output<CompensationEntryType> type) {
            $.type = type;
            return this;
        }

        public Builder type(CompensationEntryType type) {
            return type(Output.of(type));
        }

        public Builder unit(@Nullable Output<CompensationEntryUnit> unit) {
            $.unit = unit;
            return this;
        }

        public Builder unit(CompensationEntryUnit unit) {
            return unit(Output.of(unit));
        }

        public CompensationEntryArgs build() {
            return $;
        }
    }

}
