// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.SdsConfigResponse;
import com.pulumi.googlenative.compute_alpha.inputs.TlsCertificatePathsResponse;
import java.lang.String;
import java.util.Objects;


/**
 * [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
 * 
 */
public final class TlsCertificateContextResponse extends com.pulumi.resources.InvokeArgs {

    public static final TlsCertificateContextResponse Empty = new TlsCertificateContextResponse();

    /**
     * Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
     * 
     */
    @Import(name="certificatePaths", required=true)
    private TlsCertificatePathsResponse certificatePaths;

    /**
     * @return Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
     * 
     */
    public TlsCertificatePathsResponse certificatePaths() {
        return this.certificatePaths;
    }

    /**
     * Defines how TLS certificates are obtained.
     * 
     */
    @Import(name="certificateSource", required=true)
    private String certificateSource;

    /**
     * @return Defines how TLS certificates are obtained.
     * 
     */
    public String certificateSource() {
        return this.certificateSource;
    }

    /**
     * Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
     * 
     */
    @Import(name="sdsConfig", required=true)
    private SdsConfigResponse sdsConfig;

    /**
     * @return Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
     * 
     */
    public SdsConfigResponse sdsConfig() {
        return this.sdsConfig;
    }

    private TlsCertificateContextResponse() {}

    private TlsCertificateContextResponse(TlsCertificateContextResponse $) {
        this.certificatePaths = $.certificatePaths;
        this.certificateSource = $.certificateSource;
        this.sdsConfig = $.sdsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsCertificateContextResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsCertificateContextResponse $;

        public Builder() {
            $ = new TlsCertificateContextResponse();
        }

        public Builder(TlsCertificateContextResponse defaults) {
            $ = new TlsCertificateContextResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificatePaths Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
         * 
         * @return builder
         * 
         */
        public Builder certificatePaths(TlsCertificatePathsResponse certificatePaths) {
            $.certificatePaths = certificatePaths;
            return this;
        }

        /**
         * @param certificateSource Defines how TLS certificates are obtained.
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(String certificateSource) {
            $.certificateSource = certificateSource;
            return this;
        }

        /**
         * @param sdsConfig Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         * 
         * @return builder
         * 
         */
        public Builder sdsConfig(SdsConfigResponse sdsConfig) {
            $.sdsConfig = sdsConfig;
            return this;
        }

        public TlsCertificateContextResponse build() {
            $.certificatePaths = Objects.requireNonNull($.certificatePaths, "expected parameter 'certificatePaths' to be non-null");
            $.certificateSource = Objects.requireNonNull($.certificateSource, "expected parameter 'certificateSource' to be non-null");
            $.sdsConfig = Objects.requireNonNull($.sdsConfig, "expected parameter 'sdsConfig' to be non-null");
            return $;
        }
    }

}
