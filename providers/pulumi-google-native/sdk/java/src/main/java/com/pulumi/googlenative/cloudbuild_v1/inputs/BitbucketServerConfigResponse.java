// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BitbucketServerRepositoryIdResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BitbucketServerSecretsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * BitbucketServerConfig represents the configuration for a Bitbucket Server.
 * 
 */
public final class BitbucketServerConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final BitbucketServerConfigResponse Empty = new BitbucketServerConfigResponse();

    /**
     * Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    @Import(name="apiKey", required=true)
    private String apiKey;

    /**
     * @return Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Connected Bitbucket Server repositories for this config.
     * 
     */
    @Import(name="connectedRepositories", required=true)
    private List<BitbucketServerRepositoryIdResponse> connectedRepositories;

    /**
     * @return Connected Bitbucket Server repositories for this config.
     * 
     */
    public List<BitbucketServerRepositoryIdResponse> connectedRepositories() {
        return this.connectedRepositories;
    }

    /**
     * Time when the config was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return Time when the config was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    @Import(name="hostUri", required=true)
    private String hostUri;

    /**
     * @return Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    public String hostUri() {
        return this.hostUri;
    }

    /**
     * The resource name for the config.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The resource name for the config.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    @Import(name="peeredNetwork", required=true)
    private String peeredNetwork;

    /**
     * @return Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    public String peeredNetwork() {
        return this.peeredNetwork;
    }

    /**
     * Secret Manager secrets needed by the config.
     * 
     */
    @Import(name="secrets", required=true)
    private BitbucketServerSecretsResponse secrets;

    /**
     * @return Secret Manager secrets needed by the config.
     * 
     */
    public BitbucketServerSecretsResponse secrets() {
        return this.secrets;
    }

    /**
     * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     * 
     */
    @Import(name="sslCa", required=true)
    private String sslCa;

    /**
     * @return Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     * 
     */
    public String sslCa() {
        return this.sslCa;
    }

    /**
     * Username of the account Cloud Build will use on Bitbucket Server.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    /**
     * @return Username of the account Cloud Build will use on Bitbucket Server.
     * 
     */
    public String username() {
        return this.username;
    }

    /**
     * UUID included in webhook requests. The UUID is used to look up the corresponding config.
     * 
     */
    @Import(name="webhookKey", required=true)
    private String webhookKey;

    /**
     * @return UUID included in webhook requests. The UUID is used to look up the corresponding config.
     * 
     */
    public String webhookKey() {
        return this.webhookKey;
    }

    private BitbucketServerConfigResponse() {}

    private BitbucketServerConfigResponse(BitbucketServerConfigResponse $) {
        this.apiKey = $.apiKey;
        this.connectedRepositories = $.connectedRepositories;
        this.createTime = $.createTime;
        this.hostUri = $.hostUri;
        this.name = $.name;
        this.peeredNetwork = $.peeredNetwork;
        this.secrets = $.secrets;
        this.sslCa = $.sslCa;
        this.username = $.username;
        this.webhookKey = $.webhookKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BitbucketServerConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BitbucketServerConfigResponse $;

        public Builder() {
            $ = new BitbucketServerConfigResponse();
        }

        public Builder(BitbucketServerConfigResponse defaults) {
            $ = new BitbucketServerConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param connectedRepositories Connected Bitbucket Server repositories for this config.
         * 
         * @return builder
         * 
         */
        public Builder connectedRepositories(List<BitbucketServerRepositoryIdResponse> connectedRepositories) {
            $.connectedRepositories = connectedRepositories;
            return this;
        }

        /**
         * @param connectedRepositories Connected Bitbucket Server repositories for this config.
         * 
         * @return builder
         * 
         */
        public Builder connectedRepositories(BitbucketServerRepositoryIdResponse... connectedRepositories) {
            return connectedRepositories(List.of(connectedRepositories));
        }

        /**
         * @param createTime Time when the config was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param hostUri Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(String hostUri) {
            $.hostUri = hostUri;
            return this;
        }

        /**
         * @param name The resource name for the config.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param peeredNetwork Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
         * 
         * @return builder
         * 
         */
        public Builder peeredNetwork(String peeredNetwork) {
            $.peeredNetwork = peeredNetwork;
            return this;
        }

        /**
         * @param secrets Secret Manager secrets needed by the config.
         * 
         * @return builder
         * 
         */
        public Builder secrets(BitbucketServerSecretsResponse secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param sslCa Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param username Username of the account Cloud Build will use on Bitbucket Server.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            $.username = username;
            return this;
        }

        /**
         * @param webhookKey UUID included in webhook requests. The UUID is used to look up the corresponding config.
         * 
         * @return builder
         * 
         */
        public Builder webhookKey(String webhookKey) {
            $.webhookKey = webhookKey;
            return this;
        }

        public BitbucketServerConfigResponse build() {
            $.apiKey = Objects.requireNonNull($.apiKey, "expected parameter 'apiKey' to be non-null");
            $.connectedRepositories = Objects.requireNonNull($.connectedRepositories, "expected parameter 'connectedRepositories' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.hostUri = Objects.requireNonNull($.hostUri, "expected parameter 'hostUri' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.peeredNetwork = Objects.requireNonNull($.peeredNetwork, "expected parameter 'peeredNetwork' to be non-null");
            $.secrets = Objects.requireNonNull($.secrets, "expected parameter 'secrets' to be non-null");
            $.sslCa = Objects.requireNonNull($.sslCa, "expected parameter 'sslCa' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            $.webhookKey = Objects.requireNonNull($.webhookKey, "expected parameter 'webhookKey' to be non-null");
            return $;
        }
    }

}
