// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Oracle Column.
 * 
 */
public final class OracleColumnResponse extends com.pulumi.resources.InvokeArgs {

    public static final OracleColumnResponse Empty = new OracleColumnResponse();

    /**
     * Column name.
     * 
     */
    @Import(name="columnName", required=true)
    private String columnName;

    /**
     * @return Column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }

    /**
     * The Oracle data type.
     * 
     */
    @Import(name="dataType", required=true)
    private String dataType;

    /**
     * @return The Oracle data type.
     * 
     */
    public String dataType() {
        return this.dataType;
    }

    /**
     * Column encoding.
     * 
     */
    @Import(name="encoding", required=true)
    private String encoding;

    /**
     * @return Column encoding.
     * 
     */
    public String encoding() {
        return this.encoding;
    }

    /**
     * Column length.
     * 
     */
    @Import(name="length", required=true)
    private Integer length;

    /**
     * @return Column length.
     * 
     */
    public Integer length() {
        return this.length;
    }

    /**
     * Whether or not the column can accept a null value.
     * 
     */
    @Import(name="nullable", required=true)
    private Boolean nullable;

    /**
     * @return Whether or not the column can accept a null value.
     * 
     */
    public Boolean nullable() {
        return this.nullable;
    }

    /**
     * The ordinal position of the column in the table.
     * 
     */
    @Import(name="ordinalPosition", required=true)
    private Integer ordinalPosition;

    /**
     * @return The ordinal position of the column in the table.
     * 
     */
    public Integer ordinalPosition() {
        return this.ordinalPosition;
    }

    /**
     * Column precision.
     * 
     */
    @Import(name="precision", required=true)
    private Integer precision;

    /**
     * @return Column precision.
     * 
     */
    public Integer precision() {
        return this.precision;
    }

    /**
     * Whether or not the column represents a primary key.
     * 
     */
    @Import(name="primaryKey", required=true)
    private Boolean primaryKey;

    /**
     * @return Whether or not the column represents a primary key.
     * 
     */
    public Boolean primaryKey() {
        return this.primaryKey;
    }

    /**
     * Column scale.
     * 
     */
    @Import(name="scale", required=true)
    private Integer scale;

    /**
     * @return Column scale.
     * 
     */
    public Integer scale() {
        return this.scale;
    }

    private OracleColumnResponse() {}

    private OracleColumnResponse(OracleColumnResponse $) {
        this.columnName = $.columnName;
        this.dataType = $.dataType;
        this.encoding = $.encoding;
        this.length = $.length;
        this.nullable = $.nullable;
        this.ordinalPosition = $.ordinalPosition;
        this.precision = $.precision;
        this.primaryKey = $.primaryKey;
        this.scale = $.scale;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OracleColumnResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OracleColumnResponse $;

        public Builder() {
            $ = new OracleColumnResponse();
        }

        public Builder(OracleColumnResponse defaults) {
            $ = new OracleColumnResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnName Column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param dataType The Oracle data type.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param encoding Column encoding.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param length Column length.
         * 
         * @return builder
         * 
         */
        public Builder length(Integer length) {
            $.length = length;
            return this;
        }

        /**
         * @param nullable Whether or not the column can accept a null value.
         * 
         * @return builder
         * 
         */
        public Builder nullable(Boolean nullable) {
            $.nullable = nullable;
            return this;
        }

        /**
         * @param ordinalPosition The ordinal position of the column in the table.
         * 
         * @return builder
         * 
         */
        public Builder ordinalPosition(Integer ordinalPosition) {
            $.ordinalPosition = ordinalPosition;
            return this;
        }

        /**
         * @param precision Column precision.
         * 
         * @return builder
         * 
         */
        public Builder precision(Integer precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param primaryKey Whether or not the column represents a primary key.
         * 
         * @return builder
         * 
         */
        public Builder primaryKey(Boolean primaryKey) {
            $.primaryKey = primaryKey;
            return this;
        }

        /**
         * @param scale Column scale.
         * 
         * @return builder
         * 
         */
        public Builder scale(Integer scale) {
            $.scale = scale;
            return this;
        }

        public OracleColumnResponse build() {
            $.columnName = Objects.requireNonNull($.columnName, "expected parameter 'columnName' to be non-null");
            $.dataType = Objects.requireNonNull($.dataType, "expected parameter 'dataType' to be non-null");
            $.encoding = Objects.requireNonNull($.encoding, "expected parameter 'encoding' to be non-null");
            $.length = Objects.requireNonNull($.length, "expected parameter 'length' to be non-null");
            $.nullable = Objects.requireNonNull($.nullable, "expected parameter 'nullable' to be non-null");
            $.ordinalPosition = Objects.requireNonNull($.ordinalPosition, "expected parameter 'ordinalPosition' to be non-null");
            $.precision = Objects.requireNonNull($.precision, "expected parameter 'precision' to be non-null");
            $.primaryKey = Objects.requireNonNull($.primaryKey, "expected parameter 'primaryKey' to be non-null");
            $.scale = Objects.requireNonNull($.scale, "expected parameter 'scale' to be non-null");
            return $;
        }
    }

}
