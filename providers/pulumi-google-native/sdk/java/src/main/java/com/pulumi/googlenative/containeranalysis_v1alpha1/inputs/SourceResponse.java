// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.RepoSourceResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.StorageSourceResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Source describes the location of the source used for the build.
 * 
 */
public final class SourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceResponse Empty = new SourceResponse();

    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     * 
     */
    @Import(name="additionalContexts", required=true)
    private List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse> additionalContexts;

    public List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse> additionalContexts() {
        return this.additionalContexts;
    }

    /**
     * If provided, the input binary artifacts for the build came from this location.
     * 
     */
    @Import(name="artifactStorageSource", required=true)
    private StorageSourceResponse artifactStorageSource;

    public StorageSourceResponse artifactStorageSource() {
        return this.artifactStorageSource;
    }

    /**
     * If provided, the source code used for the build came from this location.
     * 
     */
    @Import(name="context", required=true)
    private GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse context;

    public GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse context() {
        return this.context;
    }

    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     * 
     */
    @Import(name="fileHashes", required=true)
    private Map<String,String> fileHashes;

    public Map<String,String> fileHashes() {
        return this.fileHashes;
    }

    /**
     * If provided, get source from this location in a Cloud Repo.
     * 
     */
    @Import(name="repoSource", required=true)
    private RepoSourceResponse repoSource;

    public RepoSourceResponse repoSource() {
        return this.repoSource;
    }

    /**
     * If provided, get the source from this location in in Google Cloud Storage.
     * 
     */
    @Import(name="storageSource", required=true)
    private StorageSourceResponse storageSource;

    public StorageSourceResponse storageSource() {
        return this.storageSource;
    }

    private SourceResponse() {}

    private SourceResponse(SourceResponse $) {
        this.additionalContexts = $.additionalContexts;
        this.artifactStorageSource = $.artifactStorageSource;
        this.context = $.context;
        this.fileHashes = $.fileHashes;
        this.repoSource = $.repoSource;
        this.storageSource = $.storageSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceResponse $;

        public Builder() {
            $ = new SourceResponse();
        }

        public Builder(SourceResponse defaults) {
            $ = new SourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder additionalContexts(List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse> additionalContexts) {
            $.additionalContexts = additionalContexts;
            return this;
        }

        public Builder additionalContexts(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse... additionalContexts) {
            return additionalContexts(List.of(additionalContexts));
        }

        public Builder artifactStorageSource(StorageSourceResponse artifactStorageSource) {
            $.artifactStorageSource = artifactStorageSource;
            return this;
        }

        public Builder context(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse context) {
            $.context = context;
            return this;
        }

        public Builder fileHashes(Map<String,String> fileHashes) {
            $.fileHashes = fileHashes;
            return this;
        }

        public Builder repoSource(RepoSourceResponse repoSource) {
            $.repoSource = repoSource;
            return this;
        }

        public Builder storageSource(StorageSourceResponse storageSource) {
            $.storageSource = storageSource;
            return this;
        }

        public SourceResponse build() {
            $.additionalContexts = Objects.requireNonNull($.additionalContexts, "expected parameter 'additionalContexts' to be non-null");
            $.artifactStorageSource = Objects.requireNonNull($.artifactStorageSource, "expected parameter 'artifactStorageSource' to be non-null");
            $.context = Objects.requireNonNull($.context, "expected parameter 'context' to be non-null");
            $.fileHashes = Objects.requireNonNull($.fileHashes, "expected parameter 'fileHashes' to be non-null");
            $.repoSource = Objects.requireNonNull($.repoSource, "expected parameter 'repoSource' to be non-null");
            $.storageSource = Objects.requireNonNull($.storageSource, "expected parameter 'storageSource' to be non-null");
            return $;
        }
    }

}
