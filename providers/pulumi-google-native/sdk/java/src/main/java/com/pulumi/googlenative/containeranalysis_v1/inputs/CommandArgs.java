// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Command describes a step performed as part of the build pipeline.
 * 
 */
public final class CommandArgs extends com.pulumi.resources.ResourceArgs {

    public static final CommandArgs Empty = new CommandArgs();

    /**
     * Command-line arguments used when executing this command.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Working directory (relative to project source root) used when running this command.
     * 
     */
    @Import(name="dir")
    private @Nullable Output<String> dir;

    public Optional<Output<String>> dir() {
        return Optional.ofNullable(this.dir);
    }

    /**
     * Environment variables set before running this command.
     * 
     */
    @Import(name="env")
    private @Nullable Output<List<String>> env;

    public Optional<Output<List<String>>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID(s) of the command(s) that this command depends on.
     * 
     */
    @Import(name="waitFor")
    private @Nullable Output<List<String>> waitFor;

    public Optional<Output<List<String>>> waitFor() {
        return Optional.ofNullable(this.waitFor);
    }

    private CommandArgs() {}

    private CommandArgs(CommandArgs $) {
        this.args = $.args;
        this.dir = $.dir;
        this.env = $.env;
        this.id = $.id;
        this.name = $.name;
        this.waitFor = $.waitFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommandArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommandArgs $;

        public Builder() {
            $ = new CommandArgs();
        }

        public Builder(CommandArgs defaults) {
            $ = new CommandArgs(Objects.requireNonNull(defaults));
        }

        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        public Builder args(String... args) {
            return args(List.of(args));
        }

        public Builder dir(@Nullable Output<String> dir) {
            $.dir = dir;
            return this;
        }

        public Builder dir(String dir) {
            return dir(Output.of(dir));
        }

        public Builder env(@Nullable Output<List<String>> env) {
            $.env = env;
            return this;
        }

        public Builder env(List<String> env) {
            return env(Output.of(env));
        }

        public Builder env(String... env) {
            return env(List.of(env));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder waitFor(@Nullable Output<List<String>> waitFor) {
            $.waitFor = waitFor;
            return this;
        }

        public Builder waitFor(List<String> waitFor) {
            return waitFor(Output.of(waitFor));
        }

        public Builder waitFor(String... waitFor) {
            return waitFor(List.of(waitFor));
        }

        public CommandArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
