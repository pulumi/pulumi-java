// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.composer_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.composer_v1.inputs.PrivateClusterConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The configuration information for configuring a Private IP Cloud Composer environment.
 * 
 */
public final class PrivateEnvironmentConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PrivateEnvironmentConfigResponse Empty = new PrivateEnvironmentConfigResponse();

    /**
     * Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @Import(name="cloudComposerNetworkIpv4CidrBlock", required=true)
    private String cloudComposerNetworkIpv4CidrBlock;

    /**
     * @return Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public String cloudComposerNetworkIpv4CidrBlock() {
        return this.cloudComposerNetworkIpv4CidrBlock;
    }

    /**
     * The IP range reserved for the tenant project&#39;s Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @Import(name="cloudComposerNetworkIpv4ReservedRange", required=true)
    private String cloudComposerNetworkIpv4ReservedRange;

    /**
     * @return The IP range reserved for the tenant project&#39;s Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public String cloudComposerNetworkIpv4ReservedRange() {
        return this.cloudComposerNetworkIpv4ReservedRange;
    }

    /**
     * Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
     * 
     */
    @Import(name="cloudSqlIpv4CidrBlock", required=true)
    private String cloudSqlIpv4CidrBlock;

    /**
     * @return Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
     * 
     */
    public String cloudSqlIpv4CidrBlock() {
        return this.cloudSqlIpv4CidrBlock;
    }

    /**
     * Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @Import(name="enablePrivateEnvironment", required=true)
    private Boolean enablePrivateEnvironment;

    /**
     * @return Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Boolean enablePrivateEnvironment() {
        return this.enablePrivateEnvironment;
    }

    /**
     * Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
     * 
     */
    @Import(name="privateClusterConfig", required=true)
    private PrivateClusterConfigResponse privateClusterConfig;

    /**
     * @return Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
     * 
     */
    public PrivateClusterConfigResponse privateClusterConfig() {
        return this.privateClusterConfig;
    }

    /**
     * Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @Import(name="webServerIpv4CidrBlock", required=true)
    private String webServerIpv4CidrBlock;

    /**
     * @return Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public String webServerIpv4CidrBlock() {
        return this.webServerIpv4CidrBlock;
    }

    /**
     * The IP range reserved for the tenant project&#39;s App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @Import(name="webServerIpv4ReservedRange", required=true)
    private String webServerIpv4ReservedRange;

    /**
     * @return The IP range reserved for the tenant project&#39;s App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public String webServerIpv4ReservedRange() {
        return this.webServerIpv4ReservedRange;
    }

    private PrivateEnvironmentConfigResponse() {}

    private PrivateEnvironmentConfigResponse(PrivateEnvironmentConfigResponse $) {
        this.cloudComposerNetworkIpv4CidrBlock = $.cloudComposerNetworkIpv4CidrBlock;
        this.cloudComposerNetworkIpv4ReservedRange = $.cloudComposerNetworkIpv4ReservedRange;
        this.cloudSqlIpv4CidrBlock = $.cloudSqlIpv4CidrBlock;
        this.enablePrivateEnvironment = $.enablePrivateEnvironment;
        this.privateClusterConfig = $.privateClusterConfig;
        this.webServerIpv4CidrBlock = $.webServerIpv4CidrBlock;
        this.webServerIpv4ReservedRange = $.webServerIpv4ReservedRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateEnvironmentConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateEnvironmentConfigResponse $;

        public Builder() {
            $ = new PrivateEnvironmentConfigResponse();
        }

        public Builder(PrivateEnvironmentConfigResponse defaults) {
            $ = new PrivateEnvironmentConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudComposerNetworkIpv4CidrBlock Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
         * 
         * @return builder
         * 
         */
        public Builder cloudComposerNetworkIpv4CidrBlock(String cloudComposerNetworkIpv4CidrBlock) {
            $.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
            return this;
        }

        /**
         * @param cloudComposerNetworkIpv4ReservedRange The IP range reserved for the tenant project&#39;s Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
         * 
         * @return builder
         * 
         */
        public Builder cloudComposerNetworkIpv4ReservedRange(String cloudComposerNetworkIpv4ReservedRange) {
            $.cloudComposerNetworkIpv4ReservedRange = cloudComposerNetworkIpv4ReservedRange;
            return this;
        }

        /**
         * @param cloudSqlIpv4CidrBlock Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
         * 
         * @return builder
         * 
         */
        public Builder cloudSqlIpv4CidrBlock(String cloudSqlIpv4CidrBlock) {
            $.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
            return this;
        }

        /**
         * @param enablePrivateEnvironment Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateEnvironment(Boolean enablePrivateEnvironment) {
            $.enablePrivateEnvironment = enablePrivateEnvironment;
            return this;
        }

        /**
         * @param privateClusterConfig Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
         * 
         * @return builder
         * 
         */
        public Builder privateClusterConfig(PrivateClusterConfigResponse privateClusterConfig) {
            $.privateClusterConfig = privateClusterConfig;
            return this;
        }

        /**
         * @param webServerIpv4CidrBlock Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
         * 
         * @return builder
         * 
         */
        public Builder webServerIpv4CidrBlock(String webServerIpv4CidrBlock) {
            $.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
            return this;
        }

        /**
         * @param webServerIpv4ReservedRange The IP range reserved for the tenant project&#39;s App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
         * 
         * @return builder
         * 
         */
        public Builder webServerIpv4ReservedRange(String webServerIpv4ReservedRange) {
            $.webServerIpv4ReservedRange = webServerIpv4ReservedRange;
            return this;
        }

        public PrivateEnvironmentConfigResponse build() {
            $.cloudComposerNetworkIpv4CidrBlock = Objects.requireNonNull($.cloudComposerNetworkIpv4CidrBlock, "expected parameter 'cloudComposerNetworkIpv4CidrBlock' to be non-null");
            $.cloudComposerNetworkIpv4ReservedRange = Objects.requireNonNull($.cloudComposerNetworkIpv4ReservedRange, "expected parameter 'cloudComposerNetworkIpv4ReservedRange' to be non-null");
            $.cloudSqlIpv4CidrBlock = Objects.requireNonNull($.cloudSqlIpv4CidrBlock, "expected parameter 'cloudSqlIpv4CidrBlock' to be non-null");
            $.enablePrivateEnvironment = Objects.requireNonNull($.enablePrivateEnvironment, "expected parameter 'enablePrivateEnvironment' to be non-null");
            $.privateClusterConfig = Objects.requireNonNull($.privateClusterConfig, "expected parameter 'privateClusterConfig' to be non-null");
            $.webServerIpv4CidrBlock = Objects.requireNonNull($.webServerIpv4CidrBlock, "expected parameter 'webServerIpv4CidrBlock' to be non-null");
            $.webServerIpv4ReservedRange = Objects.requireNonNull($.webServerIpv4ReservedRange, "expected parameter 'webServerIpv4ReservedRange' to be non-null");
            return $;
        }
    }

}
