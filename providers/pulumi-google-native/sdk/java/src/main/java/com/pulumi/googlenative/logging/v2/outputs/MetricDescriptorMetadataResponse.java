// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class MetricDescriptorMetadataResponse {
    /**
     * @return The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     * 
     */
    private final String ingestDelay;
    /**
     * @return Deprecated. Must use the MetricDescriptor.launch_stage instead.
     * 
     * @deprecated
     * Deprecated. Must use the MetricDescriptor.launch_stage instead.
     * 
     */
    @Deprecated /* Deprecated. Must use the MetricDescriptor.launch_stage instead. */
    private final String launchStage;
    /**
     * @return The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     * 
     */
    private final String samplePeriod;

    @CustomType.Constructor
    private MetricDescriptorMetadataResponse(
        @CustomType.Parameter("ingestDelay") String ingestDelay,
        @CustomType.Parameter("launchStage") String launchStage,
        @CustomType.Parameter("samplePeriod") String samplePeriod) {
        this.ingestDelay = ingestDelay;
        this.launchStage = launchStage;
        this.samplePeriod = samplePeriod;
    }

    /**
     * @return The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     * 
     */
    public String ingestDelay() {
        return this.ingestDelay;
    }
    /**
     * @return Deprecated. Must use the MetricDescriptor.launch_stage instead.
     * 
     * @deprecated
     * Deprecated. Must use the MetricDescriptor.launch_stage instead.
     * 
     */
    @Deprecated /* Deprecated. Must use the MetricDescriptor.launch_stage instead. */
    public String launchStage() {
        return this.launchStage;
    }
    /**
     * @return The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     * 
     */
    public String samplePeriod() {
        return this.samplePeriod;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricDescriptorMetadataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String ingestDelay;
        private String launchStage;
        private String samplePeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricDescriptorMetadataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ingestDelay = defaults.ingestDelay;
    	      this.launchStage = defaults.launchStage;
    	      this.samplePeriod = defaults.samplePeriod;
        }

        public Builder ingestDelay(String ingestDelay) {
            this.ingestDelay = Objects.requireNonNull(ingestDelay);
            return this;
        }
        public Builder launchStage(String launchStage) {
            this.launchStage = Objects.requireNonNull(launchStage);
            return this;
        }
        public Builder samplePeriod(String samplePeriod) {
            this.samplePeriod = Objects.requireNonNull(samplePeriod);
            return this;
        }        public MetricDescriptorMetadataResponse build() {
            return new MetricDescriptorMetadataResponse(ingestDelay, launchStage, samplePeriod);
        }
    }
}
