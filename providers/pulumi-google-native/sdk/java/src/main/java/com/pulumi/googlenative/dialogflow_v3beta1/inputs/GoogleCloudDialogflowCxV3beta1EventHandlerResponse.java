// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1FulfillmentResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow.
 * 
 */
public final class GoogleCloudDialogflowCxV3beta1EventHandlerResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3beta1EventHandlerResponse Empty = new GoogleCloudDialogflowCxV3beta1EventHandlerResponse();

    /**
     * The name of the event to handle.
     * 
     */
    @Import(name="event", required=true)
    private String event;

    /**
     * @return The name of the event to handle.
     * 
     */
    public String event() {
        return this.event;
    }

    /**
     * The unique identifier of this event handler.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The unique identifier of this event handler.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The target flow to transition to. Format: `projects//locations//agents//flows/`.
     * 
     */
    @Import(name="targetFlow", required=true)
    private String targetFlow;

    /**
     * @return The target flow to transition to. Format: `projects//locations//agents//flows/`.
     * 
     */
    public String targetFlow() {
        return this.targetFlow;
    }

    /**
     * The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
     * 
     */
    @Import(name="targetPage", required=true)
    private String targetPage;

    /**
     * @return The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
     * 
     */
    public String targetPage() {
        return this.targetPage;
    }

    /**
     * The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
     * 
     */
    @Import(name="triggerFulfillment", required=true)
    private GoogleCloudDialogflowCxV3beta1FulfillmentResponse triggerFulfillment;

    /**
     * @return The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
     * 
     */
    public GoogleCloudDialogflowCxV3beta1FulfillmentResponse triggerFulfillment() {
        return this.triggerFulfillment;
    }

    private GoogleCloudDialogflowCxV3beta1EventHandlerResponse() {}

    private GoogleCloudDialogflowCxV3beta1EventHandlerResponse(GoogleCloudDialogflowCxV3beta1EventHandlerResponse $) {
        this.event = $.event;
        this.name = $.name;
        this.targetFlow = $.targetFlow;
        this.targetPage = $.targetPage;
        this.triggerFulfillment = $.triggerFulfillment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3beta1EventHandlerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3beta1EventHandlerResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3beta1EventHandlerResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3beta1EventHandlerResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3beta1EventHandlerResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param event The name of the event to handle.
         * 
         * @return builder
         * 
         */
        public Builder event(String event) {
            $.event = event;
            return this;
        }

        /**
         * @param name The unique identifier of this event handler.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param targetFlow The target flow to transition to. Format: `projects//locations//agents//flows/`.
         * 
         * @return builder
         * 
         */
        public Builder targetFlow(String targetFlow) {
            $.targetFlow = targetFlow;
            return this;
        }

        /**
         * @param targetPage The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
         * 
         * @return builder
         * 
         */
        public Builder targetPage(String targetPage) {
            $.targetPage = targetPage;
            return this;
        }

        /**
         * @param triggerFulfillment The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
         * 
         * @return builder
         * 
         */
        public Builder triggerFulfillment(GoogleCloudDialogflowCxV3beta1FulfillmentResponse triggerFulfillment) {
            $.triggerFulfillment = triggerFulfillment;
            return this;
        }

        public GoogleCloudDialogflowCxV3beta1EventHandlerResponse build() {
            $.event = Objects.requireNonNull($.event, "expected parameter 'event' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.targetFlow = Objects.requireNonNull($.targetFlow, "expected parameter 'targetFlow' to be non-null");
            $.targetPage = Objects.requireNonNull($.targetPage, "expected parameter 'targetPage' to be non-null");
            $.triggerFulfillment = Objects.requireNonNull($.triggerFulfillment, "expected parameter 'triggerFulfillment' to be non-null");
            return $;
        }
    }

}
