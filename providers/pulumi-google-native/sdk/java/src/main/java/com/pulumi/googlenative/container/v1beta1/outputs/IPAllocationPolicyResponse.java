// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class IPAllocationPolicyResponse {
    /**
     * @return If true, allow allocation of cluster CIDR ranges that overlap with certain kinds of network routes. By default we do not allow cluster CIDR ranges to intersect with any user declared routes. With allow_route_overlap == true, we allow overlapping with CIDR ranges that are larger than the cluster CIDR range. If this field is set to true, then cluster and services CIDRs must be fully-specified (e.g. `10.96.0.0/14`, but not `/14`), which means: 1) When `use_ip_aliases` is true, `cluster_ipv4_cidr_block` and `services_ipv4_cidr_block` must be fully-specified. 2) When `use_ip_aliases` is false, `cluster.cluster_ipv4_cidr` muse be fully-specified.
     * 
     */
    private final Boolean allowRouteOverlap;
    /**
     * @return This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
    private final String clusterIpv4Cidr;
    /**
     * @return The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private final String clusterIpv4CidrBlock;
    /**
     * @return The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
     * 
     */
    private final String clusterSecondaryRangeName;
    /**
     * @return Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     * 
     */
    private final Boolean createSubnetwork;
    /**
     * @return The ipv6 access type (internal or external) when create_subnetwork is true
     * 
     */
    private final String ipv6AccessType;
    /**
     * @return This field is deprecated, use node_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
    private final String nodeIpv4Cidr;
    /**
     * @return The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private final String nodeIpv4CidrBlock;
    /**
     * @return This field is deprecated, use services_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
    private final String servicesIpv4Cidr;
    /**
     * @return The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private final String servicesIpv4CidrBlock;
    /**
     * @return [Output only] The services IPv6 CIDR block for the cluster.
     * 
     */
    private final String servicesIpv6CidrBlock;
    /**
     * @return The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
     * 
     */
    private final String servicesSecondaryRangeName;
    /**
     * @return IP stack type
     * 
     */
    private final String stackType;
    /**
     * @return [Output only] The subnet&#39;s IPv6 CIDR block used by nodes and pods.
     * 
     */
    private final String subnetIpv6CidrBlock;
    /**
     * @return A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     * 
     */
    private final String subnetworkName;
    /**
     * @return The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.
     * 
     * @deprecated
     * The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.
     * 
     */
    @Deprecated /* The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead. */
    private final String tpuIpv4CidrBlock;
    /**
     * @return Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    private final Boolean useIpAliases;
    /**
     * @return Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    private final Boolean useRoutes;

    @CustomType.Constructor
    private IPAllocationPolicyResponse(
        @CustomType.Parameter("allowRouteOverlap") Boolean allowRouteOverlap,
        @CustomType.Parameter("clusterIpv4Cidr") String clusterIpv4Cidr,
        @CustomType.Parameter("clusterIpv4CidrBlock") String clusterIpv4CidrBlock,
        @CustomType.Parameter("clusterSecondaryRangeName") String clusterSecondaryRangeName,
        @CustomType.Parameter("createSubnetwork") Boolean createSubnetwork,
        @CustomType.Parameter("ipv6AccessType") String ipv6AccessType,
        @CustomType.Parameter("nodeIpv4Cidr") String nodeIpv4Cidr,
        @CustomType.Parameter("nodeIpv4CidrBlock") String nodeIpv4CidrBlock,
        @CustomType.Parameter("servicesIpv4Cidr") String servicesIpv4Cidr,
        @CustomType.Parameter("servicesIpv4CidrBlock") String servicesIpv4CidrBlock,
        @CustomType.Parameter("servicesIpv6CidrBlock") String servicesIpv6CidrBlock,
        @CustomType.Parameter("servicesSecondaryRangeName") String servicesSecondaryRangeName,
        @CustomType.Parameter("stackType") String stackType,
        @CustomType.Parameter("subnetIpv6CidrBlock") String subnetIpv6CidrBlock,
        @CustomType.Parameter("subnetworkName") String subnetworkName,
        @CustomType.Parameter("tpuIpv4CidrBlock") String tpuIpv4CidrBlock,
        @CustomType.Parameter("useIpAliases") Boolean useIpAliases,
        @CustomType.Parameter("useRoutes") Boolean useRoutes) {
        this.allowRouteOverlap = allowRouteOverlap;
        this.clusterIpv4Cidr = clusterIpv4Cidr;
        this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
        this.clusterSecondaryRangeName = clusterSecondaryRangeName;
        this.createSubnetwork = createSubnetwork;
        this.ipv6AccessType = ipv6AccessType;
        this.nodeIpv4Cidr = nodeIpv4Cidr;
        this.nodeIpv4CidrBlock = nodeIpv4CidrBlock;
        this.servicesIpv4Cidr = servicesIpv4Cidr;
        this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
        this.servicesIpv6CidrBlock = servicesIpv6CidrBlock;
        this.servicesSecondaryRangeName = servicesSecondaryRangeName;
        this.stackType = stackType;
        this.subnetIpv6CidrBlock = subnetIpv6CidrBlock;
        this.subnetworkName = subnetworkName;
        this.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
        this.useIpAliases = useIpAliases;
        this.useRoutes = useRoutes;
    }

    /**
     * @return If true, allow allocation of cluster CIDR ranges that overlap with certain kinds of network routes. By default we do not allow cluster CIDR ranges to intersect with any user declared routes. With allow_route_overlap == true, we allow overlapping with CIDR ranges that are larger than the cluster CIDR range. If this field is set to true, then cluster and services CIDRs must be fully-specified (e.g. `10.96.0.0/14`, but not `/14`), which means: 1) When `use_ip_aliases` is true, `cluster_ipv4_cidr_block` and `services_ipv4_cidr_block` must be fully-specified. 2) When `use_ip_aliases` is false, `cluster.cluster_ipv4_cidr` muse be fully-specified.
     * 
     */
    public Boolean allowRouteOverlap() {
        return this.allowRouteOverlap;
    }
    /**
     * @return This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
    public String clusterIpv4Cidr() {
        return this.clusterIpv4Cidr;
    }
    /**
     * @return The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String clusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock;
    }
    /**
     * @return The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
     * 
     */
    public String clusterSecondaryRangeName() {
        return this.clusterSecondaryRangeName;
    }
    /**
     * @return Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     * 
     */
    public Boolean createSubnetwork() {
        return this.createSubnetwork;
    }
    /**
     * @return The ipv6 access type (internal or external) when create_subnetwork is true
     * 
     */
    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }
    /**
     * @return This field is deprecated, use node_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
    public String nodeIpv4Cidr() {
        return this.nodeIpv4Cidr;
    }
    /**
     * @return The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String nodeIpv4CidrBlock() {
        return this.nodeIpv4CidrBlock;
    }
    /**
     * @return This field is deprecated, use services_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
    public String servicesIpv4Cidr() {
        return this.servicesIpv4Cidr;
    }
    /**
     * @return The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String servicesIpv4CidrBlock() {
        return this.servicesIpv4CidrBlock;
    }
    /**
     * @return [Output only] The services IPv6 CIDR block for the cluster.
     * 
     */
    public String servicesIpv6CidrBlock() {
        return this.servicesIpv6CidrBlock;
    }
    /**
     * @return The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
     * 
     */
    public String servicesSecondaryRangeName() {
        return this.servicesSecondaryRangeName;
    }
    /**
     * @return IP stack type
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return [Output only] The subnet&#39;s IPv6 CIDR block used by nodes and pods.
     * 
     */
    public String subnetIpv6CidrBlock() {
        return this.subnetIpv6CidrBlock;
    }
    /**
     * @return A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     * 
     */
    public String subnetworkName() {
        return this.subnetworkName;
    }
    /**
     * @return The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.
     * 
     * @deprecated
     * The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.
     * 
     */
    @Deprecated /* The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead. */
    public String tpuIpv4CidrBlock() {
        return this.tpuIpv4CidrBlock;
    }
    /**
     * @return Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    public Boolean useIpAliases() {
        return this.useIpAliases;
    }
    /**
     * @return Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    public Boolean useRoutes() {
        return this.useRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IPAllocationPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowRouteOverlap;
        private String clusterIpv4Cidr;
        private String clusterIpv4CidrBlock;
        private String clusterSecondaryRangeName;
        private Boolean createSubnetwork;
        private String ipv6AccessType;
        private String nodeIpv4Cidr;
        private String nodeIpv4CidrBlock;
        private String servicesIpv4Cidr;
        private String servicesIpv4CidrBlock;
        private String servicesIpv6CidrBlock;
        private String servicesSecondaryRangeName;
        private String stackType;
        private String subnetIpv6CidrBlock;
        private String subnetworkName;
        private String tpuIpv4CidrBlock;
        private Boolean useIpAliases;
        private Boolean useRoutes;

        public Builder() {
    	      // Empty
        }

        public Builder(IPAllocationPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowRouteOverlap = defaults.allowRouteOverlap;
    	      this.clusterIpv4Cidr = defaults.clusterIpv4Cidr;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.clusterSecondaryRangeName = defaults.clusterSecondaryRangeName;
    	      this.createSubnetwork = defaults.createSubnetwork;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.nodeIpv4Cidr = defaults.nodeIpv4Cidr;
    	      this.nodeIpv4CidrBlock = defaults.nodeIpv4CidrBlock;
    	      this.servicesIpv4Cidr = defaults.servicesIpv4Cidr;
    	      this.servicesIpv4CidrBlock = defaults.servicesIpv4CidrBlock;
    	      this.servicesIpv6CidrBlock = defaults.servicesIpv6CidrBlock;
    	      this.servicesSecondaryRangeName = defaults.servicesSecondaryRangeName;
    	      this.stackType = defaults.stackType;
    	      this.subnetIpv6CidrBlock = defaults.subnetIpv6CidrBlock;
    	      this.subnetworkName = defaults.subnetworkName;
    	      this.tpuIpv4CidrBlock = defaults.tpuIpv4CidrBlock;
    	      this.useIpAliases = defaults.useIpAliases;
    	      this.useRoutes = defaults.useRoutes;
        }

        public Builder allowRouteOverlap(Boolean allowRouteOverlap) {
            this.allowRouteOverlap = Objects.requireNonNull(allowRouteOverlap);
            return this;
        }
        public Builder clusterIpv4Cidr(String clusterIpv4Cidr) {
            this.clusterIpv4Cidr = Objects.requireNonNull(clusterIpv4Cidr);
            return this;
        }
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            this.clusterIpv4CidrBlock = Objects.requireNonNull(clusterIpv4CidrBlock);
            return this;
        }
        public Builder clusterSecondaryRangeName(String clusterSecondaryRangeName) {
            this.clusterSecondaryRangeName = Objects.requireNonNull(clusterSecondaryRangeName);
            return this;
        }
        public Builder createSubnetwork(Boolean createSubnetwork) {
            this.createSubnetwork = Objects.requireNonNull(createSubnetwork);
            return this;
        }
        public Builder ipv6AccessType(String ipv6AccessType) {
            this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
            return this;
        }
        public Builder nodeIpv4Cidr(String nodeIpv4Cidr) {
            this.nodeIpv4Cidr = Objects.requireNonNull(nodeIpv4Cidr);
            return this;
        }
        public Builder nodeIpv4CidrBlock(String nodeIpv4CidrBlock) {
            this.nodeIpv4CidrBlock = Objects.requireNonNull(nodeIpv4CidrBlock);
            return this;
        }
        public Builder servicesIpv4Cidr(String servicesIpv4Cidr) {
            this.servicesIpv4Cidr = Objects.requireNonNull(servicesIpv4Cidr);
            return this;
        }
        public Builder servicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
            this.servicesIpv4CidrBlock = Objects.requireNonNull(servicesIpv4CidrBlock);
            return this;
        }
        public Builder servicesIpv6CidrBlock(String servicesIpv6CidrBlock) {
            this.servicesIpv6CidrBlock = Objects.requireNonNull(servicesIpv6CidrBlock);
            return this;
        }
        public Builder servicesSecondaryRangeName(String servicesSecondaryRangeName) {
            this.servicesSecondaryRangeName = Objects.requireNonNull(servicesSecondaryRangeName);
            return this;
        }
        public Builder stackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }
        public Builder subnetIpv6CidrBlock(String subnetIpv6CidrBlock) {
            this.subnetIpv6CidrBlock = Objects.requireNonNull(subnetIpv6CidrBlock);
            return this;
        }
        public Builder subnetworkName(String subnetworkName) {
            this.subnetworkName = Objects.requireNonNull(subnetworkName);
            return this;
        }
        public Builder tpuIpv4CidrBlock(String tpuIpv4CidrBlock) {
            this.tpuIpv4CidrBlock = Objects.requireNonNull(tpuIpv4CidrBlock);
            return this;
        }
        public Builder useIpAliases(Boolean useIpAliases) {
            this.useIpAliases = Objects.requireNonNull(useIpAliases);
            return this;
        }
        public Builder useRoutes(Boolean useRoutes) {
            this.useRoutes = Objects.requireNonNull(useRoutes);
            return this;
        }        public IPAllocationPolicyResponse build() {
            return new IPAllocationPolicyResponse(allowRouteOverlap, clusterIpv4Cidr, clusterIpv4CidrBlock, clusterSecondaryRangeName, createSubnetwork, ipv6AccessType, nodeIpv4Cidr, nodeIpv4CidrBlock, servicesIpv4Cidr, servicesIpv4CidrBlock, servicesIpv6CidrBlock, servicesSecondaryRangeName, stackType, subnetIpv6CidrBlock, subnetworkName, tpuIpv4CidrBlock, useIpAliases, useRoutes);
        }
    }
}
