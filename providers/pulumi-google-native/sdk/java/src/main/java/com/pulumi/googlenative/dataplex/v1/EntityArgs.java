// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataplex.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataplex.v1.enums.EntitySystem;
import com.pulumi.googlenative.dataplex.v1.enums.EntityType;
import com.pulumi.googlenative.dataplex.v1.inputs.GoogleCloudDataplexV1SchemaArgs;
import com.pulumi.googlenative.dataplex.v1.inputs.GoogleCloudDataplexV1StorageFormatArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntityArgs Empty = new EntityArgs();

    /**
     * Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.
     * 
     */
    @Import(name="asset", required=true)
    private Output<String> asset;

    /**
     * @return Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.
     * 
     */
    public Output<String> asset() {
        return this.asset;
    }

    /**
     * Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.
     * 
     */
    @Import(name="dataPath", required=true)
    private Output<String> dataPath;

    /**
     * @return Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.
     * 
     */
    public Output<String> dataPath() {
        return this.dataPath;
    }

    /**
     * Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/**{@literal /}*.csv.
     * 
     */
    @Import(name="dataPathPattern")
    private @Nullable Output<String> dataPathPattern;

    /**
     * @return Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/**{@literal /}*.csv.
     * 
     */
    public Optional<Output<String>> dataPathPattern() {
        return Optional.ofNullable(this.dataPathPattern);
    }

    /**
     * Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Display name must be shorter than or equal to 256 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. Display name must be shorter than or equal to 256 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Identifies the storage format of the entity data. It does not apply to entities with data stored in BigQuery.
     * 
     */
    @Import(name="format", required=true)
    private Output<GoogleCloudDataplexV1StorageFormatArgs> format;

    /**
     * @return Identifies the storage format of the entity data. It does not apply to entities with data stored in BigQuery.
     * 
     */
    public Output<GoogleCloudDataplexV1StorageFormatArgs> format() {
        return this.format;
    }

    /**
     * A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores. Must begin with a letter and consist of 256 or fewer characters.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores. Must begin with a letter and consist of 256 or fewer characters.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    @Import(name="lakeId", required=true)
    private Output<String> lakeId;

    public Output<String> lakeId() {
        return this.lakeId;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The description of the data structure and layout. The schema is not included in list responses. It is only included in SCHEMA and FULL entity views of a GetEntity response.
     * 
     */
    @Import(name="schema", required=true)
    private Output<GoogleCloudDataplexV1SchemaArgs> schema;

    /**
     * @return The description of the data structure and layout. The schema is not included in list responses. It is only included in SCHEMA and FULL entity views of a GetEntity response.
     * 
     */
    public Output<GoogleCloudDataplexV1SchemaArgs> schema() {
        return this.schema;
    }

    /**
     * Immutable. Identifies the storage system of the entity data.
     * 
     */
    @Import(name="system", required=true)
    private Output<EntitySystem> system;

    /**
     * @return Immutable. Identifies the storage system of the entity data.
     * 
     */
    public Output<EntitySystem> system() {
        return this.system;
    }

    /**
     * Immutable. The type of entity.
     * 
     */
    @Import(name="type", required=true)
    private Output<EntityType> type;

    /**
     * @return Immutable. The type of entity.
     * 
     */
    public Output<EntityType> type() {
        return this.type;
    }

    /**
     * Optional. Only validate the request, but do not perform mutations. The default is false.
     * 
     */
    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    /**
     * @return Optional. Only validate the request, but do not perform mutations. The default is false.
     * 
     */
    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private EntityArgs() {}

    private EntityArgs(EntityArgs $) {
        this.asset = $.asset;
        this.dataPath = $.dataPath;
        this.dataPathPattern = $.dataPathPattern;
        this.description = $.description;
        this.displayName = $.displayName;
        this.etag = $.etag;
        this.format = $.format;
        this.id = $.id;
        this.lakeId = $.lakeId;
        this.location = $.location;
        this.project = $.project;
        this.schema = $.schema;
        this.system = $.system;
        this.type = $.type;
        this.validateOnly = $.validateOnly;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityArgs $;

        public Builder() {
            $ = new EntityArgs();
        }

        public Builder(EntityArgs defaults) {
            $ = new EntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asset Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.
         * 
         * @return builder
         * 
         */
        public Builder asset(Output<String> asset) {
            $.asset = asset;
            return this;
        }

        /**
         * @param asset Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.
         * 
         * @return builder
         * 
         */
        public Builder asset(String asset) {
            return asset(Output.of(asset));
        }

        /**
         * @param dataPath Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.
         * 
         * @return builder
         * 
         */
        public Builder dataPath(Output<String> dataPath) {
            $.dataPath = dataPath;
            return this;
        }

        /**
         * @param dataPath Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.
         * 
         * @return builder
         * 
         */
        public Builder dataPath(String dataPath) {
            return dataPath(Output.of(dataPath));
        }

        /**
         * @param dataPathPattern Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/**{@literal /}*.csv.
         * 
         * @return builder
         * 
         */
        public Builder dataPathPattern(@Nullable Output<String> dataPathPattern) {
            $.dataPathPattern = dataPathPattern;
            return this;
        }

        /**
         * @param dataPathPattern Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/**{@literal /}*.csv.
         * 
         * @return builder
         * 
         */
        public Builder dataPathPattern(String dataPathPattern) {
            return dataPathPattern(Output.of(dataPathPattern));
        }

        /**
         * @param description Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Optional. Display name must be shorter than or equal to 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. Display name must be shorter than or equal to 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param etag Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param format Identifies the storage format of the entity data. It does not apply to entities with data stored in BigQuery.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<GoogleCloudDataplexV1StorageFormatArgs> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Identifies the storage format of the entity data. It does not apply to entities with data stored in BigQuery.
         * 
         * @return builder
         * 
         */
        public Builder format(GoogleCloudDataplexV1StorageFormatArgs format) {
            return format(Output.of(format));
        }

        /**
         * @param id A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores. Must begin with a letter and consist of 256 or fewer characters.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores. Must begin with a letter and consist of 256 or fewer characters.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder lakeId(Output<String> lakeId) {
            $.lakeId = lakeId;
            return this;
        }

        public Builder lakeId(String lakeId) {
            return lakeId(Output.of(lakeId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param schema The description of the data structure and layout. The schema is not included in list responses. It is only included in SCHEMA and FULL entity views of a GetEntity response.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<GoogleCloudDataplexV1SchemaArgs> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The description of the data structure and layout. The schema is not included in list responses. It is only included in SCHEMA and FULL entity views of a GetEntity response.
         * 
         * @return builder
         * 
         */
        public Builder schema(GoogleCloudDataplexV1SchemaArgs schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param system Immutable. Identifies the storage system of the entity data.
         * 
         * @return builder
         * 
         */
        public Builder system(Output<EntitySystem> system) {
            $.system = system;
            return this;
        }

        /**
         * @param system Immutable. Identifies the storage system of the entity data.
         * 
         * @return builder
         * 
         */
        public Builder system(EntitySystem system) {
            return system(Output.of(system));
        }

        /**
         * @param type Immutable. The type of entity.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<EntityType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Immutable. The type of entity.
         * 
         * @return builder
         * 
         */
        public Builder type(EntityType type) {
            return type(Output.of(type));
        }

        /**
         * @param validateOnly Optional. Only validate the request, but do not perform mutations. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        /**
         * @param validateOnly Optional. Only validate the request, but do not perform mutations. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public EntityArgs build() {
            $.asset = Objects.requireNonNull($.asset, "expected parameter 'asset' to be non-null");
            $.dataPath = Objects.requireNonNull($.dataPath, "expected parameter 'dataPath' to be non-null");
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.lakeId = Objects.requireNonNull($.lakeId, "expected parameter 'lakeId' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.system = Objects.requireNonNull($.system, "expected parameter 'system' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
