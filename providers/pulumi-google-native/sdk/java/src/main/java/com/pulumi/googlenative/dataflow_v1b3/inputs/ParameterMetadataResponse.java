// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Metadata for a specific parameter.
 * 
 */
public final class ParameterMetadataResponse extends com.pulumi.resources.InvokeArgs {

    public static final ParameterMetadataResponse Empty = new ParameterMetadataResponse();

    /**
     * Optional. Additional metadata for describing this parameter.
     * 
     */
    @Import(name="customMetadata", required=true)
    private Map<String,String> customMetadata;

    /**
     * @return Optional. Additional metadata for describing this parameter.
     * 
     */
    public Map<String,String> customMetadata() {
        return this.customMetadata;
    }

    /**
     * The help text to display for the parameter.
     * 
     */
    @Import(name="helpText", required=true)
    private String helpText;

    /**
     * @return The help text to display for the parameter.
     * 
     */
    public String helpText() {
        return this.helpText;
    }

    /**
     * Optional. Whether the parameter is optional. Defaults to false.
     * 
     */
    @Import(name="isOptional", required=true)
    private Boolean isOptional;

    /**
     * @return Optional. Whether the parameter is optional. Defaults to false.
     * 
     */
    public Boolean isOptional() {
        return this.isOptional;
    }

    /**
     * The label to display for the parameter.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return The label to display for the parameter.
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * The name of the parameter.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the parameter.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Optional. The type of the parameter. Used for selecting input picker.
     * 
     */
    @Import(name="paramType", required=true)
    private String paramType;

    /**
     * @return Optional. The type of the parameter. Used for selecting input picker.
     * 
     */
    public String paramType() {
        return this.paramType;
    }

    /**
     * Optional. Regexes that the parameter must match.
     * 
     */
    @Import(name="regexes", required=true)
    private List<String> regexes;

    /**
     * @return Optional. Regexes that the parameter must match.
     * 
     */
    public List<String> regexes() {
        return this.regexes;
    }

    private ParameterMetadataResponse() {}

    private ParameterMetadataResponse(ParameterMetadataResponse $) {
        this.customMetadata = $.customMetadata;
        this.helpText = $.helpText;
        this.isOptional = $.isOptional;
        this.label = $.label;
        this.name = $.name;
        this.paramType = $.paramType;
        this.regexes = $.regexes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterMetadataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterMetadataResponse $;

        public Builder() {
            $ = new ParameterMetadataResponse();
        }

        public Builder(ParameterMetadataResponse defaults) {
            $ = new ParameterMetadataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param customMetadata Optional. Additional metadata for describing this parameter.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(Map<String,String> customMetadata) {
            $.customMetadata = customMetadata;
            return this;
        }

        /**
         * @param helpText The help text to display for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder helpText(String helpText) {
            $.helpText = helpText;
            return this;
        }

        /**
         * @param isOptional Optional. Whether the parameter is optional. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isOptional(Boolean isOptional) {
            $.isOptional = isOptional;
            return this;
        }

        /**
         * @param label The label to display for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param name The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param paramType Optional. The type of the parameter. Used for selecting input picker.
         * 
         * @return builder
         * 
         */
        public Builder paramType(String paramType) {
            $.paramType = paramType;
            return this;
        }

        /**
         * @param regexes Optional. Regexes that the parameter must match.
         * 
         * @return builder
         * 
         */
        public Builder regexes(List<String> regexes) {
            $.regexes = regexes;
            return this;
        }

        /**
         * @param regexes Optional. Regexes that the parameter must match.
         * 
         * @return builder
         * 
         */
        public Builder regexes(String... regexes) {
            return regexes(List.of(regexes));
        }

        public ParameterMetadataResponse build() {
            $.customMetadata = Objects.requireNonNull($.customMetadata, "expected parameter 'customMetadata' to be non-null");
            $.helpText = Objects.requireNonNull($.helpText, "expected parameter 'helpText' to be non-null");
            $.isOptional = Objects.requireNonNull($.isOptional, "expected parameter 'isOptional' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.paramType = Objects.requireNonNull($.paramType, "expected parameter 'paramType' to be non-null");
            $.regexes = Objects.requireNonNull($.regexes, "expected parameter 'regexes' to be non-null");
            return $;
        }
    }

}
