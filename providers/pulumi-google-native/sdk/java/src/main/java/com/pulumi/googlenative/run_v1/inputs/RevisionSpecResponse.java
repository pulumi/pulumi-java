// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1.inputs.ContainerResponse;
import com.pulumi.googlenative.run_v1.inputs.LocalObjectReferenceResponse;
import com.pulumi.googlenative.run_v1.inputs.VolumeResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * RevisionSpec holds the desired state of the Revision (from the client).
 * 
 */
public final class RevisionSpecResponse extends com.pulumi.resources.InvokeArgs {

    public static final RevisionSpecResponse Empty = new RevisionSpecResponse();

    /**
     * ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. Cloud Run fully managed: supported, defaults to 80 Cloud Run for Anthos: supported, defaults to 0, which means concurrency to the application is not limited, and the system decides the target concurrency for the autoscaler.
     * 
     */
    @Import(name="containerConcurrency", required=true)
    private Integer containerConcurrency;

    /**
     * @return ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. Cloud Run fully managed: supported, defaults to 80 Cloud Run for Anthos: supported, defaults to 0, which means concurrency to the application is not limited, and the system decides the target concurrency for the autoscaler.
     * 
     */
    public Integer containerConcurrency() {
        return this.containerConcurrency;
    }

    /**
     * Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided. The runtime contract is documented here: https://github.com/knative/serving/blob/main/docs/runtime-contract.md
     * 
     */
    @Import(name="containers", required=true)
    private List<ContainerResponse> containers;

    /**
     * @return Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided. The runtime contract is documented here: https://github.com/knative/serving/blob/main/docs/runtime-contract.md
     * 
     */
    public List<ContainerResponse> containers() {
        return this.containers;
    }

    /**
     * Indicates whether information about services should be injected into pod&#39;s environment variables, matching the syntax of Docker links. Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported, defaults to true.
     * 
     */
    @Import(name="enableServiceLinks", required=true)
    private Boolean enableServiceLinks;

    /**
     * @return Indicates whether information about services should be injected into pod&#39;s environment variables, matching the syntax of Docker links. Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported, defaults to true.
     * 
     */
    public Boolean enableServiceLinks() {
        return this.enableServiceLinks;
    }

    /**
     * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported.
     * 
     */
    @Import(name="imagePullSecrets", required=true)
    private List<LocalObjectReferenceResponse> imagePullSecrets;

    /**
     * @return ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported.
     * 
     */
    public List<LocalObjectReferenceResponse> imagePullSecrets() {
        return this.imagePullSecrets;
    }

    /**
     * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
     * 
     */
    @Import(name="serviceAccountName", required=true)
    private String serviceAccountName;

    /**
     * @return Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    /**
     * TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run fully managed: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour). Cloud Run for Anthos: defaults to 300 seconds (5 minutes). Maximum allowed value is configurable by the cluster operator.
     * 
     */
    @Import(name="timeoutSeconds", required=true)
    private Integer timeoutSeconds;

    /**
     * @return TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run fully managed: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour). Cloud Run for Anthos: defaults to 300 seconds (5 minutes). Maximum allowed value is configurable by the cluster operator.
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }

    @Import(name="volumes", required=true)
    private List<VolumeResponse> volumes;

    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    private RevisionSpecResponse() {}

    private RevisionSpecResponse(RevisionSpecResponse $) {
        this.containerConcurrency = $.containerConcurrency;
        this.containers = $.containers;
        this.enableServiceLinks = $.enableServiceLinks;
        this.imagePullSecrets = $.imagePullSecrets;
        this.serviceAccountName = $.serviceAccountName;
        this.timeoutSeconds = $.timeoutSeconds;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RevisionSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RevisionSpecResponse $;

        public Builder() {
            $ = new RevisionSpecResponse();
        }

        public Builder(RevisionSpecResponse defaults) {
            $ = new RevisionSpecResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerConcurrency ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. Cloud Run fully managed: supported, defaults to 80 Cloud Run for Anthos: supported, defaults to 0, which means concurrency to the application is not limited, and the system decides the target concurrency for the autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder containerConcurrency(Integer containerConcurrency) {
            $.containerConcurrency = containerConcurrency;
            return this;
        }

        /**
         * @param containers Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided. The runtime contract is documented here: https://github.com/knative/serving/blob/main/docs/runtime-contract.md
         * 
         * @return builder
         * 
         */
        public Builder containers(List<ContainerResponse> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided. The runtime contract is documented here: https://github.com/knative/serving/blob/main/docs/runtime-contract.md
         * 
         * @return builder
         * 
         */
        public Builder containers(ContainerResponse... containers) {
            return containers(List.of(containers));
        }

        /**
         * @param enableServiceLinks Indicates whether information about services should be injected into pod&#39;s environment variables, matching the syntax of Docker links. Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported, defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder enableServiceLinks(Boolean enableServiceLinks) {
            $.enableServiceLinks = enableServiceLinks;
            return this;
        }

        /**
         * @param imagePullSecrets ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(List<LocalObjectReferenceResponse> imagePullSecrets) {
            $.imagePullSecrets = imagePullSecrets;
            return this;
        }

        /**
         * @param imagePullSecrets ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod Cloud Run fully managed: Not supported. Cloud Run for Anthos: supported.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(LocalObjectReferenceResponse... imagePullSecrets) {
            return imagePullSecrets(List.of(imagePullSecrets));
        }

        /**
         * @param serviceAccountName Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(String serviceAccountName) {
            $.serviceAccountName = serviceAccountName;
            return this;
        }

        /**
         * @param timeoutSeconds TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run fully managed: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour). Cloud Run for Anthos: defaults to 300 seconds (5 minutes). Maximum allowed value is configurable by the cluster operator.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder volumes(List<VolumeResponse> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }

        public RevisionSpecResponse build() {
            $.containerConcurrency = Objects.requireNonNull($.containerConcurrency, "expected parameter 'containerConcurrency' to be non-null");
            $.containers = Objects.requireNonNull($.containers, "expected parameter 'containers' to be non-null");
            $.enableServiceLinks = Objects.requireNonNull($.enableServiceLinks, "expected parameter 'enableServiceLinks' to be non-null");
            $.imagePullSecrets = Objects.requireNonNull($.imagePullSecrets, "expected parameter 'imagePullSecrets' to be non-null");
            $.serviceAccountName = Objects.requireNonNull($.serviceAccountName, "expected parameter 'serviceAccountName' to be non-null");
            $.timeoutSeconds = Objects.requireNonNull($.timeoutSeconds, "expected parameter 'timeoutSeconds' to be non-null");
            $.volumes = Objects.requireNonNull($.volumes, "expected parameter 'volumes' to be non-null");
            return $;
        }
    }

}
