// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * For display only. Metadata associated with a Compute Engine forwarding rule.
 * 
 */
public final class ForwardingRuleInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final ForwardingRuleInfoResponse Empty = new ForwardingRuleInfoResponse();

    /**
     * Name of a Compute Engine forwarding rule.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return Name of a Compute Engine forwarding rule.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Port range defined in the forwarding rule that matches the test.
     * 
     */
    @Import(name="matchedPortRange", required=true)
    private String matchedPortRange;

    /**
     * @return Port range defined in the forwarding rule that matches the test.
     * 
     */
    public String matchedPortRange() {
        return this.matchedPortRange;
    }

    /**
     * Protocol defined in the forwarding rule that matches the test.
     * 
     */
    @Import(name="matchedProtocol", required=true)
    private String matchedProtocol;

    /**
     * @return Protocol defined in the forwarding rule that matches the test.
     * 
     */
    public String matchedProtocol() {
        return this.matchedProtocol;
    }

    /**
     * Network URI. Only valid for Internal Load Balancer.
     * 
     */
    @Import(name="networkUri", required=true)
    private String networkUri;

    /**
     * @return Network URI. Only valid for Internal Load Balancer.
     * 
     */
    public String networkUri() {
        return this.networkUri;
    }

    /**
     * Target type of the forwarding rule.
     * 
     */
    @Import(name="target", required=true)
    private String target;

    /**
     * @return Target type of the forwarding rule.
     * 
     */
    public String target() {
        return this.target;
    }

    /**
     * URI of a Compute Engine forwarding rule.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    /**
     * @return URI of a Compute Engine forwarding rule.
     * 
     */
    public String uri() {
        return this.uri;
    }

    /**
     * VIP of the forwarding rule.
     * 
     */
    @Import(name="vip", required=true)
    private String vip;

    /**
     * @return VIP of the forwarding rule.
     * 
     */
    public String vip() {
        return this.vip;
    }

    private ForwardingRuleInfoResponse() {}

    private ForwardingRuleInfoResponse(ForwardingRuleInfoResponse $) {
        this.displayName = $.displayName;
        this.matchedPortRange = $.matchedPortRange;
        this.matchedProtocol = $.matchedProtocol;
        this.networkUri = $.networkUri;
        this.target = $.target;
        this.uri = $.uri;
        this.vip = $.vip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleInfoResponse $;

        public Builder() {
            $ = new ForwardingRuleInfoResponse();
        }

        public Builder(ForwardingRuleInfoResponse defaults) {
            $ = new ForwardingRuleInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Name of a Compute Engine forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param matchedPortRange Port range defined in the forwarding rule that matches the test.
         * 
         * @return builder
         * 
         */
        public Builder matchedPortRange(String matchedPortRange) {
            $.matchedPortRange = matchedPortRange;
            return this;
        }

        /**
         * @param matchedProtocol Protocol defined in the forwarding rule that matches the test.
         * 
         * @return builder
         * 
         */
        public Builder matchedProtocol(String matchedProtocol) {
            $.matchedProtocol = matchedProtocol;
            return this;
        }

        /**
         * @param networkUri Network URI. Only valid for Internal Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder networkUri(String networkUri) {
            $.networkUri = networkUri;
            return this;
        }

        /**
         * @param target Target type of the forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            $.target = target;
            return this;
        }

        /**
         * @param uri URI of a Compute Engine forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param vip VIP of the forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder vip(String vip) {
            $.vip = vip;
            return this;
        }

        public ForwardingRuleInfoResponse build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.matchedPortRange = Objects.requireNonNull($.matchedPortRange, "expected parameter 'matchedPortRange' to be non-null");
            $.matchedProtocol = Objects.requireNonNull($.matchedProtocol, "expected parameter 'matchedProtocol' to be non-null");
            $.networkUri = Objects.requireNonNull($.networkUri, "expected parameter 'networkUri' to be non-null");
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            $.vip = Objects.requireNonNull($.vip, "expected parameter 'vip' to be non-null");
            return $;
        }
    }

}
