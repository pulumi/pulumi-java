// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1alpha1.enums.VersionKind;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
 * 
 */
public final class VersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VersionArgs Empty = new VersionArgs();

    /**
     * Used to correct mistakes in the version numbering scheme.
     * 
     */
    @Import(name="epoch")
    private @Nullable Output<Integer> epoch;

    /**
     * @return Used to correct mistakes in the version numbering scheme.
     * 
     */
    public Optional<Output<Integer>> epoch() {
        return Optional.ofNullable(this.epoch);
    }

    /**
     * Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it&#39;s not
     * 
     */
    @Import(name="inclusive")
    private @Nullable Output<Boolean> inclusive;

    /**
     * @return Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it&#39;s not
     * 
     */
    public Optional<Output<Boolean>> inclusive() {
        return Optional.ofNullable(this.inclusive);
    }

    /**
     * Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<VersionKind> kind;

    /**
     * @return Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
     * 
     */
    public Optional<Output<VersionKind>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The main part of the version name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The main part of the version name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The iteration of the package build from the above version.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return The iteration of the package build from the above version.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    private VersionArgs() {}

    private VersionArgs(VersionArgs $) {
        this.epoch = $.epoch;
        this.inclusive = $.inclusive;
        this.kind = $.kind;
        this.name = $.name;
        this.revision = $.revision;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VersionArgs $;

        public Builder() {
            $ = new VersionArgs();
        }

        public Builder(VersionArgs defaults) {
            $ = new VersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param epoch Used to correct mistakes in the version numbering scheme.
         * 
         * @return builder
         * 
         */
        public Builder epoch(@Nullable Output<Integer> epoch) {
            $.epoch = epoch;
            return this;
        }

        /**
         * @param epoch Used to correct mistakes in the version numbering scheme.
         * 
         * @return builder
         * 
         */
        public Builder epoch(Integer epoch) {
            return epoch(Output.of(epoch));
        }

        /**
         * @param inclusive Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it&#39;s not
         * 
         * @return builder
         * 
         */
        public Builder inclusive(@Nullable Output<Boolean> inclusive) {
            $.inclusive = inclusive;
            return this;
        }

        /**
         * @param inclusive Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it&#39;s not
         * 
         * @return builder
         * 
         */
        public Builder inclusive(Boolean inclusive) {
            return inclusive(Output.of(inclusive));
        }

        /**
         * @param kind Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<VersionKind> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
         * 
         * @return builder
         * 
         */
        public Builder kind(VersionKind kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name The main part of the version name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The main part of the version name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param revision The iteration of the package build from the above version.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision The iteration of the package build from the above version.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        public VersionArgs build() {
            return $;
        }
    }

}
