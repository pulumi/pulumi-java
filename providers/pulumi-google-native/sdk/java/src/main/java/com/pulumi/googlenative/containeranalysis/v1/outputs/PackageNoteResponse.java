// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1.outputs.DigestResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.DistributionResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.LicenseResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.VersionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class PackageNoteResponse {
    /**
     * @return The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     * 
     */
    private final String architecture;
    /**
     * @return The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     * 
     */
    private final String cpeUri;
    /**
     * @return The description of this package.
     * 
     */
    private final String description;
    /**
     * @return Hash value, typically a file digest, that allows unique identification a specific package.
     * 
     */
    private final List<DigestResponse> digest;
    /**
     * @return Deprecated. The various channels by which a package is distributed.
     * 
     * @deprecated
     * Deprecated. The various channels by which a package is distributed.
     * 
     */
    @Deprecated /* Deprecated. The various channels by which a package is distributed. */
    private final List<DistributionResponse> distribution;
    /**
     * @return Licenses that have been declared by the authors of the package.
     * 
     */
    private final LicenseResponse license;
    /**
     * @return A freeform text denoting the maintainer of this package.
     * 
     */
    private final String maintainer;
    /**
     * @return Immutable. The name of the package.
     * 
     */
    private final String name;
    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    private final String packageType;
    /**
     * @return The homepage for this package.
     * 
     */
    private final String url;
    /**
     * @return The version of the package.
     * 
     */
    private final VersionResponse version;

    @CustomType.Constructor
    private PackageNoteResponse(
        @CustomType.Parameter("architecture") String architecture,
        @CustomType.Parameter("cpeUri") String cpeUri,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("digest") List<DigestResponse> digest,
        @CustomType.Parameter("distribution") List<DistributionResponse> distribution,
        @CustomType.Parameter("license") LicenseResponse license,
        @CustomType.Parameter("maintainer") String maintainer,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("packageType") String packageType,
        @CustomType.Parameter("url") String url,
        @CustomType.Parameter("version") VersionResponse version) {
        this.architecture = architecture;
        this.cpeUri = cpeUri;
        this.description = description;
        this.digest = digest;
        this.distribution = distribution;
        this.license = license;
        this.maintainer = maintainer;
        this.name = name;
        this.packageType = packageType;
        this.url = url;
        this.version = version;
    }

    /**
     * @return The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     * 
     */
    public String cpeUri() {
        return this.cpeUri;
    }
    /**
     * @return The description of this package.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Hash value, typically a file digest, that allows unique identification a specific package.
     * 
     */
    public List<DigestResponse> digest() {
        return this.digest;
    }
    /**
     * @return Deprecated. The various channels by which a package is distributed.
     * 
     * @deprecated
     * Deprecated. The various channels by which a package is distributed.
     * 
     */
    @Deprecated /* Deprecated. The various channels by which a package is distributed. */
    public List<DistributionResponse> distribution() {
        return this.distribution;
    }
    /**
     * @return Licenses that have been declared by the authors of the package.
     * 
     */
    public LicenseResponse license() {
        return this.license;
    }
    /**
     * @return A freeform text denoting the maintainer of this package.
     * 
     */
    public String maintainer() {
        return this.maintainer;
    }
    /**
     * @return Immutable. The name of the package.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return The homepage for this package.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The version of the package.
     * 
     */
    public VersionResponse version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackageNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String architecture;
        private String cpeUri;
        private String description;
        private List<DigestResponse> digest;
        private List<DistributionResponse> distribution;
        private LicenseResponse license;
        private String maintainer;
        private String name;
        private String packageType;
        private String url;
        private VersionResponse version;

        public Builder() {
    	      // Empty
        }

        public Builder(PackageNoteResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.cpeUri = defaults.cpeUri;
    	      this.description = defaults.description;
    	      this.digest = defaults.digest;
    	      this.distribution = defaults.distribution;
    	      this.license = defaults.license;
    	      this.maintainer = defaults.maintainer;
    	      this.name = defaults.name;
    	      this.packageType = defaults.packageType;
    	      this.url = defaults.url;
    	      this.version = defaults.version;
        }

        public Builder architecture(String architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }
        public Builder cpeUri(String cpeUri) {
            this.cpeUri = Objects.requireNonNull(cpeUri);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder digest(List<DigestResponse> digest) {
            this.digest = Objects.requireNonNull(digest);
            return this;
        }
        public Builder digest(DigestResponse... digest) {
            return digest(List.of(digest));
        }
        public Builder distribution(List<DistributionResponse> distribution) {
            this.distribution = Objects.requireNonNull(distribution);
            return this;
        }
        public Builder distribution(DistributionResponse... distribution) {
            return distribution(List.of(distribution));
        }
        public Builder license(LicenseResponse license) {
            this.license = Objects.requireNonNull(license);
            return this;
        }
        public Builder maintainer(String maintainer) {
            this.maintainer = Objects.requireNonNull(maintainer);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder packageType(String packageType) {
            this.packageType = Objects.requireNonNull(packageType);
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public Builder version(VersionResponse version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public PackageNoteResponse build() {
            return new PackageNoteResponse(architecture, cpeUri, description, digest, distribution, license, maintainer, name, packageType, url, version);
        }
    }
}
