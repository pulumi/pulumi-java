// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * An internal checker allows Uptime checks to run on private/internal GCP resources.
 * 
 */
public final class InternalCheckerResponse extends com.pulumi.resources.InvokeArgs {

    public static final InternalCheckerResponse Empty = new InternalCheckerResponse();

    /**
     * The checker&#39;s human-readable name. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.
     * 
     */
    @Import(name="gcpZone", required=true)
    private String gcpZone;

    public String gcpZone() {
        return this.gcpZone;
    }

    /**
     * A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Stackdriver Workspace project for the Uptime check config associated with the internal checker.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: &#34;default&#34;).
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * The GCP project ID where the internal checker lives. Not necessary the same as the Workspace project.
     * 
     */
    @Import(name="peerProjectId", required=true)
    private String peerProjectId;

    public String peerProjectId() {
        return this.peerProjectId;
    }

    /**
     * The current operational state of the internal checker.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    private InternalCheckerResponse() {}

    private InternalCheckerResponse(InternalCheckerResponse $) {
        this.displayName = $.displayName;
        this.gcpZone = $.gcpZone;
        this.name = $.name;
        this.network = $.network;
        this.peerProjectId = $.peerProjectId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InternalCheckerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InternalCheckerResponse $;

        public Builder() {
            $ = new InternalCheckerResponse();
        }

        public Builder(InternalCheckerResponse defaults) {
            $ = new InternalCheckerResponse(Objects.requireNonNull(defaults));
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder gcpZone(String gcpZone) {
            $.gcpZone = gcpZone;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder peerProjectId(String peerProjectId) {
            $.peerProjectId = peerProjectId;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public InternalCheckerResponse build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.gcpZone = Objects.requireNonNull($.gcpZone, "expected parameter 'gcpZone' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.peerProjectId = Objects.requireNonNull($.peerProjectId, "expected parameter 'peerProjectId' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
