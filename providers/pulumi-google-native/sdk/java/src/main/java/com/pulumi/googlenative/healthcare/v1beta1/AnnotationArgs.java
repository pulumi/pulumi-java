// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.AnnotationSourceArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.ImageAnnotationArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.ResourceAnnotationArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.SensitiveTextAnnotationArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnnotationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnnotationArgs Empty = new AnnotationArgs();

    /**
     * Details of the source.
     * 
     */
    @Import(name="annotationSource")
    private @Nullable Output<AnnotationSourceArgs> annotationSource;

    /**
     * @return Details of the source.
     * 
     */
    public Optional<Output<AnnotationSourceArgs>> annotationSource() {
        return Optional.ofNullable(this.annotationSource);
    }

    @Import(name="annotationStoreId", required=true)
    private Output<String> annotationStoreId;

    public Output<String> annotationStoreId() {
        return this.annotationStoreId;
    }

    /**
     * Additional information for this annotation record, such as annotator and verifier information or study campaign.
     * 
     */
    @Import(name="customData")
    private @Nullable Output<Map<String,String>> customData;

    /**
     * @return Additional information for this annotation record, such as annotator and verifier information or study campaign.
     * 
     */
    public Optional<Output<Map<String,String>>> customData() {
        return Optional.ofNullable(this.customData);
    }

    @Import(name="datasetId", required=true)
    private Output<String> datasetId;

    public Output<String> datasetId() {
        return this.datasetId;
    }

    /**
     * Annotations for images. For example, bounding polygons.
     * 
     */
    @Import(name="imageAnnotation")
    private @Nullable Output<ImageAnnotationArgs> imageAnnotation;

    /**
     * @return Annotations for images. For example, bounding polygons.
     * 
     */
    public Optional<Output<ImageAnnotationArgs>> imageAnnotation() {
        return Optional.ofNullable(this.imageAnnotation);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Annotations for resource. For example, classification tags.
     * 
     */
    @Import(name="resourceAnnotation")
    private @Nullable Output<ResourceAnnotationArgs> resourceAnnotation;

    /**
     * @return Annotations for resource. For example, classification tags.
     * 
     */
    public Optional<Output<ResourceAnnotationArgs>> resourceAnnotation() {
        return Optional.ofNullable(this.resourceAnnotation);
    }

    /**
     * Annotations for sensitive texts. For example, a range that describes the location of sensitive text.
     * 
     */
    @Import(name="textAnnotation")
    private @Nullable Output<SensitiveTextAnnotationArgs> textAnnotation;

    /**
     * @return Annotations for sensitive texts. For example, a range that describes the location of sensitive text.
     * 
     */
    public Optional<Output<SensitiveTextAnnotationArgs>> textAnnotation() {
        return Optional.ofNullable(this.textAnnotation);
    }

    private AnnotationArgs() {}

    private AnnotationArgs(AnnotationArgs $) {
        this.annotationSource = $.annotationSource;
        this.annotationStoreId = $.annotationStoreId;
        this.customData = $.customData;
        this.datasetId = $.datasetId;
        this.imageAnnotation = $.imageAnnotation;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.resourceAnnotation = $.resourceAnnotation;
        this.textAnnotation = $.textAnnotation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnnotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnnotationArgs $;

        public Builder() {
            $ = new AnnotationArgs();
        }

        public Builder(AnnotationArgs defaults) {
            $ = new AnnotationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotationSource Details of the source.
         * 
         * @return builder
         * 
         */
        public Builder annotationSource(@Nullable Output<AnnotationSourceArgs> annotationSource) {
            $.annotationSource = annotationSource;
            return this;
        }

        /**
         * @param annotationSource Details of the source.
         * 
         * @return builder
         * 
         */
        public Builder annotationSource(AnnotationSourceArgs annotationSource) {
            return annotationSource(Output.of(annotationSource));
        }

        public Builder annotationStoreId(Output<String> annotationStoreId) {
            $.annotationStoreId = annotationStoreId;
            return this;
        }

        public Builder annotationStoreId(String annotationStoreId) {
            return annotationStoreId(Output.of(annotationStoreId));
        }

        /**
         * @param customData Additional information for this annotation record, such as annotator and verifier information or study campaign.
         * 
         * @return builder
         * 
         */
        public Builder customData(@Nullable Output<Map<String,String>> customData) {
            $.customData = customData;
            return this;
        }

        /**
         * @param customData Additional information for this annotation record, such as annotator and verifier information or study campaign.
         * 
         * @return builder
         * 
         */
        public Builder customData(Map<String,String> customData) {
            return customData(Output.of(customData));
        }

        public Builder datasetId(Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        /**
         * @param imageAnnotation Annotations for images. For example, bounding polygons.
         * 
         * @return builder
         * 
         */
        public Builder imageAnnotation(@Nullable Output<ImageAnnotationArgs> imageAnnotation) {
            $.imageAnnotation = imageAnnotation;
            return this;
        }

        /**
         * @param imageAnnotation Annotations for images. For example, bounding polygons.
         * 
         * @return builder
         * 
         */
        public Builder imageAnnotation(ImageAnnotationArgs imageAnnotation) {
            return imageAnnotation(Output.of(imageAnnotation));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param resourceAnnotation Annotations for resource. For example, classification tags.
         * 
         * @return builder
         * 
         */
        public Builder resourceAnnotation(@Nullable Output<ResourceAnnotationArgs> resourceAnnotation) {
            $.resourceAnnotation = resourceAnnotation;
            return this;
        }

        /**
         * @param resourceAnnotation Annotations for resource. For example, classification tags.
         * 
         * @return builder
         * 
         */
        public Builder resourceAnnotation(ResourceAnnotationArgs resourceAnnotation) {
            return resourceAnnotation(Output.of(resourceAnnotation));
        }

        /**
         * @param textAnnotation Annotations for sensitive texts. For example, a range that describes the location of sensitive text.
         * 
         * @return builder
         * 
         */
        public Builder textAnnotation(@Nullable Output<SensitiveTextAnnotationArgs> textAnnotation) {
            $.textAnnotation = textAnnotation;
            return this;
        }

        /**
         * @param textAnnotation Annotations for sensitive texts. For example, a range that describes the location of sensitive text.
         * 
         * @return builder
         * 
         */
        public Builder textAnnotation(SensitiveTextAnnotationArgs textAnnotation) {
            return textAnnotation(Output.of(textAnnotation));
        }

        public AnnotationArgs build() {
            $.annotationStoreId = Objects.requireNonNull($.annotationStoreId, "expected parameter 'annotationStoreId' to be non-null");
            $.datasetId = Objects.requireNonNull($.datasetId, "expected parameter 'datasetId' to be non-null");
            return $;
        }
    }

}
