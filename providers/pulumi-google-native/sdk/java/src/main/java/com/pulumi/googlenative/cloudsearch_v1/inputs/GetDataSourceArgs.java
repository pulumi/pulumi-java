// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetDataSourceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSourceArgs Empty = new GetDataSourceArgs();

    @Import(name="datasourceId", required=true)
    private Output<String> datasourceId;

    public Output<String> datasourceId() {
        return this.datasourceId;
    }

    @Import(name="debugOptionsEnableDebugging")
    private Output</* @Nullable */ String> debugOptionsEnableDebugging;

    public Output</* @Nullable */ String> debugOptionsEnableDebugging() {
        return this.debugOptionsEnableDebugging;
    }

    private GetDataSourceArgs() {}

    private GetDataSourceArgs(GetDataSourceArgs $) {
        this.datasourceId = $.datasourceId;
        this.debugOptionsEnableDebugging = $.debugOptionsEnableDebugging;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSourceArgs $;

        public Builder() {
            $ = new GetDataSourceArgs();
        }

        public Builder(GetDataSourceArgs defaults) {
            $ = new GetDataSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder datasourceId(Output<String> datasourceId) {
            $.datasourceId = datasourceId;
            return this;
        }

        public Builder datasourceId(String datasourceId) {
            return datasourceId(Output.of(datasourceId));
        }

        public Builder debugOptionsEnableDebugging(Output</* @Nullable */ String> debugOptionsEnableDebugging) {
            $.debugOptionsEnableDebugging = debugOptionsEnableDebugging;
            return this;
        }

        public Builder debugOptionsEnableDebugging(@Nullable String debugOptionsEnableDebugging) {
            return debugOptionsEnableDebugging(Output.of(debugOptionsEnableDebugging));
        }

        public GetDataSourceArgs build() {
            $.datasourceId = Objects.requireNonNull($.datasourceId, "expected parameter 'datasourceId' to be non-null");
            return $;
        }
    }

}
