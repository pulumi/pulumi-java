// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class MetricResponse {
    /**
     * @return Optional. Specify one or more available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course (for the SPARK metric source, any Spark metric (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified).Provide metrics in the following format: METRIC_SOURCE: INSTANCE:GROUP:METRIC Use camelcase as appropriate.Examples: yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used Notes: Only the specified overridden metrics will be collected for the metric source. For example, if one or more spark:executive metrics are listed as metric overrides, other SPARK metrics will not be collected. The collection of the default metrics for other OSS metric sources is unaffected. For example, if both SPARK andd YARN metric sources are enabled, and overrides are provided for Spark metrics only, all default YARN metrics will be collected.
     * 
     */
    private final List<String> metricOverrides;
    /**
     * @return Default metrics are collected unless metricOverrides are specified for the metric source (see Available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) for more information).
     * 
     */
    private final String metricSource;

    @CustomType.Constructor
    private MetricResponse(
        @CustomType.Parameter("metricOverrides") List<String> metricOverrides,
        @CustomType.Parameter("metricSource") String metricSource) {
        this.metricOverrides = metricOverrides;
        this.metricSource = metricSource;
    }

    /**
     * @return Optional. Specify one or more available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course (for the SPARK metric source, any Spark metric (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified).Provide metrics in the following format: METRIC_SOURCE: INSTANCE:GROUP:METRIC Use camelcase as appropriate.Examples: yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used Notes: Only the specified overridden metrics will be collected for the metric source. For example, if one or more spark:executive metrics are listed as metric overrides, other SPARK metrics will not be collected. The collection of the default metrics for other OSS metric sources is unaffected. For example, if both SPARK andd YARN metric sources are enabled, and overrides are provided for Spark metrics only, all default YARN metrics will be collected.
     * 
     */
    public List<String> metricOverrides() {
        return this.metricOverrides;
    }
    /**
     * @return Default metrics are collected unless metricOverrides are specified for the metric source (see Available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) for more information).
     * 
     */
    public String metricSource() {
        return this.metricSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> metricOverrides;
        private String metricSource;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricOverrides = defaults.metricOverrides;
    	      this.metricSource = defaults.metricSource;
        }

        public Builder metricOverrides(List<String> metricOverrides) {
            this.metricOverrides = Objects.requireNonNull(metricOverrides);
            return this;
        }
        public Builder metricOverrides(String... metricOverrides) {
            return metricOverrides(List.of(metricOverrides));
        }
        public Builder metricSource(String metricSource) {
            this.metricSource = Objects.requireNonNull(metricSource);
            return this;
        }        public MetricResponse build() {
            return new MetricResponse(metricOverrides, metricSource);
        }
    }
}
