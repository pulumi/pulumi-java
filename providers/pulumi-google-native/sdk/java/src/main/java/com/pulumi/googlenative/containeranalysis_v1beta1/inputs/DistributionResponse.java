// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.VersionResponse;
import java.lang.String;
import java.util.Objects;


/**
 * This represents a particular channel of distribution for a given package. E.g., Debian&#39;s jessie-backports dpkg mirror.
 * 
 */
public final class DistributionResponse extends com.pulumi.resources.InvokeArgs {

    public static final DistributionResponse Empty = new DistributionResponse();

    /**
     * The CPU architecture for which packages in this distribution channel were built.
     * 
     */
    @Import(name="architecture", required=true)
    private String architecture;

    public String architecture() {
        return this.architecture;
    }

    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     * 
     */
    @Import(name="cpeUri", required=true)
    private String cpeUri;

    public String cpeUri() {
        return this.cpeUri;
    }

    /**
     * The distribution channel-specific description of this package.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * The latest available version of this package in this distribution channel.
     * 
     */
    @Import(name="latestVersion", required=true)
    private VersionResponse latestVersion;

    public VersionResponse latestVersion() {
        return this.latestVersion;
    }

    /**
     * A freeform string denoting the maintainer of this package.
     * 
     */
    @Import(name="maintainer", required=true)
    private String maintainer;

    public String maintainer() {
        return this.maintainer;
    }

    /**
     * The distribution channel-specific homepage for this package.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private DistributionResponse() {}

    private DistributionResponse(DistributionResponse $) {
        this.architecture = $.architecture;
        this.cpeUri = $.cpeUri;
        this.description = $.description;
        this.latestVersion = $.latestVersion;
        this.maintainer = $.maintainer;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionResponse $;

        public Builder() {
            $ = new DistributionResponse();
        }

        public Builder(DistributionResponse defaults) {
            $ = new DistributionResponse(Objects.requireNonNull(defaults));
        }

        public Builder architecture(String architecture) {
            $.architecture = architecture;
            return this;
        }

        public Builder cpeUri(String cpeUri) {
            $.cpeUri = cpeUri;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder latestVersion(VersionResponse latestVersion) {
            $.latestVersion = latestVersion;
            return this;
        }

        public Builder maintainer(String maintainer) {
            $.maintainer = maintainer;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public DistributionResponse build() {
            $.architecture = Objects.requireNonNull($.architecture, "expected parameter 'architecture' to be non-null");
            $.cpeUri = Objects.requireNonNull($.cpeUri, "expected parameter 'cpeUri' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.latestVersion = Objects.requireNonNull($.latestVersion, "expected parameter 'latestVersion' to be non-null");
            $.maintainer = Objects.requireNonNull($.maintainer, "expected parameter 'maintainer' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
