// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies Kerberos related configuration.
 * 
 */
public final class KerberosConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final KerberosConfigResponse Empty = new KerberosConfigResponse();

    /**
     * Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    @Import(name="crossRealmTrustAdminServer", required=true)
    private String crossRealmTrustAdminServer;

    /**
     * @return Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    public String crossRealmTrustAdminServer() {
        return this.crossRealmTrustAdminServer;
    }

    /**
     * Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    @Import(name="crossRealmTrustKdc", required=true)
    private String crossRealmTrustKdc;

    /**
     * @return Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    public String crossRealmTrustKdc() {
        return this.crossRealmTrustKdc;
    }

    /**
     * Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     * 
     */
    @Import(name="crossRealmTrustRealm", required=true)
    private String crossRealmTrustRealm;

    /**
     * @return Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     * 
     */
    public String crossRealmTrustRealm() {
        return this.crossRealmTrustRealm;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     * 
     */
    @Import(name="crossRealmTrustSharedPasswordUri", required=true)
    private String crossRealmTrustSharedPasswordUri;

    /**
     * @return Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     * 
     */
    public String crossRealmTrustSharedPasswordUri() {
        return this.crossRealmTrustSharedPasswordUri;
    }

    /**
     * Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     * 
     */
    @Import(name="enableKerberos", required=true)
    private Boolean enableKerberos;

    /**
     * @return Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     * 
     */
    public Boolean enableKerberos() {
        return this.enableKerberos;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     * 
     */
    @Import(name="kdcDbKeyUri", required=true)
    private String kdcDbKeyUri;

    /**
     * @return Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     * 
     */
    public String kdcDbKeyUri() {
        return this.kdcDbKeyUri;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @Import(name="keyPasswordUri", required=true)
    private String keyPasswordUri;

    /**
     * @return Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    public String keyPasswordUri() {
        return this.keyPasswordUri;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @Import(name="keystorePasswordUri", required=true)
    private String keystorePasswordUri;

    /**
     * @return Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    public String keystorePasswordUri() {
        return this.keystorePasswordUri;
    }

    /**
     * Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    @Import(name="keystoreUri", required=true)
    private String keystoreUri;

    /**
     * @return Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    public String keystoreUri() {
        return this.keystoreUri;
    }

    /**
     * Optional. The uri of the KMS key used to encrypt various sensitive files.
     * 
     */
    @Import(name="kmsKeyUri", required=true)
    private String kmsKeyUri;

    /**
     * @return Optional. The uri of the KMS key used to encrypt various sensitive files.
     * 
     */
    public String kmsKeyUri() {
        return this.kmsKeyUri;
    }

    /**
     * Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     * 
     */
    @Import(name="realm", required=true)
    private String realm;

    /**
     * @return Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     * 
     */
    public String realm() {
        return this.realm;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     * 
     */
    @Import(name="rootPrincipalPasswordUri", required=true)
    private String rootPrincipalPasswordUri;

    /**
     * @return Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     * 
     */
    public String rootPrincipalPasswordUri() {
        return this.rootPrincipalPasswordUri;
    }

    /**
     * Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     * 
     */
    @Import(name="tgtLifetimeHours", required=true)
    private Integer tgtLifetimeHours;

    /**
     * @return Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     * 
     */
    public Integer tgtLifetimeHours() {
        return this.tgtLifetimeHours;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @Import(name="truststorePasswordUri", required=true)
    private String truststorePasswordUri;

    /**
     * @return Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    public String truststorePasswordUri() {
        return this.truststorePasswordUri;
    }

    /**
     * Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    @Import(name="truststoreUri", required=true)
    private String truststoreUri;

    /**
     * @return Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    public String truststoreUri() {
        return this.truststoreUri;
    }

    private KerberosConfigResponse() {}

    private KerberosConfigResponse(KerberosConfigResponse $) {
        this.crossRealmTrustAdminServer = $.crossRealmTrustAdminServer;
        this.crossRealmTrustKdc = $.crossRealmTrustKdc;
        this.crossRealmTrustRealm = $.crossRealmTrustRealm;
        this.crossRealmTrustSharedPasswordUri = $.crossRealmTrustSharedPasswordUri;
        this.enableKerberos = $.enableKerberos;
        this.kdcDbKeyUri = $.kdcDbKeyUri;
        this.keyPasswordUri = $.keyPasswordUri;
        this.keystorePasswordUri = $.keystorePasswordUri;
        this.keystoreUri = $.keystoreUri;
        this.kmsKeyUri = $.kmsKeyUri;
        this.realm = $.realm;
        this.rootPrincipalPasswordUri = $.rootPrincipalPasswordUri;
        this.tgtLifetimeHours = $.tgtLifetimeHours;
        this.truststorePasswordUri = $.truststorePasswordUri;
        this.truststoreUri = $.truststoreUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KerberosConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KerberosConfigResponse $;

        public Builder() {
            $ = new KerberosConfigResponse();
        }

        public Builder(KerberosConfigResponse defaults) {
            $ = new KerberosConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param crossRealmTrustAdminServer Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustAdminServer(String crossRealmTrustAdminServer) {
            $.crossRealmTrustAdminServer = crossRealmTrustAdminServer;
            return this;
        }

        /**
         * @param crossRealmTrustKdc Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustKdc(String crossRealmTrustKdc) {
            $.crossRealmTrustKdc = crossRealmTrustKdc;
            return this;
        }

        /**
         * @param crossRealmTrustRealm Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustRealm(String crossRealmTrustRealm) {
            $.crossRealmTrustRealm = crossRealmTrustRealm;
            return this;
        }

        /**
         * @param crossRealmTrustSharedPasswordUri Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustSharedPasswordUri(String crossRealmTrustSharedPasswordUri) {
            $.crossRealmTrustSharedPasswordUri = crossRealmTrustSharedPasswordUri;
            return this;
        }

        /**
         * @param enableKerberos Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
         * 
         * @return builder
         * 
         */
        public Builder enableKerberos(Boolean enableKerberos) {
            $.enableKerberos = enableKerberos;
            return this;
        }

        /**
         * @param kdcDbKeyUri Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
         * 
         * @return builder
         * 
         */
        public Builder kdcDbKeyUri(String kdcDbKeyUri) {
            $.kdcDbKeyUri = kdcDbKeyUri;
            return this;
        }

        /**
         * @param keyPasswordUri Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder keyPasswordUri(String keyPasswordUri) {
            $.keyPasswordUri = keyPasswordUri;
            return this;
        }

        /**
         * @param keystorePasswordUri Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder keystorePasswordUri(String keystorePasswordUri) {
            $.keystorePasswordUri = keystorePasswordUri;
            return this;
        }

        /**
         * @param keystoreUri Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder keystoreUri(String keystoreUri) {
            $.keystoreUri = keystoreUri;
            return this;
        }

        /**
         * @param kmsKeyUri Optional. The uri of the KMS key used to encrypt various sensitive files.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyUri(String kmsKeyUri) {
            $.kmsKeyUri = kmsKeyUri;
            return this;
        }

        /**
         * @param realm Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param rootPrincipalPasswordUri Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
         * 
         * @return builder
         * 
         */
        public Builder rootPrincipalPasswordUri(String rootPrincipalPasswordUri) {
            $.rootPrincipalPasswordUri = rootPrincipalPasswordUri;
            return this;
        }

        /**
         * @param tgtLifetimeHours Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
         * 
         * @return builder
         * 
         */
        public Builder tgtLifetimeHours(Integer tgtLifetimeHours) {
            $.tgtLifetimeHours = tgtLifetimeHours;
            return this;
        }

        /**
         * @param truststorePasswordUri Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder truststorePasswordUri(String truststorePasswordUri) {
            $.truststorePasswordUri = truststorePasswordUri;
            return this;
        }

        /**
         * @param truststoreUri Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder truststoreUri(String truststoreUri) {
            $.truststoreUri = truststoreUri;
            return this;
        }

        public KerberosConfigResponse build() {
            $.crossRealmTrustAdminServer = Objects.requireNonNull($.crossRealmTrustAdminServer, "expected parameter 'crossRealmTrustAdminServer' to be non-null");
            $.crossRealmTrustKdc = Objects.requireNonNull($.crossRealmTrustKdc, "expected parameter 'crossRealmTrustKdc' to be non-null");
            $.crossRealmTrustRealm = Objects.requireNonNull($.crossRealmTrustRealm, "expected parameter 'crossRealmTrustRealm' to be non-null");
            $.crossRealmTrustSharedPasswordUri = Objects.requireNonNull($.crossRealmTrustSharedPasswordUri, "expected parameter 'crossRealmTrustSharedPasswordUri' to be non-null");
            $.enableKerberos = Objects.requireNonNull($.enableKerberos, "expected parameter 'enableKerberos' to be non-null");
            $.kdcDbKeyUri = Objects.requireNonNull($.kdcDbKeyUri, "expected parameter 'kdcDbKeyUri' to be non-null");
            $.keyPasswordUri = Objects.requireNonNull($.keyPasswordUri, "expected parameter 'keyPasswordUri' to be non-null");
            $.keystorePasswordUri = Objects.requireNonNull($.keystorePasswordUri, "expected parameter 'keystorePasswordUri' to be non-null");
            $.keystoreUri = Objects.requireNonNull($.keystoreUri, "expected parameter 'keystoreUri' to be non-null");
            $.kmsKeyUri = Objects.requireNonNull($.kmsKeyUri, "expected parameter 'kmsKeyUri' to be non-null");
            $.realm = Objects.requireNonNull($.realm, "expected parameter 'realm' to be non-null");
            $.rootPrincipalPasswordUri = Objects.requireNonNull($.rootPrincipalPasswordUri, "expected parameter 'rootPrincipalPasswordUri' to be non-null");
            $.tgtLifetimeHours = Objects.requireNonNull($.tgtLifetimeHours, "expected parameter 'tgtLifetimeHours' to be non-null");
            $.truststorePasswordUri = Objects.requireNonNull($.truststorePasswordUri, "expected parameter 'truststorePasswordUri' to be non-null");
            $.truststoreUri = Objects.requireNonNull($.truststoreUri, "expected parameter 'truststoreUri' to be non-null");
            return $;
        }
    }

}
