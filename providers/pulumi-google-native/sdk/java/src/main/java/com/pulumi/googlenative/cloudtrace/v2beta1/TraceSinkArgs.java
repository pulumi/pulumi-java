// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudtrace.v2beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudtrace.v2beta1.inputs.OutputConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TraceSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceSinkArgs Empty = new TraceSinkArgs();

    /**
     * The canonical sink resource name, unique within the project. Must be of the form: projects/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: `&#34;projects/12345/traceSinks/my-project-trace-sink&#34;`. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The canonical sink resource name, unique within the project. Must be of the form: projects/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: `&#34;projects/12345/traceSinks/my-project-trace-sink&#34;`. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The export destination.
     * 
     */
    @Import(name="outputConfig", required=true)
    private Output<OutputConfigArgs> outputConfig;

    /**
     * @return The export destination.
     * 
     */
    public Output<OutputConfigArgs> outputConfig() {
        return this.outputConfig;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private TraceSinkArgs() {}

    private TraceSinkArgs(TraceSinkArgs $) {
        this.name = $.name;
        this.outputConfig = $.outputConfig;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceSinkArgs $;

        public Builder() {
            $ = new TraceSinkArgs();
        }

        public Builder(TraceSinkArgs defaults) {
            $ = new TraceSinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The canonical sink resource name, unique within the project. Must be of the form: projects/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: `&#34;projects/12345/traceSinks/my-project-trace-sink&#34;`. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The canonical sink resource name, unique within the project. Must be of the form: projects/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: `&#34;projects/12345/traceSinks/my-project-trace-sink&#34;`. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputConfig The export destination.
         * 
         * @return builder
         * 
         */
        public Builder outputConfig(Output<OutputConfigArgs> outputConfig) {
            $.outputConfig = outputConfig;
            return this;
        }

        /**
         * @param outputConfig The export destination.
         * 
         * @return builder
         * 
         */
        public Builder outputConfig(OutputConfigArgs outputConfig) {
            return outputConfig(Output.of(outputConfig));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public TraceSinkArgs build() {
            $.outputConfig = Objects.requireNonNull($.outputConfig, "expected parameter 'outputConfig' to be non-null");
            return $;
        }
    }

}
