// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.bigquery.v2.outputs.StandardSqlDataTypeResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class StandardSqlFieldResponse {
    /**
     * @return Optional. The name of this field. Can be absent for struct fields.
     * 
     */
    private final String name;
    /**
     * @return Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this &#34;type&#34; field).
     * 
     */
    private final StandardSqlDataTypeResponse type;

    @CustomType.Constructor
    private StandardSqlFieldResponse(
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("type") StandardSqlDataTypeResponse type) {
        this.name = name;
        this.type = type;
    }

    /**
     * @return Optional. The name of this field. Can be absent for struct fields.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this &#34;type&#34; field).
     * 
     */
    public StandardSqlDataTypeResponse type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardSqlFieldResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String name;
        private StandardSqlDataTypeResponse type;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardSqlFieldResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(StandardSqlDataTypeResponse type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public StandardSqlFieldResponse build() {
            return new StandardSqlFieldResponse(name, type);
        }
    }
}
