// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataplex.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataplex.v1.inputs.GoogleCloudDataplexV1ContentNotebookArgs;
import com.pulumi.googlenative.dataplex.v1.inputs.GoogleCloudDataplexV1ContentSqlScriptArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentitemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentitemArgs Empty = new ContentitemArgs();

    /**
     * Content data in string format.
     * 
     */
    @Import(name="dataText", required=true)
    private Output<String> dataText;

    /**
     * @return Content data in string format.
     * 
     */
    public Output<String> dataText() {
        return this.dataText;
    }

    /**
     * Optional. Description of the content.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Description of the content.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. User defined labels for the content.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. User defined labels for the content.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="lakeId", required=true)
    private Output<String> lakeId;

    public Output<String> lakeId() {
        return this.lakeId;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Notebook related configurations.
     * 
     */
    @Import(name="notebook")
    private @Nullable Output<GoogleCloudDataplexV1ContentNotebookArgs> notebook;

    /**
     * @return Notebook related configurations.
     * 
     */
    public Optional<Output<GoogleCloudDataplexV1ContentNotebookArgs>> notebook() {
        return Optional.ofNullable(this.notebook);
    }

    /**
     * The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Sql Script related configurations.
     * 
     */
    @Import(name="sqlScript")
    private @Nullable Output<GoogleCloudDataplexV1ContentSqlScriptArgs> sqlScript;

    /**
     * @return Sql Script related configurations.
     * 
     */
    public Optional<Output<GoogleCloudDataplexV1ContentSqlScriptArgs>> sqlScript() {
        return Optional.ofNullable(this.sqlScript);
    }

    /**
     * Optional. Only validate the request, but do not perform mutations. The default is false.
     * 
     */
    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    /**
     * @return Optional. Only validate the request, but do not perform mutations. The default is false.
     * 
     */
    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private ContentitemArgs() {}

    private ContentitemArgs(ContentitemArgs $) {
        this.dataText = $.dataText;
        this.description = $.description;
        this.labels = $.labels;
        this.lakeId = $.lakeId;
        this.location = $.location;
        this.notebook = $.notebook;
        this.path = $.path;
        this.project = $.project;
        this.sqlScript = $.sqlScript;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentitemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentitemArgs $;

        public Builder() {
            $ = new ContentitemArgs();
        }

        public Builder(ContentitemArgs defaults) {
            $ = new ContentitemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataText Content data in string format.
         * 
         * @return builder
         * 
         */
        public Builder dataText(Output<String> dataText) {
            $.dataText = dataText;
            return this;
        }

        /**
         * @param dataText Content data in string format.
         * 
         * @return builder
         * 
         */
        public Builder dataText(String dataText) {
            return dataText(Output.of(dataText));
        }

        /**
         * @param description Optional. Description of the content.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Description of the content.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels Optional. User defined labels for the content.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. User defined labels for the content.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder lakeId(Output<String> lakeId) {
            $.lakeId = lakeId;
            return this;
        }

        public Builder lakeId(String lakeId) {
            return lakeId(Output.of(lakeId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param notebook Notebook related configurations.
         * 
         * @return builder
         * 
         */
        public Builder notebook(@Nullable Output<GoogleCloudDataplexV1ContentNotebookArgs> notebook) {
            $.notebook = notebook;
            return this;
        }

        /**
         * @param notebook Notebook related configurations.
         * 
         * @return builder
         * 
         */
        public Builder notebook(GoogleCloudDataplexV1ContentNotebookArgs notebook) {
            return notebook(Output.of(notebook));
        }

        /**
         * @param path The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sqlScript Sql Script related configurations.
         * 
         * @return builder
         * 
         */
        public Builder sqlScript(@Nullable Output<GoogleCloudDataplexV1ContentSqlScriptArgs> sqlScript) {
            $.sqlScript = sqlScript;
            return this;
        }

        /**
         * @param sqlScript Sql Script related configurations.
         * 
         * @return builder
         * 
         */
        public Builder sqlScript(GoogleCloudDataplexV1ContentSqlScriptArgs sqlScript) {
            return sqlScript(Output.of(sqlScript));
        }

        /**
         * @param validateOnly Optional. Only validate the request, but do not perform mutations. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        /**
         * @param validateOnly Optional. Only validate the request, but do not perform mutations. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public ContentitemArgs build() {
            $.dataText = Objects.requireNonNull($.dataText, "expected parameter 'dataText' to be non-null");
            $.lakeId = Objects.requireNonNull($.lakeId, "expected parameter 'lakeId' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
