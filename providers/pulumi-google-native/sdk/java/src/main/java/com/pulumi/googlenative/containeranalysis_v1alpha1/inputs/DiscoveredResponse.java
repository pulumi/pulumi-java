// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.StatusResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Provides information about the scan status of a discovered resource.
 * 
 */
public final class DiscoveredResponse extends com.pulumi.resources.InvokeArgs {

    public static final DiscoveredResponse Empty = new DiscoveredResponse();

    /**
     * The status of discovery for the resource.
     * 
     */
    @Import(name="analysisStatus", required=true)
    private String analysisStatus;

    public String analysisStatus() {
        return this.analysisStatus;
    }

    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
     * 
     */
    @Import(name="analysisStatusError", required=true)
    private StatusResponse analysisStatusError;

    public StatusResponse analysisStatusError() {
        return this.analysisStatusError;
    }

    /**
     * Whether the resource is continuously analyzed.
     * 
     */
    @Import(name="continuousAnalysis", required=true)
    private String continuousAnalysis;

    public String continuousAnalysis() {
        return this.continuousAnalysis;
    }

    /**
     * The CPE of the resource being scanned.
     * 
     */
    @Import(name="cpe", required=true)
    private String cpe;

    public String cpe() {
        return this.cpe;
    }

    private DiscoveredResponse() {}

    private DiscoveredResponse(DiscoveredResponse $) {
        this.analysisStatus = $.analysisStatus;
        this.analysisStatusError = $.analysisStatusError;
        this.continuousAnalysis = $.continuousAnalysis;
        this.cpe = $.cpe;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveredResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveredResponse $;

        public Builder() {
            $ = new DiscoveredResponse();
        }

        public Builder(DiscoveredResponse defaults) {
            $ = new DiscoveredResponse(Objects.requireNonNull(defaults));
        }

        public Builder analysisStatus(String analysisStatus) {
            $.analysisStatus = analysisStatus;
            return this;
        }

        public Builder analysisStatusError(StatusResponse analysisStatusError) {
            $.analysisStatusError = analysisStatusError;
            return this;
        }

        public Builder continuousAnalysis(String continuousAnalysis) {
            $.continuousAnalysis = continuousAnalysis;
            return this;
        }

        public Builder cpe(String cpe) {
            $.cpe = cpe;
            return this;
        }

        public DiscoveredResponse build() {
            $.analysisStatus = Objects.requireNonNull($.analysisStatus, "expected parameter 'analysisStatus' to be non-null");
            $.analysisStatusError = Objects.requireNonNull($.analysisStatusError, "expected parameter 'analysisStatusError' to be non-null");
            $.continuousAnalysis = Objects.requireNonNull($.continuousAnalysis, "expected parameter 'continuousAnalysis' to be non-null");
            $.cpe = Objects.requireNonNull($.cpe, "expected parameter 'cpe' to be non-null");
            return $;
        }
    }

}
