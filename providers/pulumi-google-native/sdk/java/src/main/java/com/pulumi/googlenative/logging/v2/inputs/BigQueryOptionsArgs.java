// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Options that change functionality of a sink exporting data to BigQuery.
 * 
 */
public final class BigQueryOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BigQueryOptionsArgs Empty = new BigQueryOptionsArgs();

    /**
     * Optional. Whether to use BigQuery&#39;s partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries&#39; timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
     * 
     */
    @Import(name="usePartitionedTables")
    private @Nullable Output<Boolean> usePartitionedTables;

    /**
     * @return Optional. Whether to use BigQuery&#39;s partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries&#39; timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
     * 
     */
    public Optional<Output<Boolean>> usePartitionedTables() {
        return Optional.ofNullable(this.usePartitionedTables);
    }

    private BigQueryOptionsArgs() {}

    private BigQueryOptionsArgs(BigQueryOptionsArgs $) {
        this.usePartitionedTables = $.usePartitionedTables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BigQueryOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BigQueryOptionsArgs $;

        public Builder() {
            $ = new BigQueryOptionsArgs();
        }

        public Builder(BigQueryOptionsArgs defaults) {
            $ = new BigQueryOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param usePartitionedTables Optional. Whether to use BigQuery&#39;s partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries&#39; timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
         * 
         * @return builder
         * 
         */
        public Builder usePartitionedTables(@Nullable Output<Boolean> usePartitionedTables) {
            $.usePartitionedTables = usePartitionedTables;
            return this;
        }

        /**
         * @param usePartitionedTables Optional. Whether to use BigQuery&#39;s partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries&#39; timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
         * 
         * @return builder
         * 
         */
        public Builder usePartitionedTables(Boolean usePartitionedTables) {
            return usePartitionedTables(Output.of(usePartitionedTables));
        }

        public BigQueryOptionsArgs build() {
            return $;
        }
    }

}
