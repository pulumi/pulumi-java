// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.beta.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegionHealthCheckServiceResult {
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private final String creationTimestamp;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private final String description;
    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
     * 
     */
    private final String fingerprint;
    /**
     * @return A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
     * 
     */
    private final List<String> healthChecks;
    /**
     * @return Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
     * 
     */
    private final String healthStatusAggregationPolicy;
    /**
     * @return This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend&#39;s health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend&#39;s are healthy, the HealthState of the health check service is HEALTHY. .
     * 
     * @deprecated
     * This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend&#39;s health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend&#39;s are healthy, the HealthState of the health check service is HEALTHY. .
     * 
     */
    @Deprecated /* This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. . */
    private final String healthStatusAggregationStrategy;
    /**
     * @return [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
     * 
     */
    private final String kind;
    /**
     * @return Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private final String name;
    /**
     * @return A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
     * 
     */
    private final List<String> networkEndpointGroups;
    /**
     * @return A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
     * 
     */
    private final List<String> notificationEndpoints;
    /**
     * @return URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    private final String region;
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    private final String selfLink;

    @CustomType.Constructor
    private GetRegionHealthCheckServiceResult(
        @CustomType.Parameter("creationTimestamp") String creationTimestamp,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("fingerprint") String fingerprint,
        @CustomType.Parameter("healthChecks") List<String> healthChecks,
        @CustomType.Parameter("healthStatusAggregationPolicy") String healthStatusAggregationPolicy,
        @CustomType.Parameter("healthStatusAggregationStrategy") String healthStatusAggregationStrategy,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkEndpointGroups") List<String> networkEndpointGroups,
        @CustomType.Parameter("notificationEndpoints") List<String> notificationEndpoints,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("selfLink") String selfLink) {
        this.creationTimestamp = creationTimestamp;
        this.description = description;
        this.fingerprint = fingerprint;
        this.healthChecks = healthChecks;
        this.healthStatusAggregationPolicy = healthStatusAggregationPolicy;
        this.healthStatusAggregationStrategy = healthStatusAggregationStrategy;
        this.kind = kind;
        this.name = name;
        this.networkEndpointGroups = networkEndpointGroups;
        this.notificationEndpoints = notificationEndpoints;
        this.region = region;
        this.selfLink = selfLink;
    }

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
     * 
     */
    public List<String> healthChecks() {
        return this.healthChecks;
    }
    /**
     * @return Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
     * 
     */
    public String healthStatusAggregationPolicy() {
        return this.healthStatusAggregationPolicy;
    }
    /**
     * @return This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend&#39;s health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend&#39;s are healthy, the HealthState of the health check service is HEALTHY. .
     * 
     * @deprecated
     * This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend&#39;s health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend&#39;s are healthy, the HealthState of the health check service is HEALTHY. .
     * 
     */
    @Deprecated /* This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. . */
    public String healthStatusAggregationStrategy() {
        return this.healthStatusAggregationStrategy;
    }
    /**
     * @return [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
     * 
     */
    public List<String> networkEndpointGroups() {
        return this.networkEndpointGroups;
    }
    /**
     * @return A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
     * 
     */
    public List<String> notificationEndpoints() {
        return this.notificationEndpoints;
    }
    /**
     * @return URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionHealthCheckServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String creationTimestamp;
        private String description;
        private String fingerprint;
        private List<String> healthChecks;
        private String healthStatusAggregationPolicy;
        private String healthStatusAggregationStrategy;
        private String kind;
        private String name;
        private List<String> networkEndpointGroups;
        private List<String> notificationEndpoints;
        private String region;
        private String selfLink;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegionHealthCheckServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.fingerprint = defaults.fingerprint;
    	      this.healthChecks = defaults.healthChecks;
    	      this.healthStatusAggregationPolicy = defaults.healthStatusAggregationPolicy;
    	      this.healthStatusAggregationStrategy = defaults.healthStatusAggregationStrategy;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.networkEndpointGroups = defaults.networkEndpointGroups;
    	      this.notificationEndpoints = defaults.notificationEndpoints;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
        }

        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }
        public Builder healthChecks(List<String> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }
        public Builder healthChecks(String... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        public Builder healthStatusAggregationPolicy(String healthStatusAggregationPolicy) {
            this.healthStatusAggregationPolicy = Objects.requireNonNull(healthStatusAggregationPolicy);
            return this;
        }
        public Builder healthStatusAggregationStrategy(String healthStatusAggregationStrategy) {
            this.healthStatusAggregationStrategy = Objects.requireNonNull(healthStatusAggregationStrategy);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkEndpointGroups(List<String> networkEndpointGroups) {
            this.networkEndpointGroups = Objects.requireNonNull(networkEndpointGroups);
            return this;
        }
        public Builder networkEndpointGroups(String... networkEndpointGroups) {
            return networkEndpointGroups(List.of(networkEndpointGroups));
        }
        public Builder notificationEndpoints(List<String> notificationEndpoints) {
            this.notificationEndpoints = Objects.requireNonNull(notificationEndpoints);
            return this;
        }
        public Builder notificationEndpoints(String... notificationEndpoints) {
            return notificationEndpoints(List.of(notificationEndpoints));
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }        public GetRegionHealthCheckServiceResult build() {
            return new GetRegionHealthCheckServiceResult(creationTimestamp, description, fingerprint, healthChecks, healthStatusAggregationPolicy, healthStatusAggregationStrategy, kind, name, networkEndpointGroups, notificationEndpoints, region, selfLink);
        }
    }
}
