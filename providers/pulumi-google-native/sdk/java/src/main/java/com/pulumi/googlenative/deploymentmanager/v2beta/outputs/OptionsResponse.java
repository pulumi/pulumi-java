// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.deploymentmanager.v2beta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.deploymentmanager.v2beta.outputs.AsyncOptionsResponse;
import com.pulumi.googlenative.deploymentmanager.v2beta.outputs.InputMappingResponse;
import com.pulumi.googlenative.deploymentmanager.v2beta.outputs.ValidationOptionsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class OptionsResponse {
    /**
     * @return Options regarding how to thread async requests.
     * 
     */
    private final List<AsyncOptionsResponse> asyncOptions;
    /**
     * @return The mappings that apply for requests.
     * 
     */
    private final List<InputMappingResponse> inputMappings;
    /**
     * @return Options for how to validate and process properties on a resource.
     * 
     */
    private final ValidationOptionsResponse validationOptions;
    /**
     * @return Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
     * 
     */
    private final String virtualProperties;

    @CustomType.Constructor
    private OptionsResponse(
        @CustomType.Parameter("asyncOptions") List<AsyncOptionsResponse> asyncOptions,
        @CustomType.Parameter("inputMappings") List<InputMappingResponse> inputMappings,
        @CustomType.Parameter("validationOptions") ValidationOptionsResponse validationOptions,
        @CustomType.Parameter("virtualProperties") String virtualProperties) {
        this.asyncOptions = asyncOptions;
        this.inputMappings = inputMappings;
        this.validationOptions = validationOptions;
        this.virtualProperties = virtualProperties;
    }

    /**
     * @return Options regarding how to thread async requests.
     * 
     */
    public List<AsyncOptionsResponse> asyncOptions() {
        return this.asyncOptions;
    }
    /**
     * @return The mappings that apply for requests.
     * 
     */
    public List<InputMappingResponse> inputMappings() {
        return this.inputMappings;
    }
    /**
     * @return Options for how to validate and process properties on a resource.
     * 
     */
    public ValidationOptionsResponse validationOptions() {
        return this.validationOptions;
    }
    /**
     * @return Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
     * 
     */
    public String virtualProperties() {
        return this.virtualProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AsyncOptionsResponse> asyncOptions;
        private List<InputMappingResponse> inputMappings;
        private ValidationOptionsResponse validationOptions;
        private String virtualProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(OptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asyncOptions = defaults.asyncOptions;
    	      this.inputMappings = defaults.inputMappings;
    	      this.validationOptions = defaults.validationOptions;
    	      this.virtualProperties = defaults.virtualProperties;
        }

        public Builder asyncOptions(List<AsyncOptionsResponse> asyncOptions) {
            this.asyncOptions = Objects.requireNonNull(asyncOptions);
            return this;
        }
        public Builder asyncOptions(AsyncOptionsResponse... asyncOptions) {
            return asyncOptions(List.of(asyncOptions));
        }
        public Builder inputMappings(List<InputMappingResponse> inputMappings) {
            this.inputMappings = Objects.requireNonNull(inputMappings);
            return this;
        }
        public Builder inputMappings(InputMappingResponse... inputMappings) {
            return inputMappings(List.of(inputMappings));
        }
        public Builder validationOptions(ValidationOptionsResponse validationOptions) {
            this.validationOptions = Objects.requireNonNull(validationOptions);
            return this;
        }
        public Builder virtualProperties(String virtualProperties) {
            this.virtualProperties = Objects.requireNonNull(virtualProperties);
            return this;
        }        public OptionsResponse build() {
            return new OptionsResponse(asyncOptions, inputMappings, validationOptions, virtualProperties);
        }
    }
}
