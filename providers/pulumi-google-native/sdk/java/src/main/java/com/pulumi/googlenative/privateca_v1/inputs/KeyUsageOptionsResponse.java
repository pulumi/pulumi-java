// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 * 
 */
public final class KeyUsageOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final KeyUsageOptionsResponse Empty = new KeyUsageOptionsResponse();

    /**
     * The key may be used to sign certificates.
     * 
     */
    @Import(name="certSign", required=true)
    private Boolean certSign;

    public Boolean certSign() {
        return this.certSign;
    }

    /**
     * The key may be used for cryptographic commitments. Note that this may also be referred to as &#34;non-repudiation&#34;.
     * 
     */
    @Import(name="contentCommitment", required=true)
    private Boolean contentCommitment;

    public Boolean contentCommitment() {
        return this.contentCommitment;
    }

    /**
     * The key may be used sign certificate revocation lists.
     * 
     */
    @Import(name="crlSign", required=true)
    private Boolean crlSign;

    public Boolean crlSign() {
        return this.crlSign;
    }

    /**
     * The key may be used to encipher data.
     * 
     */
    @Import(name="dataEncipherment", required=true)
    private Boolean dataEncipherment;

    public Boolean dataEncipherment() {
        return this.dataEncipherment;
    }

    /**
     * The key may be used to decipher only.
     * 
     */
    @Import(name="decipherOnly", required=true)
    private Boolean decipherOnly;

    public Boolean decipherOnly() {
        return this.decipherOnly;
    }

    /**
     * The key may be used for digital signatures.
     * 
     */
    @Import(name="digitalSignature", required=true)
    private Boolean digitalSignature;

    public Boolean digitalSignature() {
        return this.digitalSignature;
    }

    /**
     * The key may be used to encipher only.
     * 
     */
    @Import(name="encipherOnly", required=true)
    private Boolean encipherOnly;

    public Boolean encipherOnly() {
        return this.encipherOnly;
    }

    /**
     * The key may be used in a key agreement protocol.
     * 
     */
    @Import(name="keyAgreement", required=true)
    private Boolean keyAgreement;

    public Boolean keyAgreement() {
        return this.keyAgreement;
    }

    /**
     * The key may be used to encipher other keys.
     * 
     */
    @Import(name="keyEncipherment", required=true)
    private Boolean keyEncipherment;

    public Boolean keyEncipherment() {
        return this.keyEncipherment;
    }

    private KeyUsageOptionsResponse() {}

    private KeyUsageOptionsResponse(KeyUsageOptionsResponse $) {
        this.certSign = $.certSign;
        this.contentCommitment = $.contentCommitment;
        this.crlSign = $.crlSign;
        this.dataEncipherment = $.dataEncipherment;
        this.decipherOnly = $.decipherOnly;
        this.digitalSignature = $.digitalSignature;
        this.encipherOnly = $.encipherOnly;
        this.keyAgreement = $.keyAgreement;
        this.keyEncipherment = $.keyEncipherment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyUsageOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyUsageOptionsResponse $;

        public Builder() {
            $ = new KeyUsageOptionsResponse();
        }

        public Builder(KeyUsageOptionsResponse defaults) {
            $ = new KeyUsageOptionsResponse(Objects.requireNonNull(defaults));
        }

        public Builder certSign(Boolean certSign) {
            $.certSign = certSign;
            return this;
        }

        public Builder contentCommitment(Boolean contentCommitment) {
            $.contentCommitment = contentCommitment;
            return this;
        }

        public Builder crlSign(Boolean crlSign) {
            $.crlSign = crlSign;
            return this;
        }

        public Builder dataEncipherment(Boolean dataEncipherment) {
            $.dataEncipherment = dataEncipherment;
            return this;
        }

        public Builder decipherOnly(Boolean decipherOnly) {
            $.decipherOnly = decipherOnly;
            return this;
        }

        public Builder digitalSignature(Boolean digitalSignature) {
            $.digitalSignature = digitalSignature;
            return this;
        }

        public Builder encipherOnly(Boolean encipherOnly) {
            $.encipherOnly = encipherOnly;
            return this;
        }

        public Builder keyAgreement(Boolean keyAgreement) {
            $.keyAgreement = keyAgreement;
            return this;
        }

        public Builder keyEncipherment(Boolean keyEncipherment) {
            $.keyEncipherment = keyEncipherment;
            return this;
        }

        public KeyUsageOptionsResponse build() {
            $.certSign = Objects.requireNonNull($.certSign, "expected parameter 'certSign' to be non-null");
            $.contentCommitment = Objects.requireNonNull($.contentCommitment, "expected parameter 'contentCommitment' to be non-null");
            $.crlSign = Objects.requireNonNull($.crlSign, "expected parameter 'crlSign' to be non-null");
            $.dataEncipherment = Objects.requireNonNull($.dataEncipherment, "expected parameter 'dataEncipherment' to be non-null");
            $.decipherOnly = Objects.requireNonNull($.decipherOnly, "expected parameter 'decipherOnly' to be non-null");
            $.digitalSignature = Objects.requireNonNull($.digitalSignature, "expected parameter 'digitalSignature' to be non-null");
            $.encipherOnly = Objects.requireNonNull($.encipherOnly, "expected parameter 'encipherOnly' to be non-null");
            $.keyAgreement = Objects.requireNonNull($.keyAgreement, "expected parameter 'keyAgreement' to be non-null");
            $.keyEncipherment = Objects.requireNonNull($.keyEncipherment, "expected parameter 'keyEncipherment' to be non-null");
            return $;
        }
    }

}
