// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.CustomerEncryptionKeyResponse;
import com.pulumi.googlenative.compute_alpha.inputs.GuestOsFeatureResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
 * 
 */
public final class AttachedDiskInitializeParamsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AttachedDiskInitializeParamsResponse Empty = new AttachedDiskInitializeParamsResponse();

    /**
     * The architecture of the attached disk. Valid values are arm64 or x86_64.
     * 
     */
    @Import(name="architecture", required=true)
    private String architecture;

    /**
     * @return The architecture of the attached disk. Valid values are arm64 or x86_64.
     * 
     */
    public String architecture() {
        return this.architecture;
    }

    /**
     * An optional description. Provide this property when creating the disk.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return An optional description. Provide this property when creating the disk.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
     * 
     */
    @Import(name="diskName", required=true)
    private String diskName;

    /**
     * @return Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
     * 
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
     * 
     */
    @Import(name="diskSizeGb", required=true)
    private String diskSizeGb;

    /**
     * @return Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
     * 
     */
    public String diskSizeGb() {
        return this.diskSizeGb;
    }

    /**
     * Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
     * 
     */
    @Import(name="diskType", required=true)
    private String diskType;

    /**
     * @return Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
     * 
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. Guest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures
     * 
     */
    @Import(name="guestOsFeatures", required=true)
    private List<GuestOsFeatureResponse> guestOsFeatures;

    /**
     * @return A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. Guest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures
     * 
     */
    public List<GuestOsFeatureResponse> guestOsFeatures() {
        return this.guestOsFeatures;
    }

    /**
     * Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * Integer license codes indicating which licenses are attached to this disk.
     * 
     */
    @Import(name="licenseCodes", required=true)
    private List<String> licenseCodes;

    /**
     * @return Integer license codes indicating which licenses are attached to this disk.
     * 
     */
    public List<String> licenseCodes() {
        return this.licenseCodes;
    }

    /**
     * A list of publicly visible licenses. Reserved for Google&#39;s use.
     * 
     */
    @Import(name="licenses", required=true)
    private List<String> licenses;

    /**
     * @return A list of publicly visible licenses. Reserved for Google&#39;s use.
     * 
     */
    public List<String> licenses() {
        return this.licenses;
    }

    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    @Import(name="multiWriter", required=true)
    private Boolean multiWriter;

    /**
     * @return Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    public Boolean multiWriter() {
        return this.multiWriter;
    }

    /**
     * Specifies which action to take on instance update with this disk. Default is to use the existing disk.
     * 
     */
    @Import(name="onUpdateAction", required=true)
    private String onUpdateAction;

    /**
     * @return Specifies which action to take on instance update with this disk. Default is to use the existing disk.
     * 
     */
    public String onUpdateAction() {
        return this.onUpdateAction;
    }

    /**
     * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
     * 
     */
    @Import(name="provisionedIops", required=true)
    private String provisionedIops;

    /**
     * @return Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
     * 
     */
    public String provisionedIops() {
        return this.provisionedIops;
    }

    /**
     * URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
     * 
     */
    @Import(name="replicaZones", required=true)
    private List<String> replicaZones;

    /**
     * @return URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
     * 
     */
    public List<String> replicaZones() {
        return this.replicaZones;
    }

    /**
     * Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
     * 
     */
    @Import(name="resourcePolicies", required=true)
    private List<String> resourcePolicies;

    /**
     * @return Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
     * 
     */
    public List<String> resourcePolicies() {
        return this.resourcePolicies;
    }

    /**
     * The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
     * 
     */
    @Import(name="sourceImage", required=true)
    private String sourceImage;

    /**
     * @return The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
     * 
     */
    public String sourceImage() {
        return this.sourceImage;
    }

    /**
     * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
     * 
     */
    @Import(name="sourceImageEncryptionKey", required=true)
    private CustomerEncryptionKeyResponse sourceImageEncryptionKey;

    /**
     * @return The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
     * 
     */
    public CustomerEncryptionKeyResponse sourceImageEncryptionKey() {
        return this.sourceImageEncryptionKey;
    }

    /**
     * The source instant-snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceInstantSnapshot initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: us-central1-a/instantSnapshots/my-backup If the source instant-snapshot is deleted later, this field will not be set.
     * 
     */
    @Import(name="sourceInstantSnapshot", required=true)
    private String sourceInstantSnapshot;

    /**
     * @return The source instant-snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceInstantSnapshot initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: us-central1-a/instantSnapshots/my-backup If the source instant-snapshot is deleted later, this field will not be set.
     * 
     */
    public String sourceInstantSnapshot() {
        return this.sourceInstantSnapshot;
    }

    /**
     * The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
     * 
     */
    @Import(name="sourceSnapshot", required=true)
    private String sourceSnapshot;

    /**
     * @return The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
     * 
     */
    public String sourceSnapshot() {
        return this.sourceSnapshot;
    }

    /**
     * The customer-supplied encryption key of the source snapshot.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey", required=true)
    private CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey;

    /**
     * @return The customer-supplied encryption key of the source snapshot.
     * 
     */
    public CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey() {
        return this.sourceSnapshotEncryptionKey;
    }

    private AttachedDiskInitializeParamsResponse() {}

    private AttachedDiskInitializeParamsResponse(AttachedDiskInitializeParamsResponse $) {
        this.architecture = $.architecture;
        this.description = $.description;
        this.diskName = $.diskName;
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
        this.guestOsFeatures = $.guestOsFeatures;
        this.labels = $.labels;
        this.licenseCodes = $.licenseCodes;
        this.licenses = $.licenses;
        this.multiWriter = $.multiWriter;
        this.onUpdateAction = $.onUpdateAction;
        this.provisionedIops = $.provisionedIops;
        this.replicaZones = $.replicaZones;
        this.resourcePolicies = $.resourcePolicies;
        this.sourceImage = $.sourceImage;
        this.sourceImageEncryptionKey = $.sourceImageEncryptionKey;
        this.sourceInstantSnapshot = $.sourceInstantSnapshot;
        this.sourceSnapshot = $.sourceSnapshot;
        this.sourceSnapshotEncryptionKey = $.sourceSnapshotEncryptionKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDiskInitializeParamsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDiskInitializeParamsResponse $;

        public Builder() {
            $ = new AttachedDiskInitializeParamsResponse();
        }

        public Builder(AttachedDiskInitializeParamsResponse defaults) {
            $ = new AttachedDiskInitializeParamsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The architecture of the attached disk. Valid values are arm64 or x86_64.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param description An optional description. Provide this property when creating the disk.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param diskName Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
         * 
         * @return builder
         * 
         */
        public Builder diskName(String diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskSizeGb Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(String diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskType Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. Guest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(List<GuestOsFeatureResponse> guestOsFeatures) {
            $.guestOsFeatures = guestOsFeatures;
            return this;
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. Guest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(GuestOsFeatureResponse... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }

        /**
         * @param labels Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param licenseCodes Integer license codes indicating which licenses are attached to this disk.
         * 
         * @return builder
         * 
         */
        public Builder licenseCodes(List<String> licenseCodes) {
            $.licenseCodes = licenseCodes;
            return this;
        }

        /**
         * @param licenseCodes Integer license codes indicating which licenses are attached to this disk.
         * 
         * @return builder
         * 
         */
        public Builder licenseCodes(String... licenseCodes) {
            return licenseCodes(List.of(licenseCodes));
        }

        /**
         * @param licenses A list of publicly visible licenses. Reserved for Google&#39;s use.
         * 
         * @return builder
         * 
         */
        public Builder licenses(List<String> licenses) {
            $.licenses = licenses;
            return this;
        }

        /**
         * @param licenses A list of publicly visible licenses. Reserved for Google&#39;s use.
         * 
         * @return builder
         * 
         */
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }

        /**
         * @param multiWriter Indicates whether or not the disk can be read/write attached to more than one instance.
         * 
         * @return builder
         * 
         */
        public Builder multiWriter(Boolean multiWriter) {
            $.multiWriter = multiWriter;
            return this;
        }

        /**
         * @param onUpdateAction Specifies which action to take on instance update with this disk. Default is to use the existing disk.
         * 
         * @return builder
         * 
         */
        public Builder onUpdateAction(String onUpdateAction) {
            $.onUpdateAction = onUpdateAction;
            return this;
        }

        /**
         * @param provisionedIops Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(String provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param replicaZones URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
         * 
         * @return builder
         * 
         */
        public Builder replicaZones(List<String> replicaZones) {
            $.replicaZones = replicaZones;
            return this;
        }

        /**
         * @param replicaZones URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
         * 
         * @return builder
         * 
         */
        public Builder replicaZones(String... replicaZones) {
            return replicaZones(List.of(replicaZones));
        }

        /**
         * @param resourcePolicies Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
         * 
         * @return builder
         * 
         */
        public Builder resourcePolicies(List<String> resourcePolicies) {
            $.resourcePolicies = resourcePolicies;
            return this;
        }

        /**
         * @param resourcePolicies Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
         * 
         * @return builder
         * 
         */
        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }

        /**
         * @param sourceImage The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
         * 
         * @return builder
         * 
         */
        public Builder sourceImage(String sourceImage) {
            $.sourceImage = sourceImage;
            return this;
        }

        /**
         * @param sourceImageEncryptionKey The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
         * 
         * @return builder
         * 
         */
        public Builder sourceImageEncryptionKey(CustomerEncryptionKeyResponse sourceImageEncryptionKey) {
            $.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }

        /**
         * @param sourceInstantSnapshot The source instant-snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceInstantSnapshot initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: us-central1-a/instantSnapshots/my-backup If the source instant-snapshot is deleted later, this field will not be set.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstantSnapshot(String sourceInstantSnapshot) {
            $.sourceInstantSnapshot = sourceInstantSnapshot;
            return this;
        }

        /**
         * @param sourceSnapshot The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshot(String sourceSnapshot) {
            $.sourceSnapshot = sourceSnapshot;
            return this;
        }

        /**
         * @param sourceSnapshotEncryptionKey The customer-supplied encryption key of the source snapshot.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotEncryptionKey(CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey) {
            $.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        public AttachedDiskInitializeParamsResponse build() {
            $.architecture = Objects.requireNonNull($.architecture, "expected parameter 'architecture' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.diskName = Objects.requireNonNull($.diskName, "expected parameter 'diskName' to be non-null");
            $.diskSizeGb = Objects.requireNonNull($.diskSizeGb, "expected parameter 'diskSizeGb' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.guestOsFeatures = Objects.requireNonNull($.guestOsFeatures, "expected parameter 'guestOsFeatures' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.licenseCodes = Objects.requireNonNull($.licenseCodes, "expected parameter 'licenseCodes' to be non-null");
            $.licenses = Objects.requireNonNull($.licenses, "expected parameter 'licenses' to be non-null");
            $.multiWriter = Objects.requireNonNull($.multiWriter, "expected parameter 'multiWriter' to be non-null");
            $.onUpdateAction = Objects.requireNonNull($.onUpdateAction, "expected parameter 'onUpdateAction' to be non-null");
            $.provisionedIops = Objects.requireNonNull($.provisionedIops, "expected parameter 'provisionedIops' to be non-null");
            $.replicaZones = Objects.requireNonNull($.replicaZones, "expected parameter 'replicaZones' to be non-null");
            $.resourcePolicies = Objects.requireNonNull($.resourcePolicies, "expected parameter 'resourcePolicies' to be non-null");
            $.sourceImage = Objects.requireNonNull($.sourceImage, "expected parameter 'sourceImage' to be non-null");
            $.sourceImageEncryptionKey = Objects.requireNonNull($.sourceImageEncryptionKey, "expected parameter 'sourceImageEncryptionKey' to be non-null");
            $.sourceInstantSnapshot = Objects.requireNonNull($.sourceInstantSnapshot, "expected parameter 'sourceInstantSnapshot' to be non-null");
            $.sourceSnapshot = Objects.requireNonNull($.sourceSnapshot, "expected parameter 'sourceSnapshot' to be non-null");
            $.sourceSnapshotEncryptionKey = Objects.requireNonNull($.sourceSnapshotEncryptionKey, "expected parameter 'sourceSnapshotEncryptionKey' to be non-null");
            return $;
        }
    }

}
