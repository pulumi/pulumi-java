// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.retail_v2alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaConditionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleBoostActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleFilterActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleIgnoreActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleRedirectActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleReplacementActionResponse;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse;
import java.util.Objects;


/**
 * A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently only boost rules are supported. Currently only supported by the search endpoint.
 * 
 */
public final class GoogleCloudRetailV2alphaRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudRetailV2alphaRuleResponse Empty = new GoogleCloudRetailV2alphaRuleResponse();

    /**
     * A boost action.
     * 
     */
    @Import(name="boostAction", required=true)
    private GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction;

    /**
     * @return A boost action.
     * 
     */
    public GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction() {
        return this.boostAction;
    }

    /**
     * The condition that triggers the rule. If the condition is empty, the rule will always apply.
     * 
     */
    @Import(name="condition", required=true)
    private GoogleCloudRetailV2alphaConditionResponse condition;

    /**
     * @return The condition that triggers the rule. If the condition is empty, the rule will always apply.
     * 
     */
    public GoogleCloudRetailV2alphaConditionResponse condition() {
        return this.condition;
    }

    /**
     * Prevents term from being associated with other terms.
     * 
     */
    @Import(name="doNotAssociateAction", required=true)
    private GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction;

    /**
     * @return Prevents term from being associated with other terms.
     * 
     */
    public GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction() {
        return this.doNotAssociateAction;
    }

    /**
     * Filters results.
     * 
     */
    @Import(name="filterAction", required=true)
    private GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction;

    /**
     * @return Filters results.
     * 
     */
    public GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction() {
        return this.filterAction;
    }

    /**
     * Ignores specific terms from query during search.
     * 
     */
    @Import(name="ignoreAction", required=true)
    private GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction;

    /**
     * @return Ignores specific terms from query during search.
     * 
     */
    public GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction() {
        return this.ignoreAction;
    }

    /**
     * Treats specific term as a synonym with a group of terms. Group of terms will not be treated as synonyms with the specific term.
     * 
     */
    @Import(name="onewaySynonymsAction", required=true)
    private GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction;

    /**
     * @return Treats specific term as a synonym with a group of terms. Group of terms will not be treated as synonyms with the specific term.
     * 
     */
    public GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction() {
        return this.onewaySynonymsAction;
    }

    /**
     * Redirects a shopper to a specific page.
     * 
     */
    @Import(name="redirectAction", required=true)
    private GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction;

    /**
     * @return Redirects a shopper to a specific page.
     * 
     */
    public GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction() {
        return this.redirectAction;
    }

    /**
     * Replaces specific terms in the query.
     * 
     */
    @Import(name="replacementAction", required=true)
    private GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction;

    /**
     * @return Replaces specific terms in the query.
     * 
     */
    public GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction() {
        return this.replacementAction;
    }

    /**
     * Treats a set of terms as synonyms of one another.
     * 
     */
    @Import(name="twowaySynonymsAction", required=true)
    private GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction;

    /**
     * @return Treats a set of terms as synonyms of one another.
     * 
     */
    public GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction() {
        return this.twowaySynonymsAction;
    }

    private GoogleCloudRetailV2alphaRuleResponse() {}

    private GoogleCloudRetailV2alphaRuleResponse(GoogleCloudRetailV2alphaRuleResponse $) {
        this.boostAction = $.boostAction;
        this.condition = $.condition;
        this.doNotAssociateAction = $.doNotAssociateAction;
        this.filterAction = $.filterAction;
        this.ignoreAction = $.ignoreAction;
        this.onewaySynonymsAction = $.onewaySynonymsAction;
        this.redirectAction = $.redirectAction;
        this.replacementAction = $.replacementAction;
        this.twowaySynonymsAction = $.twowaySynonymsAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudRetailV2alphaRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRetailV2alphaRuleResponse $;

        public Builder() {
            $ = new GoogleCloudRetailV2alphaRuleResponse();
        }

        public Builder(GoogleCloudRetailV2alphaRuleResponse defaults) {
            $ = new GoogleCloudRetailV2alphaRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param boostAction A boost action.
         * 
         * @return builder
         * 
         */
        public Builder boostAction(GoogleCloudRetailV2alphaRuleBoostActionResponse boostAction) {
            $.boostAction = boostAction;
            return this;
        }

        /**
         * @param condition The condition that triggers the rule. If the condition is empty, the rule will always apply.
         * 
         * @return builder
         * 
         */
        public Builder condition(GoogleCloudRetailV2alphaConditionResponse condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param doNotAssociateAction Prevents term from being associated with other terms.
         * 
         * @return builder
         * 
         */
        public Builder doNotAssociateAction(GoogleCloudRetailV2alphaRuleDoNotAssociateActionResponse doNotAssociateAction) {
            $.doNotAssociateAction = doNotAssociateAction;
            return this;
        }

        /**
         * @param filterAction Filters results.
         * 
         * @return builder
         * 
         */
        public Builder filterAction(GoogleCloudRetailV2alphaRuleFilterActionResponse filterAction) {
            $.filterAction = filterAction;
            return this;
        }

        /**
         * @param ignoreAction Ignores specific terms from query during search.
         * 
         * @return builder
         * 
         */
        public Builder ignoreAction(GoogleCloudRetailV2alphaRuleIgnoreActionResponse ignoreAction) {
            $.ignoreAction = ignoreAction;
            return this;
        }

        /**
         * @param onewaySynonymsAction Treats specific term as a synonym with a group of terms. Group of terms will not be treated as synonyms with the specific term.
         * 
         * @return builder
         * 
         */
        public Builder onewaySynonymsAction(GoogleCloudRetailV2alphaRuleOnewaySynonymsActionResponse onewaySynonymsAction) {
            $.onewaySynonymsAction = onewaySynonymsAction;
            return this;
        }

        /**
         * @param redirectAction Redirects a shopper to a specific page.
         * 
         * @return builder
         * 
         */
        public Builder redirectAction(GoogleCloudRetailV2alphaRuleRedirectActionResponse redirectAction) {
            $.redirectAction = redirectAction;
            return this;
        }

        /**
         * @param replacementAction Replaces specific terms in the query.
         * 
         * @return builder
         * 
         */
        public Builder replacementAction(GoogleCloudRetailV2alphaRuleReplacementActionResponse replacementAction) {
            $.replacementAction = replacementAction;
            return this;
        }

        /**
         * @param twowaySynonymsAction Treats a set of terms as synonyms of one another.
         * 
         * @return builder
         * 
         */
        public Builder twowaySynonymsAction(GoogleCloudRetailV2alphaRuleTwowaySynonymsActionResponse twowaySynonymsAction) {
            $.twowaySynonymsAction = twowaySynonymsAction;
            return this;
        }

        public GoogleCloudRetailV2alphaRuleResponse build() {
            $.boostAction = Objects.requireNonNull($.boostAction, "expected parameter 'boostAction' to be non-null");
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            $.doNotAssociateAction = Objects.requireNonNull($.doNotAssociateAction, "expected parameter 'doNotAssociateAction' to be non-null");
            $.filterAction = Objects.requireNonNull($.filterAction, "expected parameter 'filterAction' to be non-null");
            $.ignoreAction = Objects.requireNonNull($.ignoreAction, "expected parameter 'ignoreAction' to be non-null");
            $.onewaySynonymsAction = Objects.requireNonNull($.onewaySynonymsAction, "expected parameter 'onewaySynonymsAction' to be non-null");
            $.redirectAction = Objects.requireNonNull($.redirectAction, "expected parameter 'redirectAction' to be non-null");
            $.replacementAction = Objects.requireNonNull($.replacementAction, "expected parameter 'replacementAction' to be non-null");
            $.twowaySynonymsAction = Objects.requireNonNull($.twowaySynonymsAction, "expected parameter 'twowaySynonymsAction' to be non-null");
            return $;
        }
    }

}
