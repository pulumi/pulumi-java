// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.inputs.AccessConfigResponse;
import com.pulumi.googlenative.compute_v1.inputs.AliasIpRangeResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A network interface resource attached to an instance.
 * 
 */
public final class NetworkInterfaceResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkInterfaceResponse Empty = new NetworkInterfaceResponse();

    /**
     * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
     * 
     */
    @Import(name="accessConfigs", required=true)
    private List<AccessConfigResponse> accessConfigs;

    /**
     * @return An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
     * 
     */
    public List<AccessConfigResponse> accessConfigs() {
        return this.accessConfigs;
    }

    /**
     * An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
     * 
     */
    @Import(name="aliasIpRanges", required=true)
    private List<AliasIpRangeResponse> aliasIpRanges;

    /**
     * @return An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
     * 
     */
    public List<AliasIpRangeResponse> aliasIpRanges() {
        return this.aliasIpRanges;
    }

    /**
     * Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
     * 
     */
    @Import(name="fingerprint", required=true)
    private String fingerprint;

    /**
     * @return Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }

    /**
     * An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    @Import(name="ipv6AccessConfigs", required=true)
    private List<AccessConfigResponse> ipv6AccessConfigs;

    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    public List<AccessConfigResponse> ipv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }

    /**
     * One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
     * 
     */
    @Import(name="ipv6AccessType", required=true)
    private String ipv6AccessType;

    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
     * 
     */
    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }

    /**
     * An IPv6 internal network address for this network interface.
     * 
     */
    @Import(name="ipv6Address", required=true)
    private String ipv6Address;

    /**
     * @return An IPv6 internal network address for this network interface.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }

    /**
     * Type of the resource. Always compute#networkInterface for network interfaces.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    /**
     * @return Type of the resource. Always compute#networkInterface for network interfaces.
     * 
     */
    public String kind() {
        return this.kind;
    }

    /**
     * The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn&#39;t have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
     * 
     */
    @Import(name="network", required=true)
    private String network;

    /**
     * @return URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn&#39;t have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
     * 
     */
    public String network() {
        return this.network;
    }

    /**
     * An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
     * 
     */
    @Import(name="networkIP", required=true)
    private String networkIP;

    /**
     * @return An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
     * 
     */
    public String networkIP() {
        return this.networkIP;
    }

    /**
     * The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
     */
    @Import(name="nicType", required=true)
    private String nicType;

    /**
     * @return The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
     */
    public String nicType() {
        return this.nicType;
    }

    /**
     * The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It&#39;ll be empty if not specified by the users.
     * 
     */
    @Import(name="queueCount", required=true)
    private Integer queueCount;

    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It&#39;ll be empty if not specified by the users.
     * 
     */
    public Integer queueCount() {
        return this.queueCount;
    }

    /**
     * The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
     * 
     */
    @Import(name="stackType", required=true)
    private String stackType;

    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
     * 
     */
    public String stackType() {
        return this.stackType;
    }

    /**
     * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
     * 
     */
    @Import(name="subnetwork", required=true)
    private String subnetwork;

    /**
     * @return The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }

    private NetworkInterfaceResponse() {}

    private NetworkInterfaceResponse(NetworkInterfaceResponse $) {
        this.accessConfigs = $.accessConfigs;
        this.aliasIpRanges = $.aliasIpRanges;
        this.fingerprint = $.fingerprint;
        this.ipv6AccessConfigs = $.ipv6AccessConfigs;
        this.ipv6AccessType = $.ipv6AccessType;
        this.ipv6Address = $.ipv6Address;
        this.kind = $.kind;
        this.name = $.name;
        this.network = $.network;
        this.networkIP = $.networkIP;
        this.nicType = $.nicType;
        this.queueCount = $.queueCount;
        this.stackType = $.stackType;
        this.subnetwork = $.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceResponse $;

        public Builder() {
            $ = new NetworkInterfaceResponse();
        }

        public Builder(NetworkInterfaceResponse defaults) {
            $ = new NetworkInterfaceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessConfigs An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigs(List<AccessConfigResponse> accessConfigs) {
            $.accessConfigs = accessConfigs;
            return this;
        }

        /**
         * @param accessConfigs An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigs(AccessConfigResponse... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }

        /**
         * @param aliasIpRanges An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
         * 
         * @return builder
         * 
         */
        public Builder aliasIpRanges(List<AliasIpRangeResponse> aliasIpRanges) {
            $.aliasIpRanges = aliasIpRanges;
            return this;
        }

        /**
         * @param aliasIpRanges An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
         * 
         * @return builder
         * 
         */
        public Builder aliasIpRanges(AliasIpRangeResponse... aliasIpRanges) {
            return aliasIpRanges(List.of(aliasIpRanges));
        }

        /**
         * @param fingerprint Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param ipv6AccessConfigs An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessConfigs(List<AccessConfigResponse> ipv6AccessConfigs) {
            $.ipv6AccessConfigs = ipv6AccessConfigs;
            return this;
        }

        /**
         * @param ipv6AccessConfigs An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessConfigs(AccessConfigResponse... ipv6AccessConfigs) {
            return ipv6AccessConfigs(List.of(ipv6AccessConfigs));
        }

        /**
         * @param ipv6AccessType One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessType(String ipv6AccessType) {
            $.ipv6AccessType = ipv6AccessType;
            return this;
        }

        /**
         * @param ipv6Address An IPv6 internal network address for this network interface.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * @param kind Type of the resource. Always compute#networkInterface for network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param network URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn&#39;t have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            $.network = network;
            return this;
        }

        /**
         * @param networkIP An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
         * 
         * @return builder
         * 
         */
        public Builder networkIP(String networkIP) {
            $.networkIP = networkIP;
            return this;
        }

        /**
         * @param nicType The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
         * 
         * @return builder
         * 
         */
        public Builder nicType(String nicType) {
            $.nicType = nicType;
            return this;
        }

        /**
         * @param queueCount The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It&#39;ll be empty if not specified by the users.
         * 
         * @return builder
         * 
         */
        public Builder queueCount(Integer queueCount) {
            $.queueCount = queueCount;
            return this;
        }

        /**
         * @param stackType The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
         * 
         * @return builder
         * 
         */
        public Builder stackType(String stackType) {
            $.stackType = stackType;
            return this;
        }

        /**
         * @param subnetwork The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        public NetworkInterfaceResponse build() {
            $.accessConfigs = Objects.requireNonNull($.accessConfigs, "expected parameter 'accessConfigs' to be non-null");
            $.aliasIpRanges = Objects.requireNonNull($.aliasIpRanges, "expected parameter 'aliasIpRanges' to be non-null");
            $.fingerprint = Objects.requireNonNull($.fingerprint, "expected parameter 'fingerprint' to be non-null");
            $.ipv6AccessConfigs = Objects.requireNonNull($.ipv6AccessConfigs, "expected parameter 'ipv6AccessConfigs' to be non-null");
            $.ipv6AccessType = Objects.requireNonNull($.ipv6AccessType, "expected parameter 'ipv6AccessType' to be non-null");
            $.ipv6Address = Objects.requireNonNull($.ipv6Address, "expected parameter 'ipv6Address' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.networkIP = Objects.requireNonNull($.networkIP, "expected parameter 'networkIP' to be non-null");
            $.nicType = Objects.requireNonNull($.nicType, "expected parameter 'nicType' to be non-null");
            $.queueCount = Objects.requireNonNull($.queueCount, "expected parameter 'queueCount' to be non-null");
            $.stackType = Objects.requireNonNull($.stackType, "expected parameter 'stackType' to be non-null");
            $.subnetwork = Objects.requireNonNull($.subnetwork, "expected parameter 'subnetwork' to be non-null");
            return $;
        }
    }

}
