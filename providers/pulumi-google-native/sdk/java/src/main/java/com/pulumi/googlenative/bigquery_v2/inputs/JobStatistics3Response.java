// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class JobStatistics3Response extends com.pulumi.resources.InvokeArgs {

    public static final JobStatistics3Response Empty = new JobStatistics3Response();

    /**
     * The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
     * 
     */
    @Import(name="badRecords", required=true)
    private String badRecords;

    /**
     * @return The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
     * 
     */
    public String badRecords() {
        return this.badRecords;
    }

    /**
     * Number of bytes of source data in a load job.
     * 
     */
    @Import(name="inputFileBytes", required=true)
    private String inputFileBytes;

    /**
     * @return Number of bytes of source data in a load job.
     * 
     */
    public String inputFileBytes() {
        return this.inputFileBytes;
    }

    /**
     * Number of source files in a load job.
     * 
     */
    @Import(name="inputFiles", required=true)
    private String inputFiles;

    /**
     * @return Number of source files in a load job.
     * 
     */
    public String inputFiles() {
        return this.inputFiles;
    }

    /**
     * Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
     * 
     */
    @Import(name="outputBytes", required=true)
    private String outputBytes;

    /**
     * @return Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
     * 
     */
    public String outputBytes() {
        return this.outputBytes;
    }

    /**
     * Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
     * 
     */
    @Import(name="outputRows", required=true)
    private String outputRows;

    /**
     * @return Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
     * 
     */
    public String outputRows() {
        return this.outputRows;
    }

    private JobStatistics3Response() {}

    private JobStatistics3Response(JobStatistics3Response $) {
        this.badRecords = $.badRecords;
        this.inputFileBytes = $.inputFileBytes;
        this.inputFiles = $.inputFiles;
        this.outputBytes = $.outputBytes;
        this.outputRows = $.outputRows;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStatistics3Response defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStatistics3Response $;

        public Builder() {
            $ = new JobStatistics3Response();
        }

        public Builder(JobStatistics3Response defaults) {
            $ = new JobStatistics3Response(Objects.requireNonNull(defaults));
        }

        /**
         * @param badRecords The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
         * 
         * @return builder
         * 
         */
        public Builder badRecords(String badRecords) {
            $.badRecords = badRecords;
            return this;
        }

        /**
         * @param inputFileBytes Number of bytes of source data in a load job.
         * 
         * @return builder
         * 
         */
        public Builder inputFileBytes(String inputFileBytes) {
            $.inputFileBytes = inputFileBytes;
            return this;
        }

        /**
         * @param inputFiles Number of source files in a load job.
         * 
         * @return builder
         * 
         */
        public Builder inputFiles(String inputFiles) {
            $.inputFiles = inputFiles;
            return this;
        }

        /**
         * @param outputBytes Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
         * 
         * @return builder
         * 
         */
        public Builder outputBytes(String outputBytes) {
            $.outputBytes = outputBytes;
            return this;
        }

        /**
         * @param outputRows Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
         * 
         * @return builder
         * 
         */
        public Builder outputRows(String outputRows) {
            $.outputRows = outputRows;
            return this;
        }

        public JobStatistics3Response build() {
            $.badRecords = Objects.requireNonNull($.badRecords, "expected parameter 'badRecords' to be non-null");
            $.inputFileBytes = Objects.requireNonNull($.inputFileBytes, "expected parameter 'inputFileBytes' to be non-null");
            $.inputFiles = Objects.requireNonNull($.inputFiles, "expected parameter 'inputFiles' to be non-null");
            $.outputBytes = Objects.requireNonNull($.outputBytes, "expected parameter 'outputBytes' to be non-null");
            $.outputRows = Objects.requireNonNull($.outputRows, "expected parameter 'outputRows' to be non-null");
            return $;
        }
    }

}
