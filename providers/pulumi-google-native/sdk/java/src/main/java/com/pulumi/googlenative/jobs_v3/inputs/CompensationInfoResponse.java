// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.jobs_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.jobs_v3.inputs.CompensationEntryResponse;
import com.pulumi.googlenative.jobs_v3.inputs.CompensationRangeResponse;
import java.util.List;
import java.util.Objects;


/**
 * Job compensation details.
 * 
 */
public final class CompensationInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final CompensationInfoResponse Empty = new CompensationInfoResponse();

    /**
     * Annualized base compensation range. Computed as base compensation entry&#39;s CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
     * 
     */
    @Import(name="annualizedBaseCompensationRange", required=true)
    private CompensationRangeResponse annualizedBaseCompensationRange;

    /**
     * @return Annualized base compensation range. Computed as base compensation entry&#39;s CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
     * 
     */
    public CompensationRangeResponse annualizedBaseCompensationRange() {
        return this.annualizedBaseCompensationRange;
    }

    /**
     * Annualized total compensation range. Computed as all compensation entries&#39; CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
     * 
     */
    @Import(name="annualizedTotalCompensationRange", required=true)
    private CompensationRangeResponse annualizedTotalCompensationRange;

    /**
     * @return Annualized total compensation range. Computed as all compensation entries&#39; CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
     * 
     */
    public CompensationRangeResponse annualizedTotalCompensationRange() {
        return this.annualizedTotalCompensationRange;
    }

    /**
     * Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
     * 
     */
    @Import(name="entries", required=true)
    private List<CompensationEntryResponse> entries;

    /**
     * @return Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
     * 
     */
    public List<CompensationEntryResponse> entries() {
        return this.entries;
    }

    private CompensationInfoResponse() {}

    private CompensationInfoResponse(CompensationInfoResponse $) {
        this.annualizedBaseCompensationRange = $.annualizedBaseCompensationRange;
        this.annualizedTotalCompensationRange = $.annualizedTotalCompensationRange;
        this.entries = $.entries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CompensationInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CompensationInfoResponse $;

        public Builder() {
            $ = new CompensationInfoResponse();
        }

        public Builder(CompensationInfoResponse defaults) {
            $ = new CompensationInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annualizedBaseCompensationRange Annualized base compensation range. Computed as base compensation entry&#39;s CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
         * 
         * @return builder
         * 
         */
        public Builder annualizedBaseCompensationRange(CompensationRangeResponse annualizedBaseCompensationRange) {
            $.annualizedBaseCompensationRange = annualizedBaseCompensationRange;
            return this;
        }

        /**
         * @param annualizedTotalCompensationRange Annualized total compensation range. Computed as all compensation entries&#39; CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
         * 
         * @return builder
         * 
         */
        public Builder annualizedTotalCompensationRange(CompensationRangeResponse annualizedTotalCompensationRange) {
            $.annualizedTotalCompensationRange = annualizedTotalCompensationRange;
            return this;
        }

        /**
         * @param entries Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<CompensationEntryResponse> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
         * 
         * @return builder
         * 
         */
        public Builder entries(CompensationEntryResponse... entries) {
            return entries(List.of(entries));
        }

        public CompensationInfoResponse build() {
            $.annualizedBaseCompensationRange = Objects.requireNonNull($.annualizedBaseCompensationRange, "expected parameter 'annualizedBaseCompensationRange' to be non-null");
            $.annualizedTotalCompensationRange = Objects.requireNonNull($.annualizedTotalCompensationRange, "expected parameter 'annualizedTotalCompensationRange' to be non-null");
            $.entries = Objects.requireNonNull($.entries, "expected parameter 'entries' to be non-null");
            return $;
        }
    }

}
