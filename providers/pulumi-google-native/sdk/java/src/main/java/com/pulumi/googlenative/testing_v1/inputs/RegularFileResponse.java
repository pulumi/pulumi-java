// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import java.lang.String;
import java.util.Objects;


/**
 * A file or directory to install on the device before the test starts.
 * 
 */
public final class RegularFileResponse extends com.pulumi.resources.InvokeArgs {

    public static final RegularFileResponse Empty = new RegularFileResponse();

    /**
     * The source file.
     * 
     */
    @Import(name="content", required=true)
    private FileReferenceResponse content;

    /**
     * @return The source file.
     * 
     */
    public FileReferenceResponse content() {
        return this.content;
    }

    /**
     * Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
     * 
     */
    @Import(name="devicePath", required=true)
    private String devicePath;

    /**
     * @return Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
     * 
     */
    public String devicePath() {
        return this.devicePath;
    }

    private RegularFileResponse() {}

    private RegularFileResponse(RegularFileResponse $) {
        this.content = $.content;
        this.devicePath = $.devicePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegularFileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegularFileResponse $;

        public Builder() {
            $ = new RegularFileResponse();
        }

        public Builder(RegularFileResponse defaults) {
            $ = new RegularFileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The source file.
         * 
         * @return builder
         * 
         */
        public Builder content(FileReferenceResponse content) {
            $.content = content;
            return this;
        }

        /**
         * @param devicePath Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
         * 
         * @return builder
         * 
         */
        public Builder devicePath(String devicePath) {
            $.devicePath = devicePath;
            return this;
        }

        public RegularFileResponse build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.devicePath = Objects.requireNonNull($.devicePath, "expected parameter 'devicePath' to be non-null");
            return $;
        }
    }

}
