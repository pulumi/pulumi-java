// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.notebooks.v1.enums.ScheduleState;
import com.pulumi.googlenative.notebooks.v1.inputs.ExecutionTemplateArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleArgs Empty = new ScheduleArgs();

    /**
     * Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
     * 
     */
    @Import(name="cronSchedule")
    private @Nullable Output<String> cronSchedule;

    /**
     * @return Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
     * 
     */
    public Optional<Output<String>> cronSchedule() {
        return Optional.ofNullable(this.cronSchedule);
    }

    /**
     * A brief description of this environment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A brief description of this environment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Notebook Execution Template corresponding to this schedule.
     * 
     */
    @Import(name="executionTemplate")
    private @Nullable Output<ExecutionTemplateArgs> executionTemplate;

    /**
     * @return Notebook Execution Template corresponding to this schedule.
     * 
     */
    public Optional<Output<ExecutionTemplateArgs>> executionTemplate() {
        return Optional.ofNullable(this.executionTemplate);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. User-defined unique ID of this schedule.
     * 
     */
    @Import(name="scheduleId", required=true)
    private Output<String> scheduleId;

    /**
     * @return Required. User-defined unique ID of this schedule.
     * 
     */
    public Output<String> scheduleId() {
        return this.scheduleId;
    }

    @Import(name="state")
    private @Nullable Output<ScheduleState> state;

    public Optional<Output<ScheduleState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string &#34;utc&#34;. If a time zone is not specified, the default will be in UTC (also known as GMT).
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string &#34;utc&#34;. If a time zone is not specified, the default will be in UTC (also known as GMT).
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private ScheduleArgs() {}

    private ScheduleArgs(ScheduleArgs $) {
        this.cronSchedule = $.cronSchedule;
        this.description = $.description;
        this.executionTemplate = $.executionTemplate;
        this.location = $.location;
        this.project = $.project;
        this.scheduleId = $.scheduleId;
        this.state = $.state;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleArgs $;

        public Builder() {
            $ = new ScheduleArgs();
        }

        public Builder(ScheduleArgs defaults) {
            $ = new ScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronSchedule Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
         * 
         * @return builder
         * 
         */
        public Builder cronSchedule(@Nullable Output<String> cronSchedule) {
            $.cronSchedule = cronSchedule;
            return this;
        }

        /**
         * @param cronSchedule Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
         * 
         * @return builder
         * 
         */
        public Builder cronSchedule(String cronSchedule) {
            return cronSchedule(Output.of(cronSchedule));
        }

        /**
         * @param description A brief description of this environment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A brief description of this environment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executionTemplate Notebook Execution Template corresponding to this schedule.
         * 
         * @return builder
         * 
         */
        public Builder executionTemplate(@Nullable Output<ExecutionTemplateArgs> executionTemplate) {
            $.executionTemplate = executionTemplate;
            return this;
        }

        /**
         * @param executionTemplate Notebook Execution Template corresponding to this schedule.
         * 
         * @return builder
         * 
         */
        public Builder executionTemplate(ExecutionTemplateArgs executionTemplate) {
            return executionTemplate(Output.of(executionTemplate));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scheduleId Required. User-defined unique ID of this schedule.
         * 
         * @return builder
         * 
         */
        public Builder scheduleId(Output<String> scheduleId) {
            $.scheduleId = scheduleId;
            return this;
        }

        /**
         * @param scheduleId Required. User-defined unique ID of this schedule.
         * 
         * @return builder
         * 
         */
        public Builder scheduleId(String scheduleId) {
            return scheduleId(Output.of(scheduleId));
        }

        public Builder state(@Nullable Output<ScheduleState> state) {
            $.state = state;
            return this;
        }

        public Builder state(ScheduleState state) {
            return state(Output.of(state));
        }

        /**
         * @param timeZone Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string &#34;utc&#34;. If a time zone is not specified, the default will be in UTC (also known as GMT).
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string &#34;utc&#34;. If a time zone is not specified, the default will be in UTC (also known as GMT).
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public ScheduleArgs build() {
            $.scheduleId = Objects.requireNonNull($.scheduleId, "expected parameter 'scheduleId' to be non-null");
            return $;
        }
    }

}
