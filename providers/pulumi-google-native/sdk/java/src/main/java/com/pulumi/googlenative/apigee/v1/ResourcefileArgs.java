// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourcefileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourcefileArgs Empty = new ResourcefileArgs();

    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The HTTP Content-Type header value specifying the content type of the body.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The HTTP request/response body as raw binary.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return The HTTP request/response body as raw binary.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Application specific response metadata. Must be set in the first response for streaming APIs.
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<List<Map<String,String>>> extensions;

    /**
     * @return Application specific response metadata. Must be set in the first response for streaming APIs.
     * 
     */
    public Optional<Output<List<Map<String,String>>>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * Required. Name of the resource file. Must match the regular expression: [a-zA-Z0-9:/\\!@#$%^&amp;{}\[\]()+\-=,.~&#39;` ]{1,255}
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Required. Name of the resource file. Must match the regular expression: [a-zA-Z0-9:/\\!@#$%^&amp;{}\[\]()+\-=,.~&#39;` ]{1,255}
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Required. Resource file type. {{ resource_file_type }}
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Required. Resource file type. {{ resource_file_type }}
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ResourcefileArgs() {}

    private ResourcefileArgs(ResourcefileArgs $) {
        this.contentType = $.contentType;
        this.data = $.data;
        this.environmentId = $.environmentId;
        this.extensions = $.extensions;
        this.name = $.name;
        this.organizationId = $.organizationId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcefileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcefileArgs $;

        public Builder() {
            $ = new ResourcefileArgs();
        }

        public Builder(ResourcefileArgs defaults) {
            $ = new ResourcefileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentType The HTTP Content-Type header value specifying the content type of the body.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The HTTP Content-Type header value specifying the content type of the body.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param data The HTTP request/response body as raw binary.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The HTTP request/response body as raw binary.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param extensions Application specific response metadata. Must be set in the first response for streaming APIs.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<List<Map<String,String>>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions Application specific response metadata. Must be set in the first response for streaming APIs.
         * 
         * @return builder
         * 
         */
        public Builder extensions(List<Map<String,String>> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param extensions Application specific response metadata. Must be set in the first response for streaming APIs.
         * 
         * @return builder
         * 
         */
        public Builder extensions(Map<String,String>... extensions) {
            return extensions(List.of(extensions));
        }

        /**
         * @param name Required. Name of the resource file. Must match the regular expression: [a-zA-Z0-9:/\\!@#$%^&amp;{}\[\]()+\-=,.~&#39;` ]{1,255}
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required. Name of the resource file. Must match the regular expression: [a-zA-Z0-9:/\\!@#$%^&amp;{}\[\]()+\-=,.~&#39;` ]{1,255}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param type Required. Resource file type. {{ resource_file_type }}
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Required. Resource file type. {{ resource_file_type }}
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResourcefileArgs build() {
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
