// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1alpha1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetProjectArgs Empty = new TargetProjectArgs();

    /**
     * The target project&#39;s description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The target project&#39;s description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the target project.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the target project.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The target project ID (number) or project name.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The target project ID (number) or project name.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    @Import(name="targetProjectId", required=true)
    private Output<String> targetProjectId;

    public Output<String> targetProjectId() {
        return this.targetProjectId;
    }

    private TargetProjectArgs() {}

    private TargetProjectArgs(TargetProjectArgs $) {
        this.description = $.description;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.requestId = $.requestId;
        this.targetProjectId = $.targetProjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetProjectArgs $;

        public Builder() {
            $ = new TargetProjectArgs();
        }

        public Builder(TargetProjectArgs defaults) {
            $ = new TargetProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The target project&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The target project&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the target project.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the target project.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The target project ID (number) or project name.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The target project ID (number) or project name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder targetProjectId(Output<String> targetProjectId) {
            $.targetProjectId = targetProjectId;
            return this;
        }

        public Builder targetProjectId(String targetProjectId) {
            return targetProjectId(Output.of(targetProjectId));
        }

        public TargetProjectArgs build() {
            $.targetProjectId = Objects.requireNonNull($.targetProjectId, "expected parameter 'targetProjectId' to be non-null");
            return $;
        }
    }

}
