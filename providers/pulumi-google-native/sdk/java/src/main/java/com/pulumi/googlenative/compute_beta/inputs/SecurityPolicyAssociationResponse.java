// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class SecurityPolicyAssociationResponse extends com.pulumi.resources.InvokeArgs {

    public static final SecurityPolicyAssociationResponse Empty = new SecurityPolicyAssociationResponse();

    /**
     * The resource that the security policy is attached to.
     * 
     */
    @Import(name="attachmentId", required=true)
    private String attachmentId;

    /**
     * @return The resource that the security policy is attached to.
     * 
     */
    public String attachmentId() {
        return this.attachmentId;
    }

    /**
     * The display name of the security policy of the association.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return The display name of the security policy of the association.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * The name for an association.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name for an association.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The security policy ID of the association.
     * 
     */
    @Import(name="securityPolicyId", required=true)
    private String securityPolicyId;

    /**
     * @return The security policy ID of the association.
     * 
     */
    public String securityPolicyId() {
        return this.securityPolicyId;
    }

    private SecurityPolicyAssociationResponse() {}

    private SecurityPolicyAssociationResponse(SecurityPolicyAssociationResponse $) {
        this.attachmentId = $.attachmentId;
        this.displayName = $.displayName;
        this.name = $.name;
        this.securityPolicyId = $.securityPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyAssociationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyAssociationResponse $;

        public Builder() {
            $ = new SecurityPolicyAssociationResponse();
        }

        public Builder(SecurityPolicyAssociationResponse defaults) {
            $ = new SecurityPolicyAssociationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachmentId The resource that the security policy is attached to.
         * 
         * @return builder
         * 
         */
        public Builder attachmentId(String attachmentId) {
            $.attachmentId = attachmentId;
            return this;
        }

        /**
         * @param displayName The display name of the security policy of the association.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param name The name for an association.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param securityPolicyId The security policy ID of the association.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        public SecurityPolicyAssociationResponse build() {
            $.attachmentId = Objects.requireNonNull($.attachmentId, "expected parameter 'attachmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.securityPolicyId = Objects.requireNonNull($.securityPolicyId, "expected parameter 'securityPolicyId' to be non-null");
            return $;
        }
    }

}
