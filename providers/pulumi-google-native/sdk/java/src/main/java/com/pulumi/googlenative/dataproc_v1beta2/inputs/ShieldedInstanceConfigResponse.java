// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Shielded Instance Config for clusters using Compute Engine Shielded VMs (https://cloud.google.com/security/shielded-cloud/shielded-vm).
 * 
 */
public final class ShieldedInstanceConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final ShieldedInstanceConfigResponse Empty = new ShieldedInstanceConfigResponse();

    /**
     * Optional. Defines whether instances have integrity monitoring enabled.
     * 
     */
    @Import(name="enableIntegrityMonitoring", required=true)
    private Boolean enableIntegrityMonitoring;

    /**
     * @return Optional. Defines whether instances have integrity monitoring enabled.
     * 
     */
    public Boolean enableIntegrityMonitoring() {
        return this.enableIntegrityMonitoring;
    }

    /**
     * Optional. Defines whether instances have Secure Boot enabled.
     * 
     */
    @Import(name="enableSecureBoot", required=true)
    private Boolean enableSecureBoot;

    /**
     * @return Optional. Defines whether instances have Secure Boot enabled.
     * 
     */
    public Boolean enableSecureBoot() {
        return this.enableSecureBoot;
    }

    /**
     * Optional. Defines whether instances have the vTPM enabled.
     * 
     */
    @Import(name="enableVtpm", required=true)
    private Boolean enableVtpm;

    /**
     * @return Optional. Defines whether instances have the vTPM enabled.
     * 
     */
    public Boolean enableVtpm() {
        return this.enableVtpm;
    }

    private ShieldedInstanceConfigResponse() {}

    private ShieldedInstanceConfigResponse(ShieldedInstanceConfigResponse $) {
        this.enableIntegrityMonitoring = $.enableIntegrityMonitoring;
        this.enableSecureBoot = $.enableSecureBoot;
        this.enableVtpm = $.enableVtpm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShieldedInstanceConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShieldedInstanceConfigResponse $;

        public Builder() {
            $ = new ShieldedInstanceConfigResponse();
        }

        public Builder(ShieldedInstanceConfigResponse defaults) {
            $ = new ShieldedInstanceConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableIntegrityMonitoring Optional. Defines whether instances have integrity monitoring enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableIntegrityMonitoring(Boolean enableIntegrityMonitoring) {
            $.enableIntegrityMonitoring = enableIntegrityMonitoring;
            return this;
        }

        /**
         * @param enableSecureBoot Optional. Defines whether instances have Secure Boot enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableSecureBoot(Boolean enableSecureBoot) {
            $.enableSecureBoot = enableSecureBoot;
            return this;
        }

        /**
         * @param enableVtpm Optional. Defines whether instances have the vTPM enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableVtpm(Boolean enableVtpm) {
            $.enableVtpm = enableVtpm;
            return this;
        }

        public ShieldedInstanceConfigResponse build() {
            $.enableIntegrityMonitoring = Objects.requireNonNull($.enableIntegrityMonitoring, "expected parameter 'enableIntegrityMonitoring' to be non-null");
            $.enableSecureBoot = Objects.requireNonNull($.enableSecureBoot, "expected parameter 'enableSecureBoot' to be non-null");
            $.enableVtpm = Objects.requireNonNull($.enableVtpm, "expected parameter 'enableVtpm' to be non-null");
            return $;
        }
    }

}
