// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.AppBundleResponse;
import com.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import com.pulumi.googlenative.testing_v1.inputs.RoboDirectiveResponse;
import com.pulumi.googlenative.testing_v1.inputs.RoboStartingIntentResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
 * 
 */
public final class AndroidRoboTestResponse extends com.pulumi.resources.InvokeArgs {

    public static final AndroidRoboTestResponse Empty = new AndroidRoboTestResponse();

    /**
     * The APK for the application under test.
     * 
     */
    @Import(name="appApk", required=true)
    private FileReferenceResponse appApk;

    public FileReferenceResponse appApk() {
        return this.appApk;
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @Import(name="appBundle", required=true)
    private AppBundleResponse appBundle;

    public AppBundleResponse appBundle() {
        return this.appBundle;
    }

    /**
     * The initial activity that should be used to start the app.
     * 
     */
    @Import(name="appInitialActivity", required=true)
    private String appInitialActivity;

    public String appInitialActivity() {
        return this.appInitialActivity;
    }

    /**
     * The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="appPackageId", required=true)
    private String appPackageId;

    public String appPackageId() {
        return this.appPackageId;
    }

    /**
     * A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
     * 
     */
    @Import(name="roboDirectives", required=true)
    private List<RoboDirectiveResponse> roboDirectives;

    public List<RoboDirectiveResponse> roboDirectives() {
        return this.roboDirectives;
    }

    /**
     * The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
     * 
     */
    @Import(name="roboMode", required=true)
    private String roboMode;

    public String roboMode() {
        return this.roboMode;
    }

    /**
     * A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
     * 
     */
    @Import(name="roboScript", required=true)
    private FileReferenceResponse roboScript;

    public FileReferenceResponse roboScript() {
        return this.roboScript;
    }

    /**
     * The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
     * 
     */
    @Import(name="startingIntents", required=true)
    private List<RoboStartingIntentResponse> startingIntents;

    public List<RoboStartingIntentResponse> startingIntents() {
        return this.startingIntents;
    }

    private AndroidRoboTestResponse() {}

    private AndroidRoboTestResponse(AndroidRoboTestResponse $) {
        this.appApk = $.appApk;
        this.appBundle = $.appBundle;
        this.appInitialActivity = $.appInitialActivity;
        this.appPackageId = $.appPackageId;
        this.roboDirectives = $.roboDirectives;
        this.roboMode = $.roboMode;
        this.roboScript = $.roboScript;
        this.startingIntents = $.startingIntents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidRoboTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidRoboTestResponse $;

        public Builder() {
            $ = new AndroidRoboTestResponse();
        }

        public Builder(AndroidRoboTestResponse defaults) {
            $ = new AndroidRoboTestResponse(Objects.requireNonNull(defaults));
        }

        public Builder appApk(FileReferenceResponse appApk) {
            $.appApk = appApk;
            return this;
        }

        public Builder appBundle(AppBundleResponse appBundle) {
            $.appBundle = appBundle;
            return this;
        }

        public Builder appInitialActivity(String appInitialActivity) {
            $.appInitialActivity = appInitialActivity;
            return this;
        }

        public Builder appPackageId(String appPackageId) {
            $.appPackageId = appPackageId;
            return this;
        }

        public Builder roboDirectives(List<RoboDirectiveResponse> roboDirectives) {
            $.roboDirectives = roboDirectives;
            return this;
        }

        public Builder roboDirectives(RoboDirectiveResponse... roboDirectives) {
            return roboDirectives(List.of(roboDirectives));
        }

        public Builder roboMode(String roboMode) {
            $.roboMode = roboMode;
            return this;
        }

        public Builder roboScript(FileReferenceResponse roboScript) {
            $.roboScript = roboScript;
            return this;
        }

        public Builder startingIntents(List<RoboStartingIntentResponse> startingIntents) {
            $.startingIntents = startingIntents;
            return this;
        }

        public Builder startingIntents(RoboStartingIntentResponse... startingIntents) {
            return startingIntents(List.of(startingIntents));
        }

        public AndroidRoboTestResponse build() {
            $.appApk = Objects.requireNonNull($.appApk, "expected parameter 'appApk' to be non-null");
            $.appBundle = Objects.requireNonNull($.appBundle, "expected parameter 'appBundle' to be non-null");
            $.appInitialActivity = Objects.requireNonNull($.appInitialActivity, "expected parameter 'appInitialActivity' to be non-null");
            $.appPackageId = Objects.requireNonNull($.appPackageId, "expected parameter 'appPackageId' to be non-null");
            $.roboDirectives = Objects.requireNonNull($.roboDirectives, "expected parameter 'roboDirectives' to be non-null");
            $.roboMode = Objects.requireNonNull($.roboMode, "expected parameter 'roboMode' to be non-null");
            $.roboScript = Objects.requireNonNull($.roboScript, "expected parameter 'roboScript' to be non-null");
            $.startingIntents = Objects.requireNonNull($.startingIntents, "expected parameter 'startingIntents' to be non-null");
            return $;
        }
    }

}
