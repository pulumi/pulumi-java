// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.TlsContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The TLS settings for the server.
 * 
 */
public final class ServerTlsSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServerTlsSettingsResponse Empty = new ServerTlsSettingsResponse();

    /**
     * Configures the mechanism to obtain security certificates and identity information.
     * 
     */
    @Import(name="proxyTlsContext", required=true)
    private TlsContextResponse proxyTlsContext;

    public TlsContextResponse proxyTlsContext() {
        return this.proxyTlsContext;
    }

    /**
     * A list of alternate names to verify the subject identity in the certificate presented by the client.
     * 
     */
    @Import(name="subjectAltNames", required=true)
    private List<String> subjectAltNames;

    public List<String> subjectAltNames() {
        return this.subjectAltNames;
    }

    /**
     * Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
     * 
     */
    @Import(name="tlsMode", required=true)
    private String tlsMode;

    public String tlsMode() {
        return this.tlsMode;
    }

    private ServerTlsSettingsResponse() {}

    private ServerTlsSettingsResponse(ServerTlsSettingsResponse $) {
        this.proxyTlsContext = $.proxyTlsContext;
        this.subjectAltNames = $.subjectAltNames;
        this.tlsMode = $.tlsMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerTlsSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerTlsSettingsResponse $;

        public Builder() {
            $ = new ServerTlsSettingsResponse();
        }

        public Builder(ServerTlsSettingsResponse defaults) {
            $ = new ServerTlsSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder proxyTlsContext(TlsContextResponse proxyTlsContext) {
            $.proxyTlsContext = proxyTlsContext;
            return this;
        }

        public Builder subjectAltNames(List<String> subjectAltNames) {
            $.subjectAltNames = subjectAltNames;
            return this;
        }

        public Builder subjectAltNames(String... subjectAltNames) {
            return subjectAltNames(List.of(subjectAltNames));
        }

        public Builder tlsMode(String tlsMode) {
            $.tlsMode = tlsMode;
            return this;
        }

        public ServerTlsSettingsResponse build() {
            $.proxyTlsContext = Objects.requireNonNull($.proxyTlsContext, "expected parameter 'proxyTlsContext' to be non-null");
            $.subjectAltNames = Objects.requireNonNull($.subjectAltNames, "expected parameter 'subjectAltNames' to be non-null");
            $.tlsMode = Objects.requireNonNull($.tlsMode, "expected parameter 'tlsMode' to be non-null");
            return $;
        }
    }

}
