// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.file.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupArgs Empty = new BackupArgs();

    /**
     * Required. The ID to use for the backup. The ID must be unique within the specified project and location. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * 
     */
    @Import(name="backupId", required=true)
    private Output<String> backupId;

    /**
     * @return Required. The ID to use for the backup. The ID must be unique within the specified project and location. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * 
     */
    public Output<String> backupId() {
        return this.backupId;
    }

    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Immutable. KMS key name used for data encryption.
     * 
     */
    @Import(name="kmsKeyName")
    private @Nullable Output<String> kmsKeyName;

    /**
     * @return Immutable. KMS key name used for data encryption.
     * 
     */
    public Optional<Output<String>> kmsKeyName() {
        return Optional.ofNullable(this.kmsKeyName);
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Name of the file share in the source Cloud Filestore instance that the backup is created from.
     * 
     */
    @Import(name="sourceFileShare")
    private @Nullable Output<String> sourceFileShare;

    /**
     * @return Name of the file share in the source Cloud Filestore instance that the backup is created from.
     * 
     */
    public Optional<Output<String>> sourceFileShare() {
        return Optional.ofNullable(this.sourceFileShare);
    }

    /**
     * The resource name of the source Cloud Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
     * 
     */
    @Import(name="sourceInstance")
    private @Nullable Output<String> sourceInstance;

    /**
     * @return The resource name of the source Cloud Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
     * 
     */
    public Optional<Output<String>> sourceInstance() {
        return Optional.ofNullable(this.sourceInstance);
    }

    private BackupArgs() {}

    private BackupArgs(BackupArgs $) {
        this.backupId = $.backupId;
        this.description = $.description;
        this.kmsKeyName = $.kmsKeyName;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.sourceFileShare = $.sourceFileShare;
        this.sourceInstance = $.sourceInstance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupArgs $;

        public Builder() {
            $ = new BackupArgs();
        }

        public Builder(BackupArgs defaults) {
            $ = new BackupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupId Required. The ID to use for the backup. The ID must be unique within the specified project and location. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder backupId(Output<String> backupId) {
            $.backupId = backupId;
            return this;
        }

        /**
         * @param backupId Required. The ID to use for the backup. The ID must be unique within the specified project and location. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder backupId(String backupId) {
            return backupId(Output.of(backupId));
        }

        /**
         * @param description A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kmsKeyName Immutable. KMS key name used for data encryption.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(@Nullable Output<String> kmsKeyName) {
            $.kmsKeyName = kmsKeyName;
            return this;
        }

        /**
         * @param kmsKeyName Immutable. KMS key name used for data encryption.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(String kmsKeyName) {
            return kmsKeyName(Output.of(kmsKeyName));
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceFileShare Name of the file share in the source Cloud Filestore instance that the backup is created from.
         * 
         * @return builder
         * 
         */
        public Builder sourceFileShare(@Nullable Output<String> sourceFileShare) {
            $.sourceFileShare = sourceFileShare;
            return this;
        }

        /**
         * @param sourceFileShare Name of the file share in the source Cloud Filestore instance that the backup is created from.
         * 
         * @return builder
         * 
         */
        public Builder sourceFileShare(String sourceFileShare) {
            return sourceFileShare(Output.of(sourceFileShare));
        }

        /**
         * @param sourceInstance The resource name of the source Cloud Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstance(@Nullable Output<String> sourceInstance) {
            $.sourceInstance = sourceInstance;
            return this;
        }

        /**
         * @param sourceInstance The resource name of the source Cloud Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstance(String sourceInstance) {
            return sourceInstance(Output.of(sourceInstance));
        }

        public BackupArgs build() {
            $.backupId = Objects.requireNonNull($.backupId, "expected parameter 'backupId' to be non-null");
            return $;
        }
    }

}
