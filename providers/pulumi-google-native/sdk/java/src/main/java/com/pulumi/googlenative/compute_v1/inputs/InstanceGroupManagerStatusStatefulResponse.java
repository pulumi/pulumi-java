// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.inputs.InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse;
import java.lang.Boolean;
import java.util.Objects;


public final class InstanceGroupManagerStatusStatefulResponse extends com.pulumi.resources.InvokeArgs {

    public static final InstanceGroupManagerStatusStatefulResponse Empty = new InstanceGroupManagerStatusStatefulResponse();

    /**
     * A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
     * 
     */
    @Import(name="hasStatefulConfig", required=true)
    private Boolean hasStatefulConfig;

    /**
     * @return A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
     * 
     */
    public Boolean hasStatefulConfig() {
        return this.hasStatefulConfig;
    }

    /**
     * Status of per-instance configs on the instance.
     * 
     */
    @Import(name="perInstanceConfigs", required=true)
    private InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse perInstanceConfigs;

    /**
     * @return Status of per-instance configs on the instance.
     * 
     */
    public InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse perInstanceConfigs() {
        return this.perInstanceConfigs;
    }

    private InstanceGroupManagerStatusStatefulResponse() {}

    private InstanceGroupManagerStatusStatefulResponse(InstanceGroupManagerStatusStatefulResponse $) {
        this.hasStatefulConfig = $.hasStatefulConfig;
        this.perInstanceConfigs = $.perInstanceConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGroupManagerStatusStatefulResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGroupManagerStatusStatefulResponse $;

        public Builder() {
            $ = new InstanceGroupManagerStatusStatefulResponse();
        }

        public Builder(InstanceGroupManagerStatusStatefulResponse defaults) {
            $ = new InstanceGroupManagerStatusStatefulResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param hasStatefulConfig A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
         * 
         * @return builder
         * 
         */
        public Builder hasStatefulConfig(Boolean hasStatefulConfig) {
            $.hasStatefulConfig = hasStatefulConfig;
            return this;
        }

        /**
         * @param perInstanceConfigs Status of per-instance configs on the instance.
         * 
         * @return builder
         * 
         */
        public Builder perInstanceConfigs(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse perInstanceConfigs) {
            $.perInstanceConfigs = perInstanceConfigs;
            return this;
        }

        public InstanceGroupManagerStatusStatefulResponse build() {
            $.hasStatefulConfig = Objects.requireNonNull($.hasStatefulConfig, "expected parameter 'hasStatefulConfig' to be non-null");
            $.perInstanceConfigs = Objects.requireNonNull($.perInstanceConfigs, "expected parameter 'perInstanceConfigs' to be non-null");
            return $;
        }
    }

}
