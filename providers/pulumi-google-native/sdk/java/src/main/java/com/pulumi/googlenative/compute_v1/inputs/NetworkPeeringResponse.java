// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
 * 
 */
public final class NetworkPeeringResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkPeeringResponse Empty = new NetworkPeeringResponse();

    /**
     * This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     * 
     */
    @Import(name="autoCreateRoutes", required=true)
    private Boolean autoCreateRoutes;

    public Boolean autoCreateRoutes() {
        return this.autoCreateRoutes;
    }

    /**
     * Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     * 
     */
    @Import(name="exchangeSubnetRoutes", required=true)
    private Boolean exchangeSubnetRoutes;

    public Boolean exchangeSubnetRoutes() {
        return this.exchangeSubnetRoutes;
    }

    /**
     * Whether to export the custom routes to peer network. The default value is false.
     * 
     */
    @Import(name="exportCustomRoutes", required=true)
    private Boolean exportCustomRoutes;

    public Boolean exportCustomRoutes() {
        return this.exportCustomRoutes;
    }

    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
     * 
     */
    @Import(name="exportSubnetRoutesWithPublicIp", required=true)
    private Boolean exportSubnetRoutesWithPublicIp;

    public Boolean exportSubnetRoutesWithPublicIp() {
        return this.exportSubnetRoutesWithPublicIp;
    }

    /**
     * Whether to import the custom routes from peer network. The default value is false.
     * 
     */
    @Import(name="importCustomRoutes", required=true)
    private Boolean importCustomRoutes;

    public Boolean importCustomRoutes() {
        return this.importCustomRoutes;
    }

    /**
     * Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
     * 
     */
    @Import(name="importSubnetRoutesWithPublicIp", required=true)
    private Boolean importSubnetRoutesWithPublicIp;

    public Boolean importSubnetRoutesWithPublicIp() {
        return this.importSubnetRoutesWithPublicIp;
    }

    /**
     * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * Maximum Transmission Unit in bytes.
     * 
     */
    @Import(name="peerMtu", required=true)
    private Integer peerMtu;

    public Integer peerMtu() {
        return this.peerMtu;
    }

    /**
     * State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there&#39;s a matching configuration in the peer network.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Details about the current state of the peering.
     * 
     */
    @Import(name="stateDetails", required=true)
    private String stateDetails;

    public String stateDetails() {
        return this.stateDetails;
    }

    private NetworkPeeringResponse() {}

    private NetworkPeeringResponse(NetworkPeeringResponse $) {
        this.autoCreateRoutes = $.autoCreateRoutes;
        this.exchangeSubnetRoutes = $.exchangeSubnetRoutes;
        this.exportCustomRoutes = $.exportCustomRoutes;
        this.exportSubnetRoutesWithPublicIp = $.exportSubnetRoutesWithPublicIp;
        this.importCustomRoutes = $.importCustomRoutes;
        this.importSubnetRoutesWithPublicIp = $.importSubnetRoutesWithPublicIp;
        this.name = $.name;
        this.network = $.network;
        this.peerMtu = $.peerMtu;
        this.state = $.state;
        this.stateDetails = $.stateDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkPeeringResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkPeeringResponse $;

        public Builder() {
            $ = new NetworkPeeringResponse();
        }

        public Builder(NetworkPeeringResponse defaults) {
            $ = new NetworkPeeringResponse(Objects.requireNonNull(defaults));
        }

        public Builder autoCreateRoutes(Boolean autoCreateRoutes) {
            $.autoCreateRoutes = autoCreateRoutes;
            return this;
        }

        public Builder exchangeSubnetRoutes(Boolean exchangeSubnetRoutes) {
            $.exchangeSubnetRoutes = exchangeSubnetRoutes;
            return this;
        }

        public Builder exportCustomRoutes(Boolean exportCustomRoutes) {
            $.exportCustomRoutes = exportCustomRoutes;
            return this;
        }

        public Builder exportSubnetRoutesWithPublicIp(Boolean exportSubnetRoutesWithPublicIp) {
            $.exportSubnetRoutesWithPublicIp = exportSubnetRoutesWithPublicIp;
            return this;
        }

        public Builder importCustomRoutes(Boolean importCustomRoutes) {
            $.importCustomRoutes = importCustomRoutes;
            return this;
        }

        public Builder importSubnetRoutesWithPublicIp(Boolean importSubnetRoutesWithPublicIp) {
            $.importSubnetRoutesWithPublicIp = importSubnetRoutesWithPublicIp;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder peerMtu(Integer peerMtu) {
            $.peerMtu = peerMtu;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder stateDetails(String stateDetails) {
            $.stateDetails = stateDetails;
            return this;
        }

        public NetworkPeeringResponse build() {
            $.autoCreateRoutes = Objects.requireNonNull($.autoCreateRoutes, "expected parameter 'autoCreateRoutes' to be non-null");
            $.exchangeSubnetRoutes = Objects.requireNonNull($.exchangeSubnetRoutes, "expected parameter 'exchangeSubnetRoutes' to be non-null");
            $.exportCustomRoutes = Objects.requireNonNull($.exportCustomRoutes, "expected parameter 'exportCustomRoutes' to be non-null");
            $.exportSubnetRoutesWithPublicIp = Objects.requireNonNull($.exportSubnetRoutesWithPublicIp, "expected parameter 'exportSubnetRoutesWithPublicIp' to be non-null");
            $.importCustomRoutes = Objects.requireNonNull($.importCustomRoutes, "expected parameter 'importCustomRoutes' to be non-null");
            $.importSubnetRoutesWithPublicIp = Objects.requireNonNull($.importSubnetRoutesWithPublicIp, "expected parameter 'importSubnetRoutesWithPublicIp' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.peerMtu = Objects.requireNonNull($.peerMtu, "expected parameter 'peerMtu' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateDetails = Objects.requireNonNull($.stateDetails, "expected parameter 'stateDetails' to be non-null");
            return $;
        }
    }

}
