// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3EventHandlerResponse;
import com.pulumi.googlenative.dialogflow.v3.outputs.GoogleCloudDialogflowCxV3FulfillmentResponse;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GoogleCloudDialogflowCxV3FormParameterFillBehaviorResponse {
    /**
     * @return The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
     * 
     */
    private final GoogleCloudDialogflowCxV3FulfillmentResponse initialPromptFulfillment;
    /**
     * @return The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can&#39;t be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.
     * 
     */
    private final List<GoogleCloudDialogflowCxV3EventHandlerResponse> repromptEventHandlers;

    @CustomType.Constructor
    private GoogleCloudDialogflowCxV3FormParameterFillBehaviorResponse(
        @CustomType.Parameter("initialPromptFulfillment") GoogleCloudDialogflowCxV3FulfillmentResponse initialPromptFulfillment,
        @CustomType.Parameter("repromptEventHandlers") List<GoogleCloudDialogflowCxV3EventHandlerResponse> repromptEventHandlers) {
        this.initialPromptFulfillment = initialPromptFulfillment;
        this.repromptEventHandlers = repromptEventHandlers;
    }

    /**
     * @return The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
     * 
     */
    public GoogleCloudDialogflowCxV3FulfillmentResponse initialPromptFulfillment() {
        return this.initialPromptFulfillment;
    }
    /**
     * @return The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can&#39;t be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.
     * 
     */
    public List<GoogleCloudDialogflowCxV3EventHandlerResponse> repromptEventHandlers() {
        return this.repromptEventHandlers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudDialogflowCxV3FormParameterFillBehaviorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3FulfillmentResponse initialPromptFulfillment;
        private List<GoogleCloudDialogflowCxV3EventHandlerResponse> repromptEventHandlers;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudDialogflowCxV3FormParameterFillBehaviorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialPromptFulfillment = defaults.initialPromptFulfillment;
    	      this.repromptEventHandlers = defaults.repromptEventHandlers;
        }

        public Builder initialPromptFulfillment(GoogleCloudDialogflowCxV3FulfillmentResponse initialPromptFulfillment) {
            this.initialPromptFulfillment = Objects.requireNonNull(initialPromptFulfillment);
            return this;
        }
        public Builder repromptEventHandlers(List<GoogleCloudDialogflowCxV3EventHandlerResponse> repromptEventHandlers) {
            this.repromptEventHandlers = Objects.requireNonNull(repromptEventHandlers);
            return this;
        }
        public Builder repromptEventHandlers(GoogleCloudDialogflowCxV3EventHandlerResponse... repromptEventHandlers) {
            return repromptEventHandlers(List.of(repromptEventHandlers));
        }        public GoogleCloudDialogflowCxV3FormParameterFillBehaviorResponse build() {
            return new GoogleCloudDialogflowCxV3FormParameterFillBehaviorResponse(initialPromptFulfillment, repromptEventHandlers);
        }
    }
}
