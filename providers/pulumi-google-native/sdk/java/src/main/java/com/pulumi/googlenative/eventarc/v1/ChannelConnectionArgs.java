// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.eventarc.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelConnectionArgs Empty = new ChannelConnectionArgs();

    /**
     * Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
     * 
     */
    @Import(name="activationToken")
    private @Nullable Output<String> activationToken;

    /**
     * @return Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
     * 
     */
    public Optional<Output<String>> activationToken() {
        return Optional.ofNullable(this.activationToken);
    }

    /**
     * The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
     * 
     */
    @Import(name="channel", required=true)
    private Output<String> channel;

    /**
     * @return The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
     * 
     */
    public Output<String> channel() {
        return this.channel;
    }

    /**
     * Required. The user-provided ID to be assigned to the channel connection.
     * 
     */
    @Import(name="channelConnectionId", required=true)
    private Output<String> channelConnectionId;

    /**
     * @return Required. The user-provided ID to be assigned to the channel connection.
     * 
     */
    public Output<String> channelConnectionId() {
        return this.channelConnectionId;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the connection.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the connection.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ChannelConnectionArgs() {}

    private ChannelConnectionArgs(ChannelConnectionArgs $) {
        this.activationToken = $.activationToken;
        this.channel = $.channel;
        this.channelConnectionId = $.channelConnectionId;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelConnectionArgs $;

        public Builder() {
            $ = new ChannelConnectionArgs();
        }

        public Builder(ChannelConnectionArgs defaults) {
            $ = new ChannelConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationToken Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
         * 
         * @return builder
         * 
         */
        public Builder activationToken(@Nullable Output<String> activationToken) {
            $.activationToken = activationToken;
            return this;
        }

        /**
         * @param activationToken Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
         * 
         * @return builder
         * 
         */
        public Builder activationToken(String activationToken) {
            return activationToken(Output.of(activationToken));
        }

        /**
         * @param channel The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
         * 
         * @return builder
         * 
         */
        public Builder channel(Output<String> channel) {
            $.channel = channel;
            return this;
        }

        /**
         * @param channel The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
         * 
         * @return builder
         * 
         */
        public Builder channel(String channel) {
            return channel(Output.of(channel));
        }

        /**
         * @param channelConnectionId Required. The user-provided ID to be assigned to the channel connection.
         * 
         * @return builder
         * 
         */
        public Builder channelConnectionId(Output<String> channelConnectionId) {
            $.channelConnectionId = channelConnectionId;
            return this;
        }

        /**
         * @param channelConnectionId Required. The user-provided ID to be assigned to the channel connection.
         * 
         * @return builder
         * 
         */
        public Builder channelConnectionId(String channelConnectionId) {
            return channelConnectionId(Output.of(channelConnectionId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the connection.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the connection.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ChannelConnectionArgs build() {
            $.channel = Objects.requireNonNull($.channel, "expected parameter 'channel' to be non-null");
            $.channelConnectionId = Objects.requireNonNull($.channelConnectionId, "expected parameter 'channelConnectionId' to be non-null");
            return $;
        }
    }

}
