// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare_v1beta1.inputs.TypeResponse;
import com.pulumi.googlenative.healthcare_v1beta1.inputs.VersionSourceResponse;
import java.util.List;
import java.util.Objects;


/**
 * Root config for HL7v2 datatype definitions for a specific HL7v2 version.
 * 
 */
public final class Hl7TypesConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final Hl7TypesConfigResponse Empty = new Hl7TypesConfigResponse();

    /**
     * The HL7v2 type definitions.
     * 
     */
    @Import(name="type", required=true)
    private List<TypeResponse> type;

    /**
     * @return The HL7v2 type definitions.
     * 
     */
    public List<TypeResponse> type() {
        return this.type;
    }

    /**
     * The version selectors that this config applies to. A message must match ALL version sources to apply.
     * 
     */
    @Import(name="version", required=true)
    private List<VersionSourceResponse> version;

    /**
     * @return The version selectors that this config applies to. A message must match ALL version sources to apply.
     * 
     */
    public List<VersionSourceResponse> version() {
        return this.version;
    }

    private Hl7TypesConfigResponse() {}

    private Hl7TypesConfigResponse(Hl7TypesConfigResponse $) {
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Hl7TypesConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Hl7TypesConfigResponse $;

        public Builder() {
            $ = new Hl7TypesConfigResponse();
        }

        public Builder(Hl7TypesConfigResponse defaults) {
            $ = new Hl7TypesConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param type The HL7v2 type definitions.
         * 
         * @return builder
         * 
         */
        public Builder type(List<TypeResponse> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The HL7v2 type definitions.
         * 
         * @return builder
         * 
         */
        public Builder type(TypeResponse... type) {
            return type(List.of(type));
        }

        /**
         * @param version The version selectors that this config applies to. A message must match ALL version sources to apply.
         * 
         * @return builder
         * 
         */
        public Builder version(List<VersionSourceResponse> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version selectors that this config applies to. A message must match ALL version sources to apply.
         * 
         * @return builder
         * 
         */
        public Builder version(VersionSourceResponse... version) {
            return version(List.of(version));
        }

        public Hl7TypesConfigResponse build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
