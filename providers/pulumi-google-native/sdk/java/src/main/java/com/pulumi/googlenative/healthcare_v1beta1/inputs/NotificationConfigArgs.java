// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies where to send notifications upon changes to a data store.
 * 
 */
public final class NotificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationConfigArgs Empty = new NotificationConfigArgs();

    /**
     * The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can&#39;t be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren&#39;t submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
     * 
     */
    @Import(name="pubsubTopic")
      private final @Nullable Output<String> pubsubTopic;

    public Output<String> pubsubTopic() {
        return this.pubsubTopic == null ? Codegen.empty() : this.pubsubTopic;
    }

    /**
     * Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
     * 
     */
    @Import(name="sendForBulkImport")
      private final @Nullable Output<Boolean> sendForBulkImport;

    public Output<Boolean> sendForBulkImport() {
        return this.sendForBulkImport == null ? Codegen.empty() : this.sendForBulkImport;
    }

    public NotificationConfigArgs(
        @Nullable Output<String> pubsubTopic,
        @Nullable Output<Boolean> sendForBulkImport) {
        this.pubsubTopic = pubsubTopic;
        this.sendForBulkImport = sendForBulkImport;
    }

    private NotificationConfigArgs() {
        this.pubsubTopic = Codegen.empty();
        this.sendForBulkImport = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> pubsubTopic;
        private @Nullable Output<Boolean> sendForBulkImport;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pubsubTopic = defaults.pubsubTopic;
    	      this.sendForBulkImport = defaults.sendForBulkImport;
        }

        public Builder pubsubTopic(@Nullable Output<String> pubsubTopic) {
            this.pubsubTopic = pubsubTopic;
            return this;
        }
        public Builder pubsubTopic(@Nullable String pubsubTopic) {
            this.pubsubTopic = Codegen.ofNullable(pubsubTopic);
            return this;
        }
        public Builder sendForBulkImport(@Nullable Output<Boolean> sendForBulkImport) {
            this.sendForBulkImport = sendForBulkImport;
            return this;
        }
        public Builder sendForBulkImport(@Nullable Boolean sendForBulkImport) {
            this.sendForBulkImport = Codegen.ofNullable(sendForBulkImport);
            return this;
        }        public NotificationConfigArgs build() {
            return new NotificationConfigArgs(pubsubTopic, sendForBulkImport);
        }
    }
}
