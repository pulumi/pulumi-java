// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Oracle Column.
 * 
 */
public final class OracleColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final OracleColumnArgs Empty = new OracleColumnArgs();

    /**
     * Column name.
     * 
     */
    @Import(name="columnName")
    private @Nullable Output<String> columnName;

    public Optional<Output<String>> columnName() {
        return Optional.ofNullable(this.columnName);
    }

    /**
     * The Oracle data type.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * Column encoding.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * Column length.
     * 
     */
    @Import(name="length")
    private @Nullable Output<Integer> length;

    public Optional<Output<Integer>> length() {
        return Optional.ofNullable(this.length);
    }

    /**
     * Whether or not the column can accept a null value.
     * 
     */
    @Import(name="nullable")
    private @Nullable Output<Boolean> nullable;

    public Optional<Output<Boolean>> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    /**
     * The ordinal position of the column in the table.
     * 
     */
    @Import(name="ordinalPosition")
    private @Nullable Output<Integer> ordinalPosition;

    public Optional<Output<Integer>> ordinalPosition() {
        return Optional.ofNullable(this.ordinalPosition);
    }

    /**
     * Column precision.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<Integer> precision;

    public Optional<Output<Integer>> precision() {
        return Optional.ofNullable(this.precision);
    }

    /**
     * Whether or not the column represents a primary key.
     * 
     */
    @Import(name="primaryKey")
    private @Nullable Output<Boolean> primaryKey;

    public Optional<Output<Boolean>> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }

    /**
     * Column scale.
     * 
     */
    @Import(name="scale")
    private @Nullable Output<Integer> scale;

    public Optional<Output<Integer>> scale() {
        return Optional.ofNullable(this.scale);
    }

    private OracleColumnArgs() {}

    private OracleColumnArgs(OracleColumnArgs $) {
        this.columnName = $.columnName;
        this.dataType = $.dataType;
        this.encoding = $.encoding;
        this.length = $.length;
        this.nullable = $.nullable;
        this.ordinalPosition = $.ordinalPosition;
        this.precision = $.precision;
        this.primaryKey = $.primaryKey;
        this.scale = $.scale;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OracleColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OracleColumnArgs $;

        public Builder() {
            $ = new OracleColumnArgs();
        }

        public Builder(OracleColumnArgs defaults) {
            $ = new OracleColumnArgs(Objects.requireNonNull(defaults));
        }

        public Builder columnName(@Nullable Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        public Builder length(@Nullable Output<Integer> length) {
            $.length = length;
            return this;
        }

        public Builder length(Integer length) {
            return length(Output.of(length));
        }

        public Builder nullable(@Nullable Output<Boolean> nullable) {
            $.nullable = nullable;
            return this;
        }

        public Builder nullable(Boolean nullable) {
            return nullable(Output.of(nullable));
        }

        public Builder ordinalPosition(@Nullable Output<Integer> ordinalPosition) {
            $.ordinalPosition = ordinalPosition;
            return this;
        }

        public Builder ordinalPosition(Integer ordinalPosition) {
            return ordinalPosition(Output.of(ordinalPosition));
        }

        public Builder precision(@Nullable Output<Integer> precision) {
            $.precision = precision;
            return this;
        }

        public Builder precision(Integer precision) {
            return precision(Output.of(precision));
        }

        public Builder primaryKey(@Nullable Output<Boolean> primaryKey) {
            $.primaryKey = primaryKey;
            return this;
        }

        public Builder primaryKey(Boolean primaryKey) {
            return primaryKey(Output.of(primaryKey));
        }

        public Builder scale(@Nullable Output<Integer> scale) {
            $.scale = scale;
            return this;
        }

        public Builder scale(Integer scale) {
            return scale(Output.of(scale));
        }

        public OracleColumnArgs build() {
            return $;
        }
    }

}
