// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder_v1.inputs.NormalizedCoordinateResponse;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Overlaid jpeg image.
 * 
 */
public final class ImageResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageResponse Empty = new ImageResponse();

    /**
     * Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
     * 
     */
    @Import(name="alpha", required=true)
    private Double alpha;

    public Double alpha() {
        return this.alpha;
    }

    /**
     * Normalized image resolution, based on output video resolution. Valid values: `0.0`â€“`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
     * 
     */
    @Import(name="resolution", required=true)
    private NormalizedCoordinateResponse resolution;

    public NormalizedCoordinateResponse resolution() {
        return this.resolution;
    }

    /**
     * URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    public String uri() {
        return this.uri;
    }

    private ImageResponse() {}

    private ImageResponse(ImageResponse $) {
        this.alpha = $.alpha;
        this.resolution = $.resolution;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageResponse $;

        public Builder() {
            $ = new ImageResponse();
        }

        public Builder(ImageResponse defaults) {
            $ = new ImageResponse(Objects.requireNonNull(defaults));
        }

        public Builder alpha(Double alpha) {
            $.alpha = alpha;
            return this;
        }

        public Builder resolution(NormalizedCoordinateResponse resolution) {
            $.resolution = resolution;
            return this;
        }

        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public ImageResponse build() {
            $.alpha = Objects.requireNonNull($.alpha, "expected parameter 'alpha' to be non-null");
            $.resolution = Objects.requireNonNull($.resolution, "expected parameter 'resolution' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
