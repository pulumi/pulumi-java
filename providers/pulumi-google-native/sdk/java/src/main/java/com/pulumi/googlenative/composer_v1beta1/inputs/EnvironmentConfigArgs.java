// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.composer_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.composer_v1beta1.enums.EnvironmentConfigEnvironmentSize;
import com.pulumi.googlenative.composer_v1beta1.inputs.DatabaseConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.EncryptionConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.MaintenanceWindowArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.MasterAuthorizedNetworksConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.NodeConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.PrivateEnvironmentConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.SoftwareConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.WebServerConfigArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.WebServerNetworkAccessControlArgs;
import com.pulumi.googlenative.composer_v1beta1.inputs.WorkloadsConfigArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration information for an environment.
 * 
 */
public final class EnvironmentConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentConfigArgs Empty = new EnvironmentConfigArgs();

    /**
     * Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @Import(name="databaseConfig")
    private @Nullable Output<DatabaseConfigArgs> databaseConfig;

    public Optional<Output<DatabaseConfigArgs>> databaseConfig() {
        return Optional.ofNullable(this.databaseConfig);
    }

    /**
     * Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
     * 
     */
    @Import(name="encryptionConfig")
    private @Nullable Output<EncryptionConfigArgs> encryptionConfig;

    public Optional<Output<EncryptionConfigArgs>> encryptionConfig() {
        return Optional.ofNullable(this.encryptionConfig);
    }

    /**
     * Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @Import(name="environmentSize")
    private @Nullable Output<EnvironmentConfigEnvironmentSize> environmentSize;

    public Optional<Output<EnvironmentConfigEnvironmentSize>> environmentSize() {
        return Optional.ofNullable(this.environmentSize);
    }

    /**
     * Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<MaintenanceWindowArgs> maintenanceWindow;

    public Optional<Output<MaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * Optional. The configuration options for GKE clusters master authorized networks. By default master authorized networks feature is: - in case of private environment: enabled with no external networks allowlisted. - in case of public environment: disabled.
     * 
     */
    @Import(name="masterAuthorizedNetworksConfig")
    private @Nullable Output<MasterAuthorizedNetworksConfigArgs> masterAuthorizedNetworksConfig;

    public Optional<Output<MasterAuthorizedNetworksConfigArgs>> masterAuthorizedNetworksConfig() {
        return Optional.ofNullable(this.masterAuthorizedNetworksConfig);
    }

    /**
     * The configuration used for the Kubernetes Engine cluster.
     * 
     */
    @Import(name="nodeConfig")
    private @Nullable Output<NodeConfigArgs> nodeConfig;

    public Optional<Output<NodeConfigArgs>> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }

    /**
     * The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * The configuration used for the Private IP Cloud Composer environment.
     * 
     */
    @Import(name="privateEnvironmentConfig")
    private @Nullable Output<PrivateEnvironmentConfigArgs> privateEnvironmentConfig;

    public Optional<Output<PrivateEnvironmentConfigArgs>> privateEnvironmentConfig() {
        return Optional.ofNullable(this.privateEnvironmentConfig);
    }

    /**
     * The configuration settings for software inside the environment.
     * 
     */
    @Import(name="softwareConfig")
    private @Nullable Output<SoftwareConfigArgs> softwareConfig;

    public Optional<Output<SoftwareConfigArgs>> softwareConfig() {
        return Optional.ofNullable(this.softwareConfig);
    }

    /**
     * Optional. The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @Import(name="webServerConfig")
    private @Nullable Output<WebServerConfigArgs> webServerConfig;

    public Optional<Output<WebServerConfigArgs>> webServerConfig() {
        return Optional.ofNullable(this.webServerConfig);
    }

    /**
     * Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
     * 
     */
    @Import(name="webServerNetworkAccessControl")
    private @Nullable Output<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl;

    public Optional<Output<WebServerNetworkAccessControlArgs>> webServerNetworkAccessControl() {
        return Optional.ofNullable(this.webServerNetworkAccessControl);
    }

    /**
     * Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @Import(name="workloadsConfig")
    private @Nullable Output<WorkloadsConfigArgs> workloadsConfig;

    public Optional<Output<WorkloadsConfigArgs>> workloadsConfig() {
        return Optional.ofNullable(this.workloadsConfig);
    }

    private EnvironmentConfigArgs() {}

    private EnvironmentConfigArgs(EnvironmentConfigArgs $) {
        this.databaseConfig = $.databaseConfig;
        this.encryptionConfig = $.encryptionConfig;
        this.environmentSize = $.environmentSize;
        this.maintenanceWindow = $.maintenanceWindow;
        this.masterAuthorizedNetworksConfig = $.masterAuthorizedNetworksConfig;
        this.nodeConfig = $.nodeConfig;
        this.nodeCount = $.nodeCount;
        this.privateEnvironmentConfig = $.privateEnvironmentConfig;
        this.softwareConfig = $.softwareConfig;
        this.webServerConfig = $.webServerConfig;
        this.webServerNetworkAccessControl = $.webServerNetworkAccessControl;
        this.workloadsConfig = $.workloadsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentConfigArgs $;

        public Builder() {
            $ = new EnvironmentConfigArgs();
        }

        public Builder(EnvironmentConfigArgs defaults) {
            $ = new EnvironmentConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseConfig(@Nullable Output<DatabaseConfigArgs> databaseConfig) {
            $.databaseConfig = databaseConfig;
            return this;
        }

        public Builder databaseConfig(DatabaseConfigArgs databaseConfig) {
            return databaseConfig(Output.of(databaseConfig));
        }

        public Builder encryptionConfig(@Nullable Output<EncryptionConfigArgs> encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder encryptionConfig(EncryptionConfigArgs encryptionConfig) {
            return encryptionConfig(Output.of(encryptionConfig));
        }

        public Builder environmentSize(@Nullable Output<EnvironmentConfigEnvironmentSize> environmentSize) {
            $.environmentSize = environmentSize;
            return this;
        }

        public Builder environmentSize(EnvironmentConfigEnvironmentSize environmentSize) {
            return environmentSize(Output.of(environmentSize));
        }

        public Builder maintenanceWindow(@Nullable Output<MaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder maintenanceWindow(MaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        public Builder masterAuthorizedNetworksConfig(@Nullable Output<MasterAuthorizedNetworksConfigArgs> masterAuthorizedNetworksConfig) {
            $.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            return this;
        }

        public Builder masterAuthorizedNetworksConfig(MasterAuthorizedNetworksConfigArgs masterAuthorizedNetworksConfig) {
            return masterAuthorizedNetworksConfig(Output.of(masterAuthorizedNetworksConfig));
        }

        public Builder nodeConfig(@Nullable Output<NodeConfigArgs> nodeConfig) {
            $.nodeConfig = nodeConfig;
            return this;
        }

        public Builder nodeConfig(NodeConfigArgs nodeConfig) {
            return nodeConfig(Output.of(nodeConfig));
        }

        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        public Builder privateEnvironmentConfig(@Nullable Output<PrivateEnvironmentConfigArgs> privateEnvironmentConfig) {
            $.privateEnvironmentConfig = privateEnvironmentConfig;
            return this;
        }

        public Builder privateEnvironmentConfig(PrivateEnvironmentConfigArgs privateEnvironmentConfig) {
            return privateEnvironmentConfig(Output.of(privateEnvironmentConfig));
        }

        public Builder softwareConfig(@Nullable Output<SoftwareConfigArgs> softwareConfig) {
            $.softwareConfig = softwareConfig;
            return this;
        }

        public Builder softwareConfig(SoftwareConfigArgs softwareConfig) {
            return softwareConfig(Output.of(softwareConfig));
        }

        public Builder webServerConfig(@Nullable Output<WebServerConfigArgs> webServerConfig) {
            $.webServerConfig = webServerConfig;
            return this;
        }

        public Builder webServerConfig(WebServerConfigArgs webServerConfig) {
            return webServerConfig(Output.of(webServerConfig));
        }

        public Builder webServerNetworkAccessControl(@Nullable Output<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl) {
            $.webServerNetworkAccessControl = webServerNetworkAccessControl;
            return this;
        }

        public Builder webServerNetworkAccessControl(WebServerNetworkAccessControlArgs webServerNetworkAccessControl) {
            return webServerNetworkAccessControl(Output.of(webServerNetworkAccessControl));
        }

        public Builder workloadsConfig(@Nullable Output<WorkloadsConfigArgs> workloadsConfig) {
            $.workloadsConfig = workloadsConfig;
            return this;
        }

        public Builder workloadsConfig(WorkloadsConfigArgs workloadsConfig) {
            return workloadsConfig(Output.of(workloadsConfig));
        }

        public EnvironmentConfigArgs build() {
            return $;
        }
    }

}
