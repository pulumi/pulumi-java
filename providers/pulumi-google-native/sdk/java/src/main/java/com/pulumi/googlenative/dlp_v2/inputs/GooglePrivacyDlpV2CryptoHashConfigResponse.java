// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2CryptoKeyResponse;
import java.util.Objects;


/**
 * Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
 * 
 */
public final class GooglePrivacyDlpV2CryptoHashConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2CryptoHashConfigResponse Empty = new GooglePrivacyDlpV2CryptoHashConfigResponse();

    /**
     * The key used by the hash function.
     * 
     */
    @Import(name="cryptoKey", required=true)
    private GooglePrivacyDlpV2CryptoKeyResponse cryptoKey;

    /**
     * @return The key used by the hash function.
     * 
     */
    public GooglePrivacyDlpV2CryptoKeyResponse cryptoKey() {
        return this.cryptoKey;
    }

    private GooglePrivacyDlpV2CryptoHashConfigResponse() {}

    private GooglePrivacyDlpV2CryptoHashConfigResponse(GooglePrivacyDlpV2CryptoHashConfigResponse $) {
        this.cryptoKey = $.cryptoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CryptoHashConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CryptoHashConfigResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CryptoHashConfigResponse();
        }

        public Builder(GooglePrivacyDlpV2CryptoHashConfigResponse defaults) {
            $ = new GooglePrivacyDlpV2CryptoHashConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoKey The key used by the hash function.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(GooglePrivacyDlpV2CryptoKeyResponse cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        public GooglePrivacyDlpV2CryptoHashConfigResponse build() {
            $.cryptoKey = Objects.requireNonNull($.cryptoKey, "expected parameter 'cryptoKey' to be non-null");
            return $;
        }
    }

}
