// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing.v1.inputs.ManualShardingArgs;
import com.pulumi.googlenative.testing.v1.inputs.UniformShardingArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Options for enabling sharding.
 * 
 */
public final class ShardingOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShardingOptionArgs Empty = new ShardingOptionArgs();

    /**
     * Shards test cases into the specified groups of packages, classes, and/or methods.
     * 
     */
    @Import(name="manualSharding")
    private @Nullable Output<ManualShardingArgs> manualSharding;

    /**
     * @return Shards test cases into the specified groups of packages, classes, and/or methods.
     * 
     */
    public Optional<Output<ManualShardingArgs>> manualSharding() {
        return Optional.ofNullable(this.manualSharding);
    }

    /**
     * Uniformly shards test cases given a total number of shards.
     * 
     */
    @Import(name="uniformSharding")
    private @Nullable Output<UniformShardingArgs> uniformSharding;

    /**
     * @return Uniformly shards test cases given a total number of shards.
     * 
     */
    public Optional<Output<UniformShardingArgs>> uniformSharding() {
        return Optional.ofNullable(this.uniformSharding);
    }

    private ShardingOptionArgs() {}

    private ShardingOptionArgs(ShardingOptionArgs $) {
        this.manualSharding = $.manualSharding;
        this.uniformSharding = $.uniformSharding;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardingOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardingOptionArgs $;

        public Builder() {
            $ = new ShardingOptionArgs();
        }

        public Builder(ShardingOptionArgs defaults) {
            $ = new ShardingOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manualSharding Shards test cases into the specified groups of packages, classes, and/or methods.
         * 
         * @return builder
         * 
         */
        public Builder manualSharding(@Nullable Output<ManualShardingArgs> manualSharding) {
            $.manualSharding = manualSharding;
            return this;
        }

        /**
         * @param manualSharding Shards test cases into the specified groups of packages, classes, and/or methods.
         * 
         * @return builder
         * 
         */
        public Builder manualSharding(ManualShardingArgs manualSharding) {
            return manualSharding(Output.of(manualSharding));
        }

        /**
         * @param uniformSharding Uniformly shards test cases given a total number of shards.
         * 
         * @return builder
         * 
         */
        public Builder uniformSharding(@Nullable Output<UniformShardingArgs> uniformSharding) {
            $.uniformSharding = uniformSharding;
            return this;
        }

        /**
         * @param uniformSharding Uniformly shards test cases given a total number of shards.
         * 
         * @return builder
         * 
         */
        public Builder uniformSharding(UniformShardingArgs uniformSharding) {
            return uniformSharding(Output.of(uniformSharding));
        }

        public ShardingOptionArgs build() {
            return $;
        }
    }

}
