// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.VersionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
 * 
 */
public final class PackageIssueResponse extends com.pulumi.resources.InvokeArgs {

    public static final PackageIssueResponse Empty = new PackageIssueResponse();

    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
     * 
     */
    @Import(name="affectedCpeUri", required=true)
    private String affectedCpeUri;

    /**
     * @return The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
     * 
     */
    public String affectedCpeUri() {
        return this.affectedCpeUri;
    }

    /**
     * The package this vulnerability was found in.
     * 
     */
    @Import(name="affectedPackage", required=true)
    private String affectedPackage;

    /**
     * @return The package this vulnerability was found in.
     * 
     */
    public String affectedPackage() {
        return this.affectedPackage;
    }

    /**
     * The version of the package that is installed on the resource affected by this vulnerability.
     * 
     */
    @Import(name="affectedVersion", required=true)
    private VersionResponse affectedVersion;

    /**
     * @return The version of the package that is installed on the resource affected by this vulnerability.
     * 
     */
    public VersionResponse affectedVersion() {
        return this.affectedVersion;
    }

    /**
     * The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
     * 
     */
    @Import(name="effectiveSeverity", required=true)
    private String effectiveSeverity;

    /**
     * @return The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
     * 
     */
    public String effectiveSeverity() {
        return this.effectiveSeverity;
    }

    /**
     * Whether a fix is available for this package.
     * 
     */
    @Import(name="fixAvailable", required=true)
    private Boolean fixAvailable;

    /**
     * @return Whether a fix is available for this package.
     * 
     */
    public Boolean fixAvailable() {
        return this.fixAvailable;
    }

    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
     * 
     */
    @Import(name="fixedCpeUri", required=true)
    private String fixedCpeUri;

    /**
     * @return The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
     * 
     */
    public String fixedCpeUri() {
        return this.fixedCpeUri;
    }

    /**
     * The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
     * 
     */
    @Import(name="fixedPackage", required=true)
    private String fixedPackage;

    /**
     * @return The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
     * 
     */
    public String fixedPackage() {
        return this.fixedPackage;
    }

    /**
     * The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
     * 
     */
    @Import(name="fixedVersion", required=true)
    private VersionResponse fixedVersion;

    /**
     * @return The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
     * 
     */
    public VersionResponse fixedVersion() {
        return this.fixedVersion;
    }

    /**
     * The type of package (e.g. OS, MAVEN, GO).
     * 
     */
    @Import(name="packageType", required=true)
    private String packageType;

    /**
     * @return The type of package (e.g. OS, MAVEN, GO).
     * 
     */
    public String packageType() {
        return this.packageType;
    }

    private PackageIssueResponse() {}

    private PackageIssueResponse(PackageIssueResponse $) {
        this.affectedCpeUri = $.affectedCpeUri;
        this.affectedPackage = $.affectedPackage;
        this.affectedVersion = $.affectedVersion;
        this.effectiveSeverity = $.effectiveSeverity;
        this.fixAvailable = $.fixAvailable;
        this.fixedCpeUri = $.fixedCpeUri;
        this.fixedPackage = $.fixedPackage;
        this.fixedVersion = $.fixedVersion;
        this.packageType = $.packageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageIssueResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageIssueResponse $;

        public Builder() {
            $ = new PackageIssueResponse();
        }

        public Builder(PackageIssueResponse defaults) {
            $ = new PackageIssueResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param affectedCpeUri The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
         * 
         * @return builder
         * 
         */
        public Builder affectedCpeUri(String affectedCpeUri) {
            $.affectedCpeUri = affectedCpeUri;
            return this;
        }

        /**
         * @param affectedPackage The package this vulnerability was found in.
         * 
         * @return builder
         * 
         */
        public Builder affectedPackage(String affectedPackage) {
            $.affectedPackage = affectedPackage;
            return this;
        }

        /**
         * @param affectedVersion The version of the package that is installed on the resource affected by this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder affectedVersion(VersionResponse affectedVersion) {
            $.affectedVersion = affectedVersion;
            return this;
        }

        /**
         * @param effectiveSeverity The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(String effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        /**
         * @param fixAvailable Whether a fix is available for this package.
         * 
         * @return builder
         * 
         */
        public Builder fixAvailable(Boolean fixAvailable) {
            $.fixAvailable = fixAvailable;
            return this;
        }

        /**
         * @param fixedCpeUri The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
         * 
         * @return builder
         * 
         */
        public Builder fixedCpeUri(String fixedCpeUri) {
            $.fixedCpeUri = fixedCpeUri;
            return this;
        }

        /**
         * @param fixedPackage The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
         * 
         * @return builder
         * 
         */
        public Builder fixedPackage(String fixedPackage) {
            $.fixedPackage = fixedPackage;
            return this;
        }

        /**
         * @param fixedVersion The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
         * 
         * @return builder
         * 
         */
        public Builder fixedVersion(VersionResponse fixedVersion) {
            $.fixedVersion = fixedVersion;
            return this;
        }

        /**
         * @param packageType The type of package (e.g. OS, MAVEN, GO).
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            $.packageType = packageType;
            return this;
        }

        public PackageIssueResponse build() {
            $.affectedCpeUri = Objects.requireNonNull($.affectedCpeUri, "expected parameter 'affectedCpeUri' to be non-null");
            $.affectedPackage = Objects.requireNonNull($.affectedPackage, "expected parameter 'affectedPackage' to be non-null");
            $.affectedVersion = Objects.requireNonNull($.affectedVersion, "expected parameter 'affectedVersion' to be non-null");
            $.effectiveSeverity = Objects.requireNonNull($.effectiveSeverity, "expected parameter 'effectiveSeverity' to be non-null");
            $.fixAvailable = Objects.requireNonNull($.fixAvailable, "expected parameter 'fixAvailable' to be non-null");
            $.fixedCpeUri = Objects.requireNonNull($.fixedCpeUri, "expected parameter 'fixedCpeUri' to be non-null");
            $.fixedPackage = Objects.requireNonNull($.fixedPackage, "expected parameter 'fixedPackage' to be non-null");
            $.fixedVersion = Objects.requireNonNull($.fixedVersion, "expected parameter 'fixedVersion' to be non-null");
            $.packageType = Objects.requireNonNull($.packageType, "expected parameter 'packageType' to be non-null");
            return $;
        }
    }

}
