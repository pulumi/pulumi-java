// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBucketObjectArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectArgs Empty = new GetBucketObjectArgs();

    @Import(name="bucket", required=true)
    private String bucket;

    public String bucket() {
        return this.bucket;
    }

    @Import(name="generation")
    private @Nullable String generation;

    public Optional<String> generation() {
        return Optional.ofNullable(this.generation);
    }

    @Import(name="ifGenerationMatch")
    private @Nullable String ifGenerationMatch;

    public Optional<String> ifGenerationMatch() {
        return Optional.ofNullable(this.ifGenerationMatch);
    }

    @Import(name="ifGenerationNotMatch")
    private @Nullable String ifGenerationNotMatch;

    public Optional<String> ifGenerationNotMatch() {
        return Optional.ofNullable(this.ifGenerationNotMatch);
    }

    @Import(name="ifMetagenerationMatch")
    private @Nullable String ifMetagenerationMatch;

    public Optional<String> ifMetagenerationMatch() {
        return Optional.ofNullable(this.ifMetagenerationMatch);
    }

    @Import(name="ifMetagenerationNotMatch")
    private @Nullable String ifMetagenerationNotMatch;

    public Optional<String> ifMetagenerationNotMatch() {
        return Optional.ofNullable(this.ifMetagenerationNotMatch);
    }

    @Import(name="object", required=true)
    private String object;

    public String object() {
        return this.object;
    }

    @Import(name="projection")
    private @Nullable String projection;

    public Optional<String> projection() {
        return Optional.ofNullable(this.projection);
    }

    @Import(name="provisionalUserProject")
    private @Nullable String provisionalUserProject;

    public Optional<String> provisionalUserProject() {
        return Optional.ofNullable(this.provisionalUserProject);
    }

    @Import(name="userProject")
    private @Nullable String userProject;

    public Optional<String> userProject() {
        return Optional.ofNullable(this.userProject);
    }

    private GetBucketObjectArgs() {}

    private GetBucketObjectArgs(GetBucketObjectArgs $) {
        this.bucket = $.bucket;
        this.generation = $.generation;
        this.ifGenerationMatch = $.ifGenerationMatch;
        this.ifGenerationNotMatch = $.ifGenerationNotMatch;
        this.ifMetagenerationMatch = $.ifMetagenerationMatch;
        this.ifMetagenerationNotMatch = $.ifMetagenerationNotMatch;
        this.object = $.object;
        this.projection = $.projection;
        this.provisionalUserProject = $.provisionalUserProject;
        this.userProject = $.userProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBucketObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBucketObjectArgs $;

        public Builder() {
            $ = new GetBucketObjectArgs();
        }

        public Builder(GetBucketObjectArgs defaults) {
            $ = new GetBucketObjectArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucket(String bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder generation(@Nullable String generation) {
            $.generation = generation;
            return this;
        }

        public Builder ifGenerationMatch(@Nullable String ifGenerationMatch) {
            $.ifGenerationMatch = ifGenerationMatch;
            return this;
        }

        public Builder ifGenerationNotMatch(@Nullable String ifGenerationNotMatch) {
            $.ifGenerationNotMatch = ifGenerationNotMatch;
            return this;
        }

        public Builder ifMetagenerationMatch(@Nullable String ifMetagenerationMatch) {
            $.ifMetagenerationMatch = ifMetagenerationMatch;
            return this;
        }

        public Builder ifMetagenerationNotMatch(@Nullable String ifMetagenerationNotMatch) {
            $.ifMetagenerationNotMatch = ifMetagenerationNotMatch;
            return this;
        }

        public Builder object(String object) {
            $.object = object;
            return this;
        }

        public Builder projection(@Nullable String projection) {
            $.projection = projection;
            return this;
        }

        public Builder provisionalUserProject(@Nullable String provisionalUserProject) {
            $.provisionalUserProject = provisionalUserProject;
            return this;
        }

        public Builder userProject(@Nullable String userProject) {
            $.userProject = userProject;
            return this;
        }

        public GetBucketObjectArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.object = Objects.requireNonNull($.object, "expected parameter 'object' to be non-null");
            return $;
        }
    }

}
