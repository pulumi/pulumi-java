// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream_v1.inputs.MysqlDatabaseResponse;
import java.util.List;
import java.util.Objects;


/**
 * MySQL database structure
 * 
 */
public final class MysqlRdbmsResponse extends com.pulumi.resources.InvokeArgs {

    public static final MysqlRdbmsResponse Empty = new MysqlRdbmsResponse();

    /**
     * Mysql databases on the server
     * 
     */
    @Import(name="mysqlDatabases", required=true)
    private List<MysqlDatabaseResponse> mysqlDatabases;

    /**
     * @return Mysql databases on the server
     * 
     */
    public List<MysqlDatabaseResponse> mysqlDatabases() {
        return this.mysqlDatabases;
    }

    private MysqlRdbmsResponse() {}

    private MysqlRdbmsResponse(MysqlRdbmsResponse $) {
        this.mysqlDatabases = $.mysqlDatabases;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlRdbmsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlRdbmsResponse $;

        public Builder() {
            $ = new MysqlRdbmsResponse();
        }

        public Builder(MysqlRdbmsResponse defaults) {
            $ = new MysqlRdbmsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param mysqlDatabases Mysql databases on the server
         * 
         * @return builder
         * 
         */
        public Builder mysqlDatabases(List<MysqlDatabaseResponse> mysqlDatabases) {
            $.mysqlDatabases = mysqlDatabases;
            return this;
        }

        /**
         * @param mysqlDatabases Mysql databases on the server
         * 
         * @return builder
         * 
         */
        public Builder mysqlDatabases(MysqlDatabaseResponse... mysqlDatabases) {
            return mysqlDatabases(List.of(mysqlDatabases));
        }

        public MysqlRdbmsResponse build() {
            $.mysqlDatabases = Objects.requireNonNull($.mysqlDatabases, "expected parameter 'mysqlDatabases' to be non-null");
            return $;
        }
    }

}
