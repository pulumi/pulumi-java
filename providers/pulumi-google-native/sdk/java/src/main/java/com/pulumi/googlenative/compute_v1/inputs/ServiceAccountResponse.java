// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A service account.
 * 
 */
public final class ServiceAccountResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServiceAccountResponse Empty = new ServiceAccountResponse();

    /**
     * Email address of the service account.
     * 
     */
    @Import(name="email", required=true)
    private String email;

    public String email() {
        return this.email;
    }

    /**
     * The list of scopes to be made available for this service account.
     * 
     */
    @Import(name="scopes", required=true)
    private List<String> scopes;

    public List<String> scopes() {
        return this.scopes;
    }

    private ServiceAccountResponse() {}

    private ServiceAccountResponse(ServiceAccountResponse $) {
        this.email = $.email;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAccountResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAccountResponse $;

        public Builder() {
            $ = new ServiceAccountResponse();
        }

        public Builder(ServiceAccountResponse defaults) {
            $ = new ServiceAccountResponse(Objects.requireNonNull(defaults));
        }

        public Builder email(String email) {
            $.email = email;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ServiceAccountResponse build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.scopes = Objects.requireNonNull($.scopes, "expected parameter 'scopes' to be non-null");
            return $;
        }
    }

}
