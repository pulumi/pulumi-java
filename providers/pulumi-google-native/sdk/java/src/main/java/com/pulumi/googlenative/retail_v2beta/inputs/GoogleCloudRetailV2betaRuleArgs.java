// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.retail_v2beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaConditionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleBoostActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleDoNotAssociateActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleFilterActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleIgnoreActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleOnewaySynonymsActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleRedirectActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleReplacementActionArgs;
import com.pulumi.googlenative.retail_v2beta.inputs.GoogleCloudRetailV2betaRuleTwowaySynonymsActionArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently only boost rules are supported. Currently only supported by the search endpoint.
 * 
 */
public final class GoogleCloudRetailV2betaRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudRetailV2betaRuleArgs Empty = new GoogleCloudRetailV2betaRuleArgs();

    /**
     * A boost action.
     * 
     */
    @Import(name="boostAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleBoostActionArgs> boostAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleBoostActionArgs>> boostAction() {
        return Optional.ofNullable(this.boostAction);
    }

    /**
     * The condition that triggers the rule. If the condition is empty, the rule will always apply.
     * 
     */
    @Import(name="condition", required=true)
    private Output<GoogleCloudRetailV2betaConditionArgs> condition;

    public Output<GoogleCloudRetailV2betaConditionArgs> condition() {
        return this.condition;
    }

    /**
     * Prevents term from being associated with other terms.
     * 
     */
    @Import(name="doNotAssociateAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleDoNotAssociateActionArgs> doNotAssociateAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleDoNotAssociateActionArgs>> doNotAssociateAction() {
        return Optional.ofNullable(this.doNotAssociateAction);
    }

    /**
     * Filters results.
     * 
     */
    @Import(name="filterAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleFilterActionArgs> filterAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleFilterActionArgs>> filterAction() {
        return Optional.ofNullable(this.filterAction);
    }

    /**
     * Ignores specific terms from query during search.
     * 
     */
    @Import(name="ignoreAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleIgnoreActionArgs> ignoreAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleIgnoreActionArgs>> ignoreAction() {
        return Optional.ofNullable(this.ignoreAction);
    }

    /**
     * Treats specific term as a synonym with a group of terms. Group of terms will not be treated as synonyms with the specific term.
     * 
     */
    @Import(name="onewaySynonymsAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleOnewaySynonymsActionArgs> onewaySynonymsAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleOnewaySynonymsActionArgs>> onewaySynonymsAction() {
        return Optional.ofNullable(this.onewaySynonymsAction);
    }

    /**
     * Redirects a shopper to a specific page.
     * 
     */
    @Import(name="redirectAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleRedirectActionArgs> redirectAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleRedirectActionArgs>> redirectAction() {
        return Optional.ofNullable(this.redirectAction);
    }

    /**
     * Replaces specific terms in the query.
     * 
     */
    @Import(name="replacementAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleReplacementActionArgs> replacementAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleReplacementActionArgs>> replacementAction() {
        return Optional.ofNullable(this.replacementAction);
    }

    /**
     * Treats a set of terms as synonyms of one another.
     * 
     */
    @Import(name="twowaySynonymsAction")
    private @Nullable Output<GoogleCloudRetailV2betaRuleTwowaySynonymsActionArgs> twowaySynonymsAction;

    public Optional<Output<GoogleCloudRetailV2betaRuleTwowaySynonymsActionArgs>> twowaySynonymsAction() {
        return Optional.ofNullable(this.twowaySynonymsAction);
    }

    private GoogleCloudRetailV2betaRuleArgs() {}

    private GoogleCloudRetailV2betaRuleArgs(GoogleCloudRetailV2betaRuleArgs $) {
        this.boostAction = $.boostAction;
        this.condition = $.condition;
        this.doNotAssociateAction = $.doNotAssociateAction;
        this.filterAction = $.filterAction;
        this.ignoreAction = $.ignoreAction;
        this.onewaySynonymsAction = $.onewaySynonymsAction;
        this.redirectAction = $.redirectAction;
        this.replacementAction = $.replacementAction;
        this.twowaySynonymsAction = $.twowaySynonymsAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudRetailV2betaRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRetailV2betaRuleArgs $;

        public Builder() {
            $ = new GoogleCloudRetailV2betaRuleArgs();
        }

        public Builder(GoogleCloudRetailV2betaRuleArgs defaults) {
            $ = new GoogleCloudRetailV2betaRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder boostAction(@Nullable Output<GoogleCloudRetailV2betaRuleBoostActionArgs> boostAction) {
            $.boostAction = boostAction;
            return this;
        }

        public Builder boostAction(GoogleCloudRetailV2betaRuleBoostActionArgs boostAction) {
            return boostAction(Output.of(boostAction));
        }

        public Builder condition(Output<GoogleCloudRetailV2betaConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(GoogleCloudRetailV2betaConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder doNotAssociateAction(@Nullable Output<GoogleCloudRetailV2betaRuleDoNotAssociateActionArgs> doNotAssociateAction) {
            $.doNotAssociateAction = doNotAssociateAction;
            return this;
        }

        public Builder doNotAssociateAction(GoogleCloudRetailV2betaRuleDoNotAssociateActionArgs doNotAssociateAction) {
            return doNotAssociateAction(Output.of(doNotAssociateAction));
        }

        public Builder filterAction(@Nullable Output<GoogleCloudRetailV2betaRuleFilterActionArgs> filterAction) {
            $.filterAction = filterAction;
            return this;
        }

        public Builder filterAction(GoogleCloudRetailV2betaRuleFilterActionArgs filterAction) {
            return filterAction(Output.of(filterAction));
        }

        public Builder ignoreAction(@Nullable Output<GoogleCloudRetailV2betaRuleIgnoreActionArgs> ignoreAction) {
            $.ignoreAction = ignoreAction;
            return this;
        }

        public Builder ignoreAction(GoogleCloudRetailV2betaRuleIgnoreActionArgs ignoreAction) {
            return ignoreAction(Output.of(ignoreAction));
        }

        public Builder onewaySynonymsAction(@Nullable Output<GoogleCloudRetailV2betaRuleOnewaySynonymsActionArgs> onewaySynonymsAction) {
            $.onewaySynonymsAction = onewaySynonymsAction;
            return this;
        }

        public Builder onewaySynonymsAction(GoogleCloudRetailV2betaRuleOnewaySynonymsActionArgs onewaySynonymsAction) {
            return onewaySynonymsAction(Output.of(onewaySynonymsAction));
        }

        public Builder redirectAction(@Nullable Output<GoogleCloudRetailV2betaRuleRedirectActionArgs> redirectAction) {
            $.redirectAction = redirectAction;
            return this;
        }

        public Builder redirectAction(GoogleCloudRetailV2betaRuleRedirectActionArgs redirectAction) {
            return redirectAction(Output.of(redirectAction));
        }

        public Builder replacementAction(@Nullable Output<GoogleCloudRetailV2betaRuleReplacementActionArgs> replacementAction) {
            $.replacementAction = replacementAction;
            return this;
        }

        public Builder replacementAction(GoogleCloudRetailV2betaRuleReplacementActionArgs replacementAction) {
            return replacementAction(Output.of(replacementAction));
        }

        public Builder twowaySynonymsAction(@Nullable Output<GoogleCloudRetailV2betaRuleTwowaySynonymsActionArgs> twowaySynonymsAction) {
            $.twowaySynonymsAction = twowaySynonymsAction;
            return this;
        }

        public Builder twowaySynonymsAction(GoogleCloudRetailV2betaRuleTwowaySynonymsActionArgs twowaySynonymsAction) {
            return twowaySynonymsAction(Output.of(twowaySynonymsAction));
        }

        public GoogleCloudRetailV2betaRuleArgs build() {
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            return $;
        }
    }

}
