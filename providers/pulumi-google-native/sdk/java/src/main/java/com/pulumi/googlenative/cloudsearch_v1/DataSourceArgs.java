// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudsearch_v1.inputs.GSuitePrincipalArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceArgs Empty = new DataSourceArgs();

    /**
     * If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.
     * 
     */
    @Import(name="disableModifications")
    private @Nullable Output<Boolean> disableModifications;

    public Optional<Output<Boolean>> disableModifications() {
        return Optional.ofNullable(this.disableModifications);
    }

    /**
     * Disable serving any search or assist results.
     * 
     */
    @Import(name="disableServing")
    private @Nullable Output<Boolean> disableServing;

    public Optional<Output<Boolean>> disableServing() {
        return Optional.ofNullable(this.disableServing);
    }

    /**
     * Display name of the datasource The maximum length is 300 characters.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * List of service accounts that have indexing access.
     * 
     */
    @Import(name="indexingServiceAccounts")
    private @Nullable Output<List<String>> indexingServiceAccounts;

    public Optional<Output<List<String>>> indexingServiceAccounts() {
        return Optional.ofNullable(this.indexingServiceAccounts);
    }

    /**
     * This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility.
     * 
     */
    @Import(name="itemsVisibility")
    private @Nullable Output<List<GSuitePrincipalArgs>> itemsVisibility;

    public Optional<Output<List<GSuitePrincipalArgs>>> itemsVisibility() {
        return Optional.ofNullable(this.itemsVisibility);
    }

    /**
     * Name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * IDs of the Long Running Operations (LROs) currently running for this schema.
     * 
     */
    @Import(name="operationIds")
    private @Nullable Output<List<String>> operationIds;

    public Optional<Output<List<String>>> operationIds() {
        return Optional.ofNullable(this.operationIds);
    }

    /**
     * Can a user request to get thumbnail URI for Items indexed in this data source.
     * 
     */
    @Import(name="returnThumbnailUrls")
    private @Nullable Output<Boolean> returnThumbnailUrls;

    public Optional<Output<Boolean>> returnThumbnailUrls() {
        return Optional.ofNullable(this.returnThumbnailUrls);
    }

    /**
     * A short name or alias for the source. This value will be used to match the &#39;source&#39; operator. For example, if the short name is *&lt;value&gt;* then queries like *source:&lt;value&gt;* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with &#39;google&#39; and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.
     * 
     */
    @Import(name="shortName")
    private @Nullable Output<String> shortName;

    public Optional<Output<String>> shortName() {
        return Optional.ofNullable(this.shortName);
    }

    private DataSourceArgs() {}

    private DataSourceArgs(DataSourceArgs $) {
        this.disableModifications = $.disableModifications;
        this.disableServing = $.disableServing;
        this.displayName = $.displayName;
        this.indexingServiceAccounts = $.indexingServiceAccounts;
        this.itemsVisibility = $.itemsVisibility;
        this.name = $.name;
        this.operationIds = $.operationIds;
        this.returnThumbnailUrls = $.returnThumbnailUrls;
        this.shortName = $.shortName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceArgs $;

        public Builder() {
            $ = new DataSourceArgs();
        }

        public Builder(DataSourceArgs defaults) {
            $ = new DataSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder disableModifications(@Nullable Output<Boolean> disableModifications) {
            $.disableModifications = disableModifications;
            return this;
        }

        public Builder disableModifications(Boolean disableModifications) {
            return disableModifications(Output.of(disableModifications));
        }

        public Builder disableServing(@Nullable Output<Boolean> disableServing) {
            $.disableServing = disableServing;
            return this;
        }

        public Builder disableServing(Boolean disableServing) {
            return disableServing(Output.of(disableServing));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder indexingServiceAccounts(@Nullable Output<List<String>> indexingServiceAccounts) {
            $.indexingServiceAccounts = indexingServiceAccounts;
            return this;
        }

        public Builder indexingServiceAccounts(List<String> indexingServiceAccounts) {
            return indexingServiceAccounts(Output.of(indexingServiceAccounts));
        }

        public Builder indexingServiceAccounts(String... indexingServiceAccounts) {
            return indexingServiceAccounts(List.of(indexingServiceAccounts));
        }

        public Builder itemsVisibility(@Nullable Output<List<GSuitePrincipalArgs>> itemsVisibility) {
            $.itemsVisibility = itemsVisibility;
            return this;
        }

        public Builder itemsVisibility(List<GSuitePrincipalArgs> itemsVisibility) {
            return itemsVisibility(Output.of(itemsVisibility));
        }

        public Builder itemsVisibility(GSuitePrincipalArgs... itemsVisibility) {
            return itemsVisibility(List.of(itemsVisibility));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder operationIds(@Nullable Output<List<String>> operationIds) {
            $.operationIds = operationIds;
            return this;
        }

        public Builder operationIds(List<String> operationIds) {
            return operationIds(Output.of(operationIds));
        }

        public Builder operationIds(String... operationIds) {
            return operationIds(List.of(operationIds));
        }

        public Builder returnThumbnailUrls(@Nullable Output<Boolean> returnThumbnailUrls) {
            $.returnThumbnailUrls = returnThumbnailUrls;
            return this;
        }

        public Builder returnThumbnailUrls(Boolean returnThumbnailUrls) {
            return returnThumbnailUrls(Output.of(returnThumbnailUrls));
        }

        public Builder shortName(@Nullable Output<String> shortName) {
            $.shortName = shortName;
            return this;
        }

        public Builder shortName(String shortName) {
            return shortName(Output.of(shortName));
        }

        public DataSourceArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
