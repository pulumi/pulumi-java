// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1alpha1.enums.VulnerabilityDetailsEffectiveSeverity;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.CVSSArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.PackageIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Used by Occurrence to point to where the vulnerability exists and how to fix it.
 * 
 */
public final class VulnerabilityDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityDetailsArgs Empty = new VulnerabilityDetailsArgs();

    /**
     * The CVSS v3 score of this vulnerability.
     * 
     */
    @Import(name="cvssV3")
    private @Nullable Output<CVSSArgs> cvssV3;

    /**
     * @return The CVSS v3 score of this vulnerability.
     * 
     */
    public Optional<Output<CVSSArgs>> cvssV3() {
        return Optional.ofNullable(this.cvssV3);
    }

    /**
     * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity")
    private @Nullable Output<VulnerabilityDetailsEffectiveSeverity> effectiveSeverity;

    /**
     * @return The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
     * 
     */
    public Optional<Output<VulnerabilityDetailsEffectiveSeverity>> effectiveSeverity() {
        return Optional.ofNullable(this.effectiveSeverity);
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue")
    private @Nullable Output<List<PackageIssueArgs>> packageIssue;

    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    public Optional<Output<List<PackageIssueArgs>>> packageIssue() {
        return Optional.ofNullable(this.packageIssue);
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private VulnerabilityDetailsArgs() {}

    private VulnerabilityDetailsArgs(VulnerabilityDetailsArgs $) {
        this.cvssV3 = $.cvssV3;
        this.effectiveSeverity = $.effectiveSeverity;
        this.packageIssue = $.packageIssue;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityDetailsArgs $;

        public Builder() {
            $ = new VulnerabilityDetailsArgs();
        }

        public Builder(VulnerabilityDetailsArgs defaults) {
            $ = new VulnerabilityDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cvssV3 The CVSS v3 score of this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder cvssV3(@Nullable Output<CVSSArgs> cvssV3) {
            $.cvssV3 = cvssV3;
            return this;
        }

        /**
         * @param cvssV3 The CVSS v3 score of this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder cvssV3(CVSSArgs cvssV3) {
            return cvssV3(Output.of(cvssV3));
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(@Nullable Output<VulnerabilityDetailsEffectiveSeverity> effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(VulnerabilityDetailsEffectiveSeverity effectiveSeverity) {
            return effectiveSeverity(Output.of(effectiveSeverity));
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(@Nullable Output<List<PackageIssueArgs>> packageIssue) {
            $.packageIssue = packageIssue;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(List<PackageIssueArgs> packageIssue) {
            return packageIssue(Output.of(packageIssue));
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(PackageIssueArgs... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }

        /**
         * @param type The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VulnerabilityDetailsArgs build() {
            return $;
        }
    }

}
