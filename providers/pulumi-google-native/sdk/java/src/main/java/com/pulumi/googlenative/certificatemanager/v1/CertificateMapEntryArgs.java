// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.certificatemanager.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.certificatemanager.v1.enums.CertificateMapEntryMatcher;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateMapEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateMapEntryArgs Empty = new CertificateMapEntryArgs();

    /**
     * Required. A user-provided name of the certificate map entry.
     * 
     */
    @Import(name="certificateMapEntryId", required=true)
    private Output<String> certificateMapEntryId;

    /**
     * @return Required. A user-provided name of the certificate map entry.
     * 
     */
    public Output<String> certificateMapEntryId() {
        return this.certificateMapEntryId;
    }

    @Import(name="certificateMapId", required=true)
    private Output<String> certificateMapId;

    public Output<String> certificateMapId() {
        return this.certificateMapId;
    }

    /**
     * A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
     * 
     */
    @Import(name="certificates")
    private @Nullable Output<List<String>> certificates;

    /**
     * @return A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
     * 
     */
    public Optional<Output<List<String>>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * One or more paragraphs of text description of a certificate map entry.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return One or more paragraphs of text description of a certificate map entry.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Set of labels associated with a Certificate Map Entry.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of labels associated with a Certificate Map Entry.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A predefined matcher for particular cases, other than SNI selection.
     * 
     */
    @Import(name="matcher")
    private @Nullable Output<CertificateMapEntryMatcher> matcher;

    /**
     * @return A predefined matcher for particular cases, other than SNI selection.
     * 
     */
    public Optional<Output<CertificateMapEntryMatcher>> matcher() {
        return Optional.ofNullable(this.matcher);
    }

    /**
     * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}certificateMaps/*{@literal /}certificateMapEntries/*`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}certificateMaps/*{@literal /}certificateMapEntries/*`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private CertificateMapEntryArgs() {}

    private CertificateMapEntryArgs(CertificateMapEntryArgs $) {
        this.certificateMapEntryId = $.certificateMapEntryId;
        this.certificateMapId = $.certificateMapId;
        this.certificates = $.certificates;
        this.description = $.description;
        this.hostname = $.hostname;
        this.labels = $.labels;
        this.location = $.location;
        this.matcher = $.matcher;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateMapEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateMapEntryArgs $;

        public Builder() {
            $ = new CertificateMapEntryArgs();
        }

        public Builder(CertificateMapEntryArgs defaults) {
            $ = new CertificateMapEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateMapEntryId Required. A user-provided name of the certificate map entry.
         * 
         * @return builder
         * 
         */
        public Builder certificateMapEntryId(Output<String> certificateMapEntryId) {
            $.certificateMapEntryId = certificateMapEntryId;
            return this;
        }

        /**
         * @param certificateMapEntryId Required. A user-provided name of the certificate map entry.
         * 
         * @return builder
         * 
         */
        public Builder certificateMapEntryId(String certificateMapEntryId) {
            return certificateMapEntryId(Output.of(certificateMapEntryId));
        }

        public Builder certificateMapId(Output<String> certificateMapId) {
            $.certificateMapId = certificateMapId;
            return this;
        }

        public Builder certificateMapId(String certificateMapId) {
            return certificateMapId(Output.of(certificateMapId));
        }

        /**
         * @param certificates A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
         * 
         * @return builder
         * 
         */
        public Builder certificates(@Nullable Output<List<String>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<String> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
         * 
         * @return builder
         * 
         */
        public Builder certificates(String... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param description One or more paragraphs of text description of a certificate map entry.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description One or more paragraphs of text description of a certificate map entry.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hostname A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param labels Set of labels associated with a Certificate Map Entry.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of labels associated with a Certificate Map Entry.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param matcher A predefined matcher for particular cases, other than SNI selection.
         * 
         * @return builder
         * 
         */
        public Builder matcher(@Nullable Output<CertificateMapEntryMatcher> matcher) {
            $.matcher = matcher;
            return this;
        }

        /**
         * @param matcher A predefined matcher for particular cases, other than SNI selection.
         * 
         * @return builder
         * 
         */
        public Builder matcher(CertificateMapEntryMatcher matcher) {
            return matcher(Output.of(matcher));
        }

        /**
         * @param name A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}certificateMaps/*{@literal /}certificateMapEntries/*`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}certificateMaps/*{@literal /}certificateMapEntries/*`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public CertificateMapEntryArgs build() {
            $.certificateMapEntryId = Objects.requireNonNull($.certificateMapEntryId, "expected parameter 'certificateMapEntryId' to be non-null");
            $.certificateMapId = Objects.requireNonNull($.certificateMapId, "expected parameter 'certificateMapId' to be non-null");
            return $;
        }
    }

}
