// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * H265 codec settings.
 * 
 */
public final class H265CodecSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final H265CodecSettingsResponse Empty = new H265CodecSettingsResponse();

    /**
     * Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
     */
    @Import(name="allowOpenGop", required=true)
    private Boolean allowOpenGop;

    /**
     * @return Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
     */
    public Boolean allowOpenGop() {
        return this.allowOpenGop;
    }

    /**
     * Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
     */
    @Import(name="aqStrength", required=true)
    private Double aqStrength;

    /**
     * @return Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
     */
    public Double aqStrength() {
        return this.aqStrength;
    }

    /**
     * The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
     */
    @Import(name="bFrameCount", required=true)
    private Integer bFrameCount;

    /**
     * @return The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
     */
    public Integer bFrameCount() {
        return this.bFrameCount;
    }

    /**
     * Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
     */
    @Import(name="bPyramid", required=true)
    private Boolean bPyramid;

    /**
     * @return Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
     */
    public Boolean bPyramid() {
        return this.bPyramid;
    }

    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
     */
    @Import(name="bitrateBps", required=true)
    private Integer bitrateBps;

    /**
     * @return The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
     */
    public Integer bitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
     */
    @Import(name="crfLevel", required=true)
    private Integer crfLevel;

    /**
     * @return Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
     */
    public Integer crfLevel() {
        return this.crfLevel;
    }

    /**
     * Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
     */
    @Import(name="enableTwoPass", required=true)
    private Boolean enableTwoPass;

    /**
     * @return Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
     */
    public Boolean enableTwoPass() {
        return this.enableTwoPass;
    }

    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    @Import(name="frameRate", required=true)
    private Double frameRate;

    /**
     * @return The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    public Double frameRate() {
        return this.frameRate;
    }

    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    @Import(name="gopDuration", required=true)
    private String gopDuration;

    /**
     * @return Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    public String gopDuration() {
        return this.gopDuration;
    }

    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    @Import(name="gopFrameCount", required=true)
    private Integer gopFrameCount;

    /**
     * @return Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    public Integer gopFrameCount() {
        return this.gopFrameCount;
    }

    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    @Import(name="heightPixels", required=true)
    private Integer heightPixels;

    /**
     * @return The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    public Integer heightPixels() {
        return this.heightPixels;
    }

    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    @Import(name="pixelFormat", required=true)
    private String pixelFormat;

    /**
     * @return Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    public String pixelFormat() {
        return this.pixelFormat;
    }

    /**
     * Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    @Import(name="preset", required=true)
    private String preset;

    /**
     * @return Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    public String preset() {
        return this.preset;
    }

    /**
     * Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    @Import(name="profile", required=true)
    private String profile;

    /**
     * @return Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    public String profile() {
        return this.profile;
    }

    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
     */
    @Import(name="rateControlMode", required=true)
    private String rateControlMode;

    /**
     * @return Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
     */
    public String rateControlMode() {
        return this.rateControlMode;
    }

    /**
     * Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    @Import(name="tune", required=true)
    private String tune;

    /**
     * @return Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    public String tune() {
        return this.tune;
    }

    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
     */
    @Import(name="vbvFullnessBits", required=true)
    private Integer vbvFullnessBits;

    /**
     * @return Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
     */
    public Integer vbvFullnessBits() {
        return this.vbvFullnessBits;
    }

    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
     */
    @Import(name="vbvSizeBits", required=true)
    private Integer vbvSizeBits;

    /**
     * @return Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
     */
    public Integer vbvSizeBits() {
        return this.vbvSizeBits;
    }

    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    @Import(name="widthPixels", required=true)
    private Integer widthPixels;

    /**
     * @return The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    public Integer widthPixels() {
        return this.widthPixels;
    }

    private H265CodecSettingsResponse() {}

    private H265CodecSettingsResponse(H265CodecSettingsResponse $) {
        this.allowOpenGop = $.allowOpenGop;
        this.aqStrength = $.aqStrength;
        this.bFrameCount = $.bFrameCount;
        this.bPyramid = $.bPyramid;
        this.bitrateBps = $.bitrateBps;
        this.crfLevel = $.crfLevel;
        this.enableTwoPass = $.enableTwoPass;
        this.frameRate = $.frameRate;
        this.gopDuration = $.gopDuration;
        this.gopFrameCount = $.gopFrameCount;
        this.heightPixels = $.heightPixels;
        this.pixelFormat = $.pixelFormat;
        this.preset = $.preset;
        this.profile = $.profile;
        this.rateControlMode = $.rateControlMode;
        this.tune = $.tune;
        this.vbvFullnessBits = $.vbvFullnessBits;
        this.vbvSizeBits = $.vbvSizeBits;
        this.widthPixels = $.widthPixels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(H265CodecSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private H265CodecSettingsResponse $;

        public Builder() {
            $ = new H265CodecSettingsResponse();
        }

        public Builder(H265CodecSettingsResponse defaults) {
            $ = new H265CodecSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowOpenGop Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowOpenGop(Boolean allowOpenGop) {
            $.allowOpenGop = allowOpenGop;
            return this;
        }

        /**
         * @param aqStrength Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder aqStrength(Double aqStrength) {
            $.aqStrength = aqStrength;
            return this;
        }

        /**
         * @param bFrameCount The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder bFrameCount(Integer bFrameCount) {
            $.bFrameCount = bFrameCount;
            return this;
        }

        /**
         * @param bPyramid Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bPyramid(Boolean bPyramid) {
            $.bPyramid = bPyramid;
            return this;
        }

        /**
         * @param bitrateBps The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Integer bitrateBps) {
            $.bitrateBps = bitrateBps;
            return this;
        }

        /**
         * @param crfLevel Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(Integer crfLevel) {
            $.crfLevel = crfLevel;
            return this;
        }

        /**
         * @param enableTwoPass Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableTwoPass(Boolean enableTwoPass) {
            $.enableTwoPass = enableTwoPass;
            return this;
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Double frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(String gopDuration) {
            $.gopDuration = gopDuration;
            return this;
        }

        /**
         * @param gopFrameCount Select the GOP size based on the specified frame count. Must be greater than zero.
         * 
         * @return builder
         * 
         */
        public Builder gopFrameCount(Integer gopFrameCount) {
            $.gopFrameCount = gopFrameCount;
            return this;
        }

        /**
         * @param heightPixels The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(Integer heightPixels) {
            $.heightPixels = heightPixels;
            return this;
        }

        /**
         * @param pixelFormat Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(String pixelFormat) {
            $.pixelFormat = pixelFormat;
            return this;
        }

        /**
         * @param preset Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder preset(String preset) {
            $.preset = preset;
            return this;
        }

        /**
         * @param profile Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param rateControlMode Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(String rateControlMode) {
            $.rateControlMode = rateControlMode;
            return this;
        }

        /**
         * @param tune Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder tune(String tune) {
            $.tune = tune;
            return this;
        }

        /**
         * @param vbvFullnessBits Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
         * 
         * @return builder
         * 
         */
        public Builder vbvFullnessBits(Integer vbvFullnessBits) {
            $.vbvFullnessBits = vbvFullnessBits;
            return this;
        }

        /**
         * @param vbvSizeBits Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
         * 
         * @return builder
         * 
         */
        public Builder vbvSizeBits(Integer vbvSizeBits) {
            $.vbvSizeBits = vbvSizeBits;
            return this;
        }

        /**
         * @param widthPixels The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(Integer widthPixels) {
            $.widthPixels = widthPixels;
            return this;
        }

        public H265CodecSettingsResponse build() {
            $.allowOpenGop = Objects.requireNonNull($.allowOpenGop, "expected parameter 'allowOpenGop' to be non-null");
            $.aqStrength = Objects.requireNonNull($.aqStrength, "expected parameter 'aqStrength' to be non-null");
            $.bFrameCount = Objects.requireNonNull($.bFrameCount, "expected parameter 'bFrameCount' to be non-null");
            $.bPyramid = Objects.requireNonNull($.bPyramid, "expected parameter 'bPyramid' to be non-null");
            $.bitrateBps = Objects.requireNonNull($.bitrateBps, "expected parameter 'bitrateBps' to be non-null");
            $.crfLevel = Objects.requireNonNull($.crfLevel, "expected parameter 'crfLevel' to be non-null");
            $.enableTwoPass = Objects.requireNonNull($.enableTwoPass, "expected parameter 'enableTwoPass' to be non-null");
            $.frameRate = Objects.requireNonNull($.frameRate, "expected parameter 'frameRate' to be non-null");
            $.gopDuration = Objects.requireNonNull($.gopDuration, "expected parameter 'gopDuration' to be non-null");
            $.gopFrameCount = Objects.requireNonNull($.gopFrameCount, "expected parameter 'gopFrameCount' to be non-null");
            $.heightPixels = Objects.requireNonNull($.heightPixels, "expected parameter 'heightPixels' to be non-null");
            $.pixelFormat = Objects.requireNonNull($.pixelFormat, "expected parameter 'pixelFormat' to be non-null");
            $.preset = Objects.requireNonNull($.preset, "expected parameter 'preset' to be non-null");
            $.profile = Objects.requireNonNull($.profile, "expected parameter 'profile' to be non-null");
            $.rateControlMode = Objects.requireNonNull($.rateControlMode, "expected parameter 'rateControlMode' to be non-null");
            $.tune = Objects.requireNonNull($.tune, "expected parameter 'tune' to be non-null");
            $.vbvFullnessBits = Objects.requireNonNull($.vbvFullnessBits, "expected parameter 'vbvFullnessBits' to be non-null");
            $.vbvSizeBits = Objects.requireNonNull($.vbvSizeBits, "expected parameter 'vbvSizeBits' to be non-null");
            $.widthPixels = Objects.requireNonNull($.widthPixels, "expected parameter 'widthPixels' to be non-null");
            return $;
        }
    }

}
