// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.FileReferenceResponse;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.ToolExitCodeResponse;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.ToolOutputReferenceResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
 * 
 */
public final class ToolExecutionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ToolExecutionResponse Empty = new ToolExecutionResponse();

    /**
     * The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set
     * 
     */
    @Import(name="commandLineArguments", required=true)
    private List<String> commandLineArguments;

    public List<String> commandLineArguments() {
        return this.commandLineArguments;
    }

    /**
     * Tool execution exit code. This field will be set once the tool has exited. - In response: present if set by create/update request - In create request: optional - In update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is already set.
     * 
     */
    @Import(name="exitCode", required=true)
    private ToolExitCodeResponse exitCode;

    public ToolExitCodeResponse exitCode() {
        return this.exitCode;
    }

    /**
     * References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     * 
     */
    @Import(name="toolLogs", required=true)
    private List<FileReferenceResponse> toolLogs;

    public List<FileReferenceResponse> toolLogs() {
        return this.toolLogs;
    }

    /**
     * References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     * 
     */
    @Import(name="toolOutputs", required=true)
    private List<ToolOutputReferenceResponse> toolOutputs;

    public List<ToolOutputReferenceResponse> toolOutputs() {
        return this.toolOutputs;
    }

    private ToolExecutionResponse() {}

    private ToolExecutionResponse(ToolExecutionResponse $) {
        this.commandLineArguments = $.commandLineArguments;
        this.exitCode = $.exitCode;
        this.toolLogs = $.toolLogs;
        this.toolOutputs = $.toolOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ToolExecutionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ToolExecutionResponse $;

        public Builder() {
            $ = new ToolExecutionResponse();
        }

        public Builder(ToolExecutionResponse defaults) {
            $ = new ToolExecutionResponse(Objects.requireNonNull(defaults));
        }

        public Builder commandLineArguments(List<String> commandLineArguments) {
            $.commandLineArguments = commandLineArguments;
            return this;
        }

        public Builder commandLineArguments(String... commandLineArguments) {
            return commandLineArguments(List.of(commandLineArguments));
        }

        public Builder exitCode(ToolExitCodeResponse exitCode) {
            $.exitCode = exitCode;
            return this;
        }

        public Builder toolLogs(List<FileReferenceResponse> toolLogs) {
            $.toolLogs = toolLogs;
            return this;
        }

        public Builder toolLogs(FileReferenceResponse... toolLogs) {
            return toolLogs(List.of(toolLogs));
        }

        public Builder toolOutputs(List<ToolOutputReferenceResponse> toolOutputs) {
            $.toolOutputs = toolOutputs;
            return this;
        }

        public Builder toolOutputs(ToolOutputReferenceResponse... toolOutputs) {
            return toolOutputs(List.of(toolOutputs));
        }

        public ToolExecutionResponse build() {
            $.commandLineArguments = Objects.requireNonNull($.commandLineArguments, "expected parameter 'commandLineArguments' to be non-null");
            $.exitCode = Objects.requireNonNull($.exitCode, "expected parameter 'exitCode' to be non-null");
            $.toolLogs = Objects.requireNonNull($.toolLogs, "expected parameter 'toolLogs' to be non-null");
            $.toolOutputs = Objects.requireNonNull($.toolOutputs, "expected parameter 'toolOutputs' to be non-null");
            return $;
        }
    }

}
