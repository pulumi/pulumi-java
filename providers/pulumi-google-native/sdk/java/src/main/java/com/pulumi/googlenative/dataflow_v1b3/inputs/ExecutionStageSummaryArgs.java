// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow_v1b3.enums.ExecutionStageSummaryKind;
import com.pulumi.googlenative.dataflow_v1b3.inputs.ComponentSourceArgs;
import com.pulumi.googlenative.dataflow_v1b3.inputs.ComponentTransformArgs;
import com.pulumi.googlenative.dataflow_v1b3.inputs.StageSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
 * 
 */
public final class ExecutionStageSummaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecutionStageSummaryArgs Empty = new ExecutionStageSummaryArgs();

    /**
     * Collections produced and consumed by component transforms of this stage.
     * 
     */
    @Import(name="componentSource")
    private @Nullable Output<List<ComponentSourceArgs>> componentSource;

    public Optional<Output<List<ComponentSourceArgs>>> componentSource() {
        return Optional.ofNullable(this.componentSource);
    }

    /**
     * Transforms that comprise this execution stage.
     * 
     */
    @Import(name="componentTransform")
    private @Nullable Output<List<ComponentTransformArgs>> componentTransform;

    public Optional<Output<List<ComponentTransformArgs>>> componentTransform() {
        return Optional.ofNullable(this.componentTransform);
    }

    /**
     * Dataflow service generated id for this stage.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Input sources for this stage.
     * 
     */
    @Import(name="inputSource")
    private @Nullable Output<List<StageSourceArgs>> inputSource;

    public Optional<Output<List<StageSourceArgs>>> inputSource() {
        return Optional.ofNullable(this.inputSource);
    }

    /**
     * Type of transform this stage is executing.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<ExecutionStageSummaryKind> kind;

    public Optional<Output<ExecutionStageSummaryKind>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Dataflow service generated name for this stage.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Output sources for this stage.
     * 
     */
    @Import(name="outputSource")
    private @Nullable Output<List<StageSourceArgs>> outputSource;

    public Optional<Output<List<StageSourceArgs>>> outputSource() {
        return Optional.ofNullable(this.outputSource);
    }

    /**
     * Other stages that must complete before this stage can run.
     * 
     */
    @Import(name="prerequisiteStage")
    private @Nullable Output<List<String>> prerequisiteStage;

    public Optional<Output<List<String>>> prerequisiteStage() {
        return Optional.ofNullable(this.prerequisiteStage);
    }

    private ExecutionStageSummaryArgs() {}

    private ExecutionStageSummaryArgs(ExecutionStageSummaryArgs $) {
        this.componentSource = $.componentSource;
        this.componentTransform = $.componentTransform;
        this.id = $.id;
        this.inputSource = $.inputSource;
        this.kind = $.kind;
        this.name = $.name;
        this.outputSource = $.outputSource;
        this.prerequisiteStage = $.prerequisiteStage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecutionStageSummaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecutionStageSummaryArgs $;

        public Builder() {
            $ = new ExecutionStageSummaryArgs();
        }

        public Builder(ExecutionStageSummaryArgs defaults) {
            $ = new ExecutionStageSummaryArgs(Objects.requireNonNull(defaults));
        }

        public Builder componentSource(@Nullable Output<List<ComponentSourceArgs>> componentSource) {
            $.componentSource = componentSource;
            return this;
        }

        public Builder componentSource(List<ComponentSourceArgs> componentSource) {
            return componentSource(Output.of(componentSource));
        }

        public Builder componentSource(ComponentSourceArgs... componentSource) {
            return componentSource(List.of(componentSource));
        }

        public Builder componentTransform(@Nullable Output<List<ComponentTransformArgs>> componentTransform) {
            $.componentTransform = componentTransform;
            return this;
        }

        public Builder componentTransform(List<ComponentTransformArgs> componentTransform) {
            return componentTransform(Output.of(componentTransform));
        }

        public Builder componentTransform(ComponentTransformArgs... componentTransform) {
            return componentTransform(List.of(componentTransform));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder inputSource(@Nullable Output<List<StageSourceArgs>> inputSource) {
            $.inputSource = inputSource;
            return this;
        }

        public Builder inputSource(List<StageSourceArgs> inputSource) {
            return inputSource(Output.of(inputSource));
        }

        public Builder inputSource(StageSourceArgs... inputSource) {
            return inputSource(List.of(inputSource));
        }

        public Builder kind(@Nullable Output<ExecutionStageSummaryKind> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(ExecutionStageSummaryKind kind) {
            return kind(Output.of(kind));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder outputSource(@Nullable Output<List<StageSourceArgs>> outputSource) {
            $.outputSource = outputSource;
            return this;
        }

        public Builder outputSource(List<StageSourceArgs> outputSource) {
            return outputSource(Output.of(outputSource));
        }

        public Builder outputSource(StageSourceArgs... outputSource) {
            return outputSource(List.of(outputSource));
        }

        public Builder prerequisiteStage(@Nullable Output<List<String>> prerequisiteStage) {
            $.prerequisiteStage = prerequisiteStage;
            return this;
        }

        public Builder prerequisiteStage(List<String> prerequisiteStage) {
            return prerequisiteStage(Output.of(prerequisiteStage));
        }

        public Builder prerequisiteStage(String... prerequisiteStage) {
            return prerequisiteStage(List.of(prerequisiteStage));
        }

        public ExecutionStageSummaryArgs build() {
            return $;
        }
    }

}
