// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


/**
 * Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
 * 
 */
public final class PadResponse extends com.pulumi.resources.InvokeArgs {

    public static final PadResponse Empty = new PadResponse();

    /**
     * The number of pixels to add to the bottom. The default is 0.
     * 
     */
    @Import(name="bottomPixels", required=true)
    private Integer bottomPixels;

    /**
     * @return The number of pixels to add to the bottom. The default is 0.
     * 
     */
    public Integer bottomPixels() {
        return this.bottomPixels;
    }

    /**
     * The number of pixels to add to the left. The default is 0.
     * 
     */
    @Import(name="leftPixels", required=true)
    private Integer leftPixels;

    /**
     * @return The number of pixels to add to the left. The default is 0.
     * 
     */
    public Integer leftPixels() {
        return this.leftPixels;
    }

    /**
     * The number of pixels to add to the right. The default is 0.
     * 
     */
    @Import(name="rightPixels", required=true)
    private Integer rightPixels;

    /**
     * @return The number of pixels to add to the right. The default is 0.
     * 
     */
    public Integer rightPixels() {
        return this.rightPixels;
    }

    /**
     * The number of pixels to add to the top. The default is 0.
     * 
     */
    @Import(name="topPixels", required=true)
    private Integer topPixels;

    /**
     * @return The number of pixels to add to the top. The default is 0.
     * 
     */
    public Integer topPixels() {
        return this.topPixels;
    }

    private PadResponse() {}

    private PadResponse(PadResponse $) {
        this.bottomPixels = $.bottomPixels;
        this.leftPixels = $.leftPixels;
        this.rightPixels = $.rightPixels;
        this.topPixels = $.topPixels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PadResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PadResponse $;

        public Builder() {
            $ = new PadResponse();
        }

        public Builder(PadResponse defaults) {
            $ = new PadResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bottomPixels The number of pixels to add to the bottom. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder bottomPixels(Integer bottomPixels) {
            $.bottomPixels = bottomPixels;
            return this;
        }

        /**
         * @param leftPixels The number of pixels to add to the left. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder leftPixels(Integer leftPixels) {
            $.leftPixels = leftPixels;
            return this;
        }

        /**
         * @param rightPixels The number of pixels to add to the right. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder rightPixels(Integer rightPixels) {
            $.rightPixels = rightPixels;
            return this;
        }

        /**
         * @param topPixels The number of pixels to add to the top. The default is 0.
         * 
         * @return builder
         * 
         */
        public Builder topPixels(Integer topPixels) {
            $.topPixels = topPixels;
            return this;
        }

        public PadResponse build() {
            $.bottomPixels = Objects.requireNonNull($.bottomPixels, "expected parameter 'bottomPixels' to be non-null");
            $.leftPixels = Objects.requireNonNull($.leftPixels, "expected parameter 'leftPixels' to be non-null");
            $.rightPixels = Objects.requireNonNull($.rightPixels, "expected parameter 'rightPixels' to be non-null");
            $.topPixels = Objects.requireNonNull($.topPixels, "expected parameter 'topPixels' to be non-null");
            return $;
        }
    }

}
