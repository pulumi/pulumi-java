// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.ErrorProtoResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class JobStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobStatusResponse Empty = new JobStatusResponse();

    /**
     * Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
     * 
     */
    @Import(name="errorResult", required=true)
    private ErrorProtoResponse errorResult;

    /**
     * @return Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
     * 
     */
    public ErrorProtoResponse errorResult() {
        return this.errorResult;
    }

    /**
     * The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
     * 
     */
    @Import(name="errors", required=true)
    private List<ErrorProtoResponse> errors;

    /**
     * @return The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
     * 
     */
    public List<ErrorProtoResponse> errors() {
        return this.errors;
    }

    /**
     * Running state of the job.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Running state of the job.
     * 
     */
    public String state() {
        return this.state;
    }

    private JobStatusResponse() {}

    private JobStatusResponse(JobStatusResponse $) {
        this.errorResult = $.errorResult;
        this.errors = $.errors;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStatusResponse $;

        public Builder() {
            $ = new JobStatusResponse();
        }

        public Builder(JobStatusResponse defaults) {
            $ = new JobStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorResult Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
         * 
         * @return builder
         * 
         */
        public Builder errorResult(ErrorProtoResponse errorResult) {
            $.errorResult = errorResult;
            return this;
        }

        /**
         * @param errors The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
         * 
         * @return builder
         * 
         */
        public Builder errors(List<ErrorProtoResponse> errors) {
            $.errors = errors;
            return this;
        }

        /**
         * @param errors The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
         * 
         * @return builder
         * 
         */
        public Builder errors(ErrorProtoResponse... errors) {
            return errors(List.of(errors));
        }

        /**
         * @param state Running state of the job.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public JobStatusResponse build() {
            $.errorResult = Objects.requireNonNull($.errorResult, "expected parameter 'errorResult' to be non-null");
            $.errors = Objects.requireNonNull($.errors, "expected parameter 'errors' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
