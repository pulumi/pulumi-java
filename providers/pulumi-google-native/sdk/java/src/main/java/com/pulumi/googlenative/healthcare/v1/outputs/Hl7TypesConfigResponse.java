// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.healthcare.v1.outputs.TypeResponse;
import com.pulumi.googlenative.healthcare.v1.outputs.VersionSourceResponse;
import java.util.List;
import java.util.Objects;

@CustomType
public final class Hl7TypesConfigResponse {
    /**
     * @return The HL7v2 type definitions.
     * 
     */
    private final List<TypeResponse> type;
    /**
     * @return The version selectors that this config applies to. A message must match ALL version sources to apply.
     * 
     */
    private final List<VersionSourceResponse> version;

    @CustomType.Constructor
    private Hl7TypesConfigResponse(
        @CustomType.Parameter("type") List<TypeResponse> type,
        @CustomType.Parameter("version") List<VersionSourceResponse> version) {
        this.type = type;
        this.version = version;
    }

    /**
     * @return The HL7v2 type definitions.
     * 
     */
    public List<TypeResponse> type() {
        return this.type;
    }
    /**
     * @return The version selectors that this config applies to. A message must match ALL version sources to apply.
     * 
     */
    public List<VersionSourceResponse> version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Hl7TypesConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<TypeResponse> type;
        private List<VersionSourceResponse> version;

        public Builder() {
    	      // Empty
        }

        public Builder(Hl7TypesConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        public Builder type(List<TypeResponse> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(TypeResponse... type) {
            return type(List.of(type));
        }
        public Builder version(List<VersionSourceResponse> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder version(VersionSourceResponse... version) {
            return version(List.of(version));
        }        public Hl7TypesConfigResponse build() {
            return new Hl7TypesConfigResponse(type, version);
        }
    }
}
