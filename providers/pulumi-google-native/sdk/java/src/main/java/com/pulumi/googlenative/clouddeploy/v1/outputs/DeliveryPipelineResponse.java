// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.clouddeploy.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.clouddeploy.v1.outputs.PipelineConditionResponse;
import com.pulumi.googlenative.clouddeploy.v1.outputs.SerialPipelineResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class DeliveryPipelineResponse {
    /**
     * @return User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
     */
    private final Map<String,String> annotations;
    /**
     * @return Information around the state of the Delivery Pipeline.
     * 
     */
    private final PipelineConditionResponse condition;
    /**
     * @return Time at which the pipeline was created.
     * 
     */
    private final String createTime;
    /**
     * @return Description of the `DeliveryPipeline`. Max length is 255 characters.
     * 
     */
    private final String description;
    /**
     * @return This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    private final String etag;
    /**
     * @return Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/ locations/{location}/deliveryPipelines/a-z{0,62}.
     * 
     */
    private final String name;
    /**
     * @return SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
     * 
     */
    private final SerialPipelineResponse serialPipeline;
    /**
     * @return When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
     * 
     */
    private final Boolean suspended;
    /**
     * @return Unique identifier of the `DeliveryPipeline`.
     * 
     */
    private final String uid;
    /**
     * @return Most recent time at which the pipeline was updated.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private DeliveryPipelineResponse(
        @CustomType.Parameter("annotations") Map<String,String> annotations,
        @CustomType.Parameter("condition") PipelineConditionResponse condition,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("serialPipeline") SerialPipelineResponse serialPipeline,
        @CustomType.Parameter("suspended") Boolean suspended,
        @CustomType.Parameter("uid") String uid,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.annotations = annotations;
        this.condition = condition;
        this.createTime = createTime;
        this.description = description;
        this.etag = etag;
        this.labels = labels;
        this.name = name;
        this.serialPipeline = serialPipeline;
        this.suspended = suspended;
        this.uid = uid;
        this.updateTime = updateTime;
    }

    /**
     * @return User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return Information around the state of the Delivery Pipeline.
     * 
     */
    public PipelineConditionResponse condition() {
        return this.condition;
    }
    /**
     * @return Time at which the pipeline was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Description of the `DeliveryPipeline`. Max length is 255 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/ locations/{location}/deliveryPipelines/a-z{0,62}.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
     * 
     */
    public SerialPipelineResponse serialPipeline() {
        return this.serialPipeline;
    }
    /**
     * @return When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
     * 
     */
    public Boolean suspended() {
        return this.suspended;
    }
    /**
     * @return Unique identifier of the `DeliveryPipeline`.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return Most recent time at which the pipeline was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryPipelineResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> annotations;
        private PipelineConditionResponse condition;
        private String createTime;
        private String description;
        private String etag;
        private Map<String,String> labels;
        private String name;
        private SerialPipelineResponse serialPipeline;
        private Boolean suspended;
        private String uid;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(DeliveryPipelineResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.condition = defaults.condition;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.serialPipeline = defaults.serialPipeline;
    	      this.suspended = defaults.suspended;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        public Builder condition(PipelineConditionResponse condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder serialPipeline(SerialPipelineResponse serialPipeline) {
            this.serialPipeline = Objects.requireNonNull(serialPipeline);
            return this;
        }
        public Builder suspended(Boolean suspended) {
            this.suspended = Objects.requireNonNull(suspended);
            return this;
        }
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public DeliveryPipelineResponse build() {
            return new DeliveryPipelineResponse(annotations, condition, createTime, description, etag, labels, name, serialPipeline, suspended, uid, updateTime);
        }
    }
}
