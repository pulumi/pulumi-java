// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.enums;

import com.pulumi.core.annotations.EnumType;
import java.lang.String;
import java.util.Objects;
import java.util.StringJoiner;

    /**
     * The type of relationship between the source and target SPDX elements
     * 
     */
    @EnumType
    public enum RelationshipNoteType {
        /**
         * Unspecified
         * 
         */
        RelationshipTypeUnspecified("RELATIONSHIP_TYPE_UNSPECIFIED"),
        /**
         * Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A
         * 
         */
        Describes("DESCRIBES"),
        /**
         * Is to be used when SPDXRef-A is described by SPDXREF-Document
         * 
         */
        DescribedBy("DESCRIBED_BY"),
        /**
         * Is to be used when SPDXRef-A contains SPDXRef-B
         * 
         */
        Contains("CONTAINS"),
        /**
         * Is to be used when SPDXRef-A is contained by SPDXRef-B
         * 
         */
        ContainedBy("CONTAINED_BY"),
        /**
         * Is to be used when SPDXRef-A depends on SPDXRef-B
         * 
         */
        DependsOn("DEPENDS_ON"),
        /**
         * Is to be used when SPDXRef-A is dependency of SPDXRef-B
         * 
         */
        DependencyOf("DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is a manifest file that lists a set of dependencies for SPDXRef-B
         * 
         */
        DependencyManifestOf("DEPENDENCY_MANIFEST_OF"),
        /**
         * Is to be used when SPDXRef-A is a build dependency of SPDXRef-B
         * 
         */
        BuildDependencyOf("BUILD_DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is a development dependency of SPDXRef-B
         * 
         */
        DevDependencyOf("DEV_DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is an optional dependency of SPDXRef-B
         * 
         */
        OptionalDependencyOf("OPTIONAL_DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is a to be provided dependency of SPDXRef-B
         * 
         */
        ProvidedDependencyOf("PROVIDED_DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is a test dependency of SPDXRef-B
         * 
         */
        TestDependencyOf("TEST_DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is a dependency required for the execution of SPDXRef-B
         * 
         */
        RuntimeDependencyOf("RUNTIME_DEPENDENCY_OF"),
        /**
         * Is to be used when SPDXRef-A is an example of SPDXRef-B
         * 
         */
        ExampleOf("EXAMPLE_OF"),
        /**
         * Is to be used when SPDXRef-A generates SPDXRef-B
         * 
         */
        Generates("GENERATES"),
        /**
         * Is to be used when SPDXRef-A was generated from SPDXRef-B
         * 
         */
        GeneratedFrom("GENERATED_FROM"),
        /**
         * Is to be used when SPDXRef-A is an ancestor (same lineage but pre-dates) SPDXRef-B
         * 
         */
        AncestorOf("ANCESTOR_OF"),
        /**
         * Is to be used when SPDXRef-A is a descendant of (same lineage but postdates) SPDXRef-B
         * 
         */
        DescendantOf("DESCENDANT_OF"),
        /**
         * Is to be used when SPDXRef-A is a variant of (same lineage but not clear which came first) SPDXRef-B
         * 
         */
        VariantOf("VARIANT_OF"),
        /**
         * Is to be used when distributing SPDXRef-A requires that SPDXRef-B also be distributed
         * 
         */
        DistributionArtifact("DISTRIBUTION_ARTIFACT"),
        /**
         * Is to be used when SPDXRef-A is a patch file for (to be applied to) SPDXRef-B
         * 
         */
        PatchFor("PATCH_FOR"),
        /**
         * Is to be used when SPDXRef-A is a patch file that has been applied to SPDXRef-B
         * 
         */
        PatchApplied("PATCH_APPLIED"),
        /**
         * Is to be used when SPDXRef-A is an exact copy of SPDXRef-B
         * 
         */
        CopyOf("COPY_OF"),
        /**
         * Is to be used when SPDXRef-A is a file that was added to SPDXRef-B
         * 
         */
        FileAdded("FILE_ADDED"),
        /**
         * Is to be used when SPDXRef-A is a file that was deleted from SPDXRef-B
         * 
         */
        FileDeleted("FILE_DELETED"),
        /**
         * Is to be used when SPDXRef-A is a file that was modified from SPDXRef-B
         * 
         */
        FileModified("FILE_MODIFIED"),
        /**
         * Is to be used when SPDXRef-A is expanded from the archive SPDXRef-B
         * 
         */
        ExpandedFromArchive("EXPANDED_FROM_ARCHIVE"),
        /**
         * Is to be used when SPDXRef-A dynamically links to SPDXRef-B
         * 
         */
        DynamicLink("DYNAMIC_LINK"),
        /**
         * Is to be used when SPDXRef-A statically links to SPDXRef-B
         * 
         */
        StaticLink("STATIC_LINK"),
        /**
         * Is to be used when SPDXRef-A is a data file used in SPDXRef-B
         * 
         */
        DataFileOf("DATA_FILE_OF"),
        /**
         * Is to be used when SPDXRef-A is a test case used in testing SPDXRef-B
         * 
         */
        TestCaseOf("TEST_CASE_OF"),
        /**
         * Is to be used when SPDXRef-A is used to build SPDXRef-B
         * 
         */
        BuildToolOf("BUILD_TOOL_OF"),
        /**
         * Is to be used when SPDXRef-A is used as a development tool for SPDXRef-B
         * 
         */
        DevToolOf("DEV_TOOL_OF"),
        /**
         * Is to be used when SPDXRef-A is used for testing SPDXRef-B
         * 
         */
        TestOf("TEST_OF"),
        /**
         * Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B
         * 
         */
        TestToolOf("TEST_TOOL_OF"),
        /**
         * Is to be used when SPDXRef-A provides documentation of SPDXRef-B
         * 
         */
        DocumentationOf("DOCUMENTATION_OF"),
        /**
         * Is to be used when SPDXRef-A is an optional component of SPDXRef-B
         * 
         */
        OptionalComponentOf("OPTIONAL_COMPONENT_OF"),
        /**
         * Is to be used when SPDXRef-A is a metafile of SPDXRef-B
         * 
         */
        MetafileOf("METAFILE_OF"),
        /**
         * Is to be used when SPDXRef-A is used as a package as part of SPDXRef-B
         * 
         */
        PackageOf("PACKAGE_OF"),
        /**
         * Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX information in SPDXRef-B
         * 
         */
        Amends("AMENDS"),
        /**
         * Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B
         * 
         */
        PrerequisiteFor("PREREQUISITE_FOR"),
        /**
         * Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B
         * 
         */
        HasPrerequisite("HAS_PREREQUISITE"),
        /**
         * Is to be used for a relationship which has not been defined in the formal SPDX specification. A description of the relationship should be included in the Relationship comments field
         * 
         */
        Other("OTHER");

        private final String value;

        RelationshipNoteType(String value) {
            this.value = Objects.requireNonNull(value);
        }

        @EnumType.Converter
        public String getValue() {
            return this.value;
        }

        @Override
        public String toString() {
            return new StringJoiner(", ", "RelationshipNoteType[", "]")
                .add("value='" + this.value + "'")
                .toString();
        }
    }
