// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.billingbudgets_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.billingbudgets_v1beta1.inputs.GoogleCloudBillingBudgetsV1beta1CustomPeriodResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * A filter for a budget, limiting the scope of the cost to calculate.
 * 
 */
public final class GoogleCloudBillingBudgetsV1beta1FilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudBillingBudgetsV1beta1FilterResponse Empty = new GoogleCloudBillingBudgetsV1beta1FilterResponse();

    /**
     * Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget will track usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it will track usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
     * 
     */
    @Import(name="calendarPeriod", required=true)
    private String calendarPeriod;

    /**
     * @return Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget will track usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it will track usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
     * 
     */
    public String calendarPeriod() {
        return this.calendarPeriod;
    }

    /**
     * Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
     * 
     */
    @Import(name="creditTypes", required=true)
    private List<String> creditTypes;

    /**
     * @return Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
     * 
     */
    public List<String> creditTypes() {
        return this.creditTypes;
    }

    /**
     * Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
     * 
     */
    @Import(name="creditTypesTreatment", required=true)
    private String creditTypesTreatment;

    /**
     * @return Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
     * 
     */
    public String creditTypesTreatment() {
        return this.creditTypesTreatment;
    }

    /**
     * Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
     * 
     */
    @Import(name="customPeriod", required=true)
    private GoogleCloudBillingBudgetsV1beta1CustomPeriodResponse customPeriod;

    /**
     * @return Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
     * 
     */
    public GoogleCloudBillingBudgetsV1beta1CustomPeriodResponse customPeriod() {
        return this.customPeriod;
    }

    /**
     * Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report will include all labeled and unlabeled usage. An object containing a single `&#34;key&#34;: value` pair. Example: `{ &#34;name&#34;: &#34;wrench&#34; }`. _Currently, multiple entries or multiple values per entry are not allowed._
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report will include all labeled and unlabeled usage. An object containing a single `&#34;key&#34;: value` pair. Example: `{ &#34;name&#34;: &#34;wrench&#34; }`. _Currently, multiple entries or multiple values per entry are not allowed._
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report will include all usage for the billing account, regardless of which project the usage occurred on. Only zero or one project can be specified currently.
     * 
     */
    @Import(name="projects", required=true)
    private List<String> projects;

    /**
     * @return Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report will include all usage for the billing account, regardless of which project the usage occurred on. Only zero or one project can be specified currently.
     * 
     */
    public List<String> projects() {
        return this.projects;
    }

    /**
     * Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report will include usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
     * 
     */
    @Import(name="services", required=true)
    private List<String> services;

    /**
     * @return Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report will include usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
     * 
     */
    public List<String> services() {
        return this.services;
    }

    /**
     * Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account will be included. If omitted, the report will include usage from the parent account and all subaccounts, if they exist.
     * 
     */
    @Import(name="subaccounts", required=true)
    private List<String> subaccounts;

    /**
     * @return Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account will be included. If omitted, the report will include usage from the parent account and all subaccounts, if they exist.
     * 
     */
    public List<String> subaccounts() {
        return this.subaccounts;
    }

    private GoogleCloudBillingBudgetsV1beta1FilterResponse() {}

    private GoogleCloudBillingBudgetsV1beta1FilterResponse(GoogleCloudBillingBudgetsV1beta1FilterResponse $) {
        this.calendarPeriod = $.calendarPeriod;
        this.creditTypes = $.creditTypes;
        this.creditTypesTreatment = $.creditTypesTreatment;
        this.customPeriod = $.customPeriod;
        this.labels = $.labels;
        this.projects = $.projects;
        this.services = $.services;
        this.subaccounts = $.subaccounts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudBillingBudgetsV1beta1FilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudBillingBudgetsV1beta1FilterResponse $;

        public Builder() {
            $ = new GoogleCloudBillingBudgetsV1beta1FilterResponse();
        }

        public Builder(GoogleCloudBillingBudgetsV1beta1FilterResponse defaults) {
            $ = new GoogleCloudBillingBudgetsV1beta1FilterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param calendarPeriod Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget will track usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it will track usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
         * 
         * @return builder
         * 
         */
        public Builder calendarPeriod(String calendarPeriod) {
            $.calendarPeriod = calendarPeriod;
            return this;
        }

        /**
         * @param creditTypes Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
         * 
         * @return builder
         * 
         */
        public Builder creditTypes(List<String> creditTypes) {
            $.creditTypes = creditTypes;
            return this;
        }

        /**
         * @param creditTypes Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
         * 
         * @return builder
         * 
         */
        public Builder creditTypes(String... creditTypes) {
            return creditTypes(List.of(creditTypes));
        }

        /**
         * @param creditTypesTreatment Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
         * 
         * @return builder
         * 
         */
        public Builder creditTypesTreatment(String creditTypesTreatment) {
            $.creditTypesTreatment = creditTypesTreatment;
            return this;
        }

        /**
         * @param customPeriod Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
         * 
         * @return builder
         * 
         */
        public Builder customPeriod(GoogleCloudBillingBudgetsV1beta1CustomPeriodResponse customPeriod) {
            $.customPeriod = customPeriod;
            return this;
        }

        /**
         * @param labels Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report will include all labeled and unlabeled usage. An object containing a single `&#34;key&#34;: value` pair. Example: `{ &#34;name&#34;: &#34;wrench&#34; }`. _Currently, multiple entries or multiple values per entry are not allowed._
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param projects Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report will include all usage for the billing account, regardless of which project the usage occurred on. Only zero or one project can be specified currently.
         * 
         * @return builder
         * 
         */
        public Builder projects(List<String> projects) {
            $.projects = projects;
            return this;
        }

        /**
         * @param projects Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report will include all usage for the billing account, regardless of which project the usage occurred on. Only zero or one project can be specified currently.
         * 
         * @return builder
         * 
         */
        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }

        /**
         * @param services Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report will include usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report will include usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        /**
         * @param subaccounts Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account will be included. If omitted, the report will include usage from the parent account and all subaccounts, if they exist.
         * 
         * @return builder
         * 
         */
        public Builder subaccounts(List<String> subaccounts) {
            $.subaccounts = subaccounts;
            return this;
        }

        /**
         * @param subaccounts Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account will be included. If omitted, the report will include usage from the parent account and all subaccounts, if they exist.
         * 
         * @return builder
         * 
         */
        public Builder subaccounts(String... subaccounts) {
            return subaccounts(List.of(subaccounts));
        }

        public GoogleCloudBillingBudgetsV1beta1FilterResponse build() {
            $.calendarPeriod = Objects.requireNonNull($.calendarPeriod, "expected parameter 'calendarPeriod' to be non-null");
            $.creditTypes = Objects.requireNonNull($.creditTypes, "expected parameter 'creditTypes' to be non-null");
            $.creditTypesTreatment = Objects.requireNonNull($.creditTypesTreatment, "expected parameter 'creditTypesTreatment' to be non-null");
            $.customPeriod = Objects.requireNonNull($.customPeriod, "expected parameter 'customPeriod' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.projects = Objects.requireNonNull($.projects, "expected parameter 'projects' to be non-null");
            $.services = Objects.requireNonNull($.services, "expected parameter 'services' to be non-null");
            $.subaccounts = Objects.requireNonNull($.subaccounts, "expected parameter 'subaccounts' to be non-null");
            return $;
        }
    }

}
