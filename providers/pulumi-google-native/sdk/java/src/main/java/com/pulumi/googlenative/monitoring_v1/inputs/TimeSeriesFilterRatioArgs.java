// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.AggregationArgs;
import com.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterArgs;
import com.pulumi.googlenative.monitoring_v1.inputs.RatioPartArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.
 * 
 */
public final class TimeSeriesFilterRatioArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeSeriesFilterRatioArgs Empty = new TimeSeriesFilterRatioArgs();

    /**
     * The denominator of the ratio.
     * 
     */
    @Import(name="denominator")
    private @Nullable Output<RatioPartArgs> denominator;

    /**
     * @return The denominator of the ratio.
     * 
     */
    public Optional<Output<RatioPartArgs>> denominator() {
        return Optional.ofNullable(this.denominator);
    }

    /**
     * The numerator of the ratio.
     * 
     */
    @Import(name="numerator")
    private @Nullable Output<RatioPartArgs> numerator;

    /**
     * @return The numerator of the ratio.
     * 
     */
    public Optional<Output<RatioPartArgs>> numerator() {
        return Optional.ofNullable(this.numerator);
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @Import(name="pickTimeSeriesFilter")
    private @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter;

    /**
     * @return Ranking based time series filter.
     * 
     */
    public Optional<Output<PickTimeSeriesFilterArgs>> pickTimeSeriesFilter() {
        return Optional.ofNullable(this.pickTimeSeriesFilter);
    }

    /**
     * Apply a second aggregation after the ratio is computed.
     * 
     */
    @Import(name="secondaryAggregation")
    private @Nullable Output<AggregationArgs> secondaryAggregation;

    /**
     * @return Apply a second aggregation after the ratio is computed.
     * 
     */
    public Optional<Output<AggregationArgs>> secondaryAggregation() {
        return Optional.ofNullable(this.secondaryAggregation);
    }

    private TimeSeriesFilterRatioArgs() {}

    private TimeSeriesFilterRatioArgs(TimeSeriesFilterRatioArgs $) {
        this.denominator = $.denominator;
        this.numerator = $.numerator;
        this.pickTimeSeriesFilter = $.pickTimeSeriesFilter;
        this.secondaryAggregation = $.secondaryAggregation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeSeriesFilterRatioArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeSeriesFilterRatioArgs $;

        public Builder() {
            $ = new TimeSeriesFilterRatioArgs();
        }

        public Builder(TimeSeriesFilterRatioArgs defaults) {
            $ = new TimeSeriesFilterRatioArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param denominator The denominator of the ratio.
         * 
         * @return builder
         * 
         */
        public Builder denominator(@Nullable Output<RatioPartArgs> denominator) {
            $.denominator = denominator;
            return this;
        }

        /**
         * @param denominator The denominator of the ratio.
         * 
         * @return builder
         * 
         */
        public Builder denominator(RatioPartArgs denominator) {
            return denominator(Output.of(denominator));
        }

        /**
         * @param numerator The numerator of the ratio.
         * 
         * @return builder
         * 
         */
        public Builder numerator(@Nullable Output<RatioPartArgs> numerator) {
            $.numerator = numerator;
            return this;
        }

        /**
         * @param numerator The numerator of the ratio.
         * 
         * @return builder
         * 
         */
        public Builder numerator(RatioPartArgs numerator) {
            return numerator(Output.of(numerator));
        }

        /**
         * @param pickTimeSeriesFilter Ranking based time series filter.
         * 
         * @return builder
         * 
         */
        public Builder pickTimeSeriesFilter(@Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter) {
            $.pickTimeSeriesFilter = pickTimeSeriesFilter;
            return this;
        }

        /**
         * @param pickTimeSeriesFilter Ranking based time series filter.
         * 
         * @return builder
         * 
         */
        public Builder pickTimeSeriesFilter(PickTimeSeriesFilterArgs pickTimeSeriesFilter) {
            return pickTimeSeriesFilter(Output.of(pickTimeSeriesFilter));
        }

        /**
         * @param secondaryAggregation Apply a second aggregation after the ratio is computed.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAggregation(@Nullable Output<AggregationArgs> secondaryAggregation) {
            $.secondaryAggregation = secondaryAggregation;
            return this;
        }

        /**
         * @param secondaryAggregation Apply a second aggregation after the ratio is computed.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAggregation(AggregationArgs secondaryAggregation) {
            return secondaryAggregation(Output.of(secondaryAggregation));
        }

        public TimeSeriesFilterRatioArgs build() {
            return $;
        }
    }

}
