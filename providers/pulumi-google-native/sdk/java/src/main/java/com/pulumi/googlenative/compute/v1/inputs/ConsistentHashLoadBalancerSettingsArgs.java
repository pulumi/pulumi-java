// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.v1.inputs.ConsistentHashLoadBalancerSettingsHttpCookieArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This message defines settings for a consistent hash style load balancer.
 * 
 */
public final class ConsistentHashLoadBalancerSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConsistentHashLoadBalancerSettingsArgs Empty = new ConsistentHashLoadBalancerSettingsArgs();

    /**
     * Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    @Import(name="httpCookie")
    private @Nullable Output<ConsistentHashLoadBalancerSettingsHttpCookieArgs> httpCookie;

    /**
     * @return Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Optional<Output<ConsistentHashLoadBalancerSettingsHttpCookieArgs>> httpCookie() {
        return Optional.ofNullable(this.httpCookie);
    }

    /**
     * The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    @Import(name="httpHeaderName")
    private @Nullable Output<String> httpHeaderName;

    /**
     * @return The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    public Optional<Output<String>> httpHeaderName() {
        return Optional.ofNullable(this.httpHeaderName);
    }

    /**
     * The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
     * 
     */
    @Import(name="minimumRingSize")
    private @Nullable Output<String> minimumRingSize;

    /**
     * @return The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
     * 
     */
    public Optional<Output<String>> minimumRingSize() {
        return Optional.ofNullable(this.minimumRingSize);
    }

    private ConsistentHashLoadBalancerSettingsArgs() {}

    private ConsistentHashLoadBalancerSettingsArgs(ConsistentHashLoadBalancerSettingsArgs $) {
        this.httpCookie = $.httpCookie;
        this.httpHeaderName = $.httpHeaderName;
        this.minimumRingSize = $.minimumRingSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsistentHashLoadBalancerSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsistentHashLoadBalancerSettingsArgs $;

        public Builder() {
            $ = new ConsistentHashLoadBalancerSettingsArgs();
        }

        public Builder(ConsistentHashLoadBalancerSettingsArgs defaults) {
            $ = new ConsistentHashLoadBalancerSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpCookie Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
         * 
         * @return builder
         * 
         */
        public Builder httpCookie(@Nullable Output<ConsistentHashLoadBalancerSettingsHttpCookieArgs> httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        /**
         * @param httpCookie Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
         * 
         * @return builder
         * 
         */
        public Builder httpCookie(ConsistentHashLoadBalancerSettingsHttpCookieArgs httpCookie) {
            return httpCookie(Output.of(httpCookie));
        }

        /**
         * @param httpHeaderName The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaderName(@Nullable Output<String> httpHeaderName) {
            $.httpHeaderName = httpHeaderName;
            return this;
        }

        /**
         * @param httpHeaderName The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaderName(String httpHeaderName) {
            return httpHeaderName(Output.of(httpHeaderName));
        }

        /**
         * @param minimumRingSize The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
         * 
         * @return builder
         * 
         */
        public Builder minimumRingSize(@Nullable Output<String> minimumRingSize) {
            $.minimumRingSize = minimumRingSize;
            return this;
        }

        /**
         * @param minimumRingSize The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
         * 
         * @return builder
         * 
         */
        public Builder minimumRingSize(String minimumRingSize) {
            return minimumRingSize(Output.of(minimumRingSize));
        }

        public ConsistentHashLoadBalancerSettingsArgs build() {
            return $;
        }
    }

}
