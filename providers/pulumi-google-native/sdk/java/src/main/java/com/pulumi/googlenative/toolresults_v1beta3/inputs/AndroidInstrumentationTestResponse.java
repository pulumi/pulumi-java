// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestResponse extends com.pulumi.resources.InvokeArgs {

    public static final AndroidInstrumentationTestResponse Empty = new AndroidInstrumentationTestResponse();

    /**
     * The java package for the test to be executed. Required
     * 
     */
    @Import(name="testPackageId", required=true)
    private String testPackageId;

    public String testPackageId() {
        return this.testPackageId;
    }

    /**
     * The InstrumentationTestRunner class. Required
     * 
     */
    @Import(name="testRunnerClass", required=true)
    private String testRunnerClass;

    public String testRunnerClass() {
        return this.testRunnerClass;
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
     * 
     */
    @Import(name="testTargets", required=true)
    private List<String> testTargets;

    public List<String> testTargets() {
        return this.testTargets;
    }

    /**
     * The flag indicates whether Android Test Orchestrator will be used to run test or not.
     * 
     */
    @Import(name="useOrchestrator", required=true)
    private Boolean useOrchestrator;

    public Boolean useOrchestrator() {
        return this.useOrchestrator;
    }

    private AndroidInstrumentationTestResponse() {}

    private AndroidInstrumentationTestResponse(AndroidInstrumentationTestResponse $) {
        this.testPackageId = $.testPackageId;
        this.testRunnerClass = $.testRunnerClass;
        this.testTargets = $.testTargets;
        this.useOrchestrator = $.useOrchestrator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidInstrumentationTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidInstrumentationTestResponse $;

        public Builder() {
            $ = new AndroidInstrumentationTestResponse();
        }

        public Builder(AndroidInstrumentationTestResponse defaults) {
            $ = new AndroidInstrumentationTestResponse(Objects.requireNonNull(defaults));
        }

        public Builder testPackageId(String testPackageId) {
            $.testPackageId = testPackageId;
            return this;
        }

        public Builder testRunnerClass(String testRunnerClass) {
            $.testRunnerClass = testRunnerClass;
            return this;
        }

        public Builder testTargets(List<String> testTargets) {
            $.testTargets = testTargets;
            return this;
        }

        public Builder testTargets(String... testTargets) {
            return testTargets(List.of(testTargets));
        }

        public Builder useOrchestrator(Boolean useOrchestrator) {
            $.useOrchestrator = useOrchestrator;
            return this;
        }

        public AndroidInstrumentationTestResponse build() {
            $.testPackageId = Objects.requireNonNull($.testPackageId, "expected parameter 'testPackageId' to be non-null");
            $.testRunnerClass = Objects.requireNonNull($.testRunnerClass, "expected parameter 'testRunnerClass' to be non-null");
            $.testTargets = Objects.requireNonNull($.testTargets, "expected parameter 'testTargets' to be non-null");
            $.useOrchestrator = Objects.requireNonNull($.useOrchestrator, "expected parameter 'useOrchestrator' to be non-null");
            return $;
        }
    }

}
