// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.GenericSignedAttestationResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.PgpSignedAttestationResponse;
import java.util.Objects;


/**
 * Occurrence that represents a single &#34;attestation&#34;. The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
 * 
 */
public final class AttestationResponse extends com.pulumi.resources.InvokeArgs {

    public static final AttestationResponse Empty = new AttestationResponse();

    @Import(name="genericSignedAttestation", required=true)
    private GenericSignedAttestationResponse genericSignedAttestation;

    public GenericSignedAttestationResponse genericSignedAttestation() {
        return this.genericSignedAttestation;
    }

    /**
     * A PGP signed attestation.
     * 
     */
    @Import(name="pgpSignedAttestation", required=true)
    private PgpSignedAttestationResponse pgpSignedAttestation;

    public PgpSignedAttestationResponse pgpSignedAttestation() {
        return this.pgpSignedAttestation;
    }

    private AttestationResponse() {}

    private AttestationResponse(AttestationResponse $) {
        this.genericSignedAttestation = $.genericSignedAttestation;
        this.pgpSignedAttestation = $.pgpSignedAttestation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttestationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttestationResponse $;

        public Builder() {
            $ = new AttestationResponse();
        }

        public Builder(AttestationResponse defaults) {
            $ = new AttestationResponse(Objects.requireNonNull(defaults));
        }

        public Builder genericSignedAttestation(GenericSignedAttestationResponse genericSignedAttestation) {
            $.genericSignedAttestation = genericSignedAttestation;
            return this;
        }

        public Builder pgpSignedAttestation(PgpSignedAttestationResponse pgpSignedAttestation) {
            $.pgpSignedAttestation = pgpSignedAttestation;
            return this;
        }

        public AttestationResponse build() {
            $.genericSignedAttestation = Objects.requireNonNull($.genericSignedAttestation, "expected parameter 'genericSignedAttestation' to be non-null");
            $.pgpSignedAttestation = Objects.requireNonNull($.pgpSignedAttestation, "expected parameter 'pgpSignedAttestation' to be non-null");
            return $;
        }
    }

}
