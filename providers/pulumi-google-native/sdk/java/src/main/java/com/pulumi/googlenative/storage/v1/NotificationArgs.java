// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationArgs Empty = new NotificationArgs();

    @Import(name="bucket", required=true)
    private Output<String> bucket;

    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * HTTP 1.1 Entity tag for this subscription notification.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return HTTP 1.1 Entity tag for this subscription notification.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * If present, only send notifications about listed event types. If empty, sent notifications for all event types.
     * 
     */
    @Import(name="eventTypes")
    private @Nullable Output<List<String>> eventTypes;

    /**
     * @return If present, only send notifications about listed event types. If empty, sent notifications for all event types.
     * 
     */
    public Optional<Output<List<String>>> eventTypes() {
        return Optional.ofNullable(this.eventTypes);
    }

    /**
     * The ID of the notification.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the notification.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The kind of item this is. For notifications, this is always storage#notification.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return The kind of item this is. For notifications, this is always storage#notification.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * If present, only apply this notification configuration to object names that begin with this prefix.
     * 
     */
    @Import(name="objectNamePrefix")
    private @Nullable Output<String> objectNamePrefix;

    /**
     * @return If present, only apply this notification configuration to object names that begin with this prefix.
     * 
     */
    public Optional<Output<String>> objectNamePrefix() {
        return Optional.ofNullable(this.objectNamePrefix);
    }

    /**
     * The desired content of the Payload.
     * 
     */
    @Import(name="payloadFormat")
    private @Nullable Output<String> payloadFormat;

    /**
     * @return The desired content of the Payload.
     * 
     */
    public Optional<Output<String>> payloadFormat() {
        return Optional.ofNullable(this.payloadFormat);
    }

    /**
     * The canonical URL of this notification.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The canonical URL of this notification.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * The Cloud PubSub topic to which this subscription publishes. Formatted as: &#39;//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}&#39;
     * 
     */
    @Import(name="topic")
    private @Nullable Output<String> topic;

    /**
     * @return The Cloud PubSub topic to which this subscription publishes. Formatted as: &#39;//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}&#39;
     * 
     */
    public Optional<Output<String>> topic() {
        return Optional.ofNullable(this.topic);
    }

    /**
     * The project to be billed for this request. Required for Requester Pays buckets.
     * 
     */
    @Import(name="userProject")
    private @Nullable Output<String> userProject;

    /**
     * @return The project to be billed for this request. Required for Requester Pays buckets.
     * 
     */
    public Optional<Output<String>> userProject() {
        return Optional.ofNullable(this.userProject);
    }

    private NotificationArgs() {}

    private NotificationArgs(NotificationArgs $) {
        this.bucket = $.bucket;
        this.customAttributes = $.customAttributes;
        this.etag = $.etag;
        this.eventTypes = $.eventTypes;
        this.id = $.id;
        this.kind = $.kind;
        this.objectNamePrefix = $.objectNamePrefix;
        this.payloadFormat = $.payloadFormat;
        this.selfLink = $.selfLink;
        this.topic = $.topic;
        this.userProject = $.userProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationArgs $;

        public Builder() {
            $ = new NotificationArgs();
        }

        public Builder(NotificationArgs defaults) {
            $ = new NotificationArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param customAttributes An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param etag HTTP 1.1 Entity tag for this subscription notification.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag HTTP 1.1 Entity tag for this subscription notification.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param eventTypes If present, only send notifications about listed event types. If empty, sent notifications for all event types.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(@Nullable Output<List<String>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        /**
         * @param eventTypes If present, only send notifications about listed event types. If empty, sent notifications for all event types.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(List<String> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        /**
         * @param eventTypes If present, only send notifications about listed event types. If empty, sent notifications for all event types.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        /**
         * @param id The ID of the notification.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the notification.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param kind The kind of item this is. For notifications, this is always storage#notification.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The kind of item this is. For notifications, this is always storage#notification.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param objectNamePrefix If present, only apply this notification configuration to object names that begin with this prefix.
         * 
         * @return builder
         * 
         */
        public Builder objectNamePrefix(@Nullable Output<String> objectNamePrefix) {
            $.objectNamePrefix = objectNamePrefix;
            return this;
        }

        /**
         * @param objectNamePrefix If present, only apply this notification configuration to object names that begin with this prefix.
         * 
         * @return builder
         * 
         */
        public Builder objectNamePrefix(String objectNamePrefix) {
            return objectNamePrefix(Output.of(objectNamePrefix));
        }

        /**
         * @param payloadFormat The desired content of the Payload.
         * 
         * @return builder
         * 
         */
        public Builder payloadFormat(@Nullable Output<String> payloadFormat) {
            $.payloadFormat = payloadFormat;
            return this;
        }

        /**
         * @param payloadFormat The desired content of the Payload.
         * 
         * @return builder
         * 
         */
        public Builder payloadFormat(String payloadFormat) {
            return payloadFormat(Output.of(payloadFormat));
        }

        /**
         * @param selfLink The canonical URL of this notification.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The canonical URL of this notification.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param topic The Cloud PubSub topic to which this subscription publishes. Formatted as: &#39;//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}&#39;
         * 
         * @return builder
         * 
         */
        public Builder topic(@Nullable Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic The Cloud PubSub topic to which this subscription publishes. Formatted as: &#39;//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}&#39;
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        /**
         * @param userProject The project to be billed for this request. Required for Requester Pays buckets.
         * 
         * @return builder
         * 
         */
        public Builder userProject(@Nullable Output<String> userProject) {
            $.userProject = userProject;
            return this;
        }

        /**
         * @param userProject The project to be billed for this request. Required for Requester Pays buckets.
         * 
         * @return builder
         * 
         */
        public Builder userProject(String userProject) {
            return userProject(Output.of(userProject));
        }

        public NotificationArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            return $;
        }
    }

}
