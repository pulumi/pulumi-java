// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Sprite sheet configuration.
 * 
 */
public final class SpriteSheetResponse extends com.pulumi.resources.InvokeArgs {

    public static final SpriteSheetResponse Empty = new SpriteSheetResponse();

    /**
     * The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
     * 
     */
    @Import(name="columnCount", required=true)
    private Integer columnCount;

    public Integer columnCount() {
        return this.columnCount;
    }

    /**
     * End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
     * 
     */
    @Import(name="endTimeOffset", required=true)
    private String endTimeOffset;

    public String endTimeOffset() {
        return this.endTimeOffset;
    }

    /**
     * File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
     * 
     */
    @Import(name="filePrefix", required=true)
    private String filePrefix;

    public String filePrefix() {
        return this.filePrefix;
    }

    /**
     * Format type. The default is `jpeg`. Supported formats: - `jpeg`
     * 
     */
    @Import(name="format", required=true)
    private String format;

    public String format() {
        return this.format;
    }

    /**
     * Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
     * 
     */
    @Import(name="interval", required=true)
    private String interval;

    public String interval() {
        return this.interval;
    }

    /**
     * The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
     * 
     */
    @Import(name="quality", required=true)
    private Integer quality;

    public Integer quality() {
        return this.quality;
    }

    /**
     * The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
     * 
     */
    @Import(name="rowCount", required=true)
    private Integer rowCount;

    public Integer rowCount() {
        return this.rowCount;
    }

    /**
     * The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
     * 
     */
    @Import(name="spriteHeightPixels", required=true)
    private Integer spriteHeightPixels;

    public Integer spriteHeightPixels() {
        return this.spriteHeightPixels;
    }

    /**
     * The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
     * 
     */
    @Import(name="spriteWidthPixels", required=true)
    private Integer spriteWidthPixels;

    public Integer spriteWidthPixels() {
        return this.spriteWidthPixels;
    }

    /**
     * Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
     * 
     */
    @Import(name="startTimeOffset", required=true)
    private String startTimeOffset;

    public String startTimeOffset() {
        return this.startTimeOffset;
    }

    /**
     * Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
     * 
     */
    @Import(name="totalCount", required=true)
    private Integer totalCount;

    public Integer totalCount() {
        return this.totalCount;
    }

    private SpriteSheetResponse() {}

    private SpriteSheetResponse(SpriteSheetResponse $) {
        this.columnCount = $.columnCount;
        this.endTimeOffset = $.endTimeOffset;
        this.filePrefix = $.filePrefix;
        this.format = $.format;
        this.interval = $.interval;
        this.quality = $.quality;
        this.rowCount = $.rowCount;
        this.spriteHeightPixels = $.spriteHeightPixels;
        this.spriteWidthPixels = $.spriteWidthPixels;
        this.startTimeOffset = $.startTimeOffset;
        this.totalCount = $.totalCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpriteSheetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpriteSheetResponse $;

        public Builder() {
            $ = new SpriteSheetResponse();
        }

        public Builder(SpriteSheetResponse defaults) {
            $ = new SpriteSheetResponse(Objects.requireNonNull(defaults));
        }

        public Builder columnCount(Integer columnCount) {
            $.columnCount = columnCount;
            return this;
        }

        public Builder endTimeOffset(String endTimeOffset) {
            $.endTimeOffset = endTimeOffset;
            return this;
        }

        public Builder filePrefix(String filePrefix) {
            $.filePrefix = filePrefix;
            return this;
        }

        public Builder format(String format) {
            $.format = format;
            return this;
        }

        public Builder interval(String interval) {
            $.interval = interval;
            return this;
        }

        public Builder quality(Integer quality) {
            $.quality = quality;
            return this;
        }

        public Builder rowCount(Integer rowCount) {
            $.rowCount = rowCount;
            return this;
        }

        public Builder spriteHeightPixels(Integer spriteHeightPixels) {
            $.spriteHeightPixels = spriteHeightPixels;
            return this;
        }

        public Builder spriteWidthPixels(Integer spriteWidthPixels) {
            $.spriteWidthPixels = spriteWidthPixels;
            return this;
        }

        public Builder startTimeOffset(String startTimeOffset) {
            $.startTimeOffset = startTimeOffset;
            return this;
        }

        public Builder totalCount(Integer totalCount) {
            $.totalCount = totalCount;
            return this;
        }

        public SpriteSheetResponse build() {
            $.columnCount = Objects.requireNonNull($.columnCount, "expected parameter 'columnCount' to be non-null");
            $.endTimeOffset = Objects.requireNonNull($.endTimeOffset, "expected parameter 'endTimeOffset' to be non-null");
            $.filePrefix = Objects.requireNonNull($.filePrefix, "expected parameter 'filePrefix' to be non-null");
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            $.quality = Objects.requireNonNull($.quality, "expected parameter 'quality' to be non-null");
            $.rowCount = Objects.requireNonNull($.rowCount, "expected parameter 'rowCount' to be non-null");
            $.spriteHeightPixels = Objects.requireNonNull($.spriteHeightPixels, "expected parameter 'spriteHeightPixels' to be non-null");
            $.spriteWidthPixels = Objects.requireNonNull($.spriteWidthPixels, "expected parameter 'spriteWidthPixels' to be non-null");
            $.startTimeOffset = Objects.requireNonNull($.startTimeOffset, "expected parameter 'startTimeOffset' to be non-null");
            $.totalCount = Objects.requireNonNull($.totalCount, "expected parameter 'totalCount' to be non-null");
            return $;
        }
    }

}
