// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.gameservices.v1beta.enums.RuleAction;
import com.pulumi.googlenative.gameservices.v1beta.inputs.ConditionArgs;
import com.pulumi.googlenative.gameservices.v1beta.inputs.LogConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A rule to be applied in a Policy.
 * 
 */
public final class RuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleArgs Empty = new RuleArgs();

    /**
     * Required
     * 
     */
    @Import(name="action")
    private @Nullable Output<RuleAction> action;

    /**
     * @return Required
     * 
     */
    public Optional<Output<RuleAction>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Additional restrictions that must be met. All conditions must pass for the rule to match.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<ConditionArgs>> conditions;

    /**
     * @return Additional restrictions that must be met. All conditions must pass for the rule to match.
     * 
     */
    public Optional<Output<List<ConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Human-readable description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
     * 
     */
    @Import(name="in")
    private @Nullable Output<List<String>> in;

    /**
     * @return If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
     * 
     */
    public Optional<Output<List<String>>> in() {
        return Optional.ofNullable(this.in);
    }

    /**
     * The config returned to callers of CheckPolicy for any entries that match the LOG action.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<List<LogConfigArgs>> logConfig;

    /**
     * @return The config returned to callers of CheckPolicy for any entries that match the LOG action.
     * 
     */
    public Optional<Output<List<LogConfigArgs>>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
     * 
     */
    @Import(name="notIn")
    private @Nullable Output<List<String>> notIn;

    /**
     * @return If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
     * 
     */
    public Optional<Output<List<String>>> notIn() {
        return Optional.ofNullable(this.notIn);
    }

    /**
     * A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    /**
     * @return A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
     * 
     */
    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private RuleArgs() {}

    private RuleArgs(RuleArgs $) {
        this.action = $.action;
        this.conditions = $.conditions;
        this.description = $.description;
        this.in = $.in;
        this.logConfig = $.logConfig;
        this.notIn = $.notIn;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleArgs $;

        public Builder() {
            $ = new RuleArgs();
        }

        public Builder(RuleArgs defaults) {
            $ = new RuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Required
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<RuleAction> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Required
         * 
         * @return builder
         * 
         */
        public Builder action(RuleAction action) {
            return action(Output.of(action));
        }

        /**
         * @param conditions Additional restrictions that must be met. All conditions must pass for the rule to match.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<ConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Additional restrictions that must be met. All conditions must pass for the rule to match.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<ConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Additional restrictions that must be met. All conditions must pass for the rule to match.
         * 
         * @return builder
         * 
         */
        public Builder conditions(ConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param description Human-readable description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param in If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
         * 
         * @return builder
         * 
         */
        public Builder in(@Nullable Output<List<String>> in) {
            $.in = in;
            return this;
        }

        /**
         * @param in If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
         * 
         * @return builder
         * 
         */
        public Builder in(List<String> in) {
            return in(Output.of(in));
        }

        /**
         * @param in If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
         * 
         * @return builder
         * 
         */
        public Builder in(String... in) {
            return in(List.of(in));
        }

        /**
         * @param logConfig The config returned to callers of CheckPolicy for any entries that match the LOG action.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<List<LogConfigArgs>> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig The config returned to callers of CheckPolicy for any entries that match the LOG action.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(List<LogConfigArgs> logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param logConfig The config returned to callers of CheckPolicy for any entries that match the LOG action.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(LogConfigArgs... logConfig) {
            return logConfig(List.of(logConfig));
        }

        /**
         * @param notIn If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
         * 
         * @return builder
         * 
         */
        public Builder notIn(@Nullable Output<List<String>> notIn) {
            $.notIn = notIn;
            return this;
        }

        /**
         * @param notIn If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
         * 
         * @return builder
         * 
         */
        public Builder notIn(List<String> notIn) {
            return notIn(Output.of(notIn));
        }

        /**
         * @param notIn If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
         * 
         * @return builder
         * 
         */
        public Builder notIn(String... notIn) {
            return notIn(List.of(notIn));
        }

        /**
         * @param permissions A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public RuleArgs build() {
            return $;
        }
    }

}
