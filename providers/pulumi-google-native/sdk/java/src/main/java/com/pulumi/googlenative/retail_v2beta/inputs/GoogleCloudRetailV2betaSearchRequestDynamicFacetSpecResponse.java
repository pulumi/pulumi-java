// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.retail_v2beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The specifications of dynamically generated facets.
 * 
 */
public final class GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse Empty = new GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse();

    /**
     * Mode of the DynamicFacet feature. Defaults to Mode.DISABLED if it&#39;s unset.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    public String mode() {
        return this.mode;
    }

    private GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse() {}

    private GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse(GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse $) {
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse $;

        public Builder() {
            $ = new GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse();
        }

        public Builder(GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse defaults) {
            $ = new GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse(Objects.requireNonNull(defaults));
        }

        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        public GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecResponse build() {
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            return $;
        }
    }

}
