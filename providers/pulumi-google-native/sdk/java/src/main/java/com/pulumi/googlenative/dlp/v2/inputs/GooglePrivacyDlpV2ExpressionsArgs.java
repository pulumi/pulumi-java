// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp.v2.enums.GooglePrivacyDlpV2ExpressionsLogicalOperator;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2ConditionsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An expression, consisting or an operator and conditions.
 * 
 */
public final class GooglePrivacyDlpV2ExpressionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2ExpressionsArgs Empty = new GooglePrivacyDlpV2ExpressionsArgs();

    /**
     * Conditions to apply to the expression.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<GooglePrivacyDlpV2ConditionsArgs> conditions;

    /**
     * @return Conditions to apply to the expression.
     * 
     */
    public Optional<Output<GooglePrivacyDlpV2ConditionsArgs>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
     * 
     */
    @Import(name="logicalOperator")
    private @Nullable Output<GooglePrivacyDlpV2ExpressionsLogicalOperator> logicalOperator;

    /**
     * @return The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
     * 
     */
    public Optional<Output<GooglePrivacyDlpV2ExpressionsLogicalOperator>> logicalOperator() {
        return Optional.ofNullable(this.logicalOperator);
    }

    private GooglePrivacyDlpV2ExpressionsArgs() {}

    private GooglePrivacyDlpV2ExpressionsArgs(GooglePrivacyDlpV2ExpressionsArgs $) {
        this.conditions = $.conditions;
        this.logicalOperator = $.logicalOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2ExpressionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2ExpressionsArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2ExpressionsArgs();
        }

        public Builder(GooglePrivacyDlpV2ExpressionsArgs defaults) {
            $ = new GooglePrivacyDlpV2ExpressionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions Conditions to apply to the expression.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<GooglePrivacyDlpV2ConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions to apply to the expression.
         * 
         * @return builder
         * 
         */
        public Builder conditions(GooglePrivacyDlpV2ConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param logicalOperator The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
         * 
         * @return builder
         * 
         */
        public Builder logicalOperator(@Nullable Output<GooglePrivacyDlpV2ExpressionsLogicalOperator> logicalOperator) {
            $.logicalOperator = logicalOperator;
            return this;
        }

        /**
         * @param logicalOperator The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
         * 
         * @return builder
         * 
         */
        public Builder logicalOperator(GooglePrivacyDlpV2ExpressionsLogicalOperator logicalOperator) {
            return logicalOperator(Output.of(logicalOperator));
        }

        public GooglePrivacyDlpV2ExpressionsArgs build() {
            return $;
        }
    }

}
