// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.ArtifactsResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BuildApprovalResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BuildOptionsResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BuildStepResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.FailureInfoResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.ResultsResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.SecretResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.SecretsResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.SourceProvenanceResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.SourceResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.WarningResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
 * 
 */
public final class BuildResponse extends com.pulumi.resources.InvokeArgs {

    public static final BuildResponse Empty = new BuildResponse();

    /**
     * Describes this build&#39;s approval configuration, status, and result.
     * 
     */
    @Import(name="approval", required=true)
    private BuildApprovalResponse approval;

    /**
     * @return Describes this build&#39;s approval configuration, status, and result.
     * 
     */
    public BuildApprovalResponse approval() {
        return this.approval;
    }

    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     * 
     */
    @Import(name="artifacts", required=true)
    private ArtifactsResponse artifacts;

    /**
     * @return Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     * 
     */
    public ArtifactsResponse artifacts() {
        return this.artifacts;
    }

    /**
     * Secrets and secret environment variables.
     * 
     */
    @Import(name="availableSecrets", required=true)
    private SecretsResponse availableSecrets;

    /**
     * @return Secrets and secret environment variables.
     * 
     */
    public SecretsResponse availableSecrets() {
        return this.availableSecrets;
    }

    /**
     * The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
     * 
     */
    @Import(name="buildTriggerId", required=true)
    private String buildTriggerId;

    /**
     * @return The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
     * 
     */
    public String buildTriggerId() {
        return this.buildTriggerId;
    }

    /**
     * Time at which the request to create the build was received.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return Time at which the request to create the build was received.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * Contains information about the build when status=FAILURE.
     * 
     */
    @Import(name="failureInfo", required=true)
    private FailureInfoResponse failureInfo;

    /**
     * @return Contains information about the build when status=FAILURE.
     * 
     */
    public FailureInfoResponse failureInfo() {
        return this.failureInfo;
    }

    /**
     * Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build&#39;s execution.
     * 
     */
    @Import(name="finishTime", required=true)
    private String finishTime;

    /**
     * @return Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build&#39;s execution.
     * 
     */
    public String finishTime() {
        return this.finishTime;
    }

    /**
     * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account&#39;s credentials. The digests of the pushed images will be stored in the `Build` resource&#39;s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
     * 
     */
    @Import(name="images", required=true)
    private List<String> images;

    /**
     * @return A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account&#39;s credentials. The digests of the pushed images will be stored in the `Build` resource&#39;s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
     * 
     */
    public List<String> images() {
        return this.images;
    }

    /**
     * URL to logs for this build in Google Cloud Console.
     * 
     */
    @Import(name="logUrl", required=true)
    private String logUrl;

    /**
     * @return URL to logs for this build in Google Cloud Console.
     * 
     */
    public String logUrl() {
        return this.logUrl;
    }

    /**
     * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
     * 
     */
    @Import(name="logsBucket", required=true)
    private String logsBucket;

    /**
     * @return Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
     * 
     */
    public String logsBucket() {
        return this.logsBucket;
    }

    /**
     * The &#39;Build&#39; name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The &#39;Build&#39; name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Special options for this build.
     * 
     */
    @Import(name="options", required=true)
    private BuildOptionsResponse options;

    /**
     * @return Special options for this build.
     * 
     */
    public BuildOptionsResponse options() {
        return this.options;
    }

    /**
     * ID of the project.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return ID of the project.
     * 
     */
    public String project() {
        return this.project;
    }

    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
     * 
     */
    @Import(name="queueTtl", required=true)
    private String queueTtl;

    /**
     * @return TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
     * 
     */
    public String queueTtl() {
        return this.queueTtl;
    }

    /**
     * Results of the build.
     * 
     */
    @Import(name="results", required=true)
    private ResultsResponse results;

    /**
     * @return Results of the build.
     * 
     */
    public ResultsResponse results() {
        return this.results;
    }

    /**
     * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
     * 
     */
    @Import(name="secrets", required=true)
    private List<SecretResponse> secrets;

    /**
     * @return Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
     * 
     */
    public List<SecretResponse> secrets() {
        return this.secrets;
    }

    /**
     * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    /**
     * @return IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * The location of the source files to build.
     * 
     */
    @Import(name="source", required=true)
    private SourceResponse source;

    /**
     * @return The location of the source files to build.
     * 
     */
    public SourceResponse source() {
        return this.source;
    }

    /**
     * A permanent fixed identifier for source.
     * 
     */
    @Import(name="sourceProvenance", required=true)
    private SourceProvenanceResponse sourceProvenance;

    /**
     * @return A permanent fixed identifier for source.
     * 
     */
    public SourceProvenanceResponse sourceProvenance() {
        return this.sourceProvenance;
    }

    /**
     * Time at which execution of the build was started.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return Time at which execution of the build was started.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Status of the build.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Status of the build.
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * Customer-readable message about the current status.
     * 
     */
    @Import(name="statusDetail", required=true)
    private String statusDetail;

    /**
     * @return Customer-readable message about the current status.
     * 
     */
    public String statusDetail() {
        return this.statusDetail;
    }

    /**
     * The operations to be performed on the workspace.
     * 
     */
    @Import(name="steps", required=true)
    private List<BuildStepResponse> steps;

    /**
     * @return The operations to be performed on the workspace.
     * 
     */
    public List<BuildStepResponse> steps() {
        return this.steps;
    }

    /**
     * Substitutions data for `Build` resource.
     * 
     */
    @Import(name="substitutions", required=true)
    private Map<String,String> substitutions;

    /**
     * @return Substitutions data for `Build` resource.
     * 
     */
    public Map<String,String> substitutions() {
        return this.substitutions;
    }

    /**
     * Tags for annotation of a `Build`. These are not docker tags.
     * 
     */
    @Import(name="tags", required=true)
    private List<String> tags;

    /**
     * @return Tags for annotation of a `Build`. These are not docker tags.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
     * 
     */
    @Import(name="timeout", required=true)
    private String timeout;

    /**
     * @return Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
     * 
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
     * 
     */
    @Import(name="timing", required=true)
    private Map<String,String> timing;

    /**
     * @return Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
     * 
     */
    public Map<String,String> timing() {
        return this.timing;
    }

    /**
     * Non-fatal problems encountered during the execution of the build.
     * 
     */
    @Import(name="warnings", required=true)
    private List<WarningResponse> warnings;

    /**
     * @return Non-fatal problems encountered during the execution of the build.
     * 
     */
    public List<WarningResponse> warnings() {
        return this.warnings;
    }

    private BuildResponse() {}

    private BuildResponse(BuildResponse $) {
        this.approval = $.approval;
        this.artifacts = $.artifacts;
        this.availableSecrets = $.availableSecrets;
        this.buildTriggerId = $.buildTriggerId;
        this.createTime = $.createTime;
        this.failureInfo = $.failureInfo;
        this.finishTime = $.finishTime;
        this.images = $.images;
        this.logUrl = $.logUrl;
        this.logsBucket = $.logsBucket;
        this.name = $.name;
        this.options = $.options;
        this.project = $.project;
        this.queueTtl = $.queueTtl;
        this.results = $.results;
        this.secrets = $.secrets;
        this.serviceAccount = $.serviceAccount;
        this.source = $.source;
        this.sourceProvenance = $.sourceProvenance;
        this.startTime = $.startTime;
        this.status = $.status;
        this.statusDetail = $.statusDetail;
        this.steps = $.steps;
        this.substitutions = $.substitutions;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.timing = $.timing;
        this.warnings = $.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildResponse $;

        public Builder() {
            $ = new BuildResponse();
        }

        public Builder(BuildResponse defaults) {
            $ = new BuildResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param approval Describes this build&#39;s approval configuration, status, and result.
         * 
         * @return builder
         * 
         */
        public Builder approval(BuildApprovalResponse approval) {
            $.approval = approval;
            return this;
        }

        /**
         * @param artifacts Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
         * 
         * @return builder
         * 
         */
        public Builder artifacts(ArtifactsResponse artifacts) {
            $.artifacts = artifacts;
            return this;
        }

        /**
         * @param availableSecrets Secrets and secret environment variables.
         * 
         * @return builder
         * 
         */
        public Builder availableSecrets(SecretsResponse availableSecrets) {
            $.availableSecrets = availableSecrets;
            return this;
        }

        /**
         * @param buildTriggerId The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
         * 
         * @return builder
         * 
         */
        public Builder buildTriggerId(String buildTriggerId) {
            $.buildTriggerId = buildTriggerId;
            return this;
        }

        /**
         * @param createTime Time at which the request to create the build was received.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param failureInfo Contains information about the build when status=FAILURE.
         * 
         * @return builder
         * 
         */
        public Builder failureInfo(FailureInfoResponse failureInfo) {
            $.failureInfo = failureInfo;
            return this;
        }

        /**
         * @param finishTime Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build&#39;s execution.
         * 
         * @return builder
         * 
         */
        public Builder finishTime(String finishTime) {
            $.finishTime = finishTime;
            return this;
        }

        /**
         * @param images A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account&#39;s credentials. The digests of the pushed images will be stored in the `Build` resource&#39;s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
         * 
         * @return builder
         * 
         */
        public Builder images(List<String> images) {
            $.images = images;
            return this;
        }

        /**
         * @param images A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account&#39;s credentials. The digests of the pushed images will be stored in the `Build` resource&#39;s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
         * 
         * @return builder
         * 
         */
        public Builder images(String... images) {
            return images(List.of(images));
        }

        /**
         * @param logUrl URL to logs for this build in Google Cloud Console.
         * 
         * @return builder
         * 
         */
        public Builder logUrl(String logUrl) {
            $.logUrl = logUrl;
            return this;
        }

        /**
         * @param logsBucket Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
         * 
         * @return builder
         * 
         */
        public Builder logsBucket(String logsBucket) {
            $.logsBucket = logsBucket;
            return this;
        }

        /**
         * @param name The &#39;Build&#39; name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param options Special options for this build.
         * 
         * @return builder
         * 
         */
        public Builder options(BuildOptionsResponse options) {
            $.options = options;
            return this;
        }

        /**
         * @param project ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        /**
         * @param queueTtl TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
         * 
         * @return builder
         * 
         */
        public Builder queueTtl(String queueTtl) {
            $.queueTtl = queueTtl;
            return this;
        }

        /**
         * @param results Results of the build.
         * 
         * @return builder
         * 
         */
        public Builder results(ResultsResponse results) {
            $.results = results;
            return this;
        }

        /**
         * @param secrets Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
         * 
         * @return builder
         * 
         */
        public Builder secrets(List<SecretResponse> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
         * 
         * @return builder
         * 
         */
        public Builder secrets(SecretResponse... secrets) {
            return secrets(List.of(secrets));
        }

        /**
         * @param serviceAccount IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param source The location of the source files to build.
         * 
         * @return builder
         * 
         */
        public Builder source(SourceResponse source) {
            $.source = source;
            return this;
        }

        /**
         * @param sourceProvenance A permanent fixed identifier for source.
         * 
         * @return builder
         * 
         */
        public Builder sourceProvenance(SourceProvenanceResponse sourceProvenance) {
            $.sourceProvenance = sourceProvenance;
            return this;
        }

        /**
         * @param startTime Time at which execution of the build was started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param status Status of the build.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param statusDetail Customer-readable message about the current status.
         * 
         * @return builder
         * 
         */
        public Builder statusDetail(String statusDetail) {
            $.statusDetail = statusDetail;
            return this;
        }

        /**
         * @param steps The operations to be performed on the workspace.
         * 
         * @return builder
         * 
         */
        public Builder steps(List<BuildStepResponse> steps) {
            $.steps = steps;
            return this;
        }

        /**
         * @param steps The operations to be performed on the workspace.
         * 
         * @return builder
         * 
         */
        public Builder steps(BuildStepResponse... steps) {
            return steps(List.of(steps));
        }

        /**
         * @param substitutions Substitutions data for `Build` resource.
         * 
         * @return builder
         * 
         */
        public Builder substitutions(Map<String,String> substitutions) {
            $.substitutions = substitutions;
            return this;
        }

        /**
         * @param tags Tags for annotation of a `Build`. These are not docker tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for annotation of a `Build`. These are not docker tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeout Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timing Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
         * 
         * @return builder
         * 
         */
        public Builder timing(Map<String,String> timing) {
            $.timing = timing;
            return this;
        }

        /**
         * @param warnings Non-fatal problems encountered during the execution of the build.
         * 
         * @return builder
         * 
         */
        public Builder warnings(List<WarningResponse> warnings) {
            $.warnings = warnings;
            return this;
        }

        /**
         * @param warnings Non-fatal problems encountered during the execution of the build.
         * 
         * @return builder
         * 
         */
        public Builder warnings(WarningResponse... warnings) {
            return warnings(List.of(warnings));
        }

        public BuildResponse build() {
            $.approval = Objects.requireNonNull($.approval, "expected parameter 'approval' to be non-null");
            $.artifacts = Objects.requireNonNull($.artifacts, "expected parameter 'artifacts' to be non-null");
            $.availableSecrets = Objects.requireNonNull($.availableSecrets, "expected parameter 'availableSecrets' to be non-null");
            $.buildTriggerId = Objects.requireNonNull($.buildTriggerId, "expected parameter 'buildTriggerId' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.failureInfo = Objects.requireNonNull($.failureInfo, "expected parameter 'failureInfo' to be non-null");
            $.finishTime = Objects.requireNonNull($.finishTime, "expected parameter 'finishTime' to be non-null");
            $.images = Objects.requireNonNull($.images, "expected parameter 'images' to be non-null");
            $.logUrl = Objects.requireNonNull($.logUrl, "expected parameter 'logUrl' to be non-null");
            $.logsBucket = Objects.requireNonNull($.logsBucket, "expected parameter 'logsBucket' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.queueTtl = Objects.requireNonNull($.queueTtl, "expected parameter 'queueTtl' to be non-null");
            $.results = Objects.requireNonNull($.results, "expected parameter 'results' to be non-null");
            $.secrets = Objects.requireNonNull($.secrets, "expected parameter 'secrets' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.sourceProvenance = Objects.requireNonNull($.sourceProvenance, "expected parameter 'sourceProvenance' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.statusDetail = Objects.requireNonNull($.statusDetail, "expected parameter 'statusDetail' to be non-null");
            $.steps = Objects.requireNonNull($.steps, "expected parameter 'steps' to be non-null");
            $.substitutions = Objects.requireNonNull($.substitutions, "expected parameter 'substitutions' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.timing = Objects.requireNonNull($.timing, "expected parameter 'timing' to be non-null");
            $.warnings = Objects.requireNonNull($.warnings, "expected parameter 'warnings' to be non-null");
            return $;
        }
    }

}
