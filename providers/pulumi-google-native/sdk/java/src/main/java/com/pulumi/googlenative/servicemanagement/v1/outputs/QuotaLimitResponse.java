// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class QuotaLimitResponse {
    /**
     * @return Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
     * 
     */
    private final String defaultLimit;
    /**
     * @return Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit&#39;s display name (see: `display_name`).
     * 
     */
    private final String description;
    /**
     * @return User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
     * 
     */
    private final String displayName;
    /**
     * @return Duration of this limit in textual notation. Must be &#34;100s&#34; or &#34;1d&#34;. Used by group-based quotas only.
     * 
     */
    private final String duration;
    /**
     * @return Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration &#34;1d&#34;, in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
     * 
     */
    private final String freeTier;
    /**
     * @return Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
     * 
     */
    private final String maxLimit;
    /**
     * @return The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
     * 
     */
    private final String metric;
    /**
     * @return Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as &#39;-&#39;. The maximum length of the limit name is 64 characters.
     * 
     */
    private final String name;
    /**
     * @return Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * &#34;1/min/{project}&#34; for quota per minute per project. Note: the order of unit components is insignificant. The &#34;1&#34; at the beginning is required to follow the metric unit syntax.
     * 
     */
    private final String unit;
    /**
     * @return Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
     * 
     */
    private final Map<String,String> values;

    @CustomType.Constructor
    private QuotaLimitResponse(
        @CustomType.Parameter("defaultLimit") String defaultLimit,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("duration") String duration,
        @CustomType.Parameter("freeTier") String freeTier,
        @CustomType.Parameter("maxLimit") String maxLimit,
        @CustomType.Parameter("metric") String metric,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("unit") String unit,
        @CustomType.Parameter("values") Map<String,String> values) {
        this.defaultLimit = defaultLimit;
        this.description = description;
        this.displayName = displayName;
        this.duration = duration;
        this.freeTier = freeTier;
        this.maxLimit = maxLimit;
        this.metric = metric;
        this.name = name;
        this.unit = unit;
        this.values = values;
    }

    /**
     * @return Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
     * 
     */
    public String defaultLimit() {
        return this.defaultLimit;
    }
    /**
     * @return Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit&#39;s display name (see: `display_name`).
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Duration of this limit in textual notation. Must be &#34;100s&#34; or &#34;1d&#34;. Used by group-based quotas only.
     * 
     */
    public String duration() {
        return this.duration;
    }
    /**
     * @return Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration &#34;1d&#34;, in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
     * 
     */
    public String freeTier() {
        return this.freeTier;
    }
    /**
     * @return Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
     * 
     */
    public String maxLimit() {
        return this.maxLimit;
    }
    /**
     * @return The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as &#39;-&#39;. The maximum length of the limit name is 64 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * &#34;1/min/{project}&#34; for quota per minute per project. Note: the order of unit components is insignificant. The &#34;1&#34; at the beginning is required to follow the metric unit syntax.
     * 
     */
    public String unit() {
        return this.unit;
    }
    /**
     * @return Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
     * 
     */
    public Map<String,String> values() {
        return this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QuotaLimitResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String defaultLimit;
        private String description;
        private String displayName;
        private String duration;
        private String freeTier;
        private String maxLimit;
        private String metric;
        private String name;
        private String unit;
        private Map<String,String> values;

        public Builder() {
    	      // Empty
        }

        public Builder(QuotaLimitResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultLimit = defaults.defaultLimit;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.duration = defaults.duration;
    	      this.freeTier = defaults.freeTier;
    	      this.maxLimit = defaults.maxLimit;
    	      this.metric = defaults.metric;
    	      this.name = defaults.name;
    	      this.unit = defaults.unit;
    	      this.values = defaults.values;
        }

        public Builder defaultLimit(String defaultLimit) {
            this.defaultLimit = Objects.requireNonNull(defaultLimit);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder duration(String duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        public Builder freeTier(String freeTier) {
            this.freeTier = Objects.requireNonNull(freeTier);
            return this;
        }
        public Builder maxLimit(String maxLimit) {
            this.maxLimit = Objects.requireNonNull(maxLimit);
            return this;
        }
        public Builder metric(String metric) {
            this.metric = Objects.requireNonNull(metric);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder unit(String unit) {
            this.unit = Objects.requireNonNull(unit);
            return this;
        }
        public Builder values(Map<String,String> values) {
            this.values = Objects.requireNonNull(values);
            return this;
        }        public QuotaLimitResponse build() {
            return new QuotaLimitResponse(defaultLimit, description, displayName, duration, freeTier, maxLimit, metric, name, unit, values);
        }
    }
}
