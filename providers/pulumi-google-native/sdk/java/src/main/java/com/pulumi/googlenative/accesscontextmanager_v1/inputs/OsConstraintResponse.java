// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A restriction on the OS type and version of devices making requests.
 * 
 */
public final class OsConstraintResponse extends com.pulumi.resources.InvokeArgs {

    public static final OsConstraintResponse Empty = new OsConstraintResponse();

    /**
     * The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `&#34;major.minor.patch&#34;`. Examples: `&#34;10.5.301&#34;`, `&#34;9.2.1&#34;`.
     * 
     */
    @Import(name="minimumVersion", required=true)
    private String minimumVersion;

    /**
     * @return The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `&#34;major.minor.patch&#34;`. Examples: `&#34;10.5.301&#34;`, `&#34;9.2.1&#34;`.
     * 
     */
    public String minimumVersion() {
        return this.minimumVersion;
    }

    /**
     * The allowed OS type.
     * 
     */
    @Import(name="osType", required=true)
    private String osType;

    /**
     * @return The allowed OS type.
     * 
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.
     * 
     */
    @Import(name="requireVerifiedChromeOs", required=true)
    private Boolean requireVerifiedChromeOs;

    /**
     * @return Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.
     * 
     */
    public Boolean requireVerifiedChromeOs() {
        return this.requireVerifiedChromeOs;
    }

    private OsConstraintResponse() {}

    private OsConstraintResponse(OsConstraintResponse $) {
        this.minimumVersion = $.minimumVersion;
        this.osType = $.osType;
        this.requireVerifiedChromeOs = $.requireVerifiedChromeOs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OsConstraintResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OsConstraintResponse $;

        public Builder() {
            $ = new OsConstraintResponse();
        }

        public Builder(OsConstraintResponse defaults) {
            $ = new OsConstraintResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param minimumVersion The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `&#34;major.minor.patch&#34;`. Examples: `&#34;10.5.301&#34;`, `&#34;9.2.1&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder minimumVersion(String minimumVersion) {
            $.minimumVersion = minimumVersion;
            return this;
        }

        /**
         * @param osType The allowed OS type.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param requireVerifiedChromeOs Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.
         * 
         * @return builder
         * 
         */
        public Builder requireVerifiedChromeOs(Boolean requireVerifiedChromeOs) {
            $.requireVerifiedChromeOs = requireVerifiedChromeOs;
            return this;
        }

        public OsConstraintResponse build() {
            $.minimumVersion = Objects.requireNonNull($.minimumVersion, "expected parameter 'minimumVersion' to be non-null");
            $.osType = Objects.requireNonNull($.osType, "expected parameter 'osType' to be non-null");
            $.requireVerifiedChromeOs = Objects.requireNonNull($.requireVerifiedChromeOs, "expected parameter 'requireVerifiedChromeOs' to be non-null");
            return $;
        }
    }

}
