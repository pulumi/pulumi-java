// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.appengine_v1.inputs.CloudBuildOptionsArgs;
import com.pulumi.googlenative.appengine_v1.inputs.ContainerInfoArgs;
import com.pulumi.googlenative.appengine_v1.inputs.ZipInfoArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Code and application artifacts used to deploy a version to App Engine.
 * 
 */
public final class DeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentArgs Empty = new DeploymentArgs();

    /**
     * Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
     * 
     */
    @Import(name="cloudBuildOptions")
      private final @Nullable Output<CloudBuildOptionsArgs> cloudBuildOptions;

    public Output<CloudBuildOptionsArgs> cloudBuildOptions() {
        return this.cloudBuildOptions == null ? Codegen.empty() : this.cloudBuildOptions;
    }

    /**
     * The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    @Import(name="container")
      private final @Nullable Output<ContainerInfoArgs> container;

    public Output<ContainerInfoArgs> container() {
        return this.container == null ? Codegen.empty() : this.container;
    }

    /**
     * Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
     * 
     */
    @Import(name="files")
      private final @Nullable Output<Map<String,String>> files;

    public Output<Map<String,String>> files() {
        return this.files == null ? Codegen.empty() : this.files;
    }

    /**
     * The zip file for this deployment, if this is a zip deployment.
     * 
     */
    @Import(name="zip")
      private final @Nullable Output<ZipInfoArgs> zip;

    public Output<ZipInfoArgs> zip() {
        return this.zip == null ? Codegen.empty() : this.zip;
    }

    public DeploymentArgs(
        @Nullable Output<CloudBuildOptionsArgs> cloudBuildOptions,
        @Nullable Output<ContainerInfoArgs> container,
        @Nullable Output<Map<String,String>> files,
        @Nullable Output<ZipInfoArgs> zip) {
        this.cloudBuildOptions = cloudBuildOptions;
        this.container = container;
        this.files = files;
        this.zip = zip;
    }

    private DeploymentArgs() {
        this.cloudBuildOptions = Codegen.empty();
        this.container = Codegen.empty();
        this.files = Codegen.empty();
        this.zip = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CloudBuildOptionsArgs> cloudBuildOptions;
        private @Nullable Output<ContainerInfoArgs> container;
        private @Nullable Output<Map<String,String>> files;
        private @Nullable Output<ZipInfoArgs> zip;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudBuildOptions = defaults.cloudBuildOptions;
    	      this.container = defaults.container;
    	      this.files = defaults.files;
    	      this.zip = defaults.zip;
        }

        public Builder cloudBuildOptions(@Nullable Output<CloudBuildOptionsArgs> cloudBuildOptions) {
            this.cloudBuildOptions = cloudBuildOptions;
            return this;
        }
        public Builder cloudBuildOptions(@Nullable CloudBuildOptionsArgs cloudBuildOptions) {
            this.cloudBuildOptions = Codegen.ofNullable(cloudBuildOptions);
            return this;
        }
        public Builder container(@Nullable Output<ContainerInfoArgs> container) {
            this.container = container;
            return this;
        }
        public Builder container(@Nullable ContainerInfoArgs container) {
            this.container = Codegen.ofNullable(container);
            return this;
        }
        public Builder files(@Nullable Output<Map<String,String>> files) {
            this.files = files;
            return this;
        }
        public Builder files(@Nullable Map<String,String> files) {
            this.files = Codegen.ofNullable(files);
            return this;
        }
        public Builder zip(@Nullable Output<ZipInfoArgs> zip) {
            this.zip = zip;
            return this;
        }
        public Builder zip(@Nullable ZipInfoArgs zip) {
            this.zip = Codegen.ofNullable(zip);
            return this;
        }        public DeploymentArgs build() {
            return new DeploymentArgs(cloudBuildOptions, container, files, zip);
        }
    }
}
