// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.VersionResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.VulnerabilityLocationResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 * 
 */
public final class DetailResponse extends com.pulumi.resources.InvokeArgs {

    public static final DetailResponse Empty = new DetailResponse();

    /**
     * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
     * 
     */
    @Import(name="cpeUri", required=true)
    private String cpeUri;

    public String cpeUri() {
        return this.cpeUri;
    }

    /**
     * A vendor-specific description of this note.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * The fix for this specific package version.
     * 
     */
    @Import(name="fixedLocation", required=true)
    private VulnerabilityLocationResponse fixedLocation;

    public VulnerabilityLocationResponse fixedLocation() {
        return this.fixedLocation;
    }

    /**
     * Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
     * 
     */
    @Import(name="isObsolete", required=true)
    private Boolean isObsolete;

    public Boolean isObsolete() {
        return this.isObsolete;
    }

    /**
     * The max version of the package in which the vulnerability exists.
     * 
     */
    @Import(name="maxAffectedVersion", required=true)
    private VersionResponse maxAffectedVersion;

    public VersionResponse maxAffectedVersion() {
        return this.maxAffectedVersion;
    }

    /**
     * The min version of the package in which the vulnerability exists.
     * 
     */
    @Import(name="minAffectedVersion", required=true)
    private VersionResponse minAffectedVersion;

    public VersionResponse minAffectedVersion() {
        return this.minAffectedVersion;
    }

    /**
     * The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
     * 
     */
    @Import(name="package", required=true)
    private String package_;

    public String package_() {
        return this.package_;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc)
     * 
     */
    @Import(name="packageType", required=true)
    private String packageType;

    public String packageType() {
        return this.packageType;
    }

    /**
     * The severity (eg: distro assigned severity) for this vulnerability.
     * 
     */
    @Import(name="severityName", required=true)
    private String severityName;

    public String severityName() {
        return this.severityName;
    }

    /**
     * The source from which the information in this Detail was obtained.
     * 
     */
    @Import(name="source", required=true)
    private String source;

    public String source() {
        return this.source;
    }

    /**
     * The vendor of the product. e.g. &#34;google&#34;
     * 
     */
    @Import(name="vendor", required=true)
    private String vendor;

    public String vendor() {
        return this.vendor;
    }

    private DetailResponse() {}

    private DetailResponse(DetailResponse $) {
        this.cpeUri = $.cpeUri;
        this.description = $.description;
        this.fixedLocation = $.fixedLocation;
        this.isObsolete = $.isObsolete;
        this.maxAffectedVersion = $.maxAffectedVersion;
        this.minAffectedVersion = $.minAffectedVersion;
        this.package_ = $.package_;
        this.packageType = $.packageType;
        this.severityName = $.severityName;
        this.source = $.source;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetailResponse $;

        public Builder() {
            $ = new DetailResponse();
        }

        public Builder(DetailResponse defaults) {
            $ = new DetailResponse(Objects.requireNonNull(defaults));
        }

        public Builder cpeUri(String cpeUri) {
            $.cpeUri = cpeUri;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder fixedLocation(VulnerabilityLocationResponse fixedLocation) {
            $.fixedLocation = fixedLocation;
            return this;
        }

        public Builder isObsolete(Boolean isObsolete) {
            $.isObsolete = isObsolete;
            return this;
        }

        public Builder maxAffectedVersion(VersionResponse maxAffectedVersion) {
            $.maxAffectedVersion = maxAffectedVersion;
            return this;
        }

        public Builder minAffectedVersion(VersionResponse minAffectedVersion) {
            $.minAffectedVersion = minAffectedVersion;
            return this;
        }

        public Builder package_(String package_) {
            $.package_ = package_;
            return this;
        }

        public Builder packageType(String packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder severityName(String severityName) {
            $.severityName = severityName;
            return this;
        }

        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public Builder vendor(String vendor) {
            $.vendor = vendor;
            return this;
        }

        public DetailResponse build() {
            $.cpeUri = Objects.requireNonNull($.cpeUri, "expected parameter 'cpeUri' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.fixedLocation = Objects.requireNonNull($.fixedLocation, "expected parameter 'fixedLocation' to be non-null");
            $.isObsolete = Objects.requireNonNull($.isObsolete, "expected parameter 'isObsolete' to be non-null");
            $.maxAffectedVersion = Objects.requireNonNull($.maxAffectedVersion, "expected parameter 'maxAffectedVersion' to be non-null");
            $.minAffectedVersion = Objects.requireNonNull($.minAffectedVersion, "expected parameter 'minAffectedVersion' to be non-null");
            $.package_ = Objects.requireNonNull($.package_, "expected parameter 'package' to be non-null");
            $.packageType = Objects.requireNonNull($.packageType, "expected parameter 'packageType' to be non-null");
            $.severityName = Objects.requireNonNull($.severityName, "expected parameter 'severityName' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.vendor = Objects.requireNonNull($.vendor, "expected parameter 'vendor' to be non-null");
            return $;
        }
    }

}
