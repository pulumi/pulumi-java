// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.pubsublite.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservationArgs Empty = new ReservationArgs();

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. The ID to use for the reservation, which will become the final component of the reservation&#39;s name. This value is structured like: `my-reservation-name`.
     * 
     */
    @Import(name="reservationId", required=true)
    private Output<String> reservationId;

    /**
     * @return Required. The ID to use for the reservation, which will become the final component of the reservation&#39;s name. This value is structured like: `my-reservation-name`.
     * 
     */
    public Output<String> reservationId() {
        return this.reservationId;
    }

    /**
     * The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
     * 
     */
    @Import(name="throughputCapacity")
    private @Nullable Output<String> throughputCapacity;

    /**
     * @return The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
     * 
     */
    public Optional<Output<String>> throughputCapacity() {
        return Optional.ofNullable(this.throughputCapacity);
    }

    private ReservationArgs() {}

    private ReservationArgs(ReservationArgs $) {
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.reservationId = $.reservationId;
        this.throughputCapacity = $.throughputCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservationArgs $;

        public Builder() {
            $ = new ReservationArgs();
        }

        public Builder(ReservationArgs defaults) {
            $ = new ReservationArgs(Objects.requireNonNull(defaults));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param reservationId Required. The ID to use for the reservation, which will become the final component of the reservation&#39;s name. This value is structured like: `my-reservation-name`.
         * 
         * @return builder
         * 
         */
        public Builder reservationId(Output<String> reservationId) {
            $.reservationId = reservationId;
            return this;
        }

        /**
         * @param reservationId Required. The ID to use for the reservation, which will become the final component of the reservation&#39;s name. This value is structured like: `my-reservation-name`.
         * 
         * @return builder
         * 
         */
        public Builder reservationId(String reservationId) {
            return reservationId(Output.of(reservationId));
        }

        /**
         * @param throughputCapacity The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
         * 
         * @return builder
         * 
         */
        public Builder throughputCapacity(@Nullable Output<String> throughputCapacity) {
            $.throughputCapacity = throughputCapacity;
            return this;
        }

        /**
         * @param throughputCapacity The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
         * 
         * @return builder
         * 
         */
        public Builder throughputCapacity(String throughputCapacity) {
            return throughputCapacity(Output.of(throughputCapacity));
        }

        public ReservationArgs build() {
            $.reservationId = Objects.requireNonNull($.reservationId, "expected parameter 'reservationId' to be non-null");
            return $;
        }
    }

}
