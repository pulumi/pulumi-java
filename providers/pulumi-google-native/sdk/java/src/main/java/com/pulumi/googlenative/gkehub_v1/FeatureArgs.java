// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkehub_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.gkehub_v1.inputs.CommonFeatureSpecArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureArgs Empty = new FeatureArgs();

    @Import(name="featureId")
    private @Nullable Output<String> featureId;

    public Optional<Output<String>> featureId() {
        return Optional.ofNullable(this.featureId);
    }

    /**
     * GCP labels for this Feature.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature&#39;s project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     * 
     */
    @Import(name="membershipSpecs")
    private @Nullable Output<Map<String,String>> membershipSpecs;

    public Optional<Output<Map<String,String>>> membershipSpecs() {
        return Optional.ofNullable(this.membershipSpecs);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
     * 
     */
    @Import(name="spec")
    private @Nullable Output<CommonFeatureSpecArgs> spec;

    public Optional<Output<CommonFeatureSpecArgs>> spec() {
        return Optional.ofNullable(this.spec);
    }

    private FeatureArgs() {}

    private FeatureArgs(FeatureArgs $) {
        this.featureId = $.featureId;
        this.labels = $.labels;
        this.location = $.location;
        this.membershipSpecs = $.membershipSpecs;
        this.project = $.project;
        this.requestId = $.requestId;
        this.spec = $.spec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureArgs $;

        public Builder() {
            $ = new FeatureArgs();
        }

        public Builder(FeatureArgs defaults) {
            $ = new FeatureArgs(Objects.requireNonNull(defaults));
        }

        public Builder featureId(@Nullable Output<String> featureId) {
            $.featureId = featureId;
            return this;
        }

        public Builder featureId(String featureId) {
            return featureId(Output.of(featureId));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder membershipSpecs(@Nullable Output<Map<String,String>> membershipSpecs) {
            $.membershipSpecs = membershipSpecs;
            return this;
        }

        public Builder membershipSpecs(Map<String,String> membershipSpecs) {
            return membershipSpecs(Output.of(membershipSpecs));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder spec(@Nullable Output<CommonFeatureSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        public Builder spec(CommonFeatureSpecArgs spec) {
            return spec(Output.of(spec));
        }

        public FeatureArgs build() {
            return $;
        }
    }

}
