// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.connectors.v1.outputs.AuthConfigResponse;
import com.pulumi.googlenative.connectors.v1.outputs.ConfigVariableResponse;
import com.pulumi.googlenative.connectors.v1.outputs.ConnectionStatusResponse;
import com.pulumi.googlenative.connectors.v1.outputs.LockConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionResult {
    /**
     * @return Optional. Configuration for establishing the connection&#39;s authentication with an external system.
     * 
     */
    private final AuthConfigResponse authConfig;
    /**
     * @return Optional. Configuration for configuring the connection with an external system.
     * 
     */
    private final List<ConfigVariableResponse> configVariables;
    /**
     * @return Connector version on which the connection is created. The format is: projects/*{@literal /}locations/global/providers/*{@literal /}connectors/*{@literal /}versions/*
     * 
     */
    private final String connectorVersion;
    /**
     * @return Created time.
     * 
     */
    private final String createTime;
    /**
     * @return Optional. Description of the resource.
     * 
     */
    private final String description;
    /**
     * @return Outbound domains/hosts needs to be allowlisted.
     * 
     */
    private final List<String> egressBackends;
    /**
     * @return GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     * 
     */
    private final String envoyImageLocation;
    /**
     * @return GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     * 
     */
    private final String imageLocation;
    /**
     * @return Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Optional. Configuration that indicates whether or not the Connection can be edited.
     * 
     */
    private final LockConfigResponse lockConfig;
    /**
     * @return Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
     * 
     */
    private final String name;
    /**
     * @return Optional. Service account needed for runtime plane to access GCP resources.
     * 
     */
    private final String serviceAccount;
    /**
     * @return The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. &#34;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors&#34;
     * 
     */
    private final String serviceDirectory;
    /**
     * @return Current status of the connection.
     * 
     */
    private final ConnectionStatusResponse status;
    /**
     * @return Optional. Suspended indicates if a user has suspended a connection or not.
     * 
     */
    private final Boolean suspended;
    /**
     * @return Updated time.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetConnectionResult(
        @CustomType.Parameter("authConfig") AuthConfigResponse authConfig,
        @CustomType.Parameter("configVariables") List<ConfigVariableResponse> configVariables,
        @CustomType.Parameter("connectorVersion") String connectorVersion,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("egressBackends") List<String> egressBackends,
        @CustomType.Parameter("envoyImageLocation") String envoyImageLocation,
        @CustomType.Parameter("imageLocation") String imageLocation,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("lockConfig") LockConfigResponse lockConfig,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("serviceAccount") String serviceAccount,
        @CustomType.Parameter("serviceDirectory") String serviceDirectory,
        @CustomType.Parameter("status") ConnectionStatusResponse status,
        @CustomType.Parameter("suspended") Boolean suspended,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.authConfig = authConfig;
        this.configVariables = configVariables;
        this.connectorVersion = connectorVersion;
        this.createTime = createTime;
        this.description = description;
        this.egressBackends = egressBackends;
        this.envoyImageLocation = envoyImageLocation;
        this.imageLocation = imageLocation;
        this.labels = labels;
        this.lockConfig = lockConfig;
        this.name = name;
        this.serviceAccount = serviceAccount;
        this.serviceDirectory = serviceDirectory;
        this.status = status;
        this.suspended = suspended;
        this.updateTime = updateTime;
    }

    /**
     * @return Optional. Configuration for establishing the connection&#39;s authentication with an external system.
     * 
     */
    public AuthConfigResponse authConfig() {
        return this.authConfig;
    }
    /**
     * @return Optional. Configuration for configuring the connection with an external system.
     * 
     */
    public List<ConfigVariableResponse> configVariables() {
        return this.configVariables;
    }
    /**
     * @return Connector version on which the connection is created. The format is: projects/*{@literal /}locations/global/providers/*{@literal /}connectors/*{@literal /}versions/*
     * 
     */
    public String connectorVersion() {
        return this.connectorVersion;
    }
    /**
     * @return Created time.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Outbound domains/hosts needs to be allowlisted.
     * 
     */
    public List<String> egressBackends() {
        return this.egressBackends;
    }
    /**
     * @return GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     * 
     */
    public String envoyImageLocation() {
        return this.envoyImageLocation;
    }
    /**
     * @return GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     * 
     */
    public String imageLocation() {
        return this.imageLocation;
    }
    /**
     * @return Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Optional. Configuration that indicates whether or not the Connection can be edited.
     * 
     */
    public LockConfigResponse lockConfig() {
        return this.lockConfig;
    }
    /**
     * @return Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. Service account needed for runtime plane to access GCP resources.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. &#34;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors&#34;
     * 
     */
    public String serviceDirectory() {
        return this.serviceDirectory;
    }
    /**
     * @return Current status of the connection.
     * 
     */
    public ConnectionStatusResponse status() {
        return this.status;
    }
    /**
     * @return Optional. Suspended indicates if a user has suspended a connection or not.
     * 
     */
    public Boolean suspended() {
        return this.suspended;
    }
    /**
     * @return Updated time.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigResponse authConfig;
        private List<ConfigVariableResponse> configVariables;
        private String connectorVersion;
        private String createTime;
        private String description;
        private List<String> egressBackends;
        private String envoyImageLocation;
        private String imageLocation;
        private Map<String,String> labels;
        private LockConfigResponse lockConfig;
        private String name;
        private String serviceAccount;
        private String serviceDirectory;
        private ConnectionStatusResponse status;
        private Boolean suspended;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authConfig = defaults.authConfig;
    	      this.configVariables = defaults.configVariables;
    	      this.connectorVersion = defaults.connectorVersion;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.egressBackends = defaults.egressBackends;
    	      this.envoyImageLocation = defaults.envoyImageLocation;
    	      this.imageLocation = defaults.imageLocation;
    	      this.labels = defaults.labels;
    	      this.lockConfig = defaults.lockConfig;
    	      this.name = defaults.name;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceDirectory = defaults.serviceDirectory;
    	      this.status = defaults.status;
    	      this.suspended = defaults.suspended;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder authConfig(AuthConfigResponse authConfig) {
            this.authConfig = Objects.requireNonNull(authConfig);
            return this;
        }
        public Builder configVariables(List<ConfigVariableResponse> configVariables) {
            this.configVariables = Objects.requireNonNull(configVariables);
            return this;
        }
        public Builder configVariables(ConfigVariableResponse... configVariables) {
            return configVariables(List.of(configVariables));
        }
        public Builder connectorVersion(String connectorVersion) {
            this.connectorVersion = Objects.requireNonNull(connectorVersion);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder egressBackends(List<String> egressBackends) {
            this.egressBackends = Objects.requireNonNull(egressBackends);
            return this;
        }
        public Builder egressBackends(String... egressBackends) {
            return egressBackends(List.of(egressBackends));
        }
        public Builder envoyImageLocation(String envoyImageLocation) {
            this.envoyImageLocation = Objects.requireNonNull(envoyImageLocation);
            return this;
        }
        public Builder imageLocation(String imageLocation) {
            this.imageLocation = Objects.requireNonNull(imageLocation);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder lockConfig(LockConfigResponse lockConfig) {
            this.lockConfig = Objects.requireNonNull(lockConfig);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        public Builder serviceDirectory(String serviceDirectory) {
            this.serviceDirectory = Objects.requireNonNull(serviceDirectory);
            return this;
        }
        public Builder status(ConnectionStatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder suspended(Boolean suspended) {
            this.suspended = Objects.requireNonNull(suspended);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetConnectionResult build() {
            return new GetConnectionResult(authConfig, configVariables, connectorVersion, createTime, description, egressBackends, envoyImageLocation, imageLocation, labels, lockConfig, name, serviceAccount, serviceDirectory, status, suspended, updateTime);
        }
    }
}
