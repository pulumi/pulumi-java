// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.managedidentities.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.managedidentities.v1alpha1.outputs.TrustResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDomainResult {
    /**
     * @return Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
     * 
     */
    private final Boolean auditLogsEnabled;
    /**
     * @return Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Network can be added using UpdateDomain later. Domain is only available on network part of authorized_networks. Caller needs to make sure that CIDR subnets do not overlap between networks, else domain creation will fail.
     * 
     */
    private final List<String> authorizedNetworks;
    /**
     * @return The time the instance was created. Synthetic field is populated automatically by CCFE. go/ccfe-synthetic-field-user-guide
     * 
     */
    private final String createTime;
    /**
     * @return Fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory that is set up on an internal network.
     * 
     */
    private final String fqdn;
    /**
     * @return Optional. Resource labels to represent user provided metadata
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
     * 
     */
    private final List<String> locations;
    /**
     * @return Optional. Name of customer-visible admin used to perform Active Directory operations. If not specified `setupadmin` would be used.
     * 
     */
    private final String managedIdentitiesAdminName;
    /**
     * @return Unique name of the domain in this scope including projects and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
     * 
     */
    private final String name;
    /**
     * @return The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
     * 
     */
    private final String reservedIpRange;
    /**
     * @return The current state of this domain.
     * 
     */
    private final String state;
    /**
     * @return Additional information about the current status of this domain, if available.
     * 
     */
    private final String statusMessage;
    /**
     * @return The current trusts associated with the domain.
     * 
     */
    private final List<TrustResponse> trusts;
    /**
     * @return Last update time. Synthetic field is populated automatically by CCFE.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetDomainResult(
        @CustomType.Parameter("auditLogsEnabled") Boolean auditLogsEnabled,
        @CustomType.Parameter("authorizedNetworks") List<String> authorizedNetworks,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("fqdn") String fqdn,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("locations") List<String> locations,
        @CustomType.Parameter("managedIdentitiesAdminName") String managedIdentitiesAdminName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("reservedIpRange") String reservedIpRange,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("statusMessage") String statusMessage,
        @CustomType.Parameter("trusts") List<TrustResponse> trusts,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.auditLogsEnabled = auditLogsEnabled;
        this.authorizedNetworks = authorizedNetworks;
        this.createTime = createTime;
        this.fqdn = fqdn;
        this.labels = labels;
        this.locations = locations;
        this.managedIdentitiesAdminName = managedIdentitiesAdminName;
        this.name = name;
        this.reservedIpRange = reservedIpRange;
        this.state = state;
        this.statusMessage = statusMessage;
        this.trusts = trusts;
        this.updateTime = updateTime;
    }

    /**
     * @return Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
     * 
     */
    public Boolean auditLogsEnabled() {
        return this.auditLogsEnabled;
    }
    /**
     * @return Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Network can be added using UpdateDomain later. Domain is only available on network part of authorized_networks. Caller needs to make sure that CIDR subnets do not overlap between networks, else domain creation will fail.
     * 
     */
    public List<String> authorizedNetworks() {
        return this.authorizedNetworks;
    }
    /**
     * @return The time the instance was created. Synthetic field is populated automatically by CCFE. go/ccfe-synthetic-field-user-guide
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory that is set up on an internal network.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return Optional. Resource labels to represent user provided metadata
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
     * 
     */
    public List<String> locations() {
        return this.locations;
    }
    /**
     * @return Optional. Name of customer-visible admin used to perform Active Directory operations. If not specified `setupadmin` would be used.
     * 
     */
    public String managedIdentitiesAdminName() {
        return this.managedIdentitiesAdminName;
    }
    /**
     * @return Unique name of the domain in this scope including projects and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
     * 
     */
    public String reservedIpRange() {
        return this.reservedIpRange;
    }
    /**
     * @return The current state of this domain.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Additional information about the current status of this domain, if available.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return The current trusts associated with the domain.
     * 
     */
    public List<TrustResponse> trusts() {
        return this.trusts;
    }
    /**
     * @return Last update time. Synthetic field is populated automatically by CCFE.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean auditLogsEnabled;
        private List<String> authorizedNetworks;
        private String createTime;
        private String fqdn;
        private Map<String,String> labels;
        private List<String> locations;
        private String managedIdentitiesAdminName;
        private String name;
        private String reservedIpRange;
        private String state;
        private String statusMessage;
        private List<TrustResponse> trusts;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditLogsEnabled = defaults.auditLogsEnabled;
    	      this.authorizedNetworks = defaults.authorizedNetworks;
    	      this.createTime = defaults.createTime;
    	      this.fqdn = defaults.fqdn;
    	      this.labels = defaults.labels;
    	      this.locations = defaults.locations;
    	      this.managedIdentitiesAdminName = defaults.managedIdentitiesAdminName;
    	      this.name = defaults.name;
    	      this.reservedIpRange = defaults.reservedIpRange;
    	      this.state = defaults.state;
    	      this.statusMessage = defaults.statusMessage;
    	      this.trusts = defaults.trusts;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder auditLogsEnabled(Boolean auditLogsEnabled) {
            this.auditLogsEnabled = Objects.requireNonNull(auditLogsEnabled);
            return this;
        }
        public Builder authorizedNetworks(List<String> authorizedNetworks) {
            this.authorizedNetworks = Objects.requireNonNull(authorizedNetworks);
            return this;
        }
        public Builder authorizedNetworks(String... authorizedNetworks) {
            return authorizedNetworks(List.of(authorizedNetworks));
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder fqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder locations(List<String> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder managedIdentitiesAdminName(String managedIdentitiesAdminName) {
            this.managedIdentitiesAdminName = Objects.requireNonNull(managedIdentitiesAdminName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder reservedIpRange(String reservedIpRange) {
            this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        public Builder trusts(List<TrustResponse> trusts) {
            this.trusts = Objects.requireNonNull(trusts);
            return this;
        }
        public Builder trusts(TrustResponse... trusts) {
            return trusts(List.of(trusts));
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetDomainResult build() {
            return new GetDomainResult(auditLogsEnabled, authorizedNetworks, createTime, fqdn, labels, locations, managedIdentitiesAdminName, name, reservedIpRange, state, statusMessage, trusts, updateTime);
        }
    }
}
