// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery.v2.inputs.TableFieldSchemaCategoriesArgs;
import com.pulumi.googlenative.bigquery.v2.inputs.TableFieldSchemaPolicyTagsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableFieldSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableFieldSchemaArgs Empty = new TableFieldSchemaArgs();

    /**
     * [Optional] The categories attached to this field, used for field-level access control.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<TableFieldSchemaCategoriesArgs> categories;

    /**
     * @return [Optional] The categories attached to this field, used for field-level access control.
     * 
     */
    public Optional<Output<TableFieldSchemaCategoriesArgs>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * Optional. Collation specification of the field. It only can be set on string type field.
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    /**
     * @return Optional. Collation specification of the field. It only can be set on string type field.
     * 
     */
    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE &#39;2020-01-01&#39;]
     * 
     */
    @Import(name="defaultValueExpression")
    private @Nullable Output<String> defaultValueExpression;

    /**
     * @return Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE &#39;2020-01-01&#39;]
     * 
     */
    public Optional<Output<String>> defaultValueExpression() {
        return Optional.ofNullable(this.defaultValueExpression);
    }

    /**
     * [Optional] The field description. The maximum length is 1,024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [Optional] The field description. The maximum length is 1,024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [Optional] Describes the nested schema fields if the type property is set to RECORD.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<TableFieldSchemaArgs>> fields;

    /**
     * @return [Optional] Describes the nested schema fields if the type property is set to RECORD.
     * 
     */
    public Optional<Output<List<TableFieldSchemaArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = &#34;STRING&#34;, then max_length represents the maximum UTF-8 length of strings in this field. If type = &#34;BYTES&#34;, then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ &#34;STRING&#34; and ≠ &#34;BYTES&#34;.
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<String> maxLength;

    /**
     * @return [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = &#34;STRING&#34;, then max_length represents the maximum UTF-8 length of strings in this field. If type = &#34;BYTES&#34;, then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ &#34;STRING&#34; and ≠ &#34;BYTES&#34;.
     * 
     */
    public Optional<Output<String>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="policyTags")
    private @Nullable Output<TableFieldSchemaPolicyTagsArgs> policyTags;

    public Optional<Output<TableFieldSchemaPolicyTagsArgs>> policyTags() {
        return Optional.ofNullable(this.policyTags);
    }

    /**
     * [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ &#34;NUMERIC&#34; and ≠ &#34;BIGNUMERIC&#34;. If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = &#34;NUMERIC&#34;: 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = &#34;NUMERIC&#34;: 1 ≤ precision ≤ 29. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<String> precision;

    /**
     * @return [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ &#34;NUMERIC&#34; and ≠ &#34;BIGNUMERIC&#34;. If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = &#34;NUMERIC&#34;: 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = &#34;NUMERIC&#34;: 1 ≤ precision ≤ 29. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
     * 
     */
    public Optional<Output<String>> precision() {
        return Optional.ofNullable(this.precision);
    }

    /**
     * [Optional] See documentation for precision.
     * 
     */
    @Import(name="scale")
    private @Nullable Output<String> scale;

    /**
     * @return [Optional] See documentation for precision.
     * 
     */
    public Optional<Output<String>> scale() {
        return Optional.ofNullable(this.scale);
    }

    /**
     * [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TableFieldSchemaArgs() {}

    private TableFieldSchemaArgs(TableFieldSchemaArgs $) {
        this.categories = $.categories;
        this.collation = $.collation;
        this.defaultValueExpression = $.defaultValueExpression;
        this.description = $.description;
        this.fields = $.fields;
        this.maxLength = $.maxLength;
        this.mode = $.mode;
        this.name = $.name;
        this.policyTags = $.policyTags;
        this.precision = $.precision;
        this.scale = $.scale;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableFieldSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableFieldSchemaArgs $;

        public Builder() {
            $ = new TableFieldSchemaArgs();
        }

        public Builder(TableFieldSchemaArgs defaults) {
            $ = new TableFieldSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categories [Optional] The categories attached to this field, used for field-level access control.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<TableFieldSchemaCategoriesArgs> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories [Optional] The categories attached to this field, used for field-level access control.
         * 
         * @return builder
         * 
         */
        public Builder categories(TableFieldSchemaCategoriesArgs categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param collation Optional. Collation specification of the field. It only can be set on string type field.
         * 
         * @return builder
         * 
         */
        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        /**
         * @param collation Optional. Collation specification of the field. It only can be set on string type field.
         * 
         * @return builder
         * 
         */
        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        /**
         * @param defaultValueExpression Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE &#39;2020-01-01&#39;]
         * 
         * @return builder
         * 
         */
        public Builder defaultValueExpression(@Nullable Output<String> defaultValueExpression) {
            $.defaultValueExpression = defaultValueExpression;
            return this;
        }

        /**
         * @param defaultValueExpression Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE &#39;2020-01-01&#39;]
         * 
         * @return builder
         * 
         */
        public Builder defaultValueExpression(String defaultValueExpression) {
            return defaultValueExpression(Output.of(defaultValueExpression));
        }

        /**
         * @param description [Optional] The field description. The maximum length is 1,024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [Optional] The field description. The maximum length is 1,024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fields [Optional] Describes the nested schema fields if the type property is set to RECORD.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<TableFieldSchemaArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields [Optional] Describes the nested schema fields if the type property is set to RECORD.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<TableFieldSchemaArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields [Optional] Describes the nested schema fields if the type property is set to RECORD.
         * 
         * @return builder
         * 
         */
        public Builder fields(TableFieldSchemaArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param maxLength [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = &#34;STRING&#34;, then max_length represents the maximum UTF-8 length of strings in this field. If type = &#34;BYTES&#34;, then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ &#34;STRING&#34; and ≠ &#34;BYTES&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<String> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = &#34;STRING&#34;, then max_length represents the maximum UTF-8 length of strings in this field. If type = &#34;BYTES&#34;, then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ &#34;STRING&#34; and ≠ &#34;BYTES&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxLength(String maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param mode [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policyTags(@Nullable Output<TableFieldSchemaPolicyTagsArgs> policyTags) {
            $.policyTags = policyTags;
            return this;
        }

        public Builder policyTags(TableFieldSchemaPolicyTagsArgs policyTags) {
            return policyTags(Output.of(policyTags));
        }

        /**
         * @param precision [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ &#34;NUMERIC&#34; and ≠ &#34;BIGNUMERIC&#34;. If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = &#34;NUMERIC&#34;: 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = &#34;NUMERIC&#34;: 1 ≤ precision ≤ 29. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
         * 
         * @return builder
         * 
         */
        public Builder precision(@Nullable Output<String> precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param precision [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ &#34;NUMERIC&#34; and ≠ &#34;BIGNUMERIC&#34;. If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = &#34;NUMERIC&#34;: 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = &#34;NUMERIC&#34;: 1 ≤ precision ≤ 29. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
         * 
         * @return builder
         * 
         */
        public Builder precision(String precision) {
            return precision(Output.of(precision));
        }

        /**
         * @param scale [Optional] See documentation for precision.
         * 
         * @return builder
         * 
         */
        public Builder scale(@Nullable Output<String> scale) {
            $.scale = scale;
            return this;
        }

        /**
         * @param scale [Optional] See documentation for precision.
         * 
         * @return builder
         * 
         */
        public Builder scale(String scale) {
            return scale(Output.of(scale));
        }

        /**
         * @param type [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableFieldSchemaArgs build() {
            return $;
        }
    }

}
