// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.VersionArgs;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.VulnerabilityLocationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 * 
 */
public final class DetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetailArgs Empty = new DetailArgs();

    /**
     * The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
     * 
     */
    @Import(name="cpeUri", required=true)
    private Output<String> cpeUri;

    public Output<String> cpeUri() {
        return this.cpeUri;
    }

    /**
     * A vendor-specific description of this note.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The fix for this specific package version.
     * 
     */
    @Import(name="fixedLocation")
    private @Nullable Output<VulnerabilityLocationArgs> fixedLocation;

    public Optional<Output<VulnerabilityLocationArgs>> fixedLocation() {
        return Optional.ofNullable(this.fixedLocation);
    }

    /**
     * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
     * 
     */
    @Import(name="isObsolete")
    private @Nullable Output<Boolean> isObsolete;

    public Optional<Output<Boolean>> isObsolete() {
        return Optional.ofNullable(this.isObsolete);
    }

    /**
     * The max version of the package in which the vulnerability exists.
     * 
     */
    @Import(name="maxAffectedVersion")
    private @Nullable Output<VersionArgs> maxAffectedVersion;

    public Optional<Output<VersionArgs>> maxAffectedVersion() {
        return Optional.ofNullable(this.maxAffectedVersion);
    }

    /**
     * The min version of the package in which the vulnerability exists.
     * 
     */
    @Import(name="minAffectedVersion")
    private @Nullable Output<VersionArgs> minAffectedVersion;

    public Optional<Output<VersionArgs>> minAffectedVersion() {
        return Optional.ofNullable(this.minAffectedVersion);
    }

    /**
     * The name of the package where the vulnerability was found.
     * 
     */
    @Import(name="package", required=true)
    private Output<String> package_;

    public Output<String> package_() {
        return this.package_;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc).
     * 
     */
    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * The severity (eg: distro assigned severity) for this vulnerability.
     * 
     */
    @Import(name="severityName")
    private @Nullable Output<String> severityName;

    public Optional<Output<String>> severityName() {
        return Optional.ofNullable(this.severityName);
    }

    /**
     * The source from which the information in this Detail was obtained.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     * 
     */
    @Import(name="sourceUpdateTime")
    private @Nullable Output<String> sourceUpdateTime;

    public Optional<Output<String>> sourceUpdateTime() {
        return Optional.ofNullable(this.sourceUpdateTime);
    }

    /**
     * The name of the vendor of the product.
     * 
     */
    @Import(name="vendor")
    private @Nullable Output<String> vendor;

    public Optional<Output<String>> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    private DetailArgs() {}

    private DetailArgs(DetailArgs $) {
        this.cpeUri = $.cpeUri;
        this.description = $.description;
        this.fixedLocation = $.fixedLocation;
        this.isObsolete = $.isObsolete;
        this.maxAffectedVersion = $.maxAffectedVersion;
        this.minAffectedVersion = $.minAffectedVersion;
        this.package_ = $.package_;
        this.packageType = $.packageType;
        this.severityName = $.severityName;
        this.source = $.source;
        this.sourceUpdateTime = $.sourceUpdateTime;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetailArgs $;

        public Builder() {
            $ = new DetailArgs();
        }

        public Builder(DetailArgs defaults) {
            $ = new DetailArgs(Objects.requireNonNull(defaults));
        }

        public Builder cpeUri(Output<String> cpeUri) {
            $.cpeUri = cpeUri;
            return this;
        }

        public Builder cpeUri(String cpeUri) {
            return cpeUri(Output.of(cpeUri));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fixedLocation(@Nullable Output<VulnerabilityLocationArgs> fixedLocation) {
            $.fixedLocation = fixedLocation;
            return this;
        }

        public Builder fixedLocation(VulnerabilityLocationArgs fixedLocation) {
            return fixedLocation(Output.of(fixedLocation));
        }

        public Builder isObsolete(@Nullable Output<Boolean> isObsolete) {
            $.isObsolete = isObsolete;
            return this;
        }

        public Builder isObsolete(Boolean isObsolete) {
            return isObsolete(Output.of(isObsolete));
        }

        public Builder maxAffectedVersion(@Nullable Output<VersionArgs> maxAffectedVersion) {
            $.maxAffectedVersion = maxAffectedVersion;
            return this;
        }

        public Builder maxAffectedVersion(VersionArgs maxAffectedVersion) {
            return maxAffectedVersion(Output.of(maxAffectedVersion));
        }

        public Builder minAffectedVersion(@Nullable Output<VersionArgs> minAffectedVersion) {
            $.minAffectedVersion = minAffectedVersion;
            return this;
        }

        public Builder minAffectedVersion(VersionArgs minAffectedVersion) {
            return minAffectedVersion(Output.of(minAffectedVersion));
        }

        public Builder package_(Output<String> package_) {
            $.package_ = package_;
            return this;
        }

        public Builder package_(String package_) {
            return package_(Output.of(package_));
        }

        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        public Builder severityName(@Nullable Output<String> severityName) {
            $.severityName = severityName;
            return this;
        }

        public Builder severityName(String severityName) {
            return severityName(Output.of(severityName));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder sourceUpdateTime(@Nullable Output<String> sourceUpdateTime) {
            $.sourceUpdateTime = sourceUpdateTime;
            return this;
        }

        public Builder sourceUpdateTime(String sourceUpdateTime) {
            return sourceUpdateTime(Output.of(sourceUpdateTime));
        }

        public Builder vendor(@Nullable Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public DetailArgs build() {
            $.cpeUri = Objects.requireNonNull($.cpeUri, "expected parameter 'cpeUri' to be non-null");
            $.package_ = Objects.requireNonNull($.package_, "expected parameter 'package' to be non-null");
            return $;
        }
    }

}
