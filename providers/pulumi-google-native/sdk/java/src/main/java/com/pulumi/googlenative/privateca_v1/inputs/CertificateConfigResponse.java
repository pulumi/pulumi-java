// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1.inputs.PublicKeyResponse;
import com.pulumi.googlenative.privateca_v1.inputs.SubjectConfigResponse;
import com.pulumi.googlenative.privateca_v1.inputs.X509ParametersResponse;
import java.util.Objects;


/**
 * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
 * 
 */
public final class CertificateConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateConfigResponse Empty = new CertificateConfigResponse();

    /**
     * Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
     * 
     */
    @Import(name="publicKey", required=true)
    private PublicKeyResponse publicKey;

    /**
     * @return Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
     * 
     */
    public PublicKeyResponse publicKey() {
        return this.publicKey;
    }

    /**
     * Specifies some of the values in a certificate that are related to the subject.
     * 
     */
    @Import(name="subjectConfig", required=true)
    private SubjectConfigResponse subjectConfig;

    /**
     * @return Specifies some of the values in a certificate that are related to the subject.
     * 
     */
    public SubjectConfigResponse subjectConfig() {
        return this.subjectConfig;
    }

    /**
     * Describes how some of the technical X.509 fields in a certificate should be populated.
     * 
     */
    @Import(name="x509Config", required=true)
    private X509ParametersResponse x509Config;

    /**
     * @return Describes how some of the technical X.509 fields in a certificate should be populated.
     * 
     */
    public X509ParametersResponse x509Config() {
        return this.x509Config;
    }

    private CertificateConfigResponse() {}

    private CertificateConfigResponse(CertificateConfigResponse $) {
        this.publicKey = $.publicKey;
        this.subjectConfig = $.subjectConfig;
        this.x509Config = $.x509Config;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateConfigResponse $;

        public Builder() {
            $ = new CertificateConfigResponse();
        }

        public Builder(CertificateConfigResponse defaults) {
            $ = new CertificateConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param publicKey Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(PublicKeyResponse publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param subjectConfig Specifies some of the values in a certificate that are related to the subject.
         * 
         * @return builder
         * 
         */
        public Builder subjectConfig(SubjectConfigResponse subjectConfig) {
            $.subjectConfig = subjectConfig;
            return this;
        }

        /**
         * @param x509Config Describes how some of the technical X.509 fields in a certificate should be populated.
         * 
         * @return builder
         * 
         */
        public Builder x509Config(X509ParametersResponse x509Config) {
            $.x509Config = x509Config;
            return this;
        }

        public CertificateConfigResponse build() {
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            $.subjectConfig = Objects.requireNonNull($.subjectConfig, "expected parameter 'subjectConfig' to be non-null");
            $.x509Config = Objects.requireNonNull($.x509Config, "expected parameter 'x509Config' to be non-null");
            return $;
        }
    }

}
