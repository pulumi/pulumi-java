// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * [Output only] Represents status related to the future reservation.
 * 
 */
public final class FutureReservationStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final FutureReservationStatusResponse Empty = new FutureReservationStatusResponse();

    /**
     * Fully qualified urls of the automatically created reservations at start_time.
     * 
     */
    @Import(name="autoCreatedReservations", required=true)
    private List<String> autoCreatedReservations;

    /**
     * @return Fully qualified urls of the automatically created reservations at start_time.
     * 
     */
    public List<String> autoCreatedReservations() {
        return this.autoCreatedReservations;
    }

    /**
     * This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
     * 
     */
    @Import(name="fulfilledCount", required=true)
    private String fulfilledCount;

    /**
     * @return This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
     * 
     */
    public String fulfilledCount() {
        return this.fulfilledCount;
    }

    /**
     * Time when Future Reservation would become LOCKED, after which no modifications to Future Reservation will be allowed. Applicable only after the Future Reservation is in the APPROVED state. The lock_time is an RFC3339 string. The procurement_status will transition to PROCURING state at this time.
     * 
     */
    @Import(name="lockTime", required=true)
    private String lockTime;

    /**
     * @return Time when Future Reservation would become LOCKED, after which no modifications to Future Reservation will be allowed. Applicable only after the Future Reservation is in the APPROVED state. The lock_time is an RFC3339 string. The procurement_status will transition to PROCURING state at this time.
     * 
     */
    public String lockTime() {
        return this.lockTime;
    }

    /**
     * Current state of this Future Reservation
     * 
     */
    @Import(name="procurementStatus", required=true)
    private String procurementStatus;

    /**
     * @return Current state of this Future Reservation
     * 
     */
    public String procurementStatus() {
        return this.procurementStatus;
    }

    private FutureReservationStatusResponse() {}

    private FutureReservationStatusResponse(FutureReservationStatusResponse $) {
        this.autoCreatedReservations = $.autoCreatedReservations;
        this.fulfilledCount = $.fulfilledCount;
        this.lockTime = $.lockTime;
        this.procurementStatus = $.procurementStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FutureReservationStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FutureReservationStatusResponse $;

        public Builder() {
            $ = new FutureReservationStatusResponse();
        }

        public Builder(FutureReservationStatusResponse defaults) {
            $ = new FutureReservationStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoCreatedReservations Fully qualified urls of the automatically created reservations at start_time.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservations(List<String> autoCreatedReservations) {
            $.autoCreatedReservations = autoCreatedReservations;
            return this;
        }

        /**
         * @param autoCreatedReservations Fully qualified urls of the automatically created reservations at start_time.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservations(String... autoCreatedReservations) {
            return autoCreatedReservations(List.of(autoCreatedReservations));
        }

        /**
         * @param fulfilledCount This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
         * 
         * @return builder
         * 
         */
        public Builder fulfilledCount(String fulfilledCount) {
            $.fulfilledCount = fulfilledCount;
            return this;
        }

        /**
         * @param lockTime Time when Future Reservation would become LOCKED, after which no modifications to Future Reservation will be allowed. Applicable only after the Future Reservation is in the APPROVED state. The lock_time is an RFC3339 string. The procurement_status will transition to PROCURING state at this time.
         * 
         * @return builder
         * 
         */
        public Builder lockTime(String lockTime) {
            $.lockTime = lockTime;
            return this;
        }

        /**
         * @param procurementStatus Current state of this Future Reservation
         * 
         * @return builder
         * 
         */
        public Builder procurementStatus(String procurementStatus) {
            $.procurementStatus = procurementStatus;
            return this;
        }

        public FutureReservationStatusResponse build() {
            $.autoCreatedReservations = Objects.requireNonNull($.autoCreatedReservations, "expected parameter 'autoCreatedReservations' to be non-null");
            $.fulfilledCount = Objects.requireNonNull($.fulfilledCount, "expected parameter 'fulfilledCount' to be non-null");
            $.lockTime = Objects.requireNonNull($.lockTime, "expected parameter 'lockTime' to be non-null");
            $.procurementStatus = Objects.requireNonNull($.procurementStatus, "expected parameter 'procurementStatus' to be non-null");
            return $;
        }
    }

}
