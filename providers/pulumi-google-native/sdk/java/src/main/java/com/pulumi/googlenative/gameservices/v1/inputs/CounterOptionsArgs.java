// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.gameservices.v1.inputs.CustomFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Increment a streamz counter with the specified metric and field names. Metric names should start with a &#39;/&#39;, generally be lowercase-only, and end in &#34;_count&#34;. Field names should not contain an initial slash. The actual exported metric names will have &#34;/iam/policy&#34; prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - &#34;authority&#34;, which is &#34;[token]&#34; if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - &#34;iam_principal&#34;, a representation of IAMContext.principal even if a token or authority selector is present; or - &#34;&#34; (empty string), resulting in a counter with no fields. Examples: counter { metric: &#34;/debug_access_count&#34; field: &#34;iam_principal&#34; } ==&gt; increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
 * 
 */
public final class CounterOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CounterOptionsArgs Empty = new CounterOptionsArgs();

    /**
     * Custom fields.
     * 
     */
    @Import(name="customFields")
    private @Nullable Output<List<CustomFieldArgs>> customFields;

    /**
     * @return Custom fields.
     * 
     */
    public Optional<Output<List<CustomFieldArgs>>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * The field value to attribute.
     * 
     */
    @Import(name="field")
    private @Nullable Output<String> field;

    /**
     * @return The field value to attribute.
     * 
     */
    public Optional<Output<String>> field() {
        return Optional.ofNullable(this.field);
    }

    /**
     * The metric to update.
     * 
     */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The metric to update.
     * 
     */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    private CounterOptionsArgs() {}

    private CounterOptionsArgs(CounterOptionsArgs $) {
        this.customFields = $.customFields;
        this.field = $.field;
        this.metric = $.metric;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CounterOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CounterOptionsArgs $;

        public Builder() {
            $ = new CounterOptionsArgs();
        }

        public Builder(CounterOptionsArgs defaults) {
            $ = new CounterOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customFields Custom fields.
         * 
         * @return builder
         * 
         */
        public Builder customFields(@Nullable Output<List<CustomFieldArgs>> customFields) {
            $.customFields = customFields;
            return this;
        }

        /**
         * @param customFields Custom fields.
         * 
         * @return builder
         * 
         */
        public Builder customFields(List<CustomFieldArgs> customFields) {
            return customFields(Output.of(customFields));
        }

        /**
         * @param customFields Custom fields.
         * 
         * @return builder
         * 
         */
        public Builder customFields(CustomFieldArgs... customFields) {
            return customFields(List.of(customFields));
        }

        /**
         * @param field The field value to attribute.
         * 
         * @return builder
         * 
         */
        public Builder field(@Nullable Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field The field value to attribute.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param metric The metric to update.
         * 
         * @return builder
         * 
         */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The metric to update.
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        public CounterOptionsArgs build() {
            return $;
        }
    }

}
