// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2CharsToIgnoreResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we&#39;ll attempt to preserve the original data&#39;s type. (This allows you to take a long like 123 and modify it to a string like **3.
 * 
 */
public final class GooglePrivacyDlpV2CharacterMaskConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2CharacterMaskConfigResponse Empty = new GooglePrivacyDlpV2CharacterMaskConfigResponse();

    /**
     * When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
     * 
     */
    @Import(name="charactersToIgnore", required=true)
    private List<GooglePrivacyDlpV2CharsToIgnoreResponse> charactersToIgnore;

    /**
     * @return When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
     * 
     */
    public List<GooglePrivacyDlpV2CharsToIgnoreResponse> charactersToIgnore() {
        return this.charactersToIgnore;
    }

    /**
     * Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
     * 
     */
    @Import(name="maskingCharacter", required=true)
    private String maskingCharacter;

    /**
     * @return Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
     * 
     */
    public String maskingCharacter() {
        return this.maskingCharacter;
    }

    /**
     * Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.
     * 
     */
    @Import(name="numberToMask", required=true)
    private Integer numberToMask;

    /**
     * @return Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.
     * 
     */
    public Integer numberToMask() {
        return this.numberToMask;
    }

    /**
     * Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
     * 
     */
    @Import(name="reverseOrder", required=true)
    private Boolean reverseOrder;

    /**
     * @return Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
     * 
     */
    public Boolean reverseOrder() {
        return this.reverseOrder;
    }

    private GooglePrivacyDlpV2CharacterMaskConfigResponse() {}

    private GooglePrivacyDlpV2CharacterMaskConfigResponse(GooglePrivacyDlpV2CharacterMaskConfigResponse $) {
        this.charactersToIgnore = $.charactersToIgnore;
        this.maskingCharacter = $.maskingCharacter;
        this.numberToMask = $.numberToMask;
        this.reverseOrder = $.reverseOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CharacterMaskConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CharacterMaskConfigResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CharacterMaskConfigResponse();
        }

        public Builder(GooglePrivacyDlpV2CharacterMaskConfigResponse defaults) {
            $ = new GooglePrivacyDlpV2CharacterMaskConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param charactersToIgnore When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnore(List<GooglePrivacyDlpV2CharsToIgnoreResponse> charactersToIgnore) {
            $.charactersToIgnore = charactersToIgnore;
            return this;
        }

        /**
         * @param charactersToIgnore When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnore(GooglePrivacyDlpV2CharsToIgnoreResponse... charactersToIgnore) {
            return charactersToIgnore(List.of(charactersToIgnore));
        }

        /**
         * @param maskingCharacter Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(String maskingCharacter) {
            $.maskingCharacter = maskingCharacter;
            return this;
        }

        /**
         * @param numberToMask Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.
         * 
         * @return builder
         * 
         */
        public Builder numberToMask(Integer numberToMask) {
            $.numberToMask = numberToMask;
            return this;
        }

        /**
         * @param reverseOrder Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
         * 
         * @return builder
         * 
         */
        public Builder reverseOrder(Boolean reverseOrder) {
            $.reverseOrder = reverseOrder;
            return this;
        }

        public GooglePrivacyDlpV2CharacterMaskConfigResponse build() {
            $.charactersToIgnore = Objects.requireNonNull($.charactersToIgnore, "expected parameter 'charactersToIgnore' to be non-null");
            $.maskingCharacter = Objects.requireNonNull($.maskingCharacter, "expected parameter 'maskingCharacter' to be non-null");
            $.numberToMask = Objects.requireNonNull($.numberToMask, "expected parameter 'numberToMask' to be non-null");
            $.reverseOrder = Objects.requireNonNull($.reverseOrder, "expected parameter 'reverseOrder' to be non-null");
            return $;
        }
    }

}
