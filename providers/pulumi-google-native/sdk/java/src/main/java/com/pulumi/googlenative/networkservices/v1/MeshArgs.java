// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MeshArgs extends com.pulumi.resources.ResourceArgs {

    public static final MeshArgs Empty = new MeshArgs();

    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port &#39;15001&#39; is used as the interception port. This will is applicable only for sidecar proxy deployments.
     * 
     */
    @Import(name="interceptionPort")
    private @Nullable Output<Integer> interceptionPort;

    /**
     * @return Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port &#39;15001&#39; is used as the interception port. This will is applicable only for sidecar proxy deployments.
     * 
     */
    public Optional<Output<Integer>> interceptionPort() {
        return Optional.ofNullable(this.interceptionPort);
    }

    /**
     * Optional. Set of label tags associated with the Mesh resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Set of label tags associated with the Mesh resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Required. Short name of the Mesh resource to be created.
     * 
     */
    @Import(name="meshId", required=true)
    private Output<String> meshId;

    /**
     * @return Required. Short name of the Mesh resource to be created.
     * 
     */
    public Output<String> meshId() {
        return this.meshId;
    }

    /**
     * Name of the Mesh resource. It matches pattern `projects/*{@literal /}locations/global/meshes/`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Mesh resource. It matches pattern `projects/*{@literal /}locations/global/meshes/`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private MeshArgs() {}

    private MeshArgs(MeshArgs $) {
        this.description = $.description;
        this.interceptionPort = $.interceptionPort;
        this.labels = $.labels;
        this.location = $.location;
        this.meshId = $.meshId;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MeshArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MeshArgs $;

        public Builder() {
            $ = new MeshArgs();
        }

        public Builder(MeshArgs defaults) {
            $ = new MeshArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param interceptionPort Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port &#39;15001&#39; is used as the interception port. This will is applicable only for sidecar proxy deployments.
         * 
         * @return builder
         * 
         */
        public Builder interceptionPort(@Nullable Output<Integer> interceptionPort) {
            $.interceptionPort = interceptionPort;
            return this;
        }

        /**
         * @param interceptionPort Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port &#39;15001&#39; is used as the interception port. This will is applicable only for sidecar proxy deployments.
         * 
         * @return builder
         * 
         */
        public Builder interceptionPort(Integer interceptionPort) {
            return interceptionPort(Output.of(interceptionPort));
        }

        /**
         * @param labels Optional. Set of label tags associated with the Mesh resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Set of label tags associated with the Mesh resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param meshId Required. Short name of the Mesh resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder meshId(Output<String> meshId) {
            $.meshId = meshId;
            return this;
        }

        /**
         * @param meshId Required. Short name of the Mesh resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder meshId(String meshId) {
            return meshId(Output.of(meshId));
        }

        /**
         * @param name Name of the Mesh resource. It matches pattern `projects/*{@literal /}locations/global/meshes/`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Mesh resource. It matches pattern `projects/*{@literal /}locations/global/meshes/`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public MeshArgs build() {
            $.meshId = Objects.requireNonNull($.meshId, "expected parameter 'meshId' to be non-null");
            return $;
        }
    }

}
