// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2ContainerResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2VolumeResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2VpcAccessResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GoogleCloudRunV2TaskTemplateResponse {
    /**
     * @return Holds the single container that defines the unit of execution for this task.
     * 
     */
    private final List<GoogleCloudRunV2ContainerResponse> containers;
    /**
     * @return A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     * 
     */
    private final String encryptionKey;
    /**
     * @return The execution environment being used to host this Task.
     * 
     */
    private final String executionEnvironment;
    /**
     * @return Number of retries allowed per Task, before marking this Task failed.
     * 
     */
    private final Integer maxRetries;
    /**
     * @return Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project&#39;s default service account.
     * 
     */
    private final String serviceAccount;
    /**
     * @return Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
     * 
     */
    private final String timeout;
    /**
     * @return A list of Volumes to make available to containers.
     * 
     */
    private final List<GoogleCloudRunV2VolumeResponse> volumes;
    /**
     * @return VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     * 
     */
    private final GoogleCloudRunV2VpcAccessResponse vpcAccess;

    @CustomType.Constructor
    private GoogleCloudRunV2TaskTemplateResponse(
        @CustomType.Parameter("containers") List<GoogleCloudRunV2ContainerResponse> containers,
        @CustomType.Parameter("encryptionKey") String encryptionKey,
        @CustomType.Parameter("executionEnvironment") String executionEnvironment,
        @CustomType.Parameter("maxRetries") Integer maxRetries,
        @CustomType.Parameter("serviceAccount") String serviceAccount,
        @CustomType.Parameter("timeout") String timeout,
        @CustomType.Parameter("volumes") List<GoogleCloudRunV2VolumeResponse> volumes,
        @CustomType.Parameter("vpcAccess") GoogleCloudRunV2VpcAccessResponse vpcAccess) {
        this.containers = containers;
        this.encryptionKey = encryptionKey;
        this.executionEnvironment = executionEnvironment;
        this.maxRetries = maxRetries;
        this.serviceAccount = serviceAccount;
        this.timeout = timeout;
        this.volumes = volumes;
        this.vpcAccess = vpcAccess;
    }

    /**
     * @return Holds the single container that defines the unit of execution for this task.
     * 
     */
    public List<GoogleCloudRunV2ContainerResponse> containers() {
        return this.containers;
    }
    /**
     * @return A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     * 
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return The execution environment being used to host this Task.
     * 
     */
    public String executionEnvironment() {
        return this.executionEnvironment;
    }
    /**
     * @return Number of retries allowed per Task, before marking this Task failed.
     * 
     */
    public Integer maxRetries() {
        return this.maxRetries;
    }
    /**
     * @return Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project&#39;s default service account.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
     * 
     */
    public String timeout() {
        return this.timeout;
    }
    /**
     * @return A list of Volumes to make available to containers.
     * 
     */
    public List<GoogleCloudRunV2VolumeResponse> volumes() {
        return this.volumes;
    }
    /**
     * @return VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     * 
     */
    public GoogleCloudRunV2VpcAccessResponse vpcAccess() {
        return this.vpcAccess;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRunV2TaskTemplateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GoogleCloudRunV2ContainerResponse> containers;
        private String encryptionKey;
        private String executionEnvironment;
        private Integer maxRetries;
        private String serviceAccount;
        private String timeout;
        private List<GoogleCloudRunV2VolumeResponse> volumes;
        private GoogleCloudRunV2VpcAccessResponse vpcAccess;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRunV2TaskTemplateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containers = defaults.containers;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.executionEnvironment = defaults.executionEnvironment;
    	      this.maxRetries = defaults.maxRetries;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.timeout = defaults.timeout;
    	      this.volumes = defaults.volumes;
    	      this.vpcAccess = defaults.vpcAccess;
        }

        public Builder containers(List<GoogleCloudRunV2ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }
        public Builder containers(GoogleCloudRunV2ContainerResponse... containers) {
            return containers(List.of(containers));
        }
        public Builder encryptionKey(String encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        public Builder executionEnvironment(String executionEnvironment) {
            this.executionEnvironment = Objects.requireNonNull(executionEnvironment);
            return this;
        }
        public Builder maxRetries(Integer maxRetries) {
            this.maxRetries = Objects.requireNonNull(maxRetries);
            return this;
        }
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public Builder volumes(List<GoogleCloudRunV2VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(GoogleCloudRunV2VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }
        public Builder vpcAccess(GoogleCloudRunV2VpcAccessResponse vpcAccess) {
            this.vpcAccess = Objects.requireNonNull(vpcAccess);
            return this;
        }        public GoogleCloudRunV2TaskTemplateResponse build() {
            return new GoogleCloudRunV2TaskTemplateResponse(containers, encryptionKey, executionEnvironment, maxRetries, serviceAccount, timeout, volumes, vpcAccess);
        }
    }
}
