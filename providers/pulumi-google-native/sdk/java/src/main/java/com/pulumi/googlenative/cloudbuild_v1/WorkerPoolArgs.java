// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PrivatePoolV1ConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkerPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerPoolArgs Empty = new WorkerPoolArgs();

    /**
     * User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<Map<String,String>> annotations;

    public Output<Map<String,String>> annotations() {
        return this.annotations == null ? Codegen.empty() : this.annotations;
    }

    /**
     * A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Legacy Private Pool configuration.
     * 
     */
    @Import(name="privatePoolV1Config")
      private final @Nullable Output<PrivatePoolV1ConfigArgs> privatePoolV1Config;

    public Output<PrivatePoolV1ConfigArgs> privatePoolV1Config() {
        return this.privatePoolV1Config == null ? Codegen.empty() : this.privatePoolV1Config;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="validateOnly")
      private final @Nullable Output<String> validateOnly;

    public Output<String> validateOnly() {
        return this.validateOnly == null ? Codegen.empty() : this.validateOnly;
    }

    @Import(name="workerPoolId", required=true)
      private final Output<String> workerPoolId;

    public Output<String> workerPoolId() {
        return this.workerPoolId;
    }

    public WorkerPoolArgs(
        @Nullable Output<Map<String,String>> annotations,
        @Nullable Output<String> displayName,
        @Nullable Output<String> location,
        @Nullable Output<PrivatePoolV1ConfigArgs> privatePoolV1Config,
        @Nullable Output<String> project,
        @Nullable Output<String> validateOnly,
        Output<String> workerPoolId) {
        this.annotations = annotations;
        this.displayName = displayName;
        this.location = location;
        this.privatePoolV1Config = privatePoolV1Config;
        this.project = project;
        this.validateOnly = validateOnly;
        this.workerPoolId = Objects.requireNonNull(workerPoolId, "expected parameter 'workerPoolId' to be non-null");
    }

    private WorkerPoolArgs() {
        this.annotations = Codegen.empty();
        this.displayName = Codegen.empty();
        this.location = Codegen.empty();
        this.privatePoolV1Config = Codegen.empty();
        this.project = Codegen.empty();
        this.validateOnly = Codegen.empty();
        this.workerPoolId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkerPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> annotations;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> location;
        private @Nullable Output<PrivatePoolV1ConfigArgs> privatePoolV1Config;
        private @Nullable Output<String> project;
        private @Nullable Output<String> validateOnly;
        private Output<String> workerPoolId;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkerPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.displayName = defaults.displayName;
    	      this.location = defaults.location;
    	      this.privatePoolV1Config = defaults.privatePoolV1Config;
    	      this.project = defaults.project;
    	      this.validateOnly = defaults.validateOnly;
    	      this.workerPoolId = defaults.workerPoolId;
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(@Nullable Map<String,String> annotations) {
            this.annotations = Codegen.ofNullable(annotations);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder privatePoolV1Config(@Nullable Output<PrivatePoolV1ConfigArgs> privatePoolV1Config) {
            this.privatePoolV1Config = privatePoolV1Config;
            return this;
        }
        public Builder privatePoolV1Config(@Nullable PrivatePoolV1ConfigArgs privatePoolV1Config) {
            this.privatePoolV1Config = Codegen.ofNullable(privatePoolV1Config);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            this.validateOnly = validateOnly;
            return this;
        }
        public Builder validateOnly(@Nullable String validateOnly) {
            this.validateOnly = Codegen.ofNullable(validateOnly);
            return this;
        }
        public Builder workerPoolId(Output<String> workerPoolId) {
            this.workerPoolId = Objects.requireNonNull(workerPoolId);
            return this;
        }
        public Builder workerPoolId(String workerPoolId) {
            this.workerPoolId = Output.of(Objects.requireNonNull(workerPoolId));
            return this;
        }        public WorkerPoolArgs build() {
            return new WorkerPoolArgs(annotations, displayName, location, privatePoolV1Config, project, validateOnly, workerPoolId);
        }
    }
}
