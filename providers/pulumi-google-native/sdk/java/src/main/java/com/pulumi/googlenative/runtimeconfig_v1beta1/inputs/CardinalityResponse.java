// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.runtimeconfig_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A Cardinality condition for the Waiter resource. A cardinality condition is met when the number of variables under a specified path prefix reaches a predefined number. For example, if you set a Cardinality condition where the `path` is set to `/foo` and the number of paths is set to `2`, the following variables would meet the condition in a RuntimeConfig resource: + `/foo/variable1 = &#34;value1&#34;` + `/foo/variable2 = &#34;value2&#34;` + `/bar/variable3 = &#34;value3&#34;` It would not satisfy the same condition with the `number` set to `3`, however, because there is only 2 paths that start with `/foo`. Cardinality conditions are recursive; all subtrees under the specific path prefix are counted.
 * 
 */
public final class CardinalityResponse extends com.pulumi.resources.InvokeArgs {

    public static final CardinalityResponse Empty = new CardinalityResponse();

    /**
     * The number variables under the `path` that must exist to meet this condition. Defaults to 1 if not specified.
     * 
     */
    @Import(name="number", required=true)
    private Integer number;

    /**
     * @return The number variables under the `path` that must exist to meet this condition. Defaults to 1 if not specified.
     * 
     */
    public Integer number() {
        return this.number;
    }

    /**
     * The root of the variable subtree to monitor. For example, `/foo`.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return The root of the variable subtree to monitor. For example, `/foo`.
     * 
     */
    public String path() {
        return this.path;
    }

    private CardinalityResponse() {}

    private CardinalityResponse(CardinalityResponse $) {
        this.number = $.number;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CardinalityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CardinalityResponse $;

        public Builder() {
            $ = new CardinalityResponse();
        }

        public Builder(CardinalityResponse defaults) {
            $ = new CardinalityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param number The number variables under the `path` that must exist to meet this condition. Defaults to 1 if not specified.
         * 
         * @return builder
         * 
         */
        public Builder number(Integer number) {
            $.number = number;
            return this;
        }

        /**
         * @param path The root of the variable subtree to monitor. For example, `/foo`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public CardinalityResponse build() {
            $.number = Objects.requireNonNull($.number, "expected parameter 'number' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
