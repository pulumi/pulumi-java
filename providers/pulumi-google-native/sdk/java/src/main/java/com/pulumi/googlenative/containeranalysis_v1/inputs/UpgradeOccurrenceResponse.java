// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.UpgradeDistributionResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.VersionResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.WindowsUpdateResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
 * 
 */
public final class UpgradeOccurrenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final UpgradeOccurrenceResponse Empty = new UpgradeOccurrenceResponse();

    /**
     * Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     * 
     */
    @Import(name="distribution", required=true)
    private UpgradeDistributionResponse distribution;

    /**
     * @return Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     * 
     */
    public UpgradeDistributionResponse distribution() {
        return this.distribution;
    }

    /**
     * Required for non-Windows OS. The package this Upgrade is for.
     * 
     */
    @Import(name="package", required=true)
    private String package_;

    /**
     * @return Required for non-Windows OS. The package this Upgrade is for.
     * 
     */
    public String package_() {
        return this.package_;
    }

    /**
     * Required for non-Windows OS. The version of the package in a machine + human readable form.
     * 
     */
    @Import(name="parsedVersion", required=true)
    private VersionResponse parsedVersion;

    /**
     * @return Required for non-Windows OS. The version of the package in a machine + human readable form.
     * 
     */
    public VersionResponse parsedVersion() {
        return this.parsedVersion;
    }

    /**
     * Required for Windows OS. Represents the metadata about the Windows update.
     * 
     */
    @Import(name="windowsUpdate", required=true)
    private WindowsUpdateResponse windowsUpdate;

    /**
     * @return Required for Windows OS. Represents the metadata about the Windows update.
     * 
     */
    public WindowsUpdateResponse windowsUpdate() {
        return this.windowsUpdate;
    }

    private UpgradeOccurrenceResponse() {}

    private UpgradeOccurrenceResponse(UpgradeOccurrenceResponse $) {
        this.distribution = $.distribution;
        this.package_ = $.package_;
        this.parsedVersion = $.parsedVersion;
        this.windowsUpdate = $.windowsUpdate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpgradeOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpgradeOccurrenceResponse $;

        public Builder() {
            $ = new UpgradeOccurrenceResponse();
        }

        public Builder(UpgradeOccurrenceResponse defaults) {
            $ = new UpgradeOccurrenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param distribution Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
         * 
         * @return builder
         * 
         */
        public Builder distribution(UpgradeDistributionResponse distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param package_ Required for non-Windows OS. The package this Upgrade is for.
         * 
         * @return builder
         * 
         */
        public Builder package_(String package_) {
            $.package_ = package_;
            return this;
        }

        /**
         * @param parsedVersion Required for non-Windows OS. The version of the package in a machine + human readable form.
         * 
         * @return builder
         * 
         */
        public Builder parsedVersion(VersionResponse parsedVersion) {
            $.parsedVersion = parsedVersion;
            return this;
        }

        /**
         * @param windowsUpdate Required for Windows OS. Represents the metadata about the Windows update.
         * 
         * @return builder
         * 
         */
        public Builder windowsUpdate(WindowsUpdateResponse windowsUpdate) {
            $.windowsUpdate = windowsUpdate;
            return this;
        }

        public UpgradeOccurrenceResponse build() {
            $.distribution = Objects.requireNonNull($.distribution, "expected parameter 'distribution' to be non-null");
            $.package_ = Objects.requireNonNull($.package_, "expected parameter 'package' to be non-null");
            $.parsedVersion = Objects.requireNonNull($.parsedVersion, "expected parameter 'parsedVersion' to be non-null");
            $.windowsUpdate = Objects.requireNonNull($.windowsUpdate, "expected parameter 'windowsUpdate' to be non-null");
            return $;
        }
    }

}
