// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.sqladmin.v1.UserArgs;
import com.pulumi.googlenative.sqladmin.v1.outputs.SqlServerUserDetailsResponse;
import com.pulumi.googlenative.sqladmin.v1.outputs.UserPasswordValidationPolicyResponse;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Creates a new user in a Cloud SQL instance.
 * 
 */
@ResourceType(type="google-native:sqladmin/v1:User")
public class User extends com.pulumi.resources.CustomResource {
    /**
     * Dual password status for the user.
     * 
     */
    @Export(name="dualPasswordType", type=String.class, parameters={})
    private Output<String> dualPasswordType;

    /**
     * @return Dual password status for the user.
     * 
     */
    public Output<String> dualPasswordType() {
        return this.dualPasswordType;
    }
    /**
     * This field is deprecated and will be removed from a future version of the API.
     * 
     * @deprecated
     * This field is deprecated and will be removed from a future version of the API.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return This field is deprecated and will be removed from a future version of the API.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
     * 
     */
    @Export(name="host", type=String.class, parameters={})
    private Output<String> host;

    /**
     * @return Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
     * 
     */
    public Output<String> host() {
        return this.host;
    }
    @Export(name="instance", type=String.class, parameters={})
    private Output<String> instance;

    public Output<String> instance() {
        return this.instance;
    }
    /**
     * This is always `sql#user`.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return This is always `sql#user`.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The password for the user.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output<String> password;

    /**
     * @return The password for the user.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * User level password validation policy.
     * 
     */
    @Export(name="passwordPolicy", type=UserPasswordValidationPolicyResponse.class, parameters={})
    private Output<UserPasswordValidationPolicyResponse> passwordPolicy;

    /**
     * @return User level password validation policy.
     * 
     */
    public Output<UserPasswordValidationPolicyResponse> passwordPolicy() {
        return this.passwordPolicy;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    @Export(name="sqlserverUserDetails", type=SqlServerUserDetailsResponse.class, parameters={})
    private Output<SqlServerUserDetailsResponse> sqlserverUserDetails;

    public Output<SqlServerUserDetailsResponse> sqlserverUserDetails() {
        return this.sqlserverUserDetails;
    }
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public User(String name) {
        this(name, UserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public User(String name, UserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public User(String name, UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:sqladmin/v1:User", name, args == null ? UserArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private User(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:sqladmin/v1:User", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static User get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new User(name, id, options);
    }
}
