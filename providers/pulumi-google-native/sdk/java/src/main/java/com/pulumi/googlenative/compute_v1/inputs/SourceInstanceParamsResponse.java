// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.inputs.DiskInstantiationConfigResponse;
import java.util.List;
import java.util.Objects;


/**
 * A specification of the parameters to use when creating the instance template from a source instance.
 * 
 */
public final class SourceInstanceParamsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceInstanceParamsResponse Empty = new SourceInstanceParamsResponse();

    /**
     * Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
     * 
     */
    @Import(name="diskConfigs", required=true)
    private List<DiskInstantiationConfigResponse> diskConfigs;

    public List<DiskInstantiationConfigResponse> diskConfigs() {
        return this.diskConfigs;
    }

    private SourceInstanceParamsResponse() {}

    private SourceInstanceParamsResponse(SourceInstanceParamsResponse $) {
        this.diskConfigs = $.diskConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceInstanceParamsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceInstanceParamsResponse $;

        public Builder() {
            $ = new SourceInstanceParamsResponse();
        }

        public Builder(SourceInstanceParamsResponse defaults) {
            $ = new SourceInstanceParamsResponse(Objects.requireNonNull(defaults));
        }

        public Builder diskConfigs(List<DiskInstantiationConfigResponse> diskConfigs) {
            $.diskConfigs = diskConfigs;
            return this;
        }

        public Builder diskConfigs(DiskInstantiationConfigResponse... diskConfigs) {
            return diskConfigs(List.of(diskConfigs));
        }

        public SourceInstanceParamsResponse build() {
            $.diskConfigs = Objects.requireNonNull($.diskConfigs, "expected parameter 'diskConfigs' to be non-null");
            return $;
        }
    }

}
