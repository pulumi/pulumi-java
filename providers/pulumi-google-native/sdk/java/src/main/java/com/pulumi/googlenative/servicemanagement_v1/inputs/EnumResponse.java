// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.EnumValueResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.OptionResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SourceContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Enum type definition.
 * 
 */
public final class EnumResponse extends com.pulumi.resources.InvokeArgs {

    public static final EnumResponse Empty = new EnumResponse();

    /**
     * Enum value definitions.
     * 
     */
    @Import(name="enumvalue", required=true)
    private List<EnumValueResponse> enumvalue;

    public List<EnumValueResponse> enumvalue() {
        return this.enumvalue;
    }

    /**
     * Enum type name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Protocol buffer options.
     * 
     */
    @Import(name="options", required=true)
    private List<OptionResponse> options;

    public List<OptionResponse> options() {
        return this.options;
    }

    /**
     * The source context.
     * 
     */
    @Import(name="sourceContext", required=true)
    private SourceContextResponse sourceContext;

    public SourceContextResponse sourceContext() {
        return this.sourceContext;
    }

    /**
     * The source syntax.
     * 
     */
    @Import(name="syntax", required=true)
    private String syntax;

    public String syntax() {
        return this.syntax;
    }

    private EnumResponse() {}

    private EnumResponse(EnumResponse $) {
        this.enumvalue = $.enumvalue;
        this.name = $.name;
        this.options = $.options;
        this.sourceContext = $.sourceContext;
        this.syntax = $.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnumResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnumResponse $;

        public Builder() {
            $ = new EnumResponse();
        }

        public Builder(EnumResponse defaults) {
            $ = new EnumResponse(Objects.requireNonNull(defaults));
        }

        public Builder enumvalue(List<EnumValueResponse> enumvalue) {
            $.enumvalue = enumvalue;
            return this;
        }

        public Builder enumvalue(EnumValueResponse... enumvalue) {
            return enumvalue(List.of(enumvalue));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder options(List<OptionResponse> options) {
            $.options = options;
            return this;
        }

        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }

        public Builder sourceContext(SourceContextResponse sourceContext) {
            $.sourceContext = sourceContext;
            return this;
        }

        public Builder syntax(String syntax) {
            $.syntax = syntax;
            return this;
        }

        public EnumResponse build() {
            $.enumvalue = Objects.requireNonNull($.enumvalue, "expected parameter 'enumvalue' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.sourceContext = Objects.requireNonNull($.sourceContext, "expected parameter 'sourceContext' to be non-null");
            $.syntax = Objects.requireNonNull($.syntax, "expected parameter 'syntax' to be non-null");
            return $;
        }
    }

}
