// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.notebooks.v1.outputs.ContainerImageResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class RuntimeSoftwareConfigResponse {
    /**
     * @return Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we&#39;ll automatically choose from official GPU drivers.
     * 
     */
    private final String customGpuDriverPath;
    /**
     * @return Verifies core internal services are running. Default: True
     * 
     */
    private final Boolean enableHealthMonitoring;
    /**
     * @return Runtime will automatically shutdown after idle_shutdown_time. Default: True
     * 
     */
    private final Boolean idleShutdown;
    /**
     * @return Time in minutes to wait before shutting down runtime. Default: 180 minutes
     * 
     */
    private final Integer idleShutdownTimeout;
    /**
     * @return Install Nvidia Driver automatically. Default: True
     * 
     */
    private final Boolean installGpuDriver;
    /**
     * @return Optional. Use a list of container images to use as Kernels in the notebook instance.
     * 
     */
    private final List<ContainerImageResponse> kernels;
    /**
     * @return Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     */
    private final String notebookUpgradeSchedule;
    /**
     * @return Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
     */
    private final String postStartupScript;
    /**
     * @return Behavior for the post startup script.
     * 
     */
    private final String postStartupScriptBehavior;
    /**
     * @return Bool indicating whether an newer image is available in an image family.
     * 
     */
    private final Boolean upgradeable;

    @CustomType.Constructor
    private RuntimeSoftwareConfigResponse(
        @CustomType.Parameter("customGpuDriverPath") String customGpuDriverPath,
        @CustomType.Parameter("enableHealthMonitoring") Boolean enableHealthMonitoring,
        @CustomType.Parameter("idleShutdown") Boolean idleShutdown,
        @CustomType.Parameter("idleShutdownTimeout") Integer idleShutdownTimeout,
        @CustomType.Parameter("installGpuDriver") Boolean installGpuDriver,
        @CustomType.Parameter("kernels") List<ContainerImageResponse> kernels,
        @CustomType.Parameter("notebookUpgradeSchedule") String notebookUpgradeSchedule,
        @CustomType.Parameter("postStartupScript") String postStartupScript,
        @CustomType.Parameter("postStartupScriptBehavior") String postStartupScriptBehavior,
        @CustomType.Parameter("upgradeable") Boolean upgradeable) {
        this.customGpuDriverPath = customGpuDriverPath;
        this.enableHealthMonitoring = enableHealthMonitoring;
        this.idleShutdown = idleShutdown;
        this.idleShutdownTimeout = idleShutdownTimeout;
        this.installGpuDriver = installGpuDriver;
        this.kernels = kernels;
        this.notebookUpgradeSchedule = notebookUpgradeSchedule;
        this.postStartupScript = postStartupScript;
        this.postStartupScriptBehavior = postStartupScriptBehavior;
        this.upgradeable = upgradeable;
    }

    /**
     * @return Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we&#39;ll automatically choose from official GPU drivers.
     * 
     */
    public String customGpuDriverPath() {
        return this.customGpuDriverPath;
    }
    /**
     * @return Verifies core internal services are running. Default: True
     * 
     */
    public Boolean enableHealthMonitoring() {
        return this.enableHealthMonitoring;
    }
    /**
     * @return Runtime will automatically shutdown after idle_shutdown_time. Default: True
     * 
     */
    public Boolean idleShutdown() {
        return this.idleShutdown;
    }
    /**
     * @return Time in minutes to wait before shutting down runtime. Default: 180 minutes
     * 
     */
    public Integer idleShutdownTimeout() {
        return this.idleShutdownTimeout;
    }
    /**
     * @return Install Nvidia Driver automatically. Default: True
     * 
     */
    public Boolean installGpuDriver() {
        return this.installGpuDriver;
    }
    /**
     * @return Optional. Use a list of container images to use as Kernels in the notebook instance.
     * 
     */
    public List<ContainerImageResponse> kernels() {
        return this.kernels;
    }
    /**
     * @return Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     */
    public String notebookUpgradeSchedule() {
        return this.notebookUpgradeSchedule;
    }
    /**
     * @return Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
     */
    public String postStartupScript() {
        return this.postStartupScript;
    }
    /**
     * @return Behavior for the post startup script.
     * 
     */
    public String postStartupScriptBehavior() {
        return this.postStartupScriptBehavior;
    }
    /**
     * @return Bool indicating whether an newer image is available in an image family.
     * 
     */
    public Boolean upgradeable() {
        return this.upgradeable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuntimeSoftwareConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String customGpuDriverPath;
        private Boolean enableHealthMonitoring;
        private Boolean idleShutdown;
        private Integer idleShutdownTimeout;
        private Boolean installGpuDriver;
        private List<ContainerImageResponse> kernels;
        private String notebookUpgradeSchedule;
        private String postStartupScript;
        private String postStartupScriptBehavior;
        private Boolean upgradeable;

        public Builder() {
    	      // Empty
        }

        public Builder(RuntimeSoftwareConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customGpuDriverPath = defaults.customGpuDriverPath;
    	      this.enableHealthMonitoring = defaults.enableHealthMonitoring;
    	      this.idleShutdown = defaults.idleShutdown;
    	      this.idleShutdownTimeout = defaults.idleShutdownTimeout;
    	      this.installGpuDriver = defaults.installGpuDriver;
    	      this.kernels = defaults.kernels;
    	      this.notebookUpgradeSchedule = defaults.notebookUpgradeSchedule;
    	      this.postStartupScript = defaults.postStartupScript;
    	      this.postStartupScriptBehavior = defaults.postStartupScriptBehavior;
    	      this.upgradeable = defaults.upgradeable;
        }

        public Builder customGpuDriverPath(String customGpuDriverPath) {
            this.customGpuDriverPath = Objects.requireNonNull(customGpuDriverPath);
            return this;
        }
        public Builder enableHealthMonitoring(Boolean enableHealthMonitoring) {
            this.enableHealthMonitoring = Objects.requireNonNull(enableHealthMonitoring);
            return this;
        }
        public Builder idleShutdown(Boolean idleShutdown) {
            this.idleShutdown = Objects.requireNonNull(idleShutdown);
            return this;
        }
        public Builder idleShutdownTimeout(Integer idleShutdownTimeout) {
            this.idleShutdownTimeout = Objects.requireNonNull(idleShutdownTimeout);
            return this;
        }
        public Builder installGpuDriver(Boolean installGpuDriver) {
            this.installGpuDriver = Objects.requireNonNull(installGpuDriver);
            return this;
        }
        public Builder kernels(List<ContainerImageResponse> kernels) {
            this.kernels = Objects.requireNonNull(kernels);
            return this;
        }
        public Builder kernels(ContainerImageResponse... kernels) {
            return kernels(List.of(kernels));
        }
        public Builder notebookUpgradeSchedule(String notebookUpgradeSchedule) {
            this.notebookUpgradeSchedule = Objects.requireNonNull(notebookUpgradeSchedule);
            return this;
        }
        public Builder postStartupScript(String postStartupScript) {
            this.postStartupScript = Objects.requireNonNull(postStartupScript);
            return this;
        }
        public Builder postStartupScriptBehavior(String postStartupScriptBehavior) {
            this.postStartupScriptBehavior = Objects.requireNonNull(postStartupScriptBehavior);
            return this;
        }
        public Builder upgradeable(Boolean upgradeable) {
            this.upgradeable = Objects.requireNonNull(upgradeable);
            return this;
        }        public RuntimeSoftwareConfigResponse build() {
            return new RuntimeSoftwareConfigResponse(customGpuDriverPath, enableHealthMonitoring, idleShutdown, idleShutdownTimeout, installGpuDriver, kernels, notebookUpgradeSchedule, postStartupScript, postStartupScriptBehavior, upgradeable);
        }
    }
}
