// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Source or destination of the Connectivity Test.
 * 
 */
public final class EndpointResponse extends com.pulumi.resources.InvokeArgs {

    public static final EndpointResponse Empty = new EndpointResponse();

    /**
     * A [Cloud SQL](https://cloud.google.com/sql) instance URI.
     * 
     */
    @Import(name="cloudSqlInstance", required=true)
    private String cloudSqlInstance;

    public String cloudSqlInstance() {
        return this.cloudSqlInstance;
    }

    /**
     * A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
     * 
     */
    @Import(name="gkeMasterCluster", required=true)
    private String gkeMasterCluster;

    public String gkeMasterCluster() {
        return this.gkeMasterCluster;
    }

    /**
     * A Compute Engine instance URI.
     * 
     */
    @Import(name="instance", required=true)
    private String instance;

    public String instance() {
        return this.instance;
    }

    /**
     * The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test&#39;s destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
     * 
     */
    @Import(name="ipAddress", required=true)
    private String ipAddress;

    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * A Compute Engine network URI.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
     * 
     */
    @Import(name="networkType", required=true)
    private String networkType;

    public String networkType() {
        return this.networkType;
    }

    /**
     * The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    public String project() {
        return this.project;
    }

    private EndpointResponse() {}

    private EndpointResponse(EndpointResponse $) {
        this.cloudSqlInstance = $.cloudSqlInstance;
        this.gkeMasterCluster = $.gkeMasterCluster;
        this.instance = $.instance;
        this.ipAddress = $.ipAddress;
        this.network = $.network;
        this.networkType = $.networkType;
        this.port = $.port;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointResponse $;

        public Builder() {
            $ = new EndpointResponse();
        }

        public Builder(EndpointResponse defaults) {
            $ = new EndpointResponse(Objects.requireNonNull(defaults));
        }

        public Builder cloudSqlInstance(String cloudSqlInstance) {
            $.cloudSqlInstance = cloudSqlInstance;
            return this;
        }

        public Builder gkeMasterCluster(String gkeMasterCluster) {
            $.gkeMasterCluster = gkeMasterCluster;
            return this;
        }

        public Builder instance(String instance) {
            $.instance = instance;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder networkType(String networkType) {
            $.networkType = networkType;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder project(String project) {
            $.project = project;
            return this;
        }

        public EndpointResponse build() {
            $.cloudSqlInstance = Objects.requireNonNull($.cloudSqlInstance, "expected parameter 'cloudSqlInstance' to be non-null");
            $.gkeMasterCluster = Objects.requireNonNull($.gkeMasterCluster, "expected parameter 'gkeMasterCluster' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.networkType = Objects.requireNonNull($.networkType, "expected parameter 'networkType' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
