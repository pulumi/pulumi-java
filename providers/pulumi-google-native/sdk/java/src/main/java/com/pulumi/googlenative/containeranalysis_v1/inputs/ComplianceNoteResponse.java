// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.CisBenchmarkResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.ComplianceVersionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ComplianceNoteResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComplianceNoteResponse Empty = new ComplianceNoteResponse();

    @Import(name="cisBenchmark", required=true)
    private CisBenchmarkResponse cisBenchmark;

    public CisBenchmarkResponse cisBenchmark() {
        return this.cisBenchmark;
    }

    /**
     * A description about this compliance check.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * A rationale for the existence of this compliance check.
     * 
     */
    @Import(name="rationale", required=true)
    private String rationale;

    public String rationale() {
        return this.rationale;
    }

    /**
     * A description of remediation steps if the compliance check fails.
     * 
     */
    @Import(name="remediation", required=true)
    private String remediation;

    public String remediation() {
        return this.remediation;
    }

    /**
     * Serialized scan instructions with a predefined format.
     * 
     */
    @Import(name="scanInstructions", required=true)
    private String scanInstructions;

    public String scanInstructions() {
        return this.scanInstructions;
    }

    /**
     * The title that identifies this compliance check.
     * 
     */
    @Import(name="title", required=true)
    private String title;

    public String title() {
        return this.title;
    }

    /**
     * The OS and config versions the benchmark applies to.
     * 
     */
    @Import(name="version", required=true)
    private List<ComplianceVersionResponse> version;

    public List<ComplianceVersionResponse> version() {
        return this.version;
    }

    private ComplianceNoteResponse() {}

    private ComplianceNoteResponse(ComplianceNoteResponse $) {
        this.cisBenchmark = $.cisBenchmark;
        this.description = $.description;
        this.rationale = $.rationale;
        this.remediation = $.remediation;
        this.scanInstructions = $.scanInstructions;
        this.title = $.title;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComplianceNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComplianceNoteResponse $;

        public Builder() {
            $ = new ComplianceNoteResponse();
        }

        public Builder(ComplianceNoteResponse defaults) {
            $ = new ComplianceNoteResponse(Objects.requireNonNull(defaults));
        }

        public Builder cisBenchmark(CisBenchmarkResponse cisBenchmark) {
            $.cisBenchmark = cisBenchmark;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder rationale(String rationale) {
            $.rationale = rationale;
            return this;
        }

        public Builder remediation(String remediation) {
            $.remediation = remediation;
            return this;
        }

        public Builder scanInstructions(String scanInstructions) {
            $.scanInstructions = scanInstructions;
            return this;
        }

        public Builder title(String title) {
            $.title = title;
            return this;
        }

        public Builder version(List<ComplianceVersionResponse> version) {
            $.version = version;
            return this;
        }

        public Builder version(ComplianceVersionResponse... version) {
            return version(List.of(version));
        }

        public ComplianceNoteResponse build() {
            $.cisBenchmark = Objects.requireNonNull($.cisBenchmark, "expected parameter 'cisBenchmark' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.rationale = Objects.requireNonNull($.rationale, "expected parameter 'rationale' to be non-null");
            $.remediation = Objects.requireNonNull($.remediation, "expected parameter 'remediation' to be non-null");
            $.scanInstructions = Objects.requireNonNull($.scanInstructions, "expected parameter 'scanInstructions' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
