// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudidentity.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudidentity.v1.inputs.EntityKeyArgs;
import com.pulumi.googlenative.cloudidentity.v1.inputs.MembershipRoleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final MembershipArgs Empty = new MembershipArgs();

    @Import(name="groupId", required=true)
    private Output<String> groupId;

    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * Immutable. The `EntityKey` of the member.
     * 
     */
    @Import(name="preferredMemberKey", required=true)
    private Output<EntityKeyArgs> preferredMemberKey;

    /**
     * @return Immutable. The `EntityKey` of the member.
     * 
     */
    public Output<EntityKeyArgs> preferredMemberKey() {
        return this.preferredMemberKey;
    }

    /**
     * The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<MembershipRoleArgs>> roles;

    /**
     * @return The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.
     * 
     */
    public Optional<Output<List<MembershipRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    private MembershipArgs() {}

    private MembershipArgs(MembershipArgs $) {
        this.groupId = $.groupId;
        this.preferredMemberKey = $.preferredMemberKey;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MembershipArgs $;

        public Builder() {
            $ = new MembershipArgs();
        }

        public Builder(MembershipArgs defaults) {
            $ = new MembershipArgs(Objects.requireNonNull(defaults));
        }

        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param preferredMemberKey Immutable. The `EntityKey` of the member.
         * 
         * @return builder
         * 
         */
        public Builder preferredMemberKey(Output<EntityKeyArgs> preferredMemberKey) {
            $.preferredMemberKey = preferredMemberKey;
            return this;
        }

        /**
         * @param preferredMemberKey Immutable. The `EntityKey` of the member.
         * 
         * @return builder
         * 
         */
        public Builder preferredMemberKey(EntityKeyArgs preferredMemberKey) {
            return preferredMemberKey(Output.of(preferredMemberKey));
        }

        /**
         * @param roles The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<MembershipRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<MembershipRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.
         * 
         * @return builder
         * 
         */
        public Builder roles(MembershipRoleArgs... roles) {
            return roles(List.of(roles));
        }

        public MembershipArgs build() {
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            $.preferredMemberKey = Objects.requireNonNull($.preferredMemberKey, "expected parameter 'preferredMemberKey' to be non-null");
            return $;
        }
    }

}
