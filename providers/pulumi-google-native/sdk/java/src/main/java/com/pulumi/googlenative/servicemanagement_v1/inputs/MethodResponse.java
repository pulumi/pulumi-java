// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.OptionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Method represents a method of an API interface.
 * 
 */
public final class MethodResponse extends com.pulumi.resources.InvokeArgs {

    public static final MethodResponse Empty = new MethodResponse();

    /**
     * The simple name of this method.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The simple name of this method.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Any metadata attached to the method.
     * 
     */
    @Import(name="options", required=true)
    private List<OptionResponse> options;

    /**
     * @return Any metadata attached to the method.
     * 
     */
    public List<OptionResponse> options() {
        return this.options;
    }

    /**
     * If true, the request is streamed.
     * 
     */
    @Import(name="requestStreaming", required=true)
    private Boolean requestStreaming;

    /**
     * @return If true, the request is streamed.
     * 
     */
    public Boolean requestStreaming() {
        return this.requestStreaming;
    }

    /**
     * A URL of the input message type.
     * 
     */
    @Import(name="requestTypeUrl", required=true)
    private String requestTypeUrl;

    /**
     * @return A URL of the input message type.
     * 
     */
    public String requestTypeUrl() {
        return this.requestTypeUrl;
    }

    /**
     * If true, the response is streamed.
     * 
     */
    @Import(name="responseStreaming", required=true)
    private Boolean responseStreaming;

    /**
     * @return If true, the response is streamed.
     * 
     */
    public Boolean responseStreaming() {
        return this.responseStreaming;
    }

    /**
     * The URL of the output message type.
     * 
     */
    @Import(name="responseTypeUrl", required=true)
    private String responseTypeUrl;

    /**
     * @return The URL of the output message type.
     * 
     */
    public String responseTypeUrl() {
        return this.responseTypeUrl;
    }

    /**
     * The source syntax of this method.
     * 
     */
    @Import(name="syntax", required=true)
    private String syntax;

    /**
     * @return The source syntax of this method.
     * 
     */
    public String syntax() {
        return this.syntax;
    }

    private MethodResponse() {}

    private MethodResponse(MethodResponse $) {
        this.name = $.name;
        this.options = $.options;
        this.requestStreaming = $.requestStreaming;
        this.requestTypeUrl = $.requestTypeUrl;
        this.responseStreaming = $.responseStreaming;
        this.responseTypeUrl = $.responseTypeUrl;
        this.syntax = $.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MethodResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MethodResponse $;

        public Builder() {
            $ = new MethodResponse();
        }

        public Builder(MethodResponse defaults) {
            $ = new MethodResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The simple name of this method.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param options Any metadata attached to the method.
         * 
         * @return builder
         * 
         */
        public Builder options(List<OptionResponse> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Any metadata attached to the method.
         * 
         * @return builder
         * 
         */
        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }

        /**
         * @param requestStreaming If true, the request is streamed.
         * 
         * @return builder
         * 
         */
        public Builder requestStreaming(Boolean requestStreaming) {
            $.requestStreaming = requestStreaming;
            return this;
        }

        /**
         * @param requestTypeUrl A URL of the input message type.
         * 
         * @return builder
         * 
         */
        public Builder requestTypeUrl(String requestTypeUrl) {
            $.requestTypeUrl = requestTypeUrl;
            return this;
        }

        /**
         * @param responseStreaming If true, the response is streamed.
         * 
         * @return builder
         * 
         */
        public Builder responseStreaming(Boolean responseStreaming) {
            $.responseStreaming = responseStreaming;
            return this;
        }

        /**
         * @param responseTypeUrl The URL of the output message type.
         * 
         * @return builder
         * 
         */
        public Builder responseTypeUrl(String responseTypeUrl) {
            $.responseTypeUrl = responseTypeUrl;
            return this;
        }

        /**
         * @param syntax The source syntax of this method.
         * 
         * @return builder
         * 
         */
        public Builder syntax(String syntax) {
            $.syntax = syntax;
            return this;
        }

        public MethodResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.requestStreaming = Objects.requireNonNull($.requestStreaming, "expected parameter 'requestStreaming' to be non-null");
            $.requestTypeUrl = Objects.requireNonNull($.requestTypeUrl, "expected parameter 'requestTypeUrl' to be non-null");
            $.responseStreaming = Objects.requireNonNull($.responseStreaming, "expected parameter 'responseStreaming' to be non-null");
            $.responseTypeUrl = Objects.requireNonNull($.responseTypeUrl, "expected parameter 'responseTypeUrl' to be non-null");
            $.syntax = Objects.requireNonNull($.syntax, "expected parameter 'syntax' to be non-null");
            return $;
        }
    }

}
