// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkebackup.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * RetentionPolicy defines a Backup retention policy for a BackupPlan.
 * 
 */
public final class RetentionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RetentionPolicyArgs Empty = new RetentionPolicyArgs();

    /**
     * Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup&#39;s (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)
     * 
     */
    @Import(name="backupDeleteLockDays")
    private @Nullable Output<Integer> backupDeleteLockDays;

    /**
     * @return Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup&#39;s (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)
     * 
     */
    public Optional<Output<Integer>> backupDeleteLockDays() {
        return Optional.ofNullable(this.backupDeleteLockDays);
    }

    /**
     * The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value &gt;= 0. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be &gt;= backup_delete_lock_days. Default: 0 (no automatic deletion)
     * 
     */
    @Import(name="backupRetainDays")
    private @Nullable Output<Integer> backupRetainDays;

    /**
     * @return The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value &gt;= 0. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be &gt;= backup_delete_lock_days. Default: 0 (no automatic deletion)
     * 
     */
    public Optional<Output<Integer>> backupRetainDays() {
        return Optional.ofNullable(this.backupRetainDays);
    }

    /**
     * This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the `locked` field itself. Default: False
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the `locked` field itself. Default: False
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    private RetentionPolicyArgs() {}

    private RetentionPolicyArgs(RetentionPolicyArgs $) {
        this.backupDeleteLockDays = $.backupDeleteLockDays;
        this.backupRetainDays = $.backupRetainDays;
        this.locked = $.locked;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetentionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetentionPolicyArgs $;

        public Builder() {
            $ = new RetentionPolicyArgs();
        }

        public Builder(RetentionPolicyArgs defaults) {
            $ = new RetentionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupDeleteLockDays Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup&#39;s (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)
         * 
         * @return builder
         * 
         */
        public Builder backupDeleteLockDays(@Nullable Output<Integer> backupDeleteLockDays) {
            $.backupDeleteLockDays = backupDeleteLockDays;
            return this;
        }

        /**
         * @param backupDeleteLockDays Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup&#39;s (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)
         * 
         * @return builder
         * 
         */
        public Builder backupDeleteLockDays(Integer backupDeleteLockDays) {
            return backupDeleteLockDays(Output.of(backupDeleteLockDays));
        }

        /**
         * @param backupRetainDays The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value &gt;= 0. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be &gt;= backup_delete_lock_days. Default: 0 (no automatic deletion)
         * 
         * @return builder
         * 
         */
        public Builder backupRetainDays(@Nullable Output<Integer> backupRetainDays) {
            $.backupRetainDays = backupRetainDays;
            return this;
        }

        /**
         * @param backupRetainDays The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value &gt;= 0. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be &gt;= backup_delete_lock_days. Default: 0 (no automatic deletion)
         * 
         * @return builder
         * 
         */
        public Builder backupRetainDays(Integer backupRetainDays) {
            return backupRetainDays(Output.of(backupRetainDays));
        }

        /**
         * @param locked This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the `locked` field itself. Default: False
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the `locked` field itself. Default: False
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        public RetentionPolicyArgs build() {
            return $;
        }
    }

}
