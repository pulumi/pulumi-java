// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2LeaveUntransformedArgs;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2ThrowErrorArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
 * 
 */
public final class GooglePrivacyDlpV2TransformationErrorHandlingArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2TransformationErrorHandlingArgs Empty = new GooglePrivacyDlpV2TransformationErrorHandlingArgs();

    /**
     * Ignore errors
     * 
     */
    @Import(name="leaveUntransformed")
    private @Nullable Output<GooglePrivacyDlpV2LeaveUntransformedArgs> leaveUntransformed;

    /**
     * @return Ignore errors
     * 
     */
    public Optional<Output<GooglePrivacyDlpV2LeaveUntransformedArgs>> leaveUntransformed() {
        return Optional.ofNullable(this.leaveUntransformed);
    }

    /**
     * Throw an error
     * 
     */
    @Import(name="throwError")
    private @Nullable Output<GooglePrivacyDlpV2ThrowErrorArgs> throwError;

    /**
     * @return Throw an error
     * 
     */
    public Optional<Output<GooglePrivacyDlpV2ThrowErrorArgs>> throwError() {
        return Optional.ofNullable(this.throwError);
    }

    private GooglePrivacyDlpV2TransformationErrorHandlingArgs() {}

    private GooglePrivacyDlpV2TransformationErrorHandlingArgs(GooglePrivacyDlpV2TransformationErrorHandlingArgs $) {
        this.leaveUntransformed = $.leaveUntransformed;
        this.throwError = $.throwError;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2TransformationErrorHandlingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2TransformationErrorHandlingArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2TransformationErrorHandlingArgs();
        }

        public Builder(GooglePrivacyDlpV2TransformationErrorHandlingArgs defaults) {
            $ = new GooglePrivacyDlpV2TransformationErrorHandlingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param leaveUntransformed Ignore errors
         * 
         * @return builder
         * 
         */
        public Builder leaveUntransformed(@Nullable Output<GooglePrivacyDlpV2LeaveUntransformedArgs> leaveUntransformed) {
            $.leaveUntransformed = leaveUntransformed;
            return this;
        }

        /**
         * @param leaveUntransformed Ignore errors
         * 
         * @return builder
         * 
         */
        public Builder leaveUntransformed(GooglePrivacyDlpV2LeaveUntransformedArgs leaveUntransformed) {
            return leaveUntransformed(Output.of(leaveUntransformed));
        }

        /**
         * @param throwError Throw an error
         * 
         * @return builder
         * 
         */
        public Builder throwError(@Nullable Output<GooglePrivacyDlpV2ThrowErrorArgs> throwError) {
            $.throwError = throwError;
            return this;
        }

        /**
         * @param throwError Throw an error
         * 
         * @return builder
         * 
         */
        public Builder throwError(GooglePrivacyDlpV2ThrowErrorArgs throwError) {
            return throwError(Output.of(throwError));
        }

        public GooglePrivacyDlpV2TransformationErrorHandlingArgs build() {
            return $;
        }
    }

}
