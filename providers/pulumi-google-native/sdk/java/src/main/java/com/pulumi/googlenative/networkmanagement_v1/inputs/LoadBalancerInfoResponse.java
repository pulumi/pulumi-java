// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkmanagement_v1.inputs.LoadBalancerBackendResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * For display only. Metadata associated with a load balancer.
 * 
 */
public final class LoadBalancerInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final LoadBalancerInfoResponse Empty = new LoadBalancerInfoResponse();

    /**
     * Type of load balancer&#39;s backend configuration.
     * 
     */
    @Import(name="backendType", required=true)
    private String backendType;

    public String backendType() {
        return this.backendType;
    }

    /**
     * Backend configuration URI.
     * 
     */
    @Import(name="backendUri", required=true)
    private String backendUri;

    public String backendUri() {
        return this.backendUri;
    }

    /**
     * Information for the loadbalancer backends.
     * 
     */
    @Import(name="backends", required=true)
    private List<LoadBalancerBackendResponse> backends;

    public List<LoadBalancerBackendResponse> backends() {
        return this.backends;
    }

    /**
     * URI of the health check for the load balancer.
     * 
     */
    @Import(name="healthCheckUri", required=true)
    private String healthCheckUri;

    public String healthCheckUri() {
        return this.healthCheckUri;
    }

    /**
     * Type of the load balancer.
     * 
     */
    @Import(name="loadBalancerType", required=true)
    private String loadBalancerType;

    public String loadBalancerType() {
        return this.loadBalancerType;
    }

    private LoadBalancerInfoResponse() {}

    private LoadBalancerInfoResponse(LoadBalancerInfoResponse $) {
        this.backendType = $.backendType;
        this.backendUri = $.backendUri;
        this.backends = $.backends;
        this.healthCheckUri = $.healthCheckUri;
        this.loadBalancerType = $.loadBalancerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerInfoResponse $;

        public Builder() {
            $ = new LoadBalancerInfoResponse();
        }

        public Builder(LoadBalancerInfoResponse defaults) {
            $ = new LoadBalancerInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder backendType(String backendType) {
            $.backendType = backendType;
            return this;
        }

        public Builder backendUri(String backendUri) {
            $.backendUri = backendUri;
            return this;
        }

        public Builder backends(List<LoadBalancerBackendResponse> backends) {
            $.backends = backends;
            return this;
        }

        public Builder backends(LoadBalancerBackendResponse... backends) {
            return backends(List.of(backends));
        }

        public Builder healthCheckUri(String healthCheckUri) {
            $.healthCheckUri = healthCheckUri;
            return this;
        }

        public Builder loadBalancerType(String loadBalancerType) {
            $.loadBalancerType = loadBalancerType;
            return this;
        }

        public LoadBalancerInfoResponse build() {
            $.backendType = Objects.requireNonNull($.backendType, "expected parameter 'backendType' to be non-null");
            $.backendUri = Objects.requireNonNull($.backendUri, "expected parameter 'backendUri' to be non-null");
            $.backends = Objects.requireNonNull($.backends, "expected parameter 'backends' to be non-null");
            $.healthCheckUri = Objects.requireNonNull($.healthCheckUri, "expected parameter 'healthCheckUri' to be non-null");
            $.loadBalancerType = Objects.requireNonNull($.loadBalancerType, "expected parameter 'loadBalancerType' to be non-null");
            return $;
        }
    }

}
