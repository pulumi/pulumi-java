// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datalabeling.v1beta1.inputs.GoogleCloudDatalabelingV1beta1SentimentConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Config for text classification human labeling task.
 * 
 */
public final class GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs Empty = new GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs();

    /**
     * Optional. If allow_multi_label is true, contributors are able to choose multiple labels for one text segment.
     * 
     */
    @Import(name="allowMultiLabel")
    private @Nullable Output<Boolean> allowMultiLabel;

    /**
     * @return Optional. If allow_multi_label is true, contributors are able to choose multiple labels for one text segment.
     * 
     */
    public Optional<Output<Boolean>> allowMultiLabel() {
        return Optional.ofNullable(this.allowMultiLabel);
    }

    /**
     * Annotation spec set resource name.
     * 
     */
    @Import(name="annotationSpecSet", required=true)
    private Output<String> annotationSpecSet;

    /**
     * @return Annotation spec set resource name.
     * 
     */
    public Output<String> annotationSpecSet() {
        return this.annotationSpecSet;
    }

    /**
     * Optional. Configs for sentiment selection. We deprecate sentiment analysis in data labeling side as it is incompatible with uCAIP.
     * 
     */
    @Import(name="sentimentConfig")
    private @Nullable Output<GoogleCloudDatalabelingV1beta1SentimentConfigArgs> sentimentConfig;

    /**
     * @return Optional. Configs for sentiment selection. We deprecate sentiment analysis in data labeling side as it is incompatible with uCAIP.
     * 
     */
    public Optional<Output<GoogleCloudDatalabelingV1beta1SentimentConfigArgs>> sentimentConfig() {
        return Optional.ofNullable(this.sentimentConfig);
    }

    private GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs() {}

    private GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs(GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs $) {
        this.allowMultiLabel = $.allowMultiLabel;
        this.annotationSpecSet = $.annotationSpecSet;
        this.sentimentConfig = $.sentimentConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs $;

        public Builder() {
            $ = new GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs();
        }

        public Builder(GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs defaults) {
            $ = new GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowMultiLabel Optional. If allow_multi_label is true, contributors are able to choose multiple labels for one text segment.
         * 
         * @return builder
         * 
         */
        public Builder allowMultiLabel(@Nullable Output<Boolean> allowMultiLabel) {
            $.allowMultiLabel = allowMultiLabel;
            return this;
        }

        /**
         * @param allowMultiLabel Optional. If allow_multi_label is true, contributors are able to choose multiple labels for one text segment.
         * 
         * @return builder
         * 
         */
        public Builder allowMultiLabel(Boolean allowMultiLabel) {
            return allowMultiLabel(Output.of(allowMultiLabel));
        }

        /**
         * @param annotationSpecSet Annotation spec set resource name.
         * 
         * @return builder
         * 
         */
        public Builder annotationSpecSet(Output<String> annotationSpecSet) {
            $.annotationSpecSet = annotationSpecSet;
            return this;
        }

        /**
         * @param annotationSpecSet Annotation spec set resource name.
         * 
         * @return builder
         * 
         */
        public Builder annotationSpecSet(String annotationSpecSet) {
            return annotationSpecSet(Output.of(annotationSpecSet));
        }

        /**
         * @param sentimentConfig Optional. Configs for sentiment selection. We deprecate sentiment analysis in data labeling side as it is incompatible with uCAIP.
         * 
         * @return builder
         * 
         */
        public Builder sentimentConfig(@Nullable Output<GoogleCloudDatalabelingV1beta1SentimentConfigArgs> sentimentConfig) {
            $.sentimentConfig = sentimentConfig;
            return this;
        }

        /**
         * @param sentimentConfig Optional. Configs for sentiment selection. We deprecate sentiment analysis in data labeling side as it is incompatible with uCAIP.
         * 
         * @return builder
         * 
         */
        public Builder sentimentConfig(GoogleCloudDatalabelingV1beta1SentimentConfigArgs sentimentConfig) {
            return sentimentConfig(Output.of(sentimentConfig));
        }

        public GoogleCloudDatalabelingV1beta1TextClassificationConfigArgs build() {
            $.annotationSpecSet = Objects.requireNonNull($.annotationSpecSet, "expected parameter 'annotationSpecSet' to be non-null");
            return $;
        }
    }

}
