// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.RouterNatRuleActionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterNatRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterNatRuleArgs Empty = new RouterNatRuleArgs();

    /**
     * The action to be enforced for traffic that matches this rule.
     * 
     */
    @Import(name="action")
    private @Nullable Output<RouterNatRuleActionArgs> action;

    public Optional<Output<RouterNatRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * An optional description of this rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: &#34;inIpRange(destination.ip, &#39;1.1.0.0/16&#39;) || inIpRange(destination.ip, &#39;2.2.0.0/16&#39;)&#34; &#34;destination.ip == &#39;1.1.0.1&#39; || destination.ip == &#39;8.8.8.8&#39;&#34; The following example is a valid match expression for private NAT: &#34;nexthop.hub == &#39;https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1&#39;&#34;
     * 
     */
    @Import(name="match")
    private @Nullable Output<String> match;

    public Optional<Output<String>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
     * 
     */
    @Import(name="ruleNumber")
    private @Nullable Output<Integer> ruleNumber;

    public Optional<Output<Integer>> ruleNumber() {
        return Optional.ofNullable(this.ruleNumber);
    }

    private RouterNatRuleArgs() {}

    private RouterNatRuleArgs(RouterNatRuleArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.match = $.match;
        this.ruleNumber = $.ruleNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatRuleArgs $;

        public Builder() {
            $ = new RouterNatRuleArgs();
        }

        public Builder(RouterNatRuleArgs defaults) {
            $ = new RouterNatRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<RouterNatRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        public Builder action(RouterNatRuleActionArgs action) {
            return action(Output.of(action));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder match(@Nullable Output<String> match) {
            $.match = match;
            return this;
        }

        public Builder match(String match) {
            return match(Output.of(match));
        }

        public Builder ruleNumber(@Nullable Output<Integer> ruleNumber) {
            $.ruleNumber = ruleNumber;
            return this;
        }

        public Builder ruleNumber(Integer ruleNumber) {
            return ruleNumber(Output.of(ruleNumber));
        }

        public RouterNatRuleArgs build() {
            return $;
        }
    }

}
