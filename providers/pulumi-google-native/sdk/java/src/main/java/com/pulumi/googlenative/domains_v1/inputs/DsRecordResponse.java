// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.domains_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain&#39;s DNS zone.
 * 
 */
public final class DsRecordResponse extends com.pulumi.resources.InvokeArgs {

    public static final DsRecordResponse Empty = new DsRecordResponse();

    /**
     * The algorithm used to generate the referenced DNSKEY.
     * 
     */
    @Import(name="algorithm", required=true)
    private String algorithm;

    public String algorithm() {
        return this.algorithm;
    }

    /**
     * The digest generated from the referenced DNSKEY.
     * 
     */
    @Import(name="digest", required=true)
    private String digest;

    public String digest() {
        return this.digest;
    }

    /**
     * The hash function used to generate the digest of the referenced DNSKEY.
     * 
     */
    @Import(name="digestType", required=true)
    private String digestType;

    public String digestType() {
        return this.digestType;
    }

    /**
     * The key tag of the record. Must be set in range 0 -- 65535.
     * 
     */
    @Import(name="keyTag", required=true)
    private Integer keyTag;

    public Integer keyTag() {
        return this.keyTag;
    }

    private DsRecordResponse() {}

    private DsRecordResponse(DsRecordResponse $) {
        this.algorithm = $.algorithm;
        this.digest = $.digest;
        this.digestType = $.digestType;
        this.keyTag = $.keyTag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DsRecordResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DsRecordResponse $;

        public Builder() {
            $ = new DsRecordResponse();
        }

        public Builder(DsRecordResponse defaults) {
            $ = new DsRecordResponse(Objects.requireNonNull(defaults));
        }

        public Builder algorithm(String algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        public Builder digest(String digest) {
            $.digest = digest;
            return this;
        }

        public Builder digestType(String digestType) {
            $.digestType = digestType;
            return this;
        }

        public Builder keyTag(Integer keyTag) {
            $.keyTag = keyTag;
            return this;
        }

        public DsRecordResponse build() {
            $.algorithm = Objects.requireNonNull($.algorithm, "expected parameter 'algorithm' to be non-null");
            $.digest = Objects.requireNonNull($.digest, "expected parameter 'digest' to be non-null");
            $.digestType = Objects.requireNonNull($.digestType, "expected parameter 'digestType' to be non-null");
            $.keyTag = Objects.requireNonNull($.keyTag, "expected parameter 'keyTag' to be non-null");
            return $;
        }
    }

}
