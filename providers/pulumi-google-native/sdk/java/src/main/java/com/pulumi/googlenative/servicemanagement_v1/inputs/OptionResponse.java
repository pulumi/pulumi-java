// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * A protocol buffer option, which can be attached to a message, field, enumeration, etc.
 * 
 */
public final class OptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final OptionResponse Empty = new OptionResponse();

    /**
     * The option&#39;s name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `&#34;map_entry&#34;`. For custom options, it should be the fully-qualified name. For example, `&#34;google.api.http&#34;`.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The option&#39;s value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
     * 
     */
    @Import(name="value", required=true)
      private final Map<String,String> value;

    public Map<String,String> value() {
        return this.value;
    }

    public OptionResponse(
        String name,
        Map<String,String> value) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private OptionResponse() {
        this.name = null;
        this.value = Map.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String name;
        private Map<String,String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(OptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.value = defaults.value;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder value(Map<String,String> value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public OptionResponse build() {
            return new OptionResponse(name, value);
        }
    }
}
