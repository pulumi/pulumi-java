// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.inputs.CustomerEncryptionKeyArgs;
import com.pulumi.googlenative.compute_beta.inputs.GuestOsFeatureArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Encrypts the disk using a customer-supplied encryption key or a customer-managed encryption key. Encryption keys do not protect access to metadata of the disk. After you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later. For example, to create a disk snapshot, to create a disk image, to create a machine image, or to attach the disk to a virtual machine. After you encrypt a disk with a customer-managed key, the diskEncryptionKey.kmsKeyName is set to a key *version* name once the disk is created. The disk is encrypted with this version of the key. In the response, diskEncryptionKey.kmsKeyName appears in the following format: &#34;diskEncryptionKey.kmsKeyName&#34;: &#34;projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeysVersions/version If you do not provide an encryption key when creating the disk, then the disk is encrypted using an automatically generated key and you don&#39;t need to provide a key to use the disk later.
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> diskEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * Specifies whether the disk restored from a source snapshot should erase Windows specific VSS signature.
     * 
     */
    @Import(name="eraseWindowsVssSignature")
    private @Nullable Output<Boolean> eraseWindowsVssSignature;

    public Optional<Output<Boolean>> eraseWindowsVssSignature() {
        return Optional.ofNullable(this.eraseWindowsVssSignature);
    }

    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
     * 
     */
    @Import(name="guestOsFeatures")
    private @Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures;

    public Optional<Output<List<GuestOsFeatureArgs>>> guestOsFeatures() {
        return Optional.ofNullable(this.guestOsFeatures);
    }

    /**
     * Labels to apply to this disk. These can be later modified by the setLabels method.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Integer license codes indicating which licenses are attached to this disk.
     * 
     */
    @Import(name="licenseCodes")
    private @Nullable Output<List<String>> licenseCodes;

    public Optional<Output<List<String>>> licenseCodes() {
        return Optional.ofNullable(this.licenseCodes);
    }

    /**
     * A list of publicly visible licenses. Reserved for Google&#39;s use.
     * 
     */
    @Import(name="licenses")
    private @Nullable Output<List<String>> licenses;

    public Optional<Output<List<String>>> licenses() {
        return Optional.ofNullable(this.licenses);
    }

    /**
     * An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API.
     * 
     */
    @Import(name="locationHint")
    private @Nullable Output<String> locationHint;

    public Optional<Output<String>> locationHint() {
        return Optional.ofNullable(this.locationHint);
    }

    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    @Import(name="multiWriter")
    private @Nullable Output<Boolean> multiWriter;

    public Optional<Output<Boolean>> multiWriter() {
        return Optional.ofNullable(this.multiWriter);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Internal use only.
     * 
     */
    @Import(name="options")
    private @Nullable Output<String> options;

    public Optional<Output<String>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller&#39;s project.
     * 
     */
    @Import(name="physicalBlockSizeBytes")
    private @Nullable Output<String> physicalBlockSizeBytes;

    public Optional<Output<String>> physicalBlockSizeBytes() {
        return Optional.ofNullable(this.physicalBlockSizeBytes);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<String> provisionedIops;

    public Optional<Output<String>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
     * 
     */
    @Import(name="replicaZones")
    private @Nullable Output<List<String>> replicaZones;

    public Optional<Output<List<String>>> replicaZones() {
        return Optional.ofNullable(this.replicaZones);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Resource policies applied to this disk for automatic snapshot creations.
     * 
     */
    @Import(name="resourcePolicies")
    private @Nullable Output<List<String>> resourcePolicies;

    public Optional<Output<List<String>>> resourcePolicies() {
        return Optional.ofNullable(this.resourcePolicies);
    }

    /**
     * Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are 1 to 65536, inclusive.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<String> sizeGb;

    public Optional<Output<String>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    /**
     * The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
     * 
     */
    @Import(name="sourceDisk")
    private @Nullable Output<String> sourceDisk;

    public Optional<Output<String>> sourceDisk() {
        return Optional.ofNullable(this.sourceDisk);
    }

    /**
     * The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family
     * 
     */
    @Import(name="sourceImage")
    private @Nullable Output<String> sourceImage;

    public Optional<Output<String>> sourceImage() {
        return Optional.ofNullable(this.sourceImage);
    }

    /**
     * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceImageEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> sourceImageEncryptionKey() {
        return Optional.ofNullable(this.sourceImageEncryptionKey);
    }

    /**
     * The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot
     * 
     */
    @Import(name="sourceSnapshot")
    private @Nullable Output<String> sourceSnapshot;

    public Optional<Output<String>> sourceSnapshot() {
        return Optional.ofNullable(this.sourceSnapshot);
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> sourceSnapshotEncryptionKey() {
        return Optional.ofNullable(this.sourceSnapshotEncryptionKey);
    }

    /**
     * The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead.
     * 
     */
    @Import(name="sourceStorageObject")
    private @Nullable Output<String> sourceStorageObject;

    public Optional<Output<String>> sourceStorageObject() {
        return Optional.ofNullable(this.sourceStorageObject);
    }

    /**
     * URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * A list of publicly visible user-licenses. Unlike regular licenses, user provided licenses can be modified after the disk is created. This includes a list of URLs to the license resource. For example, to provide a debian license: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch
     * 
     */
    @Import(name="userLicenses")
    private @Nullable Output<List<String>> userLicenses;

    public Optional<Output<List<String>>> userLicenses() {
        return Optional.ofNullable(this.userLicenses);
    }

    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private DiskArgs() {}

    private DiskArgs(DiskArgs $) {
        this.description = $.description;
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.eraseWindowsVssSignature = $.eraseWindowsVssSignature;
        this.guestOsFeatures = $.guestOsFeatures;
        this.labels = $.labels;
        this.licenseCodes = $.licenseCodes;
        this.licenses = $.licenses;
        this.locationHint = $.locationHint;
        this.multiWriter = $.multiWriter;
        this.name = $.name;
        this.options = $.options;
        this.physicalBlockSizeBytes = $.physicalBlockSizeBytes;
        this.project = $.project;
        this.provisionedIops = $.provisionedIops;
        this.replicaZones = $.replicaZones;
        this.requestId = $.requestId;
        this.resourcePolicies = $.resourcePolicies;
        this.sizeGb = $.sizeGb;
        this.sourceDisk = $.sourceDisk;
        this.sourceImage = $.sourceImage;
        this.sourceImageEncryptionKey = $.sourceImageEncryptionKey;
        this.sourceSnapshot = $.sourceSnapshot;
        this.sourceSnapshotEncryptionKey = $.sourceSnapshotEncryptionKey;
        this.sourceStorageObject = $.sourceStorageObject;
        this.type = $.type;
        this.userLicenses = $.userLicenses;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskArgs $;

        public Builder() {
            $ = new DiskArgs();
        }

        public Builder(DiskArgs defaults) {
            $ = new DiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder diskEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        public Builder diskEncryptionKey(CustomerEncryptionKeyArgs diskEncryptionKey) {
            return diskEncryptionKey(Output.of(diskEncryptionKey));
        }

        public Builder eraseWindowsVssSignature(@Nullable Output<Boolean> eraseWindowsVssSignature) {
            $.eraseWindowsVssSignature = eraseWindowsVssSignature;
            return this;
        }

        public Builder eraseWindowsVssSignature(Boolean eraseWindowsVssSignature) {
            return eraseWindowsVssSignature(Output.of(eraseWindowsVssSignature));
        }

        public Builder guestOsFeatures(@Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures) {
            $.guestOsFeatures = guestOsFeatures;
            return this;
        }

        public Builder guestOsFeatures(List<GuestOsFeatureArgs> guestOsFeatures) {
            return guestOsFeatures(Output.of(guestOsFeatures));
        }

        public Builder guestOsFeatures(GuestOsFeatureArgs... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder licenseCodes(@Nullable Output<List<String>> licenseCodes) {
            $.licenseCodes = licenseCodes;
            return this;
        }

        public Builder licenseCodes(List<String> licenseCodes) {
            return licenseCodes(Output.of(licenseCodes));
        }

        public Builder licenseCodes(String... licenseCodes) {
            return licenseCodes(List.of(licenseCodes));
        }

        public Builder licenses(@Nullable Output<List<String>> licenses) {
            $.licenses = licenses;
            return this;
        }

        public Builder licenses(List<String> licenses) {
            return licenses(Output.of(licenses));
        }

        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }

        public Builder locationHint(@Nullable Output<String> locationHint) {
            $.locationHint = locationHint;
            return this;
        }

        public Builder locationHint(String locationHint) {
            return locationHint(Output.of(locationHint));
        }

        public Builder multiWriter(@Nullable Output<Boolean> multiWriter) {
            $.multiWriter = multiWriter;
            return this;
        }

        public Builder multiWriter(Boolean multiWriter) {
            return multiWriter(Output.of(multiWriter));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder options(@Nullable Output<String> options) {
            $.options = options;
            return this;
        }

        public Builder options(String options) {
            return options(Output.of(options));
        }

        public Builder physicalBlockSizeBytes(@Nullable Output<String> physicalBlockSizeBytes) {
            $.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }

        public Builder physicalBlockSizeBytes(String physicalBlockSizeBytes) {
            return physicalBlockSizeBytes(Output.of(physicalBlockSizeBytes));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder provisionedIops(@Nullable Output<String> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        public Builder provisionedIops(String provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        public Builder replicaZones(@Nullable Output<List<String>> replicaZones) {
            $.replicaZones = replicaZones;
            return this;
        }

        public Builder replicaZones(List<String> replicaZones) {
            return replicaZones(Output.of(replicaZones));
        }

        public Builder replicaZones(String... replicaZones) {
            return replicaZones(List.of(replicaZones));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder resourcePolicies(@Nullable Output<List<String>> resourcePolicies) {
            $.resourcePolicies = resourcePolicies;
            return this;
        }

        public Builder resourcePolicies(List<String> resourcePolicies) {
            return resourcePolicies(Output.of(resourcePolicies));
        }

        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }

        public Builder sizeGb(@Nullable Output<String> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        public Builder sizeGb(String sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        public Builder sourceDisk(@Nullable Output<String> sourceDisk) {
            $.sourceDisk = sourceDisk;
            return this;
        }

        public Builder sourceDisk(String sourceDisk) {
            return sourceDisk(Output.of(sourceDisk));
        }

        public Builder sourceImage(@Nullable Output<String> sourceImage) {
            $.sourceImage = sourceImage;
            return this;
        }

        public Builder sourceImage(String sourceImage) {
            return sourceImage(Output.of(sourceImage));
        }

        public Builder sourceImageEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey) {
            $.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }

        public Builder sourceImageEncryptionKey(CustomerEncryptionKeyArgs sourceImageEncryptionKey) {
            return sourceImageEncryptionKey(Output.of(sourceImageEncryptionKey));
        }

        public Builder sourceSnapshot(@Nullable Output<String> sourceSnapshot) {
            $.sourceSnapshot = sourceSnapshot;
            return this;
        }

        public Builder sourceSnapshot(String sourceSnapshot) {
            return sourceSnapshot(Output.of(sourceSnapshot));
        }

        public Builder sourceSnapshotEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey) {
            $.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        public Builder sourceSnapshotEncryptionKey(CustomerEncryptionKeyArgs sourceSnapshotEncryptionKey) {
            return sourceSnapshotEncryptionKey(Output.of(sourceSnapshotEncryptionKey));
        }

        public Builder sourceStorageObject(@Nullable Output<String> sourceStorageObject) {
            $.sourceStorageObject = sourceStorageObject;
            return this;
        }

        public Builder sourceStorageObject(String sourceStorageObject) {
            return sourceStorageObject(Output.of(sourceStorageObject));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userLicenses(@Nullable Output<List<String>> userLicenses) {
            $.userLicenses = userLicenses;
            return this;
        }

        public Builder userLicenses(List<String> userLicenses) {
            return userLicenses(Output.of(userLicenses));
        }

        public Builder userLicenses(String... userLicenses) {
            return userLicenses(List.of(userLicenses));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public DiskArgs build() {
            return $;
        }
    }

}
