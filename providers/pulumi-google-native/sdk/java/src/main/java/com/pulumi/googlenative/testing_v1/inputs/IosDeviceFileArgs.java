// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A file or directory to install on the device before the test starts.
 * 
 */
public final class IosDeviceFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final IosDeviceFileArgs Empty = new IosDeviceFileArgs();

    /**
     * The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
     * 
     */
    @Import(name="bundleId")
    private @Nullable Output<String> bundleId;

    public Optional<Output<String>> bundleId() {
        return Optional.ofNullable(this.bundleId);
    }

    /**
     * The source file
     * 
     */
    @Import(name="content")
    private @Nullable Output<FileReferenceArgs> content;

    public Optional<Output<FileReferenceArgs>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Location of the file on the device, inside the app&#39;s sandboxed filesystem
     * 
     */
    @Import(name="devicePath")
    private @Nullable Output<String> devicePath;

    public Optional<Output<String>> devicePath() {
        return Optional.ofNullable(this.devicePath);
    }

    private IosDeviceFileArgs() {}

    private IosDeviceFileArgs(IosDeviceFileArgs $) {
        this.bundleId = $.bundleId;
        this.content = $.content;
        this.devicePath = $.devicePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IosDeviceFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IosDeviceFileArgs $;

        public Builder() {
            $ = new IosDeviceFileArgs();
        }

        public Builder(IosDeviceFileArgs defaults) {
            $ = new IosDeviceFileArgs(Objects.requireNonNull(defaults));
        }

        public Builder bundleId(@Nullable Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        public Builder content(@Nullable Output<FileReferenceArgs> content) {
            $.content = content;
            return this;
        }

        public Builder content(FileReferenceArgs content) {
            return content(Output.of(content));
        }

        public Builder devicePath(@Nullable Output<String> devicePath) {
            $.devicePath = devicePath;
            return this;
        }

        public Builder devicePath(String devicePath) {
            return devicePath(Output.of(devicePath));
        }

        public IosDeviceFileArgs build() {
            return $;
        }
    }

}
