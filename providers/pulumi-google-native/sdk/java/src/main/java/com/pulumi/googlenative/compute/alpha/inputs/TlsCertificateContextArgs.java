// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.enums.TlsCertificateContextCertificateSource;
import com.pulumi.googlenative.compute.alpha.inputs.SdsConfigArgs;
import com.pulumi.googlenative.compute.alpha.inputs.TlsCertificatePathsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
 * 
 */
public final class TlsCertificateContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsCertificateContextArgs Empty = new TlsCertificateContextArgs();

    /**
     * Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
     * 
     */
    @Import(name="certificatePaths")
    private @Nullable Output<TlsCertificatePathsArgs> certificatePaths;

    /**
     * @return Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
     * 
     */
    public Optional<Output<TlsCertificatePathsArgs>> certificatePaths() {
        return Optional.ofNullable(this.certificatePaths);
    }

    /**
     * Defines how TLS certificates are obtained.
     * 
     */
    @Import(name="certificateSource")
    private @Nullable Output<TlsCertificateContextCertificateSource> certificateSource;

    /**
     * @return Defines how TLS certificates are obtained.
     * 
     */
    public Optional<Output<TlsCertificateContextCertificateSource>> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }

    /**
     * Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
     * 
     */
    @Import(name="sdsConfig")
    private @Nullable Output<SdsConfigArgs> sdsConfig;

    /**
     * @return Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
     * 
     */
    public Optional<Output<SdsConfigArgs>> sdsConfig() {
        return Optional.ofNullable(this.sdsConfig);
    }

    private TlsCertificateContextArgs() {}

    private TlsCertificateContextArgs(TlsCertificateContextArgs $) {
        this.certificatePaths = $.certificatePaths;
        this.certificateSource = $.certificateSource;
        this.sdsConfig = $.sdsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsCertificateContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsCertificateContextArgs $;

        public Builder() {
            $ = new TlsCertificateContextArgs();
        }

        public Builder(TlsCertificateContextArgs defaults) {
            $ = new TlsCertificateContextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificatePaths Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
         * 
         * @return builder
         * 
         */
        public Builder certificatePaths(@Nullable Output<TlsCertificatePathsArgs> certificatePaths) {
            $.certificatePaths = certificatePaths;
            return this;
        }

        /**
         * @param certificatePaths Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
         * 
         * @return builder
         * 
         */
        public Builder certificatePaths(TlsCertificatePathsArgs certificatePaths) {
            return certificatePaths(Output.of(certificatePaths));
        }

        /**
         * @param certificateSource Defines how TLS certificates are obtained.
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(@Nullable Output<TlsCertificateContextCertificateSource> certificateSource) {
            $.certificateSource = certificateSource;
            return this;
        }

        /**
         * @param certificateSource Defines how TLS certificates are obtained.
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(TlsCertificateContextCertificateSource certificateSource) {
            return certificateSource(Output.of(certificateSource));
        }

        /**
         * @param sdsConfig Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         * 
         * @return builder
         * 
         */
        public Builder sdsConfig(@Nullable Output<SdsConfigArgs> sdsConfig) {
            $.sdsConfig = sdsConfig;
            return this;
        }

        /**
         * @param sdsConfig Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         * 
         * @return builder
         * 
         */
        public Builder sdsConfig(SdsConfigArgs sdsConfig) {
            return sdsConfig(Output.of(sdsConfig));
        }

        public TlsCertificateContextArgs build() {
            return $;
        }
    }

}
