// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream_v1.inputs.ForwardSshTunnelConnectivityArgs;
import com.pulumi.googlenative.datastream_v1.inputs.GcsProfileArgs;
import com.pulumi.googlenative.datastream_v1.inputs.MysqlProfileArgs;
import com.pulumi.googlenative.datastream_v1.inputs.OracleProfileArgs;
import com.pulumi.googlenative.datastream_v1.inputs.PrivateConnectivityArgs;
import com.pulumi.googlenative.datastream_v1.inputs.StaticServiceIpConnectivityArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionProfileArgs Empty = new ConnectionProfileArgs();

    @Import(name="connectionProfileId", required=true)
    private Output<String> connectionProfileId;

    public Output<String> connectionProfileId() {
        return this.connectionProfileId;
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="force")
    private @Nullable Output<String> force;

    public Optional<Output<String>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Forward SSH tunnel connectivity.
     * 
     */
    @Import(name="forwardSshConnectivity")
    private @Nullable Output<ForwardSshTunnelConnectivityArgs> forwardSshConnectivity;

    public Optional<Output<ForwardSshTunnelConnectivityArgs>> forwardSshConnectivity() {
        return Optional.ofNullable(this.forwardSshConnectivity);
    }

    /**
     * Cloud Storage ConnectionProfile configuration.
     * 
     */
    @Import(name="gcsProfile")
    private @Nullable Output<GcsProfileArgs> gcsProfile;

    public Optional<Output<GcsProfileArgs>> gcsProfile() {
        return Optional.ofNullable(this.gcsProfile);
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * MySQL ConnectionProfile configuration.
     * 
     */
    @Import(name="mysqlProfile")
    private @Nullable Output<MysqlProfileArgs> mysqlProfile;

    public Optional<Output<MysqlProfileArgs>> mysqlProfile() {
        return Optional.ofNullable(this.mysqlProfile);
    }

    /**
     * Oracle ConnectionProfile configuration.
     * 
     */
    @Import(name="oracleProfile")
    private @Nullable Output<OracleProfileArgs> oracleProfile;

    public Optional<Output<OracleProfileArgs>> oracleProfile() {
        return Optional.ofNullable(this.oracleProfile);
    }

    /**
     * Private connectivity.
     * 
     */
    @Import(name="privateConnectivity")
    private @Nullable Output<PrivateConnectivityArgs> privateConnectivity;

    public Optional<Output<PrivateConnectivityArgs>> privateConnectivity() {
        return Optional.ofNullable(this.privateConnectivity);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Static Service IP connectivity.
     * 
     */
    @Import(name="staticServiceIpConnectivity")
    private @Nullable Output<StaticServiceIpConnectivityArgs> staticServiceIpConnectivity;

    public Optional<Output<StaticServiceIpConnectivityArgs>> staticServiceIpConnectivity() {
        return Optional.ofNullable(this.staticServiceIpConnectivity);
    }

    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private ConnectionProfileArgs() {}

    private ConnectionProfileArgs(ConnectionProfileArgs $) {
        this.connectionProfileId = $.connectionProfileId;
        this.displayName = $.displayName;
        this.force = $.force;
        this.forwardSshConnectivity = $.forwardSshConnectivity;
        this.gcsProfile = $.gcsProfile;
        this.labels = $.labels;
        this.location = $.location;
        this.mysqlProfile = $.mysqlProfile;
        this.oracleProfile = $.oracleProfile;
        this.privateConnectivity = $.privateConnectivity;
        this.project = $.project;
        this.requestId = $.requestId;
        this.staticServiceIpConnectivity = $.staticServiceIpConnectivity;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionProfileArgs $;

        public Builder() {
            $ = new ConnectionProfileArgs();
        }

        public Builder(ConnectionProfileArgs defaults) {
            $ = new ConnectionProfileArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectionProfileId(Output<String> connectionProfileId) {
            $.connectionProfileId = connectionProfileId;
            return this;
        }

        public Builder connectionProfileId(String connectionProfileId) {
            return connectionProfileId(Output.of(connectionProfileId));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder force(@Nullable Output<String> force) {
            $.force = force;
            return this;
        }

        public Builder force(String force) {
            return force(Output.of(force));
        }

        public Builder forwardSshConnectivity(@Nullable Output<ForwardSshTunnelConnectivityArgs> forwardSshConnectivity) {
            $.forwardSshConnectivity = forwardSshConnectivity;
            return this;
        }

        public Builder forwardSshConnectivity(ForwardSshTunnelConnectivityArgs forwardSshConnectivity) {
            return forwardSshConnectivity(Output.of(forwardSshConnectivity));
        }

        public Builder gcsProfile(@Nullable Output<GcsProfileArgs> gcsProfile) {
            $.gcsProfile = gcsProfile;
            return this;
        }

        public Builder gcsProfile(GcsProfileArgs gcsProfile) {
            return gcsProfile(Output.of(gcsProfile));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder mysqlProfile(@Nullable Output<MysqlProfileArgs> mysqlProfile) {
            $.mysqlProfile = mysqlProfile;
            return this;
        }

        public Builder mysqlProfile(MysqlProfileArgs mysqlProfile) {
            return mysqlProfile(Output.of(mysqlProfile));
        }

        public Builder oracleProfile(@Nullable Output<OracleProfileArgs> oracleProfile) {
            $.oracleProfile = oracleProfile;
            return this;
        }

        public Builder oracleProfile(OracleProfileArgs oracleProfile) {
            return oracleProfile(Output.of(oracleProfile));
        }

        public Builder privateConnectivity(@Nullable Output<PrivateConnectivityArgs> privateConnectivity) {
            $.privateConnectivity = privateConnectivity;
            return this;
        }

        public Builder privateConnectivity(PrivateConnectivityArgs privateConnectivity) {
            return privateConnectivity(Output.of(privateConnectivity));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder staticServiceIpConnectivity(@Nullable Output<StaticServiceIpConnectivityArgs> staticServiceIpConnectivity) {
            $.staticServiceIpConnectivity = staticServiceIpConnectivity;
            return this;
        }

        public Builder staticServiceIpConnectivity(StaticServiceIpConnectivityArgs staticServiceIpConnectivity) {
            return staticServiceIpConnectivity(Output.of(staticServiceIpConnectivity));
        }

        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public ConnectionProfileArgs build() {
            $.connectionProfileId = Objects.requireNonNull($.connectionProfileId, "expected parameter 'connectionProfileId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
