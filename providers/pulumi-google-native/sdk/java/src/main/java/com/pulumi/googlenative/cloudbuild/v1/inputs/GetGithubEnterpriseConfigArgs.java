// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGithubEnterpriseConfigArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGithubEnterpriseConfigArgs Empty = new GetGithubEnterpriseConfigArgs();

    @Import(name="configId")
    private @Nullable Output<String> configId;

    public Optional<Output<String>> configId() {
        return Optional.ofNullable(this.configId);
    }

    @Import(name="githubEnterpriseConfigId", required=true)
    private Output<String> githubEnterpriseConfigId;

    public Output<String> githubEnterpriseConfigId() {
        return this.githubEnterpriseConfigId;
    }

    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetGithubEnterpriseConfigArgs() {}

    private GetGithubEnterpriseConfigArgs(GetGithubEnterpriseConfigArgs $) {
        this.configId = $.configId;
        this.githubEnterpriseConfigId = $.githubEnterpriseConfigId;
        this.location = $.location;
        this.project = $.project;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGithubEnterpriseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGithubEnterpriseConfigArgs $;

        public Builder() {
            $ = new GetGithubEnterpriseConfigArgs();
        }

        public Builder(GetGithubEnterpriseConfigArgs defaults) {
            $ = new GetGithubEnterpriseConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder configId(@Nullable Output<String> configId) {
            $.configId = configId;
            return this;
        }

        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        public Builder githubEnterpriseConfigId(Output<String> githubEnterpriseConfigId) {
            $.githubEnterpriseConfigId = githubEnterpriseConfigId;
            return this;
        }

        public Builder githubEnterpriseConfigId(String githubEnterpriseConfigId) {
            return githubEnterpriseConfigId(Output.of(githubEnterpriseConfigId));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetGithubEnterpriseConfigArgs build() {
            $.githubEnterpriseConfigId = Objects.requireNonNull($.githubEnterpriseConfigId, "expected parameter 'githubEnterpriseConfigId' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
