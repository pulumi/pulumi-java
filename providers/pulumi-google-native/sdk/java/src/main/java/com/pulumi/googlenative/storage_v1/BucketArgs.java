// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.storage_v1.inputs.BucketAccessControlArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketAutoclassArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketBillingArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketCorsItemArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketCustomPlacementConfigArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketEncryptionArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketIamConfigurationArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketLifecycleArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketLoggingArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketOwnerArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketRetentionPolicyArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketVersioningArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketWebsiteArgs;
import com.pulumi.googlenative.storage_v1.inputs.ObjectAccessControlArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketArgs Empty = new BucketArgs();

    /**
     * Access controls on the bucket.
     * 
     */
    @Import(name="acl")
      private final @Nullable Output<List<BucketAccessControlArgs>> acl;

    public Output<List<BucketAccessControlArgs>> acl() {
        return this.acl == null ? Codegen.empty() : this.acl;
    }

    /**
     * The bucket's Autoclass configuration.
     * 
     */
    @Import(name="autoclass")
      private final @Nullable Output<BucketAutoclassArgs> autoclass;

    public Output<BucketAutoclassArgs> autoclass() {
        return this.autoclass == null ? Codegen.empty() : this.autoclass;
    }

    /**
     * The bucket's billing configuration.
     * 
     */
    @Import(name="billing")
      private final @Nullable Output<BucketBillingArgs> billing;

    public Output<BucketBillingArgs> billing() {
        return this.billing == null ? Codegen.empty() : this.billing;
    }

    /**
     * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
     * 
     */
    @Import(name="cors")
      private final @Nullable Output<List<BucketCorsItemArgs>> cors;

    public Output<List<BucketCorsItemArgs>> cors() {
        return this.cors == null ? Codegen.empty() : this.cors;
    }

    /**
     * The bucket's custom placement configuration for Custom Dual Regions.
     * 
     */
    @Import(name="customPlacementConfig")
      private final @Nullable Output<BucketCustomPlacementConfigArgs> customPlacementConfig;

    public Output<BucketCustomPlacementConfigArgs> customPlacementConfig() {
        return this.customPlacementConfig == null ? Codegen.empty() : this.customPlacementConfig;
    }

    /**
     * The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
     * 
     */
    @Import(name="defaultEventBasedHold")
      private final @Nullable Output<Boolean> defaultEventBasedHold;

    public Output<Boolean> defaultEventBasedHold() {
        return this.defaultEventBasedHold == null ? Codegen.empty() : this.defaultEventBasedHold;
    }

    /**
     * Default access controls to apply to new objects when no ACL is provided.
     * 
     */
    @Import(name="defaultObjectAcl")
      private final @Nullable Output<List<ObjectAccessControlArgs>> defaultObjectAcl;

    public Output<List<ObjectAccessControlArgs>> defaultObjectAcl() {
        return this.defaultObjectAcl == null ? Codegen.empty() : this.defaultObjectAcl;
    }

    /**
     * Encryption configuration for a bucket.
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<BucketEncryptionArgs> encryption;

    public Output<BucketEncryptionArgs> encryption() {
        return this.encryption == null ? Codegen.empty() : this.encryption;
    }

    /**
     * HTTP 1.1 Entity tag for the bucket.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> etag() {
        return this.etag == null ? Codegen.empty() : this.etag;
    }

    /**
     * The bucket's IAM configuration.
     * 
     */
    @Import(name="iamConfiguration")
      private final @Nullable Output<BucketIamConfigurationArgs> iamConfiguration;

    public Output<BucketIamConfigurationArgs> iamConfiguration() {
        return this.iamConfiguration == null ? Codegen.empty() : this.iamConfiguration;
    }

    /**
     * The ID of the bucket. For buckets, the id and name properties are the same.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The kind of item this is. For buckets, this is always storage#bucket.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * User-provided labels, in key/value pairs.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The bucket's lifecycle configuration. See lifecycle management for more information.
     * 
     */
    @Import(name="lifecycle")
      private final @Nullable Output<BucketLifecycleArgs> lifecycle;

    public Output<BucketLifecycleArgs> lifecycle() {
        return this.lifecycle == null ? Codegen.empty() : this.lifecycle;
    }

    /**
     * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The type of the bucket location.
     * 
     */
    @Import(name="locationType")
      private final @Nullable Output<String> locationType;

    public Output<String> locationType() {
        return this.locationType == null ? Codegen.empty() : this.locationType;
    }

    /**
     * The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
     * 
     */
    @Import(name="logging")
      private final @Nullable Output<BucketLoggingArgs> logging;

    public Output<BucketLoggingArgs> logging() {
        return this.logging == null ? Codegen.empty() : this.logging;
    }

    /**
     * The metadata generation of this bucket.
     * 
     */
    @Import(name="metageneration")
      private final @Nullable Output<String> metageneration;

    public Output<String> metageneration() {
        return this.metageneration == null ? Codegen.empty() : this.metageneration;
    }

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The owner of the bucket. This is always the project team's owner group.
     * 
     */
    @Import(name="owner")
      private final @Nullable Output<BucketOwnerArgs> owner;

    public Output<BucketOwnerArgs> owner() {
        return this.owner == null ? Codegen.empty() : this.owner;
    }

    @Import(name="predefinedAcl")
      private final @Nullable Output<String> predefinedAcl;

    public Output<String> predefinedAcl() {
        return this.predefinedAcl == null ? Codegen.empty() : this.predefinedAcl;
    }

    @Import(name="predefinedDefaultObjectAcl")
      private final @Nullable Output<String> predefinedDefaultObjectAcl;

    public Output<String> predefinedDefaultObjectAcl() {
        return this.predefinedDefaultObjectAcl == null ? Codegen.empty() : this.predefinedDefaultObjectAcl;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The project number of the project the bucket belongs to.
     * 
     */
    @Import(name="projectNumber")
      private final @Nullable Output<String> projectNumber;

    public Output<String> projectNumber() {
        return this.projectNumber == null ? Codegen.empty() : this.projectNumber;
    }

    @Import(name="projection")
      private final @Nullable Output<String> projection;

    public Output<String> projection() {
        return this.projection == null ? Codegen.empty() : this.projection;
    }

    @Import(name="provisionalUserProject")
      private final @Nullable Output<String> provisionalUserProject;

    public Output<String> provisionalUserProject() {
        return this.provisionalUserProject == null ? Codegen.empty() : this.provisionalUserProject;
    }

    /**
     * The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     * 
     */
    @Import(name="retentionPolicy")
      private final @Nullable Output<BucketRetentionPolicyArgs> retentionPolicy;

    public Output<BucketRetentionPolicyArgs> retentionPolicy() {
        return this.retentionPolicy == null ? Codegen.empty() : this.retentionPolicy;
    }

    /**
     * The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
     * 
     */
    @Import(name="rpo")
      private final @Nullable Output<String> rpo;

    public Output<String> rpo() {
        return this.rpo == null ? Codegen.empty() : this.rpo;
    }

    /**
     * Reserved for future use.
     * 
     */
    @Import(name="satisfiesPZS")
      private final @Nullable Output<Boolean> satisfiesPZS;

    public Output<Boolean> satisfiesPZS() {
        return this.satisfiesPZS == null ? Codegen.empty() : this.satisfiesPZS;
    }

    /**
     * The URI of this bucket.
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> selfLink() {
        return this.selfLink == null ? Codegen.empty() : this.selfLink;
    }

    /**
     * The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
     * 
     */
    @Import(name="storageClass")
      private final @Nullable Output<String> storageClass;

    public Output<String> storageClass() {
        return this.storageClass == null ? Codegen.empty() : this.storageClass;
    }

    /**
     * The creation time of the bucket in RFC 3339 format.
     * 
     */
    @Import(name="timeCreated")
      private final @Nullable Output<String> timeCreated;

    public Output<String> timeCreated() {
        return this.timeCreated == null ? Codegen.empty() : this.timeCreated;
    }

    /**
     * The modification time of the bucket in RFC 3339 format.
     * 
     */
    @Import(name="updated")
      private final @Nullable Output<String> updated;

    public Output<String> updated() {
        return this.updated == null ? Codegen.empty() : this.updated;
    }

    @Import(name="userProject")
      private final @Nullable Output<String> userProject;

    public Output<String> userProject() {
        return this.userProject == null ? Codegen.empty() : this.userProject;
    }

    /**
     * The bucket's versioning configuration.
     * 
     */
    @Import(name="versioning")
      private final @Nullable Output<BucketVersioningArgs> versioning;

    public Output<BucketVersioningArgs> versioning() {
        return this.versioning == null ? Codegen.empty() : this.versioning;
    }

    /**
     * The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
     * 
     */
    @Import(name="website")
      private final @Nullable Output<BucketWebsiteArgs> website;

    public Output<BucketWebsiteArgs> website() {
        return this.website == null ? Codegen.empty() : this.website;
    }

    public BucketArgs(
        @Nullable Output<List<BucketAccessControlArgs>> acl,
        @Nullable Output<BucketAutoclassArgs> autoclass,
        @Nullable Output<BucketBillingArgs> billing,
        @Nullable Output<List<BucketCorsItemArgs>> cors,
        @Nullable Output<BucketCustomPlacementConfigArgs> customPlacementConfig,
        @Nullable Output<Boolean> defaultEventBasedHold,
        @Nullable Output<List<ObjectAccessControlArgs>> defaultObjectAcl,
        @Nullable Output<BucketEncryptionArgs> encryption,
        @Nullable Output<String> etag,
        @Nullable Output<BucketIamConfigurationArgs> iamConfiguration,
        @Nullable Output<String> id,
        @Nullable Output<String> kind,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<BucketLifecycleArgs> lifecycle,
        @Nullable Output<String> location,
        @Nullable Output<String> locationType,
        @Nullable Output<BucketLoggingArgs> logging,
        @Nullable Output<String> metageneration,
        @Nullable Output<String> name,
        @Nullable Output<BucketOwnerArgs> owner,
        @Nullable Output<String> predefinedAcl,
        @Nullable Output<String> predefinedDefaultObjectAcl,
        @Nullable Output<String> project,
        @Nullable Output<String> projectNumber,
        @Nullable Output<String> projection,
        @Nullable Output<String> provisionalUserProject,
        @Nullable Output<BucketRetentionPolicyArgs> retentionPolicy,
        @Nullable Output<String> rpo,
        @Nullable Output<Boolean> satisfiesPZS,
        @Nullable Output<String> selfLink,
        @Nullable Output<String> storageClass,
        @Nullable Output<String> timeCreated,
        @Nullable Output<String> updated,
        @Nullable Output<String> userProject,
        @Nullable Output<BucketVersioningArgs> versioning,
        @Nullable Output<BucketWebsiteArgs> website) {
        this.acl = acl;
        this.autoclass = autoclass;
        this.billing = billing;
        this.cors = cors;
        this.customPlacementConfig = customPlacementConfig;
        this.defaultEventBasedHold = defaultEventBasedHold;
        this.defaultObjectAcl = defaultObjectAcl;
        this.encryption = encryption;
        this.etag = etag;
        this.iamConfiguration = iamConfiguration;
        this.id = id;
        this.kind = kind;
        this.labels = labels;
        this.lifecycle = lifecycle;
        this.location = location;
        this.locationType = locationType;
        this.logging = logging;
        this.metageneration = metageneration;
        this.name = name;
        this.owner = owner;
        this.predefinedAcl = predefinedAcl;
        this.predefinedDefaultObjectAcl = predefinedDefaultObjectAcl;
        this.project = project;
        this.projectNumber = projectNumber;
        this.projection = projection;
        this.provisionalUserProject = provisionalUserProject;
        this.retentionPolicy = retentionPolicy;
        this.rpo = rpo;
        this.satisfiesPZS = satisfiesPZS;
        this.selfLink = selfLink;
        this.storageClass = storageClass;
        this.timeCreated = timeCreated;
        this.updated = updated;
        this.userProject = userProject;
        this.versioning = versioning;
        this.website = website;
    }

    private BucketArgs() {
        this.acl = Codegen.empty();
        this.autoclass = Codegen.empty();
        this.billing = Codegen.empty();
        this.cors = Codegen.empty();
        this.customPlacementConfig = Codegen.empty();
        this.defaultEventBasedHold = Codegen.empty();
        this.defaultObjectAcl = Codegen.empty();
        this.encryption = Codegen.empty();
        this.etag = Codegen.empty();
        this.iamConfiguration = Codegen.empty();
        this.id = Codegen.empty();
        this.kind = Codegen.empty();
        this.labels = Codegen.empty();
        this.lifecycle = Codegen.empty();
        this.location = Codegen.empty();
        this.locationType = Codegen.empty();
        this.logging = Codegen.empty();
        this.metageneration = Codegen.empty();
        this.name = Codegen.empty();
        this.owner = Codegen.empty();
        this.predefinedAcl = Codegen.empty();
        this.predefinedDefaultObjectAcl = Codegen.empty();
        this.project = Codegen.empty();
        this.projectNumber = Codegen.empty();
        this.projection = Codegen.empty();
        this.provisionalUserProject = Codegen.empty();
        this.retentionPolicy = Codegen.empty();
        this.rpo = Codegen.empty();
        this.satisfiesPZS = Codegen.empty();
        this.selfLink = Codegen.empty();
        this.storageClass = Codegen.empty();
        this.timeCreated = Codegen.empty();
        this.updated = Codegen.empty();
        this.userProject = Codegen.empty();
        this.versioning = Codegen.empty();
        this.website = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BucketAccessControlArgs>> acl;
        private @Nullable Output<BucketAutoclassArgs> autoclass;
        private @Nullable Output<BucketBillingArgs> billing;
        private @Nullable Output<List<BucketCorsItemArgs>> cors;
        private @Nullable Output<BucketCustomPlacementConfigArgs> customPlacementConfig;
        private @Nullable Output<Boolean> defaultEventBasedHold;
        private @Nullable Output<List<ObjectAccessControlArgs>> defaultObjectAcl;
        private @Nullable Output<BucketEncryptionArgs> encryption;
        private @Nullable Output<String> etag;
        private @Nullable Output<BucketIamConfigurationArgs> iamConfiguration;
        private @Nullable Output<String> id;
        private @Nullable Output<String> kind;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<BucketLifecycleArgs> lifecycle;
        private @Nullable Output<String> location;
        private @Nullable Output<String> locationType;
        private @Nullable Output<BucketLoggingArgs> logging;
        private @Nullable Output<String> metageneration;
        private @Nullable Output<String> name;
        private @Nullable Output<BucketOwnerArgs> owner;
        private @Nullable Output<String> predefinedAcl;
        private @Nullable Output<String> predefinedDefaultObjectAcl;
        private @Nullable Output<String> project;
        private @Nullable Output<String> projectNumber;
        private @Nullable Output<String> projection;
        private @Nullable Output<String> provisionalUserProject;
        private @Nullable Output<BucketRetentionPolicyArgs> retentionPolicy;
        private @Nullable Output<String> rpo;
        private @Nullable Output<Boolean> satisfiesPZS;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<String> storageClass;
        private @Nullable Output<String> timeCreated;
        private @Nullable Output<String> updated;
        private @Nullable Output<String> userProject;
        private @Nullable Output<BucketVersioningArgs> versioning;
        private @Nullable Output<BucketWebsiteArgs> website;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.autoclass = defaults.autoclass;
    	      this.billing = defaults.billing;
    	      this.cors = defaults.cors;
    	      this.customPlacementConfig = defaults.customPlacementConfig;
    	      this.defaultEventBasedHold = defaults.defaultEventBasedHold;
    	      this.defaultObjectAcl = defaults.defaultObjectAcl;
    	      this.encryption = defaults.encryption;
    	      this.etag = defaults.etag;
    	      this.iamConfiguration = defaults.iamConfiguration;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.labels = defaults.labels;
    	      this.lifecycle = defaults.lifecycle;
    	      this.location = defaults.location;
    	      this.locationType = defaults.locationType;
    	      this.logging = defaults.logging;
    	      this.metageneration = defaults.metageneration;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.predefinedAcl = defaults.predefinedAcl;
    	      this.predefinedDefaultObjectAcl = defaults.predefinedDefaultObjectAcl;
    	      this.project = defaults.project;
    	      this.projectNumber = defaults.projectNumber;
    	      this.projection = defaults.projection;
    	      this.provisionalUserProject = defaults.provisionalUserProject;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.rpo = defaults.rpo;
    	      this.satisfiesPZS = defaults.satisfiesPZS;
    	      this.selfLink = defaults.selfLink;
    	      this.storageClass = defaults.storageClass;
    	      this.timeCreated = defaults.timeCreated;
    	      this.updated = defaults.updated;
    	      this.userProject = defaults.userProject;
    	      this.versioning = defaults.versioning;
    	      this.website = defaults.website;
        }

        public Builder acl(@Nullable Output<List<BucketAccessControlArgs>> acl) {
            this.acl = acl;
            return this;
        }
        public Builder acl(@Nullable List<BucketAccessControlArgs> acl) {
            this.acl = Codegen.ofNullable(acl);
            return this;
        }
        public Builder acl(BucketAccessControlArgs... acl) {
            return acl(List.of(acl));
        }
        public Builder autoclass(@Nullable Output<BucketAutoclassArgs> autoclass) {
            this.autoclass = autoclass;
            return this;
        }
        public Builder autoclass(@Nullable BucketAutoclassArgs autoclass) {
            this.autoclass = Codegen.ofNullable(autoclass);
            return this;
        }
        public Builder billing(@Nullable Output<BucketBillingArgs> billing) {
            this.billing = billing;
            return this;
        }
        public Builder billing(@Nullable BucketBillingArgs billing) {
            this.billing = Codegen.ofNullable(billing);
            return this;
        }
        public Builder cors(@Nullable Output<List<BucketCorsItemArgs>> cors) {
            this.cors = cors;
            return this;
        }
        public Builder cors(@Nullable List<BucketCorsItemArgs> cors) {
            this.cors = Codegen.ofNullable(cors);
            return this;
        }
        public Builder cors(BucketCorsItemArgs... cors) {
            return cors(List.of(cors));
        }
        public Builder customPlacementConfig(@Nullable Output<BucketCustomPlacementConfigArgs> customPlacementConfig) {
            this.customPlacementConfig = customPlacementConfig;
            return this;
        }
        public Builder customPlacementConfig(@Nullable BucketCustomPlacementConfigArgs customPlacementConfig) {
            this.customPlacementConfig = Codegen.ofNullable(customPlacementConfig);
            return this;
        }
        public Builder defaultEventBasedHold(@Nullable Output<Boolean> defaultEventBasedHold) {
            this.defaultEventBasedHold = defaultEventBasedHold;
            return this;
        }
        public Builder defaultEventBasedHold(@Nullable Boolean defaultEventBasedHold) {
            this.defaultEventBasedHold = Codegen.ofNullable(defaultEventBasedHold);
            return this;
        }
        public Builder defaultObjectAcl(@Nullable Output<List<ObjectAccessControlArgs>> defaultObjectAcl) {
            this.defaultObjectAcl = defaultObjectAcl;
            return this;
        }
        public Builder defaultObjectAcl(@Nullable List<ObjectAccessControlArgs> defaultObjectAcl) {
            this.defaultObjectAcl = Codegen.ofNullable(defaultObjectAcl);
            return this;
        }
        public Builder defaultObjectAcl(ObjectAccessControlArgs... defaultObjectAcl) {
            return defaultObjectAcl(List.of(defaultObjectAcl));
        }
        public Builder encryption(@Nullable Output<BucketEncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }
        public Builder encryption(@Nullable BucketEncryptionArgs encryption) {
            this.encryption = Codegen.ofNullable(encryption);
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Codegen.ofNullable(etag);
            return this;
        }
        public Builder iamConfiguration(@Nullable Output<BucketIamConfigurationArgs> iamConfiguration) {
            this.iamConfiguration = iamConfiguration;
            return this;
        }
        public Builder iamConfiguration(@Nullable BucketIamConfigurationArgs iamConfiguration) {
            this.iamConfiguration = Codegen.ofNullable(iamConfiguration);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder lifecycle(@Nullable Output<BucketLifecycleArgs> lifecycle) {
            this.lifecycle = lifecycle;
            return this;
        }
        public Builder lifecycle(@Nullable BucketLifecycleArgs lifecycle) {
            this.lifecycle = Codegen.ofNullable(lifecycle);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder locationType(@Nullable Output<String> locationType) {
            this.locationType = locationType;
            return this;
        }
        public Builder locationType(@Nullable String locationType) {
            this.locationType = Codegen.ofNullable(locationType);
            return this;
        }
        public Builder logging(@Nullable Output<BucketLoggingArgs> logging) {
            this.logging = logging;
            return this;
        }
        public Builder logging(@Nullable BucketLoggingArgs logging) {
            this.logging = Codegen.ofNullable(logging);
            return this;
        }
        public Builder metageneration(@Nullable Output<String> metageneration) {
            this.metageneration = metageneration;
            return this;
        }
        public Builder metageneration(@Nullable String metageneration) {
            this.metageneration = Codegen.ofNullable(metageneration);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder owner(@Nullable Output<BucketOwnerArgs> owner) {
            this.owner = owner;
            return this;
        }
        public Builder owner(@Nullable BucketOwnerArgs owner) {
            this.owner = Codegen.ofNullable(owner);
            return this;
        }
        public Builder predefinedAcl(@Nullable Output<String> predefinedAcl) {
            this.predefinedAcl = predefinedAcl;
            return this;
        }
        public Builder predefinedAcl(@Nullable String predefinedAcl) {
            this.predefinedAcl = Codegen.ofNullable(predefinedAcl);
            return this;
        }
        public Builder predefinedDefaultObjectAcl(@Nullable Output<String> predefinedDefaultObjectAcl) {
            this.predefinedDefaultObjectAcl = predefinedDefaultObjectAcl;
            return this;
        }
        public Builder predefinedDefaultObjectAcl(@Nullable String predefinedDefaultObjectAcl) {
            this.predefinedDefaultObjectAcl = Codegen.ofNullable(predefinedDefaultObjectAcl);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder projectNumber(@Nullable Output<String> projectNumber) {
            this.projectNumber = projectNumber;
            return this;
        }
        public Builder projectNumber(@Nullable String projectNumber) {
            this.projectNumber = Codegen.ofNullable(projectNumber);
            return this;
        }
        public Builder projection(@Nullable Output<String> projection) {
            this.projection = projection;
            return this;
        }
        public Builder projection(@Nullable String projection) {
            this.projection = Codegen.ofNullable(projection);
            return this;
        }
        public Builder provisionalUserProject(@Nullable Output<String> provisionalUserProject) {
            this.provisionalUserProject = provisionalUserProject;
            return this;
        }
        public Builder provisionalUserProject(@Nullable String provisionalUserProject) {
            this.provisionalUserProject = Codegen.ofNullable(provisionalUserProject);
            return this;
        }
        public Builder retentionPolicy(@Nullable Output<BucketRetentionPolicyArgs> retentionPolicy) {
            this.retentionPolicy = retentionPolicy;
            return this;
        }
        public Builder retentionPolicy(@Nullable BucketRetentionPolicyArgs retentionPolicy) {
            this.retentionPolicy = Codegen.ofNullable(retentionPolicy);
            return this;
        }
        public Builder rpo(@Nullable Output<String> rpo) {
            this.rpo = rpo;
            return this;
        }
        public Builder rpo(@Nullable String rpo) {
            this.rpo = Codegen.ofNullable(rpo);
            return this;
        }
        public Builder satisfiesPZS(@Nullable Output<Boolean> satisfiesPZS) {
            this.satisfiesPZS = satisfiesPZS;
            return this;
        }
        public Builder satisfiesPZS(@Nullable Boolean satisfiesPZS) {
            this.satisfiesPZS = Codegen.ofNullable(satisfiesPZS);
            return this;
        }
        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }
        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Codegen.ofNullable(selfLink);
            return this;
        }
        public Builder storageClass(@Nullable Output<String> storageClass) {
            this.storageClass = storageClass;
            return this;
        }
        public Builder storageClass(@Nullable String storageClass) {
            this.storageClass = Codegen.ofNullable(storageClass);
            return this;
        }
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = Codegen.ofNullable(timeCreated);
            return this;
        }
        public Builder updated(@Nullable Output<String> updated) {
            this.updated = updated;
            return this;
        }
        public Builder updated(@Nullable String updated) {
            this.updated = Codegen.ofNullable(updated);
            return this;
        }
        public Builder userProject(@Nullable Output<String> userProject) {
            this.userProject = userProject;
            return this;
        }
        public Builder userProject(@Nullable String userProject) {
            this.userProject = Codegen.ofNullable(userProject);
            return this;
        }
        public Builder versioning(@Nullable Output<BucketVersioningArgs> versioning) {
            this.versioning = versioning;
            return this;
        }
        public Builder versioning(@Nullable BucketVersioningArgs versioning) {
            this.versioning = Codegen.ofNullable(versioning);
            return this;
        }
        public Builder website(@Nullable Output<BucketWebsiteArgs> website) {
            this.website = website;
            return this;
        }
        public Builder website(@Nullable BucketWebsiteArgs website) {
            this.website = Codegen.ofNullable(website);
            return this;
        }        public BucketArgs build() {
            return new BucketArgs(acl, autoclass, billing, cors, customPlacementConfig, defaultEventBasedHold, defaultObjectAcl, encryption, etag, iamConfiguration, id, kind, labels, lifecycle, location, locationType, logging, metageneration, name, owner, predefinedAcl, predefinedDefaultObjectAcl, project, projectNumber, projection, provisionalUserProject, retentionPolicy, rpo, satisfiesPZS, selfLink, storageClass, timeCreated, updated, userProject, versioning, website);
        }
    }
}
