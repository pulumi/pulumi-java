// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1alpha1.inputs.InstanceStatusResponse;
import com.pulumi.googlenative.run_v1alpha1.inputs.JobConditionResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * JobStatus represents the current state of a Job.
 * 
 */
public final class JobStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobStatusResponse Empty = new JobStatusResponse();

    /**
     * Optional. The number of actively running instances. +optional
     * 
     */
    @Import(name="active", required=true)
    private Integer active;

    public Integer active() {
        return this.active;
    }

    /**
     * Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
     * 
     */
    @Import(name="completionTime", required=true)
    private String completionTime;

    public String completionTime() {
        return this.completionTime;
    }

    /**
     * Optional. The latest available observations of a job&#39;s current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
     * 
     */
    @Import(name="conditions", required=true)
    private List<JobConditionResponse> conditions;

    public List<JobConditionResponse> conditions() {
        return this.conditions;
    }

    /**
     * Optional. The number of instances which reached phase Failed. +optional
     * 
     */
    @Import(name="failed", required=true)
    private Integer failed;

    public Integer failed() {
        return this.failed;
    }

    /**
     * Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
     * 
     */
    @Import(name="imageDigest", required=true)
    private String imageDigest;

    public String imageDigest() {
        return this.imageDigest;
    }

    /**
     * Optional. Status of completed, failed, and running instances. +optional
     * 
     */
    @Import(name="instances", required=true)
    private List<InstanceStatusResponse> instances;

    public List<InstanceStatusResponse> instances() {
        return this.instances;
    }

    /**
     * Optional. The &#39;generation&#39; of the job that was last processed by the controller.
     * 
     */
    @Import(name="observedGeneration", required=true)
    private Integer observedGeneration;

    public Integer observedGeneration() {
        return this.observedGeneration;
    }

    /**
     * Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * Optional. The number of instances which reached phase Succeeded. +optional
     * 
     */
    @Import(name="succeeded", required=true)
    private Integer succeeded;

    public Integer succeeded() {
        return this.succeeded;
    }

    private JobStatusResponse() {}

    private JobStatusResponse(JobStatusResponse $) {
        this.active = $.active;
        this.completionTime = $.completionTime;
        this.conditions = $.conditions;
        this.failed = $.failed;
        this.imageDigest = $.imageDigest;
        this.instances = $.instances;
        this.observedGeneration = $.observedGeneration;
        this.startTime = $.startTime;
        this.succeeded = $.succeeded;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStatusResponse $;

        public Builder() {
            $ = new JobStatusResponse();
        }

        public Builder(JobStatusResponse defaults) {
            $ = new JobStatusResponse(Objects.requireNonNull(defaults));
        }

        public Builder active(Integer active) {
            $.active = active;
            return this;
        }

        public Builder completionTime(String completionTime) {
            $.completionTime = completionTime;
            return this;
        }

        public Builder conditions(List<JobConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(JobConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder failed(Integer failed) {
            $.failed = failed;
            return this;
        }

        public Builder imageDigest(String imageDigest) {
            $.imageDigest = imageDigest;
            return this;
        }

        public Builder instances(List<InstanceStatusResponse> instances) {
            $.instances = instances;
            return this;
        }

        public Builder instances(InstanceStatusResponse... instances) {
            return instances(List.of(instances));
        }

        public Builder observedGeneration(Integer observedGeneration) {
            $.observedGeneration = observedGeneration;
            return this;
        }

        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder succeeded(Integer succeeded) {
            $.succeeded = succeeded;
            return this;
        }

        public JobStatusResponse build() {
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.completionTime = Objects.requireNonNull($.completionTime, "expected parameter 'completionTime' to be non-null");
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.failed = Objects.requireNonNull($.failed, "expected parameter 'failed' to be non-null");
            $.imageDigest = Objects.requireNonNull($.imageDigest, "expected parameter 'imageDigest' to be non-null");
            $.instances = Objects.requireNonNull($.instances, "expected parameter 'instances' to be non-null");
            $.observedGeneration = Objects.requireNonNull($.observedGeneration, "expected parameter 'observedGeneration' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.succeeded = Objects.requireNonNull($.succeeded, "expected parameter 'succeeded' to be non-null");
            return $;
        }
    }

}
