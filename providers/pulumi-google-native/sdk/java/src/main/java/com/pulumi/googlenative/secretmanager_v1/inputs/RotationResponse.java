// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.secretmanager_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
 * 
 */
public final class RotationResponse extends com.pulumi.resources.InvokeArgs {

    public static final RotationResponse Empty = new RotationResponse();

    /**
     * Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
     * 
     */
    @Import(name="nextRotationTime", required=true)
    private String nextRotationTime;

    public String nextRotationTime() {
        return this.nextRotationTime;
    }

    /**
     * Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
     * 
     */
    @Import(name="rotationPeriod", required=true)
    private String rotationPeriod;

    public String rotationPeriod() {
        return this.rotationPeriod;
    }

    private RotationResponse() {}

    private RotationResponse(RotationResponse $) {
        this.nextRotationTime = $.nextRotationTime;
        this.rotationPeriod = $.rotationPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RotationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RotationResponse $;

        public Builder() {
            $ = new RotationResponse();
        }

        public Builder(RotationResponse defaults) {
            $ = new RotationResponse(Objects.requireNonNull(defaults));
        }

        public Builder nextRotationTime(String nextRotationTime) {
            $.nextRotationTime = nextRotationTime;
            return this;
        }

        public Builder rotationPeriod(String rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        public RotationResponse build() {
            $.nextRotationTime = Objects.requireNonNull($.nextRotationTime, "expected parameter 'nextRotationTime' to be non-null");
            $.rotationPeriod = Objects.requireNonNull($.rotationPeriod, "expected parameter 'rotationPeriod' to be non-null");
            return $;
        }
    }

}
