// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.iap.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DestGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DestGroupArgs Empty = new DestGroupArgs();

    /**
     * null List of CIDRs that this group applies to.
     * 
     */
    @Import(name="cidrs")
    private @Nullable Output<List<String>> cidrs;

    /**
     * @return null List of CIDRs that this group applies to.
     * 
     */
    public Optional<Output<List<String>>> cidrs() {
        return Optional.ofNullable(this.cidrs);
    }

    /**
     * null List of FQDNs that this group applies to.
     * 
     */
    @Import(name="fqdns")
    private @Nullable Output<List<String>> fqdns;

    /**
     * @return null List of FQDNs that this group applies to.
     * 
     */
    public Optional<Output<List<String>>> fqdns() {
        return Optional.ofNullable(this.fqdns);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Immutable. Identifier for the TunnelDestGroup. Must be unique within the project and contain only lower case letters (a-z) and dashes (-).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. Identifier for the TunnelDestGroup. Must be unique within the project and contain only lower case letters (a-z) and dashes (-).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. The ID to use for the TunnelDestGroup, which becomes the final component of the resource name. This value must be 4-63 characters, and valid characters are `[a-z]-`.
     * 
     */
    @Import(name="tunnelDestGroupId", required=true)
    private Output<String> tunnelDestGroupId;

    /**
     * @return Required. The ID to use for the TunnelDestGroup, which becomes the final component of the resource name. This value must be 4-63 characters, and valid characters are `[a-z]-`.
     * 
     */
    public Output<String> tunnelDestGroupId() {
        return this.tunnelDestGroupId;
    }

    private DestGroupArgs() {}

    private DestGroupArgs(DestGroupArgs $) {
        this.cidrs = $.cidrs;
        this.fqdns = $.fqdns;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.tunnelDestGroupId = $.tunnelDestGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DestGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DestGroupArgs $;

        public Builder() {
            $ = new DestGroupArgs();
        }

        public Builder(DestGroupArgs defaults) {
            $ = new DestGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrs null List of CIDRs that this group applies to.
         * 
         * @return builder
         * 
         */
        public Builder cidrs(@Nullable Output<List<String>> cidrs) {
            $.cidrs = cidrs;
            return this;
        }

        /**
         * @param cidrs null List of CIDRs that this group applies to.
         * 
         * @return builder
         * 
         */
        public Builder cidrs(List<String> cidrs) {
            return cidrs(Output.of(cidrs));
        }

        /**
         * @param cidrs null List of CIDRs that this group applies to.
         * 
         * @return builder
         * 
         */
        public Builder cidrs(String... cidrs) {
            return cidrs(List.of(cidrs));
        }

        /**
         * @param fqdns null List of FQDNs that this group applies to.
         * 
         * @return builder
         * 
         */
        public Builder fqdns(@Nullable Output<List<String>> fqdns) {
            $.fqdns = fqdns;
            return this;
        }

        /**
         * @param fqdns null List of FQDNs that this group applies to.
         * 
         * @return builder
         * 
         */
        public Builder fqdns(List<String> fqdns) {
            return fqdns(Output.of(fqdns));
        }

        /**
         * @param fqdns null List of FQDNs that this group applies to.
         * 
         * @return builder
         * 
         */
        public Builder fqdns(String... fqdns) {
            return fqdns(List.of(fqdns));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Immutable. Identifier for the TunnelDestGroup. Must be unique within the project and contain only lower case letters (a-z) and dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. Identifier for the TunnelDestGroup. Must be unique within the project and contain only lower case letters (a-z) and dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tunnelDestGroupId Required. The ID to use for the TunnelDestGroup, which becomes the final component of the resource name. This value must be 4-63 characters, and valid characters are `[a-z]-`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestGroupId(Output<String> tunnelDestGroupId) {
            $.tunnelDestGroupId = tunnelDestGroupId;
            return this;
        }

        /**
         * @param tunnelDestGroupId Required. The ID to use for the TunnelDestGroup, which becomes the final component of the resource name. This value must be 4-63 characters, and valid characters are `[a-z]-`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestGroupId(String tunnelDestGroupId) {
            return tunnelDestGroupId(Output.of(tunnelDestGroupId));
        }

        public DestGroupArgs build() {
            $.tunnelDestGroupId = Objects.requireNonNull($.tunnelDestGroupId, "expected parameter 'tunnelDestGroupId' to be non-null");
            return $;
        }
    }

}
