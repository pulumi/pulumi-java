// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service.
 * 
 */
public final class GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse Empty = new GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse();

    /**
     * Generic Service configuration of this webhook.
     * 
     */
    @Import(name="genericWebService", required=true)
    private GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse genericWebService;

    /**
     * @return Generic Service configuration of this webhook.
     * 
     */
    public GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse genericWebService() {
        return this.genericWebService;
    }

    /**
     * The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.
     * 
     */
    @Import(name="service", required=true)
    private String service;

    /**
     * @return The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.
     * 
     */
    public String service() {
        return this.service;
    }

    private GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse() {}

    private GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse(GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse $) {
        this.genericWebService = $.genericWebService;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param genericWebService Generic Service configuration of this webhook.
         * 
         * @return builder
         * 
         */
        public Builder genericWebService(GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse genericWebService) {
            $.genericWebService = genericWebService;
            return this;
        }

        /**
         * @param service The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            $.service = service;
            return this;
        }

        public GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse build() {
            $.genericWebService = Objects.requireNonNull($.genericWebService, "expected parameter 'genericWebService' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
