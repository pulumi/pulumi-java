// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.enums.PickTimeSeriesFilterDirection;
import com.pulumi.googlenative.monitoring.v1.enums.PickTimeSeriesFilterRankingMethod;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.
 * 
 */
public final class PickTimeSeriesFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final PickTimeSeriesFilterArgs Empty = new PickTimeSeriesFilterArgs();

    /**
     * How to use the ranking to select time series that pass through the filter.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<PickTimeSeriesFilterDirection> direction;

    /**
     * @return How to use the ranking to select time series that pass through the filter.
     * 
     */
    public Optional<Output<PickTimeSeriesFilterDirection>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * How many time series to allow to pass through the filter.
     * 
     */
    @Import(name="numTimeSeries")
    private @Nullable Output<Integer> numTimeSeries;

    /**
     * @return How many time series to allow to pass through the filter.
     * 
     */
    public Optional<Output<Integer>> numTimeSeries() {
        return Optional.ofNullable(this.numTimeSeries);
    }

    /**
     * ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
     * 
     */
    @Import(name="rankingMethod")
    private @Nullable Output<PickTimeSeriesFilterRankingMethod> rankingMethod;

    /**
     * @return ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
     * 
     */
    public Optional<Output<PickTimeSeriesFilterRankingMethod>> rankingMethod() {
        return Optional.ofNullable(this.rankingMethod);
    }

    private PickTimeSeriesFilterArgs() {}

    private PickTimeSeriesFilterArgs(PickTimeSeriesFilterArgs $) {
        this.direction = $.direction;
        this.numTimeSeries = $.numTimeSeries;
        this.rankingMethod = $.rankingMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PickTimeSeriesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PickTimeSeriesFilterArgs $;

        public Builder() {
            $ = new PickTimeSeriesFilterArgs();
        }

        public Builder(PickTimeSeriesFilterArgs defaults) {
            $ = new PickTimeSeriesFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction How to use the ranking to select time series that pass through the filter.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<PickTimeSeriesFilterDirection> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction How to use the ranking to select time series that pass through the filter.
         * 
         * @return builder
         * 
         */
        public Builder direction(PickTimeSeriesFilterDirection direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param numTimeSeries How many time series to allow to pass through the filter.
         * 
         * @return builder
         * 
         */
        public Builder numTimeSeries(@Nullable Output<Integer> numTimeSeries) {
            $.numTimeSeries = numTimeSeries;
            return this;
        }

        /**
         * @param numTimeSeries How many time series to allow to pass through the filter.
         * 
         * @return builder
         * 
         */
        public Builder numTimeSeries(Integer numTimeSeries) {
            return numTimeSeries(Output.of(numTimeSeries));
        }

        /**
         * @param rankingMethod ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
         * 
         * @return builder
         * 
         */
        public Builder rankingMethod(@Nullable Output<PickTimeSeriesFilterRankingMethod> rankingMethod) {
            $.rankingMethod = rankingMethod;
            return this;
        }

        /**
         * @param rankingMethod ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
         * 
         * @return builder
         * 
         */
        public Builder rankingMethod(PickTimeSeriesFilterRankingMethod rankingMethod) {
            return rankingMethod(Output.of(rankingMethod));
        }

        public PickTimeSeriesFilterArgs build() {
            return $;
        }
    }

}
