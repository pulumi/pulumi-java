// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
 * 
 */
public final class BitbucketServerRepositoryIdResponse extends com.pulumi.resources.InvokeArgs {

    public static final BitbucketServerRepositoryIdResponse Empty = new BitbucketServerRepositoryIdResponse();

    /**
     * Identifier for the project storing the repository.
     * 
     */
    @Import(name="projectKey", required=true)
    private String projectKey;

    /**
     * @return Identifier for the project storing the repository.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }

    /**
     * Identifier for the repository.
     * 
     */
    @Import(name="repoSlug", required=true)
    private String repoSlug;

    /**
     * @return Identifier for the repository.
     * 
     */
    public String repoSlug() {
        return this.repoSlug;
    }

    /**
     * The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
     * 
     */
    @Import(name="webhookId", required=true)
    private Integer webhookId;

    /**
     * @return The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
     * 
     */
    public Integer webhookId() {
        return this.webhookId;
    }

    private BitbucketServerRepositoryIdResponse() {}

    private BitbucketServerRepositoryIdResponse(BitbucketServerRepositoryIdResponse $) {
        this.projectKey = $.projectKey;
        this.repoSlug = $.repoSlug;
        this.webhookId = $.webhookId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BitbucketServerRepositoryIdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BitbucketServerRepositoryIdResponse $;

        public Builder() {
            $ = new BitbucketServerRepositoryIdResponse();
        }

        public Builder(BitbucketServerRepositoryIdResponse defaults) {
            $ = new BitbucketServerRepositoryIdResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectKey Identifier for the project storing the repository.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param repoSlug Identifier for the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoSlug(String repoSlug) {
            $.repoSlug = repoSlug;
            return this;
        }

        /**
         * @param webhookId The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
         * 
         * @return builder
         * 
         */
        public Builder webhookId(Integer webhookId) {
            $.webhookId = webhookId;
            return this;
        }

        public BitbucketServerRepositoryIdResponse build() {
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            $.repoSlug = Objects.requireNonNull($.repoSlug, "expected parameter 'repoSlug' to be non-null");
            $.webhookId = Objects.requireNonNull($.webhookId, "expected parameter 'webhookId' to be non-null");
            return $;
        }
    }

}
