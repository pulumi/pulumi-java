// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The VPC Peering configuration is used to create VPC peering between Datastream and the consumer&#39;s VPC.
 * 
 */
public final class VpcPeeringConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcPeeringConfigArgs Empty = new VpcPeeringConfigArgs();

    /**
     * A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
     * 
     */
    @Import(name="subnet", required=true)
    private Output<String> subnet;

    /**
     * @return A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
     * 
     */
    public Output<String> subnet() {
        return this.subnet;
    }

    /**
     * Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
     * 
     */
    @Import(name="vpc", required=true)
    private Output<String> vpc;

    /**
     * @return Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
     * 
     */
    public Output<String> vpc() {
        return this.vpc;
    }

    private VpcPeeringConfigArgs() {}

    private VpcPeeringConfigArgs(VpcPeeringConfigArgs $) {
        this.subnet = $.subnet;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcPeeringConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcPeeringConfigArgs $;

        public Builder() {
            $ = new VpcPeeringConfigArgs();
        }

        public Builder(VpcPeeringConfigArgs defaults) {
            $ = new VpcPeeringConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param subnet A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
         * 
         * @return builder
         * 
         */
        public Builder subnet(Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param vpc Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
         * 
         * @return builder
         * 
         */
        public Builder vpc(Output<String> vpc) {
            $.vpc = vpc;
            return this;
        }

        /**
         * @param vpc Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
         * 
         * @return builder
         * 
         */
        public Builder vpc(String vpc) {
            return vpc(Output.of(vpc));
        }

        public VpcPeeringConfigArgs build() {
            $.subnet = Objects.requireNonNull($.subnet, "expected parameter 'subnet' to be non-null");
            $.vpc = Objects.requireNonNull($.vpc, "expected parameter 'vpc' to be non-null");
            return $;
        }
    }

}
