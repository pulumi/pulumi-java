// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2ConditionResponse;
import java.util.List;
import java.util.Objects;


/**
 * A collection of conditions.
 * 
 */
public final class GooglePrivacyDlpV2ConditionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2ConditionsResponse Empty = new GooglePrivacyDlpV2ConditionsResponse();

    /**
     * A collection of conditions.
     * 
     */
    @Import(name="conditions", required=true)
    private List<GooglePrivacyDlpV2ConditionResponse> conditions;

    /**
     * @return A collection of conditions.
     * 
     */
    public List<GooglePrivacyDlpV2ConditionResponse> conditions() {
        return this.conditions;
    }

    private GooglePrivacyDlpV2ConditionsResponse() {}

    private GooglePrivacyDlpV2ConditionsResponse(GooglePrivacyDlpV2ConditionsResponse $) {
        this.conditions = $.conditions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2ConditionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2ConditionsResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2ConditionsResponse();
        }

        public Builder(GooglePrivacyDlpV2ConditionsResponse defaults) {
            $ = new GooglePrivacyDlpV2ConditionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions A collection of conditions.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<GooglePrivacyDlpV2ConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions A collection of conditions.
         * 
         * @return builder
         * 
         */
        public Builder conditions(GooglePrivacyDlpV2ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        public GooglePrivacyDlpV2ConditionsResponse build() {
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            return $;
        }
    }

}
