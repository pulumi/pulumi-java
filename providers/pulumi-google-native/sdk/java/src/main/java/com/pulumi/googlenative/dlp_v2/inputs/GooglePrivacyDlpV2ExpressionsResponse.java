// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2ConditionsResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An expression, consisting or an operator and conditions.
 * 
 */
public final class GooglePrivacyDlpV2ExpressionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2ExpressionsResponse Empty = new GooglePrivacyDlpV2ExpressionsResponse();

    /**
     * Conditions to apply to the expression.
     * 
     */
    @Import(name="conditions", required=true)
    private GooglePrivacyDlpV2ConditionsResponse conditions;

    /**
     * @return Conditions to apply to the expression.
     * 
     */
    public GooglePrivacyDlpV2ConditionsResponse conditions() {
        return this.conditions;
    }

    /**
     * The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
     * 
     */
    @Import(name="logicalOperator", required=true)
    private String logicalOperator;

    /**
     * @return The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
     * 
     */
    public String logicalOperator() {
        return this.logicalOperator;
    }

    private GooglePrivacyDlpV2ExpressionsResponse() {}

    private GooglePrivacyDlpV2ExpressionsResponse(GooglePrivacyDlpV2ExpressionsResponse $) {
        this.conditions = $.conditions;
        this.logicalOperator = $.logicalOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2ExpressionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2ExpressionsResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2ExpressionsResponse();
        }

        public Builder(GooglePrivacyDlpV2ExpressionsResponse defaults) {
            $ = new GooglePrivacyDlpV2ExpressionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions Conditions to apply to the expression.
         * 
         * @return builder
         * 
         */
        public Builder conditions(GooglePrivacyDlpV2ConditionsResponse conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param logicalOperator The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
         * 
         * @return builder
         * 
         */
        public Builder logicalOperator(String logicalOperator) {
            $.logicalOperator = logicalOperator;
            return this;
        }

        public GooglePrivacyDlpV2ExpressionsResponse build() {
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.logicalOperator = Objects.requireNonNull($.logicalOperator, "expected parameter 'logicalOperator' to be non-null");
            return $;
        }
    }

}
