// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.eventarc_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Represents a Pub/Sub transport.
 * 
 */
public final class PubsubResponse extends com.pulumi.resources.InvokeArgs {

    public static final PubsubResponse Empty = new PubsubResponse();

    /**
     * The name of the Pub/Sub subscription created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
     * 
     */
    @Import(name="subscription", required=true)
    private String subscription;

    /**
     * @return The name of the Pub/Sub subscription created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
     * 
     */
    public String subscription() {
        return this.subscription;
    }

    /**
     * Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
     * 
     */
    @Import(name="topic", required=true)
    private String topic;

    /**
     * @return Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
     * 
     */
    public String topic() {
        return this.topic;
    }

    private PubsubResponse() {}

    private PubsubResponse(PubsubResponse $) {
        this.subscription = $.subscription;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PubsubResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PubsubResponse $;

        public Builder() {
            $ = new PubsubResponse();
        }

        public Builder(PubsubResponse defaults) {
            $ = new PubsubResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param subscription The name of the Pub/Sub subscription created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
         * 
         * @return builder
         * 
         */
        public Builder subscription(String subscription) {
            $.subscription = subscription;
            return this;
        }

        /**
         * @param topic Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            $.topic = topic;
            return this;
        }

        public PubsubResponse build() {
            $.subscription = Objects.requireNonNull($.subscription, "expected parameter 'subscription' to be non-null");
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
