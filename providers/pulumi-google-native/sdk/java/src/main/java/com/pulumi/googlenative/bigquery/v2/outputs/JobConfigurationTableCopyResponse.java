// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.bigquery.v2.outputs.EncryptionConfigurationResponse;
import com.pulumi.googlenative.bigquery.v2.outputs.TableReferenceResponse;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class JobConfigurationTableCopyResponse {
    /**
     * @return [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    private final String createDisposition;
    /**
     * @return Custom encryption configuration (e.g., Cloud KMS keys).
     * 
     */
    private final EncryptionConfigurationResponse destinationEncryptionConfiguration;
    /**
     * @return [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
     * 
     */
    private final Object destinationExpirationTime;
    /**
     * @return [Required] The destination table
     * 
     */
    private final TableReferenceResponse destinationTable;
    /**
     * @return [Optional] Supported operation types in table copy job.
     * 
     */
    private final String operationType;
    /**
     * @return [Pick one] Source table to copy.
     * 
     */
    private final TableReferenceResponse sourceTable;
    /**
     * @return [Pick one] Source tables to copy.
     * 
     */
    private final List<TableReferenceResponse> sourceTables;
    /**
     * @return [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    private final String writeDisposition;

    @CustomType.Constructor
    private JobConfigurationTableCopyResponse(
        @CustomType.Parameter("createDisposition") String createDisposition,
        @CustomType.Parameter("destinationEncryptionConfiguration") EncryptionConfigurationResponse destinationEncryptionConfiguration,
        @CustomType.Parameter("destinationExpirationTime") Object destinationExpirationTime,
        @CustomType.Parameter("destinationTable") TableReferenceResponse destinationTable,
        @CustomType.Parameter("operationType") String operationType,
        @CustomType.Parameter("sourceTable") TableReferenceResponse sourceTable,
        @CustomType.Parameter("sourceTables") List<TableReferenceResponse> sourceTables,
        @CustomType.Parameter("writeDisposition") String writeDisposition) {
        this.createDisposition = createDisposition;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationExpirationTime = destinationExpirationTime;
        this.destinationTable = destinationTable;
        this.operationType = operationType;
        this.sourceTable = sourceTable;
        this.sourceTables = sourceTables;
        this.writeDisposition = writeDisposition;
    }

    /**
     * @return [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    public String createDisposition() {
        return this.createDisposition;
    }
    /**
     * @return Custom encryption configuration (e.g., Cloud KMS keys).
     * 
     */
    public EncryptionConfigurationResponse destinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration;
    }
    /**
     * @return [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
     * 
     */
    public Object destinationExpirationTime() {
        return this.destinationExpirationTime;
    }
    /**
     * @return [Required] The destination table
     * 
     */
    public TableReferenceResponse destinationTable() {
        return this.destinationTable;
    }
    /**
     * @return [Optional] Supported operation types in table copy job.
     * 
     */
    public String operationType() {
        return this.operationType;
    }
    /**
     * @return [Pick one] Source table to copy.
     * 
     */
    public TableReferenceResponse sourceTable() {
        return this.sourceTable;
    }
    /**
     * @return [Pick one] Source tables to copy.
     * 
     */
    public List<TableReferenceResponse> sourceTables() {
        return this.sourceTables;
    }
    /**
     * @return [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    public String writeDisposition() {
        return this.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigurationTableCopyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createDisposition;
        private EncryptionConfigurationResponse destinationEncryptionConfiguration;
        private Object destinationExpirationTime;
        private TableReferenceResponse destinationTable;
        private String operationType;
        private TableReferenceResponse sourceTable;
        private List<TableReferenceResponse> sourceTables;
        private String writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigurationTableCopyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDisposition = defaults.createDisposition;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationExpirationTime = defaults.destinationExpirationTime;
    	      this.destinationTable = defaults.destinationTable;
    	      this.operationType = defaults.operationType;
    	      this.sourceTable = defaults.sourceTable;
    	      this.sourceTables = defaults.sourceTables;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder createDisposition(String createDisposition) {
            this.createDisposition = Objects.requireNonNull(createDisposition);
            return this;
        }
        public Builder destinationEncryptionConfiguration(EncryptionConfigurationResponse destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Objects.requireNonNull(destinationEncryptionConfiguration);
            return this;
        }
        public Builder destinationExpirationTime(Object destinationExpirationTime) {
            this.destinationExpirationTime = Objects.requireNonNull(destinationExpirationTime);
            return this;
        }
        public Builder destinationTable(TableReferenceResponse destinationTable) {
            this.destinationTable = Objects.requireNonNull(destinationTable);
            return this;
        }
        public Builder operationType(String operationType) {
            this.operationType = Objects.requireNonNull(operationType);
            return this;
        }
        public Builder sourceTable(TableReferenceResponse sourceTable) {
            this.sourceTable = Objects.requireNonNull(sourceTable);
            return this;
        }
        public Builder sourceTables(List<TableReferenceResponse> sourceTables) {
            this.sourceTables = Objects.requireNonNull(sourceTables);
            return this;
        }
        public Builder sourceTables(TableReferenceResponse... sourceTables) {
            return sourceTables(List.of(sourceTables));
        }
        public Builder writeDisposition(String writeDisposition) {
            this.writeDisposition = Objects.requireNonNull(writeDisposition);
            return this;
        }        public JobConfigurationTableCopyResponse build() {
            return new JobConfigurationTableCopyResponse(createDisposition, destinationEncryptionConfiguration, destinationExpirationTime, destinationTable, operationType, sourceTable, sourceTables, writeDisposition);
        }
    }
}
