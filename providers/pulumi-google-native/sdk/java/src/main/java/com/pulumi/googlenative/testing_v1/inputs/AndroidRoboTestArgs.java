// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.enums.AndroidRoboTestRoboMode;
import com.pulumi.googlenative.testing_v1.inputs.AppBundleArgs;
import com.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import com.pulumi.googlenative.testing_v1.inputs.RoboDirectiveArgs;
import com.pulumi.googlenative.testing_v1.inputs.RoboStartingIntentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
 * 
 */
public final class AndroidRoboTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final AndroidRoboTestArgs Empty = new AndroidRoboTestArgs();

    /**
     * The APK for the application under test.
     * 
     */
    @Import(name="appApk")
    private @Nullable Output<FileReferenceArgs> appApk;

    public Optional<Output<FileReferenceArgs>> appApk() {
        return Optional.ofNullable(this.appApk);
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @Import(name="appBundle")
    private @Nullable Output<AppBundleArgs> appBundle;

    public Optional<Output<AppBundleArgs>> appBundle() {
        return Optional.ofNullable(this.appBundle);
    }

    /**
     * The initial activity that should be used to start the app.
     * 
     */
    @Import(name="appInitialActivity")
    private @Nullable Output<String> appInitialActivity;

    public Optional<Output<String>> appInitialActivity() {
        return Optional.ofNullable(this.appInitialActivity);
    }

    /**
     * The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="appPackageId")
    private @Nullable Output<String> appPackageId;

    public Optional<Output<String>> appPackageId() {
        return Optional.ofNullable(this.appPackageId);
    }

    /**
     * A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
     * 
     */
    @Import(name="roboDirectives")
    private @Nullable Output<List<RoboDirectiveArgs>> roboDirectives;

    public Optional<Output<List<RoboDirectiveArgs>>> roboDirectives() {
        return Optional.ofNullable(this.roboDirectives);
    }

    /**
     * The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
     * 
     */
    @Import(name="roboMode")
    private @Nullable Output<AndroidRoboTestRoboMode> roboMode;

    public Optional<Output<AndroidRoboTestRoboMode>> roboMode() {
        return Optional.ofNullable(this.roboMode);
    }

    /**
     * A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
     * 
     */
    @Import(name="roboScript")
    private @Nullable Output<FileReferenceArgs> roboScript;

    public Optional<Output<FileReferenceArgs>> roboScript() {
        return Optional.ofNullable(this.roboScript);
    }

    /**
     * The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
     * 
     */
    @Import(name="startingIntents")
    private @Nullable Output<List<RoboStartingIntentArgs>> startingIntents;

    public Optional<Output<List<RoboStartingIntentArgs>>> startingIntents() {
        return Optional.ofNullable(this.startingIntents);
    }

    private AndroidRoboTestArgs() {}

    private AndroidRoboTestArgs(AndroidRoboTestArgs $) {
        this.appApk = $.appApk;
        this.appBundle = $.appBundle;
        this.appInitialActivity = $.appInitialActivity;
        this.appPackageId = $.appPackageId;
        this.roboDirectives = $.roboDirectives;
        this.roboMode = $.roboMode;
        this.roboScript = $.roboScript;
        this.startingIntents = $.startingIntents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidRoboTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidRoboTestArgs $;

        public Builder() {
            $ = new AndroidRoboTestArgs();
        }

        public Builder(AndroidRoboTestArgs defaults) {
            $ = new AndroidRoboTestArgs(Objects.requireNonNull(defaults));
        }

        public Builder appApk(@Nullable Output<FileReferenceArgs> appApk) {
            $.appApk = appApk;
            return this;
        }

        public Builder appApk(FileReferenceArgs appApk) {
            return appApk(Output.of(appApk));
        }

        public Builder appBundle(@Nullable Output<AppBundleArgs> appBundle) {
            $.appBundle = appBundle;
            return this;
        }

        public Builder appBundle(AppBundleArgs appBundle) {
            return appBundle(Output.of(appBundle));
        }

        public Builder appInitialActivity(@Nullable Output<String> appInitialActivity) {
            $.appInitialActivity = appInitialActivity;
            return this;
        }

        public Builder appInitialActivity(String appInitialActivity) {
            return appInitialActivity(Output.of(appInitialActivity));
        }

        public Builder appPackageId(@Nullable Output<String> appPackageId) {
            $.appPackageId = appPackageId;
            return this;
        }

        public Builder appPackageId(String appPackageId) {
            return appPackageId(Output.of(appPackageId));
        }

        public Builder roboDirectives(@Nullable Output<List<RoboDirectiveArgs>> roboDirectives) {
            $.roboDirectives = roboDirectives;
            return this;
        }

        public Builder roboDirectives(List<RoboDirectiveArgs> roboDirectives) {
            return roboDirectives(Output.of(roboDirectives));
        }

        public Builder roboDirectives(RoboDirectiveArgs... roboDirectives) {
            return roboDirectives(List.of(roboDirectives));
        }

        public Builder roboMode(@Nullable Output<AndroidRoboTestRoboMode> roboMode) {
            $.roboMode = roboMode;
            return this;
        }

        public Builder roboMode(AndroidRoboTestRoboMode roboMode) {
            return roboMode(Output.of(roboMode));
        }

        public Builder roboScript(@Nullable Output<FileReferenceArgs> roboScript) {
            $.roboScript = roboScript;
            return this;
        }

        public Builder roboScript(FileReferenceArgs roboScript) {
            return roboScript(Output.of(roboScript));
        }

        public Builder startingIntents(@Nullable Output<List<RoboStartingIntentArgs>> startingIntents) {
            $.startingIntents = startingIntents;
            return this;
        }

        public Builder startingIntents(List<RoboStartingIntentArgs> startingIntents) {
            return startingIntents(Output.of(startingIntents));
        }

        public Builder startingIntents(RoboStartingIntentArgs... startingIntents) {
            return startingIntents(List.of(startingIntents));
        }

        public AndroidRoboTestArgs build() {
            return $;
        }
    }

}
