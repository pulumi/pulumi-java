// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream_v1.inputs.MysqlTableResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * MySQL database.
 * 
 */
public final class MysqlDatabaseResponse extends com.pulumi.resources.InvokeArgs {

    public static final MysqlDatabaseResponse Empty = new MysqlDatabaseResponse();

    /**
     * Database name.
     * 
     */
    @Import(name="database", required=true)
    private String database;

    public String database() {
        return this.database;
    }

    /**
     * Tables in the database.
     * 
     */
    @Import(name="mysqlTables", required=true)
    private List<MysqlTableResponse> mysqlTables;

    public List<MysqlTableResponse> mysqlTables() {
        return this.mysqlTables;
    }

    private MysqlDatabaseResponse() {}

    private MysqlDatabaseResponse(MysqlDatabaseResponse $) {
        this.database = $.database;
        this.mysqlTables = $.mysqlTables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlDatabaseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlDatabaseResponse $;

        public Builder() {
            $ = new MysqlDatabaseResponse();
        }

        public Builder(MysqlDatabaseResponse defaults) {
            $ = new MysqlDatabaseResponse(Objects.requireNonNull(defaults));
        }

        public Builder database(String database) {
            $.database = database;
            return this;
        }

        public Builder mysqlTables(List<MysqlTableResponse> mysqlTables) {
            $.mysqlTables = mysqlTables;
            return this;
        }

        public Builder mysqlTables(MysqlTableResponse... mysqlTables) {
            return mysqlTables(List.of(mysqlTables));
        }

        public MysqlDatabaseResponse build() {
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            $.mysqlTables = Objects.requireNonNull($.mysqlTables, "expected parameter 'mysqlTables' to be non-null");
            return $;
        }
    }

}
