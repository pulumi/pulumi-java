// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.PackageIssueResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.RelatedUrlResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Details of a vulnerability Occurrence.
 * 
 */
public final class GrafeasV1beta1VulnerabilityDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final GrafeasV1beta1VulnerabilityDetailsResponse Empty = new GrafeasV1beta1VulnerabilityDetailsResponse();

    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    @Import(name="cvssScore", required=true)
    private Double cvssScore;

    /**
     * @return The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    public Double cvssScore() {
        return this.cvssScore;
    }

    /**
     * The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity", required=true)
    private String effectiveSeverity;

    /**
     * @return The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    public String effectiveSeverity() {
        return this.effectiveSeverity;
    }

    /**
     * A detailed description of this vulnerability.
     * 
     */
    @Import(name="longDescription", required=true)
    private String longDescription;

    /**
     * @return A detailed description of this vulnerability.
     * 
     */
    public String longDescription() {
        return this.longDescription;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
    private List<PackageIssueResponse> packageIssue;

    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    public List<PackageIssueResponse> packageIssue() {
        return this.packageIssue;
    }

    /**
     * URLs related to this vulnerability.
     * 
     */
    @Import(name="relatedUrls", required=true)
    private List<RelatedUrlResponse> relatedUrls;

    /**
     * @return URLs related to this vulnerability.
     * 
     */
    public List<RelatedUrlResponse> relatedUrls() {
        return this.relatedUrls;
    }

    /**
     * The note provider assigned Severity of the vulnerability.
     * 
     */
    @Import(name="severity", required=true)
    private String severity;

    /**
     * @return The note provider assigned Severity of the vulnerability.
     * 
     */
    public String severity() {
        return this.severity;
    }

    /**
     * A one sentence description of this vulnerability.
     * 
     */
    @Import(name="shortDescription", required=true)
    private String shortDescription;

    /**
     * @return A one sentence description of this vulnerability.
     * 
     */
    public String shortDescription() {
        return this.shortDescription;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc)
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of package; whether native or non native(ruby gems, node.js packages etc)
     * 
     */
    public String type() {
        return this.type;
    }

    private GrafeasV1beta1VulnerabilityDetailsResponse() {}

    private GrafeasV1beta1VulnerabilityDetailsResponse(GrafeasV1beta1VulnerabilityDetailsResponse $) {
        this.cvssScore = $.cvssScore;
        this.effectiveSeverity = $.effectiveSeverity;
        this.longDescription = $.longDescription;
        this.packageIssue = $.packageIssue;
        this.relatedUrls = $.relatedUrls;
        this.severity = $.severity;
        this.shortDescription = $.shortDescription;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrafeasV1beta1VulnerabilityDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrafeasV1beta1VulnerabilityDetailsResponse $;

        public Builder() {
            $ = new GrafeasV1beta1VulnerabilityDetailsResponse();
        }

        public Builder(GrafeasV1beta1VulnerabilityDetailsResponse defaults) {
            $ = new GrafeasV1beta1VulnerabilityDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cvssScore The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
         * 
         * @return builder
         * 
         */
        public Builder cvssScore(Double cvssScore) {
            $.cvssScore = cvssScore;
            return this;
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(String effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        /**
         * @param longDescription A detailed description of this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder longDescription(String longDescription) {
            $.longDescription = longDescription;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(List<PackageIssueResponse> packageIssue) {
            $.packageIssue = packageIssue;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(PackageIssueResponse... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }

        /**
         * @param relatedUrls URLs related to this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder relatedUrls(List<RelatedUrlResponse> relatedUrls) {
            $.relatedUrls = relatedUrls;
            return this;
        }

        /**
         * @param relatedUrls URLs related to this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder relatedUrls(RelatedUrlResponse... relatedUrls) {
            return relatedUrls(List.of(relatedUrls));
        }

        /**
         * @param severity The note provider assigned Severity of the vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param shortDescription A one sentence description of this vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(String shortDescription) {
            $.shortDescription = shortDescription;
            return this;
        }

        /**
         * @param type The type of package; whether native or non native(ruby gems, node.js packages etc)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GrafeasV1beta1VulnerabilityDetailsResponse build() {
            $.cvssScore = Objects.requireNonNull($.cvssScore, "expected parameter 'cvssScore' to be non-null");
            $.effectiveSeverity = Objects.requireNonNull($.effectiveSeverity, "expected parameter 'effectiveSeverity' to be non-null");
            $.longDescription = Objects.requireNonNull($.longDescription, "expected parameter 'longDescription' to be non-null");
            $.packageIssue = Objects.requireNonNull($.packageIssue, "expected parameter 'packageIssue' to be non-null");
            $.relatedUrls = Objects.requireNonNull($.relatedUrls, "expected parameter 'relatedUrls' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.shortDescription = Objects.requireNonNull($.shortDescription, "expected parameter 'shortDescription' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
