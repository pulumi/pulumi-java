// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dns_v1beta2.inputs.DnsKeySpecResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ManagedZoneDnsSecConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedZoneDnsSecConfigResponse Empty = new ManagedZoneDnsSecConfigResponse();

    /**
     * Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
     * 
     */
    @Import(name="defaultKeySpecs", required=true)
    private List<DnsKeySpecResponse> defaultKeySpecs;

    /**
     * @return Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
     * 
     */
    public List<DnsKeySpecResponse> defaultKeySpecs() {
        return this.defaultKeySpecs;
    }

    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
     * 
     */
    @Import(name="nonExistence", required=true)
    private String nonExistence;

    /**
     * @return Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
     * 
     */
    public String nonExistence() {
        return this.nonExistence;
    }

    /**
     * Specifies whether DNSSEC is enabled, and what mode it is in.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Specifies whether DNSSEC is enabled, and what mode it is in.
     * 
     */
    public String state() {
        return this.state;
    }

    private ManagedZoneDnsSecConfigResponse() {}

    private ManagedZoneDnsSecConfigResponse(ManagedZoneDnsSecConfigResponse $) {
        this.defaultKeySpecs = $.defaultKeySpecs;
        this.kind = $.kind;
        this.nonExistence = $.nonExistence;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZoneDnsSecConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZoneDnsSecConfigResponse $;

        public Builder() {
            $ = new ManagedZoneDnsSecConfigResponse();
        }

        public Builder(ManagedZoneDnsSecConfigResponse defaults) {
            $ = new ManagedZoneDnsSecConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultKeySpecs Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeySpecs(List<DnsKeySpecResponse> defaultKeySpecs) {
            $.defaultKeySpecs = defaultKeySpecs;
            return this;
        }

        /**
         * @param defaultKeySpecs Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeySpecs(DnsKeySpecResponse... defaultKeySpecs) {
            return defaultKeySpecs(List.of(defaultKeySpecs));
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param nonExistence Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
         * 
         * @return builder
         * 
         */
        public Builder nonExistence(String nonExistence) {
            $.nonExistence = nonExistence;
            return this;
        }

        /**
         * @param state Specifies whether DNSSEC is enabled, and what mode it is in.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public ManagedZoneDnsSecConfigResponse build() {
            $.defaultKeySpecs = Objects.requireNonNull($.defaultKeySpecs, "expected parameter 'defaultKeySpecs' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.nonExistence = Objects.requireNonNull($.nonExistence, "expected parameter 'nonExistence' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
