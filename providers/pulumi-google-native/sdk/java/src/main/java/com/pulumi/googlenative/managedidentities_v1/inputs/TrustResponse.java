// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.managedidentities_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 * 
 */
public final class TrustResponse extends com.pulumi.resources.InvokeArgs {

    public static final TrustResponse Empty = new TrustResponse();

    /**
     * The time the instance was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    public String createTime() {
        return this.createTime;
    }

    /**
     * The last heartbeat time when the trust was known to be connected.
     * 
     */
    @Import(name="lastTrustHeartbeatTime", required=true)
    private String lastTrustHeartbeatTime;

    public String lastTrustHeartbeatTime() {
        return this.lastTrustHeartbeatTime;
    }

    /**
     * Optional. The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
     * 
     */
    @Import(name="selectiveAuthentication", required=true)
    private Boolean selectiveAuthentication;

    public Boolean selectiveAuthentication() {
        return this.selectiveAuthentication;
    }

    /**
     * The current state of the trust.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Additional information about the current state of the trust, if available.
     * 
     */
    @Import(name="stateDescription", required=true)
    private String stateDescription;

    public String stateDescription() {
        return this.stateDescription;
    }

    /**
     * The target DNS server IP addresses which can resolve the remote domain involved in the trust.
     * 
     */
    @Import(name="targetDnsIpAddresses", required=true)
    private List<String> targetDnsIpAddresses;

    public List<String> targetDnsIpAddresses() {
        return this.targetDnsIpAddresses;
    }

    /**
     * The fully qualified target domain name which will be in trust with the current domain.
     * 
     */
    @Import(name="targetDomainName", required=true)
    private String targetDomainName;

    public String targetDomainName() {
        return this.targetDomainName;
    }

    /**
     * The trust direction, which decides if the current domain is trusted, trusting, or both.
     * 
     */
    @Import(name="trustDirection", required=true)
    private String trustDirection;

    public String trustDirection() {
        return this.trustDirection;
    }

    /**
     * The trust secret used for the handshake with the target domain. This will not be stored.
     * 
     */
    @Import(name="trustHandshakeSecret", required=true)
    private String trustHandshakeSecret;

    public String trustHandshakeSecret() {
        return this.trustHandshakeSecret;
    }

    /**
     * The type of trust represented by the trust resource.
     * 
     */
    @Import(name="trustType", required=true)
    private String trustType;

    public String trustType() {
        return this.trustType;
    }

    /**
     * The last update time.
     * 
     */
    @Import(name="updateTime", required=true)
    private String updateTime;

    public String updateTime() {
        return this.updateTime;
    }

    private TrustResponse() {}

    private TrustResponse(TrustResponse $) {
        this.createTime = $.createTime;
        this.lastTrustHeartbeatTime = $.lastTrustHeartbeatTime;
        this.selectiveAuthentication = $.selectiveAuthentication;
        this.state = $.state;
        this.stateDescription = $.stateDescription;
        this.targetDnsIpAddresses = $.targetDnsIpAddresses;
        this.targetDomainName = $.targetDomainName;
        this.trustDirection = $.trustDirection;
        this.trustHandshakeSecret = $.trustHandshakeSecret;
        this.trustType = $.trustType;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrustResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrustResponse $;

        public Builder() {
            $ = new TrustResponse();
        }

        public Builder(TrustResponse defaults) {
            $ = new TrustResponse(Objects.requireNonNull(defaults));
        }

        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder lastTrustHeartbeatTime(String lastTrustHeartbeatTime) {
            $.lastTrustHeartbeatTime = lastTrustHeartbeatTime;
            return this;
        }

        public Builder selectiveAuthentication(Boolean selectiveAuthentication) {
            $.selectiveAuthentication = selectiveAuthentication;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder stateDescription(String stateDescription) {
            $.stateDescription = stateDescription;
            return this;
        }

        public Builder targetDnsIpAddresses(List<String> targetDnsIpAddresses) {
            $.targetDnsIpAddresses = targetDnsIpAddresses;
            return this;
        }

        public Builder targetDnsIpAddresses(String... targetDnsIpAddresses) {
            return targetDnsIpAddresses(List.of(targetDnsIpAddresses));
        }

        public Builder targetDomainName(String targetDomainName) {
            $.targetDomainName = targetDomainName;
            return this;
        }

        public Builder trustDirection(String trustDirection) {
            $.trustDirection = trustDirection;
            return this;
        }

        public Builder trustHandshakeSecret(String trustHandshakeSecret) {
            $.trustHandshakeSecret = trustHandshakeSecret;
            return this;
        }

        public Builder trustType(String trustType) {
            $.trustType = trustType;
            return this;
        }

        public Builder updateTime(String updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public TrustResponse build() {
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.lastTrustHeartbeatTime = Objects.requireNonNull($.lastTrustHeartbeatTime, "expected parameter 'lastTrustHeartbeatTime' to be non-null");
            $.selectiveAuthentication = Objects.requireNonNull($.selectiveAuthentication, "expected parameter 'selectiveAuthentication' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateDescription = Objects.requireNonNull($.stateDescription, "expected parameter 'stateDescription' to be non-null");
            $.targetDnsIpAddresses = Objects.requireNonNull($.targetDnsIpAddresses, "expected parameter 'targetDnsIpAddresses' to be non-null");
            $.targetDomainName = Objects.requireNonNull($.targetDomainName, "expected parameter 'targetDomainName' to be non-null");
            $.trustDirection = Objects.requireNonNull($.trustDirection, "expected parameter 'trustDirection' to be non-null");
            $.trustHandshakeSecret = Objects.requireNonNull($.trustHandshakeSecret, "expected parameter 'trustHandshakeSecret' to be non-null");
            $.trustType = Objects.requireNonNull($.trustType, "expected parameter 'trustType' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
