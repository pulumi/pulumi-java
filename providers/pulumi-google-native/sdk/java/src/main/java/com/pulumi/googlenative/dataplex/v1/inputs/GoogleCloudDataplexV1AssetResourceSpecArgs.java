// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataplex.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataplex.v1.enums.GoogleCloudDataplexV1AssetResourceSpecType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Identifies the cloud resource that is referenced by this asset.
 * 
 */
public final class GoogleCloudDataplexV1AssetResourceSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDataplexV1AssetResourceSpecArgs Empty = new GoogleCloudDataplexV1AssetResourceSpecArgs();

    /**
     * Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: projects/{project_number}/buckets/{bucket_id} projects/{project_number}/datasets/{dataset_id}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: projects/{project_number}/buckets/{bucket_id} projects/{project_number}/datasets/{dataset_id}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Immutable. Type of resource.
     * 
     */
    @Import(name="type", required=true)
    private Output<GoogleCloudDataplexV1AssetResourceSpecType> type;

    /**
     * @return Immutable. Type of resource.
     * 
     */
    public Output<GoogleCloudDataplexV1AssetResourceSpecType> type() {
        return this.type;
    }

    private GoogleCloudDataplexV1AssetResourceSpecArgs() {}

    private GoogleCloudDataplexV1AssetResourceSpecArgs(GoogleCloudDataplexV1AssetResourceSpecArgs $) {
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDataplexV1AssetResourceSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDataplexV1AssetResourceSpecArgs $;

        public Builder() {
            $ = new GoogleCloudDataplexV1AssetResourceSpecArgs();
        }

        public Builder(GoogleCloudDataplexV1AssetResourceSpecArgs defaults) {
            $ = new GoogleCloudDataplexV1AssetResourceSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: projects/{project_number}/buckets/{bucket_id} projects/{project_number}/datasets/{dataset_id}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: projects/{project_number}/buckets/{bucket_id} projects/{project_number}/datasets/{dataset_id}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Immutable. Type of resource.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<GoogleCloudDataplexV1AssetResourceSpecType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Immutable. Type of resource.
         * 
         * @return builder
         * 
         */
        public Builder type(GoogleCloudDataplexV1AssetResourceSpecType type) {
            return type(Output.of(type));
        }

        public GoogleCloudDataplexV1AssetResourceSpecArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
