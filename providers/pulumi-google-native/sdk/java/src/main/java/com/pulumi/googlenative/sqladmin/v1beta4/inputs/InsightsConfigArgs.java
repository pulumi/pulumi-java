// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1beta4.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
 * 
 */
public final class InsightsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InsightsConfigArgs Empty = new InsightsConfigArgs();

    /**
     * Whether Query Insights feature is enabled.
     * 
     */
    @Import(name="queryInsightsEnabled")
    private @Nullable Output<Boolean> queryInsightsEnabled;

    /**
     * @return Whether Query Insights feature is enabled.
     * 
     */
    public Optional<Output<Boolean>> queryInsightsEnabled() {
        return Optional.ofNullable(this.queryInsightsEnabled);
    }

    /**
     * Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
     * 
     */
    @Import(name="queryPlansPerMinute")
    private @Nullable Output<Integer> queryPlansPerMinute;

    /**
     * @return Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
     * 
     */
    public Optional<Output<Integer>> queryPlansPerMinute() {
        return Optional.ofNullable(this.queryPlansPerMinute);
    }

    /**
     * Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
     * 
     */
    @Import(name="queryStringLength")
    private @Nullable Output<Integer> queryStringLength;

    /**
     * @return Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
     * 
     */
    public Optional<Output<Integer>> queryStringLength() {
        return Optional.ofNullable(this.queryStringLength);
    }

    /**
     * Whether Query Insights will record application tags from query when enabled.
     * 
     */
    @Import(name="recordApplicationTags")
    private @Nullable Output<Boolean> recordApplicationTags;

    /**
     * @return Whether Query Insights will record application tags from query when enabled.
     * 
     */
    public Optional<Output<Boolean>> recordApplicationTags() {
        return Optional.ofNullable(this.recordApplicationTags);
    }

    /**
     * Whether Query Insights will record client address when enabled.
     * 
     */
    @Import(name="recordClientAddress")
    private @Nullable Output<Boolean> recordClientAddress;

    /**
     * @return Whether Query Insights will record client address when enabled.
     * 
     */
    public Optional<Output<Boolean>> recordClientAddress() {
        return Optional.ofNullable(this.recordClientAddress);
    }

    private InsightsConfigArgs() {}

    private InsightsConfigArgs(InsightsConfigArgs $) {
        this.queryInsightsEnabled = $.queryInsightsEnabled;
        this.queryPlansPerMinute = $.queryPlansPerMinute;
        this.queryStringLength = $.queryStringLength;
        this.recordApplicationTags = $.recordApplicationTags;
        this.recordClientAddress = $.recordClientAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InsightsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InsightsConfigArgs $;

        public Builder() {
            $ = new InsightsConfigArgs();
        }

        public Builder(InsightsConfigArgs defaults) {
            $ = new InsightsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param queryInsightsEnabled Whether Query Insights feature is enabled.
         * 
         * @return builder
         * 
         */
        public Builder queryInsightsEnabled(@Nullable Output<Boolean> queryInsightsEnabled) {
            $.queryInsightsEnabled = queryInsightsEnabled;
            return this;
        }

        /**
         * @param queryInsightsEnabled Whether Query Insights feature is enabled.
         * 
         * @return builder
         * 
         */
        public Builder queryInsightsEnabled(Boolean queryInsightsEnabled) {
            return queryInsightsEnabled(Output.of(queryInsightsEnabled));
        }

        /**
         * @param queryPlansPerMinute Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
         * 
         * @return builder
         * 
         */
        public Builder queryPlansPerMinute(@Nullable Output<Integer> queryPlansPerMinute) {
            $.queryPlansPerMinute = queryPlansPerMinute;
            return this;
        }

        /**
         * @param queryPlansPerMinute Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
         * 
         * @return builder
         * 
         */
        public Builder queryPlansPerMinute(Integer queryPlansPerMinute) {
            return queryPlansPerMinute(Output.of(queryPlansPerMinute));
        }

        /**
         * @param queryStringLength Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
         * 
         * @return builder
         * 
         */
        public Builder queryStringLength(@Nullable Output<Integer> queryStringLength) {
            $.queryStringLength = queryStringLength;
            return this;
        }

        /**
         * @param queryStringLength Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
         * 
         * @return builder
         * 
         */
        public Builder queryStringLength(Integer queryStringLength) {
            return queryStringLength(Output.of(queryStringLength));
        }

        /**
         * @param recordApplicationTags Whether Query Insights will record application tags from query when enabled.
         * 
         * @return builder
         * 
         */
        public Builder recordApplicationTags(@Nullable Output<Boolean> recordApplicationTags) {
            $.recordApplicationTags = recordApplicationTags;
            return this;
        }

        /**
         * @param recordApplicationTags Whether Query Insights will record application tags from query when enabled.
         * 
         * @return builder
         * 
         */
        public Builder recordApplicationTags(Boolean recordApplicationTags) {
            return recordApplicationTags(Output.of(recordApplicationTags));
        }

        /**
         * @param recordClientAddress Whether Query Insights will record client address when enabled.
         * 
         * @return builder
         * 
         */
        public Builder recordClientAddress(@Nullable Output<Boolean> recordClientAddress) {
            $.recordClientAddress = recordClientAddress;
            return this;
        }

        /**
         * @param recordClientAddress Whether Query Insights will record client address when enabled.
         * 
         * @return builder
         * 
         */
        public Builder recordClientAddress(Boolean recordClientAddress) {
            return recordClientAddress(Output.of(recordClientAddress));
        }

        public InsightsConfigArgs build() {
            return $;
        }
    }

}
