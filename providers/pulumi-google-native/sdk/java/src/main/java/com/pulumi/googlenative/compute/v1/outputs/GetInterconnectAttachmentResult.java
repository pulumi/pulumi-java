// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.v1.outputs.InterconnectAttachmentPartnerMetadataResponse;
import com.pulumi.googlenative.compute.v1.outputs.InterconnectAttachmentPrivateInfoResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInterconnectAttachmentResult {
    /**
     * @return Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER.
     * 
     */
    private final Boolean adminEnabled;
    /**
     * @return Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s
     * 
     */
    private final String bandwidth;
    /**
     * @return This field is not available.
     * 
     */
    private final List<String> candidateIpv6Subnets;
    /**
     * @return Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google&#39;s edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.
     * 
     */
    private final List<String> candidateSubnets;
    /**
     * @return IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     * 
     */
    private final String cloudRouterIpAddress;
    /**
     * @return IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     * 
     */
    private final String cloudRouterIpv6Address;
    /**
     * @return This field is not available.
     * 
     */
    private final String cloudRouterIpv6InterfaceId;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private final String creationTimestamp;
    /**
     * @return IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     * 
     */
    private final String customerRouterIpAddress;
    /**
     * @return IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     * 
     */
    private final String customerRouterIpv6Address;
    /**
     * @return This field is not available.
     * 
     */
    private final String customerRouterIpv6InterfaceId;
    /**
     * @return Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
     * 
     */
    private final Integer dataplaneVersion;
    /**
     * @return An optional description of this resource.
     * 
     */
    private final String description;
    /**
     * @return Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
     * 
     */
    private final String edgeAvailabilityDomain;
    /**
     * @return Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *IPsec-encrypted Cloud Interconnect*, the VLAN attachment must be created with this option. Not currently available publicly.
     * 
     */
    private final String encryption;
    /**
     * @return Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
     * 
     * @deprecated
     * [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
     * 
     */
    @Deprecated /* [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used. */
    private final String googleReferenceId;
    /**
     * @return URL of the underlying Interconnect object that this attachment&#39;s traffic will traverse through.
     * 
     */
    private final String interconnect;
    /**
     * @return A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN gateway&#39;s IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway&#39;s interface 0 is paired to this VLAN attachment, then a regional internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway&#39;s IP address is allocated from the regional external IP address pool. Not currently available publicly.
     * 
     */
    private final List<String> ipsecInternalAddresses;
    /**
     * @return Type of the resource. Always compute#interconnectAttachment for interconnect attachments.
     * 
     */
    private final String kind;
    /**
     * @return Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
     * 
     */
    private final Integer mtu;
    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private final String name;
    /**
     * @return The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
     * 
     */
    private final String operationalStatus;
    /**
     * @return [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form &#34;XXXXX/region/domain&#34;
     * 
     */
    private final String pairingKey;
    /**
     * @return Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED.
     * 
     */
    private final String partnerAsn;
    /**
     * @return Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED.
     * 
     */
    private final InterconnectAttachmentPartnerMetadataResponse partnerMetadata;
    /**
     * @return Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.
     * 
     */
    private final InterconnectAttachmentPrivateInfoResponse privateInterconnectInfo;
    /**
     * @return URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    private final String region;
    /**
     * @return URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network &amp; region within which the Cloud Router is configured.
     * 
     */
    private final String router;
    /**
     * @return Set to true if the resource satisfies the zone separation organization policy constraints and false otherwise. Defaults to false if the field is not present.
     * 
     */
    private final Boolean satisfiesPzs;
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    private final String selfLink;
    /**
     * @return The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
     * 
     */
    private final String stackType;
    /**
     * @return The current state of this attachment&#39;s functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
     * 
     */
    private final String state;
    /**
     * @return The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
     * 
     */
    private final String type;
    /**
     * @return The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time.
     * 
     */
    private final Integer vlanTag8021q;

    @CustomType.Constructor
    private GetInterconnectAttachmentResult(
        @CustomType.Parameter("adminEnabled") Boolean adminEnabled,
        @CustomType.Parameter("bandwidth") String bandwidth,
        @CustomType.Parameter("candidateIpv6Subnets") List<String> candidateIpv6Subnets,
        @CustomType.Parameter("candidateSubnets") List<String> candidateSubnets,
        @CustomType.Parameter("cloudRouterIpAddress") String cloudRouterIpAddress,
        @CustomType.Parameter("cloudRouterIpv6Address") String cloudRouterIpv6Address,
        @CustomType.Parameter("cloudRouterIpv6InterfaceId") String cloudRouterIpv6InterfaceId,
        @CustomType.Parameter("creationTimestamp") String creationTimestamp,
        @CustomType.Parameter("customerRouterIpAddress") String customerRouterIpAddress,
        @CustomType.Parameter("customerRouterIpv6Address") String customerRouterIpv6Address,
        @CustomType.Parameter("customerRouterIpv6InterfaceId") String customerRouterIpv6InterfaceId,
        @CustomType.Parameter("dataplaneVersion") Integer dataplaneVersion,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("edgeAvailabilityDomain") String edgeAvailabilityDomain,
        @CustomType.Parameter("encryption") String encryption,
        @CustomType.Parameter("googleReferenceId") String googleReferenceId,
        @CustomType.Parameter("interconnect") String interconnect,
        @CustomType.Parameter("ipsecInternalAddresses") List<String> ipsecInternalAddresses,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("mtu") Integer mtu,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("operationalStatus") String operationalStatus,
        @CustomType.Parameter("pairingKey") String pairingKey,
        @CustomType.Parameter("partnerAsn") String partnerAsn,
        @CustomType.Parameter("partnerMetadata") InterconnectAttachmentPartnerMetadataResponse partnerMetadata,
        @CustomType.Parameter("privateInterconnectInfo") InterconnectAttachmentPrivateInfoResponse privateInterconnectInfo,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("router") String router,
        @CustomType.Parameter("satisfiesPzs") Boolean satisfiesPzs,
        @CustomType.Parameter("selfLink") String selfLink,
        @CustomType.Parameter("stackType") String stackType,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("vlanTag8021q") Integer vlanTag8021q) {
        this.adminEnabled = adminEnabled;
        this.bandwidth = bandwidth;
        this.candidateIpv6Subnets = candidateIpv6Subnets;
        this.candidateSubnets = candidateSubnets;
        this.cloudRouterIpAddress = cloudRouterIpAddress;
        this.cloudRouterIpv6Address = cloudRouterIpv6Address;
        this.cloudRouterIpv6InterfaceId = cloudRouterIpv6InterfaceId;
        this.creationTimestamp = creationTimestamp;
        this.customerRouterIpAddress = customerRouterIpAddress;
        this.customerRouterIpv6Address = customerRouterIpv6Address;
        this.customerRouterIpv6InterfaceId = customerRouterIpv6InterfaceId;
        this.dataplaneVersion = dataplaneVersion;
        this.description = description;
        this.edgeAvailabilityDomain = edgeAvailabilityDomain;
        this.encryption = encryption;
        this.googleReferenceId = googleReferenceId;
        this.interconnect = interconnect;
        this.ipsecInternalAddresses = ipsecInternalAddresses;
        this.kind = kind;
        this.mtu = mtu;
        this.name = name;
        this.operationalStatus = operationalStatus;
        this.pairingKey = pairingKey;
        this.partnerAsn = partnerAsn;
        this.partnerMetadata = partnerMetadata;
        this.privateInterconnectInfo = privateInterconnectInfo;
        this.region = region;
        this.router = router;
        this.satisfiesPzs = satisfiesPzs;
        this.selfLink = selfLink;
        this.stackType = stackType;
        this.state = state;
        this.type = type;
        this.vlanTag8021q = vlanTag8021q;
    }

    /**
     * @return Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER.
     * 
     */
    public Boolean adminEnabled() {
        return this.adminEnabled;
    }
    /**
     * @return Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return This field is not available.
     * 
     */
    public List<String> candidateIpv6Subnets() {
        return this.candidateIpv6Subnets;
    }
    /**
     * @return Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google&#39;s edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.
     * 
     */
    public List<String> candidateSubnets() {
        return this.candidateSubnets;
    }
    /**
     * @return IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     * 
     */
    public String cloudRouterIpAddress() {
        return this.cloudRouterIpAddress;
    }
    /**
     * @return IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     * 
     */
    public String cloudRouterIpv6Address() {
        return this.cloudRouterIpv6Address;
    }
    /**
     * @return This field is not available.
     * 
     */
    public String cloudRouterIpv6InterfaceId() {
        return this.cloudRouterIpv6InterfaceId;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     * 
     */
    public String customerRouterIpAddress() {
        return this.customerRouterIpAddress;
    }
    /**
     * @return IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     * 
     */
    public String customerRouterIpv6Address() {
        return this.customerRouterIpv6Address;
    }
    /**
     * @return This field is not available.
     * 
     */
    public String customerRouterIpv6InterfaceId() {
        return this.customerRouterIpv6InterfaceId;
    }
    /**
     * @return Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
     * 
     */
    public Integer dataplaneVersion() {
        return this.dataplaneVersion;
    }
    /**
     * @return An optional description of this resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
     * 
     */
    public String edgeAvailabilityDomain() {
        return this.edgeAvailabilityDomain;
    }
    /**
     * @return Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *IPsec-encrypted Cloud Interconnect*, the VLAN attachment must be created with this option. Not currently available publicly.
     * 
     */
    public String encryption() {
        return this.encryption;
    }
    /**
     * @return Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
     * 
     * @deprecated
     * [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
     * 
     */
    @Deprecated /* [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used. */
    public String googleReferenceId() {
        return this.googleReferenceId;
    }
    /**
     * @return URL of the underlying Interconnect object that this attachment&#39;s traffic will traverse through.
     * 
     */
    public String interconnect() {
        return this.interconnect;
    }
    /**
     * @return A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN gateway&#39;s IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway&#39;s interface 0 is paired to this VLAN attachment, then a regional internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway&#39;s IP address is allocated from the regional external IP address pool. Not currently available publicly.
     * 
     */
    public List<String> ipsecInternalAddresses() {
        return this.ipsecInternalAddresses;
    }
    /**
     * @return Type of the resource. Always compute#interconnectAttachment for interconnect attachments.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
     * 
     */
    public String operationalStatus() {
        return this.operationalStatus;
    }
    /**
     * @return [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form &#34;XXXXX/region/domain&#34;
     * 
     */
    public String pairingKey() {
        return this.pairingKey;
    }
    /**
     * @return Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED.
     * 
     */
    public String partnerAsn() {
        return this.partnerAsn;
    }
    /**
     * @return Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED.
     * 
     */
    public InterconnectAttachmentPartnerMetadataResponse partnerMetadata() {
        return this.partnerMetadata;
    }
    /**
     * @return Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.
     * 
     */
    public InterconnectAttachmentPrivateInfoResponse privateInterconnectInfo() {
        return this.privateInterconnectInfo;
    }
    /**
     * @return URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network &amp; region within which the Cloud Router is configured.
     * 
     */
    public String router() {
        return this.router;
    }
    /**
     * @return Set to true if the resource satisfies the zone separation organization policy constraints and false otherwise. Defaults to false if the field is not present.
     * 
     */
    public Boolean satisfiesPzs() {
        return this.satisfiesPzs;
    }
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return The current state of this attachment&#39;s functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time.
     * 
     */
    public Integer vlanTag8021q() {
        return this.vlanTag8021q;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInterconnectAttachmentResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean adminEnabled;
        private String bandwidth;
        private List<String> candidateIpv6Subnets;
        private List<String> candidateSubnets;
        private String cloudRouterIpAddress;
        private String cloudRouterIpv6Address;
        private String cloudRouterIpv6InterfaceId;
        private String creationTimestamp;
        private String customerRouterIpAddress;
        private String customerRouterIpv6Address;
        private String customerRouterIpv6InterfaceId;
        private Integer dataplaneVersion;
        private String description;
        private String edgeAvailabilityDomain;
        private String encryption;
        private String googleReferenceId;
        private String interconnect;
        private List<String> ipsecInternalAddresses;
        private String kind;
        private Integer mtu;
        private String name;
        private String operationalStatus;
        private String pairingKey;
        private String partnerAsn;
        private InterconnectAttachmentPartnerMetadataResponse partnerMetadata;
        private InterconnectAttachmentPrivateInfoResponse privateInterconnectInfo;
        private String region;
        private String router;
        private Boolean satisfiesPzs;
        private String selfLink;
        private String stackType;
        private String state;
        private String type;
        private Integer vlanTag8021q;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInterconnectAttachmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminEnabled = defaults.adminEnabled;
    	      this.bandwidth = defaults.bandwidth;
    	      this.candidateIpv6Subnets = defaults.candidateIpv6Subnets;
    	      this.candidateSubnets = defaults.candidateSubnets;
    	      this.cloudRouterIpAddress = defaults.cloudRouterIpAddress;
    	      this.cloudRouterIpv6Address = defaults.cloudRouterIpv6Address;
    	      this.cloudRouterIpv6InterfaceId = defaults.cloudRouterIpv6InterfaceId;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.customerRouterIpAddress = defaults.customerRouterIpAddress;
    	      this.customerRouterIpv6Address = defaults.customerRouterIpv6Address;
    	      this.customerRouterIpv6InterfaceId = defaults.customerRouterIpv6InterfaceId;
    	      this.dataplaneVersion = defaults.dataplaneVersion;
    	      this.description = defaults.description;
    	      this.edgeAvailabilityDomain = defaults.edgeAvailabilityDomain;
    	      this.encryption = defaults.encryption;
    	      this.googleReferenceId = defaults.googleReferenceId;
    	      this.interconnect = defaults.interconnect;
    	      this.ipsecInternalAddresses = defaults.ipsecInternalAddresses;
    	      this.kind = defaults.kind;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.operationalStatus = defaults.operationalStatus;
    	      this.pairingKey = defaults.pairingKey;
    	      this.partnerAsn = defaults.partnerAsn;
    	      this.partnerMetadata = defaults.partnerMetadata;
    	      this.privateInterconnectInfo = defaults.privateInterconnectInfo;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.selfLink = defaults.selfLink;
    	      this.stackType = defaults.stackType;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.vlanTag8021q = defaults.vlanTag8021q;
        }

        public Builder adminEnabled(Boolean adminEnabled) {
            this.adminEnabled = Objects.requireNonNull(adminEnabled);
            return this;
        }
        public Builder bandwidth(String bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        public Builder candidateIpv6Subnets(List<String> candidateIpv6Subnets) {
            this.candidateIpv6Subnets = Objects.requireNonNull(candidateIpv6Subnets);
            return this;
        }
        public Builder candidateIpv6Subnets(String... candidateIpv6Subnets) {
            return candidateIpv6Subnets(List.of(candidateIpv6Subnets));
        }
        public Builder candidateSubnets(List<String> candidateSubnets) {
            this.candidateSubnets = Objects.requireNonNull(candidateSubnets);
            return this;
        }
        public Builder candidateSubnets(String... candidateSubnets) {
            return candidateSubnets(List.of(candidateSubnets));
        }
        public Builder cloudRouterIpAddress(String cloudRouterIpAddress) {
            this.cloudRouterIpAddress = Objects.requireNonNull(cloudRouterIpAddress);
            return this;
        }
        public Builder cloudRouterIpv6Address(String cloudRouterIpv6Address) {
            this.cloudRouterIpv6Address = Objects.requireNonNull(cloudRouterIpv6Address);
            return this;
        }
        public Builder cloudRouterIpv6InterfaceId(String cloudRouterIpv6InterfaceId) {
            this.cloudRouterIpv6InterfaceId = Objects.requireNonNull(cloudRouterIpv6InterfaceId);
            return this;
        }
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        public Builder customerRouterIpAddress(String customerRouterIpAddress) {
            this.customerRouterIpAddress = Objects.requireNonNull(customerRouterIpAddress);
            return this;
        }
        public Builder customerRouterIpv6Address(String customerRouterIpv6Address) {
            this.customerRouterIpv6Address = Objects.requireNonNull(customerRouterIpv6Address);
            return this;
        }
        public Builder customerRouterIpv6InterfaceId(String customerRouterIpv6InterfaceId) {
            this.customerRouterIpv6InterfaceId = Objects.requireNonNull(customerRouterIpv6InterfaceId);
            return this;
        }
        public Builder dataplaneVersion(Integer dataplaneVersion) {
            this.dataplaneVersion = Objects.requireNonNull(dataplaneVersion);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder edgeAvailabilityDomain(String edgeAvailabilityDomain) {
            this.edgeAvailabilityDomain = Objects.requireNonNull(edgeAvailabilityDomain);
            return this;
        }
        public Builder encryption(String encryption) {
            this.encryption = Objects.requireNonNull(encryption);
            return this;
        }
        public Builder googleReferenceId(String googleReferenceId) {
            this.googleReferenceId = Objects.requireNonNull(googleReferenceId);
            return this;
        }
        public Builder interconnect(String interconnect) {
            this.interconnect = Objects.requireNonNull(interconnect);
            return this;
        }
        public Builder ipsecInternalAddresses(List<String> ipsecInternalAddresses) {
            this.ipsecInternalAddresses = Objects.requireNonNull(ipsecInternalAddresses);
            return this;
        }
        public Builder ipsecInternalAddresses(String... ipsecInternalAddresses) {
            return ipsecInternalAddresses(List.of(ipsecInternalAddresses));
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder mtu(Integer mtu) {
            this.mtu = Objects.requireNonNull(mtu);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder operationalStatus(String operationalStatus) {
            this.operationalStatus = Objects.requireNonNull(operationalStatus);
            return this;
        }
        public Builder pairingKey(String pairingKey) {
            this.pairingKey = Objects.requireNonNull(pairingKey);
            return this;
        }
        public Builder partnerAsn(String partnerAsn) {
            this.partnerAsn = Objects.requireNonNull(partnerAsn);
            return this;
        }
        public Builder partnerMetadata(InterconnectAttachmentPartnerMetadataResponse partnerMetadata) {
            this.partnerMetadata = Objects.requireNonNull(partnerMetadata);
            return this;
        }
        public Builder privateInterconnectInfo(InterconnectAttachmentPrivateInfoResponse privateInterconnectInfo) {
            this.privateInterconnectInfo = Objects.requireNonNull(privateInterconnectInfo);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder router(String router) {
            this.router = Objects.requireNonNull(router);
            return this;
        }
        public Builder satisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder stackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder vlanTag8021q(Integer vlanTag8021q) {
            this.vlanTag8021q = Objects.requireNonNull(vlanTag8021q);
            return this;
        }        public GetInterconnectAttachmentResult build() {
            return new GetInterconnectAttachmentResult(adminEnabled, bandwidth, candidateIpv6Subnets, candidateSubnets, cloudRouterIpAddress, cloudRouterIpv6Address, cloudRouterIpv6InterfaceId, creationTimestamp, customerRouterIpAddress, customerRouterIpv6Address, customerRouterIpv6InterfaceId, dataplaneVersion, description, edgeAvailabilityDomain, encryption, googleReferenceId, interconnect, ipsecInternalAddresses, kind, mtu, name, operationalStatus, pairingKey, partnerAsn, partnerMetadata, privateInterconnectInfo, region, router, satisfiesPzs, selfLink, stackType, state, type, vlanTag8021q);
        }
    }
}
