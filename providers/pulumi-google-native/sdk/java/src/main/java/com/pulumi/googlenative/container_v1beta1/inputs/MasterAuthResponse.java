// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1beta1.inputs.ClientCertificateConfigResponse;
import java.lang.String;
import java.util.Objects;


/**
 * The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
 * 
 */
public final class MasterAuthResponse extends com.pulumi.resources.InvokeArgs {

    public static final MasterAuthResponse Empty = new MasterAuthResponse();

    /**
     * [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
     * 
     */
    @Import(name="clientCertificate", required=true)
    private String clientCertificate;

    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
     * 
     */
    @Import(name="clientCertificateConfig", required=true)
    private ClientCertificateConfigResponse clientCertificateConfig;

    public ClientCertificateConfigResponse clientCertificateConfig() {
        return this.clientCertificateConfig;
    }

    /**
     * [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
     * 
     */
    @Import(name="clientKey", required=true)
    private String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    @Import(name="clusterCaCertificate", required=true)
    private String clusterCaCertificate;

    public String clusterCaCertificate() {
        return this.clusterCaCertificate;
    }

    /**
     * The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
     * 
     */
    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    /**
     * The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
     * 
     */
    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    private MasterAuthResponse() {}

    private MasterAuthResponse(MasterAuthResponse $) {
        this.clientCertificate = $.clientCertificate;
        this.clientCertificateConfig = $.clientCertificateConfig;
        this.clientKey = $.clientKey;
        this.clusterCaCertificate = $.clusterCaCertificate;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MasterAuthResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MasterAuthResponse $;

        public Builder() {
            $ = new MasterAuthResponse();
        }

        public Builder(MasterAuthResponse defaults) {
            $ = new MasterAuthResponse(Objects.requireNonNull(defaults));
        }

        public Builder clientCertificate(String clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientCertificateConfig(ClientCertificateConfigResponse clientCertificateConfig) {
            $.clientCertificateConfig = clientCertificateConfig;
            return this;
        }

        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder clusterCaCertificate(String clusterCaCertificate) {
            $.clusterCaCertificate = clusterCaCertificate;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public MasterAuthResponse build() {
            $.clientCertificate = Objects.requireNonNull($.clientCertificate, "expected parameter 'clientCertificate' to be non-null");
            $.clientCertificateConfig = Objects.requireNonNull($.clientCertificateConfig, "expected parameter 'clientCertificateConfig' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.clusterCaCertificate = Objects.requireNonNull($.clusterCaCertificate, "expected parameter 'clusterCaCertificate' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
