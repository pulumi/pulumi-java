// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.FieldResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.OptionResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SourceContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A protocol buffer message type.
 * 
 */
public final class TypeResponse extends com.pulumi.resources.InvokeArgs {

    public static final TypeResponse Empty = new TypeResponse();

    /**
     * The list of fields.
     * 
     */
    @Import(name="fields", required=true)
    private List<FieldResponse> fields;

    /**
     * @return The list of fields.
     * 
     */
    public List<FieldResponse> fields() {
        return this.fields;
    }

    /**
     * The fully qualified message name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The fully qualified message name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The list of types appearing in `oneof` definitions in this type.
     * 
     */
    @Import(name="oneofs", required=true)
    private List<String> oneofs;

    /**
     * @return The list of types appearing in `oneof` definitions in this type.
     * 
     */
    public List<String> oneofs() {
        return this.oneofs;
    }

    /**
     * The protocol buffer options.
     * 
     */
    @Import(name="options", required=true)
    private List<OptionResponse> options;

    /**
     * @return The protocol buffer options.
     * 
     */
    public List<OptionResponse> options() {
        return this.options;
    }

    /**
     * The source context.
     * 
     */
    @Import(name="sourceContext", required=true)
    private SourceContextResponse sourceContext;

    /**
     * @return The source context.
     * 
     */
    public SourceContextResponse sourceContext() {
        return this.sourceContext;
    }

    /**
     * The source syntax.
     * 
     */
    @Import(name="syntax", required=true)
    private String syntax;

    /**
     * @return The source syntax.
     * 
     */
    public String syntax() {
        return this.syntax;
    }

    private TypeResponse() {}

    private TypeResponse(TypeResponse $) {
        this.fields = $.fields;
        this.name = $.name;
        this.oneofs = $.oneofs;
        this.options = $.options;
        this.sourceContext = $.sourceContext;
        this.syntax = $.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TypeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TypeResponse $;

        public Builder() {
            $ = new TypeResponse();
        }

        public Builder(TypeResponse defaults) {
            $ = new TypeResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param fields The list of fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<FieldResponse> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields The list of fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(FieldResponse... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param name The fully qualified message name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param oneofs The list of types appearing in `oneof` definitions in this type.
         * 
         * @return builder
         * 
         */
        public Builder oneofs(List<String> oneofs) {
            $.oneofs = oneofs;
            return this;
        }

        /**
         * @param oneofs The list of types appearing in `oneof` definitions in this type.
         * 
         * @return builder
         * 
         */
        public Builder oneofs(String... oneofs) {
            return oneofs(List.of(oneofs));
        }

        /**
         * @param options The protocol buffer options.
         * 
         * @return builder
         * 
         */
        public Builder options(List<OptionResponse> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options The protocol buffer options.
         * 
         * @return builder
         * 
         */
        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }

        /**
         * @param sourceContext The source context.
         * 
         * @return builder
         * 
         */
        public Builder sourceContext(SourceContextResponse sourceContext) {
            $.sourceContext = sourceContext;
            return this;
        }

        /**
         * @param syntax The source syntax.
         * 
         * @return builder
         * 
         */
        public Builder syntax(String syntax) {
            $.syntax = syntax;
            return this;
        }

        public TypeResponse build() {
            $.fields = Objects.requireNonNull($.fields, "expected parameter 'fields' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.oneofs = Objects.requireNonNull($.oneofs, "expected parameter 'oneofs' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.sourceContext = Objects.requireNonNull($.sourceContext, "expected parameter 'sourceContext' to be non-null");
            $.syntax = Objects.requireNonNull($.syntax, "expected parameter 'syntax' to be non-null");
            return $;
        }
    }

}
