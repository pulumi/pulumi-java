// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * For display only. Metadata associated with a Compute Engine VPN tunnel.
 * 
 */
public final class VpnTunnelInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final VpnTunnelInfoResponse Empty = new VpnTunnelInfoResponse();

    /**
     * Name of a VPN tunnel.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return Name of a VPN tunnel.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * URI of a Compute Engine network where the VPN tunnel is configured.
     * 
     */
    @Import(name="networkUri", required=true)
    private String networkUri;

    /**
     * @return URI of a Compute Engine network where the VPN tunnel is configured.
     * 
     */
    public String networkUri() {
        return this.networkUri;
    }

    /**
     * Name of a Google Cloud region where this VPN tunnel is configured.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return Name of a Google Cloud region where this VPN tunnel is configured.
     * 
     */
    public String region() {
        return this.region;
    }

    /**
     * URI of a VPN gateway at remote end of the tunnel.
     * 
     */
    @Import(name="remoteGateway", required=true)
    private String remoteGateway;

    /**
     * @return URI of a VPN gateway at remote end of the tunnel.
     * 
     */
    public String remoteGateway() {
        return this.remoteGateway;
    }

    /**
     * Remote VPN gateway&#39;s IP address.
     * 
     */
    @Import(name="remoteGatewayIp", required=true)
    private String remoteGatewayIp;

    /**
     * @return Remote VPN gateway&#39;s IP address.
     * 
     */
    public String remoteGatewayIp() {
        return this.remoteGatewayIp;
    }

    /**
     * Type of the routing policy.
     * 
     */
    @Import(name="routingType", required=true)
    private String routingType;

    /**
     * @return Type of the routing policy.
     * 
     */
    public String routingType() {
        return this.routingType;
    }

    /**
     * URI of the VPN gateway at local end of the tunnel.
     * 
     */
    @Import(name="sourceGateway", required=true)
    private String sourceGateway;

    /**
     * @return URI of the VPN gateway at local end of the tunnel.
     * 
     */
    public String sourceGateway() {
        return this.sourceGateway;
    }

    /**
     * Local VPN gateway&#39;s IP address.
     * 
     */
    @Import(name="sourceGatewayIp", required=true)
    private String sourceGatewayIp;

    /**
     * @return Local VPN gateway&#39;s IP address.
     * 
     */
    public String sourceGatewayIp() {
        return this.sourceGatewayIp;
    }

    /**
     * URI of a VPN tunnel.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    /**
     * @return URI of a VPN tunnel.
     * 
     */
    public String uri() {
        return this.uri;
    }

    private VpnTunnelInfoResponse() {}

    private VpnTunnelInfoResponse(VpnTunnelInfoResponse $) {
        this.displayName = $.displayName;
        this.networkUri = $.networkUri;
        this.region = $.region;
        this.remoteGateway = $.remoteGateway;
        this.remoteGatewayIp = $.remoteGatewayIp;
        this.routingType = $.routingType;
        this.sourceGateway = $.sourceGateway;
        this.sourceGatewayIp = $.sourceGatewayIp;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnTunnelInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnTunnelInfoResponse $;

        public Builder() {
            $ = new VpnTunnelInfoResponse();
        }

        public Builder(VpnTunnelInfoResponse defaults) {
            $ = new VpnTunnelInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Name of a VPN tunnel.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param networkUri URI of a Compute Engine network where the VPN tunnel is configured.
         * 
         * @return builder
         * 
         */
        public Builder networkUri(String networkUri) {
            $.networkUri = networkUri;
            return this;
        }

        /**
         * @param region Name of a Google Cloud region where this VPN tunnel is configured.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        /**
         * @param remoteGateway URI of a VPN gateway at remote end of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder remoteGateway(String remoteGateway) {
            $.remoteGateway = remoteGateway;
            return this;
        }

        /**
         * @param remoteGatewayIp Remote VPN gateway&#39;s IP address.
         * 
         * @return builder
         * 
         */
        public Builder remoteGatewayIp(String remoteGatewayIp) {
            $.remoteGatewayIp = remoteGatewayIp;
            return this;
        }

        /**
         * @param routingType Type of the routing policy.
         * 
         * @return builder
         * 
         */
        public Builder routingType(String routingType) {
            $.routingType = routingType;
            return this;
        }

        /**
         * @param sourceGateway URI of the VPN gateway at local end of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder sourceGateway(String sourceGateway) {
            $.sourceGateway = sourceGateway;
            return this;
        }

        /**
         * @param sourceGatewayIp Local VPN gateway&#39;s IP address.
         * 
         * @return builder
         * 
         */
        public Builder sourceGatewayIp(String sourceGatewayIp) {
            $.sourceGatewayIp = sourceGatewayIp;
            return this;
        }

        /**
         * @param uri URI of a VPN tunnel.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public VpnTunnelInfoResponse build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.networkUri = Objects.requireNonNull($.networkUri, "expected parameter 'networkUri' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.remoteGateway = Objects.requireNonNull($.remoteGateway, "expected parameter 'remoteGateway' to be non-null");
            $.remoteGatewayIp = Objects.requireNonNull($.remoteGatewayIp, "expected parameter 'remoteGatewayIp' to be non-null");
            $.routingType = Objects.requireNonNull($.routingType, "expected parameter 'routingType' to be non-null");
            $.sourceGateway = Objects.requireNonNull($.sourceGateway, "expected parameter 'sourceGateway' to be non-null");
            $.sourceGatewayIp = Objects.requireNonNull($.sourceGatewayIp, "expected parameter 'sourceGatewayIp' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
