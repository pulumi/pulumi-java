// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasedatabase.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return Output Only. The globally unique hostname of the database.
     * 
     */
    private final String databaseUrl;
    /**
     * @return The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
     * 
     */
    private final String name;
    /**
     * @return The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
     * 
     */
    private final String project;
    /**
     * @return The database&#39;s lifecycle state. Read-only.
     * 
     */
    private final String state;
    /**
     * @return Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetInstanceResult(
        @CustomType.Parameter("databaseUrl") String databaseUrl,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("project") String project,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("type") String type) {
        this.databaseUrl = databaseUrl;
        this.name = name;
        this.project = project;
        this.state = state;
        this.type = type;
    }

    /**
     * @return Output Only. The globally unique hostname of the database.
     * 
     */
    public String databaseUrl() {
        return this.databaseUrl;
    }
    /**
     * @return The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The database&#39;s lifecycle state. Read-only.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String databaseUrl;
        private String name;
        private String project;
        private String state;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseUrl = defaults.databaseUrl;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
        }

        public Builder databaseUrl(String databaseUrl) {
            this.databaseUrl = Objects.requireNonNull(databaseUrl);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetInstanceResult build() {
            return new GetInstanceResult(databaseUrl, name, project, state, type);
        }
    }
}
