// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datalabeling.v1beta1.enums.InstructionDataType;
import com.pulumi.googlenative.datalabeling.v1beta1.inputs.GoogleCloudDatalabelingV1beta1CsvInstructionArgs;
import com.pulumi.googlenative.datalabeling.v1beta1.inputs.GoogleCloudDatalabelingV1beta1PdfInstructionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstructionArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstructionArgs Empty = new InstructionArgs();

    /**
     * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     * @deprecated
     * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     */
    @Deprecated /* Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data. */
    @Import(name="csvInstruction")
    private @Nullable Output<GoogleCloudDatalabelingV1beta1CsvInstructionArgs> csvInstruction;

    /**
     * @return Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     * @deprecated
     * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
     * 
     */
    @Deprecated /* Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data. */
    public Optional<Output<GoogleCloudDatalabelingV1beta1CsvInstructionArgs>> csvInstruction() {
        return Optional.ofNullable(this.csvInstruction);
    }

    /**
     * The data type of this instruction.
     * 
     */
    @Import(name="dataType", required=true)
    private Output<InstructionDataType> dataType;

    /**
     * @return The data type of this instruction.
     * 
     */
    public Output<InstructionDataType> dataType() {
        return this.dataType;
    }

    /**
     * Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the instruction. Maximum of 64 characters.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the instruction. Maximum of 64 characters.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Instruction from a PDF document. The PDF should be in a Cloud Storage bucket.
     * 
     */
    @Import(name="pdfInstruction")
    private @Nullable Output<GoogleCloudDatalabelingV1beta1PdfInstructionArgs> pdfInstruction;

    /**
     * @return Instruction from a PDF document. The PDF should be in a Cloud Storage bucket.
     * 
     */
    public Optional<Output<GoogleCloudDatalabelingV1beta1PdfInstructionArgs>> pdfInstruction() {
        return Optional.ofNullable(this.pdfInstruction);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private InstructionArgs() {}

    private InstructionArgs(InstructionArgs $) {
        this.csvInstruction = $.csvInstruction;
        this.dataType = $.dataType;
        this.description = $.description;
        this.displayName = $.displayName;
        this.pdfInstruction = $.pdfInstruction;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstructionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstructionArgs $;

        public Builder() {
            $ = new InstructionArgs();
        }

        public Builder(InstructionArgs defaults) {
            $ = new InstructionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param csvInstruction Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
         * 
         */
        @Deprecated /* Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data. */
        public Builder csvInstruction(@Nullable Output<GoogleCloudDatalabelingV1beta1CsvInstructionArgs> csvInstruction) {
            $.csvInstruction = csvInstruction;
            return this;
        }

        /**
         * @param csvInstruction Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data.
         * 
         */
        @Deprecated /* Deprecated: this instruction format is not supported any more. Instruction from a CSV file, such as for classification task. The CSV file should have exact two columns, in the following format: * The first column is labeled data, such as an image reference, text. * The second column is comma separated labels associated with data. */
        public Builder csvInstruction(GoogleCloudDatalabelingV1beta1CsvInstructionArgs csvInstruction) {
            return csvInstruction(Output.of(csvInstruction));
        }

        /**
         * @param dataType The data type of this instruction.
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<InstructionDataType> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The data type of this instruction.
         * 
         * @return builder
         * 
         */
        public Builder dataType(InstructionDataType dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param description Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the instruction. Maximum of 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the instruction. Maximum of 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param pdfInstruction Instruction from a PDF document. The PDF should be in a Cloud Storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder pdfInstruction(@Nullable Output<GoogleCloudDatalabelingV1beta1PdfInstructionArgs> pdfInstruction) {
            $.pdfInstruction = pdfInstruction;
            return this;
        }

        /**
         * @param pdfInstruction Instruction from a PDF document. The PDF should be in a Cloud Storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder pdfInstruction(GoogleCloudDatalabelingV1beta1PdfInstructionArgs pdfInstruction) {
            return pdfInstruction(Output.of(pdfInstruction));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public InstructionArgs build() {
            $.dataType = Objects.requireNonNull($.dataType, "expected parameter 'dataType' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
