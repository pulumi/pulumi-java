// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datalabeling.v1beta1.inputs.GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataArgs;
import com.pulumi.googlenative.datalabeling.v1beta1.inputs.GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeedbackMessageArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeedbackMessageArgs Empty = new FeedbackMessageArgs();

    @Import(name="annotatedDatasetId", required=true)
    private Output<String> annotatedDatasetId;

    public Output<String> annotatedDatasetId() {
        return this.annotatedDatasetId;
    }

    /**
     * String content of the feedback. Maximum of 10000 characters.
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return String content of the feedback. Maximum of 10000 characters.
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * Create time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Create time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    @Import(name="datasetId", required=true)
    private Output<String> datasetId;

    public Output<String> datasetId() {
        return this.datasetId;
    }

    @Import(name="feedbackThreadId", required=true)
    private Output<String> feedbackThreadId;

    public Output<String> feedbackThreadId() {
        return this.feedbackThreadId;
    }

    /**
     * The image storing this feedback if the feedback is an image representing operator&#39;s comments.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The image storing this feedback if the feedback is an image representing operator&#39;s comments.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Name of the feedback message in a feedback thread. Format: &#39;project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}&#39;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the feedback message in a feedback thread. Format: &#39;project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}&#39;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="operatorFeedbackMetadata")
    private @Nullable Output<GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataArgs> operatorFeedbackMetadata;

    public Optional<Output<GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataArgs>> operatorFeedbackMetadata() {
        return Optional.ofNullable(this.operatorFeedbackMetadata);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requesterFeedbackMetadata")
    private @Nullable Output<GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataArgs> requesterFeedbackMetadata;

    public Optional<Output<GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataArgs>> requesterFeedbackMetadata() {
        return Optional.ofNullable(this.requesterFeedbackMetadata);
    }

    private FeedbackMessageArgs() {}

    private FeedbackMessageArgs(FeedbackMessageArgs $) {
        this.annotatedDatasetId = $.annotatedDatasetId;
        this.body = $.body;
        this.createTime = $.createTime;
        this.datasetId = $.datasetId;
        this.feedbackThreadId = $.feedbackThreadId;
        this.image = $.image;
        this.name = $.name;
        this.operatorFeedbackMetadata = $.operatorFeedbackMetadata;
        this.project = $.project;
        this.requesterFeedbackMetadata = $.requesterFeedbackMetadata;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeedbackMessageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeedbackMessageArgs $;

        public Builder() {
            $ = new FeedbackMessageArgs();
        }

        public Builder(FeedbackMessageArgs defaults) {
            $ = new FeedbackMessageArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotatedDatasetId(Output<String> annotatedDatasetId) {
            $.annotatedDatasetId = annotatedDatasetId;
            return this;
        }

        public Builder annotatedDatasetId(String annotatedDatasetId) {
            return annotatedDatasetId(Output.of(annotatedDatasetId));
        }

        /**
         * @param body String content of the feedback. Maximum of 10000 characters.
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body String content of the feedback. Maximum of 10000 characters.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param createTime Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder datasetId(Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        public Builder feedbackThreadId(Output<String> feedbackThreadId) {
            $.feedbackThreadId = feedbackThreadId;
            return this;
        }

        public Builder feedbackThreadId(String feedbackThreadId) {
            return feedbackThreadId(Output.of(feedbackThreadId));
        }

        /**
         * @param image The image storing this feedback if the feedback is an image representing operator&#39;s comments.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image storing this feedback if the feedback is an image representing operator&#39;s comments.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param name Name of the feedback message in a feedback thread. Format: &#39;project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the feedback message in a feedback thread. Format: &#39;project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder operatorFeedbackMetadata(@Nullable Output<GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataArgs> operatorFeedbackMetadata) {
            $.operatorFeedbackMetadata = operatorFeedbackMetadata;
            return this;
        }

        public Builder operatorFeedbackMetadata(GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataArgs operatorFeedbackMetadata) {
            return operatorFeedbackMetadata(Output.of(operatorFeedbackMetadata));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requesterFeedbackMetadata(@Nullable Output<GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataArgs> requesterFeedbackMetadata) {
            $.requesterFeedbackMetadata = requesterFeedbackMetadata;
            return this;
        }

        public Builder requesterFeedbackMetadata(GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataArgs requesterFeedbackMetadata) {
            return requesterFeedbackMetadata(Output.of(requesterFeedbackMetadata));
        }

        public FeedbackMessageArgs build() {
            $.annotatedDatasetId = Objects.requireNonNull($.annotatedDatasetId, "expected parameter 'annotatedDatasetId' to be non-null");
            $.datasetId = Objects.requireNonNull($.datasetId, "expected parameter 'datasetId' to be non-null");
            $.feedbackThreadId = Objects.requireNonNull($.feedbackThreadId, "expected parameter 'feedbackThreadId' to be non-null");
            return $;
        }
    }

}
