// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudfunctions.v1.outputs.EventTriggerResponse;
import com.pulumi.googlenative.cloudfunctions.v1.outputs.HttpsTriggerResponse;
import com.pulumi.googlenative.cloudfunctions.v1.outputs.SecretEnvVarResponse;
import com.pulumi.googlenative.cloudfunctions.v1.outputs.SecretVolumeResponse;
import com.pulumi.googlenative.cloudfunctions.v1.outputs.SourceRepositoryResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFunctionResult {
    /**
     * @return The amount of memory in MB available for a function. Defaults to 256MB.
     * 
     */
    private final Integer availableMemoryMb;
    /**
     * @return Build environment variables that shall be available during build time.
     * 
     */
    private final Map<String,String> buildEnvironmentVariables;
    /**
     * @return The Cloud Build ID of the latest successful deployment of the function.
     * 
     */
    private final String buildId;
    /**
     * @return The Cloud Build Name of the function deployment. `projects//locations//builds/`.
     * 
     */
    private final String buildName;
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
     * 
     */
    private final String buildWorkerPool;
    /**
     * @return User-provided description of a function.
     * 
     */
    private final String description;
    /**
     * @return Docker Registry to use for this deployment. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.
     * 
     */
    private final String dockerRegistry;
    /**
     * @return User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named &#39;gcf-artifacts&#39; for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be &#39;DOCKER&#39;.
     * 
     */
    private final String dockerRepository;
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;. For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    private final String entryPoint;
    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    private final Map<String,String> environmentVariables;
    /**
     * @return A source that fires events in response to a condition in another service.
     * 
     */
    private final EventTriggerResponse eventTrigger;
    /**
     * @return An HTTPS endpoint type of source that can be triggered via URL.
     * 
     */
    private final HttpsTriggerResponse httpsTrigger;
    /**
     * @return The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    private final String ingressSettings;
    /**
     * @return Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role &#39;Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)&#39; on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function&#39;s image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function&#39;s source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
     * 
     */
    private final String kmsKeyName;
    /**
     * @return Labels associated with this Cloud Function.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    private final Integer maxInstances;
    /**
     * @return A lower bound for the number function instances that may coexist at a given time.
     * 
     */
    private final Integer minInstances;
    /**
     * @return A user-defined name of the function. Function names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`
     * 
     */
    private final String name;
    /**
     * @return The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where `{project}` is a project id where the network is defined, and `{network}` is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    private final String network;
    /**
     * @return The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    private final String runtime;
    /**
     * @return Secret environment variables configuration.
     * 
     */
    private final List<SecretEnvVarResponse> secretEnvironmentVariables;
    /**
     * @return Secret volumes configuration.
     * 
     */
    private final List<SecretVolumeResponse> secretVolumes;
    /**
     * @return The email of the function&#39;s service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
     * 
     */
    private final String serviceAccountEmail;
    /**
     * @return The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
     * 
     */
    private final String sourceArchiveUrl;
    /**
     * @return **Beta Feature** The source repository where a function is hosted.
     * 
     */
    private final SourceRepositoryResponse sourceRepository;
    /**
     * @return Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
     * 
     */
    private final String sourceToken;
    /**
     * @return The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
     * 
     */
    private final String sourceUploadUrl;
    /**
     * @return Status of the function deployment.
     * 
     */
    private final String status;
    /**
     * @return The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    private final String timeout;
    /**
     * @return The last update timestamp of a Cloud Function.
     * 
     */
    private final String updateTime;
    /**
     * @return The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
     * 
     */
    private final String versionId;
    /**
     * @return The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    private final String vpcConnector;
    /**
     * @return The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    private final String vpcConnectorEgressSettings;

    @CustomType.Constructor
    private GetFunctionResult(
        @CustomType.Parameter("availableMemoryMb") Integer availableMemoryMb,
        @CustomType.Parameter("buildEnvironmentVariables") Map<String,String> buildEnvironmentVariables,
        @CustomType.Parameter("buildId") String buildId,
        @CustomType.Parameter("buildName") String buildName,
        @CustomType.Parameter("buildWorkerPool") String buildWorkerPool,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("dockerRegistry") String dockerRegistry,
        @CustomType.Parameter("dockerRepository") String dockerRepository,
        @CustomType.Parameter("entryPoint") String entryPoint,
        @CustomType.Parameter("environmentVariables") Map<String,String> environmentVariables,
        @CustomType.Parameter("eventTrigger") EventTriggerResponse eventTrigger,
        @CustomType.Parameter("httpsTrigger") HttpsTriggerResponse httpsTrigger,
        @CustomType.Parameter("ingressSettings") String ingressSettings,
        @CustomType.Parameter("kmsKeyName") String kmsKeyName,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("maxInstances") Integer maxInstances,
        @CustomType.Parameter("minInstances") Integer minInstances,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("network") String network,
        @CustomType.Parameter("runtime") String runtime,
        @CustomType.Parameter("secretEnvironmentVariables") List<SecretEnvVarResponse> secretEnvironmentVariables,
        @CustomType.Parameter("secretVolumes") List<SecretVolumeResponse> secretVolumes,
        @CustomType.Parameter("serviceAccountEmail") String serviceAccountEmail,
        @CustomType.Parameter("sourceArchiveUrl") String sourceArchiveUrl,
        @CustomType.Parameter("sourceRepository") SourceRepositoryResponse sourceRepository,
        @CustomType.Parameter("sourceToken") String sourceToken,
        @CustomType.Parameter("sourceUploadUrl") String sourceUploadUrl,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("timeout") String timeout,
        @CustomType.Parameter("updateTime") String updateTime,
        @CustomType.Parameter("versionId") String versionId,
        @CustomType.Parameter("vpcConnector") String vpcConnector,
        @CustomType.Parameter("vpcConnectorEgressSettings") String vpcConnectorEgressSettings) {
        this.availableMemoryMb = availableMemoryMb;
        this.buildEnvironmentVariables = buildEnvironmentVariables;
        this.buildId = buildId;
        this.buildName = buildName;
        this.buildWorkerPool = buildWorkerPool;
        this.description = description;
        this.dockerRegistry = dockerRegistry;
        this.dockerRepository = dockerRepository;
        this.entryPoint = entryPoint;
        this.environmentVariables = environmentVariables;
        this.eventTrigger = eventTrigger;
        this.httpsTrigger = httpsTrigger;
        this.ingressSettings = ingressSettings;
        this.kmsKeyName = kmsKeyName;
        this.labels = labels;
        this.maxInstances = maxInstances;
        this.minInstances = minInstances;
        this.name = name;
        this.network = network;
        this.runtime = runtime;
        this.secretEnvironmentVariables = secretEnvironmentVariables;
        this.secretVolumes = secretVolumes;
        this.serviceAccountEmail = serviceAccountEmail;
        this.sourceArchiveUrl = sourceArchiveUrl;
        this.sourceRepository = sourceRepository;
        this.sourceToken = sourceToken;
        this.sourceUploadUrl = sourceUploadUrl;
        this.status = status;
        this.timeout = timeout;
        this.updateTime = updateTime;
        this.versionId = versionId;
        this.vpcConnector = vpcConnector;
        this.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
    }

    /**
     * @return The amount of memory in MB available for a function. Defaults to 256MB.
     * 
     */
    public Integer availableMemoryMb() {
        return this.availableMemoryMb;
    }
    /**
     * @return Build environment variables that shall be available during build time.
     * 
     */
    public Map<String,String> buildEnvironmentVariables() {
        return this.buildEnvironmentVariables;
    }
    /**
     * @return The Cloud Build ID of the latest successful deployment of the function.
     * 
     */
    public String buildId() {
        return this.buildId;
    }
    /**
     * @return The Cloud Build Name of the function deployment. `projects//locations//builds/`.
     * 
     */
    public String buildName() {
        return this.buildName;
    }
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
     * 
     */
    public String buildWorkerPool() {
        return this.buildWorkerPool;
    }
    /**
     * @return User-provided description of a function.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Docker Registry to use for this deployment. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.
     * 
     */
    public String dockerRegistry() {
        return this.dockerRegistry;
    }
    /**
     * @return User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named &#39;gcf-artifacts&#39; for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be &#39;DOCKER&#39;.
     * 
     */
    public String dockerRepository() {
        return this.dockerRepository;
    }
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;. For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    public String entryPoint() {
        return this.entryPoint;
    }
    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return A source that fires events in response to a condition in another service.
     * 
     */
    public EventTriggerResponse eventTrigger() {
        return this.eventTrigger;
    }
    /**
     * @return An HTTPS endpoint type of source that can be triggered via URL.
     * 
     */
    public HttpsTriggerResponse httpsTrigger() {
        return this.httpsTrigger;
    }
    /**
     * @return The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    public String ingressSettings() {
        return this.ingressSettings;
    }
    /**
     * @return Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role &#39;Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)&#39; on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function&#39;s image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function&#39;s source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
     * 
     */
    public String kmsKeyName() {
        return this.kmsKeyName;
    }
    /**
     * @return Labels associated with this Cloud Function.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    public Integer maxInstances() {
        return this.maxInstances;
    }
    /**
     * @return A lower bound for the number function instances that may coexist at a given time.
     * 
     */
    public Integer minInstances() {
        return this.minInstances;
    }
    /**
     * @return A user-defined name of the function. Function names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where `{project}` is a project id where the network is defined, and `{network}` is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    public String runtime() {
        return this.runtime;
    }
    /**
     * @return Secret environment variables configuration.
     * 
     */
    public List<SecretEnvVarResponse> secretEnvironmentVariables() {
        return this.secretEnvironmentVariables;
    }
    /**
     * @return Secret volumes configuration.
     * 
     */
    public List<SecretVolumeResponse> secretVolumes() {
        return this.secretVolumes;
    }
    /**
     * @return The email of the function&#39;s service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
     * 
     */
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * @return The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
     * 
     */
    public String sourceArchiveUrl() {
        return this.sourceArchiveUrl;
    }
    /**
     * @return **Beta Feature** The source repository where a function is hosted.
     * 
     */
    public SourceRepositoryResponse sourceRepository() {
        return this.sourceRepository;
    }
    /**
     * @return Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
     * 
     */
    public String sourceToken() {
        return this.sourceToken;
    }
    /**
     * @return The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
     * 
     */
    public String sourceUploadUrl() {
        return this.sourceUploadUrl;
    }
    /**
     * @return Status of the function deployment.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    public String timeout() {
        return this.timeout;
    }
    /**
     * @return The last update timestamp of a Cloud Function.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
     * 
     */
    public String versionId() {
        return this.versionId;
    }
    /**
     * @return The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
     * 
     */
    public String vpcConnector() {
        return this.vpcConnector;
    }
    /**
     * @return The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    public String vpcConnectorEgressSettings() {
        return this.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer availableMemoryMb;
        private Map<String,String> buildEnvironmentVariables;
        private String buildId;
        private String buildName;
        private String buildWorkerPool;
        private String description;
        private String dockerRegistry;
        private String dockerRepository;
        private String entryPoint;
        private Map<String,String> environmentVariables;
        private EventTriggerResponse eventTrigger;
        private HttpsTriggerResponse httpsTrigger;
        private String ingressSettings;
        private String kmsKeyName;
        private Map<String,String> labels;
        private Integer maxInstances;
        private Integer minInstances;
        private String name;
        private String network;
        private String runtime;
        private List<SecretEnvVarResponse> secretEnvironmentVariables;
        private List<SecretVolumeResponse> secretVolumes;
        private String serviceAccountEmail;
        private String sourceArchiveUrl;
        private SourceRepositoryResponse sourceRepository;
        private String sourceToken;
        private String sourceUploadUrl;
        private String status;
        private String timeout;
        private String updateTime;
        private String versionId;
        private String vpcConnector;
        private String vpcConnectorEgressSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableMemoryMb = defaults.availableMemoryMb;
    	      this.buildEnvironmentVariables = defaults.buildEnvironmentVariables;
    	      this.buildId = defaults.buildId;
    	      this.buildName = defaults.buildName;
    	      this.buildWorkerPool = defaults.buildWorkerPool;
    	      this.description = defaults.description;
    	      this.dockerRegistry = defaults.dockerRegistry;
    	      this.dockerRepository = defaults.dockerRepository;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.eventTrigger = defaults.eventTrigger;
    	      this.httpsTrigger = defaults.httpsTrigger;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.labels = defaults.labels;
    	      this.maxInstances = defaults.maxInstances;
    	      this.minInstances = defaults.minInstances;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.runtime = defaults.runtime;
    	      this.secretEnvironmentVariables = defaults.secretEnvironmentVariables;
    	      this.secretVolumes = defaults.secretVolumes;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.sourceArchiveUrl = defaults.sourceArchiveUrl;
    	      this.sourceRepository = defaults.sourceRepository;
    	      this.sourceToken = defaults.sourceToken;
    	      this.sourceUploadUrl = defaults.sourceUploadUrl;
    	      this.status = defaults.status;
    	      this.timeout = defaults.timeout;
    	      this.updateTime = defaults.updateTime;
    	      this.versionId = defaults.versionId;
    	      this.vpcConnector = defaults.vpcConnector;
    	      this.vpcConnectorEgressSettings = defaults.vpcConnectorEgressSettings;
        }

        public Builder availableMemoryMb(Integer availableMemoryMb) {
            this.availableMemoryMb = Objects.requireNonNull(availableMemoryMb);
            return this;
        }
        public Builder buildEnvironmentVariables(Map<String,String> buildEnvironmentVariables) {
            this.buildEnvironmentVariables = Objects.requireNonNull(buildEnvironmentVariables);
            return this;
        }
        public Builder buildId(String buildId) {
            this.buildId = Objects.requireNonNull(buildId);
            return this;
        }
        public Builder buildName(String buildName) {
            this.buildName = Objects.requireNonNull(buildName);
            return this;
        }
        public Builder buildWorkerPool(String buildWorkerPool) {
            this.buildWorkerPool = Objects.requireNonNull(buildWorkerPool);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder dockerRegistry(String dockerRegistry) {
            this.dockerRegistry = Objects.requireNonNull(dockerRegistry);
            return this;
        }
        public Builder dockerRepository(String dockerRepository) {
            this.dockerRepository = Objects.requireNonNull(dockerRepository);
            return this;
        }
        public Builder entryPoint(String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint);
            return this;
        }
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }
        public Builder eventTrigger(EventTriggerResponse eventTrigger) {
            this.eventTrigger = Objects.requireNonNull(eventTrigger);
            return this;
        }
        public Builder httpsTrigger(HttpsTriggerResponse httpsTrigger) {
            this.httpsTrigger = Objects.requireNonNull(httpsTrigger);
            return this;
        }
        public Builder ingressSettings(String ingressSettings) {
            this.ingressSettings = Objects.requireNonNull(ingressSettings);
            return this;
        }
        public Builder kmsKeyName(String kmsKeyName) {
            this.kmsKeyName = Objects.requireNonNull(kmsKeyName);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder maxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }
        public Builder minInstances(Integer minInstances) {
            this.minInstances = Objects.requireNonNull(minInstances);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder runtime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }
        public Builder secretEnvironmentVariables(List<SecretEnvVarResponse> secretEnvironmentVariables) {
            this.secretEnvironmentVariables = Objects.requireNonNull(secretEnvironmentVariables);
            return this;
        }
        public Builder secretEnvironmentVariables(SecretEnvVarResponse... secretEnvironmentVariables) {
            return secretEnvironmentVariables(List.of(secretEnvironmentVariables));
        }
        public Builder secretVolumes(List<SecretVolumeResponse> secretVolumes) {
            this.secretVolumes = Objects.requireNonNull(secretVolumes);
            return this;
        }
        public Builder secretVolumes(SecretVolumeResponse... secretVolumes) {
            return secretVolumes(List.of(secretVolumes));
        }
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }
        public Builder sourceArchiveUrl(String sourceArchiveUrl) {
            this.sourceArchiveUrl = Objects.requireNonNull(sourceArchiveUrl);
            return this;
        }
        public Builder sourceRepository(SourceRepositoryResponse sourceRepository) {
            this.sourceRepository = Objects.requireNonNull(sourceRepository);
            return this;
        }
        public Builder sourceToken(String sourceToken) {
            this.sourceToken = Objects.requireNonNull(sourceToken);
            return this;
        }
        public Builder sourceUploadUrl(String sourceUploadUrl) {
            this.sourceUploadUrl = Objects.requireNonNull(sourceUploadUrl);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public Builder versionId(String versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }
        public Builder vpcConnector(String vpcConnector) {
            this.vpcConnector = Objects.requireNonNull(vpcConnector);
            return this;
        }
        public Builder vpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
            return this;
        }        public GetFunctionResult build() {
            return new GetFunctionResult(availableMemoryMb, buildEnvironmentVariables, buildId, buildName, buildWorkerPool, description, dockerRegistry, dockerRepository, entryPoint, environmentVariables, eventTrigger, httpsTrigger, ingressSettings, kmsKeyName, labels, maxInstances, minInstances, name, network, runtime, secretEnvironmentVariables, secretVolumes, serviceAccountEmail, sourceArchiveUrl, sourceRepository, sourceToken, sourceUploadUrl, status, timeout, updateTime, versionId, vpcConnector, vpcConnectorEgressSettings);
        }
    }
}
