// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The state of the Kubernetes cluster.
 * 
 */
public final class KubernetesClusterStateResponse extends com.pulumi.resources.InvokeArgs {

    public static final KubernetesClusterStateResponse Empty = new KubernetesClusterStateResponse();

    /**
     * The version of Agones currently installed in the registered Kubernetes cluster.
     * 
     */
    @Import(name="agonesVersionInstalled", required=true)
    private String agonesVersionInstalled;

    public String agonesVersionInstalled() {
        return this.agonesVersionInstalled;
    }

    /**
     * The version of Agones that is targeted to be installed in the cluster.
     * 
     */
    @Import(name="agonesVersionTargeted", required=true)
    private String agonesVersionTargeted;

    public String agonesVersionTargeted() {
        return this.agonesVersionTargeted;
    }

    /**
     * The state for the installed versions of Agones/Kubernetes.
     * 
     */
    @Import(name="installationState", required=true)
    private String installationState;

    public String installationState() {
        return this.installationState;
    }

    /**
     * The version of Kubernetes that is currently used in the registered Kubernetes cluster (as detected by the Cloud Game Servers service).
     * 
     */
    @Import(name="kubernetesVersionInstalled", required=true)
    private String kubernetesVersionInstalled;

    public String kubernetesVersionInstalled() {
        return this.kubernetesVersionInstalled;
    }

    /**
     * The cloud provider type reported by the first node&#39;s providerID in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the provider type will be empty.
     * 
     */
    @Import(name="provider", required=true)
    private String provider;

    public String provider() {
        return this.provider;
    }

    /**
     * The detailed error message for the installed versions of Agones/Kubernetes.
     * 
     */
    @Import(name="versionInstalledErrorMessage", required=true)
    private String versionInstalledErrorMessage;

    public String versionInstalledErrorMessage() {
        return this.versionInstalledErrorMessage;
    }

    private KubernetesClusterStateResponse() {}

    private KubernetesClusterStateResponse(KubernetesClusterStateResponse $) {
        this.agonesVersionInstalled = $.agonesVersionInstalled;
        this.agonesVersionTargeted = $.agonesVersionTargeted;
        this.installationState = $.installationState;
        this.kubernetesVersionInstalled = $.kubernetesVersionInstalled;
        this.provider = $.provider;
        this.versionInstalledErrorMessage = $.versionInstalledErrorMessage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterStateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterStateResponse $;

        public Builder() {
            $ = new KubernetesClusterStateResponse();
        }

        public Builder(KubernetesClusterStateResponse defaults) {
            $ = new KubernetesClusterStateResponse(Objects.requireNonNull(defaults));
        }

        public Builder agonesVersionInstalled(String agonesVersionInstalled) {
            $.agonesVersionInstalled = agonesVersionInstalled;
            return this;
        }

        public Builder agonesVersionTargeted(String agonesVersionTargeted) {
            $.agonesVersionTargeted = agonesVersionTargeted;
            return this;
        }

        public Builder installationState(String installationState) {
            $.installationState = installationState;
            return this;
        }

        public Builder kubernetesVersionInstalled(String kubernetesVersionInstalled) {
            $.kubernetesVersionInstalled = kubernetesVersionInstalled;
            return this;
        }

        public Builder provider(String provider) {
            $.provider = provider;
            return this;
        }

        public Builder versionInstalledErrorMessage(String versionInstalledErrorMessage) {
            $.versionInstalledErrorMessage = versionInstalledErrorMessage;
            return this;
        }

        public KubernetesClusterStateResponse build() {
            $.agonesVersionInstalled = Objects.requireNonNull($.agonesVersionInstalled, "expected parameter 'agonesVersionInstalled' to be non-null");
            $.agonesVersionTargeted = Objects.requireNonNull($.agonesVersionTargeted, "expected parameter 'agonesVersionTargeted' to be non-null");
            $.installationState = Objects.requireNonNull($.installationState, "expected parameter 'installationState' to be non-null");
            $.kubernetesVersionInstalled = Objects.requireNonNull($.kubernetesVersionInstalled, "expected parameter 'kubernetesVersionInstalled' to be non-null");
            $.provider = Objects.requireNonNull($.provider, "expected parameter 'provider' to be non-null");
            $.versionInstalledErrorMessage = Objects.requireNonNull($.versionInstalledErrorMessage, "expected parameter 'versionInstalledErrorMessage' to be non-null");
            return $;
        }
    }

}
