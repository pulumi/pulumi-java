// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1beta1.inputs.AllowedConfigListResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.AllowedSubjectAltNamesResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.IssuanceModesResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.ReusableConfigWrapperResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.SubjectResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.
 * 
 */
public final class CertificateAuthorityPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateAuthorityPolicyResponse Empty = new CertificateAuthorityPolicyResponse();

    /**
     * Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
     * 
     */
    @Import(name="allowedCommonNames", required=true)
    private List<String> allowedCommonNames;

    public List<String> allowedCommonNames() {
        return this.allowedCommonNames;
    }

    /**
     * Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
     * 
     */
    @Import(name="allowedConfigList", required=true)
    private AllowedConfigListResponse allowedConfigList;

    public AllowedConfigListResponse allowedConfigList() {
        return this.allowedConfigList;
    }

    /**
     * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    @Import(name="allowedIssuanceModes", required=true)
    private IssuanceModesResponse allowedIssuanceModes;

    public IssuanceModesResponse allowedIssuanceModes() {
        return this.allowedIssuanceModes;
    }

    /**
     * Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
     * 
     */
    @Import(name="allowedLocationsAndOrganizations", required=true)
    private List<SubjectResponse> allowedLocationsAndOrganizations;

    public List<SubjectResponse> allowedLocationsAndOrganizations() {
        return this.allowedLocationsAndOrganizations;
    }

    /**
     * Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
     * 
     */
    @Import(name="allowedSans", required=true)
    private AllowedSubjectAltNamesResponse allowedSans;

    public AllowedSubjectAltNamesResponse allowedSans() {
        return this.allowedSans;
    }

    /**
     * Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated.
     * 
     */
    @Import(name="maximumLifetime", required=true)
    private String maximumLifetime;

    public String maximumLifetime() {
        return this.maximumLifetime;
    }

    /**
     * Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
     * 
     */
    @Import(name="overwriteConfigValues", required=true)
    private ReusableConfigWrapperResponse overwriteConfigValues;

    public ReusableConfigWrapperResponse overwriteConfigValues() {
        return this.overwriteConfigValues;
    }

    private CertificateAuthorityPolicyResponse() {}

    private CertificateAuthorityPolicyResponse(CertificateAuthorityPolicyResponse $) {
        this.allowedCommonNames = $.allowedCommonNames;
        this.allowedConfigList = $.allowedConfigList;
        this.allowedIssuanceModes = $.allowedIssuanceModes;
        this.allowedLocationsAndOrganizations = $.allowedLocationsAndOrganizations;
        this.allowedSans = $.allowedSans;
        this.maximumLifetime = $.maximumLifetime;
        this.overwriteConfigValues = $.overwriteConfigValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityPolicyResponse $;

        public Builder() {
            $ = new CertificateAuthorityPolicyResponse();
        }

        public Builder(CertificateAuthorityPolicyResponse defaults) {
            $ = new CertificateAuthorityPolicyResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowedCommonNames(List<String> allowedCommonNames) {
            $.allowedCommonNames = allowedCommonNames;
            return this;
        }

        public Builder allowedCommonNames(String... allowedCommonNames) {
            return allowedCommonNames(List.of(allowedCommonNames));
        }

        public Builder allowedConfigList(AllowedConfigListResponse allowedConfigList) {
            $.allowedConfigList = allowedConfigList;
            return this;
        }

        public Builder allowedIssuanceModes(IssuanceModesResponse allowedIssuanceModes) {
            $.allowedIssuanceModes = allowedIssuanceModes;
            return this;
        }

        public Builder allowedLocationsAndOrganizations(List<SubjectResponse> allowedLocationsAndOrganizations) {
            $.allowedLocationsAndOrganizations = allowedLocationsAndOrganizations;
            return this;
        }

        public Builder allowedLocationsAndOrganizations(SubjectResponse... allowedLocationsAndOrganizations) {
            return allowedLocationsAndOrganizations(List.of(allowedLocationsAndOrganizations));
        }

        public Builder allowedSans(AllowedSubjectAltNamesResponse allowedSans) {
            $.allowedSans = allowedSans;
            return this;
        }

        public Builder maximumLifetime(String maximumLifetime) {
            $.maximumLifetime = maximumLifetime;
            return this;
        }

        public Builder overwriteConfigValues(ReusableConfigWrapperResponse overwriteConfigValues) {
            $.overwriteConfigValues = overwriteConfigValues;
            return this;
        }

        public CertificateAuthorityPolicyResponse build() {
            $.allowedCommonNames = Objects.requireNonNull($.allowedCommonNames, "expected parameter 'allowedCommonNames' to be non-null");
            $.allowedConfigList = Objects.requireNonNull($.allowedConfigList, "expected parameter 'allowedConfigList' to be non-null");
            $.allowedIssuanceModes = Objects.requireNonNull($.allowedIssuanceModes, "expected parameter 'allowedIssuanceModes' to be non-null");
            $.allowedLocationsAndOrganizations = Objects.requireNonNull($.allowedLocationsAndOrganizations, "expected parameter 'allowedLocationsAndOrganizations' to be non-null");
            $.allowedSans = Objects.requireNonNull($.allowedSans, "expected parameter 'allowedSans' to be non-null");
            $.maximumLifetime = Objects.requireNonNull($.maximumLifetime, "expected parameter 'maximumLifetime' to be non-null");
            $.overwriteConfigValues = Objects.requireNonNull($.overwriteConfigValues, "expected parameter 'overwriteConfigValues' to be non-null");
            return $;
        }
    }

}
