// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc.v1.inputs.MetricArgs;
import java.util.List;
import java.util.Objects;


/**
 * Dataproc metric config.
 * 
 */
public final class DataprocMetricConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataprocMetricConfigArgs Empty = new DataprocMetricConfigArgs();

    /**
     * Metrics sources to enable.
     * 
     */
    @Import(name="metrics", required=true)
    private Output<List<MetricArgs>> metrics;

    /**
     * @return Metrics sources to enable.
     * 
     */
    public Output<List<MetricArgs>> metrics() {
        return this.metrics;
    }

    private DataprocMetricConfigArgs() {}

    private DataprocMetricConfigArgs(DataprocMetricConfigArgs $) {
        this.metrics = $.metrics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataprocMetricConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataprocMetricConfigArgs $;

        public Builder() {
            $ = new DataprocMetricConfigArgs();
        }

        public Builder(DataprocMetricConfigArgs defaults) {
            $ = new DataprocMetricConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metrics Metrics sources to enable.
         * 
         * @return builder
         * 
         */
        public Builder metrics(Output<List<MetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics Metrics sources to enable.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<MetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics Metrics sources to enable.
         * 
         * @return builder
         * 
         */
        public Builder metrics(MetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        public DataprocMetricConfigArgs build() {
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            return $;
        }
    }

}
