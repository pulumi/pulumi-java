// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.SourceContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Source describes the location of the source used for the build.
 * 
 */
public final class SourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceResponse Empty = new SourceResponse();

    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     * 
     */
    @Import(name="additionalContexts", required=true)
    private List<SourceContextResponse> additionalContexts;

    /**
     * @return If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     * 
     */
    public List<SourceContextResponse> additionalContexts() {
        return this.additionalContexts;
    }

    /**
     * If provided, the input binary artifacts for the build came from this location.
     * 
     */
    @Import(name="artifactStorageSourceUri", required=true)
    private String artifactStorageSourceUri;

    /**
     * @return If provided, the input binary artifacts for the build came from this location.
     * 
     */
    public String artifactStorageSourceUri() {
        return this.artifactStorageSourceUri;
    }

    /**
     * If provided, the source code used for the build came from this location.
     * 
     */
    @Import(name="context", required=true)
    private SourceContextResponse context;

    /**
     * @return If provided, the source code used for the build came from this location.
     * 
     */
    public SourceContextResponse context() {
        return this.context;
    }

    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     * 
     */
    @Import(name="fileHashes", required=true)
    private Map<String,String> fileHashes;

    /**
     * @return Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     * 
     */
    public Map<String,String> fileHashes() {
        return this.fileHashes;
    }

    private SourceResponse() {}

    private SourceResponse(SourceResponse $) {
        this.additionalContexts = $.additionalContexts;
        this.artifactStorageSourceUri = $.artifactStorageSourceUri;
        this.context = $.context;
        this.fileHashes = $.fileHashes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceResponse $;

        public Builder() {
            $ = new SourceResponse();
        }

        public Builder(SourceResponse defaults) {
            $ = new SourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalContexts If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
         * 
         * @return builder
         * 
         */
        public Builder additionalContexts(List<SourceContextResponse> additionalContexts) {
            $.additionalContexts = additionalContexts;
            return this;
        }

        /**
         * @param additionalContexts If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
         * 
         * @return builder
         * 
         */
        public Builder additionalContexts(SourceContextResponse... additionalContexts) {
            return additionalContexts(List.of(additionalContexts));
        }

        /**
         * @param artifactStorageSourceUri If provided, the input binary artifacts for the build came from this location.
         * 
         * @return builder
         * 
         */
        public Builder artifactStorageSourceUri(String artifactStorageSourceUri) {
            $.artifactStorageSourceUri = artifactStorageSourceUri;
            return this;
        }

        /**
         * @param context If provided, the source code used for the build came from this location.
         * 
         * @return builder
         * 
         */
        public Builder context(SourceContextResponse context) {
            $.context = context;
            return this;
        }

        /**
         * @param fileHashes Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
         * 
         * @return builder
         * 
         */
        public Builder fileHashes(Map<String,String> fileHashes) {
            $.fileHashes = fileHashes;
            return this;
        }

        public SourceResponse build() {
            $.additionalContexts = Objects.requireNonNull($.additionalContexts, "expected parameter 'additionalContexts' to be non-null");
            $.artifactStorageSourceUri = Objects.requireNonNull($.artifactStorageSourceUri, "expected parameter 'artifactStorageSourceUri' to be non-null");
            $.context = Objects.requireNonNull($.context, "expected parameter 'context' to be non-null");
            $.fileHashes = Objects.requireNonNull($.fileHashes, "expected parameter 'fileHashes' to be non-null");
            return $;
        }
    }

}
