// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner_v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanRunExecutionState;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanRunResultState;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunErrorTraceArgs;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunWarningTraceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A ScanRun is a output-only resource representing an actual run of the scan. Next id: 12
 * 
 */
public final class ScanRunArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScanRunArgs Empty = new ScanRunArgs();

    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * If result_state is an ERROR, this field provides the primary reason for scan&#39;s termination and more details, if such are available.
     * 
     */
    @Import(name="errorTrace")
    private @Nullable Output<ScanRunErrorTraceArgs> errorTrace;

    public Optional<Output<ScanRunErrorTraceArgs>> errorTrace() {
        return Optional.ofNullable(this.errorTrace);
    }

    /**
     * The execution state of the ScanRun.
     * 
     */
    @Import(name="executionState")
    private @Nullable Output<ScanRunExecutionState> executionState;

    public Optional<Output<ScanRunExecutionState>> executionState() {
        return Optional.ofNullable(this.executionState);
    }

    /**
     * Whether the scan run has found any vulnerabilities.
     * 
     */
    @Import(name="hasVulnerabilities")
    private @Nullable Output<Boolean> hasVulnerabilities;

    public Optional<Output<Boolean>> hasVulnerabilities() {
        return Optional.ofNullable(this.hasVulnerabilities);
    }

    /**
     * The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    @Import(name="progressPercent")
    private @Nullable Output<Integer> progressPercent;

    public Optional<Output<Integer>> progressPercent() {
        return Optional.ofNullable(this.progressPercent);
    }

    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
     * 
     */
    @Import(name="resultState")
    private @Nullable Output<ScanRunResultState> resultState;

    public Optional<Output<ScanRunResultState>> resultState() {
        return Optional.ofNullable(this.resultState);
    }

    /**
     * The time at which the ScanRun started.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    @Import(name="urlsCrawledCount")
    private @Nullable Output<String> urlsCrawledCount;

    public Optional<Output<String>> urlsCrawledCount() {
        return Optional.ofNullable(this.urlsCrawledCount);
    }

    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    @Import(name="urlsTestedCount")
    private @Nullable Output<String> urlsTestedCount;

    public Optional<Output<String>> urlsTestedCount() {
        return Optional.ofNullable(this.urlsTestedCount);
    }

    /**
     * A list of warnings, if such are encountered during this scan run.
     * 
     */
    @Import(name="warningTraces")
    private @Nullable Output<List<ScanRunWarningTraceArgs>> warningTraces;

    public Optional<Output<List<ScanRunWarningTraceArgs>>> warningTraces() {
        return Optional.ofNullable(this.warningTraces);
    }

    private ScanRunArgs() {}

    private ScanRunArgs(ScanRunArgs $) {
        this.endTime = $.endTime;
        this.errorTrace = $.errorTrace;
        this.executionState = $.executionState;
        this.hasVulnerabilities = $.hasVulnerabilities;
        this.name = $.name;
        this.progressPercent = $.progressPercent;
        this.resultState = $.resultState;
        this.startTime = $.startTime;
        this.urlsCrawledCount = $.urlsCrawledCount;
        this.urlsTestedCount = $.urlsTestedCount;
        this.warningTraces = $.warningTraces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScanRunArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScanRunArgs $;

        public Builder() {
            $ = new ScanRunArgs();
        }

        public Builder(ScanRunArgs defaults) {
            $ = new ScanRunArgs(Objects.requireNonNull(defaults));
        }

        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        public Builder errorTrace(@Nullable Output<ScanRunErrorTraceArgs> errorTrace) {
            $.errorTrace = errorTrace;
            return this;
        }

        public Builder errorTrace(ScanRunErrorTraceArgs errorTrace) {
            return errorTrace(Output.of(errorTrace));
        }

        public Builder executionState(@Nullable Output<ScanRunExecutionState> executionState) {
            $.executionState = executionState;
            return this;
        }

        public Builder executionState(ScanRunExecutionState executionState) {
            return executionState(Output.of(executionState));
        }

        public Builder hasVulnerabilities(@Nullable Output<Boolean> hasVulnerabilities) {
            $.hasVulnerabilities = hasVulnerabilities;
            return this;
        }

        public Builder hasVulnerabilities(Boolean hasVulnerabilities) {
            return hasVulnerabilities(Output.of(hasVulnerabilities));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder progressPercent(@Nullable Output<Integer> progressPercent) {
            $.progressPercent = progressPercent;
            return this;
        }

        public Builder progressPercent(Integer progressPercent) {
            return progressPercent(Output.of(progressPercent));
        }

        public Builder resultState(@Nullable Output<ScanRunResultState> resultState) {
            $.resultState = resultState;
            return this;
        }

        public Builder resultState(ScanRunResultState resultState) {
            return resultState(Output.of(resultState));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder urlsCrawledCount(@Nullable Output<String> urlsCrawledCount) {
            $.urlsCrawledCount = urlsCrawledCount;
            return this;
        }

        public Builder urlsCrawledCount(String urlsCrawledCount) {
            return urlsCrawledCount(Output.of(urlsCrawledCount));
        }

        public Builder urlsTestedCount(@Nullable Output<String> urlsTestedCount) {
            $.urlsTestedCount = urlsTestedCount;
            return this;
        }

        public Builder urlsTestedCount(String urlsTestedCount) {
            return urlsTestedCount(Output.of(urlsTestedCount));
        }

        public Builder warningTraces(@Nullable Output<List<ScanRunWarningTraceArgs>> warningTraces) {
            $.warningTraces = warningTraces;
            return this;
        }

        public Builder warningTraces(List<ScanRunWarningTraceArgs> warningTraces) {
            return warningTraces(Output.of(warningTraces));
        }

        public Builder warningTraces(ScanRunWarningTraceArgs... warningTraces) {
            return warningTraces(List.of(warningTraces));
        }

        public ScanRunArgs build() {
            return $;
        }
    }

}
