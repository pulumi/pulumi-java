// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.connectors.v1.inputs.SecretArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameters to support Ssh public key Authentication.
 * 
 */
public final class SshPublicKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SshPublicKeyArgs Empty = new SshPublicKeyArgs();

    /**
     * Format of SSH Client cert.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return Format of SSH Client cert.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * This is an optional field used in case client has enabled multi-factor authentication
     * 
     */
    @Import(name="password")
    private @Nullable Output<SecretArgs> password;

    /**
     * @return This is an optional field used in case client has enabled multi-factor authentication
     * 
     */
    public Optional<Output<SecretArgs>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * SSH Client Cert. It should contain both public and private key.
     * 
     */
    @Import(name="sshClientCert")
    private @Nullable Output<SecretArgs> sshClientCert;

    /**
     * @return SSH Client Cert. It should contain both public and private key.
     * 
     */
    public Optional<Output<SecretArgs>> sshClientCert() {
        return Optional.ofNullable(this.sshClientCert);
    }

    /**
     * The user account used to authenticate.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The user account used to authenticate.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private SshPublicKeyArgs() {}

    private SshPublicKeyArgs(SshPublicKeyArgs $) {
        this.certType = $.certType;
        this.password = $.password;
        this.sshClientCert = $.sshClientCert;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SshPublicKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SshPublicKeyArgs $;

        public Builder() {
            $ = new SshPublicKeyArgs();
        }

        public Builder(SshPublicKeyArgs defaults) {
            $ = new SshPublicKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certType Format of SSH Client cert.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType Format of SSH Client cert.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param password This is an optional field used in case client has enabled multi-factor authentication
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<SecretArgs> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password This is an optional field used in case client has enabled multi-factor authentication
         * 
         * @return builder
         * 
         */
        public Builder password(SecretArgs password) {
            return password(Output.of(password));
        }

        /**
         * @param sshClientCert SSH Client Cert. It should contain both public and private key.
         * 
         * @return builder
         * 
         */
        public Builder sshClientCert(@Nullable Output<SecretArgs> sshClientCert) {
            $.sshClientCert = sshClientCert;
            return this;
        }

        /**
         * @param sshClientCert SSH Client Cert. It should contain both public and private key.
         * 
         * @return builder
         * 
         */
        public Builder sshClientCert(SecretArgs sshClientCert) {
            return sshClientCert(Output.of(sshClientCert));
        }

        /**
         * @param username The user account used to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user account used to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public SshPublicKeyArgs build() {
            return $;
        }
    }

}
