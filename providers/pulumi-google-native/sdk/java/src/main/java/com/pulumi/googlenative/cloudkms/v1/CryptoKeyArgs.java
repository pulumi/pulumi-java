// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudkms.v1.enums.CryptoKeyPurpose;
import com.pulumi.googlenative.cloudkms.v1.inputs.CryptoKeyVersionTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CryptoKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyArgs Empty = new CryptoKeyArgs();

    /**
     * Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
     * 
     */
    @Import(name="cryptoKeyBackend")
    private @Nullable Output<String> cryptoKeyBackend;

    /**
     * @return Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
     * 
     */
    public Optional<Output<String>> cryptoKeyBackend() {
        return Optional.ofNullable(this.cryptoKeyBackend);
    }

    /**
     * Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    @Import(name="cryptoKeyId")
    private @Nullable Output<String> cryptoKeyId;

    /**
     * @return Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    public Optional<Output<String>> cryptoKeyId() {
        return Optional.ofNullable(this.cryptoKeyId);
    }

    /**
     * Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
     * 
     */
    @Import(name="destroyScheduledDuration")
    private @Nullable Output<String> destroyScheduledDuration;

    /**
     * @return Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
     * 
     */
    public Optional<Output<String>> destroyScheduledDuration() {
        return Optional.ofNullable(this.destroyScheduledDuration);
    }

    /**
     * Immutable. Whether this key may contain imported versions only.
     * 
     */
    @Import(name="importOnly")
    private @Nullable Output<Boolean> importOnly;

    /**
     * @return Immutable. Whether this key may contain imported versions only.
     * 
     */
    public Optional<Output<Boolean>> importOnly() {
        return Optional.ofNullable(this.importOnly);
    }

    @Import(name="keyRingId", required=true)
    private Output<String> keyRingId;

    public Output<String> keyRingId() {
        return this.keyRingId;
    }

    /**
     * Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    @Import(name="nextRotationTime")
    private @Nullable Output<String> nextRotationTime;

    /**
     * @return At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    public Optional<Output<String>> nextRotationTime() {
        return Optional.ofNullable(this.nextRotationTime);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Immutable. The immutable purpose of this CryptoKey.
     * 
     */
    @Import(name="purpose")
    private @Nullable Output<CryptoKeyPurpose> purpose;

    /**
     * @return Immutable. The immutable purpose of this CryptoKey.
     * 
     */
    public Optional<Output<CryptoKeyPurpose>> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    @Import(name="rotationPeriod")
    private @Nullable Output<String> rotationPeriod;

    /**
     * @return next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    public Optional<Output<String>> rotationPeriod() {
        return Optional.ofNullable(this.rotationPeriod);
    }

    /**
     * If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
     * 
     */
    @Import(name="skipInitialVersionCreation")
    private @Nullable Output<String> skipInitialVersionCreation;

    /**
     * @return If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
     * 
     */
    public Optional<Output<String>> skipInitialVersionCreation() {
        return Optional.ofNullable(this.skipInitialVersionCreation);
    }

    /**
     * A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
     * 
     */
    @Import(name="versionTemplate")
    private @Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate;

    /**
     * @return A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
     * 
     */
    public Optional<Output<CryptoKeyVersionTemplateArgs>> versionTemplate() {
        return Optional.ofNullable(this.versionTemplate);
    }

    private CryptoKeyArgs() {}

    private CryptoKeyArgs(CryptoKeyArgs $) {
        this.cryptoKeyBackend = $.cryptoKeyBackend;
        this.cryptoKeyId = $.cryptoKeyId;
        this.destroyScheduledDuration = $.destroyScheduledDuration;
        this.importOnly = $.importOnly;
        this.keyRingId = $.keyRingId;
        this.labels = $.labels;
        this.location = $.location;
        this.nextRotationTime = $.nextRotationTime;
        this.project = $.project;
        this.purpose = $.purpose;
        this.rotationPeriod = $.rotationPeriod;
        this.skipInitialVersionCreation = $.skipInitialVersionCreation;
        this.versionTemplate = $.versionTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoKeyArgs $;

        public Builder() {
            $ = new CryptoKeyArgs();
        }

        public Builder(CryptoKeyArgs defaults) {
            $ = new CryptoKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoKeyBackend Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyBackend(@Nullable Output<String> cryptoKeyBackend) {
            $.cryptoKeyBackend = cryptoKeyBackend;
            return this;
        }

        /**
         * @param cryptoKeyBackend Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyBackend(String cryptoKeyBackend) {
            return cryptoKeyBackend(Output.of(cryptoKeyBackend));
        }

        /**
         * @param cryptoKeyId Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyId(@Nullable Output<String> cryptoKeyId) {
            $.cryptoKeyId = cryptoKeyId;
            return this;
        }

        /**
         * @param cryptoKeyId Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyId(String cryptoKeyId) {
            return cryptoKeyId(Output.of(cryptoKeyId));
        }

        /**
         * @param destroyScheduledDuration Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
         * 
         * @return builder
         * 
         */
        public Builder destroyScheduledDuration(@Nullable Output<String> destroyScheduledDuration) {
            $.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }

        /**
         * @param destroyScheduledDuration Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
         * 
         * @return builder
         * 
         */
        public Builder destroyScheduledDuration(String destroyScheduledDuration) {
            return destroyScheduledDuration(Output.of(destroyScheduledDuration));
        }

        /**
         * @param importOnly Immutable. Whether this key may contain imported versions only.
         * 
         * @return builder
         * 
         */
        public Builder importOnly(@Nullable Output<Boolean> importOnly) {
            $.importOnly = importOnly;
            return this;
        }

        /**
         * @param importOnly Immutable. Whether this key may contain imported versions only.
         * 
         * @return builder
         * 
         */
        public Builder importOnly(Boolean importOnly) {
            return importOnly(Output.of(importOnly));
        }

        public Builder keyRingId(Output<String> keyRingId) {
            $.keyRingId = keyRingId;
            return this;
        }

        public Builder keyRingId(String keyRingId) {
            return keyRingId(Output.of(keyRingId));
        }

        /**
         * @param labels Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param nextRotationTime At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
         * 
         * @return builder
         * 
         */
        public Builder nextRotationTime(@Nullable Output<String> nextRotationTime) {
            $.nextRotationTime = nextRotationTime;
            return this;
        }

        /**
         * @param nextRotationTime At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
         * 
         * @return builder
         * 
         */
        public Builder nextRotationTime(String nextRotationTime) {
            return nextRotationTime(Output.of(nextRotationTime));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param purpose Immutable. The immutable purpose of this CryptoKey.
         * 
         * @return builder
         * 
         */
        public Builder purpose(@Nullable Output<CryptoKeyPurpose> purpose) {
            $.purpose = purpose;
            return this;
        }

        /**
         * @param purpose Immutable. The immutable purpose of this CryptoKey.
         * 
         * @return builder
         * 
         */
        public Builder purpose(CryptoKeyPurpose purpose) {
            return purpose(Output.of(purpose));
        }

        /**
         * @param rotationPeriod next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(@Nullable Output<String> rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        /**
         * @param rotationPeriod next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(String rotationPeriod) {
            return rotationPeriod(Output.of(rotationPeriod));
        }

        /**
         * @param skipInitialVersionCreation If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
         * 
         * @return builder
         * 
         */
        public Builder skipInitialVersionCreation(@Nullable Output<String> skipInitialVersionCreation) {
            $.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }

        /**
         * @param skipInitialVersionCreation If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
         * 
         * @return builder
         * 
         */
        public Builder skipInitialVersionCreation(String skipInitialVersionCreation) {
            return skipInitialVersionCreation(Output.of(skipInitialVersionCreation));
        }

        /**
         * @param versionTemplate A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
         * 
         * @return builder
         * 
         */
        public Builder versionTemplate(@Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate) {
            $.versionTemplate = versionTemplate;
            return this;
        }

        /**
         * @param versionTemplate A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
         * 
         * @return builder
         * 
         */
        public Builder versionTemplate(CryptoKeyVersionTemplateArgs versionTemplate) {
            return versionTemplate(Output.of(versionTemplate));
        }

        public CryptoKeyArgs build() {
            $.keyRingId = Objects.requireNonNull($.keyRingId, "expected parameter 'keyRingId' to be non-null");
            return $;
        }
    }

}
