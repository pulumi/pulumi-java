// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Indicates the location at which a package was found.
 * 
 */
public final class FileLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileLocationArgs Empty = new FileLocationArgs();

    /**
     * For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    private FileLocationArgs() {}

    private FileLocationArgs(FileLocationArgs $) {
        this.filePath = $.filePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileLocationArgs $;

        public Builder() {
            $ = new FileLocationArgs();
        }

        public Builder(FileLocationArgs defaults) {
            $ = new FileLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filePath For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        public FileLocationArgs build() {
            return $;
        }
    }

}
