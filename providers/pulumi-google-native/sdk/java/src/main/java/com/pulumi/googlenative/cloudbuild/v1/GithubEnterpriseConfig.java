// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.cloudbuild.v1.GithubEnterpriseConfigArgs;
import com.pulumi.googlenative.cloudbuild.v1.outputs.GitHubEnterpriseSecretsResponse;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Create an association between a GCP project and a GitHub Enterprise server.
 * 
 */
@ResourceType(type="google-native:cloudbuild/v1:GithubEnterpriseConfig")
public class GithubEnterpriseConfig extends com.pulumi.resources.CustomResource {
    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     * 
     */
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    /**
     * @return The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * Time when the installation was associated with the project.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Time when the installation was associated with the project.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Name to display for this config.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return Name to display for this config.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig&#39;s resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
     * 
     */
    @Export(name="gheConfigId", type=String.class, parameters={})
    private Output</* @Nullable */ String> gheConfigId;

    /**
     * @return Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig&#39;s resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
     * 
     */
    public Output<Optional<String>> gheConfigId() {
        return Codegen.optional(this.gheConfigId);
    }
    /**
     * The URL of the github enterprise host the configuration is for.
     * 
     */
    @Export(name="hostUrl", type=String.class, parameters={})
    private Output<String> hostUrl;

    /**
     * @return The URL of the github enterprise host the configuration is for.
     * 
     */
    public Output<String> hostUrl() {
        return this.hostUrl;
    }
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }
    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: &#34;projects/{$project_id}/githubEnterpriseConfigs/{$config_id}&#34;
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Optional. The full resource name for the GitHubEnterpriseConfig For example: &#34;projects/{$project_id}/githubEnterpriseConfigs/{$config_id}&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    @Export(name="peeredNetwork", type=String.class, parameters={})
    private Output<String> peeredNetwork;

    /**
     * @return Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    public Output<String> peeredNetwork() {
        return this.peeredNetwork;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * ID of the project.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output</* @Nullable */ String> projectId;

    /**
     * @return ID of the project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Names of secrets in Secret Manager.
     * 
     */
    @Export(name="secrets", type=GitHubEnterpriseSecretsResponse.class, parameters={})
    private Output<GitHubEnterpriseSecretsResponse> secrets;

    /**
     * @return Names of secrets in Secret Manager.
     * 
     */
    public Output<GitHubEnterpriseSecretsResponse> secrets() {
        return this.secrets;
    }
    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    @Export(name="sslCa", type=String.class, parameters={})
    private Output<String> sslCa;

    /**
     * @return Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    public Output<String> sslCa() {
        return this.sslCa;
    }
    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     * 
     */
    @Export(name="webhookKey", type=String.class, parameters={})
    private Output<String> webhookKey;

    /**
     * @return The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     * 
     */
    public Output<String> webhookKey() {
        return this.webhookKey;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GithubEnterpriseConfig(String name) {
        this(name, GithubEnterpriseConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GithubEnterpriseConfig(String name, GithubEnterpriseConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GithubEnterpriseConfig(String name, GithubEnterpriseConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:cloudbuild/v1:GithubEnterpriseConfig", name, args == null ? GithubEnterpriseConfigArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GithubEnterpriseConfig(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:cloudbuild/v1:GithubEnterpriseConfig", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GithubEnterpriseConfig get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GithubEnterpriseConfig(name, id, options);
    }
}
