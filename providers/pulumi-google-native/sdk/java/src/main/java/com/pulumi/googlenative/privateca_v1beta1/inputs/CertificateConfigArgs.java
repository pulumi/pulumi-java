// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1beta1.inputs.PublicKeyArgs;
import com.pulumi.googlenative.privateca_v1beta1.inputs.ReusableConfigWrapperArgs;
import com.pulumi.googlenative.privateca_v1beta1.inputs.SubjectConfigArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
 * 
 */
public final class CertificateConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateConfigArgs Empty = new CertificateConfigArgs();

    /**
     * Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<PublicKeyArgs> publicKey;

    public Optional<Output<PublicKeyArgs>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * Describes how some of the technical fields in a certificate should be populated.
     * 
     */
    @Import(name="reusableConfig", required=true)
    private Output<ReusableConfigWrapperArgs> reusableConfig;

    public Output<ReusableConfigWrapperArgs> reusableConfig() {
        return this.reusableConfig;
    }

    /**
     * Specifies some of the values in a certificate that are related to the subject.
     * 
     */
    @Import(name="subjectConfig", required=true)
    private Output<SubjectConfigArgs> subjectConfig;

    public Output<SubjectConfigArgs> subjectConfig() {
        return this.subjectConfig;
    }

    private CertificateConfigArgs() {}

    private CertificateConfigArgs(CertificateConfigArgs $) {
        this.publicKey = $.publicKey;
        this.reusableConfig = $.reusableConfig;
        this.subjectConfig = $.subjectConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateConfigArgs $;

        public Builder() {
            $ = new CertificateConfigArgs();
        }

        public Builder(CertificateConfigArgs defaults) {
            $ = new CertificateConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder publicKey(@Nullable Output<PublicKeyArgs> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(PublicKeyArgs publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public Builder reusableConfig(Output<ReusableConfigWrapperArgs> reusableConfig) {
            $.reusableConfig = reusableConfig;
            return this;
        }

        public Builder reusableConfig(ReusableConfigWrapperArgs reusableConfig) {
            return reusableConfig(Output.of(reusableConfig));
        }

        public Builder subjectConfig(Output<SubjectConfigArgs> subjectConfig) {
            $.subjectConfig = subjectConfig;
            return this;
        }

        public Builder subjectConfig(SubjectConfigArgs subjectConfig) {
            return subjectConfig(Output.of(subjectConfig));
        }

        public CertificateConfigArgs build() {
            $.reusableConfig = Objects.requireNonNull($.reusableConfig, "expected parameter 'reusableConfig' to be non-null");
            $.subjectConfig = Objects.requireNonNull($.subjectConfig, "expected parameter 'subjectConfig' to be non-null");
            return $;
        }
    }

}
