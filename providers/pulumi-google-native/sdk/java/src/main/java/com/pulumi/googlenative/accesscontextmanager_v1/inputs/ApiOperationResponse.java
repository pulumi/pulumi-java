// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.accesscontextmanager_v1.inputs.MethodSelectorResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Identification for an API Operation.
 * 
 */
public final class ApiOperationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApiOperationResponse Empty = new ApiOperationResponse();

    /**
     * API methods or permissions to allow. Method or permission must belong to the service specified by `service_name` field. A single MethodSelector entry with `*` specified for the `method` field will allow all methods AND permissions for the service specified in `service_name`.
     * 
     */
    @Import(name="methodSelectors", required=true)
    private List<MethodSelectorResponse> methodSelectors;

    public List<MethodSelectorResponse> methodSelectors() {
        return this.methodSelectors;
    }

    /**
     * The name of the API whose methods or permissions the IngressPolicy or EgressPolicy want to allow. A single ApiOperation with `service_name` field set to `*` will allow all methods AND permissions for all services.
     * 
     */
    @Import(name="serviceName", required=true)
    private String serviceName;

    public String serviceName() {
        return this.serviceName;
    }

    private ApiOperationResponse() {}

    private ApiOperationResponse(ApiOperationResponse $) {
        this.methodSelectors = $.methodSelectors;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiOperationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiOperationResponse $;

        public Builder() {
            $ = new ApiOperationResponse();
        }

        public Builder(ApiOperationResponse defaults) {
            $ = new ApiOperationResponse(Objects.requireNonNull(defaults));
        }

        public Builder methodSelectors(List<MethodSelectorResponse> methodSelectors) {
            $.methodSelectors = methodSelectors;
            return this;
        }

        public Builder methodSelectors(MethodSelectorResponse... methodSelectors) {
            return methodSelectors(List.of(methodSelectors));
        }

        public Builder serviceName(String serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public ApiOperationResponse build() {
            $.methodSelectors = Objects.requireNonNull($.methodSelectors, "expected parameter 'methodSelectors' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
