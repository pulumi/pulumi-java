// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.pubsub_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.pubsub_v1.enums.SchemaType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    /**
     * The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.
     * 
     */
    @Import(name="definition")
    private @Nullable Output<String> definition;

    public Optional<Output<String>> definition() {
        return Optional.ofNullable(this.definition);
    }

    /**
     * Name of the schema. Format is `projects/{project}/schemas/{schema}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="schemaId")
    private @Nullable Output<String> schemaId;

    public Optional<Output<String>> schemaId() {
        return Optional.ofNullable(this.schemaId);
    }

    /**
     * The type of the schema definition.
     * 
     */
    @Import(name="type")
    private @Nullable Output<SchemaType> type;

    public Optional<Output<SchemaType>> type() {
        return Optional.ofNullable(this.type);
    }

    private SchemaArgs() {}

    private SchemaArgs(SchemaArgs $) {
        this.definition = $.definition;
        this.name = $.name;
        this.project = $.project;
        this.schemaId = $.schemaId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaArgs $;

        public Builder() {
            $ = new SchemaArgs();
        }

        public Builder(SchemaArgs defaults) {
            $ = new SchemaArgs(Objects.requireNonNull(defaults));
        }

        public Builder definition(@Nullable Output<String> definition) {
            $.definition = definition;
            return this;
        }

        public Builder definition(String definition) {
            return definition(Output.of(definition));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder schemaId(@Nullable Output<String> schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        public Builder schemaId(String schemaId) {
            return schemaId(Output.of(schemaId));
        }

        public Builder type(@Nullable Output<SchemaType> type) {
            $.type = type;
            return this;
        }

        public Builder type(SchemaType type) {
            return type(Output.of(type));
        }

        public SchemaArgs build() {
            return $;
        }
    }

}
