// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.deploymentmanager_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.deploymentmanager_alpha.inputs.ImportFileResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Files that make up the template contents of a template type.
 * 
 */
public final class TemplateContentsResponse extends com.pulumi.resources.InvokeArgs {

    public static final TemplateContentsResponse Empty = new TemplateContentsResponse();

    /**
     * Import files referenced by the main template.
     * 
     */
    @Import(name="imports", required=true)
    private List<ImportFileResponse> imports;

    public List<ImportFileResponse> imports() {
        return this.imports;
    }

    /**
     * Which interpreter (python or jinja) should be used during expansion.
     * 
     */
    @Import(name="interpreter", required=true)
    private String interpreter;

    public String interpreter() {
        return this.interpreter;
    }

    /**
     * The filename of the mainTemplate
     * 
     */
    @Import(name="mainTemplate", required=true)
    private String mainTemplate;

    public String mainTemplate() {
        return this.mainTemplate;
    }

    /**
     * The contents of the template schema.
     * 
     */
    @Import(name="schema", required=true)
    private String schema;

    public String schema() {
        return this.schema;
    }

    /**
     * The contents of the main template file.
     * 
     */
    @Import(name="template", required=true)
    private String template;

    public String template() {
        return this.template;
    }

    private TemplateContentsResponse() {}

    private TemplateContentsResponse(TemplateContentsResponse $) {
        this.imports = $.imports;
        this.interpreter = $.interpreter;
        this.mainTemplate = $.mainTemplate;
        this.schema = $.schema;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateContentsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateContentsResponse $;

        public Builder() {
            $ = new TemplateContentsResponse();
        }

        public Builder(TemplateContentsResponse defaults) {
            $ = new TemplateContentsResponse(Objects.requireNonNull(defaults));
        }

        public Builder imports(List<ImportFileResponse> imports) {
            $.imports = imports;
            return this;
        }

        public Builder imports(ImportFileResponse... imports) {
            return imports(List.of(imports));
        }

        public Builder interpreter(String interpreter) {
            $.interpreter = interpreter;
            return this;
        }

        public Builder mainTemplate(String mainTemplate) {
            $.mainTemplate = mainTemplate;
            return this;
        }

        public Builder schema(String schema) {
            $.schema = schema;
            return this;
        }

        public Builder template(String template) {
            $.template = template;
            return this;
        }

        public TemplateContentsResponse build() {
            $.imports = Objects.requireNonNull($.imports, "expected parameter 'imports' to be non-null");
            $.interpreter = Objects.requireNonNull($.interpreter, "expected parameter 'interpreter' to be non-null");
            $.mainTemplate = Objects.requireNonNull($.mainTemplate, "expected parameter 'mainTemplate' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.template = Objects.requireNonNull($.template, "expected parameter 'template' to be non-null");
            return $;
        }
    }

}
