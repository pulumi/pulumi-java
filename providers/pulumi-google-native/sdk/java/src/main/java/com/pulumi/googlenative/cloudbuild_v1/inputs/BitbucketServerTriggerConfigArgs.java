// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PullRequestFilterArgs;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PushFilterArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
 * 
 */
public final class BitbucketServerTriggerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BitbucketServerTriggerConfigArgs Empty = new BitbucketServerTriggerConfigArgs();

    /**
     * The Bitbucket server config resource that this trigger config maps to.
     * 
     */
    @Import(name="bitbucketServerConfigResource", required=true)
    private Output<String> bitbucketServerConfigResource;

    public Output<String> bitbucketServerConfigResource() {
        return this.bitbucketServerConfigResource;
    }

    /**
     * Key of the project that the repo is in. For example: The key for http://mybitbucket.server/projects/TEST/repos/test-repo is &#34;TEST&#34;.
     * 
     */
    @Import(name="projectKey", required=true)
    private Output<String> projectKey;

    public Output<String> projectKey() {
        return this.projectKey;
    }

    /**
     * Filter to match changes in pull requests.
     * 
     */
    @Import(name="pullRequest")
    private @Nullable Output<PullRequestFilterArgs> pullRequest;

    public Optional<Output<PullRequestFilterArgs>> pullRequest() {
        return Optional.ofNullable(this.pullRequest);
    }

    /**
     * Filter to match changes in refs like branches, tags.
     * 
     */
    @Import(name="push")
    private @Nullable Output<PushFilterArgs> push;

    public Optional<Output<PushFilterArgs>> push() {
        return Optional.ofNullable(this.push);
    }

    /**
     * Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is &#39;test repo&#39;, in the URL it would become &#39;test-repo&#39; as in http://mybitbucket.server/projects/TEST/repos/test-repo.
     * 
     */
    @Import(name="repoSlug", required=true)
    private Output<String> repoSlug;

    public Output<String> repoSlug() {
        return this.repoSlug;
    }

    private BitbucketServerTriggerConfigArgs() {}

    private BitbucketServerTriggerConfigArgs(BitbucketServerTriggerConfigArgs $) {
        this.bitbucketServerConfigResource = $.bitbucketServerConfigResource;
        this.projectKey = $.projectKey;
        this.pullRequest = $.pullRequest;
        this.push = $.push;
        this.repoSlug = $.repoSlug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BitbucketServerTriggerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BitbucketServerTriggerConfigArgs $;

        public Builder() {
            $ = new BitbucketServerTriggerConfigArgs();
        }

        public Builder(BitbucketServerTriggerConfigArgs defaults) {
            $ = new BitbucketServerTriggerConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder bitbucketServerConfigResource(Output<String> bitbucketServerConfigResource) {
            $.bitbucketServerConfigResource = bitbucketServerConfigResource;
            return this;
        }

        public Builder bitbucketServerConfigResource(String bitbucketServerConfigResource) {
            return bitbucketServerConfigResource(Output.of(bitbucketServerConfigResource));
        }

        public Builder projectKey(Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        public Builder pullRequest(@Nullable Output<PullRequestFilterArgs> pullRequest) {
            $.pullRequest = pullRequest;
            return this;
        }

        public Builder pullRequest(PullRequestFilterArgs pullRequest) {
            return pullRequest(Output.of(pullRequest));
        }

        public Builder push(@Nullable Output<PushFilterArgs> push) {
            $.push = push;
            return this;
        }

        public Builder push(PushFilterArgs push) {
            return push(Output.of(push));
        }

        public Builder repoSlug(Output<String> repoSlug) {
            $.repoSlug = repoSlug;
            return this;
        }

        public Builder repoSlug(String repoSlug) {
            return repoSlug(Output.of(repoSlug));
        }

        public BitbucketServerTriggerConfigArgs build() {
            $.bitbucketServerConfigResource = Objects.requireNonNull($.bitbucketServerConfigResource, "expected parameter 'bitbucketServerConfigResource' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            $.repoSlug = Objects.requireNonNull($.repoSlug, "expected parameter 'repoSlug' to be non-null");
            return $;
        }
    }

}
