// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.transcoder.v1.outputs.SegmentSettingsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class MuxStreamResponse {
    /**
     * @return The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
     * 
     */
    private final String container;
    /**
     * @return List of `ElementaryStream.key`s multiplexed in this stream.
     * 
     */
    private final List<String> elementaryStreams;
    /**
     * @return The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
     * 
     */
    private final String fileName;
    /**
     * @return A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `.m3u8` extension suffix.
     * 
     */
    private final String key;
    /**
     * @return Segment settings for `ts`, `fmp4` and `vtt`.
     * 
     */
    private final SegmentSettingsResponse segmentSettings;

    @CustomType.Constructor
    private MuxStreamResponse(
        @CustomType.Parameter("container") String container,
        @CustomType.Parameter("elementaryStreams") List<String> elementaryStreams,
        @CustomType.Parameter("fileName") String fileName,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("segmentSettings") SegmentSettingsResponse segmentSettings) {
        this.container = container;
        this.elementaryStreams = elementaryStreams;
        this.fileName = fileName;
        this.key = key;
        this.segmentSettings = segmentSettings;
    }

    /**
     * @return The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
     * 
     */
    public String container() {
        return this.container;
    }
    /**
     * @return List of `ElementaryStream.key`s multiplexed in this stream.
     * 
     */
    public List<String> elementaryStreams() {
        return this.elementaryStreams;
    }
    /**
     * @return The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `.m3u8` extension suffix.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Segment settings for `ts`, `fmp4` and `vtt`.
     * 
     */
    public SegmentSettingsResponse segmentSettings() {
        return this.segmentSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MuxStreamResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String container;
        private List<String> elementaryStreams;
        private String fileName;
        private String key;
        private SegmentSettingsResponse segmentSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(MuxStreamResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.container = defaults.container;
    	      this.elementaryStreams = defaults.elementaryStreams;
    	      this.fileName = defaults.fileName;
    	      this.key = defaults.key;
    	      this.segmentSettings = defaults.segmentSettings;
        }

        public Builder container(String container) {
            this.container = Objects.requireNonNull(container);
            return this;
        }
        public Builder elementaryStreams(List<String> elementaryStreams) {
            this.elementaryStreams = Objects.requireNonNull(elementaryStreams);
            return this;
        }
        public Builder elementaryStreams(String... elementaryStreams) {
            return elementaryStreams(List.of(elementaryStreams));
        }
        public Builder fileName(String fileName) {
            this.fileName = Objects.requireNonNull(fileName);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder segmentSettings(SegmentSettingsResponse segmentSettings) {
            this.segmentSettings = Objects.requireNonNull(segmentSettings);
            return this;
        }        public MuxStreamResponse build() {
            return new MuxStreamResponse(container, elementaryStreams, fileName, key, segmentSettings);
        }
    }
}
