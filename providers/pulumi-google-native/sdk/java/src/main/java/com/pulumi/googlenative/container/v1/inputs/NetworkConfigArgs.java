// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container.v1.enums.NetworkConfigDatapathProvider;
import com.pulumi.googlenative.container.v1.enums.NetworkConfigPrivateIpv6GoogleAccess;
import com.pulumi.googlenative.container.v1.inputs.DNSConfigArgs;
import com.pulumi.googlenative.container.v1.inputs.DefaultSnatStatusArgs;
import com.pulumi.googlenative.container.v1.inputs.ServiceExternalIPsConfigArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * NetworkConfig reports the relative names of network &amp; subnetwork.
 * 
 */
public final class NetworkConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConfigArgs Empty = new NetworkConfigArgs();

    /**
     * The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
     * 
     */
    @Import(name="datapathProvider")
    private @Nullable Output<NetworkConfigDatapathProvider> datapathProvider;

    /**
     * @return The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
     * 
     */
    public Optional<Output<NetworkConfigDatapathProvider>> datapathProvider() {
        return Optional.ofNullable(this.datapathProvider);
    }

    /**
     * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
     * 
     */
    @Import(name="defaultSnatStatus")
    private @Nullable Output<DefaultSnatStatusArgs> defaultSnatStatus;

    /**
     * @return Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
     * 
     */
    public Optional<Output<DefaultSnatStatusArgs>> defaultSnatStatus() {
        return Optional.ofNullable(this.defaultSnatStatus);
    }

    /**
     * DNSConfig contains clusterDNS config for this cluster.
     * 
     */
    @Import(name="dnsConfig")
    private @Nullable Output<DNSConfigArgs> dnsConfig;

    /**
     * @return DNSConfig contains clusterDNS config for this cluster.
     * 
     */
    public Optional<Output<DNSConfigArgs>> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }

    /**
     * Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
     * 
     */
    @Import(name="enableIntraNodeVisibility")
    private @Nullable Output<Boolean> enableIntraNodeVisibility;

    /**
     * @return Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
     * 
     */
    public Optional<Output<Boolean>> enableIntraNodeVisibility() {
        return Optional.ofNullable(this.enableIntraNodeVisibility);
    }

    /**
     * Whether L4ILB Subsetting is enabled for this cluster.
     * 
     */
    @Import(name="enableL4ilbSubsetting")
    private @Nullable Output<Boolean> enableL4ilbSubsetting;

    /**
     * @return Whether L4ILB Subsetting is enabled for this cluster.
     * 
     */
    public Optional<Output<Boolean>> enableL4ilbSubsetting() {
        return Optional.ofNullable(this.enableL4ilbSubsetting);
    }

    /**
     * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
     * 
     */
    @Import(name="privateIpv6GoogleAccess")
    private @Nullable Output<NetworkConfigPrivateIpv6GoogleAccess> privateIpv6GoogleAccess;

    /**
     * @return The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
     * 
     */
    public Optional<Output<NetworkConfigPrivateIpv6GoogleAccess>> privateIpv6GoogleAccess() {
        return Optional.ofNullable(this.privateIpv6GoogleAccess);
    }

    /**
     * ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
     * 
     */
    @Import(name="serviceExternalIpsConfig")
    private @Nullable Output<ServiceExternalIPsConfigArgs> serviceExternalIpsConfig;

    /**
     * @return ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
     * 
     */
    public Optional<Output<ServiceExternalIPsConfigArgs>> serviceExternalIpsConfig() {
        return Optional.ofNullable(this.serviceExternalIpsConfig);
    }

    private NetworkConfigArgs() {}

    private NetworkConfigArgs(NetworkConfigArgs $) {
        this.datapathProvider = $.datapathProvider;
        this.defaultSnatStatus = $.defaultSnatStatus;
        this.dnsConfig = $.dnsConfig;
        this.enableIntraNodeVisibility = $.enableIntraNodeVisibility;
        this.enableL4ilbSubsetting = $.enableL4ilbSubsetting;
        this.privateIpv6GoogleAccess = $.privateIpv6GoogleAccess;
        this.serviceExternalIpsConfig = $.serviceExternalIpsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConfigArgs $;

        public Builder() {
            $ = new NetworkConfigArgs();
        }

        public Builder(NetworkConfigArgs defaults) {
            $ = new NetworkConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datapathProvider The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
         * 
         * @return builder
         * 
         */
        public Builder datapathProvider(@Nullable Output<NetworkConfigDatapathProvider> datapathProvider) {
            $.datapathProvider = datapathProvider;
            return this;
        }

        /**
         * @param datapathProvider The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
         * 
         * @return builder
         * 
         */
        public Builder datapathProvider(NetworkConfigDatapathProvider datapathProvider) {
            return datapathProvider(Output.of(datapathProvider));
        }

        /**
         * @param defaultSnatStatus Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
         * 
         * @return builder
         * 
         */
        public Builder defaultSnatStatus(@Nullable Output<DefaultSnatStatusArgs> defaultSnatStatus) {
            $.defaultSnatStatus = defaultSnatStatus;
            return this;
        }

        /**
         * @param defaultSnatStatus Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
         * 
         * @return builder
         * 
         */
        public Builder defaultSnatStatus(DefaultSnatStatusArgs defaultSnatStatus) {
            return defaultSnatStatus(Output.of(defaultSnatStatus));
        }

        /**
         * @param dnsConfig DNSConfig contains clusterDNS config for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(@Nullable Output<DNSConfigArgs> dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        /**
         * @param dnsConfig DNSConfig contains clusterDNS config for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(DNSConfigArgs dnsConfig) {
            return dnsConfig(Output.of(dnsConfig));
        }

        /**
         * @param enableIntraNodeVisibility Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
         * 
         * @return builder
         * 
         */
        public Builder enableIntraNodeVisibility(@Nullable Output<Boolean> enableIntraNodeVisibility) {
            $.enableIntraNodeVisibility = enableIntraNodeVisibility;
            return this;
        }

        /**
         * @param enableIntraNodeVisibility Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
         * 
         * @return builder
         * 
         */
        public Builder enableIntraNodeVisibility(Boolean enableIntraNodeVisibility) {
            return enableIntraNodeVisibility(Output.of(enableIntraNodeVisibility));
        }

        /**
         * @param enableL4ilbSubsetting Whether L4ILB Subsetting is enabled for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder enableL4ilbSubsetting(@Nullable Output<Boolean> enableL4ilbSubsetting) {
            $.enableL4ilbSubsetting = enableL4ilbSubsetting;
            return this;
        }

        /**
         * @param enableL4ilbSubsetting Whether L4ILB Subsetting is enabled for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder enableL4ilbSubsetting(Boolean enableL4ilbSubsetting) {
            return enableL4ilbSubsetting(Output.of(enableL4ilbSubsetting));
        }

        /**
         * @param privateIpv6GoogleAccess The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
         * 
         * @return builder
         * 
         */
        public Builder privateIpv6GoogleAccess(@Nullable Output<NetworkConfigPrivateIpv6GoogleAccess> privateIpv6GoogleAccess) {
            $.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            return this;
        }

        /**
         * @param privateIpv6GoogleAccess The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
         * 
         * @return builder
         * 
         */
        public Builder privateIpv6GoogleAccess(NetworkConfigPrivateIpv6GoogleAccess privateIpv6GoogleAccess) {
            return privateIpv6GoogleAccess(Output.of(privateIpv6GoogleAccess));
        }

        /**
         * @param serviceExternalIpsConfig ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
         * 
         * @return builder
         * 
         */
        public Builder serviceExternalIpsConfig(@Nullable Output<ServiceExternalIPsConfigArgs> serviceExternalIpsConfig) {
            $.serviceExternalIpsConfig = serviceExternalIpsConfig;
            return this;
        }

        /**
         * @param serviceExternalIpsConfig ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
         * 
         * @return builder
         * 
         */
        public Builder serviceExternalIpsConfig(ServiceExternalIPsConfigArgs serviceExternalIpsConfig) {
            return serviceExternalIpsConfig(Output.of(serviceExternalIpsConfig));
        }

        public NetworkConfigArgs build() {
            return $;
        }
    }

}
