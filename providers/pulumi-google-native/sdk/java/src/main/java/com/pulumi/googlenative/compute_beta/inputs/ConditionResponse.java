// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * This is deprecated and has no effect. Do not use.
 * 
 */
public final class ConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConditionResponse Empty = new ConditionResponse();

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="iam", required=true)
    private String iam;

    public String iam() {
        return this.iam;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="op", required=true)
    private String op;

    public String op() {
        return this.op;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="svc", required=true)
    private String svc;

    public String svc() {
        return this.svc;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="sys", required=true)
    private String sys;

    public String sys() {
        return this.sys;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="values", required=true)
    private List<String> values;

    public List<String> values() {
        return this.values;
    }

    private ConditionResponse() {}

    private ConditionResponse(ConditionResponse $) {
        this.iam = $.iam;
        this.op = $.op;
        this.svc = $.svc;
        this.sys = $.sys;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionResponse $;

        public Builder() {
            $ = new ConditionResponse();
        }

        public Builder(ConditionResponse defaults) {
            $ = new ConditionResponse(Objects.requireNonNull(defaults));
        }

        public Builder iam(String iam) {
            $.iam = iam;
            return this;
        }

        public Builder op(String op) {
            $.op = op;
            return this;
        }

        public Builder svc(String svc) {
            $.svc = svc;
            return this;
        }

        public Builder sys(String sys) {
            $.sys = sys;
            return this;
        }

        public Builder values(List<String> values) {
            $.values = values;
            return this;
        }

        public Builder values(String... values) {
            return values(List.of(values));
        }

        public ConditionResponse build() {
            $.iam = Objects.requireNonNull($.iam, "expected parameter 'iam' to be non-null");
            $.op = Objects.requireNonNull($.op, "expected parameter 'op' to be non-null");
            $.svc = Objects.requireNonNull($.svc, "expected parameter 'svc' to be non-null");
            $.sys = Objects.requireNonNull($.sys, "expected parameter 'sys' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
