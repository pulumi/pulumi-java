// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasehosting.v1beta1.enums.DomainRedirectType;
import java.lang.String;
import java.util.Objects;


/**
 * Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
 * 
 */
public final class DomainRedirectArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRedirectArgs Empty = new DomainRedirectArgs();

    /**
     * The domain name to redirect to.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The domain name to redirect to.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The redirect status code.
     * 
     */
    @Import(name="type", required=true)
    private Output<DomainRedirectType> type;

    /**
     * @return The redirect status code.
     * 
     */
    public Output<DomainRedirectType> type() {
        return this.type;
    }

    private DomainRedirectArgs() {}

    private DomainRedirectArgs(DomainRedirectArgs $) {
        this.domainName = $.domainName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRedirectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRedirectArgs $;

        public Builder() {
            $ = new DomainRedirectArgs();
        }

        public Builder(DomainRedirectArgs defaults) {
            $ = new DomainRedirectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName The domain name to redirect to.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name to redirect to.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param type The redirect status code.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<DomainRedirectType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The redirect status code.
         * 
         * @return builder
         * 
         */
        public Builder type(DomainRedirectType type) {
            return type(Output.of(type));
        }

        public DomainRedirectArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
