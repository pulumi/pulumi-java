// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner.v1alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Scan schedule configuration.
 * 
 */
public final class ScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleArgs Empty = new ScheduleArgs();

    /**
     * The duration of time between executions in days.
     * 
     */
    @Import(name="intervalDurationDays", required=true)
    private Output<Integer> intervalDurationDays;

    /**
     * @return The duration of time between executions in days.
     * 
     */
    public Output<Integer> intervalDurationDays() {
        return this.intervalDurationDays;
    }

    /**
     * A timestamp indicates when the next run will be scheduled. The value is refreshed by the server after each run. If unspecified, it will default to current server time, which means the scan will be scheduled to start immediately.
     * 
     */
    @Import(name="scheduleTime")
    private @Nullable Output<String> scheduleTime;

    /**
     * @return A timestamp indicates when the next run will be scheduled. The value is refreshed by the server after each run. If unspecified, it will default to current server time, which means the scan will be scheduled to start immediately.
     * 
     */
    public Optional<Output<String>> scheduleTime() {
        return Optional.ofNullable(this.scheduleTime);
    }

    private ScheduleArgs() {}

    private ScheduleArgs(ScheduleArgs $) {
        this.intervalDurationDays = $.intervalDurationDays;
        this.scheduleTime = $.scheduleTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleArgs $;

        public Builder() {
            $ = new ScheduleArgs();
        }

        public Builder(ScheduleArgs defaults) {
            $ = new ScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intervalDurationDays The duration of time between executions in days.
         * 
         * @return builder
         * 
         */
        public Builder intervalDurationDays(Output<Integer> intervalDurationDays) {
            $.intervalDurationDays = intervalDurationDays;
            return this;
        }

        /**
         * @param intervalDurationDays The duration of time between executions in days.
         * 
         * @return builder
         * 
         */
        public Builder intervalDurationDays(Integer intervalDurationDays) {
            return intervalDurationDays(Output.of(intervalDurationDays));
        }

        /**
         * @param scheduleTime A timestamp indicates when the next run will be scheduled. The value is refreshed by the server after each run. If unspecified, it will default to current server time, which means the scan will be scheduled to start immediately.
         * 
         * @return builder
         * 
         */
        public Builder scheduleTime(@Nullable Output<String> scheduleTime) {
            $.scheduleTime = scheduleTime;
            return this;
        }

        /**
         * @param scheduleTime A timestamp indicates when the next run will be scheduled. The value is refreshed by the server after each run. If unspecified, it will default to current server time, which means the scan will be scheduled to start immediately.
         * 
         * @return builder
         * 
         */
        public Builder scheduleTime(String scheduleTime) {
            return scheduleTime(Output.of(scheduleTime));
        }

        public ScheduleArgs build() {
            $.intervalDurationDays = Objects.requireNonNull($.intervalDurationDays, "expected parameter 'intervalDurationDays' to be non-null");
            return $;
        }
    }

}
