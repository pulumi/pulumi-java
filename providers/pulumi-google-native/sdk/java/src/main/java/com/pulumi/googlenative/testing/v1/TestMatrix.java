// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.testing.v1.TestMatrixArgs;
import com.pulumi.googlenative.testing.v1.outputs.ClientInfoResponse;
import com.pulumi.googlenative.testing.v1.outputs.EnvironmentMatrixResponse;
import com.pulumi.googlenative.testing.v1.outputs.ResultStorageResponse;
import com.pulumi.googlenative.testing.v1.outputs.TestExecutionResponse;
import com.pulumi.googlenative.testing.v1.outputs.TestSpecificationResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
 * Auto-naming is currently not supported for this resource.
 * Note - this resource&#39;s API doesn&#39;t support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 * 
 */
@ResourceType(type="google-native:testing/v1:TestMatrix")
public class TestMatrix extends com.pulumi.resources.CustomResource {
    /**
     * Information about the client which invoked the test.
     * 
     */
    @Export(name="clientInfo", type=ClientInfoResponse.class, parameters={})
    private Output<ClientInfoResponse> clientInfo;

    /**
     * @return Information about the client which invoked the test.
     * 
     */
    public Output<ClientInfoResponse> clientInfo() {
        return this.clientInfo;
    }
    /**
     * The devices the tests are being executed on.
     * 
     */
    @Export(name="environmentMatrix", type=EnvironmentMatrixResponse.class, parameters={})
    private Output<EnvironmentMatrixResponse> environmentMatrix;

    /**
     * @return The devices the tests are being executed on.
     * 
     */
    public Output<EnvironmentMatrixResponse> environmentMatrix() {
        return this.environmentMatrix;
    }
    /**
     * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     * 
     */
    @Export(name="failFast", type=Boolean.class, parameters={})
    private Output<Boolean> failFast;

    /**
     * @return If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     * 
     */
    public Output<Boolean> failFast() {
        return this.failFast;
    }
    /**
     * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     * 
     */
    @Export(name="flakyTestAttempts", type=Integer.class, parameters={})
    private Output<Integer> flakyTestAttempts;

    /**
     * @return The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     * 
     */
    public Output<Integer> flakyTestAttempts() {
        return this.flakyTestAttempts;
    }
    /**
     * Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
     * 
     */
    @Export(name="invalidMatrixDetails", type=String.class, parameters={})
    private Output<String> invalidMatrixDetails;

    /**
     * @return Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
     * 
     */
    public Output<String> invalidMatrixDetails() {
        return this.invalidMatrixDetails;
    }
    /**
     * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
     * 
     */
    @Export(name="outcomeSummary", type=String.class, parameters={})
    private Output<String> outcomeSummary;

    /**
     * @return Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
     * 
     */
    public Output<String> outcomeSummary() {
        return this.outcomeSummary;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
     * 
     */
    @Export(name="requestId", type=String.class, parameters={})
    private Output</* @Nullable */ String> requestId;

    /**
     * @return A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
     * 
     */
    public Output<Optional<String>> requestId() {
        return Codegen.optional(this.requestId);
    }
    /**
     * Where the results for the matrix are written.
     * 
     */
    @Export(name="resultStorage", type=ResultStorageResponse.class, parameters={})
    private Output<ResultStorageResponse> resultStorage;

    /**
     * @return Where the results for the matrix are written.
     * 
     */
    public Output<ResultStorageResponse> resultStorage() {
        return this.resultStorage;
    }
    /**
     * Indicates the current progress of the test matrix.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return Indicates the current progress of the test matrix.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The list of test executions that the service creates for this matrix.
     * 
     */
    @Export(name="testExecutions", type=List.class, parameters={TestExecutionResponse.class})
    private Output<List<TestExecutionResponse>> testExecutions;

    /**
     * @return The list of test executions that the service creates for this matrix.
     * 
     */
    public Output<List<TestExecutionResponse>> testExecutions() {
        return this.testExecutions;
    }
    /**
     * Unique id set by the service.
     * 
     */
    @Export(name="testMatrixId", type=String.class, parameters={})
    private Output<String> testMatrixId;

    /**
     * @return Unique id set by the service.
     * 
     */
    public Output<String> testMatrixId() {
        return this.testMatrixId;
    }
    /**
     * How to run the test.
     * 
     */
    @Export(name="testSpecification", type=TestSpecificationResponse.class, parameters={})
    private Output<TestSpecificationResponse> testSpecification;

    /**
     * @return How to run the test.
     * 
     */
    public Output<TestSpecificationResponse> testSpecification() {
        return this.testSpecification;
    }
    /**
     * The time this test matrix was initially created.
     * 
     */
    @Export(name="timestamp", type=String.class, parameters={})
    private Output<String> timestamp;

    /**
     * @return The time this test matrix was initially created.
     * 
     */
    public Output<String> timestamp() {
        return this.timestamp;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TestMatrix(String name) {
        this(name, TestMatrixArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TestMatrix(String name, TestMatrixArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TestMatrix(String name, TestMatrixArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:testing/v1:TestMatrix", name, args == null ? TestMatrixArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private TestMatrix(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:testing/v1:TestMatrix", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TestMatrix get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TestMatrix(name, id, options);
    }
}
