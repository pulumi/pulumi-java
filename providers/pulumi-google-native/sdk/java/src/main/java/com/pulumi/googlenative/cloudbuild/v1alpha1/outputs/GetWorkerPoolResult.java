// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudbuild.v1alpha1.outputs.WorkerConfigResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkerPoolResult {
    /**
     * @return Time at which the request to create the `WorkerPool` was received.
     * 
     */
    private final String createTime;
    /**
     * @return Time at which the request to delete the `WorkerPool` was received.
     * 
     */
    private final String deleteTime;
    /**
     * @return User-defined name of the `WorkerPool`.
     * 
     */
    private final String name;
    /**
     * @return The project ID of the GCP project for which the `WorkerPool` is created.
     * 
     */
    private final String project;
    /**
     * @return List of regions to create the `WorkerPool`. Regions can&#39;t be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.
     * 
     */
    private final List<String> regions;
    /**
     * @return The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level.
     * 
     */
    private final String serviceAccountEmail;
    /**
     * @return WorkerPool Status.
     * 
     */
    private final String status;
    /**
     * @return Time at which the request to update the `WorkerPool` was received.
     * 
     */
    private final String updateTime;
    /**
     * @return Configuration to be used for a creating workers in the `WorkerPool`.
     * 
     */
    private final WorkerConfigResponse workerConfig;
    /**
     * @return Total number of workers to be created across all requested regions.
     * 
     */
    private final String workerCount;

    @CustomType.Constructor
    private GetWorkerPoolResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("deleteTime") String deleteTime,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("project") String project,
        @CustomType.Parameter("regions") List<String> regions,
        @CustomType.Parameter("serviceAccountEmail") String serviceAccountEmail,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("updateTime") String updateTime,
        @CustomType.Parameter("workerConfig") WorkerConfigResponse workerConfig,
        @CustomType.Parameter("workerCount") String workerCount) {
        this.createTime = createTime;
        this.deleteTime = deleteTime;
        this.name = name;
        this.project = project;
        this.regions = regions;
        this.serviceAccountEmail = serviceAccountEmail;
        this.status = status;
        this.updateTime = updateTime;
        this.workerConfig = workerConfig;
        this.workerCount = workerCount;
    }

    /**
     * @return Time at which the request to create the `WorkerPool` was received.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Time at which the request to delete the `WorkerPool` was received.
     * 
     */
    public String deleteTime() {
        return this.deleteTime;
    }
    /**
     * @return User-defined name of the `WorkerPool`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The project ID of the GCP project for which the `WorkerPool` is created.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return List of regions to create the `WorkerPool`. Regions can&#39;t be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.
     * 
     */
    public List<String> regions() {
        return this.regions;
    }
    /**
     * @return The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level.
     * 
     */
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * @return WorkerPool Status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Time at which the request to update the `WorkerPool` was received.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return Configuration to be used for a creating workers in the `WorkerPool`.
     * 
     */
    public WorkerConfigResponse workerConfig() {
        return this.workerConfig;
    }
    /**
     * @return Total number of workers to be created across all requested regions.
     * 
     */
    public String workerCount() {
        return this.workerCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerPoolResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String deleteTime;
        private String name;
        private String project;
        private List<String> regions;
        private String serviceAccountEmail;
        private String status;
        private String updateTime;
        private WorkerConfigResponse workerConfig;
        private String workerCount;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWorkerPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.deleteTime = defaults.deleteTime;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.regions = defaults.regions;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.status = defaults.status;
    	      this.updateTime = defaults.updateTime;
    	      this.workerConfig = defaults.workerConfig;
    	      this.workerCount = defaults.workerCount;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder deleteTime(String deleteTime) {
            this.deleteTime = Objects.requireNonNull(deleteTime);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder regions(List<String> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public Builder workerConfig(WorkerConfigResponse workerConfig) {
            this.workerConfig = Objects.requireNonNull(workerConfig);
            return this;
        }
        public Builder workerCount(String workerCount) {
            this.workerCount = Objects.requireNonNull(workerCount);
            return this;
        }        public GetWorkerPoolResult build() {
            return new GetWorkerPoolResult(createTime, deleteTime, name, project, regions, serviceAccountEmail, status, updateTime, workerConfig, workerCount);
        }
    }
}
