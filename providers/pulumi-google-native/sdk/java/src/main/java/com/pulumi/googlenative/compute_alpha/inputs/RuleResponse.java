// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.ConditionResponse;
import com.pulumi.googlenative.compute_alpha.inputs.LogConfigResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * This is deprecated and has no effect. Do not use.
 * 
 */
public final class RuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RuleResponse Empty = new RuleResponse();

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="action", required=true)
    private String action;

    public String action() {
        return this.action;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="conditions", required=true)
    private List<ConditionResponse> conditions;

    public List<ConditionResponse> conditions() {
        return this.conditions;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="ins", required=true)
    private List<String> ins;

    public List<String> ins() {
        return this.ins;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="logConfigs", required=true)
    private List<LogConfigResponse> logConfigs;

    public List<LogConfigResponse> logConfigs() {
        return this.logConfigs;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="notIns", required=true)
    private List<String> notIns;

    public List<String> notIns() {
        return this.notIns;
    }

    /**
     * This is deprecated and has no effect. Do not use.
     * 
     */
    @Import(name="permissions", required=true)
    private List<String> permissions;

    public List<String> permissions() {
        return this.permissions;
    }

    private RuleResponse() {}

    private RuleResponse(RuleResponse $) {
        this.action = $.action;
        this.conditions = $.conditions;
        this.description = $.description;
        this.ins = $.ins;
        this.logConfigs = $.logConfigs;
        this.notIns = $.notIns;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleResponse $;

        public Builder() {
            $ = new RuleResponse();
        }

        public Builder(RuleResponse defaults) {
            $ = new RuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder action(String action) {
            $.action = action;
            return this;
        }

        public Builder conditions(List<ConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder ins(List<String> ins) {
            $.ins = ins;
            return this;
        }

        public Builder ins(String... ins) {
            return ins(List.of(ins));
        }

        public Builder logConfigs(List<LogConfigResponse> logConfigs) {
            $.logConfigs = logConfigs;
            return this;
        }

        public Builder logConfigs(LogConfigResponse... logConfigs) {
            return logConfigs(List.of(logConfigs));
        }

        public Builder notIns(List<String> notIns) {
            $.notIns = notIns;
            return this;
        }

        public Builder notIns(String... notIns) {
            return notIns(List.of(notIns));
        }

        public Builder permissions(List<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public RuleResponse build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.ins = Objects.requireNonNull($.ins, "expected parameter 'ins' to be non-null");
            $.logConfigs = Objects.requireNonNull($.logConfigs, "expected parameter 'logConfigs' to be non-null");
            $.notIns = Objects.requireNonNull($.notIns, "expected parameter 'notIns' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            return $;
        }
    }

}
