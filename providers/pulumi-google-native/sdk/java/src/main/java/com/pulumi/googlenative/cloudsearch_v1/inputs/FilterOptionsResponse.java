// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudsearch_v1.inputs.FilterResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Filter options to be applied on query.
 * 
 */
public final class FilterOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final FilterOptionsResponse Empty = new FilterOptionsResponse();

    /**
     * Generic filter to restrict the search, such as `lang:en`, `site:xyz`.
     * 
     */
    @Import(name="filter", required=true)
      private final FilterResponse filter;

    public FilterResponse filter() {
        return this.filter;
    }

    /**
     * If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters.
     * 
     */
    @Import(name="objectType", required=true)
      private final String objectType;

    public String objectType() {
        return this.objectType;
    }

    public FilterOptionsResponse(
        FilterResponse filter,
        String objectType) {
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.objectType = Objects.requireNonNull(objectType, "expected parameter 'objectType' to be non-null");
    }

    private FilterOptionsResponse() {
        this.filter = null;
        this.objectType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FilterOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterResponse filter;
        private String objectType;

        public Builder() {
    	      // Empty
        }

        public Builder(FilterOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.objectType = defaults.objectType;
        }

        public Builder filter(FilterResponse filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        public Builder objectType(String objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }        public FilterOptionsResponse build() {
            return new FilterOptionsResponse(filter, objectType);
        }
    }
}
