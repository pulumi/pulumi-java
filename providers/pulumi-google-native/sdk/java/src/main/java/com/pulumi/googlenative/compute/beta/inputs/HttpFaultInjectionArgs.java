// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.beta.inputs.HttpFaultAbortArgs;
import com.pulumi.googlenative.compute.beta.inputs.HttpFaultDelayArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
 * 
 */
public final class HttpFaultInjectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpFaultInjectionArgs Empty = new HttpFaultInjectionArgs();

    /**
     * The specification for how client requests are aborted as part of fault injection.
     * 
     */
    @Import(name="abort")
    private @Nullable Output<HttpFaultAbortArgs> abort;

    /**
     * @return The specification for how client requests are aborted as part of fault injection.
     * 
     */
    public Optional<Output<HttpFaultAbortArgs>> abort() {
        return Optional.ofNullable(this.abort);
    }

    /**
     * The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
     * 
     */
    @Import(name="delay")
    private @Nullable Output<HttpFaultDelayArgs> delay;

    /**
     * @return The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
     * 
     */
    public Optional<Output<HttpFaultDelayArgs>> delay() {
        return Optional.ofNullable(this.delay);
    }

    private HttpFaultInjectionArgs() {}

    private HttpFaultInjectionArgs(HttpFaultInjectionArgs $) {
        this.abort = $.abort;
        this.delay = $.delay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpFaultInjectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpFaultInjectionArgs $;

        public Builder() {
            $ = new HttpFaultInjectionArgs();
        }

        public Builder(HttpFaultInjectionArgs defaults) {
            $ = new HttpFaultInjectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abort The specification for how client requests are aborted as part of fault injection.
         * 
         * @return builder
         * 
         */
        public Builder abort(@Nullable Output<HttpFaultAbortArgs> abort) {
            $.abort = abort;
            return this;
        }

        /**
         * @param abort The specification for how client requests are aborted as part of fault injection.
         * 
         * @return builder
         * 
         */
        public Builder abort(HttpFaultAbortArgs abort) {
            return abort(Output.of(abort));
        }

        /**
         * @param delay The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Output<HttpFaultDelayArgs> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
         * 
         * @return builder
         * 
         */
        public Builder delay(HttpFaultDelayArgs delay) {
            return delay(Output.of(delay));
        }

        public HttpFaultInjectionArgs build() {
            return $;
        }
    }

}
