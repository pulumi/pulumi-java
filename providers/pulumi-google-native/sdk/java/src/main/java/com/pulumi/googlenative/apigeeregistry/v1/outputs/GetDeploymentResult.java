// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigeeregistry.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeploymentResult {
    /**
     * @return Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
     * 
     */
    private final String accessGuidance;
    /**
     * @return Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
     * 
     */
    private final Map<String,String> annotations;
    /**
     * @return The full resource name (including revision id) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: apis/{api}/deployments/{deployment}
     * 
     */
    private final String apiSpecRevision;
    /**
     * @return Creation timestamp; when the deployment resource was created.
     * 
     */
    private final String createTime;
    /**
     * @return A detailed description.
     * 
     */
    private final String description;
    /**
     * @return Human-meaningful name.
     * 
     */
    private final String displayName;
    /**
     * @return The address where the deployment is serving. Changes to this value will update the revision.
     * 
     */
    private final String endpointUri;
    /**
     * @return The address of the external channel of the API (e.g. the Developer Portal). Changes to this value will not affect the revision.
     * 
     */
    private final String externalChannelUri;
    /**
     * @return Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
     * 
     */
    private final String intendedAudience;
    /**
     * @return Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with &#34;apigeeregistry.googleapis.com/&#34; and cannot be changed.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Resource name.
     * 
     */
    private final String name;
    /**
     * @return Revision creation timestamp; when the represented revision was created.
     * 
     */
    private final String revisionCreateTime;
    /**
     * @return Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
     * 
     */
    private final String revisionId;
    /**
     * @return Last update timestamp: when the represented revision was last modified.
     * 
     */
    private final String revisionUpdateTime;

    @CustomType.Constructor
    private GetDeploymentResult(
        @CustomType.Parameter("accessGuidance") String accessGuidance,
        @CustomType.Parameter("annotations") Map<String,String> annotations,
        @CustomType.Parameter("apiSpecRevision") String apiSpecRevision,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("endpointUri") String endpointUri,
        @CustomType.Parameter("externalChannelUri") String externalChannelUri,
        @CustomType.Parameter("intendedAudience") String intendedAudience,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("revisionCreateTime") String revisionCreateTime,
        @CustomType.Parameter("revisionId") String revisionId,
        @CustomType.Parameter("revisionUpdateTime") String revisionUpdateTime) {
        this.accessGuidance = accessGuidance;
        this.annotations = annotations;
        this.apiSpecRevision = apiSpecRevision;
        this.createTime = createTime;
        this.description = description;
        this.displayName = displayName;
        this.endpointUri = endpointUri;
        this.externalChannelUri = externalChannelUri;
        this.intendedAudience = intendedAudience;
        this.labels = labels;
        this.name = name;
        this.revisionCreateTime = revisionCreateTime;
        this.revisionId = revisionId;
        this.revisionUpdateTime = revisionUpdateTime;
    }

    /**
     * @return Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
     * 
     */
    public String accessGuidance() {
        return this.accessGuidance;
    }
    /**
     * @return Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return The full resource name (including revision id) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: apis/{api}/deployments/{deployment}
     * 
     */
    public String apiSpecRevision() {
        return this.apiSpecRevision;
    }
    /**
     * @return Creation timestamp; when the deployment resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return A detailed description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Human-meaningful name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The address where the deployment is serving. Changes to this value will update the revision.
     * 
     */
    public String endpointUri() {
        return this.endpointUri;
    }
    /**
     * @return The address of the external channel of the API (e.g. the Developer Portal). Changes to this value will not affect the revision.
     * 
     */
    public String externalChannelUri() {
        return this.externalChannelUri;
    }
    /**
     * @return Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
     * 
     */
    public String intendedAudience() {
        return this.intendedAudience;
    }
    /**
     * @return Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with &#34;apigeeregistry.googleapis.com/&#34; and cannot be changed.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Revision creation timestamp; when the represented revision was created.
     * 
     */
    public String revisionCreateTime() {
        return this.revisionCreateTime;
    }
    /**
     * @return Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
     * 
     */
    public String revisionId() {
        return this.revisionId;
    }
    /**
     * @return Last update timestamp: when the represented revision was last modified.
     * 
     */
    public String revisionUpdateTime() {
        return this.revisionUpdateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessGuidance;
        private Map<String,String> annotations;
        private String apiSpecRevision;
        private String createTime;
        private String description;
        private String displayName;
        private String endpointUri;
        private String externalChannelUri;
        private String intendedAudience;
        private Map<String,String> labels;
        private String name;
        private String revisionCreateTime;
        private String revisionId;
        private String revisionUpdateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDeploymentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessGuidance = defaults.accessGuidance;
    	      this.annotations = defaults.annotations;
    	      this.apiSpecRevision = defaults.apiSpecRevision;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endpointUri = defaults.endpointUri;
    	      this.externalChannelUri = defaults.externalChannelUri;
    	      this.intendedAudience = defaults.intendedAudience;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.revisionCreateTime = defaults.revisionCreateTime;
    	      this.revisionId = defaults.revisionId;
    	      this.revisionUpdateTime = defaults.revisionUpdateTime;
        }

        public Builder accessGuidance(String accessGuidance) {
            this.accessGuidance = Objects.requireNonNull(accessGuidance);
            return this;
        }
        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        public Builder apiSpecRevision(String apiSpecRevision) {
            this.apiSpecRevision = Objects.requireNonNull(apiSpecRevision);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder endpointUri(String endpointUri) {
            this.endpointUri = Objects.requireNonNull(endpointUri);
            return this;
        }
        public Builder externalChannelUri(String externalChannelUri) {
            this.externalChannelUri = Objects.requireNonNull(externalChannelUri);
            return this;
        }
        public Builder intendedAudience(String intendedAudience) {
            this.intendedAudience = Objects.requireNonNull(intendedAudience);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder revisionCreateTime(String revisionCreateTime) {
            this.revisionCreateTime = Objects.requireNonNull(revisionCreateTime);
            return this;
        }
        public Builder revisionId(String revisionId) {
            this.revisionId = Objects.requireNonNull(revisionId);
            return this;
        }
        public Builder revisionUpdateTime(String revisionUpdateTime) {
            this.revisionUpdateTime = Objects.requireNonNull(revisionUpdateTime);
            return this;
        }        public GetDeploymentResult build() {
            return new GetDeploymentResult(accessGuidance, annotations, apiSpecRevision, createTime, description, displayName, endpointUri, externalChannelUri, intendedAudience, labels, name, revisionCreateTime, revisionId, revisionUpdateTime);
        }
    }
}
