// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.ArtifactArgs;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.CommandArgs;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.SourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 * 
 */
public final class BuildProvenanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildProvenanceArgs Empty = new BuildProvenanceArgs();

    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     * 
     */
    @Import(name="buildOptions")
    private @Nullable Output<Map<String,String>> buildOptions;

    public Optional<Output<Map<String,String>>> buildOptions() {
        return Optional.ofNullable(this.buildOptions);
    }

    /**
     * Version string of the builder at the time this build was executed.
     * 
     */
    @Import(name="builderVersion")
    private @Nullable Output<String> builderVersion;

    public Optional<Output<String>> builderVersion() {
        return Optional.ofNullable(this.builderVersion);
    }

    /**
     * Output of the build.
     * 
     */
    @Import(name="builtArtifacts")
    private @Nullable Output<List<ArtifactArgs>> builtArtifacts;

    public Optional<Output<List<ArtifactArgs>>> builtArtifacts() {
        return Optional.ofNullable(this.builtArtifacts);
    }

    /**
     * Commands requested by the build.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<CommandArgs>> commands;

    public Optional<Output<List<CommandArgs>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * Time at which the build was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * E-mail address of the user who initiated this build. Note that this was the user&#39;s e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * Time at which execution of the build was finished.
     * 
     */
    @Import(name="finishTime")
    private @Nullable Output<String> finishTime;

    public Optional<Output<String>> finishTime() {
        return Optional.ofNullable(this.finishTime);
    }

    /**
     * Unique identifier of the build.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Google Cloud Storage bucket where logs were written.
     * 
     */
    @Import(name="logsBucket")
    private @Nullable Output<String> logsBucket;

    public Optional<Output<String>> logsBucket() {
        return Optional.ofNullable(this.logsBucket);
    }

    /**
     * ID of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Details of the Source input to the build.
     * 
     */
    @Import(name="sourceProvenance")
    private @Nullable Output<SourceArgs> sourceProvenance;

    public Optional<Output<SourceArgs>> sourceProvenance() {
        return Optional.ofNullable(this.sourceProvenance);
    }

    /**
     * Time at which execution of the build was started.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     * 
     */
    @Import(name="triggerId")
    private @Nullable Output<String> triggerId;

    public Optional<Output<String>> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }

    private BuildProvenanceArgs() {}

    private BuildProvenanceArgs(BuildProvenanceArgs $) {
        this.buildOptions = $.buildOptions;
        this.builderVersion = $.builderVersion;
        this.builtArtifacts = $.builtArtifacts;
        this.commands = $.commands;
        this.createTime = $.createTime;
        this.creator = $.creator;
        this.finishTime = $.finishTime;
        this.id = $.id;
        this.logsBucket = $.logsBucket;
        this.project = $.project;
        this.sourceProvenance = $.sourceProvenance;
        this.startTime = $.startTime;
        this.triggerId = $.triggerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildProvenanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildProvenanceArgs $;

        public Builder() {
            $ = new BuildProvenanceArgs();
        }

        public Builder(BuildProvenanceArgs defaults) {
            $ = new BuildProvenanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder buildOptions(@Nullable Output<Map<String,String>> buildOptions) {
            $.buildOptions = buildOptions;
            return this;
        }

        public Builder buildOptions(Map<String,String> buildOptions) {
            return buildOptions(Output.of(buildOptions));
        }

        public Builder builderVersion(@Nullable Output<String> builderVersion) {
            $.builderVersion = builderVersion;
            return this;
        }

        public Builder builderVersion(String builderVersion) {
            return builderVersion(Output.of(builderVersion));
        }

        public Builder builtArtifacts(@Nullable Output<List<ArtifactArgs>> builtArtifacts) {
            $.builtArtifacts = builtArtifacts;
            return this;
        }

        public Builder builtArtifacts(List<ArtifactArgs> builtArtifacts) {
            return builtArtifacts(Output.of(builtArtifacts));
        }

        public Builder builtArtifacts(ArtifactArgs... builtArtifacts) {
            return builtArtifacts(List.of(builtArtifacts));
        }

        public Builder commands(@Nullable Output<List<CommandArgs>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<CommandArgs> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(CommandArgs... commands) {
            return commands(List.of(commands));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        public Builder finishTime(@Nullable Output<String> finishTime) {
            $.finishTime = finishTime;
            return this;
        }

        public Builder finishTime(String finishTime) {
            return finishTime(Output.of(finishTime));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder logsBucket(@Nullable Output<String> logsBucket) {
            $.logsBucket = logsBucket;
            return this;
        }

        public Builder logsBucket(String logsBucket) {
            return logsBucket(Output.of(logsBucket));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder sourceProvenance(@Nullable Output<SourceArgs> sourceProvenance) {
            $.sourceProvenance = sourceProvenance;
            return this;
        }

        public Builder sourceProvenance(SourceArgs sourceProvenance) {
            return sourceProvenance(Output.of(sourceProvenance));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder triggerId(@Nullable Output<String> triggerId) {
            $.triggerId = triggerId;
            return this;
        }

        public Builder triggerId(String triggerId) {
            return triggerId(Output.of(triggerId));
        }

        public BuildProvenanceArgs build() {
            return $;
        }
    }

}
