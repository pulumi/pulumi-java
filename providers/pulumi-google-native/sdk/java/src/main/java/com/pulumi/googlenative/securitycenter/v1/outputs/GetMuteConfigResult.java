// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.securitycenter.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMuteConfigResult {
    /**
     * @return The time at which the mute config was created. This field is set by the server and will be ignored if provided on config creation.
     * 
     */
    private final String createTime;
    /**
     * @return A description of the mute config.
     * 
     */
    private final String description;
    /**
     * @return The human readable name to be displayed for the mute config.
     * 
     */
    private final String displayName;
    /**
     * @return An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
     * 
     */
    private final String filter;
    /**
     * @return Email address of the user who last edited the mute config. This field is set by the server and will be ignored if provided on config creation or update.
     * 
     */
    private final String mostRecentEditor;
    /**
     * @return This field will be ignored if provided on config creation. Format &#34;organizations/{organization}/muteConfigs/{mute_config}&#34; &#34;folders/{folder}/muteConfigs/{mute_config}&#34; &#34;projects/{project}/muteConfigs/{mute_config}&#34;
     * 
     */
    private final String name;
    /**
     * @return The most recent time at which the mute config was updated. This field is set by the server and will be ignored if provided on config creation or update.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetMuteConfigResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("filter") String filter,
        @CustomType.Parameter("mostRecentEditor") String mostRecentEditor,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.createTime = createTime;
        this.description = description;
        this.displayName = displayName;
        this.filter = filter;
        this.mostRecentEditor = mostRecentEditor;
        this.name = name;
        this.updateTime = updateTime;
    }

    /**
     * @return The time at which the mute config was created. This field is set by the server and will be ignored if provided on config creation.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return A description of the mute config.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The human readable name to be displayed for the mute config.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
     * 
     */
    public String filter() {
        return this.filter;
    }
    /**
     * @return Email address of the user who last edited the mute config. This field is set by the server and will be ignored if provided on config creation or update.
     * 
     */
    public String mostRecentEditor() {
        return this.mostRecentEditor;
    }
    /**
     * @return This field will be ignored if provided on config creation. Format &#34;organizations/{organization}/muteConfigs/{mute_config}&#34; &#34;folders/{folder}/muteConfigs/{mute_config}&#34; &#34;projects/{project}/muteConfigs/{mute_config}&#34;
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The most recent time at which the mute config was updated. This field is set by the server and will be ignored if provided on config creation or update.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMuteConfigResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String description;
        private String displayName;
        private String filter;
        private String mostRecentEditor;
        private String name;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMuteConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.filter = defaults.filter;
    	      this.mostRecentEditor = defaults.mostRecentEditor;
    	      this.name = defaults.name;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        public Builder mostRecentEditor(String mostRecentEditor) {
            this.mostRecentEditor = Objects.requireNonNull(mostRecentEditor);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetMuteConfigResult build() {
            return new GetMuteConfigResult(createTime, description, displayName, filter, mostRecentEditor, name, updateTime);
        }
    }
}
