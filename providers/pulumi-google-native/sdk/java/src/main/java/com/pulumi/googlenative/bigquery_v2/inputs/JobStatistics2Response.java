// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.BiEngineStatisticsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.BigQueryModelTrainingResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.DatasetReferenceResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.DmlStatisticsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.ExplainQueryStageResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.JobStatistics2ReservationUsageItemResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.MlStatisticsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.QueryParameterResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.QueryTimelineSampleResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.RoutineReferenceResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.RowAccessPolicyReferenceResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.TableReferenceResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.TableSchemaResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class JobStatistics2Response extends com.pulumi.resources.InvokeArgs {

    public static final JobStatistics2Response Empty = new JobStatistics2Response();

    /**
     * BI Engine specific Statistics. [Output-only] BI Engine specific Statistics.
     * 
     */
    @Import(name="biEngineStatistics", required=true)
    private BiEngineStatisticsResponse biEngineStatistics;

    /**
     * @return BI Engine specific Statistics. [Output-only] BI Engine specific Statistics.
     * 
     */
    public BiEngineStatisticsResponse biEngineStatistics() {
        return this.biEngineStatistics;
    }

    /**
     * Billing tier for the job.
     * 
     */
    @Import(name="billingTier", required=true)
    private Integer billingTier;

    /**
     * @return Billing tier for the job.
     * 
     */
    public Integer billingTier() {
        return this.billingTier;
    }

    /**
     * Whether the query result was fetched from the query cache.
     * 
     */
    @Import(name="cacheHit", required=true)
    private Boolean cacheHit;

    /**
     * @return Whether the query result was fetched from the query cache.
     * 
     */
    public Boolean cacheHit() {
        return this.cacheHit;
    }

    /**
     * [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
     * 
     */
    @Import(name="ddlAffectedRowAccessPolicyCount", required=true)
    private String ddlAffectedRowAccessPolicyCount;

    /**
     * @return [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
     * 
     */
    public String ddlAffectedRowAccessPolicyCount() {
        return this.ddlAffectedRowAccessPolicyCount;
    }

    /**
     * The DDL destination table. Present only for ALTER TABLE RENAME TO queries. Note that ddl_target_table is used just for its type information.
     * 
     */
    @Import(name="ddlDestinationTable", required=true)
    private TableReferenceResponse ddlDestinationTable;

    /**
     * @return The DDL destination table. Present only for ALTER TABLE RENAME TO queries. Note that ddl_target_table is used just for its type information.
     * 
     */
    public TableReferenceResponse ddlDestinationTable() {
        return this.ddlDestinationTable;
    }

    /**
     * The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): &#34;CREATE&#34;: The query created the DDL target. &#34;SKIP&#34;: No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. &#34;REPLACE&#34;: The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. &#34;DROP&#34;: The query deleted the DDL target.
     * 
     */
    @Import(name="ddlOperationPerformed", required=true)
    private String ddlOperationPerformed;

    /**
     * @return The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): &#34;CREATE&#34;: The query created the DDL target. &#34;SKIP&#34;: No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. &#34;REPLACE&#34;: The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. &#34;DROP&#34;: The query deleted the DDL target.
     * 
     */
    public String ddlOperationPerformed() {
        return this.ddlOperationPerformed;
    }

    /**
     * The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
     * 
     */
    @Import(name="ddlTargetDataset", required=true)
    private DatasetReferenceResponse ddlTargetDataset;

    /**
     * @return The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
     * 
     */
    public DatasetReferenceResponse ddlTargetDataset() {
        return this.ddlTargetDataset;
    }

    /**
     * The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
     * 
     */
    @Import(name="ddlTargetRoutine", required=true)
    private RoutineReferenceResponse ddlTargetRoutine;

    /**
     * @return The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
     * 
     */
    public RoutineReferenceResponse ddlTargetRoutine() {
        return this.ddlTargetRoutine;
    }

    /**
     * [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
     * 
     */
    @Import(name="ddlTargetRowAccessPolicy", required=true)
    private RowAccessPolicyReferenceResponse ddlTargetRowAccessPolicy;

    /**
     * @return [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
     * 
     */
    public RowAccessPolicyReferenceResponse ddlTargetRowAccessPolicy() {
        return this.ddlTargetRowAccessPolicy;
    }

    /**
     * The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
     * 
     */
    @Import(name="ddlTargetTable", required=true)
    private TableReferenceResponse ddlTargetTable;

    /**
     * @return The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
     * 
     */
    public TableReferenceResponse ddlTargetTable() {
        return this.ddlTargetTable;
    }

    /**
     * Detailed statistics for DML statements Present only for DML statements INSERT, UPDATE, DELETE or TRUNCATE.
     * 
     */
    @Import(name="dmlStats", required=true)
    private DmlStatisticsResponse dmlStats;

    /**
     * @return Detailed statistics for DML statements Present only for DML statements INSERT, UPDATE, DELETE or TRUNCATE.
     * 
     */
    public DmlStatisticsResponse dmlStats() {
        return this.dmlStats;
    }

    /**
     * The original estimate of bytes processed for the job.
     * 
     */
    @Import(name="estimatedBytesProcessed", required=true)
    private String estimatedBytesProcessed;

    /**
     * @return The original estimate of bytes processed for the job.
     * 
     */
    public String estimatedBytesProcessed() {
        return this.estimatedBytesProcessed;
    }

    /**
     * Statistics of a BigQuery ML training job.
     * 
     */
    @Import(name="mlStatistics", required=true)
    private MlStatisticsResponse mlStatistics;

    /**
     * @return Statistics of a BigQuery ML training job.
     * 
     */
    public MlStatisticsResponse mlStatistics() {
        return this.mlStatistics;
    }

    /**
     * [Output-only, Beta] Information about create model query job progress.
     * 
     */
    @Import(name="modelTraining", required=true)
    private BigQueryModelTrainingResponse modelTraining;

    /**
     * @return [Output-only, Beta] Information about create model query job progress.
     * 
     */
    public BigQueryModelTrainingResponse modelTraining() {
        return this.modelTraining;
    }

    /**
     * The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
     * 
     */
    @Import(name="numDmlAffectedRows", required=true)
    private String numDmlAffectedRows;

    /**
     * @return The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
     * 
     */
    public String numDmlAffectedRows() {
        return this.numDmlAffectedRows;
    }

    /**
     * Describes execution plan for the query.
     * 
     */
    @Import(name="queryPlan", required=true)
    private List<ExplainQueryStageResponse> queryPlan;

    /**
     * @return Describes execution plan for the query.
     * 
     */
    public List<ExplainQueryStageResponse> queryPlan() {
        return this.queryPlan;
    }

    /**
     * Referenced routines (persistent user-defined functions and stored procedures) for the job.
     * 
     */
    @Import(name="referencedRoutines", required=true)
    private List<RoutineReferenceResponse> referencedRoutines;

    /**
     * @return Referenced routines (persistent user-defined functions and stored procedures) for the job.
     * 
     */
    public List<RoutineReferenceResponse> referencedRoutines() {
        return this.referencedRoutines;
    }

    /**
     * Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
     * 
     */
    @Import(name="referencedTables", required=true)
    private List<TableReferenceResponse> referencedTables;

    /**
     * @return Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
     * 
     */
    public List<TableReferenceResponse> referencedTables() {
        return this.referencedTables;
    }

    /**
     * Job resource usage breakdown by reservation.
     * 
     */
    @Import(name="reservationUsage", required=true)
    private List<JobStatistics2ReservationUsageItemResponse> reservationUsage;

    /**
     * @return Job resource usage breakdown by reservation.
     * 
     */
    public List<JobStatistics2ReservationUsageItemResponse> reservationUsage() {
        return this.reservationUsage;
    }

    /**
     * The schema of the results. Present only for successful dry run of non-legacy SQL queries.
     * 
     */
    @Import(name="schema", required=true)
    private TableSchemaResponse schema;

    /**
     * @return The schema of the results. Present only for successful dry run of non-legacy SQL queries.
     * 
     */
    public TableSchemaResponse schema() {
        return this.schema;
    }

    /**
     * The type of query statement, if valid. Possible values (new values might be added in the future): &#34;SELECT&#34;: SELECT query. &#34;INSERT&#34;: INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;UPDATE&#34;: UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;DELETE&#34;: DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;MERGE&#34;: MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;ALTER_TABLE&#34;: ALTER TABLE query. &#34;ALTER_VIEW&#34;: ALTER VIEW query. &#34;ASSERT&#34;: ASSERT condition AS &#39;description&#39;. &#34;CREATE_FUNCTION&#34;: CREATE FUNCTION query. &#34;CREATE_MODEL&#34;: CREATE [OR REPLACE] MODEL ... AS SELECT ... . &#34;CREATE_PROCEDURE&#34;: CREATE PROCEDURE query. &#34;CREATE_TABLE&#34;: CREATE [OR REPLACE] TABLE without AS SELECT. &#34;CREATE_TABLE_AS_SELECT&#34;: CREATE [OR REPLACE] TABLE ... AS SELECT ... . &#34;CREATE_VIEW&#34;: CREATE [OR REPLACE] VIEW ... AS SELECT ... . &#34;DROP_FUNCTION&#34; : DROP FUNCTION query. &#34;DROP_PROCEDURE&#34;: DROP PROCEDURE query. &#34;DROP_TABLE&#34;: DROP TABLE query. &#34;DROP_VIEW&#34;: DROP VIEW query.
     * 
     */
    @Import(name="statementType", required=true)
    private String statementType;

    /**
     * @return The type of query statement, if valid. Possible values (new values might be added in the future): &#34;SELECT&#34;: SELECT query. &#34;INSERT&#34;: INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;UPDATE&#34;: UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;DELETE&#34;: DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;MERGE&#34;: MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;ALTER_TABLE&#34;: ALTER TABLE query. &#34;ALTER_VIEW&#34;: ALTER VIEW query. &#34;ASSERT&#34;: ASSERT condition AS &#39;description&#39;. &#34;CREATE_FUNCTION&#34;: CREATE FUNCTION query. &#34;CREATE_MODEL&#34;: CREATE [OR REPLACE] MODEL ... AS SELECT ... . &#34;CREATE_PROCEDURE&#34;: CREATE PROCEDURE query. &#34;CREATE_TABLE&#34;: CREATE [OR REPLACE] TABLE without AS SELECT. &#34;CREATE_TABLE_AS_SELECT&#34;: CREATE [OR REPLACE] TABLE ... AS SELECT ... . &#34;CREATE_VIEW&#34;: CREATE [OR REPLACE] VIEW ... AS SELECT ... . &#34;DROP_FUNCTION&#34; : DROP FUNCTION query. &#34;DROP_PROCEDURE&#34;: DROP PROCEDURE query. &#34;DROP_TABLE&#34;: DROP TABLE query. &#34;DROP_VIEW&#34;: DROP VIEW query.
     * 
     */
    public String statementType() {
        return this.statementType;
    }

    /**
     * [Beta] Describes a timeline of job execution.
     * 
     */
    @Import(name="timeline", required=true)
    private List<QueryTimelineSampleResponse> timeline;

    /**
     * @return [Beta] Describes a timeline of job execution.
     * 
     */
    public List<QueryTimelineSampleResponse> timeline() {
        return this.timeline;
    }

    /**
     * Total bytes billed for the job.
     * 
     */
    @Import(name="totalBytesBilled", required=true)
    private String totalBytesBilled;

    /**
     * @return Total bytes billed for the job.
     * 
     */
    public String totalBytesBilled() {
        return this.totalBytesBilled;
    }

    /**
     * Total bytes processed for the job.
     * 
     */
    @Import(name="totalBytesProcessed", required=true)
    private String totalBytesProcessed;

    /**
     * @return Total bytes processed for the job.
     * 
     */
    public String totalBytesProcessed() {
        return this.totalBytesProcessed;
    }

    /**
     * For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
     * 
     */
    @Import(name="totalBytesProcessedAccuracy", required=true)
    private String totalBytesProcessedAccuracy;

    /**
     * @return For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
     * 
     */
    public String totalBytesProcessedAccuracy() {
        return this.totalBytesProcessedAccuracy;
    }

    /**
     * Total number of partitions processed from all partitioned tables referenced in the job.
     * 
     */
    @Import(name="totalPartitionsProcessed", required=true)
    private String totalPartitionsProcessed;

    /**
     * @return Total number of partitions processed from all partitioned tables referenced in the job.
     * 
     */
    public String totalPartitionsProcessed() {
        return this.totalPartitionsProcessed;
    }

    /**
     * Slot-milliseconds for the job.
     * 
     */
    @Import(name="totalSlotMs", required=true)
    private String totalSlotMs;

    /**
     * @return Slot-milliseconds for the job.
     * 
     */
    public String totalSlotMs() {
        return this.totalSlotMs;
    }

    /**
     * Standard SQL only: list of undeclared query parameters detected during a dry run validation.
     * 
     */
    @Import(name="undeclaredQueryParameters", required=true)
    private List<QueryParameterResponse> undeclaredQueryParameters;

    /**
     * @return Standard SQL only: list of undeclared query parameters detected during a dry run validation.
     * 
     */
    public List<QueryParameterResponse> undeclaredQueryParameters() {
        return this.undeclaredQueryParameters;
    }

    private JobStatistics2Response() {}

    private JobStatistics2Response(JobStatistics2Response $) {
        this.biEngineStatistics = $.biEngineStatistics;
        this.billingTier = $.billingTier;
        this.cacheHit = $.cacheHit;
        this.ddlAffectedRowAccessPolicyCount = $.ddlAffectedRowAccessPolicyCount;
        this.ddlDestinationTable = $.ddlDestinationTable;
        this.ddlOperationPerformed = $.ddlOperationPerformed;
        this.ddlTargetDataset = $.ddlTargetDataset;
        this.ddlTargetRoutine = $.ddlTargetRoutine;
        this.ddlTargetRowAccessPolicy = $.ddlTargetRowAccessPolicy;
        this.ddlTargetTable = $.ddlTargetTable;
        this.dmlStats = $.dmlStats;
        this.estimatedBytesProcessed = $.estimatedBytesProcessed;
        this.mlStatistics = $.mlStatistics;
        this.modelTraining = $.modelTraining;
        this.numDmlAffectedRows = $.numDmlAffectedRows;
        this.queryPlan = $.queryPlan;
        this.referencedRoutines = $.referencedRoutines;
        this.referencedTables = $.referencedTables;
        this.reservationUsage = $.reservationUsage;
        this.schema = $.schema;
        this.statementType = $.statementType;
        this.timeline = $.timeline;
        this.totalBytesBilled = $.totalBytesBilled;
        this.totalBytesProcessed = $.totalBytesProcessed;
        this.totalBytesProcessedAccuracy = $.totalBytesProcessedAccuracy;
        this.totalPartitionsProcessed = $.totalPartitionsProcessed;
        this.totalSlotMs = $.totalSlotMs;
        this.undeclaredQueryParameters = $.undeclaredQueryParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStatistics2Response defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStatistics2Response $;

        public Builder() {
            $ = new JobStatistics2Response();
        }

        public Builder(JobStatistics2Response defaults) {
            $ = new JobStatistics2Response(Objects.requireNonNull(defaults));
        }

        /**
         * @param biEngineStatistics BI Engine specific Statistics. [Output-only] BI Engine specific Statistics.
         * 
         * @return builder
         * 
         */
        public Builder biEngineStatistics(BiEngineStatisticsResponse biEngineStatistics) {
            $.biEngineStatistics = biEngineStatistics;
            return this;
        }

        /**
         * @param billingTier Billing tier for the job.
         * 
         * @return builder
         * 
         */
        public Builder billingTier(Integer billingTier) {
            $.billingTier = billingTier;
            return this;
        }

        /**
         * @param cacheHit Whether the query result was fetched from the query cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheHit(Boolean cacheHit) {
            $.cacheHit = cacheHit;
            return this;
        }

        /**
         * @param ddlAffectedRowAccessPolicyCount [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
         * 
         * @return builder
         * 
         */
        public Builder ddlAffectedRowAccessPolicyCount(String ddlAffectedRowAccessPolicyCount) {
            $.ddlAffectedRowAccessPolicyCount = ddlAffectedRowAccessPolicyCount;
            return this;
        }

        /**
         * @param ddlDestinationTable The DDL destination table. Present only for ALTER TABLE RENAME TO queries. Note that ddl_target_table is used just for its type information.
         * 
         * @return builder
         * 
         */
        public Builder ddlDestinationTable(TableReferenceResponse ddlDestinationTable) {
            $.ddlDestinationTable = ddlDestinationTable;
            return this;
        }

        /**
         * @param ddlOperationPerformed The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): &#34;CREATE&#34;: The query created the DDL target. &#34;SKIP&#34;: No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. &#34;REPLACE&#34;: The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. &#34;DROP&#34;: The query deleted the DDL target.
         * 
         * @return builder
         * 
         */
        public Builder ddlOperationPerformed(String ddlOperationPerformed) {
            $.ddlOperationPerformed = ddlOperationPerformed;
            return this;
        }

        /**
         * @param ddlTargetDataset The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
         * 
         * @return builder
         * 
         */
        public Builder ddlTargetDataset(DatasetReferenceResponse ddlTargetDataset) {
            $.ddlTargetDataset = ddlTargetDataset;
            return this;
        }

        /**
         * @param ddlTargetRoutine The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
         * 
         * @return builder
         * 
         */
        public Builder ddlTargetRoutine(RoutineReferenceResponse ddlTargetRoutine) {
            $.ddlTargetRoutine = ddlTargetRoutine;
            return this;
        }

        /**
         * @param ddlTargetRowAccessPolicy [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
         * 
         * @return builder
         * 
         */
        public Builder ddlTargetRowAccessPolicy(RowAccessPolicyReferenceResponse ddlTargetRowAccessPolicy) {
            $.ddlTargetRowAccessPolicy = ddlTargetRowAccessPolicy;
            return this;
        }

        /**
         * @param ddlTargetTable The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
         * 
         * @return builder
         * 
         */
        public Builder ddlTargetTable(TableReferenceResponse ddlTargetTable) {
            $.ddlTargetTable = ddlTargetTable;
            return this;
        }

        /**
         * @param dmlStats Detailed statistics for DML statements Present only for DML statements INSERT, UPDATE, DELETE or TRUNCATE.
         * 
         * @return builder
         * 
         */
        public Builder dmlStats(DmlStatisticsResponse dmlStats) {
            $.dmlStats = dmlStats;
            return this;
        }

        /**
         * @param estimatedBytesProcessed The original estimate of bytes processed for the job.
         * 
         * @return builder
         * 
         */
        public Builder estimatedBytesProcessed(String estimatedBytesProcessed) {
            $.estimatedBytesProcessed = estimatedBytesProcessed;
            return this;
        }

        /**
         * @param mlStatistics Statistics of a BigQuery ML training job.
         * 
         * @return builder
         * 
         */
        public Builder mlStatistics(MlStatisticsResponse mlStatistics) {
            $.mlStatistics = mlStatistics;
            return this;
        }

        /**
         * @param modelTraining [Output-only, Beta] Information about create model query job progress.
         * 
         * @return builder
         * 
         */
        public Builder modelTraining(BigQueryModelTrainingResponse modelTraining) {
            $.modelTraining = modelTraining;
            return this;
        }

        /**
         * @param numDmlAffectedRows The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
         * 
         * @return builder
         * 
         */
        public Builder numDmlAffectedRows(String numDmlAffectedRows) {
            $.numDmlAffectedRows = numDmlAffectedRows;
            return this;
        }

        /**
         * @param queryPlan Describes execution plan for the query.
         * 
         * @return builder
         * 
         */
        public Builder queryPlan(List<ExplainQueryStageResponse> queryPlan) {
            $.queryPlan = queryPlan;
            return this;
        }

        /**
         * @param queryPlan Describes execution plan for the query.
         * 
         * @return builder
         * 
         */
        public Builder queryPlan(ExplainQueryStageResponse... queryPlan) {
            return queryPlan(List.of(queryPlan));
        }

        /**
         * @param referencedRoutines Referenced routines (persistent user-defined functions and stored procedures) for the job.
         * 
         * @return builder
         * 
         */
        public Builder referencedRoutines(List<RoutineReferenceResponse> referencedRoutines) {
            $.referencedRoutines = referencedRoutines;
            return this;
        }

        /**
         * @param referencedRoutines Referenced routines (persistent user-defined functions and stored procedures) for the job.
         * 
         * @return builder
         * 
         */
        public Builder referencedRoutines(RoutineReferenceResponse... referencedRoutines) {
            return referencedRoutines(List.of(referencedRoutines));
        }

        /**
         * @param referencedTables Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
         * 
         * @return builder
         * 
         */
        public Builder referencedTables(List<TableReferenceResponse> referencedTables) {
            $.referencedTables = referencedTables;
            return this;
        }

        /**
         * @param referencedTables Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
         * 
         * @return builder
         * 
         */
        public Builder referencedTables(TableReferenceResponse... referencedTables) {
            return referencedTables(List.of(referencedTables));
        }

        /**
         * @param reservationUsage Job resource usage breakdown by reservation.
         * 
         * @return builder
         * 
         */
        public Builder reservationUsage(List<JobStatistics2ReservationUsageItemResponse> reservationUsage) {
            $.reservationUsage = reservationUsage;
            return this;
        }

        /**
         * @param reservationUsage Job resource usage breakdown by reservation.
         * 
         * @return builder
         * 
         */
        public Builder reservationUsage(JobStatistics2ReservationUsageItemResponse... reservationUsage) {
            return reservationUsage(List.of(reservationUsage));
        }

        /**
         * @param schema The schema of the results. Present only for successful dry run of non-legacy SQL queries.
         * 
         * @return builder
         * 
         */
        public Builder schema(TableSchemaResponse schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param statementType The type of query statement, if valid. Possible values (new values might be added in the future): &#34;SELECT&#34;: SELECT query. &#34;INSERT&#34;: INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;UPDATE&#34;: UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;DELETE&#34;: DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;MERGE&#34;: MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. &#34;ALTER_TABLE&#34;: ALTER TABLE query. &#34;ALTER_VIEW&#34;: ALTER VIEW query. &#34;ASSERT&#34;: ASSERT condition AS &#39;description&#39;. &#34;CREATE_FUNCTION&#34;: CREATE FUNCTION query. &#34;CREATE_MODEL&#34;: CREATE [OR REPLACE] MODEL ... AS SELECT ... . &#34;CREATE_PROCEDURE&#34;: CREATE PROCEDURE query. &#34;CREATE_TABLE&#34;: CREATE [OR REPLACE] TABLE without AS SELECT. &#34;CREATE_TABLE_AS_SELECT&#34;: CREATE [OR REPLACE] TABLE ... AS SELECT ... . &#34;CREATE_VIEW&#34;: CREATE [OR REPLACE] VIEW ... AS SELECT ... . &#34;DROP_FUNCTION&#34; : DROP FUNCTION query. &#34;DROP_PROCEDURE&#34;: DROP PROCEDURE query. &#34;DROP_TABLE&#34;: DROP TABLE query. &#34;DROP_VIEW&#34;: DROP VIEW query.
         * 
         * @return builder
         * 
         */
        public Builder statementType(String statementType) {
            $.statementType = statementType;
            return this;
        }

        /**
         * @param timeline [Beta] Describes a timeline of job execution.
         * 
         * @return builder
         * 
         */
        public Builder timeline(List<QueryTimelineSampleResponse> timeline) {
            $.timeline = timeline;
            return this;
        }

        /**
         * @param timeline [Beta] Describes a timeline of job execution.
         * 
         * @return builder
         * 
         */
        public Builder timeline(QueryTimelineSampleResponse... timeline) {
            return timeline(List.of(timeline));
        }

        /**
         * @param totalBytesBilled Total bytes billed for the job.
         * 
         * @return builder
         * 
         */
        public Builder totalBytesBilled(String totalBytesBilled) {
            $.totalBytesBilled = totalBytesBilled;
            return this;
        }

        /**
         * @param totalBytesProcessed Total bytes processed for the job.
         * 
         * @return builder
         * 
         */
        public Builder totalBytesProcessed(String totalBytesProcessed) {
            $.totalBytesProcessed = totalBytesProcessed;
            return this;
        }

        /**
         * @param totalBytesProcessedAccuracy For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
         * 
         * @return builder
         * 
         */
        public Builder totalBytesProcessedAccuracy(String totalBytesProcessedAccuracy) {
            $.totalBytesProcessedAccuracy = totalBytesProcessedAccuracy;
            return this;
        }

        /**
         * @param totalPartitionsProcessed Total number of partitions processed from all partitioned tables referenced in the job.
         * 
         * @return builder
         * 
         */
        public Builder totalPartitionsProcessed(String totalPartitionsProcessed) {
            $.totalPartitionsProcessed = totalPartitionsProcessed;
            return this;
        }

        /**
         * @param totalSlotMs Slot-milliseconds for the job.
         * 
         * @return builder
         * 
         */
        public Builder totalSlotMs(String totalSlotMs) {
            $.totalSlotMs = totalSlotMs;
            return this;
        }

        /**
         * @param undeclaredQueryParameters Standard SQL only: list of undeclared query parameters detected during a dry run validation.
         * 
         * @return builder
         * 
         */
        public Builder undeclaredQueryParameters(List<QueryParameterResponse> undeclaredQueryParameters) {
            $.undeclaredQueryParameters = undeclaredQueryParameters;
            return this;
        }

        /**
         * @param undeclaredQueryParameters Standard SQL only: list of undeclared query parameters detected during a dry run validation.
         * 
         * @return builder
         * 
         */
        public Builder undeclaredQueryParameters(QueryParameterResponse... undeclaredQueryParameters) {
            return undeclaredQueryParameters(List.of(undeclaredQueryParameters));
        }

        public JobStatistics2Response build() {
            $.biEngineStatistics = Objects.requireNonNull($.biEngineStatistics, "expected parameter 'biEngineStatistics' to be non-null");
            $.billingTier = Objects.requireNonNull($.billingTier, "expected parameter 'billingTier' to be non-null");
            $.cacheHit = Objects.requireNonNull($.cacheHit, "expected parameter 'cacheHit' to be non-null");
            $.ddlAffectedRowAccessPolicyCount = Objects.requireNonNull($.ddlAffectedRowAccessPolicyCount, "expected parameter 'ddlAffectedRowAccessPolicyCount' to be non-null");
            $.ddlDestinationTable = Objects.requireNonNull($.ddlDestinationTable, "expected parameter 'ddlDestinationTable' to be non-null");
            $.ddlOperationPerformed = Objects.requireNonNull($.ddlOperationPerformed, "expected parameter 'ddlOperationPerformed' to be non-null");
            $.ddlTargetDataset = Objects.requireNonNull($.ddlTargetDataset, "expected parameter 'ddlTargetDataset' to be non-null");
            $.ddlTargetRoutine = Objects.requireNonNull($.ddlTargetRoutine, "expected parameter 'ddlTargetRoutine' to be non-null");
            $.ddlTargetRowAccessPolicy = Objects.requireNonNull($.ddlTargetRowAccessPolicy, "expected parameter 'ddlTargetRowAccessPolicy' to be non-null");
            $.ddlTargetTable = Objects.requireNonNull($.ddlTargetTable, "expected parameter 'ddlTargetTable' to be non-null");
            $.dmlStats = Objects.requireNonNull($.dmlStats, "expected parameter 'dmlStats' to be non-null");
            $.estimatedBytesProcessed = Objects.requireNonNull($.estimatedBytesProcessed, "expected parameter 'estimatedBytesProcessed' to be non-null");
            $.mlStatistics = Objects.requireNonNull($.mlStatistics, "expected parameter 'mlStatistics' to be non-null");
            $.modelTraining = Objects.requireNonNull($.modelTraining, "expected parameter 'modelTraining' to be non-null");
            $.numDmlAffectedRows = Objects.requireNonNull($.numDmlAffectedRows, "expected parameter 'numDmlAffectedRows' to be non-null");
            $.queryPlan = Objects.requireNonNull($.queryPlan, "expected parameter 'queryPlan' to be non-null");
            $.referencedRoutines = Objects.requireNonNull($.referencedRoutines, "expected parameter 'referencedRoutines' to be non-null");
            $.referencedTables = Objects.requireNonNull($.referencedTables, "expected parameter 'referencedTables' to be non-null");
            $.reservationUsage = Objects.requireNonNull($.reservationUsage, "expected parameter 'reservationUsage' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.statementType = Objects.requireNonNull($.statementType, "expected parameter 'statementType' to be non-null");
            $.timeline = Objects.requireNonNull($.timeline, "expected parameter 'timeline' to be non-null");
            $.totalBytesBilled = Objects.requireNonNull($.totalBytesBilled, "expected parameter 'totalBytesBilled' to be non-null");
            $.totalBytesProcessed = Objects.requireNonNull($.totalBytesProcessed, "expected parameter 'totalBytesProcessed' to be non-null");
            $.totalBytesProcessedAccuracy = Objects.requireNonNull($.totalBytesProcessedAccuracy, "expected parameter 'totalBytesProcessedAccuracy' to be non-null");
            $.totalPartitionsProcessed = Objects.requireNonNull($.totalPartitionsProcessed, "expected parameter 'totalPartitionsProcessed' to be non-null");
            $.totalSlotMs = Objects.requireNonNull($.totalSlotMs, "expected parameter 'totalSlotMs' to be non-null");
            $.undeclaredQueryParameters = Objects.requireNonNull($.undeclaredQueryParameters, "expected parameter 'undeclaredQueryParameters' to be non-null");
            return $;
        }
    }

}
