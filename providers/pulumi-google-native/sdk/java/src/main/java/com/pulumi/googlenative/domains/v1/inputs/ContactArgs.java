// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.domains.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.domains.v1.inputs.PostalAddressArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details required for a contact associated with a `Registration`.
 * 
 */
public final class ContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactArgs Empty = new ContactArgs();

    /**
     * Email address of the contact.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email address of the contact.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Fax number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
     * 
     */
    @Import(name="faxNumber")
    private @Nullable Output<String> faxNumber;

    /**
     * @return Fax number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
     * 
     */
    public Optional<Output<String>> faxNumber() {
        return Optional.ofNullable(this.faxNumber);
    }

    /**
     * Phone number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
     * 
     */
    @Import(name="phoneNumber", required=true)
    private Output<String> phoneNumber;

    /**
     * @return Phone number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
     * 
     */
    public Output<String> phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Postal address of the contact.
     * 
     */
    @Import(name="postalAddress", required=true)
    private Output<PostalAddressArgs> postalAddress;

    /**
     * @return Postal address of the contact.
     * 
     */
    public Output<PostalAddressArgs> postalAddress() {
        return this.postalAddress;
    }

    private ContactArgs() {}

    private ContactArgs(ContactArgs $) {
        this.email = $.email;
        this.faxNumber = $.faxNumber;
        this.phoneNumber = $.phoneNumber;
        this.postalAddress = $.postalAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactArgs $;

        public Builder() {
            $ = new ContactArgs();
        }

        public Builder(ContactArgs defaults) {
            $ = new ContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email Email address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param faxNumber Fax number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder faxNumber(@Nullable Output<String> faxNumber) {
            $.faxNumber = faxNumber;
            return this;
        }

        /**
         * @param faxNumber Fax number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder faxNumber(String faxNumber) {
            return faxNumber(Output.of(faxNumber));
        }

        /**
         * @param phoneNumber Phone number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber Phone number of the contact in international format. For example, `&#34;+1-800-555-0123&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param postalAddress Postal address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder postalAddress(Output<PostalAddressArgs> postalAddress) {
            $.postalAddress = postalAddress;
            return this;
        }

        /**
         * @param postalAddress Postal address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder postalAddress(PostalAddressArgs postalAddress) {
            return postalAddress(Output.of(postalAddress));
        }

        public ContactArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.phoneNumber = Objects.requireNonNull($.phoneNumber, "expected parameter 'phoneNumber' to be non-null");
            $.postalAddress = Objects.requireNonNull($.postalAddress, "expected parameter 'postalAddress' to be non-null");
            return $;
        }
    }

}
