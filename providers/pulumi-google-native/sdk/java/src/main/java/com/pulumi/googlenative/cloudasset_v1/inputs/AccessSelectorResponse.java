// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudasset_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Specifies roles and/or permissions to analyze, to determine both the identities possessing them and the resources they control. If multiple values are specified, results will include roles or permissions matching any of them. The total number of roles and permissions should be equal or less than 10.
 * 
 */
public final class AccessSelectorResponse extends com.pulumi.resources.InvokeArgs {

    public static final AccessSelectorResponse Empty = new AccessSelectorResponse();

    /**
     * Optional. The permissions to appear in result.
     * 
     */
    @Import(name="permissions", required=true)
    private List<String> permissions;

    public List<String> permissions() {
        return this.permissions;
    }

    /**
     * Optional. The roles to appear in result.
     * 
     */
    @Import(name="roles", required=true)
    private List<String> roles;

    public List<String> roles() {
        return this.roles;
    }

    private AccessSelectorResponse() {}

    private AccessSelectorResponse(AccessSelectorResponse $) {
        this.permissions = $.permissions;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessSelectorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessSelectorResponse $;

        public Builder() {
            $ = new AccessSelectorResponse();
        }

        public Builder(AccessSelectorResponse defaults) {
            $ = new AccessSelectorResponse(Objects.requireNonNull(defaults));
        }

        public Builder permissions(List<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder roles(List<String> roles) {
            $.roles = roles;
            return this;
        }

        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        public AccessSelectorResponse build() {
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            return $;
        }
    }

}
