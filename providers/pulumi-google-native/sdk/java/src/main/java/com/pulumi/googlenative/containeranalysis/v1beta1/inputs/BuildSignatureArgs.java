// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.BuildSignatureKeyType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Message encapsulating the signature of the verified build.
 * 
 */
public final class BuildSignatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildSignatureArgs Empty = new BuildSignatureArgs();

    /**
     * An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * The type of the key, either stored in `public_key` or referenced in `key_id`.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<BuildSignatureKeyType> keyType;

    /**
     * @return The type of the key, either stored in `public_key` or referenced in `key_id`.
     * 
     */
    public Optional<Output<BuildSignatureKeyType>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
     * 
     */
    @Import(name="signature", required=true)
    private Output<String> signature;

    /**
     * @return Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
     * 
     */
    public Output<String> signature() {
        return this.signature;
    }

    private BuildSignatureArgs() {}

    private BuildSignatureArgs(BuildSignatureArgs $) {
        this.keyId = $.keyId;
        this.keyType = $.keyType;
        this.publicKey = $.publicKey;
        this.signature = $.signature;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildSignatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildSignatureArgs $;

        public Builder() {
            $ = new BuildSignatureArgs();
        }

        public Builder(BuildSignatureArgs defaults) {
            $ = new BuildSignatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyId An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyType The type of the key, either stored in `public_key` or referenced in `key_id`.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<BuildSignatureKeyType> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType The type of the key, either stored in `public_key` or referenced in `key_id`.
         * 
         * @return builder
         * 
         */
        public Builder keyType(BuildSignatureKeyType keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param publicKey Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param signature Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder signature(Output<String> signature) {
            $.signature = signature;
            return this;
        }

        /**
         * @param signature Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder signature(String signature) {
            return signature(Output.of(signature));
        }

        public BuildSignatureArgs build() {
            $.signature = Objects.requireNonNull($.signature, "expected parameter 'signature' to be non-null");
            return $;
        }
    }

}
