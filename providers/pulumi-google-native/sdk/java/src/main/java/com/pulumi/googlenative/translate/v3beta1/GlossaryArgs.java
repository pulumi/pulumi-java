// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.translate.v3beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.translate.v3beta1.inputs.GlossaryInputConfigArgs;
import com.pulumi.googlenative.translate.v3beta1.inputs.LanguageCodePairArgs;
import com.pulumi.googlenative.translate.v3beta1.inputs.LanguageCodesSetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlossaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlossaryArgs Empty = new GlossaryArgs();

    /**
     * Provides examples to build the glossary from. Total glossary must not exceed 10M Unicode codepoints.
     * 
     */
    @Import(name="inputConfig", required=true)
    private Output<GlossaryInputConfigArgs> inputConfig;

    /**
     * @return Provides examples to build the glossary from. Total glossary must not exceed 10M Unicode codepoints.
     * 
     */
    public Output<GlossaryInputConfigArgs> inputConfig() {
        return this.inputConfig;
    }

    /**
     * Used with equivalent term set glossaries.
     * 
     */
    @Import(name="languageCodesSet")
    private @Nullable Output<LanguageCodesSetArgs> languageCodesSet;

    /**
     * @return Used with equivalent term set glossaries.
     * 
     */
    public Optional<Output<LanguageCodesSetArgs>> languageCodesSet() {
        return Optional.ofNullable(this.languageCodesSet);
    }

    /**
     * Used with unidirectional glossaries.
     * 
     */
    @Import(name="languagePair")
    private @Nullable Output<LanguageCodePairArgs> languagePair;

    /**
     * @return Used with unidirectional glossaries.
     * 
     */
    public Optional<Output<LanguageCodePairArgs>> languagePair() {
        return Optional.ofNullable(this.languagePair);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GlossaryArgs() {}

    private GlossaryArgs(GlossaryArgs $) {
        this.inputConfig = $.inputConfig;
        this.languageCodesSet = $.languageCodesSet;
        this.languagePair = $.languagePair;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlossaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlossaryArgs $;

        public Builder() {
            $ = new GlossaryArgs();
        }

        public Builder(GlossaryArgs defaults) {
            $ = new GlossaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inputConfig Provides examples to build the glossary from. Total glossary must not exceed 10M Unicode codepoints.
         * 
         * @return builder
         * 
         */
        public Builder inputConfig(Output<GlossaryInputConfigArgs> inputConfig) {
            $.inputConfig = inputConfig;
            return this;
        }

        /**
         * @param inputConfig Provides examples to build the glossary from. Total glossary must not exceed 10M Unicode codepoints.
         * 
         * @return builder
         * 
         */
        public Builder inputConfig(GlossaryInputConfigArgs inputConfig) {
            return inputConfig(Output.of(inputConfig));
        }

        /**
         * @param languageCodesSet Used with equivalent term set glossaries.
         * 
         * @return builder
         * 
         */
        public Builder languageCodesSet(@Nullable Output<LanguageCodesSetArgs> languageCodesSet) {
            $.languageCodesSet = languageCodesSet;
            return this;
        }

        /**
         * @param languageCodesSet Used with equivalent term set glossaries.
         * 
         * @return builder
         * 
         */
        public Builder languageCodesSet(LanguageCodesSetArgs languageCodesSet) {
            return languageCodesSet(Output.of(languageCodesSet));
        }

        /**
         * @param languagePair Used with unidirectional glossaries.
         * 
         * @return builder
         * 
         */
        public Builder languagePair(@Nullable Output<LanguageCodePairArgs> languagePair) {
            $.languagePair = languagePair;
            return this;
        }

        /**
         * @param languagePair Used with unidirectional glossaries.
         * 
         * @return builder
         * 
         */
        public Builder languagePair(LanguageCodePairArgs languagePair) {
            return languagePair(Output.of(languagePair));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GlossaryArgs build() {
            $.inputConfig = Objects.requireNonNull($.inputConfig, "expected parameter 'inputConfig' to be non-null");
            return $;
        }
    }

}
