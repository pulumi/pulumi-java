// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.compute_beta.enums.ImageSourceType;
import com.pulumi.googlenative.compute_beta.inputs.CustomerEncryptionKeyArgs;
import com.pulumi.googlenative.compute_beta.inputs.DeprecationStatusArgs;
import com.pulumi.googlenative.compute_beta.inputs.GuestOsFeatureArgs;
import com.pulumi.googlenative.compute_beta.inputs.ImageRawDiskArgs;
import com.pulumi.googlenative.compute_beta.inputs.InitialStateConfigArgs;
import com.pulumi.googlenative.compute_beta.inputs.RolloutPolicyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
     * 
     */
    @Import(name="archiveSizeBytes")
      private final @Nullable Output<String> archiveSizeBytes;

    public Output<String> archiveSizeBytes() {
        return this.archiveSizeBytes == null ? Codegen.empty() : this.archiveSizeBytes;
    }

    /**
     * The deprecation status associated with this image.
     * 
     */
    @Import(name="deprecated")
      private final @Nullable Output<DeprecationStatusArgs> deprecated;

    public Output<DeprecationStatusArgs> deprecated() {
        return this.deprecated == null ? Codegen.empty() : this.deprecated;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Size of the image when restored onto a persistent disk (in GB).
     * 
     */
    @Import(name="diskSizeGb")
      private final @Nullable Output<String> diskSizeGb;

    public Output<String> diskSizeGb() {
        return this.diskSizeGb == null ? Codegen.empty() : this.diskSizeGb;
    }

    /**
     * The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.
     * 
     */
    @Import(name="family")
      private final @Nullable Output<String> family;

    public Output<String> family() {
        return this.family == null ? Codegen.empty() : this.family;
    }

    @Import(name="forceCreate")
      private final @Nullable Output<String> forceCreate;

    public Output<String> forceCreate() {
        return this.forceCreate == null ? Codegen.empty() : this.forceCreate;
    }

    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. To see a list of available options, see the guestOSfeatures[].type parameter.
     * 
     */
    @Import(name="guestOsFeatures")
      private final @Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures;

    public Output<List<GuestOsFeatureArgs>> guestOsFeatures() {
        return this.guestOsFeatures == null ? Codegen.empty() : this.guestOsFeatures;
    }

    /**
     * Encrypts the image using a customer-supplied encryption key. After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the image). Customer-supplied encryption keys do not protect access to metadata of the disk. If you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later.
     * 
     */
    @Import(name="imageEncryptionKey")
      private final @Nullable Output<CustomerEncryptionKeyArgs> imageEncryptionKey;

    public Output<CustomerEncryptionKeyArgs> imageEncryptionKey() {
        return this.imageEncryptionKey == null ? Codegen.empty() : this.imageEncryptionKey;
    }

    /**
     * Labels to apply to this image. These can be later modified by the setLabels method.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Integer license codes indicating which licenses are attached to this image.
     * 
     */
    @Import(name="licenseCodes")
      private final @Nullable Output<List<String>> licenseCodes;

    public Output<List<String>> licenseCodes() {
        return this.licenseCodes == null ? Codegen.empty() : this.licenseCodes;
    }

    /**
     * Any applicable license URI.
     * 
     */
    @Import(name="licenses")
      private final @Nullable Output<List<String>> licenses;

    public Output<List<String>> licenses() {
        return this.licenses == null ? Codegen.empty() : this.licenses;
    }

    /**
     * A flag for marketplace VM disk created from the image, which is designed for marketplace VM disk to prevent the proprietary data on the disk from being accessed unwantedly. The flag will be inherited by the disk created from the image. The disk with locked flag set to true will be prohibited from performing the operations below: - R/W or R/O disk attach - Disk detach, if disk is created via create-on-create - Create images - Create snapshots - Create disk clone (create disk from the current disk) The image with the locked field set to true will be prohibited from performing the operations below: - Create images from the current image - Update the locked field for the current image The instance with at least one disk with locked flag set to true will be prohibited from performing the operations below: - Secondary disk attach - Create instant snapshot - Create machine images - Create instance template - Delete the instance with --keep-disk parameter set to true
     * 
     */
    @Import(name="locked")
      private final @Nullable Output<Boolean> locked;

    public Output<Boolean> locked() {
        return this.locked == null ? Codegen.empty() : this.locked;
    }

    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The parameters of the raw disk image.
     * 
     */
    @Import(name="rawDisk")
      private final @Nullable Output<ImageRawDiskArgs> rawDisk;

    public Output<ImageRawDiskArgs> rawDisk() {
        return this.rawDisk == null ? Codegen.empty() : this.rawDisk;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    /**
     * A rollout policy to apply to this image. When specified, the rollout policy overrides per-zone references to the image via the associated image family. The rollout policy restricts the zones where this image is accessible when using a zonal image family reference. When the rollout policy does not include the user specified zone, or if the zone is rolled out, this image is accessible. The rollout policy for this image is read-only, except for allowlisted users. This field might not be configured. To view the latest non-deprecated image in a specific zone, use the imageFamilyViews.get method.
     * 
     */
    @Import(name="rolloutOverride")
      private final @Nullable Output<RolloutPolicyArgs> rolloutOverride;

    public Output<RolloutPolicyArgs> rolloutOverride() {
        return this.rolloutOverride == null ? Codegen.empty() : this.rolloutOverride;
    }

    /**
     * Set the secure boot keys of shielded instance.
     * 
     */
    @Import(name="shieldedInstanceInitialState")
      private final @Nullable Output<InitialStateConfigArgs> shieldedInstanceInitialState;

    public Output<InitialStateConfigArgs> shieldedInstanceInitialState() {
        return this.shieldedInstanceInitialState == null ? Codegen.empty() : this.shieldedInstanceInitialState;
    }

    /**
     * URL of the source disk used to create this image. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
     * 
     */
    @Import(name="sourceDisk")
      private final @Nullable Output<String> sourceDisk;

    public Output<String> sourceDisk() {
        return this.sourceDisk == null ? Codegen.empty() : this.sourceDisk;
    }

    /**
     * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceDiskEncryptionKey")
      private final @Nullable Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey;

    public Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey() {
        return this.sourceDiskEncryptionKey == null ? Codegen.empty() : this.sourceDiskEncryptionKey;
    }

    /**
     * URL of the source image used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ images/image_name - projects/project_id/global/images/image_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
     * 
     */
    @Import(name="sourceImage")
      private final @Nullable Output<String> sourceImage;

    public Output<String> sourceImage() {
        return this.sourceImage == null ? Codegen.empty() : this.sourceImage;
    }

    /**
     * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceImageEncryptionKey")
      private final @Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey;

    public Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey() {
        return this.sourceImageEncryptionKey == null ? Codegen.empty() : this.sourceImageEncryptionKey;
    }

    /**
     * URL of the source snapshot used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ snapshots/snapshot_name - projects/project_id/global/snapshots/snapshot_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
     * 
     */
    @Import(name="sourceSnapshot")
      private final @Nullable Output<String> sourceSnapshot;

    public Output<String> sourceSnapshot() {
        return this.sourceSnapshot == null ? Codegen.empty() : this.sourceSnapshot;
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey")
      private final @Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey;

    public Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey() {
        return this.sourceSnapshotEncryptionKey == null ? Codegen.empty() : this.sourceSnapshotEncryptionKey;
    }

    /**
     * The type of the image used to create this disk. The default and only value is RAW
     * 
     */
    @Import(name="sourceType")
      private final @Nullable Output<ImageSourceType> sourceType;

    public Output<ImageSourceType> sourceType() {
        return this.sourceType == null ? Codegen.empty() : this.sourceType;
    }

    /**
     * Cloud Storage bucket storage location of the image (regional or multi-regional).
     * 
     */
    @Import(name="storageLocations")
      private final @Nullable Output<List<String>> storageLocations;

    public Output<List<String>> storageLocations() {
        return this.storageLocations == null ? Codegen.empty() : this.storageLocations;
    }

    /**
     * A list of publicly visible user-licenses. Unlike regular licenses, user provided licenses can be modified after the disk is created. This includes a list of URLs to the license resource. For example, to provide a debian license: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch
     * 
     */
    @Import(name="userLicenses")
      private final @Nullable Output<List<String>> userLicenses;

    public Output<List<String>> userLicenses() {
        return this.userLicenses == null ? Codegen.empty() : this.userLicenses;
    }

    public ImageArgs(
        @Nullable Output<String> archiveSizeBytes,
        @Nullable Output<DeprecationStatusArgs> deprecated,
        @Nullable Output<String> description,
        @Nullable Output<String> diskSizeGb,
        @Nullable Output<String> family,
        @Nullable Output<String> forceCreate,
        @Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures,
        @Nullable Output<CustomerEncryptionKeyArgs> imageEncryptionKey,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<List<String>> licenseCodes,
        @Nullable Output<List<String>> licenses,
        @Nullable Output<Boolean> locked,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<ImageRawDiskArgs> rawDisk,
        @Nullable Output<String> requestId,
        @Nullable Output<RolloutPolicyArgs> rolloutOverride,
        @Nullable Output<InitialStateConfigArgs> shieldedInstanceInitialState,
        @Nullable Output<String> sourceDisk,
        @Nullable Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey,
        @Nullable Output<String> sourceImage,
        @Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey,
        @Nullable Output<String> sourceSnapshot,
        @Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey,
        @Nullable Output<ImageSourceType> sourceType,
        @Nullable Output<List<String>> storageLocations,
        @Nullable Output<List<String>> userLicenses) {
        this.archiveSizeBytes = archiveSizeBytes;
        this.deprecated = deprecated;
        this.description = description;
        this.diskSizeGb = diskSizeGb;
        this.family = family;
        this.forceCreate = forceCreate;
        this.guestOsFeatures = guestOsFeatures;
        this.imageEncryptionKey = imageEncryptionKey;
        this.labels = labels;
        this.licenseCodes = licenseCodes;
        this.licenses = licenses;
        this.locked = locked;
        this.name = name;
        this.project = project;
        this.rawDisk = rawDisk;
        this.requestId = requestId;
        this.rolloutOverride = rolloutOverride;
        this.shieldedInstanceInitialState = shieldedInstanceInitialState;
        this.sourceDisk = sourceDisk;
        this.sourceDiskEncryptionKey = sourceDiskEncryptionKey;
        this.sourceImage = sourceImage;
        this.sourceImageEncryptionKey = sourceImageEncryptionKey;
        this.sourceSnapshot = sourceSnapshot;
        this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
        this.sourceType = sourceType;
        this.storageLocations = storageLocations;
        this.userLicenses = userLicenses;
    }

    private ImageArgs() {
        this.archiveSizeBytes = Codegen.empty();
        this.deprecated = Codegen.empty();
        this.description = Codegen.empty();
        this.diskSizeGb = Codegen.empty();
        this.family = Codegen.empty();
        this.forceCreate = Codegen.empty();
        this.guestOsFeatures = Codegen.empty();
        this.imageEncryptionKey = Codegen.empty();
        this.labels = Codegen.empty();
        this.licenseCodes = Codegen.empty();
        this.licenses = Codegen.empty();
        this.locked = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.rawDisk = Codegen.empty();
        this.requestId = Codegen.empty();
        this.rolloutOverride = Codegen.empty();
        this.shieldedInstanceInitialState = Codegen.empty();
        this.sourceDisk = Codegen.empty();
        this.sourceDiskEncryptionKey = Codegen.empty();
        this.sourceImage = Codegen.empty();
        this.sourceImageEncryptionKey = Codegen.empty();
        this.sourceSnapshot = Codegen.empty();
        this.sourceSnapshotEncryptionKey = Codegen.empty();
        this.sourceType = Codegen.empty();
        this.storageLocations = Codegen.empty();
        this.userLicenses = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> archiveSizeBytes;
        private @Nullable Output<DeprecationStatusArgs> deprecated;
        private @Nullable Output<String> description;
        private @Nullable Output<String> diskSizeGb;
        private @Nullable Output<String> family;
        private @Nullable Output<String> forceCreate;
        private @Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures;
        private @Nullable Output<CustomerEncryptionKeyArgs> imageEncryptionKey;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<List<String>> licenseCodes;
        private @Nullable Output<List<String>> licenses;
        private @Nullable Output<Boolean> locked;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<ImageRawDiskArgs> rawDisk;
        private @Nullable Output<String> requestId;
        private @Nullable Output<RolloutPolicyArgs> rolloutOverride;
        private @Nullable Output<InitialStateConfigArgs> shieldedInstanceInitialState;
        private @Nullable Output<String> sourceDisk;
        private @Nullable Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey;
        private @Nullable Output<String> sourceImage;
        private @Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey;
        private @Nullable Output<String> sourceSnapshot;
        private @Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey;
        private @Nullable Output<ImageSourceType> sourceType;
        private @Nullable Output<List<String>> storageLocations;
        private @Nullable Output<List<String>> userLicenses;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveSizeBytes = defaults.archiveSizeBytes;
    	      this.deprecated = defaults.deprecated;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.family = defaults.family;
    	      this.forceCreate = defaults.forceCreate;
    	      this.guestOsFeatures = defaults.guestOsFeatures;
    	      this.imageEncryptionKey = defaults.imageEncryptionKey;
    	      this.labels = defaults.labels;
    	      this.licenseCodes = defaults.licenseCodes;
    	      this.licenses = defaults.licenses;
    	      this.locked = defaults.locked;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rawDisk = defaults.rawDisk;
    	      this.requestId = defaults.requestId;
    	      this.rolloutOverride = defaults.rolloutOverride;
    	      this.shieldedInstanceInitialState = defaults.shieldedInstanceInitialState;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskEncryptionKey = defaults.sourceDiskEncryptionKey;
    	      this.sourceImage = defaults.sourceImage;
    	      this.sourceImageEncryptionKey = defaults.sourceImageEncryptionKey;
    	      this.sourceSnapshot = defaults.sourceSnapshot;
    	      this.sourceSnapshotEncryptionKey = defaults.sourceSnapshotEncryptionKey;
    	      this.sourceType = defaults.sourceType;
    	      this.storageLocations = defaults.storageLocations;
    	      this.userLicenses = defaults.userLicenses;
        }

        public Builder archiveSizeBytes(@Nullable Output<String> archiveSizeBytes) {
            this.archiveSizeBytes = archiveSizeBytes;
            return this;
        }
        public Builder archiveSizeBytes(@Nullable String archiveSizeBytes) {
            this.archiveSizeBytes = Codegen.ofNullable(archiveSizeBytes);
            return this;
        }
        public Builder deprecated(@Nullable Output<DeprecationStatusArgs> deprecated) {
            this.deprecated = deprecated;
            return this;
        }
        public Builder deprecated(@Nullable DeprecationStatusArgs deprecated) {
            this.deprecated = Codegen.ofNullable(deprecated);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder diskSizeGb(@Nullable Output<String> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        public Builder diskSizeGb(@Nullable String diskSizeGb) {
            this.diskSizeGb = Codegen.ofNullable(diskSizeGb);
            return this;
        }
        public Builder family(@Nullable Output<String> family) {
            this.family = family;
            return this;
        }
        public Builder family(@Nullable String family) {
            this.family = Codegen.ofNullable(family);
            return this;
        }
        public Builder forceCreate(@Nullable Output<String> forceCreate) {
            this.forceCreate = forceCreate;
            return this;
        }
        public Builder forceCreate(@Nullable String forceCreate) {
            this.forceCreate = Codegen.ofNullable(forceCreate);
            return this;
        }
        public Builder guestOsFeatures(@Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures) {
            this.guestOsFeatures = guestOsFeatures;
            return this;
        }
        public Builder guestOsFeatures(@Nullable List<GuestOsFeatureArgs> guestOsFeatures) {
            this.guestOsFeatures = Codegen.ofNullable(guestOsFeatures);
            return this;
        }
        public Builder guestOsFeatures(GuestOsFeatureArgs... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }
        public Builder imageEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> imageEncryptionKey) {
            this.imageEncryptionKey = imageEncryptionKey;
            return this;
        }
        public Builder imageEncryptionKey(@Nullable CustomerEncryptionKeyArgs imageEncryptionKey) {
            this.imageEncryptionKey = Codegen.ofNullable(imageEncryptionKey);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder licenseCodes(@Nullable Output<List<String>> licenseCodes) {
            this.licenseCodes = licenseCodes;
            return this;
        }
        public Builder licenseCodes(@Nullable List<String> licenseCodes) {
            this.licenseCodes = Codegen.ofNullable(licenseCodes);
            return this;
        }
        public Builder licenseCodes(String... licenseCodes) {
            return licenseCodes(List.of(licenseCodes));
        }
        public Builder licenses(@Nullable Output<List<String>> licenses) {
            this.licenses = licenses;
            return this;
        }
        public Builder licenses(@Nullable List<String> licenses) {
            this.licenses = Codegen.ofNullable(licenses);
            return this;
        }
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }
        public Builder locked(@Nullable Output<Boolean> locked) {
            this.locked = locked;
            return this;
        }
        public Builder locked(@Nullable Boolean locked) {
            this.locked = Codegen.ofNullable(locked);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder rawDisk(@Nullable Output<ImageRawDiskArgs> rawDisk) {
            this.rawDisk = rawDisk;
            return this;
        }
        public Builder rawDisk(@Nullable ImageRawDiskArgs rawDisk) {
            this.rawDisk = Codegen.ofNullable(rawDisk);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }
        public Builder rolloutOverride(@Nullable Output<RolloutPolicyArgs> rolloutOverride) {
            this.rolloutOverride = rolloutOverride;
            return this;
        }
        public Builder rolloutOverride(@Nullable RolloutPolicyArgs rolloutOverride) {
            this.rolloutOverride = Codegen.ofNullable(rolloutOverride);
            return this;
        }
        public Builder shieldedInstanceInitialState(@Nullable Output<InitialStateConfigArgs> shieldedInstanceInitialState) {
            this.shieldedInstanceInitialState = shieldedInstanceInitialState;
            return this;
        }
        public Builder shieldedInstanceInitialState(@Nullable InitialStateConfigArgs shieldedInstanceInitialState) {
            this.shieldedInstanceInitialState = Codegen.ofNullable(shieldedInstanceInitialState);
            return this;
        }
        public Builder sourceDisk(@Nullable Output<String> sourceDisk) {
            this.sourceDisk = sourceDisk;
            return this;
        }
        public Builder sourceDisk(@Nullable String sourceDisk) {
            this.sourceDisk = Codegen.ofNullable(sourceDisk);
            return this;
        }
        public Builder sourceDiskEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey) {
            this.sourceDiskEncryptionKey = sourceDiskEncryptionKey;
            return this;
        }
        public Builder sourceDiskEncryptionKey(@Nullable CustomerEncryptionKeyArgs sourceDiskEncryptionKey) {
            this.sourceDiskEncryptionKey = Codegen.ofNullable(sourceDiskEncryptionKey);
            return this;
        }
        public Builder sourceImage(@Nullable Output<String> sourceImage) {
            this.sourceImage = sourceImage;
            return this;
        }
        public Builder sourceImage(@Nullable String sourceImage) {
            this.sourceImage = Codegen.ofNullable(sourceImage);
            return this;
        }
        public Builder sourceImageEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }
        public Builder sourceImageEncryptionKey(@Nullable CustomerEncryptionKeyArgs sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = Codegen.ofNullable(sourceImageEncryptionKey);
            return this;
        }
        public Builder sourceSnapshot(@Nullable Output<String> sourceSnapshot) {
            this.sourceSnapshot = sourceSnapshot;
            return this;
        }
        public Builder sourceSnapshot(@Nullable String sourceSnapshot) {
            this.sourceSnapshot = Codegen.ofNullable(sourceSnapshot);
            return this;
        }
        public Builder sourceSnapshotEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }
        public Builder sourceSnapshotEncryptionKey(@Nullable CustomerEncryptionKeyArgs sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = Codegen.ofNullable(sourceSnapshotEncryptionKey);
            return this;
        }
        public Builder sourceType(@Nullable Output<ImageSourceType> sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        public Builder sourceType(@Nullable ImageSourceType sourceType) {
            this.sourceType = Codegen.ofNullable(sourceType);
            return this;
        }
        public Builder storageLocations(@Nullable Output<List<String>> storageLocations) {
            this.storageLocations = storageLocations;
            return this;
        }
        public Builder storageLocations(@Nullable List<String> storageLocations) {
            this.storageLocations = Codegen.ofNullable(storageLocations);
            return this;
        }
        public Builder storageLocations(String... storageLocations) {
            return storageLocations(List.of(storageLocations));
        }
        public Builder userLicenses(@Nullable Output<List<String>> userLicenses) {
            this.userLicenses = userLicenses;
            return this;
        }
        public Builder userLicenses(@Nullable List<String> userLicenses) {
            this.userLicenses = Codegen.ofNullable(userLicenses);
            return this;
        }
        public Builder userLicenses(String... userLicenses) {
            return userLicenses(List.of(userLicenses));
        }        public ImageArgs build() {
            return new ImageArgs(archiveSizeBytes, deprecated, description, diskSizeGb, family, forceCreate, guestOsFeatures, imageEncryptionKey, labels, licenseCodes, licenses, locked, name, project, rawDisk, requestId, rolloutOverride, shieldedInstanceInitialState, sourceDisk, sourceDiskEncryptionKey, sourceImage, sourceImageEncryptionKey, sourceSnapshot, sourceSnapshotEncryptionKey, sourceType, storageLocations, userLicenses);
        }
    }
}
