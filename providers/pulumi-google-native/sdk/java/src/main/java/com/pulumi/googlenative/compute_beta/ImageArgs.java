// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.enums.ImageSourceType;
import com.pulumi.googlenative.compute_beta.inputs.CustomerEncryptionKeyArgs;
import com.pulumi.googlenative.compute_beta.inputs.DeprecationStatusArgs;
import com.pulumi.googlenative.compute_beta.inputs.GuestOsFeatureArgs;
import com.pulumi.googlenative.compute_beta.inputs.ImageRawDiskArgs;
import com.pulumi.googlenative.compute_beta.inputs.InitialStateConfigArgs;
import com.pulumi.googlenative.compute_beta.inputs.RolloutPolicyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
     * 
     */
    @Import(name="archiveSizeBytes")
    private @Nullable Output<String> archiveSizeBytes;

    public Optional<Output<String>> archiveSizeBytes() {
        return Optional.ofNullable(this.archiveSizeBytes);
    }

    /**
     * The deprecation status associated with this image.
     * 
     */
    @Import(name="deprecated")
    private @Nullable Output<DeprecationStatusArgs> deprecated;

    public Optional<Output<DeprecationStatusArgs>> deprecated() {
        return Optional.ofNullable(this.deprecated);
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Size of the image when restored onto a persistent disk (in GB).
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<String> diskSizeGb;

    public Optional<Output<String>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.
     * 
     */
    @Import(name="family")
    private @Nullable Output<String> family;

    public Optional<Output<String>> family() {
        return Optional.ofNullable(this.family);
    }

    @Import(name="forceCreate")
    private @Nullable Output<String> forceCreate;

    public Optional<Output<String>> forceCreate() {
        return Optional.ofNullable(this.forceCreate);
    }

    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. To see a list of available options, see the guestOSfeatures[].type parameter.
     * 
     */
    @Import(name="guestOsFeatures")
    private @Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures;

    public Optional<Output<List<GuestOsFeatureArgs>>> guestOsFeatures() {
        return Optional.ofNullable(this.guestOsFeatures);
    }

    /**
     * Encrypts the image using a customer-supplied encryption key. After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the image). Customer-supplied encryption keys do not protect access to metadata of the disk. If you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later.
     * 
     */
    @Import(name="imageEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> imageEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> imageEncryptionKey() {
        return Optional.ofNullable(this.imageEncryptionKey);
    }

    /**
     * Labels to apply to this image. These can be later modified by the setLabels method.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Integer license codes indicating which licenses are attached to this image.
     * 
     */
    @Import(name="licenseCodes")
    private @Nullable Output<List<String>> licenseCodes;

    public Optional<Output<List<String>>> licenseCodes() {
        return Optional.ofNullable(this.licenseCodes);
    }

    /**
     * Any applicable license URI.
     * 
     */
    @Import(name="licenses")
    private @Nullable Output<List<String>> licenses;

    public Optional<Output<List<String>>> licenses() {
        return Optional.ofNullable(this.licenses);
    }

    /**
     * A flag for marketplace VM disk created from the image, which is designed for marketplace VM disk to prevent the proprietary data on the disk from being accessed unwantedly. The flag will be inherited by the disk created from the image. The disk with locked flag set to true will be prohibited from performing the operations below: - R/W or R/O disk attach - Disk detach, if disk is created via create-on-create - Create images - Create snapshots - Create disk clone (create disk from the current disk) The image with the locked field set to true will be prohibited from performing the operations below: - Create images from the current image - Update the locked field for the current image The instance with at least one disk with locked flag set to true will be prohibited from performing the operations below: - Secondary disk attach - Create instant snapshot - Create machine images - Create instance template - Delete the instance with --keep-disk parameter set to true
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The parameters of the raw disk image.
     * 
     */
    @Import(name="rawDisk")
    private @Nullable Output<ImageRawDiskArgs> rawDisk;

    public Optional<Output<ImageRawDiskArgs>> rawDisk() {
        return Optional.ofNullable(this.rawDisk);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * A rollout policy to apply to this image. When specified, the rollout policy overrides per-zone references to the image via the associated image family. The rollout policy restricts the zones where this image is accessible when using a zonal image family reference. When the rollout policy does not include the user specified zone, or if the zone is rolled out, this image is accessible. The rollout policy for this image is read-only, except for allowlisted users. This field might not be configured. To view the latest non-deprecated image in a specific zone, use the imageFamilyViews.get method.
     * 
     */
    @Import(name="rolloutOverride")
    private @Nullable Output<RolloutPolicyArgs> rolloutOverride;

    public Optional<Output<RolloutPolicyArgs>> rolloutOverride() {
        return Optional.ofNullable(this.rolloutOverride);
    }

    /**
     * Set the secure boot keys of shielded instance.
     * 
     */
    @Import(name="shieldedInstanceInitialState")
    private @Nullable Output<InitialStateConfigArgs> shieldedInstanceInitialState;

    public Optional<Output<InitialStateConfigArgs>> shieldedInstanceInitialState() {
        return Optional.ofNullable(this.shieldedInstanceInitialState);
    }

    /**
     * URL of the source disk used to create this image. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
     * 
     */
    @Import(name="sourceDisk")
    private @Nullable Output<String> sourceDisk;

    public Optional<Output<String>> sourceDisk() {
        return Optional.ofNullable(this.sourceDisk);
    }

    /**
     * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceDiskEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> sourceDiskEncryptionKey() {
        return Optional.ofNullable(this.sourceDiskEncryptionKey);
    }

    /**
     * URL of the source image used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ images/image_name - projects/project_id/global/images/image_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
     * 
     */
    @Import(name="sourceImage")
    private @Nullable Output<String> sourceImage;

    public Optional<Output<String>> sourceImage() {
        return Optional.ofNullable(this.sourceImage);
    }

    /**
     * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceImageEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> sourceImageEncryptionKey() {
        return Optional.ofNullable(this.sourceImageEncryptionKey);
    }

    /**
     * URL of the source snapshot used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ snapshots/snapshot_name - projects/project_id/global/snapshots/snapshot_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
     * 
     */
    @Import(name="sourceSnapshot")
    private @Nullable Output<String> sourceSnapshot;

    public Optional<Output<String>> sourceSnapshot() {
        return Optional.ofNullable(this.sourceSnapshot);
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey")
    private @Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey;

    public Optional<Output<CustomerEncryptionKeyArgs>> sourceSnapshotEncryptionKey() {
        return Optional.ofNullable(this.sourceSnapshotEncryptionKey);
    }

    /**
     * The type of the image used to create this disk. The default and only value is RAW
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<ImageSourceType> sourceType;

    public Optional<Output<ImageSourceType>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * Cloud Storage bucket storage location of the image (regional or multi-regional).
     * 
     */
    @Import(name="storageLocations")
    private @Nullable Output<List<String>> storageLocations;

    public Optional<Output<List<String>>> storageLocations() {
        return Optional.ofNullable(this.storageLocations);
    }

    /**
     * A list of publicly visible user-licenses. Unlike regular licenses, user provided licenses can be modified after the disk is created. This includes a list of URLs to the license resource. For example, to provide a debian license: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch
     * 
     */
    @Import(name="userLicenses")
    private @Nullable Output<List<String>> userLicenses;

    public Optional<Output<List<String>>> userLicenses() {
        return Optional.ofNullable(this.userLicenses);
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.archiveSizeBytes = $.archiveSizeBytes;
        this.deprecated = $.deprecated;
        this.description = $.description;
        this.diskSizeGb = $.diskSizeGb;
        this.family = $.family;
        this.forceCreate = $.forceCreate;
        this.guestOsFeatures = $.guestOsFeatures;
        this.imageEncryptionKey = $.imageEncryptionKey;
        this.labels = $.labels;
        this.licenseCodes = $.licenseCodes;
        this.licenses = $.licenses;
        this.locked = $.locked;
        this.name = $.name;
        this.project = $.project;
        this.rawDisk = $.rawDisk;
        this.requestId = $.requestId;
        this.rolloutOverride = $.rolloutOverride;
        this.shieldedInstanceInitialState = $.shieldedInstanceInitialState;
        this.sourceDisk = $.sourceDisk;
        this.sourceDiskEncryptionKey = $.sourceDiskEncryptionKey;
        this.sourceImage = $.sourceImage;
        this.sourceImageEncryptionKey = $.sourceImageEncryptionKey;
        this.sourceSnapshot = $.sourceSnapshot;
        this.sourceSnapshotEncryptionKey = $.sourceSnapshotEncryptionKey;
        this.sourceType = $.sourceType;
        this.storageLocations = $.storageLocations;
        this.userLicenses = $.userLicenses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        public Builder archiveSizeBytes(@Nullable Output<String> archiveSizeBytes) {
            $.archiveSizeBytes = archiveSizeBytes;
            return this;
        }

        public Builder archiveSizeBytes(String archiveSizeBytes) {
            return archiveSizeBytes(Output.of(archiveSizeBytes));
        }

        public Builder deprecated(@Nullable Output<DeprecationStatusArgs> deprecated) {
            $.deprecated = deprecated;
            return this;
        }

        public Builder deprecated(DeprecationStatusArgs deprecated) {
            return deprecated(Output.of(deprecated));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder diskSizeGb(@Nullable Output<String> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskSizeGb(String diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        public Builder family(@Nullable Output<String> family) {
            $.family = family;
            return this;
        }

        public Builder family(String family) {
            return family(Output.of(family));
        }

        public Builder forceCreate(@Nullable Output<String> forceCreate) {
            $.forceCreate = forceCreate;
            return this;
        }

        public Builder forceCreate(String forceCreate) {
            return forceCreate(Output.of(forceCreate));
        }

        public Builder guestOsFeatures(@Nullable Output<List<GuestOsFeatureArgs>> guestOsFeatures) {
            $.guestOsFeatures = guestOsFeatures;
            return this;
        }

        public Builder guestOsFeatures(List<GuestOsFeatureArgs> guestOsFeatures) {
            return guestOsFeatures(Output.of(guestOsFeatures));
        }

        public Builder guestOsFeatures(GuestOsFeatureArgs... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }

        public Builder imageEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> imageEncryptionKey) {
            $.imageEncryptionKey = imageEncryptionKey;
            return this;
        }

        public Builder imageEncryptionKey(CustomerEncryptionKeyArgs imageEncryptionKey) {
            return imageEncryptionKey(Output.of(imageEncryptionKey));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder licenseCodes(@Nullable Output<List<String>> licenseCodes) {
            $.licenseCodes = licenseCodes;
            return this;
        }

        public Builder licenseCodes(List<String> licenseCodes) {
            return licenseCodes(Output.of(licenseCodes));
        }

        public Builder licenseCodes(String... licenseCodes) {
            return licenseCodes(List.of(licenseCodes));
        }

        public Builder licenses(@Nullable Output<List<String>> licenses) {
            $.licenses = licenses;
            return this;
        }

        public Builder licenses(List<String> licenses) {
            return licenses(Output.of(licenses));
        }

        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }

        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder rawDisk(@Nullable Output<ImageRawDiskArgs> rawDisk) {
            $.rawDisk = rawDisk;
            return this;
        }

        public Builder rawDisk(ImageRawDiskArgs rawDisk) {
            return rawDisk(Output.of(rawDisk));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder rolloutOverride(@Nullable Output<RolloutPolicyArgs> rolloutOverride) {
            $.rolloutOverride = rolloutOverride;
            return this;
        }

        public Builder rolloutOverride(RolloutPolicyArgs rolloutOverride) {
            return rolloutOverride(Output.of(rolloutOverride));
        }

        public Builder shieldedInstanceInitialState(@Nullable Output<InitialStateConfigArgs> shieldedInstanceInitialState) {
            $.shieldedInstanceInitialState = shieldedInstanceInitialState;
            return this;
        }

        public Builder shieldedInstanceInitialState(InitialStateConfigArgs shieldedInstanceInitialState) {
            return shieldedInstanceInitialState(Output.of(shieldedInstanceInitialState));
        }

        public Builder sourceDisk(@Nullable Output<String> sourceDisk) {
            $.sourceDisk = sourceDisk;
            return this;
        }

        public Builder sourceDisk(String sourceDisk) {
            return sourceDisk(Output.of(sourceDisk));
        }

        public Builder sourceDiskEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceDiskEncryptionKey) {
            $.sourceDiskEncryptionKey = sourceDiskEncryptionKey;
            return this;
        }

        public Builder sourceDiskEncryptionKey(CustomerEncryptionKeyArgs sourceDiskEncryptionKey) {
            return sourceDiskEncryptionKey(Output.of(sourceDiskEncryptionKey));
        }

        public Builder sourceImage(@Nullable Output<String> sourceImage) {
            $.sourceImage = sourceImage;
            return this;
        }

        public Builder sourceImage(String sourceImage) {
            return sourceImage(Output.of(sourceImage));
        }

        public Builder sourceImageEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceImageEncryptionKey) {
            $.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }

        public Builder sourceImageEncryptionKey(CustomerEncryptionKeyArgs sourceImageEncryptionKey) {
            return sourceImageEncryptionKey(Output.of(sourceImageEncryptionKey));
        }

        public Builder sourceSnapshot(@Nullable Output<String> sourceSnapshot) {
            $.sourceSnapshot = sourceSnapshot;
            return this;
        }

        public Builder sourceSnapshot(String sourceSnapshot) {
            return sourceSnapshot(Output.of(sourceSnapshot));
        }

        public Builder sourceSnapshotEncryptionKey(@Nullable Output<CustomerEncryptionKeyArgs> sourceSnapshotEncryptionKey) {
            $.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        public Builder sourceSnapshotEncryptionKey(CustomerEncryptionKeyArgs sourceSnapshotEncryptionKey) {
            return sourceSnapshotEncryptionKey(Output.of(sourceSnapshotEncryptionKey));
        }

        public Builder sourceType(@Nullable Output<ImageSourceType> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(ImageSourceType sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public Builder storageLocations(@Nullable Output<List<String>> storageLocations) {
            $.storageLocations = storageLocations;
            return this;
        }

        public Builder storageLocations(List<String> storageLocations) {
            return storageLocations(Output.of(storageLocations));
        }

        public Builder storageLocations(String... storageLocations) {
            return storageLocations(List.of(storageLocations));
        }

        public Builder userLicenses(@Nullable Output<List<String>> userLicenses) {
            $.userLicenses = userLicenses;
            return this;
        }

        public Builder userLicenses(List<String> userLicenses) {
            return userLicenses(Output.of(userLicenses));
        }

        public Builder userLicenses(String... userLicenses) {
            return userLicenses(List.of(userLicenses));
        }

        public ImageArgs build() {
            return $;
        }
    }

}
