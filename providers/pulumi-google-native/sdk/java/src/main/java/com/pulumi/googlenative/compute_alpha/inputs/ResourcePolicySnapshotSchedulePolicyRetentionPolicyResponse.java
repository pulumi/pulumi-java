// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Policy for retention of scheduled snapshots.
 * 
 */
public final class ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse Empty = new ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse();

    /**
     * Maximum age of the snapshot that is allowed to be kept.
     * 
     */
    @Import(name="maxRetentionDays", required=true)
    private Integer maxRetentionDays;

    /**
     * @return Maximum age of the snapshot that is allowed to be kept.
     * 
     */
    public Integer maxRetentionDays() {
        return this.maxRetentionDays;
    }

    @Import(name="onPolicySwitch", required=true)
    private String onPolicySwitch;

    public String onPolicySwitch() {
        return this.onPolicySwitch;
    }

    /**
     * Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
     * 
     */
    @Import(name="onSourceDiskDelete", required=true)
    private String onSourceDiskDelete;

    /**
     * @return Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
     * 
     */
    public String onSourceDiskDelete() {
        return this.onSourceDiskDelete;
    }

    private ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse() {}

    private ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse $) {
        this.maxRetentionDays = $.maxRetentionDays;
        this.onPolicySwitch = $.onPolicySwitch;
        this.onSourceDiskDelete = $.onSourceDiskDelete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse $;

        public Builder() {
            $ = new ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse();
        }

        public Builder(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse defaults) {
            $ = new ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxRetentionDays Maximum age of the snapshot that is allowed to be kept.
         * 
         * @return builder
         * 
         */
        public Builder maxRetentionDays(Integer maxRetentionDays) {
            $.maxRetentionDays = maxRetentionDays;
            return this;
        }

        public Builder onPolicySwitch(String onPolicySwitch) {
            $.onPolicySwitch = onPolicySwitch;
            return this;
        }

        /**
         * @param onSourceDiskDelete Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
         * 
         * @return builder
         * 
         */
        public Builder onSourceDiskDelete(String onSourceDiskDelete) {
            $.onSourceDiskDelete = onSourceDiskDelete;
            return this;
        }

        public ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse build() {
            $.maxRetentionDays = Objects.requireNonNull($.maxRetentionDays, "expected parameter 'maxRetentionDays' to be non-null");
            $.onPolicySwitch = Objects.requireNonNull($.onPolicySwitch, "expected parameter 'onPolicySwitch' to be non-null");
            $.onSourceDiskDelete = Objects.requireNonNull($.onSourceDiskDelete, "expected parameter 'onSourceDiskDelete' to be non-null");
            return $;
        }
    }

}
