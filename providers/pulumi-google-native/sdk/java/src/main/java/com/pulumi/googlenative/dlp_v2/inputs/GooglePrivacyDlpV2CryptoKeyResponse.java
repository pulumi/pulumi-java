// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2TransientCryptoKeyResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2UnwrappedCryptoKeyResponse;
import java.util.Objects;


/**
 * This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
 * 
 */
public final class GooglePrivacyDlpV2CryptoKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2CryptoKeyResponse Empty = new GooglePrivacyDlpV2CryptoKeyResponse();

    /**
     * Key wrapped using Cloud KMS
     * 
     */
    @Import(name="kmsWrapped", required=true)
    private GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse kmsWrapped;

    /**
     * @return Key wrapped using Cloud KMS
     * 
     */
    public GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse kmsWrapped() {
        return this.kmsWrapped;
    }

    /**
     * Transient crypto key
     * 
     */
    @Import(name="transient", required=true)
    private GooglePrivacyDlpV2TransientCryptoKeyResponse transient_;

    /**
     * @return Transient crypto key
     * 
     */
    public GooglePrivacyDlpV2TransientCryptoKeyResponse transient_() {
        return this.transient_;
    }

    /**
     * Unwrapped crypto key
     * 
     */
    @Import(name="unwrapped", required=true)
    private GooglePrivacyDlpV2UnwrappedCryptoKeyResponse unwrapped;

    /**
     * @return Unwrapped crypto key
     * 
     */
    public GooglePrivacyDlpV2UnwrappedCryptoKeyResponse unwrapped() {
        return this.unwrapped;
    }

    private GooglePrivacyDlpV2CryptoKeyResponse() {}

    private GooglePrivacyDlpV2CryptoKeyResponse(GooglePrivacyDlpV2CryptoKeyResponse $) {
        this.kmsWrapped = $.kmsWrapped;
        this.transient_ = $.transient_;
        this.unwrapped = $.unwrapped;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CryptoKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CryptoKeyResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CryptoKeyResponse();
        }

        public Builder(GooglePrivacyDlpV2CryptoKeyResponse defaults) {
            $ = new GooglePrivacyDlpV2CryptoKeyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param kmsWrapped Key wrapped using Cloud KMS
         * 
         * @return builder
         * 
         */
        public Builder kmsWrapped(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse kmsWrapped) {
            $.kmsWrapped = kmsWrapped;
            return this;
        }

        /**
         * @param transient_ Transient crypto key
         * 
         * @return builder
         * 
         */
        public Builder transient_(GooglePrivacyDlpV2TransientCryptoKeyResponse transient_) {
            $.transient_ = transient_;
            return this;
        }

        /**
         * @param unwrapped Unwrapped crypto key
         * 
         * @return builder
         * 
         */
        public Builder unwrapped(GooglePrivacyDlpV2UnwrappedCryptoKeyResponse unwrapped) {
            $.unwrapped = unwrapped;
            return this;
        }

        public GooglePrivacyDlpV2CryptoKeyResponse build() {
            $.kmsWrapped = Objects.requireNonNull($.kmsWrapped, "expected parameter 'kmsWrapped' to be non-null");
            $.transient_ = Objects.requireNonNull($.transient_, "expected parameter 'transient' to be non-null");
            $.unwrapped = Objects.requireNonNull($.unwrapped, "expected parameter 'unwrapped' to be non-null");
            return $;
        }
    }

}
