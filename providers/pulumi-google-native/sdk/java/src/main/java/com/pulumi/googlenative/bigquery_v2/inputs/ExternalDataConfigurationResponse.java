// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.AvroOptionsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.BigtableOptionsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.CsvOptionsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.GoogleSheetsOptionsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.HivePartitioningOptionsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.ParquetOptionsResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.TableSchemaResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ExternalDataConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExternalDataConfigurationResponse Empty = new ExternalDataConfigurationResponse();

    /**
     * Try to detect schema and format options automatically. Any option specified explicitly will be honored.
     * 
     */
    @Import(name="autodetect", required=true)
      private final Boolean autodetect;

    public Boolean autodetect() {
        return this.autodetect;
    }

    /**
     * Additional properties to set if sourceFormat is set to Avro.
     * 
     */
    @Import(name="avroOptions", required=true)
      private final AvroOptionsResponse avroOptions;

    public AvroOptionsResponse avroOptions() {
        return this.avroOptions;
    }

    /**
     * [Optional] Additional options if sourceFormat is set to BIGTABLE.
     * 
     */
    @Import(name="bigtableOptions", required=true)
      private final BigtableOptionsResponse bigtableOptions;

    public BigtableOptionsResponse bigtableOptions() {
        return this.bigtableOptions;
    }

    /**
     * [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
     * 
     */
    @Import(name="compression", required=true)
      private final String compression;

    public String compression() {
        return this.compression;
    }

    /**
     * [Optional, Trusted Tester] Connection for external data source.
     * 
     */
    @Import(name="connectionId", required=true)
      private final String connectionId;

    public String connectionId() {
        return this.connectionId;
    }

    /**
     * Additional properties to set if sourceFormat is set to CSV.
     * 
     */
    @Import(name="csvOptions", required=true)
      private final CsvOptionsResponse csvOptions;

    public CsvOptionsResponse csvOptions() {
        return this.csvOptions;
    }

    /**
     * [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [&#34;NUMERIC&#34;, &#34;BIGNUMERIC&#34;]. If (precision,scale) is: (38,9) -&gt; NUMERIC; (39,9) -&gt; BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -&gt; BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -&gt; BIGNUMERIC; (77,38) -&gt; BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [&#34;BIGNUMERIC&#34;, &#34;NUMERIC&#34;] is the same as [&#34;NUMERIC&#34;, &#34;BIGNUMERIC&#34;] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [&#34;NUMERIC&#34;, &#34;STRING&#34;] for ORC and [&#34;NUMERIC&#34;] for the other file formats.
     * 
     */
    @Import(name="decimalTargetTypes", required=true)
      private final List<String> decimalTargetTypes;

    public List<String> decimalTargetTypes() {
        return this.decimalTargetTypes;
    }

    /**
     * [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
     * 
     */
    @Import(name="googleSheetsOptions", required=true)
      private final GoogleSheetsOptionsResponse googleSheetsOptions;

    public GoogleSheetsOptionsResponse googleSheetsOptions() {
        return this.googleSheetsOptions;
    }

    /**
     * [Optional] Options to configure hive partitioning support.
     * 
     */
    @Import(name="hivePartitioningOptions", required=true)
      private final HivePartitioningOptionsResponse hivePartitioningOptions;

    public HivePartitioningOptionsResponse hivePartitioningOptions() {
        return this.hivePartitioningOptions;
    }

    /**
     * [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don&#39;t match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
     * 
     */
    @Import(name="ignoreUnknownValues", required=true)
      private final Boolean ignoreUnknownValues;

    public Boolean ignoreUnknownValues() {
        return this.ignoreUnknownValues;
    }

    /**
     * [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
     * 
     */
    @Import(name="maxBadRecords", required=true)
      private final Integer maxBadRecords;

    public Integer maxBadRecords() {
        return this.maxBadRecords;
    }

    /**
     * Additional properties to set if sourceFormat is set to Parquet.
     * 
     */
    @Import(name="parquetOptions", required=true)
      private final ParquetOptionsResponse parquetOptions;

    public ParquetOptionsResponse parquetOptions() {
        return this.parquetOptions;
    }

    /**
     * [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
     * 
     */
    @Import(name="schema", required=true)
      private final TableSchemaResponse schema;

    public TableSchemaResponse schema() {
        return this.schema;
    }

    /**
     * [Required] The data format. For CSV files, specify &#34;CSV&#34;. For Google sheets, specify &#34;GOOGLE_SHEETS&#34;. For newline-delimited JSON, specify &#34;NEWLINE_DELIMITED_JSON&#34;. For Avro files, specify &#34;AVRO&#34;. For Google Cloud Datastore backups, specify &#34;DATASTORE_BACKUP&#34;. [Beta] For Google Cloud Bigtable, specify &#34;BIGTABLE&#34;.
     * 
     */
    @Import(name="sourceFormat", required=true)
      private final String sourceFormat;

    public String sourceFormat() {
        return this.sourceFormat;
    }

    /**
     * [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one &#39;*&#39; wildcard character and it must come after the &#39;bucket&#39; name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the &#39;*&#39; wildcard character is not allowed.
     * 
     */
    @Import(name="sourceUris", required=true)
      private final List<String> sourceUris;

    public List<String> sourceUris() {
        return this.sourceUris;
    }

    public ExternalDataConfigurationResponse(
        Boolean autodetect,
        AvroOptionsResponse avroOptions,
        BigtableOptionsResponse bigtableOptions,
        String compression,
        String connectionId,
        CsvOptionsResponse csvOptions,
        List<String> decimalTargetTypes,
        GoogleSheetsOptionsResponse googleSheetsOptions,
        HivePartitioningOptionsResponse hivePartitioningOptions,
        Boolean ignoreUnknownValues,
        Integer maxBadRecords,
        ParquetOptionsResponse parquetOptions,
        TableSchemaResponse schema,
        String sourceFormat,
        List<String> sourceUris) {
        this.autodetect = Objects.requireNonNull(autodetect, "expected parameter 'autodetect' to be non-null");
        this.avroOptions = Objects.requireNonNull(avroOptions, "expected parameter 'avroOptions' to be non-null");
        this.bigtableOptions = Objects.requireNonNull(bigtableOptions, "expected parameter 'bigtableOptions' to be non-null");
        this.compression = Objects.requireNonNull(compression, "expected parameter 'compression' to be non-null");
        this.connectionId = Objects.requireNonNull(connectionId, "expected parameter 'connectionId' to be non-null");
        this.csvOptions = Objects.requireNonNull(csvOptions, "expected parameter 'csvOptions' to be non-null");
        this.decimalTargetTypes = Objects.requireNonNull(decimalTargetTypes, "expected parameter 'decimalTargetTypes' to be non-null");
        this.googleSheetsOptions = Objects.requireNonNull(googleSheetsOptions, "expected parameter 'googleSheetsOptions' to be non-null");
        this.hivePartitioningOptions = Objects.requireNonNull(hivePartitioningOptions, "expected parameter 'hivePartitioningOptions' to be non-null");
        this.ignoreUnknownValues = Objects.requireNonNull(ignoreUnknownValues, "expected parameter 'ignoreUnknownValues' to be non-null");
        this.maxBadRecords = Objects.requireNonNull(maxBadRecords, "expected parameter 'maxBadRecords' to be non-null");
        this.parquetOptions = Objects.requireNonNull(parquetOptions, "expected parameter 'parquetOptions' to be non-null");
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
        this.sourceFormat = Objects.requireNonNull(sourceFormat, "expected parameter 'sourceFormat' to be non-null");
        this.sourceUris = Objects.requireNonNull(sourceUris, "expected parameter 'sourceUris' to be non-null");
    }

    private ExternalDataConfigurationResponse() {
        this.autodetect = null;
        this.avroOptions = null;
        this.bigtableOptions = null;
        this.compression = null;
        this.connectionId = null;
        this.csvOptions = null;
        this.decimalTargetTypes = List.of();
        this.googleSheetsOptions = null;
        this.hivePartitioningOptions = null;
        this.ignoreUnknownValues = null;
        this.maxBadRecords = null;
        this.parquetOptions = null;
        this.schema = null;
        this.sourceFormat = null;
        this.sourceUris = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalDataConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean autodetect;
        private AvroOptionsResponse avroOptions;
        private BigtableOptionsResponse bigtableOptions;
        private String compression;
        private String connectionId;
        private CsvOptionsResponse csvOptions;
        private List<String> decimalTargetTypes;
        private GoogleSheetsOptionsResponse googleSheetsOptions;
        private HivePartitioningOptionsResponse hivePartitioningOptions;
        private Boolean ignoreUnknownValues;
        private Integer maxBadRecords;
        private ParquetOptionsResponse parquetOptions;
        private TableSchemaResponse schema;
        private String sourceFormat;
        private List<String> sourceUris;

        public Builder() {
    	      // Empty
        }

        public Builder(ExternalDataConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodetect = defaults.autodetect;
    	      this.avroOptions = defaults.avroOptions;
    	      this.bigtableOptions = defaults.bigtableOptions;
    	      this.compression = defaults.compression;
    	      this.connectionId = defaults.connectionId;
    	      this.csvOptions = defaults.csvOptions;
    	      this.decimalTargetTypes = defaults.decimalTargetTypes;
    	      this.googleSheetsOptions = defaults.googleSheetsOptions;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.parquetOptions = defaults.parquetOptions;
    	      this.schema = defaults.schema;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
        }

        public Builder autodetect(Boolean autodetect) {
            this.autodetect = Objects.requireNonNull(autodetect);
            return this;
        }
        public Builder avroOptions(AvroOptionsResponse avroOptions) {
            this.avroOptions = Objects.requireNonNull(avroOptions);
            return this;
        }
        public Builder bigtableOptions(BigtableOptionsResponse bigtableOptions) {
            this.bigtableOptions = Objects.requireNonNull(bigtableOptions);
            return this;
        }
        public Builder compression(String compression) {
            this.compression = Objects.requireNonNull(compression);
            return this;
        }
        public Builder connectionId(String connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }
        public Builder csvOptions(CsvOptionsResponse csvOptions) {
            this.csvOptions = Objects.requireNonNull(csvOptions);
            return this;
        }
        public Builder decimalTargetTypes(List<String> decimalTargetTypes) {
            this.decimalTargetTypes = Objects.requireNonNull(decimalTargetTypes);
            return this;
        }
        public Builder decimalTargetTypes(String... decimalTargetTypes) {
            return decimalTargetTypes(List.of(decimalTargetTypes));
        }
        public Builder googleSheetsOptions(GoogleSheetsOptionsResponse googleSheetsOptions) {
            this.googleSheetsOptions = Objects.requireNonNull(googleSheetsOptions);
            return this;
        }
        public Builder hivePartitioningOptions(HivePartitioningOptionsResponse hivePartitioningOptions) {
            this.hivePartitioningOptions = Objects.requireNonNull(hivePartitioningOptions);
            return this;
        }
        public Builder ignoreUnknownValues(Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Objects.requireNonNull(ignoreUnknownValues);
            return this;
        }
        public Builder maxBadRecords(Integer maxBadRecords) {
            this.maxBadRecords = Objects.requireNonNull(maxBadRecords);
            return this;
        }
        public Builder parquetOptions(ParquetOptionsResponse parquetOptions) {
            this.parquetOptions = Objects.requireNonNull(parquetOptions);
            return this;
        }
        public Builder schema(TableSchemaResponse schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }
        public Builder sourceFormat(String sourceFormat) {
            this.sourceFormat = Objects.requireNonNull(sourceFormat);
            return this;
        }
        public Builder sourceUris(List<String> sourceUris) {
            this.sourceUris = Objects.requireNonNull(sourceUris);
            return this;
        }
        public Builder sourceUris(String... sourceUris) {
            return sourceUris(List.of(sourceUris));
        }        public ExternalDataConfigurationResponse build() {
            return new ExternalDataConfigurationResponse(autodetect, avroOptions, bigtableOptions, compression, connectionId, csvOptions, decimalTargetTypes, googleSheetsOptions, hivePartitioningOptions, ignoreUnknownValues, maxBadRecords, parquetOptions, schema, sourceFormat, sourceUris);
        }
    }
}
