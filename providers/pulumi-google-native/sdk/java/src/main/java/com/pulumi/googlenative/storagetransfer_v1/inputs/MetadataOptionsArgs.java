// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsAcl;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsGid;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsKmsKey;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsMode;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsStorageClass;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsSymlink;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsTemporaryHold;
import com.pulumi.googlenative.storagetransfer_v1.enums.MetadataOptionsUid;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the metadata options for running a transfer.
 * 
 */
public final class MetadataOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetadataOptionsArgs Empty = new MetadataOptionsArgs();

    /**
     * Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    @Import(name="acl")
    private @Nullable Output<MetadataOptionsAcl> acl;

    public Optional<Output<MetadataOptionsAcl>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Specifies how each file&#39;s GID attribute should be handled by the transfer. If unspecified, the default behavior is the same as GID_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="gid")
    private @Nullable Output<MetadataOptionsGid> gid;

    public Optional<Output<MetadataOptionsGid>> gid() {
        return Optional.ofNullable(this.gid);
    }

    /**
     * Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<MetadataOptionsKmsKey> kmsKey;

    public Optional<Output<MetadataOptionsKmsKey>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * Specifies how each file&#39;s mode attribute should be handled by the transfer. If unspecified, the default behavior is the same as MODE_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<MetadataOptionsMode> mode;

    public Optional<Output<MetadataOptionsMode>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<MetadataOptionsStorageClass> storageClass;

    public Optional<Output<MetadataOptionsStorageClass>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    /**
     * Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior is the same as SYMLINK_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="symlink")
    private @Nullable Output<MetadataOptionsSymlink> symlink;

    public Optional<Output<MetadataOptionsSymlink>> symlink() {
        return Optional.ofNullable(this.symlink);
    }

    /**
     * Specifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
     * 
     */
    @Import(name="temporaryHold")
    private @Nullable Output<MetadataOptionsTemporaryHold> temporaryHold;

    public Optional<Output<MetadataOptionsTemporaryHold>> temporaryHold() {
        return Optional.ofNullable(this.temporaryHold);
    }

    /**
     * Specifies how each file&#39;s UID attribute should be handled by the transfer. If unspecified, the default behavior is the same as UID_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<MetadataOptionsUid> uid;

    public Optional<Output<MetadataOptionsUid>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private MetadataOptionsArgs() {}

    private MetadataOptionsArgs(MetadataOptionsArgs $) {
        this.acl = $.acl;
        this.gid = $.gid;
        this.kmsKey = $.kmsKey;
        this.mode = $.mode;
        this.storageClass = $.storageClass;
        this.symlink = $.symlink;
        this.temporaryHold = $.temporaryHold;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetadataOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetadataOptionsArgs $;

        public Builder() {
            $ = new MetadataOptionsArgs();
        }

        public Builder(MetadataOptionsArgs defaults) {
            $ = new MetadataOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder acl(@Nullable Output<MetadataOptionsAcl> acl) {
            $.acl = acl;
            return this;
        }

        public Builder acl(MetadataOptionsAcl acl) {
            return acl(Output.of(acl));
        }

        public Builder gid(@Nullable Output<MetadataOptionsGid> gid) {
            $.gid = gid;
            return this;
        }

        public Builder gid(MetadataOptionsGid gid) {
            return gid(Output.of(gid));
        }

        public Builder kmsKey(@Nullable Output<MetadataOptionsKmsKey> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        public Builder kmsKey(MetadataOptionsKmsKey kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        public Builder mode(@Nullable Output<MetadataOptionsMode> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(MetadataOptionsMode mode) {
            return mode(Output.of(mode));
        }

        public Builder storageClass(@Nullable Output<MetadataOptionsStorageClass> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        public Builder storageClass(MetadataOptionsStorageClass storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public Builder symlink(@Nullable Output<MetadataOptionsSymlink> symlink) {
            $.symlink = symlink;
            return this;
        }

        public Builder symlink(MetadataOptionsSymlink symlink) {
            return symlink(Output.of(symlink));
        }

        public Builder temporaryHold(@Nullable Output<MetadataOptionsTemporaryHold> temporaryHold) {
            $.temporaryHold = temporaryHold;
            return this;
        }

        public Builder temporaryHold(MetadataOptionsTemporaryHold temporaryHold) {
            return temporaryHold(Output.of(temporaryHold));
        }

        public Builder uid(@Nullable Output<MetadataOptionsUid> uid) {
            $.uid = uid;
            return this;
        }

        public Builder uid(MetadataOptionsUid uid) {
            return uid(Output.of(uid));
        }

        public MetadataOptionsArgs build() {
            return $;
        }
    }

}
