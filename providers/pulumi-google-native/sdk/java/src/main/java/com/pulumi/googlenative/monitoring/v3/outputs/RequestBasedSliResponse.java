// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v3.outputs.DistributionCutResponse;
import com.pulumi.googlenative.monitoring.v3.outputs.TimeSeriesRatioResponse;
import java.util.Objects;

@CustomType
public final class RequestBasedSliResponse {
    /**
     * @return distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
     * 
     */
    private final DistributionCutResponse distributionCut;
    /**
     * @return good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
     * 
     */
    private final TimeSeriesRatioResponse goodTotalRatio;

    @CustomType.Constructor
    private RequestBasedSliResponse(
        @CustomType.Parameter("distributionCut") DistributionCutResponse distributionCut,
        @CustomType.Parameter("goodTotalRatio") TimeSeriesRatioResponse goodTotalRatio) {
        this.distributionCut = distributionCut;
        this.goodTotalRatio = goodTotalRatio;
    }

    /**
     * @return distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
     * 
     */
    public DistributionCutResponse distributionCut() {
        return this.distributionCut;
    }
    /**
     * @return good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
     * 
     */
    public TimeSeriesRatioResponse goodTotalRatio() {
        return this.goodTotalRatio;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RequestBasedSliResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionCutResponse distributionCut;
        private TimeSeriesRatioResponse goodTotalRatio;

        public Builder() {
    	      // Empty
        }

        public Builder(RequestBasedSliResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributionCut = defaults.distributionCut;
    	      this.goodTotalRatio = defaults.goodTotalRatio;
        }

        public Builder distributionCut(DistributionCutResponse distributionCut) {
            this.distributionCut = Objects.requireNonNull(distributionCut);
            return this;
        }
        public Builder goodTotalRatio(TimeSeriesRatioResponse goodTotalRatio) {
            this.goodTotalRatio = Objects.requireNonNull(goodTotalRatio);
            return this;
        }        public RequestBasedSliResponse build() {
            return new RequestBasedSliResponse(distributionCut, goodTotalRatio);
        }
    }
}
