// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetNoteArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetNoteIamPolicyArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetNoteIamPolicyPlainArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetNotePlainArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetOccurrenceArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetOccurrenceIamPolicyArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetOccurrenceIamPolicyPlainArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetOccurrencePlainArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetProviderNoteIamPolicyArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.GetProviderNoteIamPolicyPlainArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.GetNoteIamPolicyResult;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.GetNoteResult;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.GetOccurrenceIamPolicyResult;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.GetOccurrenceResult;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.GetProviderNoteIamPolicyResult;
import java.util.concurrent.CompletableFuture;

public final class Containeranalysis_v1alpha1Functions {
    /**
     * Returns the requested `Note`.
     * 
     */
    public static Output<GetNoteResult> getNote(GetNoteArgs args) {
        return getNote(args, InvokeOptions.Empty);
    }
    /**
     * Returns the requested `Note`.
     * 
     */
    public static CompletableFuture<GetNoteResult> getNotePlain(GetNotePlainArgs args) {
        return getNotePlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns the requested `Note`.
     * 
     */
    public static Output<GetNoteResult> getNote(GetNoteArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("google-native:containeranalysis/v1alpha1:getNote", TypeShape.of(GetNoteResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns the requested `Note`.
     * 
     */
    public static CompletableFuture<GetNoteResult> getNotePlain(GetNotePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("google-native:containeranalysis/v1alpha1:getNote", TypeShape.of(GetNoteResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static Output<GetNoteIamPolicyResult> getNoteIamPolicy(GetNoteIamPolicyArgs args) {
        return getNoteIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static CompletableFuture<GetNoteIamPolicyResult> getNoteIamPolicyPlain(GetNoteIamPolicyPlainArgs args) {
        return getNoteIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static Output<GetNoteIamPolicyResult> getNoteIamPolicy(GetNoteIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("google-native:containeranalysis/v1alpha1:getNoteIamPolicy", TypeShape.of(GetNoteIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static CompletableFuture<GetNoteIamPolicyResult> getNoteIamPolicyPlain(GetNoteIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("google-native:containeranalysis/v1alpha1:getNoteIamPolicy", TypeShape.of(GetNoteIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns the requested `Occurrence`.
     * 
     */
    public static Output<GetOccurrenceResult> getOccurrence(GetOccurrenceArgs args) {
        return getOccurrence(args, InvokeOptions.Empty);
    }
    /**
     * Returns the requested `Occurrence`.
     * 
     */
    public static CompletableFuture<GetOccurrenceResult> getOccurrencePlain(GetOccurrencePlainArgs args) {
        return getOccurrencePlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns the requested `Occurrence`.
     * 
     */
    public static Output<GetOccurrenceResult> getOccurrence(GetOccurrenceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("google-native:containeranalysis/v1alpha1:getOccurrence", TypeShape.of(GetOccurrenceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns the requested `Occurrence`.
     * 
     */
    public static CompletableFuture<GetOccurrenceResult> getOccurrencePlain(GetOccurrencePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("google-native:containeranalysis/v1alpha1:getOccurrence", TypeShape.of(GetOccurrenceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static Output<GetOccurrenceIamPolicyResult> getOccurrenceIamPolicy(GetOccurrenceIamPolicyArgs args) {
        return getOccurrenceIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static CompletableFuture<GetOccurrenceIamPolicyResult> getOccurrenceIamPolicyPlain(GetOccurrenceIamPolicyPlainArgs args) {
        return getOccurrenceIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static Output<GetOccurrenceIamPolicyResult> getOccurrenceIamPolicy(GetOccurrenceIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("google-native:containeranalysis/v1alpha1:getOccurrenceIamPolicy", TypeShape.of(GetOccurrenceIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static CompletableFuture<GetOccurrenceIamPolicyResult> getOccurrenceIamPolicyPlain(GetOccurrenceIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("google-native:containeranalysis/v1alpha1:getOccurrenceIamPolicy", TypeShape.of(GetOccurrenceIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static Output<GetProviderNoteIamPolicyResult> getProviderNoteIamPolicy(GetProviderNoteIamPolicyArgs args) {
        return getProviderNoteIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static CompletableFuture<GetProviderNoteIamPolicyResult> getProviderNoteIamPolicyPlain(GetProviderNoteIamPolicyPlainArgs args) {
        return getProviderNoteIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static Output<GetProviderNoteIamPolicyResult> getProviderNoteIamPolicy(GetProviderNoteIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("google-native:containeranalysis/v1alpha1:getProviderNoteIamPolicy", TypeShape.of(GetProviderNoteIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     * 
     */
    public static CompletableFuture<GetProviderNoteIamPolicyResult> getProviderNoteIamPolicyPlain(GetProviderNoteIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("google-native:containeranalysis/v1alpha1:getProviderNoteIamPolicy", TypeShape.of(GetProviderNoteIamPolicyResult.class), args, Utilities.withVersion(options));
    }
}
