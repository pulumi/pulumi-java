// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Audio preprocessing configuration.
 * 
 */
public final class AudioArgs extends com.pulumi.resources.ResourceArgs {

    public static final AudioArgs Empty = new AudioArgs();

    /**
     * Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
     * 
     */
    @Import(name="highBoost")
    private @Nullable Output<Boolean> highBoost;

    /**
     * @return Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
     * 
     */
    public Optional<Output<Boolean>> highBoost() {
        return Optional.ofNullable(this.highBoost);
    }

    /**
     * Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
     * 
     */
    @Import(name="lowBoost")
    private @Nullable Output<Boolean> lowBoost;

    /**
     * @return Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
     * 
     */
    public Optional<Output<Boolean>> lowBoost() {
        return Optional.ofNullable(this.lowBoost);
    }

    /**
     * Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
     * 
     */
    @Import(name="lufs")
    private @Nullable Output<Double> lufs;

    /**
     * @return Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
     * 
     */
    public Optional<Output<Double>> lufs() {
        return Optional.ofNullable(this.lufs);
    }

    private AudioArgs() {}

    private AudioArgs(AudioArgs $) {
        this.highBoost = $.highBoost;
        this.lowBoost = $.lowBoost;
        this.lufs = $.lufs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AudioArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AudioArgs $;

        public Builder() {
            $ = new AudioArgs();
        }

        public Builder(AudioArgs defaults) {
            $ = new AudioArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param highBoost Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
         * 
         * @return builder
         * 
         */
        public Builder highBoost(@Nullable Output<Boolean> highBoost) {
            $.highBoost = highBoost;
            return this;
        }

        /**
         * @param highBoost Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
         * 
         * @return builder
         * 
         */
        public Builder highBoost(Boolean highBoost) {
            return highBoost(Output.of(highBoost));
        }

        /**
         * @param lowBoost Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
         * 
         * @return builder
         * 
         */
        public Builder lowBoost(@Nullable Output<Boolean> lowBoost) {
            $.lowBoost = lowBoost;
            return this;
        }

        /**
         * @param lowBoost Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
         * 
         * @return builder
         * 
         */
        public Builder lowBoost(Boolean lowBoost) {
            return lowBoost(Output.of(lowBoost));
        }

        /**
         * @param lufs Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
         * 
         * @return builder
         * 
         */
        public Builder lufs(@Nullable Output<Double> lufs) {
            $.lufs = lufs;
            return this;
        }

        /**
         * @param lufs Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
         * 
         * @return builder
         * 
         */
        public Builder lufs(Double lufs) {
            return lufs(Output.of(lufs));
        }

        public AudioArgs build() {
            return $;
        }
    }

}
