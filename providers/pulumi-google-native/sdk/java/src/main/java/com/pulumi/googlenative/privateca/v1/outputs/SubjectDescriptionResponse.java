// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.privateca.v1.outputs.SubjectAltNamesResponse;
import com.pulumi.googlenative.privateca.v1.outputs.SubjectResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SubjectDescriptionResponse {
    /**
     * @return The serial number encoded in lowercase hexadecimal.
     * 
     */
    private final String hexSerialNumber;
    /**
     * @return For convenience, the actual lifetime of an issued certificate.
     * 
     */
    private final String lifetime;
    /**
     * @return The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to &#39;not_before_time&#39; + &#39;lifetime&#39; - 1 second.
     * 
     */
    private final String notAfterTime;
    /**
     * @return The time at which the certificate becomes valid.
     * 
     */
    private final String notBeforeTime;
    /**
     * @return Contains distinguished name fields such as the common name, location and / organization.
     * 
     */
    private final SubjectResponse subject;
    /**
     * @return The subject alternative name fields.
     * 
     */
    private final SubjectAltNamesResponse subjectAltName;

    @CustomType.Constructor
    private SubjectDescriptionResponse(
        @CustomType.Parameter("hexSerialNumber") String hexSerialNumber,
        @CustomType.Parameter("lifetime") String lifetime,
        @CustomType.Parameter("notAfterTime") String notAfterTime,
        @CustomType.Parameter("notBeforeTime") String notBeforeTime,
        @CustomType.Parameter("subject") SubjectResponse subject,
        @CustomType.Parameter("subjectAltName") SubjectAltNamesResponse subjectAltName) {
        this.hexSerialNumber = hexSerialNumber;
        this.lifetime = lifetime;
        this.notAfterTime = notAfterTime;
        this.notBeforeTime = notBeforeTime;
        this.subject = subject;
        this.subjectAltName = subjectAltName;
    }

    /**
     * @return The serial number encoded in lowercase hexadecimal.
     * 
     */
    public String hexSerialNumber() {
        return this.hexSerialNumber;
    }
    /**
     * @return For convenience, the actual lifetime of an issued certificate.
     * 
     */
    public String lifetime() {
        return this.lifetime;
    }
    /**
     * @return The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to &#39;not_before_time&#39; + &#39;lifetime&#39; - 1 second.
     * 
     */
    public String notAfterTime() {
        return this.notAfterTime;
    }
    /**
     * @return The time at which the certificate becomes valid.
     * 
     */
    public String notBeforeTime() {
        return this.notBeforeTime;
    }
    /**
     * @return Contains distinguished name fields such as the common name, location and / organization.
     * 
     */
    public SubjectResponse subject() {
        return this.subject;
    }
    /**
     * @return The subject alternative name fields.
     * 
     */
    public SubjectAltNamesResponse subjectAltName() {
        return this.subjectAltName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubjectDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String hexSerialNumber;
        private String lifetime;
        private String notAfterTime;
        private String notBeforeTime;
        private SubjectResponse subject;
        private SubjectAltNamesResponse subjectAltName;

        public Builder() {
    	      // Empty
        }

        public Builder(SubjectDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hexSerialNumber = defaults.hexSerialNumber;
    	      this.lifetime = defaults.lifetime;
    	      this.notAfterTime = defaults.notAfterTime;
    	      this.notBeforeTime = defaults.notBeforeTime;
    	      this.subject = defaults.subject;
    	      this.subjectAltName = defaults.subjectAltName;
        }

        public Builder hexSerialNumber(String hexSerialNumber) {
            this.hexSerialNumber = Objects.requireNonNull(hexSerialNumber);
            return this;
        }
        public Builder lifetime(String lifetime) {
            this.lifetime = Objects.requireNonNull(lifetime);
            return this;
        }
        public Builder notAfterTime(String notAfterTime) {
            this.notAfterTime = Objects.requireNonNull(notAfterTime);
            return this;
        }
        public Builder notBeforeTime(String notBeforeTime) {
            this.notBeforeTime = Objects.requireNonNull(notBeforeTime);
            return this;
        }
        public Builder subject(SubjectResponse subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        public Builder subjectAltName(SubjectAltNamesResponse subjectAltName) {
            this.subjectAltName = Objects.requireNonNull(subjectAltName);
            return this;
        }        public SubjectDescriptionResponse build() {
            return new SubjectDescriptionResponse(hexSerialNumber, lifetime, notAfterTime, notBeforeTime, subject, subjectAltName);
        }
    }
}
