// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow_v1b3.enums.JobCurrentState;
import com.pulumi.googlenative.dataflow_v1b3.enums.JobRequestedState;
import com.pulumi.googlenative.dataflow_v1b3.enums.JobType;
import com.pulumi.googlenative.dataflow_v1b3.inputs.EnvironmentArgs;
import com.pulumi.googlenative.dataflow_v1b3.inputs.ExecutionStageStateArgs;
import com.pulumi.googlenative.dataflow_v1b3.inputs.JobMetadataArgs;
import com.pulumi.googlenative.dataflow_v1b3.inputs.PipelineDescriptionArgs;
import com.pulumi.googlenative.dataflow_v1b3.inputs.StepArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * The client&#39;s unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client&#39;s ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.
     * 
     */
    @Import(name="clientRequestId")
    private @Nullable Output<String> clientRequestId;

    public Optional<Output<String>> clientRequestId() {
        return Optional.ofNullable(this.clientRequestId);
    }

    /**
     * The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * If this is specified, the job&#39;s initial state is populated from the given snapshot.
     * 
     */
    @Import(name="createdFromSnapshotId")
    private @Nullable Output<String> createdFromSnapshotId;

    public Optional<Output<String>> createdFromSnapshotId() {
        return Optional.ofNullable(this.createdFromSnapshotId);
    }

    /**
     * The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
     * 
     */
    @Import(name="currentState")
    private @Nullable Output<JobCurrentState> currentState;

    public Optional<Output<JobCurrentState>> currentState() {
        return Optional.ofNullable(this.currentState);
    }

    /**
     * The timestamp associated with the current state.
     * 
     */
    @Import(name="currentStateTime")
    private @Nullable Output<String> currentStateTime;

    public Optional<Output<String>> currentStateTime() {
        return Optional.ofNullable(this.currentStateTime);
    }

    /**
     * The environment for the job.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<EnvironmentArgs> environment;

    public Optional<Output<EnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The unique ID of this job. This field is set by the Cloud Dataflow service when the Job is created, and is immutable for the life of the job.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * This field is populated by the Dataflow service to support filtering jobs by the metadata values provided here. Populated for ListJobs and all GetJob views SUMMARY and higher.
     * 
     */
    @Import(name="jobMetadata")
    private @Nullable Output<JobMetadataArgs> jobMetadata;

    public Optional<Output<JobMetadataArgs>> jobMetadata() {
        return Optional.ofNullable(this.jobMetadata);
    }

    /**
     * User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp: [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally constrained to be &lt;= 128 bytes in size.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The user-specified Cloud Dataflow job name. Only one Job with a given name may exist in a project at any given time. If a caller attempts to create a Job with the same name as an already-existing Job, the attempt returns the existing Job. The name must match the regular expression `[a-z]([-a-z0-9]{0,38}[a-z0-9])?`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Preliminary field: The format of this data may change at any time. A description of the user pipeline and stages through which it is executed. Created by Cloud Dataflow service. Only retrieved with JOB_VIEW_DESCRIPTION or JOB_VIEW_ALL.
     * 
     */
    @Import(name="pipelineDescription")
    private @Nullable Output<PipelineDescriptionArgs> pipelineDescription;

    public Optional<Output<PipelineDescriptionArgs>> pipelineDescription() {
        return Optional.ofNullable(this.pipelineDescription);
    }

    /**
     * The ID of the Cloud Platform project that the job belongs to.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.
     * 
     */
    @Import(name="replaceJobId")
    private @Nullable Output<String> replaceJobId;

    public Optional<Output<String>> replaceJobId() {
        return Optional.ofNullable(this.replaceJobId);
    }

    /**
     * If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.
     * 
     */
    @Import(name="replacedByJobId")
    private @Nullable Output<String> replacedByJobId;

    public Optional<Output<String>> replacedByJobId() {
        return Optional.ofNullable(this.replacedByJobId);
    }

    /**
     * The job&#39;s requested state. `UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING` states, by setting requested_state. `UpdateJob` may also be used to directly set a job&#39;s requested state to `JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the job if it has not already reached a terminal state.
     * 
     */
    @Import(name="requestedState")
    private @Nullable Output<JobRequestedState> requestedState;

    public Optional<Output<JobRequestedState>> requestedState() {
        return Optional.ofNullable(this.requestedState);
    }

    /**
     * Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
     * 
     */
    @Import(name="satisfiesPzs")
    private @Nullable Output<Boolean> satisfiesPzs;

    public Optional<Output<Boolean>> satisfiesPzs() {
        return Optional.ofNullable(this.satisfiesPzs);
    }

    /**
     * This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
     * 
     */
    @Import(name="stageStates")
    private @Nullable Output<List<ExecutionStageStateArgs>> stageStates;

    public Optional<Output<List<ExecutionStageStateArgs>>> stageStates() {
        return Optional.ofNullable(this.stageStates);
    }

    /**
     * The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.
     * 
     */
    @Import(name="steps")
    private @Nullable Output<List<StepArgs>> steps;

    public Optional<Output<List<StepArgs>>> steps() {
        return Optional.ofNullable(this.steps);
    }

    /**
     * The Cloud Storage location where the steps are stored.
     * 
     */
    @Import(name="stepsLocation")
    private @Nullable Output<String> stepsLocation;

    public Optional<Output<String>> stepsLocation() {
        return Optional.ofNullable(this.stepsLocation);
    }

    /**
     * A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    @Import(name="tempFiles")
    private @Nullable Output<List<String>> tempFiles;

    public Optional<Output<List<String>>> tempFiles() {
        return Optional.ofNullable(this.tempFiles);
    }

    /**
     * The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.
     * 
     */
    @Import(name="transformNameMapping")
    private @Nullable Output<Map<String,String>> transformNameMapping;

    public Optional<Output<Map<String,String>>> transformNameMapping() {
        return Optional.ofNullable(this.transformNameMapping);
    }

    /**
     * The type of Cloud Dataflow job.
     * 
     */
    @Import(name="type")
    private @Nullable Output<JobType> type;

    public Optional<Output<JobType>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="view")
    private @Nullable Output<String> view;

    public Optional<Output<String>> view() {
        return Optional.ofNullable(this.view);
    }

    private JobArgs() {}

    private JobArgs(JobArgs $) {
        this.clientRequestId = $.clientRequestId;
        this.createTime = $.createTime;
        this.createdFromSnapshotId = $.createdFromSnapshotId;
        this.currentState = $.currentState;
        this.currentStateTime = $.currentStateTime;
        this.environment = $.environment;
        this.id = $.id;
        this.jobMetadata = $.jobMetadata;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.pipelineDescription = $.pipelineDescription;
        this.project = $.project;
        this.replaceJobId = $.replaceJobId;
        this.replacedByJobId = $.replacedByJobId;
        this.requestedState = $.requestedState;
        this.satisfiesPzs = $.satisfiesPzs;
        this.stageStates = $.stageStates;
        this.startTime = $.startTime;
        this.steps = $.steps;
        this.stepsLocation = $.stepsLocation;
        this.tempFiles = $.tempFiles;
        this.transformNameMapping = $.transformNameMapping;
        this.type = $.type;
        this.view = $.view;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobArgs $;

        public Builder() {
            $ = new JobArgs();
        }

        public Builder(JobArgs defaults) {
            $ = new JobArgs(Objects.requireNonNull(defaults));
        }

        public Builder clientRequestId(@Nullable Output<String> clientRequestId) {
            $.clientRequestId = clientRequestId;
            return this;
        }

        public Builder clientRequestId(String clientRequestId) {
            return clientRequestId(Output.of(clientRequestId));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder createdFromSnapshotId(@Nullable Output<String> createdFromSnapshotId) {
            $.createdFromSnapshotId = createdFromSnapshotId;
            return this;
        }

        public Builder createdFromSnapshotId(String createdFromSnapshotId) {
            return createdFromSnapshotId(Output.of(createdFromSnapshotId));
        }

        public Builder currentState(@Nullable Output<JobCurrentState> currentState) {
            $.currentState = currentState;
            return this;
        }

        public Builder currentState(JobCurrentState currentState) {
            return currentState(Output.of(currentState));
        }

        public Builder currentStateTime(@Nullable Output<String> currentStateTime) {
            $.currentStateTime = currentStateTime;
            return this;
        }

        public Builder currentStateTime(String currentStateTime) {
            return currentStateTime(Output.of(currentStateTime));
        }

        public Builder environment(@Nullable Output<EnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(EnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder jobMetadata(@Nullable Output<JobMetadataArgs> jobMetadata) {
            $.jobMetadata = jobMetadata;
            return this;
        }

        public Builder jobMetadata(JobMetadataArgs jobMetadata) {
            return jobMetadata(Output.of(jobMetadata));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pipelineDescription(@Nullable Output<PipelineDescriptionArgs> pipelineDescription) {
            $.pipelineDescription = pipelineDescription;
            return this;
        }

        public Builder pipelineDescription(PipelineDescriptionArgs pipelineDescription) {
            return pipelineDescription(Output.of(pipelineDescription));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder replaceJobId(@Nullable Output<String> replaceJobId) {
            $.replaceJobId = replaceJobId;
            return this;
        }

        public Builder replaceJobId(String replaceJobId) {
            return replaceJobId(Output.of(replaceJobId));
        }

        public Builder replacedByJobId(@Nullable Output<String> replacedByJobId) {
            $.replacedByJobId = replacedByJobId;
            return this;
        }

        public Builder replacedByJobId(String replacedByJobId) {
            return replacedByJobId(Output.of(replacedByJobId));
        }

        public Builder requestedState(@Nullable Output<JobRequestedState> requestedState) {
            $.requestedState = requestedState;
            return this;
        }

        public Builder requestedState(JobRequestedState requestedState) {
            return requestedState(Output.of(requestedState));
        }

        public Builder satisfiesPzs(@Nullable Output<Boolean> satisfiesPzs) {
            $.satisfiesPzs = satisfiesPzs;
            return this;
        }

        public Builder satisfiesPzs(Boolean satisfiesPzs) {
            return satisfiesPzs(Output.of(satisfiesPzs));
        }

        public Builder stageStates(@Nullable Output<List<ExecutionStageStateArgs>> stageStates) {
            $.stageStates = stageStates;
            return this;
        }

        public Builder stageStates(List<ExecutionStageStateArgs> stageStates) {
            return stageStates(Output.of(stageStates));
        }

        public Builder stageStates(ExecutionStageStateArgs... stageStates) {
            return stageStates(List.of(stageStates));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder steps(@Nullable Output<List<StepArgs>> steps) {
            $.steps = steps;
            return this;
        }

        public Builder steps(List<StepArgs> steps) {
            return steps(Output.of(steps));
        }

        public Builder steps(StepArgs... steps) {
            return steps(List.of(steps));
        }

        public Builder stepsLocation(@Nullable Output<String> stepsLocation) {
            $.stepsLocation = stepsLocation;
            return this;
        }

        public Builder stepsLocation(String stepsLocation) {
            return stepsLocation(Output.of(stepsLocation));
        }

        public Builder tempFiles(@Nullable Output<List<String>> tempFiles) {
            $.tempFiles = tempFiles;
            return this;
        }

        public Builder tempFiles(List<String> tempFiles) {
            return tempFiles(Output.of(tempFiles));
        }

        public Builder tempFiles(String... tempFiles) {
            return tempFiles(List.of(tempFiles));
        }

        public Builder transformNameMapping(@Nullable Output<Map<String,String>> transformNameMapping) {
            $.transformNameMapping = transformNameMapping;
            return this;
        }

        public Builder transformNameMapping(Map<String,String> transformNameMapping) {
            return transformNameMapping(Output.of(transformNameMapping));
        }

        public Builder type(@Nullable Output<JobType> type) {
            $.type = type;
            return this;
        }

        public Builder type(JobType type) {
            return type(Output.of(type));
        }

        public Builder view(@Nullable Output<String> view) {
            $.view = view;
            return this;
        }

        public Builder view(String view) {
            return view(Output.of(view));
        }

        public JobArgs build() {
            return $;
        }
    }

}
