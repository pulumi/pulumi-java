// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.tpu.v2alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.tpu.v2alpha1.enums.AttachedDiskMode;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A node-attached disk resource. Next ID: 8;
 * 
 */
public final class AttachedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachedDiskArgs Empty = new AttachedDiskArgs();

    /**
     * The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<AttachedDiskMode> mode;

    /**
     * @return The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
     * 
     */
    public Optional<Output<AttachedDiskMode>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the full path to an existing disk. For example: &#34;projects/my-project/zones/us-central1-c/disks/my-disk&#34;.
     * 
     */
    @Import(name="sourceDisk")
    private @Nullable Output<String> sourceDisk;

    /**
     * @return Specifies the full path to an existing disk. For example: &#34;projects/my-project/zones/us-central1-c/disks/my-disk&#34;.
     * 
     */
    public Optional<Output<String>> sourceDisk() {
        return Optional.ofNullable(this.sourceDisk);
    }

    private AttachedDiskArgs() {}

    private AttachedDiskArgs(AttachedDiskArgs $) {
        this.mode = $.mode;
        this.sourceDisk = $.sourceDisk;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDiskArgs $;

        public Builder() {
            $ = new AttachedDiskArgs();
        }

        public Builder(AttachedDiskArgs defaults) {
            $ = new AttachedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<AttachedDiskMode> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
         * 
         * @return builder
         * 
         */
        public Builder mode(AttachedDiskMode mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param sourceDisk Specifies the full path to an existing disk. For example: &#34;projects/my-project/zones/us-central1-c/disks/my-disk&#34;.
         * 
         * @return builder
         * 
         */
        public Builder sourceDisk(@Nullable Output<String> sourceDisk) {
            $.sourceDisk = sourceDisk;
            return this;
        }

        /**
         * @param sourceDisk Specifies the full path to an existing disk. For example: &#34;projects/my-project/zones/us-central1-c/disks/my-disk&#34;.
         * 
         * @return builder
         * 
         */
        public Builder sourceDisk(String sourceDisk) {
            return sourceDisk(Output.of(sourceDisk));
        }

        public AttachedDiskArgs build() {
            return $;
        }
    }

}
