// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1.inputs.JwtArgs;
import com.pulumi.googlenative.containeranalysis.v1.inputs.SignatureArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Occurrence that represents a single &#34;attestation&#34;. The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
 * 
 */
public final class AttestationOccurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttestationOccurrenceArgs Empty = new AttestationOccurrenceArgs();

    /**
     * One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
     * 
     */
    @Import(name="jwts")
    private @Nullable Output<List<JwtArgs>> jwts;

    /**
     * @return One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
     * 
     */
    public Optional<Output<List<JwtArgs>>> jwts() {
        return Optional.ofNullable(this.jwts);
    }

    /**
     * The serialized payload that is verified by one or more `signatures`.
     * 
     */
    @Import(name="serializedPayload", required=true)
    private Output<String> serializedPayload;

    /**
     * @return The serialized payload that is verified by one or more `signatures`.
     * 
     */
    public Output<String> serializedPayload() {
        return this.serializedPayload;
    }

    /**
     * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
     * 
     */
    @Import(name="signatures")
    private @Nullable Output<List<SignatureArgs>> signatures;

    /**
     * @return One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
     * 
     */
    public Optional<Output<List<SignatureArgs>>> signatures() {
        return Optional.ofNullable(this.signatures);
    }

    private AttestationOccurrenceArgs() {}

    private AttestationOccurrenceArgs(AttestationOccurrenceArgs $) {
        this.jwts = $.jwts;
        this.serializedPayload = $.serializedPayload;
        this.signatures = $.signatures;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttestationOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttestationOccurrenceArgs $;

        public Builder() {
            $ = new AttestationOccurrenceArgs();
        }

        public Builder(AttestationOccurrenceArgs defaults) {
            $ = new AttestationOccurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jwts One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
         * 
         * @return builder
         * 
         */
        public Builder jwts(@Nullable Output<List<JwtArgs>> jwts) {
            $.jwts = jwts;
            return this;
        }

        /**
         * @param jwts One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
         * 
         * @return builder
         * 
         */
        public Builder jwts(List<JwtArgs> jwts) {
            return jwts(Output.of(jwts));
        }

        /**
         * @param jwts One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
         * 
         * @return builder
         * 
         */
        public Builder jwts(JwtArgs... jwts) {
            return jwts(List.of(jwts));
        }

        /**
         * @param serializedPayload The serialized payload that is verified by one or more `signatures`.
         * 
         * @return builder
         * 
         */
        public Builder serializedPayload(Output<String> serializedPayload) {
            $.serializedPayload = serializedPayload;
            return this;
        }

        /**
         * @param serializedPayload The serialized payload that is verified by one or more `signatures`.
         * 
         * @return builder
         * 
         */
        public Builder serializedPayload(String serializedPayload) {
            return serializedPayload(Output.of(serializedPayload));
        }

        /**
         * @param signatures One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
         * 
         * @return builder
         * 
         */
        public Builder signatures(@Nullable Output<List<SignatureArgs>> signatures) {
            $.signatures = signatures;
            return this;
        }

        /**
         * @param signatures One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
         * 
         * @return builder
         * 
         */
        public Builder signatures(List<SignatureArgs> signatures) {
            return signatures(Output.of(signatures));
        }

        /**
         * @param signatures One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
         * 
         * @return builder
         * 
         */
        public Builder signatures(SignatureArgs... signatures) {
            return signatures(List.of(signatures));
        }

        public AttestationOccurrenceArgs build() {
            $.serializedPayload = Objects.requireNonNull($.serializedPayload, "expected parameter 'serializedPayload' to be non-null");
            return $;
        }
    }

}
