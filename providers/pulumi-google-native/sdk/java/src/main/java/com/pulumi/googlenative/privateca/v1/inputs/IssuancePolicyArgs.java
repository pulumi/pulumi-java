// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca.v1.inputs.AllowedKeyTypeArgs;
import com.pulumi.googlenative.privateca.v1.inputs.CertificateExtensionConstraintsArgs;
import com.pulumi.googlenative.privateca.v1.inputs.CertificateIdentityConstraintsArgs;
import com.pulumi.googlenative.privateca.v1.inputs.IssuanceModesArgs;
import com.pulumi.googlenative.privateca.v1.inputs.X509ParametersArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines controls over all certificate issuance within a CaPool.
 * 
 */
public final class IssuancePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IssuancePolicyArgs Empty = new IssuancePolicyArgs();

    /**
     * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    @Import(name="allowedIssuanceModes")
    private @Nullable Output<IssuanceModesArgs> allowedIssuanceModes;

    /**
     * @return Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    public Optional<Output<IssuanceModesArgs>> allowedIssuanceModes() {
        return Optional.ofNullable(this.allowedIssuanceModes);
    }

    /**
     * Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
     * 
     */
    @Import(name="allowedKeyTypes")
    private @Nullable Output<List<AllowedKeyTypeArgs>> allowedKeyTypes;

    /**
     * @return Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
     * 
     */
    public Optional<Output<List<AllowedKeyTypeArgs>>> allowedKeyTypes() {
        return Optional.ofNullable(this.allowedKeyTypes);
    }

    /**
     * Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @Import(name="baselineValues")
    private @Nullable Output<X509ParametersArgs> baselineValues;

    /**
     * @return Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
     * 
     */
    public Optional<Output<X509ParametersArgs>> baselineValues() {
        return Optional.ofNullable(this.baselineValues);
    }

    /**
     * Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
     * 
     */
    @Import(name="identityConstraints")
    private @Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints;

    /**
     * @return Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
     * 
     */
    public Optional<Output<CertificateIdentityConstraintsArgs>> identityConstraints() {
        return Optional.ofNullable(this.identityConstraints);
    }

    /**
     * Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    @Import(name="maximumLifetime")
    private @Nullable Output<String> maximumLifetime;

    /**
     * @return Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    public Optional<Output<String>> maximumLifetime() {
        return Optional.ofNullable(this.maximumLifetime);
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool&#39;s baseline_values.
     * 
     */
    @Import(name="passthroughExtensions")
    private @Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions;

    /**
     * @return Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool&#39;s baseline_values.
     * 
     */
    public Optional<Output<CertificateExtensionConstraintsArgs>> passthroughExtensions() {
        return Optional.ofNullable(this.passthroughExtensions);
    }

    private IssuancePolicyArgs() {}

    private IssuancePolicyArgs(IssuancePolicyArgs $) {
        this.allowedIssuanceModes = $.allowedIssuanceModes;
        this.allowedKeyTypes = $.allowedKeyTypes;
        this.baselineValues = $.baselineValues;
        this.identityConstraints = $.identityConstraints;
        this.maximumLifetime = $.maximumLifetime;
        this.passthroughExtensions = $.passthroughExtensions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IssuancePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IssuancePolicyArgs $;

        public Builder() {
            $ = new IssuancePolicyArgs();
        }

        public Builder(IssuancePolicyArgs defaults) {
            $ = new IssuancePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedIssuanceModes Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowedIssuanceModes(@Nullable Output<IssuanceModesArgs> allowedIssuanceModes) {
            $.allowedIssuanceModes = allowedIssuanceModes;
            return this;
        }

        /**
         * @param allowedIssuanceModes Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowedIssuanceModes(IssuanceModesArgs allowedIssuanceModes) {
            return allowedIssuanceModes(Output.of(allowedIssuanceModes));
        }

        /**
         * @param allowedKeyTypes Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyTypes(@Nullable Output<List<AllowedKeyTypeArgs>> allowedKeyTypes) {
            $.allowedKeyTypes = allowedKeyTypes;
            return this;
        }

        /**
         * @param allowedKeyTypes Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyTypes(List<AllowedKeyTypeArgs> allowedKeyTypes) {
            return allowedKeyTypes(Output.of(allowedKeyTypes));
        }

        /**
         * @param allowedKeyTypes Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyTypes(AllowedKeyTypeArgs... allowedKeyTypes) {
            return allowedKeyTypes(List.of(allowedKeyTypes));
        }

        /**
         * @param baselineValues Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
         * 
         * @return builder
         * 
         */
        public Builder baselineValues(@Nullable Output<X509ParametersArgs> baselineValues) {
            $.baselineValues = baselineValues;
            return this;
        }

        /**
         * @param baselineValues Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
         * 
         * @return builder
         * 
         */
        public Builder baselineValues(X509ParametersArgs baselineValues) {
            return baselineValues(Output.of(baselineValues));
        }

        /**
         * @param identityConstraints Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
         * 
         * @return builder
         * 
         */
        public Builder identityConstraints(@Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints) {
            $.identityConstraints = identityConstraints;
            return this;
        }

        /**
         * @param identityConstraints Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
         * 
         * @return builder
         * 
         */
        public Builder identityConstraints(CertificateIdentityConstraintsArgs identityConstraints) {
            return identityConstraints(Output.of(identityConstraints));
        }

        /**
         * @param maximumLifetime Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
         * 
         * @return builder
         * 
         */
        public Builder maximumLifetime(@Nullable Output<String> maximumLifetime) {
            $.maximumLifetime = maximumLifetime;
            return this;
        }

        /**
         * @param maximumLifetime Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
         * 
         * @return builder
         * 
         */
        public Builder maximumLifetime(String maximumLifetime) {
            return maximumLifetime(Output.of(maximumLifetime));
        }

        /**
         * @param passthroughExtensions Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool&#39;s baseline_values.
         * 
         * @return builder
         * 
         */
        public Builder passthroughExtensions(@Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions) {
            $.passthroughExtensions = passthroughExtensions;
            return this;
        }

        /**
         * @param passthroughExtensions Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool&#39;s baseline_values.
         * 
         * @return builder
         * 
         */
        public Builder passthroughExtensions(CertificateExtensionConstraintsArgs passthroughExtensions) {
            return passthroughExtensions(Output.of(passthroughExtensions));
        }

        public IssuancePolicyArgs build() {
            return $;
        }
    }

}
