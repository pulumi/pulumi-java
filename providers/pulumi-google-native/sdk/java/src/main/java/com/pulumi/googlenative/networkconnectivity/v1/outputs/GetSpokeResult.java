// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkconnectivity.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.networkconnectivity.v1.outputs.LinkedInterconnectAttachmentsResponse;
import com.pulumi.googlenative.networkconnectivity.v1.outputs.LinkedRouterApplianceInstancesResponse;
import com.pulumi.googlenative.networkconnectivity.v1.outputs.LinkedVpnTunnelsResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSpokeResult {
    /**
     * @return The time the spoke was created.
     * 
     */
    private final String createTime;
    /**
     * @return An optional description of the spoke.
     * 
     */
    private final String description;
    /**
     * @return Immutable. The name of the hub that this spoke is attached to.
     * 
     */
    private final String hub;
    /**
     * @return Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return VLAN attachments that are associated with the spoke.
     * 
     */
    private final LinkedInterconnectAttachmentsResponse linkedInterconnectAttachments;
    /**
     * @return Router appliance instances that are associated with the spoke.
     * 
     */
    private final LinkedRouterApplianceInstancesResponse linkedRouterApplianceInstances;
    /**
     * @return VPN tunnels that are associated with the spoke.
     * 
     */
    private final LinkedVpnTunnelsResponse linkedVpnTunnels;
    /**
     * @return Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
     * 
     */
    private final String name;
    /**
     * @return The current lifecycle state of this spoke.
     * 
     */
    private final String state;
    /**
     * @return The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    private final String uniqueId;
    /**
     * @return The time the spoke was last updated.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetSpokeResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("hub") String hub,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("linkedInterconnectAttachments") LinkedInterconnectAttachmentsResponse linkedInterconnectAttachments,
        @CustomType.Parameter("linkedRouterApplianceInstances") LinkedRouterApplianceInstancesResponse linkedRouterApplianceInstances,
        @CustomType.Parameter("linkedVpnTunnels") LinkedVpnTunnelsResponse linkedVpnTunnels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("uniqueId") String uniqueId,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.createTime = createTime;
        this.description = description;
        this.hub = hub;
        this.labels = labels;
        this.linkedInterconnectAttachments = linkedInterconnectAttachments;
        this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
        this.linkedVpnTunnels = linkedVpnTunnels;
        this.name = name;
        this.state = state;
        this.uniqueId = uniqueId;
        this.updateTime = updateTime;
    }

    /**
     * @return The time the spoke was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return An optional description of the spoke.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Immutable. The name of the hub that this spoke is attached to.
     * 
     */
    public String hub() {
        return this.hub;
    }
    /**
     * @return Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return VLAN attachments that are associated with the spoke.
     * 
     */
    public LinkedInterconnectAttachmentsResponse linkedInterconnectAttachments() {
        return this.linkedInterconnectAttachments;
    }
    /**
     * @return Router appliance instances that are associated with the spoke.
     * 
     */
    public LinkedRouterApplianceInstancesResponse linkedRouterApplianceInstances() {
        return this.linkedRouterApplianceInstances;
    }
    /**
     * @return VPN tunnels that are associated with the spoke.
     * 
     */
    public LinkedVpnTunnelsResponse linkedVpnTunnels() {
        return this.linkedVpnTunnels;
    }
    /**
     * @return Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current lifecycle state of this spoke.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    public String uniqueId() {
        return this.uniqueId;
    }
    /**
     * @return The time the spoke was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSpokeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String description;
        private String hub;
        private Map<String,String> labels;
        private LinkedInterconnectAttachmentsResponse linkedInterconnectAttachments;
        private LinkedRouterApplianceInstancesResponse linkedRouterApplianceInstances;
        private LinkedVpnTunnelsResponse linkedVpnTunnels;
        private String name;
        private String state;
        private String uniqueId;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSpokeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.hub = defaults.hub;
    	      this.labels = defaults.labels;
    	      this.linkedInterconnectAttachments = defaults.linkedInterconnectAttachments;
    	      this.linkedRouterApplianceInstances = defaults.linkedRouterApplianceInstances;
    	      this.linkedVpnTunnels = defaults.linkedVpnTunnels;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.uniqueId = defaults.uniqueId;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder hub(String hub) {
            this.hub = Objects.requireNonNull(hub);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder linkedInterconnectAttachments(LinkedInterconnectAttachmentsResponse linkedInterconnectAttachments) {
            this.linkedInterconnectAttachments = Objects.requireNonNull(linkedInterconnectAttachments);
            return this;
        }
        public Builder linkedRouterApplianceInstances(LinkedRouterApplianceInstancesResponse linkedRouterApplianceInstances) {
            this.linkedRouterApplianceInstances = Objects.requireNonNull(linkedRouterApplianceInstances);
            return this;
        }
        public Builder linkedVpnTunnels(LinkedVpnTunnelsResponse linkedVpnTunnels) {
            this.linkedVpnTunnels = Objects.requireNonNull(linkedVpnTunnels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder uniqueId(String uniqueId) {
            this.uniqueId = Objects.requireNonNull(uniqueId);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetSpokeResult build() {
            return new GetSpokeResult(createTime, description, hub, labels, linkedInterconnectAttachments, linkedRouterApplianceInstances, linkedVpnTunnels, name, state, uniqueId, updateTime);
        }
    }
}
