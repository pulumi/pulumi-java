// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.certificatemanager.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.certificatemanager.v1.outputs.AuthorizationAttemptInfoResponse;
import com.pulumi.googlenative.certificatemanager.v1.outputs.ProvisioningIssueResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ManagedCertificateResponse {
    /**
     * @return Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
     * 
     */
    private final List<AuthorizationAttemptInfoResponse> authorizationAttemptInfo;
    /**
     * @return Immutable. Authorizations that will be used for performing domain authorization.
     * 
     */
    private final List<String> dnsAuthorizations;
    /**
     * @return Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
     * 
     */
    private final List<String> domains;
    /**
     * @return Information about issues with provisioning a Managed Certificate.
     * 
     */
    private final ProvisioningIssueResponse provisioningIssue;
    /**
     * @return State of the managed certificate resource.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private ManagedCertificateResponse(
        @CustomType.Parameter("authorizationAttemptInfo") List<AuthorizationAttemptInfoResponse> authorizationAttemptInfo,
        @CustomType.Parameter("dnsAuthorizations") List<String> dnsAuthorizations,
        @CustomType.Parameter("domains") List<String> domains,
        @CustomType.Parameter("provisioningIssue") ProvisioningIssueResponse provisioningIssue,
        @CustomType.Parameter("state") String state) {
        this.authorizationAttemptInfo = authorizationAttemptInfo;
        this.dnsAuthorizations = dnsAuthorizations;
        this.domains = domains;
        this.provisioningIssue = provisioningIssue;
        this.state = state;
    }

    /**
     * @return Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
     * 
     */
    public List<AuthorizationAttemptInfoResponse> authorizationAttemptInfo() {
        return this.authorizationAttemptInfo;
    }
    /**
     * @return Immutable. Authorizations that will be used for performing domain authorization.
     * 
     */
    public List<String> dnsAuthorizations() {
        return this.dnsAuthorizations;
    }
    /**
     * @return Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return Information about issues with provisioning a Managed Certificate.
     * 
     */
    public ProvisioningIssueResponse provisioningIssue() {
        return this.provisioningIssue;
    }
    /**
     * @return State of the managed certificate resource.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedCertificateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AuthorizationAttemptInfoResponse> authorizationAttemptInfo;
        private List<String> dnsAuthorizations;
        private List<String> domains;
        private ProvisioningIssueResponse provisioningIssue;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedCertificateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationAttemptInfo = defaults.authorizationAttemptInfo;
    	      this.dnsAuthorizations = defaults.dnsAuthorizations;
    	      this.domains = defaults.domains;
    	      this.provisioningIssue = defaults.provisioningIssue;
    	      this.state = defaults.state;
        }

        public Builder authorizationAttemptInfo(List<AuthorizationAttemptInfoResponse> authorizationAttemptInfo) {
            this.authorizationAttemptInfo = Objects.requireNonNull(authorizationAttemptInfo);
            return this;
        }
        public Builder authorizationAttemptInfo(AuthorizationAttemptInfoResponse... authorizationAttemptInfo) {
            return authorizationAttemptInfo(List.of(authorizationAttemptInfo));
        }
        public Builder dnsAuthorizations(List<String> dnsAuthorizations) {
            this.dnsAuthorizations = Objects.requireNonNull(dnsAuthorizations);
            return this;
        }
        public Builder dnsAuthorizations(String... dnsAuthorizations) {
            return dnsAuthorizations(List.of(dnsAuthorizations));
        }
        public Builder domains(List<String> domains) {
            this.domains = Objects.requireNonNull(domains);
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        public Builder provisioningIssue(ProvisioningIssueResponse provisioningIssue) {
            this.provisioningIssue = Objects.requireNonNull(provisioningIssue);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public ManagedCertificateResponse build() {
            return new ManagedCertificateResponse(authorizationAttemptInfo, dnsAuthorizations, domains, provisioningIssue, state);
        }
    }
}
