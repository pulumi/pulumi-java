// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.GrpcRouteHeaderMatchArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.GrpcRouteMethodMatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
 * 
 */
public final class GrpcRouteRouteMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrpcRouteRouteMatchArgs Empty = new GrpcRouteRouteMatchArgs();

    /**
     * Optional. Specifies a collection of headers to match.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<GrpcRouteHeaderMatchArgs>> headers;

    /**
     * @return Optional. Specifies a collection of headers to match.
     * 
     */
    public Optional<Output<List<GrpcRouteHeaderMatchArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
     * 
     */
    @Import(name="method")
    private @Nullable Output<GrpcRouteMethodMatchArgs> method;

    /**
     * @return Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
     * 
     */
    public Optional<Output<GrpcRouteMethodMatchArgs>> method() {
        return Optional.ofNullable(this.method);
    }

    private GrpcRouteRouteMatchArgs() {}

    private GrpcRouteRouteMatchArgs(GrpcRouteRouteMatchArgs $) {
        this.headers = $.headers;
        this.method = $.method;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrpcRouteRouteMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrpcRouteRouteMatchArgs $;

        public Builder() {
            $ = new GrpcRouteRouteMatchArgs();
        }

        public Builder(GrpcRouteRouteMatchArgs defaults) {
            $ = new GrpcRouteRouteMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headers Optional. Specifies a collection of headers to match.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<GrpcRouteHeaderMatchArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Optional. Specifies a collection of headers to match.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<GrpcRouteHeaderMatchArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Optional. Specifies a collection of headers to match.
         * 
         * @return builder
         * 
         */
        public Builder headers(GrpcRouteHeaderMatchArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param method Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<GrpcRouteMethodMatchArgs> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
         * 
         * @return builder
         * 
         */
        public Builder method(GrpcRouteMethodMatchArgs method) {
            return method(Output.of(method));
        }

        public GrpcRouteRouteMatchArgs build() {
            return $;
        }
    }

}
