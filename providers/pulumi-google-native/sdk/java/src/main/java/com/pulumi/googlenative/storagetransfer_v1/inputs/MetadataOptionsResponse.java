// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies the metadata options for running a transfer.
 * 
 */
public final class MetadataOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetadataOptionsResponse Empty = new MetadataOptionsResponse();

    /**
     * Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    @Import(name="acl", required=true)
    private String acl;

    /**
     * @return Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    public String acl() {
        return this.acl;
    }

    /**
     * Specifies how each file&#39;s GID attribute should be handled by the transfer. If unspecified, the default behavior is the same as GID_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="gid", required=true)
    private String gid;

    /**
     * @return Specifies how each file&#39;s GID attribute should be handled by the transfer. If unspecified, the default behavior is the same as GID_SKIP when the source is a POSIX file system.
     * 
     */
    public String gid() {
        return this.gid;
    }

    /**
     * Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    @Import(name="kmsKey", required=true)
    private String kmsKey;

    /**
     * @return Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    public String kmsKey() {
        return this.kmsKey;
    }

    /**
     * Specifies how each file&#39;s mode attribute should be handled by the transfer. If unspecified, the default behavior is the same as MODE_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    /**
     * @return Specifies how each file&#39;s mode attribute should be handled by the transfer. If unspecified, the default behavior is the same as MODE_SKIP when the source is a POSIX file system.
     * 
     */
    public String mode() {
        return this.mode;
    }

    /**
     * Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    @Import(name="storageClass", required=true)
    private String storageClass;

    /**
     * @return Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
     * 
     */
    public String storageClass() {
        return this.storageClass;
    }

    /**
     * Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior is the same as SYMLINK_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="symlink", required=true)
    private String symlink;

    /**
     * @return Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior is the same as SYMLINK_SKIP when the source is a POSIX file system.
     * 
     */
    public String symlink() {
        return this.symlink;
    }

    /**
     * Specifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
     * 
     */
    @Import(name="temporaryHold", required=true)
    private String temporaryHold;

    /**
     * @return Specifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
     * 
     */
    public String temporaryHold() {
        return this.temporaryHold;
    }

    /**
     * Specifies how each file&#39;s UID attribute should be handled by the transfer. If unspecified, the default behavior is the same as UID_SKIP when the source is a POSIX file system.
     * 
     */
    @Import(name="uid", required=true)
    private String uid;

    /**
     * @return Specifies how each file&#39;s UID attribute should be handled by the transfer. If unspecified, the default behavior is the same as UID_SKIP when the source is a POSIX file system.
     * 
     */
    public String uid() {
        return this.uid;
    }

    private MetadataOptionsResponse() {}

    private MetadataOptionsResponse(MetadataOptionsResponse $) {
        this.acl = $.acl;
        this.gid = $.gid;
        this.kmsKey = $.kmsKey;
        this.mode = $.mode;
        this.storageClass = $.storageClass;
        this.symlink = $.symlink;
        this.temporaryHold = $.temporaryHold;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetadataOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetadataOptionsResponse $;

        public Builder() {
            $ = new MetadataOptionsResponse();
        }

        public Builder(MetadataOptionsResponse defaults) {
            $ = new MetadataOptionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder acl(String acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param gid Specifies how each file&#39;s GID attribute should be handled by the transfer. If unspecified, the default behavior is the same as GID_SKIP when the source is a POSIX file system.
         * 
         * @return builder
         * 
         */
        public Builder gid(String gid) {
            $.gid = gid;
            return this;
        }

        /**
         * @param kmsKey Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param mode Specifies how each file&#39;s mode attribute should be handled by the transfer. If unspecified, the default behavior is the same as MODE_SKIP when the source is a POSIX file system.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param storageClass Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param symlink Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior is the same as SYMLINK_SKIP when the source is a POSIX file system.
         * 
         * @return builder
         * 
         */
        public Builder symlink(String symlink) {
            $.symlink = symlink;
            return this;
        }

        /**
         * @param temporaryHold Specifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
         * 
         * @return builder
         * 
         */
        public Builder temporaryHold(String temporaryHold) {
            $.temporaryHold = temporaryHold;
            return this;
        }

        /**
         * @param uid Specifies how each file&#39;s UID attribute should be handled by the transfer. If unspecified, the default behavior is the same as UID_SKIP when the source is a POSIX file system.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            $.uid = uid;
            return this;
        }

        public MetadataOptionsResponse build() {
            $.acl = Objects.requireNonNull($.acl, "expected parameter 'acl' to be non-null");
            $.gid = Objects.requireNonNull($.gid, "expected parameter 'gid' to be non-null");
            $.kmsKey = Objects.requireNonNull($.kmsKey, "expected parameter 'kmsKey' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.storageClass = Objects.requireNonNull($.storageClass, "expected parameter 'storageClass' to be non-null");
            $.symlink = Objects.requireNonNull($.symlink, "expected parameter 'symlink' to be non-null");
            $.temporaryHold = Objects.requireNonNull($.temporaryHold, "expected parameter 'temporaryHold' to be non-null");
            $.uid = Objects.requireNonNull($.uid, "expected parameter 'uid' to be non-null");
            return $;
        }
    }

}
