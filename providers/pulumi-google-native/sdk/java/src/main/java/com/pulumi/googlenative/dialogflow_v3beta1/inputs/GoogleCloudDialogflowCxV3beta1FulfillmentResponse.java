// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse;
import com.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse;
import com.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1ResponseMessageResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page&#39;s entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.
 * 
 */
public final class GoogleCloudDialogflowCxV3beta1FulfillmentResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3beta1FulfillmentResponse Empty = new GoogleCloudDialogflowCxV3beta1FulfillmentResponse();

    /**
     * Conditional cases for this fulfillment.
     * 
     */
    @Import(name="conditionalCases", required=true)
    private List<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse> conditionalCases;

    /**
     * @return Conditional cases for this fulfillment.
     * 
     */
    public List<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse> conditionalCases() {
        return this.conditionalCases;
    }

    /**
     * The list of rich message responses to present to the user.
     * 
     */
    @Import(name="messages", required=true)
    private List<GoogleCloudDialogflowCxV3beta1ResponseMessageResponse> messages;

    /**
     * @return The list of rich message responses to present to the user.
     * 
     */
    public List<GoogleCloudDialogflowCxV3beta1ResponseMessageResponse> messages() {
        return this.messages;
    }

    /**
     * Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
     * 
     */
    @Import(name="returnPartialResponses", required=true)
    private Boolean returnPartialResponses;

    /**
     * @return Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
     * 
     */
    public Boolean returnPartialResponses() {
        return this.returnPartialResponses;
    }

    /**
     * Set parameter values before executing the webhook.
     * 
     */
    @Import(name="setParameterActions", required=true)
    private List<GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse> setParameterActions;

    /**
     * @return Set parameter values before executing the webhook.
     * 
     */
    public List<GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse> setParameterActions() {
        return this.setParameterActions;
    }

    /**
     * The tag used by the webhook to identify which fulfillment is being called. This field is required if `webhook` is specified.
     * 
     */
    @Import(name="tag", required=true)
    private String tag;

    /**
     * @return The tag used by the webhook to identify which fulfillment is being called. This field is required if `webhook` is specified.
     * 
     */
    public String tag() {
        return this.tag;
    }

    /**
     * The webhook to call. Format: `projects//locations//agents//webhooks/`.
     * 
     */
    @Import(name="webhook", required=true)
    private String webhook;

    /**
     * @return The webhook to call. Format: `projects//locations//agents//webhooks/`.
     * 
     */
    public String webhook() {
        return this.webhook;
    }

    private GoogleCloudDialogflowCxV3beta1FulfillmentResponse() {}

    private GoogleCloudDialogflowCxV3beta1FulfillmentResponse(GoogleCloudDialogflowCxV3beta1FulfillmentResponse $) {
        this.conditionalCases = $.conditionalCases;
        this.messages = $.messages;
        this.returnPartialResponses = $.returnPartialResponses;
        this.setParameterActions = $.setParameterActions;
        this.tag = $.tag;
        this.webhook = $.webhook;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3beta1FulfillmentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3beta1FulfillmentResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3beta1FulfillmentResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3beta1FulfillmentResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3beta1FulfillmentResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionalCases Conditional cases for this fulfillment.
         * 
         * @return builder
         * 
         */
        public Builder conditionalCases(List<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse> conditionalCases) {
            $.conditionalCases = conditionalCases;
            return this;
        }

        /**
         * @param conditionalCases Conditional cases for this fulfillment.
         * 
         * @return builder
         * 
         */
        public Builder conditionalCases(GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse... conditionalCases) {
            return conditionalCases(List.of(conditionalCases));
        }

        /**
         * @param messages The list of rich message responses to present to the user.
         * 
         * @return builder
         * 
         */
        public Builder messages(List<GoogleCloudDialogflowCxV3beta1ResponseMessageResponse> messages) {
            $.messages = messages;
            return this;
        }

        /**
         * @param messages The list of rich message responses to present to the user.
         * 
         * @return builder
         * 
         */
        public Builder messages(GoogleCloudDialogflowCxV3beta1ResponseMessageResponse... messages) {
            return messages(List.of(messages));
        }

        /**
         * @param returnPartialResponses Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
         * 
         * @return builder
         * 
         */
        public Builder returnPartialResponses(Boolean returnPartialResponses) {
            $.returnPartialResponses = returnPartialResponses;
            return this;
        }

        /**
         * @param setParameterActions Set parameter values before executing the webhook.
         * 
         * @return builder
         * 
         */
        public Builder setParameterActions(List<GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse> setParameterActions) {
            $.setParameterActions = setParameterActions;
            return this;
        }

        /**
         * @param setParameterActions Set parameter values before executing the webhook.
         * 
         * @return builder
         * 
         */
        public Builder setParameterActions(GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse... setParameterActions) {
            return setParameterActions(List.of(setParameterActions));
        }

        /**
         * @param tag The tag used by the webhook to identify which fulfillment is being called. This field is required if `webhook` is specified.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param webhook The webhook to call. Format: `projects//locations//agents//webhooks/`.
         * 
         * @return builder
         * 
         */
        public Builder webhook(String webhook) {
            $.webhook = webhook;
            return this;
        }

        public GoogleCloudDialogflowCxV3beta1FulfillmentResponse build() {
            $.conditionalCases = Objects.requireNonNull($.conditionalCases, "expected parameter 'conditionalCases' to be non-null");
            $.messages = Objects.requireNonNull($.messages, "expected parameter 'messages' to be non-null");
            $.returnPartialResponses = Objects.requireNonNull($.returnPartialResponses, "expected parameter 'returnPartialResponses' to be non-null");
            $.setParameterActions = Objects.requireNonNull($.setParameterActions, "expected parameter 'setParameterActions' to be non-null");
            $.tag = Objects.requireNonNull($.tag, "expected parameter 'tag' to be non-null");
            $.webhook = Objects.requireNonNull($.webhook, "expected parameter 'webhook' to be non-null");
            return $;
        }
    }

}
