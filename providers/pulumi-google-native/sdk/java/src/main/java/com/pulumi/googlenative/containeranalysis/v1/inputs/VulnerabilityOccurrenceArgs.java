// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1.enums.VulnerabilityOccurrenceEffectiveSeverity;
import com.pulumi.googlenative.containeranalysis.v1.inputs.CVSSArgs;
import com.pulumi.googlenative.containeranalysis.v1.inputs.PackageIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An occurrence of a severity vulnerability on a resource.
 * 
 */
public final class VulnerabilityOccurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityOccurrenceArgs Empty = new VulnerabilityOccurrenceArgs();

    /**
     * The cvss v3 score for the vulnerability.
     * 
     */
    @Import(name="cvssv3")
    private @Nullable Output<CVSSArgs> cvssv3;

    /**
     * @return The cvss v3 score for the vulnerability.
     * 
     */
    public Optional<Output<CVSSArgs>> cvssv3() {
        return Optional.ofNullable(this.cvssv3);
    }

    /**
     * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity")
    private @Nullable Output<VulnerabilityOccurrenceEffectiveSeverity> effectiveSeverity;

    /**
     * @return The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    public Optional<Output<VulnerabilityOccurrenceEffectiveSeverity>> effectiveSeverity() {
        return Optional.ofNullable(this.effectiveSeverity);
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
    private Output<List<PackageIssueArgs>> packageIssue;

    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    public Output<List<PackageIssueArgs>> packageIssue() {
        return this.packageIssue;
    }

    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private VulnerabilityOccurrenceArgs() {}

    private VulnerabilityOccurrenceArgs(VulnerabilityOccurrenceArgs $) {
        this.cvssv3 = $.cvssv3;
        this.effectiveSeverity = $.effectiveSeverity;
        this.packageIssue = $.packageIssue;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityOccurrenceArgs $;

        public Builder() {
            $ = new VulnerabilityOccurrenceArgs();
        }

        public Builder(VulnerabilityOccurrenceArgs defaults) {
            $ = new VulnerabilityOccurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cvssv3 The cvss v3 score for the vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder cvssv3(@Nullable Output<CVSSArgs> cvssv3) {
            $.cvssv3 = cvssv3;
            return this;
        }

        /**
         * @param cvssv3 The cvss v3 score for the vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder cvssv3(CVSSArgs cvssv3) {
            return cvssv3(Output.of(cvssv3));
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(@Nullable Output<VulnerabilityOccurrenceEffectiveSeverity> effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(VulnerabilityOccurrenceEffectiveSeverity effectiveSeverity) {
            return effectiveSeverity(Output.of(effectiveSeverity));
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(Output<List<PackageIssueArgs>> packageIssue) {
            $.packageIssue = packageIssue;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(List<PackageIssueArgs> packageIssue) {
            return packageIssue(Output.of(packageIssue));
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(PackageIssueArgs... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }

        /**
         * @param type The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VulnerabilityOccurrenceArgs build() {
            $.packageIssue = Objects.requireNonNull($.packageIssue, "expected parameter 'packageIssue' to be non-null");
            return $;
        }
    }

}
