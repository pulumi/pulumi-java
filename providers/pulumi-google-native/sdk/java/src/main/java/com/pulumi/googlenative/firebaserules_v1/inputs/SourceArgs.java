// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebaserules_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.firebaserules_v1.inputs.FileArgs;
import java.util.List;
import java.util.Objects;


/**
 * `Source` is one or more `File` messages comprising a logical set of rules.
 * 
 */
public final class SourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceArgs Empty = new SourceArgs();

    /**
     * `File` set constituting the `Source` bundle.
     * 
     */
    @Import(name="files", required=true)
      private final Output<List<FileArgs>> files;

    public Output<List<FileArgs>> files() {
        return this.files;
    }

    public SourceArgs(Output<List<FileArgs>> files) {
        this.files = Objects.requireNonNull(files, "expected parameter 'files' to be non-null");
    }

    private SourceArgs() {
        this.files = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<FileArgs>> files;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.files = defaults.files;
        }

        public Builder files(Output<List<FileArgs>> files) {
            this.files = Objects.requireNonNull(files);
            return this;
        }
        public Builder files(List<FileArgs> files) {
            this.files = Output.of(Objects.requireNonNull(files));
            return this;
        }
        public Builder files(FileArgs... files) {
            return files(List.of(files));
        }        public SourceArgs build() {
            return new SourceArgs(files);
        }
    }
}
