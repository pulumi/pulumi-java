// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.inputs.WidgetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.
 * 
 */
public final class GridLayoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final GridLayoutArgs Empty = new GridLayoutArgs();

    /**
     * The number of columns into which the view&#39;s width is divided. If omitted or set to zero, a system default will be used while rendering.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<String> columns;

    /**
     * @return The number of columns into which the view&#39;s width is divided. If omitted or set to zero, a system default will be used while rendering.
     * 
     */
    public Optional<Output<String>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * The informational elements that are arranged into the columns row-first.
     * 
     */
    @Import(name="widgets")
    private @Nullable Output<List<WidgetArgs>> widgets;

    /**
     * @return The informational elements that are arranged into the columns row-first.
     * 
     */
    public Optional<Output<List<WidgetArgs>>> widgets() {
        return Optional.ofNullable(this.widgets);
    }

    private GridLayoutArgs() {}

    private GridLayoutArgs(GridLayoutArgs $) {
        this.columns = $.columns;
        this.widgets = $.widgets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GridLayoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GridLayoutArgs $;

        public Builder() {
            $ = new GridLayoutArgs();
        }

        public Builder(GridLayoutArgs defaults) {
            $ = new GridLayoutArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns The number of columns into which the view&#39;s width is divided. If omitted or set to zero, a system default will be used while rendering.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<String> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns The number of columns into which the view&#39;s width is divided. If omitted or set to zero, a system default will be used while rendering.
         * 
         * @return builder
         * 
         */
        public Builder columns(String columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param widgets The informational elements that are arranged into the columns row-first.
         * 
         * @return builder
         * 
         */
        public Builder widgets(@Nullable Output<List<WidgetArgs>> widgets) {
            $.widgets = widgets;
            return this;
        }

        /**
         * @param widgets The informational elements that are arranged into the columns row-first.
         * 
         * @return builder
         * 
         */
        public Builder widgets(List<WidgetArgs> widgets) {
            return widgets(Output.of(widgets));
        }

        /**
         * @param widgets The informational elements that are arranged into the columns row-first.
         * 
         * @return builder
         * 
         */
        public Builder widgets(WidgetArgs... widgets) {
            return widgets(List.of(widgets));
        }

        public GridLayoutArgs build() {
            return $;
        }
    }

}
