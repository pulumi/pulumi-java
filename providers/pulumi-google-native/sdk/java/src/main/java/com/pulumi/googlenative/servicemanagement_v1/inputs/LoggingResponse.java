// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.LoggingDestinationResponse;
import java.util.List;
import java.util.Objects;


/**
 * Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
 * 
 */
public final class LoggingResponse extends com.pulumi.resources.InvokeArgs {

    public static final LoggingResponse Empty = new LoggingResponse();

    /**
     * Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
     * 
     */
    @Import(name="consumerDestinations", required=true)
    private List<LoggingDestinationResponse> consumerDestinations;

    /**
     * @return Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
     * 
     */
    public List<LoggingDestinationResponse> consumerDestinations() {
        return this.consumerDestinations;
    }

    /**
     * Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
     * 
     */
    @Import(name="producerDestinations", required=true)
    private List<LoggingDestinationResponse> producerDestinations;

    /**
     * @return Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
     * 
     */
    public List<LoggingDestinationResponse> producerDestinations() {
        return this.producerDestinations;
    }

    private LoggingResponse() {}

    private LoggingResponse(LoggingResponse $) {
        this.consumerDestinations = $.consumerDestinations;
        this.producerDestinations = $.producerDestinations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingResponse $;

        public Builder() {
            $ = new LoggingResponse();
        }

        public Builder(LoggingResponse defaults) {
            $ = new LoggingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerDestinations Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
         * 
         * @return builder
         * 
         */
        public Builder consumerDestinations(List<LoggingDestinationResponse> consumerDestinations) {
            $.consumerDestinations = consumerDestinations;
            return this;
        }

        /**
         * @param consumerDestinations Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
         * 
         * @return builder
         * 
         */
        public Builder consumerDestinations(LoggingDestinationResponse... consumerDestinations) {
            return consumerDestinations(List.of(consumerDestinations));
        }

        /**
         * @param producerDestinations Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
         * 
         * @return builder
         * 
         */
        public Builder producerDestinations(List<LoggingDestinationResponse> producerDestinations) {
            $.producerDestinations = producerDestinations;
            return this;
        }

        /**
         * @param producerDestinations Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
         * 
         * @return builder
         * 
         */
        public Builder producerDestinations(LoggingDestinationResponse... producerDestinations) {
            return producerDestinations(List.of(producerDestinations));
        }

        public LoggingResponse build() {
            $.consumerDestinations = Objects.requireNonNull($.consumerDestinations, "expected parameter 'consumerDestinations' to be non-null");
            $.producerDestinations = Objects.requireNonNull($.producerDestinations, "expected parameter 'producerDestinations' to be non-null");
            return $;
        }
    }

}
