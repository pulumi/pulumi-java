// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.CloudRunConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.ConfigConnectorConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.DnsCacheConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.GcePersistentDiskCsiDriverConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.GcpFilestoreCsiDriverConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.HorizontalPodAutoscalingResponse;
import com.pulumi.googlenative.container_v1.inputs.HttpLoadBalancingResponse;
import com.pulumi.googlenative.container_v1.inputs.KubernetesDashboardResponse;
import com.pulumi.googlenative.container_v1.inputs.NetworkPolicyConfigResponse;
import java.util.Objects;


/**
 * Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
 * 
 */
public final class AddonsConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final AddonsConfigResponse Empty = new AddonsConfigResponse();

    /**
     * Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
     * 
     */
    @Import(name="cloudRunConfig", required=true)
    private CloudRunConfigResponse cloudRunConfig;

    /**
     * @return Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
     * 
     */
    public CloudRunConfigResponse cloudRunConfig() {
        return this.cloudRunConfig;
    }

    /**
     * Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
     * 
     */
    @Import(name="configConnectorConfig", required=true)
    private ConfigConnectorConfigResponse configConnectorConfig;

    /**
     * @return Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
     * 
     */
    public ConfigConnectorConfigResponse configConnectorConfig() {
        return this.configConnectorConfig;
    }

    /**
     * Configuration for NodeLocalDNS, a dns cache running on cluster nodes
     * 
     */
    @Import(name="dnsCacheConfig", required=true)
    private DnsCacheConfigResponse dnsCacheConfig;

    /**
     * @return Configuration for NodeLocalDNS, a dns cache running on cluster nodes
     * 
     */
    public DnsCacheConfigResponse dnsCacheConfig() {
        return this.dnsCacheConfig;
    }

    /**
     * Configuration for the Compute Engine Persistent Disk CSI driver.
     * 
     */
    @Import(name="gcePersistentDiskCsiDriverConfig", required=true)
    private GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig;

    /**
     * @return Configuration for the Compute Engine Persistent Disk CSI driver.
     * 
     */
    public GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig() {
        return this.gcePersistentDiskCsiDriverConfig;
    }

    /**
     * Configuration for the GCP Filestore CSI driver.
     * 
     */
    @Import(name="gcpFilestoreCsiDriverConfig", required=true)
    private GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig;

    /**
     * @return Configuration for the GCP Filestore CSI driver.
     * 
     */
    public GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig() {
        return this.gcpFilestoreCsiDriverConfig;
    }

    /**
     * Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
     * 
     */
    @Import(name="horizontalPodAutoscaling", required=true)
    private HorizontalPodAutoscalingResponse horizontalPodAutoscaling;

    /**
     * @return Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
     * 
     */
    public HorizontalPodAutoscalingResponse horizontalPodAutoscaling() {
        return this.horizontalPodAutoscaling;
    }

    /**
     * Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
     * 
     */
    @Import(name="httpLoadBalancing", required=true)
    private HttpLoadBalancingResponse httpLoadBalancing;

    /**
     * @return Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
     * 
     */
    public HttpLoadBalancingResponse httpLoadBalancing() {
        return this.httpLoadBalancing;
    }

    /**
     * Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
     * 
     */
    @Import(name="kubernetesDashboard", required=true)
    private KubernetesDashboardResponse kubernetesDashboard;

    /**
     * @return Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
     * 
     */
    public KubernetesDashboardResponse kubernetesDashboard() {
        return this.kubernetesDashboard;
    }

    /**
     * Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
     * 
     */
    @Import(name="networkPolicyConfig", required=true)
    private NetworkPolicyConfigResponse networkPolicyConfig;

    /**
     * @return Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
     * 
     */
    public NetworkPolicyConfigResponse networkPolicyConfig() {
        return this.networkPolicyConfig;
    }

    private AddonsConfigResponse() {}

    private AddonsConfigResponse(AddonsConfigResponse $) {
        this.cloudRunConfig = $.cloudRunConfig;
        this.configConnectorConfig = $.configConnectorConfig;
        this.dnsCacheConfig = $.dnsCacheConfig;
        this.gcePersistentDiskCsiDriverConfig = $.gcePersistentDiskCsiDriverConfig;
        this.gcpFilestoreCsiDriverConfig = $.gcpFilestoreCsiDriverConfig;
        this.horizontalPodAutoscaling = $.horizontalPodAutoscaling;
        this.httpLoadBalancing = $.httpLoadBalancing;
        this.kubernetesDashboard = $.kubernetesDashboard;
        this.networkPolicyConfig = $.networkPolicyConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddonsConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddonsConfigResponse $;

        public Builder() {
            $ = new AddonsConfigResponse();
        }

        public Builder(AddonsConfigResponse defaults) {
            $ = new AddonsConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudRunConfig Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
         * 
         * @return builder
         * 
         */
        public Builder cloudRunConfig(CloudRunConfigResponse cloudRunConfig) {
            $.cloudRunConfig = cloudRunConfig;
            return this;
        }

        /**
         * @param configConnectorConfig Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
         * 
         * @return builder
         * 
         */
        public Builder configConnectorConfig(ConfigConnectorConfigResponse configConnectorConfig) {
            $.configConnectorConfig = configConnectorConfig;
            return this;
        }

        /**
         * @param dnsCacheConfig Configuration for NodeLocalDNS, a dns cache running on cluster nodes
         * 
         * @return builder
         * 
         */
        public Builder dnsCacheConfig(DnsCacheConfigResponse dnsCacheConfig) {
            $.dnsCacheConfig = dnsCacheConfig;
            return this;
        }

        /**
         * @param gcePersistentDiskCsiDriverConfig Configuration for the Compute Engine Persistent Disk CSI driver.
         * 
         * @return builder
         * 
         */
        public Builder gcePersistentDiskCsiDriverConfig(GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig) {
            $.gcePersistentDiskCsiDriverConfig = gcePersistentDiskCsiDriverConfig;
            return this;
        }

        /**
         * @param gcpFilestoreCsiDriverConfig Configuration for the GCP Filestore CSI driver.
         * 
         * @return builder
         * 
         */
        public Builder gcpFilestoreCsiDriverConfig(GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig) {
            $.gcpFilestoreCsiDriverConfig = gcpFilestoreCsiDriverConfig;
            return this;
        }

        /**
         * @param horizontalPodAutoscaling Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
         * 
         * @return builder
         * 
         */
        public Builder horizontalPodAutoscaling(HorizontalPodAutoscalingResponse horizontalPodAutoscaling) {
            $.horizontalPodAutoscaling = horizontalPodAutoscaling;
            return this;
        }

        /**
         * @param httpLoadBalancing Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
         * 
         * @return builder
         * 
         */
        public Builder httpLoadBalancing(HttpLoadBalancingResponse httpLoadBalancing) {
            $.httpLoadBalancing = httpLoadBalancing;
            return this;
        }

        /**
         * @param kubernetesDashboard Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
         * 
         * @return builder
         * 
         */
        public Builder kubernetesDashboard(KubernetesDashboardResponse kubernetesDashboard) {
            $.kubernetesDashboard = kubernetesDashboard;
            return this;
        }

        /**
         * @param networkPolicyConfig Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
         * 
         * @return builder
         * 
         */
        public Builder networkPolicyConfig(NetworkPolicyConfigResponse networkPolicyConfig) {
            $.networkPolicyConfig = networkPolicyConfig;
            return this;
        }

        public AddonsConfigResponse build() {
            $.cloudRunConfig = Objects.requireNonNull($.cloudRunConfig, "expected parameter 'cloudRunConfig' to be non-null");
            $.configConnectorConfig = Objects.requireNonNull($.configConnectorConfig, "expected parameter 'configConnectorConfig' to be non-null");
            $.dnsCacheConfig = Objects.requireNonNull($.dnsCacheConfig, "expected parameter 'dnsCacheConfig' to be non-null");
            $.gcePersistentDiskCsiDriverConfig = Objects.requireNonNull($.gcePersistentDiskCsiDriverConfig, "expected parameter 'gcePersistentDiskCsiDriverConfig' to be non-null");
            $.gcpFilestoreCsiDriverConfig = Objects.requireNonNull($.gcpFilestoreCsiDriverConfig, "expected parameter 'gcpFilestoreCsiDriverConfig' to be non-null");
            $.horizontalPodAutoscaling = Objects.requireNonNull($.horizontalPodAutoscaling, "expected parameter 'horizontalPodAutoscaling' to be non-null");
            $.httpLoadBalancing = Objects.requireNonNull($.httpLoadBalancing, "expected parameter 'httpLoadBalancing' to be non-null");
            $.kubernetesDashboard = Objects.requireNonNull($.kubernetesDashboard, "expected parameter 'kubernetesDashboard' to be non-null");
            $.networkPolicyConfig = Objects.requireNonNull($.networkPolicyConfig, "expected parameter 'networkPolicyConfig' to be non-null");
            return $;
        }
    }

}
