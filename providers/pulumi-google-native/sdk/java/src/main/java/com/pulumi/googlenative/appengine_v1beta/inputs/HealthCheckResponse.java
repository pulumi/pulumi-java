// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
 * 
 */
public final class HealthCheckResponse extends com.pulumi.resources.InvokeArgs {

    public static final HealthCheckResponse Empty = new HealthCheckResponse();

    /**
     * Interval between health checks.
     * 
     */
    @Import(name="checkInterval", required=true)
    private String checkInterval;

    /**
     * @return Interval between health checks.
     * 
     */
    public String checkInterval() {
        return this.checkInterval;
    }

    /**
     * Whether to explicitly disable health checks for this instance.
     * 
     */
    @Import(name="disableHealthCheck", required=true)
    private Boolean disableHealthCheck;

    /**
     * @return Whether to explicitly disable health checks for this instance.
     * 
     */
    public Boolean disableHealthCheck() {
        return this.disableHealthCheck;
    }

    /**
     * Number of consecutive successful health checks required before receiving traffic.
     * 
     */
    @Import(name="healthyThreshold", required=true)
    private Integer healthyThreshold;

    /**
     * @return Number of consecutive successful health checks required before receiving traffic.
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }

    /**
     * Host header to send when performing an HTTP health check. Example: &#34;myapp.appspot.com&#34;
     * 
     */
    @Import(name="host", required=true)
    private String host;

    /**
     * @return Host header to send when performing an HTTP health check. Example: &#34;myapp.appspot.com&#34;
     * 
     */
    public String host() {
        return this.host;
    }

    /**
     * Number of consecutive failed health checks required before an instance is restarted.
     * 
     */
    @Import(name="restartThreshold", required=true)
    private Integer restartThreshold;

    /**
     * @return Number of consecutive failed health checks required before an instance is restarted.
     * 
     */
    public Integer restartThreshold() {
        return this.restartThreshold;
    }

    /**
     * Time before the health check is considered failed.
     * 
     */
    @Import(name="timeout", required=true)
    private String timeout;

    /**
     * @return Time before the health check is considered failed.
     * 
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Number of consecutive failed health checks required before removing traffic.
     * 
     */
    @Import(name="unhealthyThreshold", required=true)
    private Integer unhealthyThreshold;

    /**
     * @return Number of consecutive failed health checks required before removing traffic.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    private HealthCheckResponse() {}

    private HealthCheckResponse(HealthCheckResponse $) {
        this.checkInterval = $.checkInterval;
        this.disableHealthCheck = $.disableHealthCheck;
        this.healthyThreshold = $.healthyThreshold;
        this.host = $.host;
        this.restartThreshold = $.restartThreshold;
        this.timeout = $.timeout;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthCheckResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthCheckResponse $;

        public Builder() {
            $ = new HealthCheckResponse();
        }

        public Builder(HealthCheckResponse defaults) {
            $ = new HealthCheckResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkInterval Interval between health checks.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(String checkInterval) {
            $.checkInterval = checkInterval;
            return this;
        }

        /**
         * @param disableHealthCheck Whether to explicitly disable health checks for this instance.
         * 
         * @return builder
         * 
         */
        public Builder disableHealthCheck(Boolean disableHealthCheck) {
            $.disableHealthCheck = disableHealthCheck;
            return this;
        }

        /**
         * @param healthyThreshold Number of consecutive successful health checks required before receiving traffic.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param host Host header to send when performing an HTTP health check. Example: &#34;myapp.appspot.com&#34;
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            $.host = host;
            return this;
        }

        /**
         * @param restartThreshold Number of consecutive failed health checks required before an instance is restarted.
         * 
         * @return builder
         * 
         */
        public Builder restartThreshold(Integer restartThreshold) {
            $.restartThreshold = restartThreshold;
            return this;
        }

        /**
         * @param timeout Time before the health check is considered failed.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param unhealthyThreshold Number of consecutive failed health checks required before removing traffic.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        public HealthCheckResponse build() {
            $.checkInterval = Objects.requireNonNull($.checkInterval, "expected parameter 'checkInterval' to be non-null");
            $.disableHealthCheck = Objects.requireNonNull($.disableHealthCheck, "expected parameter 'disableHealthCheck' to be non-null");
            $.healthyThreshold = Objects.requireNonNull($.healthyThreshold, "expected parameter 'healthyThreshold' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.restartThreshold = Objects.requireNonNull($.restartThreshold, "expected parameter 'restartThreshold' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.unhealthyThreshold = Objects.requireNonNull($.unhealthyThreshold, "expected parameter 'unhealthyThreshold' to be non-null");
            return $;
        }
    }

}
