// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
 * 
 */
public final class GooglePrivacyDlpV2PartitionIdResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2PartitionIdResponse Empty = new GooglePrivacyDlpV2PartitionIdResponse();

    /**
     * If not empty, the ID of the namespace to which the entities belong.
     * 
     */
    @Import(name="namespaceId", required=true)
    private String namespaceId;

    /**
     * @return If not empty, the ID of the namespace to which the entities belong.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }

    /**
     * The ID of the project to which the entities belong.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return The ID of the project to which the entities belong.
     * 
     */
    public String project() {
        return this.project;
    }

    private GooglePrivacyDlpV2PartitionIdResponse() {}

    private GooglePrivacyDlpV2PartitionIdResponse(GooglePrivacyDlpV2PartitionIdResponse $) {
        this.namespaceId = $.namespaceId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2PartitionIdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2PartitionIdResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2PartitionIdResponse();
        }

        public Builder(GooglePrivacyDlpV2PartitionIdResponse defaults) {
            $ = new GooglePrivacyDlpV2PartitionIdResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespaceId If not empty, the ID of the namespace to which the entities belong.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param project The ID of the project to which the entities belong.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        public GooglePrivacyDlpV2PartitionIdResponse build() {
            $.namespaceId = Objects.requireNonNull($.namespaceId, "expected parameter 'namespaceId' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
