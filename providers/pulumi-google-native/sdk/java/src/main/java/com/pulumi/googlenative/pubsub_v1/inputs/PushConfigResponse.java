// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.pubsub_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.pubsub_v1.inputs.OidcTokenResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Configuration for a push delivery endpoint.
 * 
 */
public final class PushConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PushConfigResponse Empty = new PushConfigResponse();

    /**
     * Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { &#34;x-goog-version&#34;: &#34;v1&#34; }
     * 
     */
    @Import(name="attributes", required=true)
    private Map<String,String> attributes;

    /**
     * @return Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { &#34;x-goog-version&#34;: &#34;v1&#34; }
     * 
     */
    public Map<String,String> attributes() {
        return this.attributes;
    }

    /**
     * If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
     * 
     */
    @Import(name="oidcToken", required=true)
    private OidcTokenResponse oidcToken;

    /**
     * @return If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
     * 
     */
    public OidcTokenResponse oidcToken() {
        return this.oidcToken;
    }

    /**
     * A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
     * 
     */
    @Import(name="pushEndpoint", required=true)
    private String pushEndpoint;

    /**
     * @return A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
     * 
     */
    public String pushEndpoint() {
        return this.pushEndpoint;
    }

    private PushConfigResponse() {}

    private PushConfigResponse(PushConfigResponse $) {
        this.attributes = $.attributes;
        this.oidcToken = $.oidcToken;
        this.pushEndpoint = $.pushEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushConfigResponse $;

        public Builder() {
            $ = new PushConfigResponse();
        }

        public Builder(PushConfigResponse defaults) {
            $ = new PushConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { &#34;x-goog-version&#34;: &#34;v1&#34; }
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,String> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param oidcToken If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
         * 
         * @return builder
         * 
         */
        public Builder oidcToken(OidcTokenResponse oidcToken) {
            $.oidcToken = oidcToken;
            return this;
        }

        /**
         * @param pushEndpoint A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
         * 
         * @return builder
         * 
         */
        public Builder pushEndpoint(String pushEndpoint) {
            $.pushEndpoint = pushEndpoint;
            return this;
        }

        public PushConfigResponse build() {
            $.attributes = Objects.requireNonNull($.attributes, "expected parameter 'attributes' to be non-null");
            $.oidcToken = Objects.requireNonNull($.oidcToken, "expected parameter 'oidcToken' to be non-null");
            $.pushEndpoint = Objects.requireNonNull($.pushEndpoint, "expected parameter 'pushEndpoint' to be non-null");
            return $;
        }
    }

}
