// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.PackageIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details of a vulnerability Occurrence.
 * 
 */
public final class GrafeasV1beta1VulnerabilityDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrafeasV1beta1VulnerabilityDetailsArgs Empty = new GrafeasV1beta1VulnerabilityDetailsArgs();

    /**
     * The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity")
    private @Nullable Output<GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity> effectiveSeverity;

    /**
     * @return The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    public Optional<Output<GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity>> effectiveSeverity() {
        return Optional.ofNullable(this.effectiveSeverity);
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
    private Output<List<PackageIssueArgs>> packageIssue;

    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    public Output<List<PackageIssueArgs>> packageIssue() {
        return this.packageIssue;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc)
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of package; whether native or non native(ruby gems, node.js packages etc)
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GrafeasV1beta1VulnerabilityDetailsArgs() {}

    private GrafeasV1beta1VulnerabilityDetailsArgs(GrafeasV1beta1VulnerabilityDetailsArgs $) {
        this.effectiveSeverity = $.effectiveSeverity;
        this.packageIssue = $.packageIssue;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrafeasV1beta1VulnerabilityDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrafeasV1beta1VulnerabilityDetailsArgs $;

        public Builder() {
            $ = new GrafeasV1beta1VulnerabilityDetailsArgs();
        }

        public Builder(GrafeasV1beta1VulnerabilityDetailsArgs defaults) {
            $ = new GrafeasV1beta1VulnerabilityDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(@Nullable Output<GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity> effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity effectiveSeverity) {
            return effectiveSeverity(Output.of(effectiveSeverity));
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(Output<List<PackageIssueArgs>> packageIssue) {
            $.packageIssue = packageIssue;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(List<PackageIssueArgs> packageIssue) {
            return packageIssue(Output.of(packageIssue));
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(PackageIssueArgs... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }

        /**
         * @param type The type of package; whether native or non native(ruby gems, node.js packages etc)
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of package; whether native or non native(ruby gems, node.js packages etc)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GrafeasV1beta1VulnerabilityDetailsArgs build() {
            $.packageIssue = Objects.requireNonNull($.packageIssue, "expected parameter 'packageIssue' to be non-null");
            return $;
        }
    }

}
