// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.ml.v1.inputs.GoogleCloudMlV1__AcceleratorConfigArgs;
import com.pulumi.googlenative.ml.v1.inputs.GoogleCloudMlV1__DiskConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents the configuration for a replica in a cluster.
 * 
 */
public final class GoogleCloudMlV1__ReplicaConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__ReplicaConfigArgs Empty = new GoogleCloudMlV1__ReplicaConfigArgs();

    /**
     * Represents the type and number of accelerators used by the replica. [Learn about restrictions on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-engine-machine-types-with-gpu)
     * 
     */
    @Import(name="acceleratorConfig")
    private @Nullable Output<GoogleCloudMlV1__AcceleratorConfigArgs> acceleratorConfig;

    /**
     * @return Represents the type and number of accelerators used by the replica. [Learn about restrictions on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-engine-machine-types-with-gpu)
     * 
     */
    public Optional<Output<GoogleCloudMlV1__AcceleratorConfigArgs>> acceleratorConfig() {
        return Optional.ofNullable(this.acceleratorConfig);
    }

    /**
     * Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
     * 
     */
    @Import(name="containerArgs")
    private @Nullable Output<List<String>> containerArgs;

    /**
     * @return Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
     * 
     */
    public Optional<Output<List<String>>> containerArgs() {
        return Optional.ofNullable(this.containerArgs);
    }

    /**
     * The command with which the replica&#39;s custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image&#39;s ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
     * 
     */
    @Import(name="containerCommand")
    private @Nullable Output<List<String>> containerCommand;

    /**
     * @return The command with which the replica&#39;s custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image&#39;s ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
     * 
     */
    public Optional<Output<List<String>>> containerCommand() {
        return Optional.ofNullable(this.containerCommand);
    }

    /**
     * Represents the configuration of disk options.
     * 
     */
    @Import(name="diskConfig")
    private @Nullable Output<GoogleCloudMlV1__DiskConfigArgs> diskConfig;

    /**
     * @return Represents the configuration of disk options.
     * 
     */
    public Optional<Output<GoogleCloudMlV1__DiskConfigArgs>> diskConfig() {
        return Optional.ofNullable(this.diskConfig);
    }

    /**
     * The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    /**
     * @return The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).
     * 
     */
    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    /**
     * The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.
     * 
     */
    @Import(name="tpuTfVersion")
    private @Nullable Output<String> tpuTfVersion;

    /**
     * @return The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.
     * 
     */
    public Optional<Output<String>> tpuTfVersion() {
        return Optional.ofNullable(this.tpuTfVersion);
    }

    private GoogleCloudMlV1__ReplicaConfigArgs() {}

    private GoogleCloudMlV1__ReplicaConfigArgs(GoogleCloudMlV1__ReplicaConfigArgs $) {
        this.acceleratorConfig = $.acceleratorConfig;
        this.containerArgs = $.containerArgs;
        this.containerCommand = $.containerCommand;
        this.diskConfig = $.diskConfig;
        this.imageUri = $.imageUri;
        this.tpuTfVersion = $.tpuTfVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1__ReplicaConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__ReplicaConfigArgs $;

        public Builder() {
            $ = new GoogleCloudMlV1__ReplicaConfigArgs();
        }

        public Builder(GoogleCloudMlV1__ReplicaConfigArgs defaults) {
            $ = new GoogleCloudMlV1__ReplicaConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorConfig Represents the type and number of accelerators used by the replica. [Learn about restrictions on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-engine-machine-types-with-gpu)
         * 
         * @return builder
         * 
         */
        public Builder acceleratorConfig(@Nullable Output<GoogleCloudMlV1__AcceleratorConfigArgs> acceleratorConfig) {
            $.acceleratorConfig = acceleratorConfig;
            return this;
        }

        /**
         * @param acceleratorConfig Represents the type and number of accelerators used by the replica. [Learn about restrictions on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-engine-machine-types-with-gpu)
         * 
         * @return builder
         * 
         */
        public Builder acceleratorConfig(GoogleCloudMlV1__AcceleratorConfigArgs acceleratorConfig) {
            return acceleratorConfig(Output.of(acceleratorConfig));
        }

        /**
         * @param containerArgs Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
         * 
         * @return builder
         * 
         */
        public Builder containerArgs(@Nullable Output<List<String>> containerArgs) {
            $.containerArgs = containerArgs;
            return this;
        }

        /**
         * @param containerArgs Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
         * 
         * @return builder
         * 
         */
        public Builder containerArgs(List<String> containerArgs) {
            return containerArgs(Output.of(containerArgs));
        }

        /**
         * @param containerArgs Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
         * 
         * @return builder
         * 
         */
        public Builder containerArgs(String... containerArgs) {
            return containerArgs(List.of(containerArgs));
        }

        /**
         * @param containerCommand The command with which the replica&#39;s custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image&#39;s ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
         * 
         * @return builder
         * 
         */
        public Builder containerCommand(@Nullable Output<List<String>> containerCommand) {
            $.containerCommand = containerCommand;
            return this;
        }

        /**
         * @param containerCommand The command with which the replica&#39;s custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image&#39;s ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
         * 
         * @return builder
         * 
         */
        public Builder containerCommand(List<String> containerCommand) {
            return containerCommand(Output.of(containerCommand));
        }

        /**
         * @param containerCommand The command with which the replica&#39;s custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image&#39;s ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
         * 
         * @return builder
         * 
         */
        public Builder containerCommand(String... containerCommand) {
            return containerCommand(List.of(containerCommand));
        }

        /**
         * @param diskConfig Represents the configuration of disk options.
         * 
         * @return builder
         * 
         */
        public Builder diskConfig(@Nullable Output<GoogleCloudMlV1__DiskConfigArgs> diskConfig) {
            $.diskConfig = diskConfig;
            return this;
        }

        /**
         * @param diskConfig Represents the configuration of disk options.
         * 
         * @return builder
         * 
         */
        public Builder diskConfig(GoogleCloudMlV1__DiskConfigArgs diskConfig) {
            return diskConfig(Output.of(diskConfig));
        }

        /**
         * @param imageUri The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).
         * 
         * @return builder
         * 
         */
        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        /**
         * @param imageUri The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).
         * 
         * @return builder
         * 
         */
        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        /**
         * @param tpuTfVersion The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.
         * 
         * @return builder
         * 
         */
        public Builder tpuTfVersion(@Nullable Output<String> tpuTfVersion) {
            $.tpuTfVersion = tpuTfVersion;
            return this;
        }

        /**
         * @param tpuTfVersion The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.
         * 
         * @return builder
         * 
         */
        public Builder tpuTfVersion(String tpuTfVersion) {
            return tpuTfVersion(Output.of(tpuTfVersion));
        }

        public GoogleCloudMlV1__ReplicaConfigArgs build() {
            return $;
        }
    }

}
