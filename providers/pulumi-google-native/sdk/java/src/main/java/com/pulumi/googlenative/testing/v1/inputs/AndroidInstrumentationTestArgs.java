// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing.v1.enums.AndroidInstrumentationTestOrchestratorOption;
import com.pulumi.googlenative.testing.v1.inputs.AppBundleArgs;
import com.pulumi.googlenative.testing.v1.inputs.FileReferenceArgs;
import com.pulumi.googlenative.testing.v1.inputs.ShardingOptionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final AndroidInstrumentationTestArgs Empty = new AndroidInstrumentationTestArgs();

    /**
     * The APK for the application under test.
     * 
     */
    @Import(name="appApk")
    private @Nullable Output<FileReferenceArgs> appApk;

    /**
     * @return The APK for the application under test.
     * 
     */
    public Optional<Output<FileReferenceArgs>> appApk() {
        return Optional.ofNullable(this.appApk);
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @Import(name="appBundle")
    private @Nullable Output<AppBundleArgs> appBundle;

    /**
     * @return A multi-apk app bundle for the application under test.
     * 
     */
    public Optional<Output<AppBundleArgs>> appBundle() {
        return Optional.ofNullable(this.appBundle);
    }

    /**
     * The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="appPackageId")
    private @Nullable Output<String> appPackageId;

    /**
     * @return The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    public Optional<Output<String>> appPackageId() {
        return Optional.ofNullable(this.appPackageId);
    }

    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    @Import(name="orchestratorOption")
    private @Nullable Output<AndroidInstrumentationTestOrchestratorOption> orchestratorOption;

    /**
     * @return The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    public Optional<Output<AndroidInstrumentationTestOrchestratorOption>> orchestratorOption() {
        return Optional.ofNullable(this.orchestratorOption);
    }

    /**
     * The option to run tests in multiple shards in parallel.
     * 
     */
    @Import(name="shardingOption")
    private @Nullable Output<ShardingOptionArgs> shardingOption;

    /**
     * @return The option to run tests in multiple shards in parallel.
     * 
     */
    public Optional<Output<ShardingOptionArgs>> shardingOption() {
        return Optional.ofNullable(this.shardingOption);
    }

    /**
     * The APK containing the test code to be executed.
     * 
     */
    @Import(name="testApk", required=true)
    private Output<FileReferenceArgs> testApk;

    /**
     * @return The APK containing the test code to be executed.
     * 
     */
    public Output<FileReferenceArgs> testApk() {
        return this.testApk;
    }

    /**
     * The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="testPackageId")
    private @Nullable Output<String> testPackageId;

    /**
     * @return The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    public Optional<Output<String>> testPackageId() {
        return Optional.ofNullable(this.testPackageId);
    }

    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="testRunnerClass")
    private @Nullable Output<String> testRunnerClass;

    /**
     * @return The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    public Optional<Output<String>> testRunnerClass() {
        return Optional.ofNullable(this.testRunnerClass);
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
     * 
     */
    @Import(name="testTargets")
    private @Nullable Output<List<String>> testTargets;

    /**
     * @return Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
     * 
     */
    public Optional<Output<List<String>>> testTargets() {
        return Optional.ofNullable(this.testTargets);
    }

    private AndroidInstrumentationTestArgs() {}

    private AndroidInstrumentationTestArgs(AndroidInstrumentationTestArgs $) {
        this.appApk = $.appApk;
        this.appBundle = $.appBundle;
        this.appPackageId = $.appPackageId;
        this.orchestratorOption = $.orchestratorOption;
        this.shardingOption = $.shardingOption;
        this.testApk = $.testApk;
        this.testPackageId = $.testPackageId;
        this.testRunnerClass = $.testRunnerClass;
        this.testTargets = $.testTargets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidInstrumentationTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidInstrumentationTestArgs $;

        public Builder() {
            $ = new AndroidInstrumentationTestArgs();
        }

        public Builder(AndroidInstrumentationTestArgs defaults) {
            $ = new AndroidInstrumentationTestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appApk The APK for the application under test.
         * 
         * @return builder
         * 
         */
        public Builder appApk(@Nullable Output<FileReferenceArgs> appApk) {
            $.appApk = appApk;
            return this;
        }

        /**
         * @param appApk The APK for the application under test.
         * 
         * @return builder
         * 
         */
        public Builder appApk(FileReferenceArgs appApk) {
            return appApk(Output.of(appApk));
        }

        /**
         * @param appBundle A multi-apk app bundle for the application under test.
         * 
         * @return builder
         * 
         */
        public Builder appBundle(@Nullable Output<AppBundleArgs> appBundle) {
            $.appBundle = appBundle;
            return this;
        }

        /**
         * @param appBundle A multi-apk app bundle for the application under test.
         * 
         * @return builder
         * 
         */
        public Builder appBundle(AppBundleArgs appBundle) {
            return appBundle(Output.of(appBundle));
        }

        /**
         * @param appPackageId The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder appPackageId(@Nullable Output<String> appPackageId) {
            $.appPackageId = appPackageId;
            return this;
        }

        /**
         * @param appPackageId The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder appPackageId(String appPackageId) {
            return appPackageId(Output.of(appPackageId));
        }

        /**
         * @param orchestratorOption The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder orchestratorOption(@Nullable Output<AndroidInstrumentationTestOrchestratorOption> orchestratorOption) {
            $.orchestratorOption = orchestratorOption;
            return this;
        }

        /**
         * @param orchestratorOption The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder orchestratorOption(AndroidInstrumentationTestOrchestratorOption orchestratorOption) {
            return orchestratorOption(Output.of(orchestratorOption));
        }

        /**
         * @param shardingOption The option to run tests in multiple shards in parallel.
         * 
         * @return builder
         * 
         */
        public Builder shardingOption(@Nullable Output<ShardingOptionArgs> shardingOption) {
            $.shardingOption = shardingOption;
            return this;
        }

        /**
         * @param shardingOption The option to run tests in multiple shards in parallel.
         * 
         * @return builder
         * 
         */
        public Builder shardingOption(ShardingOptionArgs shardingOption) {
            return shardingOption(Output.of(shardingOption));
        }

        /**
         * @param testApk The APK containing the test code to be executed.
         * 
         * @return builder
         * 
         */
        public Builder testApk(Output<FileReferenceArgs> testApk) {
            $.testApk = testApk;
            return this;
        }

        /**
         * @param testApk The APK containing the test code to be executed.
         * 
         * @return builder
         * 
         */
        public Builder testApk(FileReferenceArgs testApk) {
            return testApk(Output.of(testApk));
        }

        /**
         * @param testPackageId The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder testPackageId(@Nullable Output<String> testPackageId) {
            $.testPackageId = testPackageId;
            return this;
        }

        /**
         * @param testPackageId The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder testPackageId(String testPackageId) {
            return testPackageId(Output.of(testPackageId));
        }

        /**
         * @param testRunnerClass The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder testRunnerClass(@Nullable Output<String> testRunnerClass) {
            $.testRunnerClass = testRunnerClass;
            return this;
        }

        /**
         * @param testRunnerClass The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder testRunnerClass(String testRunnerClass) {
            return testRunnerClass(Output.of(testRunnerClass));
        }

        /**
         * @param testTargets Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
         * 
         * @return builder
         * 
         */
        public Builder testTargets(@Nullable Output<List<String>> testTargets) {
            $.testTargets = testTargets;
            return this;
        }

        /**
         * @param testTargets Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
         * 
         * @return builder
         * 
         */
        public Builder testTargets(List<String> testTargets) {
            return testTargets(Output.of(testTargets));
        }

        /**
         * @param testTargets Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
         * 
         * @return builder
         * 
         */
        public Builder testTargets(String... testTargets) {
            return testTargets(List.of(testTargets));
        }

        public AndroidInstrumentationTestArgs build() {
            $.testApk = Objects.requireNonNull($.testApk, "expected parameter 'testApk' to be non-null");
            return $;
        }
    }

}
