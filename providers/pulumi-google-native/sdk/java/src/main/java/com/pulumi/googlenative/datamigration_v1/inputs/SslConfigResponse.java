// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * SSL configuration information.
 * 
 */
public final class SslConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final SslConfigResponse Empty = new SslConfigResponse();

    /**
     * Input only. The x509 PEM-encoded certificate of the CA that signed the source database server&#39;s certificate. The replica will use this certificate to verify it&#39;s connecting to the right host.
     * 
     */
    @Import(name="caCertificate", required=true)
    private String caCertificate;

    public String caCertificate() {
        return this.caCertificate;
    }

    /**
     * Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the &#39;client_key&#39; field is mandatory.
     * 
     */
    @Import(name="clientCertificate", required=true)
    private String clientCertificate;

    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; field is mandatory.
     * 
     */
    @Import(name="clientKey", required=true)
    private String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    /**
     * The ssl config type according to &#39;client_key&#39;, &#39;client_certificate&#39; and &#39;ca_certificate&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private SslConfigResponse() {}

    private SslConfigResponse(SslConfigResponse $) {
        this.caCertificate = $.caCertificate;
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslConfigResponse $;

        public Builder() {
            $ = new SslConfigResponse();
        }

        public Builder(SslConfigResponse defaults) {
            $ = new SslConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder caCertificate(String caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public SslConfigResponse build() {
            $.caCertificate = Objects.requireNonNull($.caCertificate, "expected parameter 'caCertificate' to be non-null");
            $.clientCertificate = Objects.requireNonNull($.clientCertificate, "expected parameter 'clientCertificate' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
