// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * An allowed method or permission of a service specified in ApiOperation.
 * 
 */
public final class MethodSelectorResponse extends com.pulumi.resources.InvokeArgs {

    public static final MethodSelectorResponse Empty = new MethodSelectorResponse();

    /**
     * Value for `method` should be a valid method name for the corresponding `service_name` in ApiOperation. If `*` used as value for `method`, then ALL methods and permissions are allowed.
     * 
     */
    @Import(name="method", required=true)
    private String method;

    public String method() {
        return this.method;
    }

    /**
     * Value for `permission` should be a valid Cloud IAM permission for the corresponding `service_name` in ApiOperation.
     * 
     */
    @Import(name="permission", required=true)
    private String permission;

    public String permission() {
        return this.permission;
    }

    private MethodSelectorResponse() {}

    private MethodSelectorResponse(MethodSelectorResponse $) {
        this.method = $.method;
        this.permission = $.permission;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MethodSelectorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MethodSelectorResponse $;

        public Builder() {
            $ = new MethodSelectorResponse();
        }

        public Builder(MethodSelectorResponse defaults) {
            $ = new MethodSelectorResponse(Objects.requireNonNull(defaults));
        }

        public Builder method(String method) {
            $.method = method;
            return this;
        }

        public Builder permission(String permission) {
            $.permission = permission;
            return this;
        }

        public MethodSelectorResponse build() {
            $.method = Objects.requireNonNull($.method, "expected parameter 'method' to be non-null");
            $.permission = Objects.requireNonNull($.permission, "expected parameter 'permission' to be non-null");
            return $;
        }
    }

}
