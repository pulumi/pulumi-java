// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.workflowexecutions_v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.workflowexecutions_v1beta.outputs.ErrorResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExecutionResult {
    /**
     * Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
     * 
     */
    private final String argument;
    /**
     * The call logging level associated to this execution.
     * 
     */
    private final String callLogLevel;
    /**
     * Marks the end of execution, successful or not.
     * 
     */
    private final String endTime;
    /**
     * The error which caused the execution to finish prematurely. The value is only present if the execution's state is `FAILED` or `CANCELLED`.
     * 
     */
    private final ErrorResponse error;
    /**
     * The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
     * 
     */
    private final String name;
    /**
     * Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
     * 
     */
    private final String result;
    /**
     * Marks the beginning of execution.
     * 
     */
    private final String startTime;
    /**
     * Current state of the execution.
     * 
     */
    private final String state;
    /**
     * Revision of the workflow this execution is using.
     * 
     */
    private final String workflowRevisionId;

    @CustomType.Constructor
    private GetExecutionResult(
        @CustomType.Parameter("argument") String argument,
        @CustomType.Parameter("callLogLevel") String callLogLevel,
        @CustomType.Parameter("endTime") String endTime,
        @CustomType.Parameter("error") ErrorResponse error,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("result") String result,
        @CustomType.Parameter("startTime") String startTime,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("workflowRevisionId") String workflowRevisionId) {
        this.argument = argument;
        this.callLogLevel = callLogLevel;
        this.endTime = endTime;
        this.error = error;
        this.name = name;
        this.result = result;
        this.startTime = startTime;
        this.state = state;
        this.workflowRevisionId = workflowRevisionId;
    }

    /**
     * Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
     * 
    */
    public String argument() {
        return this.argument;
    }
    /**
     * The call logging level associated to this execution.
     * 
    */
    public String callLogLevel() {
        return this.callLogLevel;
    }
    /**
     * Marks the end of execution, successful or not.
     * 
    */
    public String endTime() {
        return this.endTime;
    }
    /**
     * The error which caused the execution to finish prematurely. The value is only present if the execution's state is `FAILED` or `CANCELLED`.
     * 
    */
    public ErrorResponse error() {
        return this.error;
    }
    /**
     * The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
     * 
    */
    public String result() {
        return this.result;
    }
    /**
     * Marks the beginning of execution.
     * 
    */
    public String startTime() {
        return this.startTime;
    }
    /**
     * Current state of the execution.
     * 
    */
    public String state() {
        return this.state;
    }
    /**
     * Revision of the workflow this execution is using.
     * 
    */
    public String workflowRevisionId() {
        return this.workflowRevisionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExecutionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String argument;
        private String callLogLevel;
        private String endTime;
        private ErrorResponse error;
        private String name;
        private String result;
        private String startTime;
        private String state;
        private String workflowRevisionId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetExecutionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.argument = defaults.argument;
    	      this.callLogLevel = defaults.callLogLevel;
    	      this.endTime = defaults.endTime;
    	      this.error = defaults.error;
    	      this.name = defaults.name;
    	      this.result = defaults.result;
    	      this.startTime = defaults.startTime;
    	      this.state = defaults.state;
    	      this.workflowRevisionId = defaults.workflowRevisionId;
        }

        public Builder argument(String argument) {
            this.argument = Objects.requireNonNull(argument);
            return this;
        }
        public Builder callLogLevel(String callLogLevel) {
            this.callLogLevel = Objects.requireNonNull(callLogLevel);
            return this;
        }
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder error(ErrorResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder result(String result) {
            this.result = Objects.requireNonNull(result);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder workflowRevisionId(String workflowRevisionId) {
            this.workflowRevisionId = Objects.requireNonNull(workflowRevisionId);
            return this;
        }        public GetExecutionResult build() {
            return new GetExecutionResult(argument, callLogLevel, endTime, error, name, result, startTime, state, workflowRevisionId);
        }
    }
}
