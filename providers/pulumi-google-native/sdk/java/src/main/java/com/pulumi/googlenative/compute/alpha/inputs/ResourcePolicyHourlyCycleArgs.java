// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Time window specified for hourly operations.
 * 
 */
public final class ResourcePolicyHourlyCycleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourcePolicyHourlyCycleArgs Empty = new ResourcePolicyHourlyCycleArgs();

    /**
     * Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
     * 
     */
    @Import(name="hoursInCycle")
    private @Nullable Output<Integer> hoursInCycle;

    /**
     * @return Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
     * 
     */
    public Optional<Output<Integer>> hoursInCycle() {
        return Optional.ofNullable(this.hoursInCycle);
    }

    /**
     * Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private ResourcePolicyHourlyCycleArgs() {}

    private ResourcePolicyHourlyCycleArgs(ResourcePolicyHourlyCycleArgs $) {
        this.hoursInCycle = $.hoursInCycle;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicyHourlyCycleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicyHourlyCycleArgs $;

        public Builder() {
            $ = new ResourcePolicyHourlyCycleArgs();
        }

        public Builder(ResourcePolicyHourlyCycleArgs defaults) {
            $ = new ResourcePolicyHourlyCycleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hoursInCycle Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
         * 
         * @return builder
         * 
         */
        public Builder hoursInCycle(@Nullable Output<Integer> hoursInCycle) {
            $.hoursInCycle = hoursInCycle;
            return this;
        }

        /**
         * @param hoursInCycle Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
         * 
         * @return builder
         * 
         */
        public Builder hoursInCycle(Integer hoursInCycle) {
            return hoursInCycle(Output.of(hoursInCycle));
        }

        /**
         * @param startTime Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Time within the window to start the operations. It must be in format &#34;HH:MM&#34;, where HH : [00-23] and MM : [00-00] GMT.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public ResourcePolicyHourlyCycleArgs build() {
            return $;
        }
    }

}
