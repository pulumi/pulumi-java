// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.ColumnResponse;
import java.util.List;
import java.util.Objects;


/**
 * A simplified layout that divides the available space into vertical columns and arranges a set of widgets vertically in each column.
 * 
 */
public final class ColumnLayoutResponse extends com.pulumi.resources.InvokeArgs {

    public static final ColumnLayoutResponse Empty = new ColumnLayoutResponse();

    /**
     * The columns of content to display.
     * 
     */
    @Import(name="columns", required=true)
    private List<ColumnResponse> columns;

    public List<ColumnResponse> columns() {
        return this.columns;
    }

    private ColumnLayoutResponse() {}

    private ColumnLayoutResponse(ColumnLayoutResponse $) {
        this.columns = $.columns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ColumnLayoutResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ColumnLayoutResponse $;

        public Builder() {
            $ = new ColumnLayoutResponse();
        }

        public Builder(ColumnLayoutResponse defaults) {
            $ = new ColumnLayoutResponse(Objects.requireNonNull(defaults));
        }

        public Builder columns(List<ColumnResponse> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(ColumnResponse... columns) {
            return columns(List.of(columns));
        }

        public ColumnLayoutResponse build() {
            $.columns = Objects.requireNonNull($.columns, "expected parameter 'columns' to be non-null");
            return $;
        }
    }

}
