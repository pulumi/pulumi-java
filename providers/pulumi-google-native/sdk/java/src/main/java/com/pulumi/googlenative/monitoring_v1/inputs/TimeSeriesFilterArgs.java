// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.AggregationArgs;
import com.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method.
 * 
 */
public final class TimeSeriesFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeSeriesFilterArgs Empty = new TimeSeriesFilterArgs();

    /**
     * By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     * 
     */
    @Import(name="aggregation")
    private @Nullable Output<AggregationArgs> aggregation;

    public Optional<Output<AggregationArgs>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    /**
     * The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    public Output<String> filter() {
        return this.filter;
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @Import(name="pickTimeSeriesFilter")
    private @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter;

    public Optional<Output<PickTimeSeriesFilterArgs>> pickTimeSeriesFilter() {
        return Optional.ofNullable(this.pickTimeSeriesFilter);
    }

    /**
     * Apply a second aggregation after aggregation is applied.
     * 
     */
    @Import(name="secondaryAggregation")
    private @Nullable Output<AggregationArgs> secondaryAggregation;

    public Optional<Output<AggregationArgs>> secondaryAggregation() {
        return Optional.ofNullable(this.secondaryAggregation);
    }

    private TimeSeriesFilterArgs() {}

    private TimeSeriesFilterArgs(TimeSeriesFilterArgs $) {
        this.aggregation = $.aggregation;
        this.filter = $.filter;
        this.pickTimeSeriesFilter = $.pickTimeSeriesFilter;
        this.secondaryAggregation = $.secondaryAggregation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeSeriesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeSeriesFilterArgs $;

        public Builder() {
            $ = new TimeSeriesFilterArgs();
        }

        public Builder(TimeSeriesFilterArgs defaults) {
            $ = new TimeSeriesFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregation(@Nullable Output<AggregationArgs> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(AggregationArgs aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder pickTimeSeriesFilter(@Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter) {
            $.pickTimeSeriesFilter = pickTimeSeriesFilter;
            return this;
        }

        public Builder pickTimeSeriesFilter(PickTimeSeriesFilterArgs pickTimeSeriesFilter) {
            return pickTimeSeriesFilter(Output.of(pickTimeSeriesFilter));
        }

        public Builder secondaryAggregation(@Nullable Output<AggregationArgs> secondaryAggregation) {
            $.secondaryAggregation = secondaryAggregation;
            return this;
        }

        public Builder secondaryAggregation(AggregationArgs secondaryAggregation) {
            return secondaryAggregation(Output.of(secondaryAggregation));
        }

        public TimeSeriesFilterArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
