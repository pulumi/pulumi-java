// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow.v1b3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow.v1b3.inputs.DisplayDataArgs;
import com.pulumi.googlenative.dataflow.v1b3.inputs.ExecutionStageSummaryArgs;
import com.pulumi.googlenative.dataflow.v1b3.inputs.TransformSummaryArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
 * 
 */
public final class PipelineDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineDescriptionArgs Empty = new PipelineDescriptionArgs();

    /**
     * Pipeline level display data.
     * 
     */
    @Import(name="displayData")
    private @Nullable Output<List<DisplayDataArgs>> displayData;

    /**
     * @return Pipeline level display data.
     * 
     */
    public Optional<Output<List<DisplayDataArgs>>> displayData() {
        return Optional.ofNullable(this.displayData);
    }

    /**
     * Description of each stage of execution of the pipeline.
     * 
     */
    @Import(name="executionPipelineStage")
    private @Nullable Output<List<ExecutionStageSummaryArgs>> executionPipelineStage;

    /**
     * @return Description of each stage of execution of the pipeline.
     * 
     */
    public Optional<Output<List<ExecutionStageSummaryArgs>>> executionPipelineStage() {
        return Optional.ofNullable(this.executionPipelineStage);
    }

    /**
     * Description of each transform in the pipeline and collections between them.
     * 
     */
    @Import(name="originalPipelineTransform")
    private @Nullable Output<List<TransformSummaryArgs>> originalPipelineTransform;

    /**
     * @return Description of each transform in the pipeline and collections between them.
     * 
     */
    public Optional<Output<List<TransformSummaryArgs>>> originalPipelineTransform() {
        return Optional.ofNullable(this.originalPipelineTransform);
    }

    private PipelineDescriptionArgs() {}

    private PipelineDescriptionArgs(PipelineDescriptionArgs $) {
        this.displayData = $.displayData;
        this.executionPipelineStage = $.executionPipelineStage;
        this.originalPipelineTransform = $.originalPipelineTransform;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineDescriptionArgs $;

        public Builder() {
            $ = new PipelineDescriptionArgs();
        }

        public Builder(PipelineDescriptionArgs defaults) {
            $ = new PipelineDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayData Pipeline level display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(@Nullable Output<List<DisplayDataArgs>> displayData) {
            $.displayData = displayData;
            return this;
        }

        /**
         * @param displayData Pipeline level display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(List<DisplayDataArgs> displayData) {
            return displayData(Output.of(displayData));
        }

        /**
         * @param displayData Pipeline level display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(DisplayDataArgs... displayData) {
            return displayData(List.of(displayData));
        }

        /**
         * @param executionPipelineStage Description of each stage of execution of the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder executionPipelineStage(@Nullable Output<List<ExecutionStageSummaryArgs>> executionPipelineStage) {
            $.executionPipelineStage = executionPipelineStage;
            return this;
        }

        /**
         * @param executionPipelineStage Description of each stage of execution of the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder executionPipelineStage(List<ExecutionStageSummaryArgs> executionPipelineStage) {
            return executionPipelineStage(Output.of(executionPipelineStage));
        }

        /**
         * @param executionPipelineStage Description of each stage of execution of the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder executionPipelineStage(ExecutionStageSummaryArgs... executionPipelineStage) {
            return executionPipelineStage(List.of(executionPipelineStage));
        }

        /**
         * @param originalPipelineTransform Description of each transform in the pipeline and collections between them.
         * 
         * @return builder
         * 
         */
        public Builder originalPipelineTransform(@Nullable Output<List<TransformSummaryArgs>> originalPipelineTransform) {
            $.originalPipelineTransform = originalPipelineTransform;
            return this;
        }

        /**
         * @param originalPipelineTransform Description of each transform in the pipeline and collections between them.
         * 
         * @return builder
         * 
         */
        public Builder originalPipelineTransform(List<TransformSummaryArgs> originalPipelineTransform) {
            return originalPipelineTransform(Output.of(originalPipelineTransform));
        }

        /**
         * @param originalPipelineTransform Description of each transform in the pipeline and collections between them.
         * 
         * @return builder
         * 
         */
        public Builder originalPipelineTransform(TransformSummaryArgs... originalPipelineTransform) {
            return originalPipelineTransform(List.of(originalPipelineTransform));
        }

        public PipelineDescriptionArgs build() {
            return $;
        }
    }

}
