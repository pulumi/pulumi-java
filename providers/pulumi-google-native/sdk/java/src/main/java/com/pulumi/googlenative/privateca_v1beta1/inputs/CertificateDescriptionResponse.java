// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1beta1.inputs.CertificateFingerprintResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.KeyIdResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.PublicKeyResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.ReusableConfigValuesResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.SubjectDescriptionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
 * 
 */
public final class CertificateDescriptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateDescriptionResponse Empty = new CertificateDescriptionResponse();

    /**
     * Describes lists of issuer CA certificate URLs that appear in the &#34;Authority Information Access&#34; extension in the certificate.
     * 
     */
    @Import(name="aiaIssuingCertificateUrls", required=true)
    private List<String> aiaIssuingCertificateUrls;

    /**
     * @return Describes lists of issuer CA certificate URLs that appear in the &#34;Authority Information Access&#34; extension in the certificate.
     * 
     */
    public List<String> aiaIssuingCertificateUrls() {
        return this.aiaIssuingCertificateUrls;
    }

    /**
     * Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
     * 
     */
    @Import(name="authorityKeyId", required=true)
    private KeyIdResponse authorityKeyId;

    /**
     * @return Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
     * 
     */
    public KeyIdResponse authorityKeyId() {
        return this.authorityKeyId;
    }

    /**
     * The hash of the x.509 certificate.
     * 
     */
    @Import(name="certFingerprint", required=true)
    private CertificateFingerprintResponse certFingerprint;

    /**
     * @return The hash of the x.509 certificate.
     * 
     */
    public CertificateFingerprintResponse certFingerprint() {
        return this.certFingerprint;
    }

    /**
     * Describes some of the technical fields in a certificate.
     * 
     */
    @Import(name="configValues", required=true)
    private ReusableConfigValuesResponse configValues;

    /**
     * @return Describes some of the technical fields in a certificate.
     * 
     */
    public ReusableConfigValuesResponse configValues() {
        return this.configValues;
    }

    /**
     * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
     * 
     */
    @Import(name="crlDistributionPoints", required=true)
    private List<String> crlDistributionPoints;

    /**
     * @return Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
     * 
     */
    public List<String> crlDistributionPoints() {
        return this.crlDistributionPoints;
    }

    /**
     * The public key that corresponds to an issued certificate.
     * 
     */
    @Import(name="publicKey", required=true)
    private PublicKeyResponse publicKey;

    /**
     * @return The public key that corresponds to an issued certificate.
     * 
     */
    public PublicKeyResponse publicKey() {
        return this.publicKey;
    }

    /**
     * Describes some of the values in a certificate that are related to the subject and lifetime.
     * 
     */
    @Import(name="subjectDescription", required=true)
    private SubjectDescriptionResponse subjectDescription;

    /**
     * @return Describes some of the values in a certificate that are related to the subject and lifetime.
     * 
     */
    public SubjectDescriptionResponse subjectDescription() {
        return this.subjectDescription;
    }

    /**
     * Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
     * 
     */
    @Import(name="subjectKeyId", required=true)
    private KeyIdResponse subjectKeyId;

    /**
     * @return Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
     * 
     */
    public KeyIdResponse subjectKeyId() {
        return this.subjectKeyId;
    }

    private CertificateDescriptionResponse() {}

    private CertificateDescriptionResponse(CertificateDescriptionResponse $) {
        this.aiaIssuingCertificateUrls = $.aiaIssuingCertificateUrls;
        this.authorityKeyId = $.authorityKeyId;
        this.certFingerprint = $.certFingerprint;
        this.configValues = $.configValues;
        this.crlDistributionPoints = $.crlDistributionPoints;
        this.publicKey = $.publicKey;
        this.subjectDescription = $.subjectDescription;
        this.subjectKeyId = $.subjectKeyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateDescriptionResponse $;

        public Builder() {
            $ = new CertificateDescriptionResponse();
        }

        public Builder(CertificateDescriptionResponse defaults) {
            $ = new CertificateDescriptionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param aiaIssuingCertificateUrls Describes lists of issuer CA certificate URLs that appear in the &#34;Authority Information Access&#34; extension in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder aiaIssuingCertificateUrls(List<String> aiaIssuingCertificateUrls) {
            $.aiaIssuingCertificateUrls = aiaIssuingCertificateUrls;
            return this;
        }

        /**
         * @param aiaIssuingCertificateUrls Describes lists of issuer CA certificate URLs that appear in the &#34;Authority Information Access&#34; extension in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder aiaIssuingCertificateUrls(String... aiaIssuingCertificateUrls) {
            return aiaIssuingCertificateUrls(List.of(aiaIssuingCertificateUrls));
        }

        /**
         * @param authorityKeyId Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
         * 
         * @return builder
         * 
         */
        public Builder authorityKeyId(KeyIdResponse authorityKeyId) {
            $.authorityKeyId = authorityKeyId;
            return this;
        }

        /**
         * @param certFingerprint The hash of the x.509 certificate.
         * 
         * @return builder
         * 
         */
        public Builder certFingerprint(CertificateFingerprintResponse certFingerprint) {
            $.certFingerprint = certFingerprint;
            return this;
        }

        /**
         * @param configValues Describes some of the technical fields in a certificate.
         * 
         * @return builder
         * 
         */
        public Builder configValues(ReusableConfigValuesResponse configValues) {
            $.configValues = configValues;
            return this;
        }

        /**
         * @param crlDistributionPoints Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
         * 
         * @return builder
         * 
         */
        public Builder crlDistributionPoints(List<String> crlDistributionPoints) {
            $.crlDistributionPoints = crlDistributionPoints;
            return this;
        }

        /**
         * @param crlDistributionPoints Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
         * 
         * @return builder
         * 
         */
        public Builder crlDistributionPoints(String... crlDistributionPoints) {
            return crlDistributionPoints(List.of(crlDistributionPoints));
        }

        /**
         * @param publicKey The public key that corresponds to an issued certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(PublicKeyResponse publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param subjectDescription Describes some of the values in a certificate that are related to the subject and lifetime.
         * 
         * @return builder
         * 
         */
        public Builder subjectDescription(SubjectDescriptionResponse subjectDescription) {
            $.subjectDescription = subjectDescription;
            return this;
        }

        /**
         * @param subjectKeyId Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
         * 
         * @return builder
         * 
         */
        public Builder subjectKeyId(KeyIdResponse subjectKeyId) {
            $.subjectKeyId = subjectKeyId;
            return this;
        }

        public CertificateDescriptionResponse build() {
            $.aiaIssuingCertificateUrls = Objects.requireNonNull($.aiaIssuingCertificateUrls, "expected parameter 'aiaIssuingCertificateUrls' to be non-null");
            $.authorityKeyId = Objects.requireNonNull($.authorityKeyId, "expected parameter 'authorityKeyId' to be non-null");
            $.certFingerprint = Objects.requireNonNull($.certFingerprint, "expected parameter 'certFingerprint' to be non-null");
            $.configValues = Objects.requireNonNull($.configValues, "expected parameter 'configValues' to be non-null");
            $.crlDistributionPoints = Objects.requireNonNull($.crlDistributionPoints, "expected parameter 'crlDistributionPoints' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            $.subjectDescription = Objects.requireNonNull($.subjectDescription, "expected parameter 'subjectDescription' to be non-null");
            $.subjectKeyId = Objects.requireNonNull($.subjectKeyId, "expected parameter 'subjectKeyId' to be non-null");
            return $;
        }
    }

}
