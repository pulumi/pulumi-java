// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3IntentArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3PageArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3ResponseMessageTextArgs;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleRpcStatusArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The output from the virtual agent.
 * 
 */
public final class GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs Empty = new GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs();

    /**
     * The Page on which the utterance was spoken. Only name and displayName will be set.
     * 
     */
    @Import(name="currentPage")
    private @Nullable Output<GoogleCloudDialogflowCxV3PageArgs> currentPage;

    /**
     * @return The Page on which the utterance was spoken. Only name and displayName will be set.
     * 
     */
    public Optional<Output<GoogleCloudDialogflowCxV3PageArgs>> currentPage() {
        return Optional.ofNullable(this.currentPage);
    }

    /**
     * Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
     * 
     */
    @Import(name="diagnosticInfo", required=true)
    private Output<Map<String,String>> diagnosticInfo;

    /**
     * @return Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
     * 
     */
    public Output<Map<String,String>> diagnosticInfo() {
        return this.diagnosticInfo;
    }

    /**
     * The session parameters available to the bot at this point.
     * 
     */
    @Import(name="sessionParameters")
    private @Nullable Output<Map<String,String>> sessionParameters;

    /**
     * @return The session parameters available to the bot at this point.
     * 
     */
    public Optional<Output<Map<String,String>>> sessionParameters() {
        return Optional.ofNullable(this.sessionParameters);
    }

    /**
     * Response error from the agent in the test result. If set, other output is empty.
     * 
     */
    @Import(name="status")
    private @Nullable Output<GoogleRpcStatusArgs> status;

    /**
     * @return Response error from the agent in the test result. If set, other output is empty.
     * 
     */
    public Optional<Output<GoogleRpcStatusArgs>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The text responses from the agent for the turn.
     * 
     */
    @Import(name="textResponses")
    private @Nullable Output<List<GoogleCloudDialogflowCxV3ResponseMessageTextArgs>> textResponses;

    /**
     * @return The text responses from the agent for the turn.
     * 
     */
    public Optional<Output<List<GoogleCloudDialogflowCxV3ResponseMessageTextArgs>>> textResponses() {
        return Optional.ofNullable(this.textResponses);
    }

    /**
     * The Intent that triggered the response. Only name and displayName will be set.
     * 
     */
    @Import(name="triggeredIntent")
    private @Nullable Output<GoogleCloudDialogflowCxV3IntentArgs> triggeredIntent;

    /**
     * @return The Intent that triggered the response. Only name and displayName will be set.
     * 
     */
    public Optional<Output<GoogleCloudDialogflowCxV3IntentArgs>> triggeredIntent() {
        return Optional.ofNullable(this.triggeredIntent);
    }

    private GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs() {}

    private GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs(GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs $) {
        this.currentPage = $.currentPage;
        this.diagnosticInfo = $.diagnosticInfo;
        this.sessionParameters = $.sessionParameters;
        this.status = $.status;
        this.textResponses = $.textResponses;
        this.triggeredIntent = $.triggeredIntent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs();
        }

        public Builder(GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs defaults) {
            $ = new GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentPage The Page on which the utterance was spoken. Only name and displayName will be set.
         * 
         * @return builder
         * 
         */
        public Builder currentPage(@Nullable Output<GoogleCloudDialogflowCxV3PageArgs> currentPage) {
            $.currentPage = currentPage;
            return this;
        }

        /**
         * @param currentPage The Page on which the utterance was spoken. Only name and displayName will be set.
         * 
         * @return builder
         * 
         */
        public Builder currentPage(GoogleCloudDialogflowCxV3PageArgs currentPage) {
            return currentPage(Output.of(currentPage));
        }

        /**
         * @param diagnosticInfo Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticInfo(Output<Map<String,String>> diagnosticInfo) {
            $.diagnosticInfo = diagnosticInfo;
            return this;
        }

        /**
         * @param diagnosticInfo Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticInfo(Map<String,String> diagnosticInfo) {
            return diagnosticInfo(Output.of(diagnosticInfo));
        }

        /**
         * @param sessionParameters The session parameters available to the bot at this point.
         * 
         * @return builder
         * 
         */
        public Builder sessionParameters(@Nullable Output<Map<String,String>> sessionParameters) {
            $.sessionParameters = sessionParameters;
            return this;
        }

        /**
         * @param sessionParameters The session parameters available to the bot at this point.
         * 
         * @return builder
         * 
         */
        public Builder sessionParameters(Map<String,String> sessionParameters) {
            return sessionParameters(Output.of(sessionParameters));
        }

        /**
         * @param status Response error from the agent in the test result. If set, other output is empty.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<GoogleRpcStatusArgs> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Response error from the agent in the test result. If set, other output is empty.
         * 
         * @return builder
         * 
         */
        public Builder status(GoogleRpcStatusArgs status) {
            return status(Output.of(status));
        }

        /**
         * @param textResponses The text responses from the agent for the turn.
         * 
         * @return builder
         * 
         */
        public Builder textResponses(@Nullable Output<List<GoogleCloudDialogflowCxV3ResponseMessageTextArgs>> textResponses) {
            $.textResponses = textResponses;
            return this;
        }

        /**
         * @param textResponses The text responses from the agent for the turn.
         * 
         * @return builder
         * 
         */
        public Builder textResponses(List<GoogleCloudDialogflowCxV3ResponseMessageTextArgs> textResponses) {
            return textResponses(Output.of(textResponses));
        }

        /**
         * @param textResponses The text responses from the agent for the turn.
         * 
         * @return builder
         * 
         */
        public Builder textResponses(GoogleCloudDialogflowCxV3ResponseMessageTextArgs... textResponses) {
            return textResponses(List.of(textResponses));
        }

        /**
         * @param triggeredIntent The Intent that triggered the response. Only name and displayName will be set.
         * 
         * @return builder
         * 
         */
        public Builder triggeredIntent(@Nullable Output<GoogleCloudDialogflowCxV3IntentArgs> triggeredIntent) {
            $.triggeredIntent = triggeredIntent;
            return this;
        }

        /**
         * @param triggeredIntent The Intent that triggered the response. Only name and displayName will be set.
         * 
         * @return builder
         * 
         */
        public Builder triggeredIntent(GoogleCloudDialogflowCxV3IntentArgs triggeredIntent) {
            return triggeredIntent(Output.of(triggeredIntent));
        }

        public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputArgs build() {
            $.diagnosticInfo = Objects.requireNonNull($.diagnosticInfo, "expected parameter 'diagnosticInfo' to be non-null");
            return $;
        }
    }

}
