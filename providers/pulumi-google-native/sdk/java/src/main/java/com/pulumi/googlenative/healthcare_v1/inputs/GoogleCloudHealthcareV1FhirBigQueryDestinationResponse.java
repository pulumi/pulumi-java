// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare_v1.inputs.SchemaConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The configuration for exporting to BigQuery.
 * 
 */
public final class GoogleCloudHealthcareV1FhirBigQueryDestinationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudHealthcareV1FhirBigQueryDestinationResponse Empty = new GoogleCloudHealthcareV1FhirBigQueryDestinationResponse();

    /**
     * BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
     * 
     */
    @Import(name="datasetUri", required=true)
    private String datasetUri;

    /**
     * @return BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
     * 
     */
    public String datasetUri() {
        return this.datasetUri;
    }

    /**
     * If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    @Import(name="force", required=true)
    private Boolean force;

    /**
     * @return If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    public Boolean force() {
        return this.force;
    }

    /**
     * The configuration for the exported BigQuery schema.
     * 
     */
    @Import(name="schemaConfig", required=true)
    private SchemaConfigResponse schemaConfig;

    /**
     * @return The configuration for the exported BigQuery schema.
     * 
     */
    public SchemaConfigResponse schemaConfig() {
        return this.schemaConfig;
    }

    /**
     * Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    @Import(name="writeDisposition", required=true)
    private String writeDisposition;

    /**
     * @return Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    public String writeDisposition() {
        return this.writeDisposition;
    }

    private GoogleCloudHealthcareV1FhirBigQueryDestinationResponse() {}

    private GoogleCloudHealthcareV1FhirBigQueryDestinationResponse(GoogleCloudHealthcareV1FhirBigQueryDestinationResponse $) {
        this.datasetUri = $.datasetUri;
        this.force = $.force;
        this.schemaConfig = $.schemaConfig;
        this.writeDisposition = $.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudHealthcareV1FhirBigQueryDestinationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudHealthcareV1FhirBigQueryDestinationResponse $;

        public Builder() {
            $ = new GoogleCloudHealthcareV1FhirBigQueryDestinationResponse();
        }

        public Builder(GoogleCloudHealthcareV1FhirBigQueryDestinationResponse defaults) {
            $ = new GoogleCloudHealthcareV1FhirBigQueryDestinationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param datasetUri BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
         * 
         * @return builder
         * 
         */
        public Builder datasetUri(String datasetUri) {
            $.datasetUri = datasetUri;
            return this;
        }

        /**
         * @param force If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            $.force = force;
            return this;
        }

        /**
         * @param schemaConfig The configuration for the exported BigQuery schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaConfig(SchemaConfigResponse schemaConfig) {
            $.schemaConfig = schemaConfig;
            return this;
        }

        /**
         * @param writeDisposition Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
         * 
         * @return builder
         * 
         */
        public Builder writeDisposition(String writeDisposition) {
            $.writeDisposition = writeDisposition;
            return this;
        }

        public GoogleCloudHealthcareV1FhirBigQueryDestinationResponse build() {
            $.datasetUri = Objects.requireNonNull($.datasetUri, "expected parameter 'datasetUri' to be non-null");
            $.force = Objects.requireNonNull($.force, "expected parameter 'force' to be non-null");
            $.schemaConfig = Objects.requireNonNull($.schemaConfig, "expected parameter 'schemaConfig' to be non-null");
            $.writeDisposition = Objects.requireNonNull($.writeDisposition, "expected parameter 'writeDisposition' to be non-null");
            return $;
        }
    }

}
