// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class RemoteFunctionOptionsResponse {
    /**
     * @return Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. projects/{project_id}/locations/{location_id}/connections/{connection_id}
     * 
     */
    private final String connection;
    /**
     * @return Endpoint of the user-provided remote service (e.g. a function url in Google Cloud Functions).
     * 
     */
    private final String endpoint;
    /**
     * @return Max number of rows in each batch sent to the remote service. If absent or if 0, it means no limit.
     * 
     */
    private final String maxBatchingRows;
    /**
     * @return User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
     * 
     */
    private final Map<String,String> userDefinedContext;

    @CustomType.Constructor
    private RemoteFunctionOptionsResponse(
        @CustomType.Parameter("connection") String connection,
        @CustomType.Parameter("endpoint") String endpoint,
        @CustomType.Parameter("maxBatchingRows") String maxBatchingRows,
        @CustomType.Parameter("userDefinedContext") Map<String,String> userDefinedContext) {
        this.connection = connection;
        this.endpoint = endpoint;
        this.maxBatchingRows = maxBatchingRows;
        this.userDefinedContext = userDefinedContext;
    }

    /**
     * @return Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. projects/{project_id}/locations/{location_id}/connections/{connection_id}
     * 
     */
    public String connection() {
        return this.connection;
    }
    /**
     * @return Endpoint of the user-provided remote service (e.g. a function url in Google Cloud Functions).
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Max number of rows in each batch sent to the remote service. If absent or if 0, it means no limit.
     * 
     */
    public String maxBatchingRows() {
        return this.maxBatchingRows;
    }
    /**
     * @return User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
     * 
     */
    public Map<String,String> userDefinedContext() {
        return this.userDefinedContext;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RemoteFunctionOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String connection;
        private String endpoint;
        private String maxBatchingRows;
        private Map<String,String> userDefinedContext;

        public Builder() {
    	      // Empty
        }

        public Builder(RemoteFunctionOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connection = defaults.connection;
    	      this.endpoint = defaults.endpoint;
    	      this.maxBatchingRows = defaults.maxBatchingRows;
    	      this.userDefinedContext = defaults.userDefinedContext;
        }

        public Builder connection(String connection) {
            this.connection = Objects.requireNonNull(connection);
            return this;
        }
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        public Builder maxBatchingRows(String maxBatchingRows) {
            this.maxBatchingRows = Objects.requireNonNull(maxBatchingRows);
            return this;
        }
        public Builder userDefinedContext(Map<String,String> userDefinedContext) {
            this.userDefinedContext = Objects.requireNonNull(userDefinedContext);
            return this;
        }        public RemoteFunctionOptionsResponse build() {
            return new RemoteFunctionOptionsResponse(connection, endpoint, maxBatchingRows, userDefinedContext);
        }
    }
}
