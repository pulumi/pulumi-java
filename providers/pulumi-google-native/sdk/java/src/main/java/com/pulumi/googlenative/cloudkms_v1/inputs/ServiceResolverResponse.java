// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudkms_v1.inputs.CertificateResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
 * 
 */
public final class ServiceResolverResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServiceResolverResponse Empty = new ServiceResolverResponse();

    /**
     * Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    @Import(name="endpointFilter", required=true)
    private String endpointFilter;

    public String endpointFilter() {
        return this.endpointFilter;
    }

    /**
     * The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    @Import(name="hostname", required=true)
    private String hostname;

    public String hostname() {
        return this.hostname;
    }

    /**
     * A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica.
     * 
     */
    @Import(name="serverCertificates", required=true)
    private List<CertificateResponse> serverCertificates;

    public List<CertificateResponse> serverCertificates() {
        return this.serverCertificates;
    }

    /**
     * The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
     * 
     */
    @Import(name="serviceDirectoryService", required=true)
    private String serviceDirectoryService;

    public String serviceDirectoryService() {
        return this.serviceDirectoryService;
    }

    private ServiceResolverResponse() {}

    private ServiceResolverResponse(ServiceResolverResponse $) {
        this.endpointFilter = $.endpointFilter;
        this.hostname = $.hostname;
        this.serverCertificates = $.serverCertificates;
        this.serviceDirectoryService = $.serviceDirectoryService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceResolverResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceResolverResponse $;

        public Builder() {
            $ = new ServiceResolverResponse();
        }

        public Builder(ServiceResolverResponse defaults) {
            $ = new ServiceResolverResponse(Objects.requireNonNull(defaults));
        }

        public Builder endpointFilter(String endpointFilter) {
            $.endpointFilter = endpointFilter;
            return this;
        }

        public Builder hostname(String hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder serverCertificates(List<CertificateResponse> serverCertificates) {
            $.serverCertificates = serverCertificates;
            return this;
        }

        public Builder serverCertificates(CertificateResponse... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }

        public Builder serviceDirectoryService(String serviceDirectoryService) {
            $.serviceDirectoryService = serviceDirectoryService;
            return this;
        }

        public ServiceResolverResponse build() {
            $.endpointFilter = Objects.requireNonNull($.endpointFilter, "expected parameter 'endpointFilter' to be non-null");
            $.hostname = Objects.requireNonNull($.hostname, "expected parameter 'hostname' to be non-null");
            $.serverCertificates = Objects.requireNonNull($.serverCertificates, "expected parameter 'serverCertificates' to be non-null");
            $.serviceDirectoryService = Objects.requireNonNull($.serviceDirectoryService, "expected parameter 'serviceDirectoryService' to be non-null");
            return $;
        }
    }

}
