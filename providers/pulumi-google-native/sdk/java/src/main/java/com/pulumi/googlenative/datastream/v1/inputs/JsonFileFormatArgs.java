// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream.v1.enums.JsonFileFormatCompression;
import com.pulumi.googlenative.datastream.v1.enums.JsonFileFormatSchemaFileFormat;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * JSON file format configuration.
 * 
 */
public final class JsonFileFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final JsonFileFormatArgs Empty = new JsonFileFormatArgs();

    /**
     * Compression of the loaded JSON file.
     * 
     */
    @Import(name="compression")
    private @Nullable Output<JsonFileFormatCompression> compression;

    /**
     * @return Compression of the loaded JSON file.
     * 
     */
    public Optional<Output<JsonFileFormatCompression>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * The schema file format along JSON data files.
     * 
     */
    @Import(name="schemaFileFormat")
    private @Nullable Output<JsonFileFormatSchemaFileFormat> schemaFileFormat;

    /**
     * @return The schema file format along JSON data files.
     * 
     */
    public Optional<Output<JsonFileFormatSchemaFileFormat>> schemaFileFormat() {
        return Optional.ofNullable(this.schemaFileFormat);
    }

    private JsonFileFormatArgs() {}

    private JsonFileFormatArgs(JsonFileFormatArgs $) {
        this.compression = $.compression;
        this.schemaFileFormat = $.schemaFileFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JsonFileFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JsonFileFormatArgs $;

        public Builder() {
            $ = new JsonFileFormatArgs();
        }

        public Builder(JsonFileFormatArgs defaults) {
            $ = new JsonFileFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compression Compression of the loaded JSON file.
         * 
         * @return builder
         * 
         */
        public Builder compression(@Nullable Output<JsonFileFormatCompression> compression) {
            $.compression = compression;
            return this;
        }

        /**
         * @param compression Compression of the loaded JSON file.
         * 
         * @return builder
         * 
         */
        public Builder compression(JsonFileFormatCompression compression) {
            return compression(Output.of(compression));
        }

        /**
         * @param schemaFileFormat The schema file format along JSON data files.
         * 
         * @return builder
         * 
         */
        public Builder schemaFileFormat(@Nullable Output<JsonFileFormatSchemaFileFormat> schemaFileFormat) {
            $.schemaFileFormat = schemaFileFormat;
            return this;
        }

        /**
         * @param schemaFileFormat The schema file format along JSON data files.
         * 
         * @return builder
         * 
         */
        public Builder schemaFileFormat(JsonFileFormatSchemaFileFormat schemaFileFormat) {
            return schemaFileFormat(Output.of(schemaFileFormat));
        }

        public JsonFileFormatArgs build() {
            return $;
        }
    }

}
