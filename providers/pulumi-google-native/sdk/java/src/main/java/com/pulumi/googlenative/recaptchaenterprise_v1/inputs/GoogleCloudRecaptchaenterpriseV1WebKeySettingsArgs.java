// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.recaptchaenterprise_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.recaptchaenterprise_v1.enums.GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference;
import com.pulumi.googlenative.recaptchaenterprise_v1.enums.GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Settings specific to keys that can be used by websites.
 * 
 */
public final class GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs Empty = new GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs();

    /**
     * If set to true, it means allowed_domains will not be enforced.
     * 
     */
    @Import(name="allowAllDomains")
      private final @Nullable Output<Boolean> allowAllDomains;

    public Output<Boolean> allowAllDomains() {
        return this.allowAllDomains == null ? Codegen.empty() : this.allowAllDomains;
    }

    /**
     * If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
     * 
     */
    @Import(name="allowAmpTraffic")
      private final @Nullable Output<Boolean> allowAmpTraffic;

    public Output<Boolean> allowAmpTraffic() {
        return this.allowAmpTraffic == null ? Codegen.empty() : this.allowAmpTraffic;
    }

    /**
     * Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: &#39;example.com&#39; or &#39;subdomain.example.com&#39;
     * 
     */
    @Import(name="allowedDomains")
      private final @Nullable Output<List<String>> allowedDomains;

    public Output<List<String>> allowedDomains() {
        return this.allowedDomains == null ? Codegen.empty() : this.allowedDomains;
    }

    /**
     * Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.
     * 
     */
    @Import(name="challengeSecurityPreference")
      private final @Nullable Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference> challengeSecurityPreference;

    public Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference> challengeSecurityPreference() {
        return this.challengeSecurityPreference == null ? Codegen.empty() : this.challengeSecurityPreference;
    }

    /**
     * Describes how this key is integrated with the website.
     * 
     */
    @Import(name="integrationType", required=true)
      private final Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType> integrationType;

    public Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType> integrationType() {
        return this.integrationType;
    }

    public GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs(
        @Nullable Output<Boolean> allowAllDomains,
        @Nullable Output<Boolean> allowAmpTraffic,
        @Nullable Output<List<String>> allowedDomains,
        @Nullable Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference> challengeSecurityPreference,
        Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType> integrationType) {
        this.allowAllDomains = allowAllDomains;
        this.allowAmpTraffic = allowAmpTraffic;
        this.allowedDomains = allowedDomains;
        this.challengeSecurityPreference = challengeSecurityPreference;
        this.integrationType = Objects.requireNonNull(integrationType, "expected parameter 'integrationType' to be non-null");
    }

    private GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs() {
        this.allowAllDomains = Codegen.empty();
        this.allowAmpTraffic = Codegen.empty();
        this.allowedDomains = Codegen.empty();
        this.challengeSecurityPreference = Codegen.empty();
        this.integrationType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowAllDomains;
        private @Nullable Output<Boolean> allowAmpTraffic;
        private @Nullable Output<List<String>> allowedDomains;
        private @Nullable Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference> challengeSecurityPreference;
        private Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType> integrationType;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowAllDomains = defaults.allowAllDomains;
    	      this.allowAmpTraffic = defaults.allowAmpTraffic;
    	      this.allowedDomains = defaults.allowedDomains;
    	      this.challengeSecurityPreference = defaults.challengeSecurityPreference;
    	      this.integrationType = defaults.integrationType;
        }

        public Builder allowAllDomains(@Nullable Output<Boolean> allowAllDomains) {
            this.allowAllDomains = allowAllDomains;
            return this;
        }
        public Builder allowAllDomains(@Nullable Boolean allowAllDomains) {
            this.allowAllDomains = Codegen.ofNullable(allowAllDomains);
            return this;
        }
        public Builder allowAmpTraffic(@Nullable Output<Boolean> allowAmpTraffic) {
            this.allowAmpTraffic = allowAmpTraffic;
            return this;
        }
        public Builder allowAmpTraffic(@Nullable Boolean allowAmpTraffic) {
            this.allowAmpTraffic = Codegen.ofNullable(allowAmpTraffic);
            return this;
        }
        public Builder allowedDomains(@Nullable Output<List<String>> allowedDomains) {
            this.allowedDomains = allowedDomains;
            return this;
        }
        public Builder allowedDomains(@Nullable List<String> allowedDomains) {
            this.allowedDomains = Codegen.ofNullable(allowedDomains);
            return this;
        }
        public Builder allowedDomains(String... allowedDomains) {
            return allowedDomains(List.of(allowedDomains));
        }
        public Builder challengeSecurityPreference(@Nullable Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference> challengeSecurityPreference) {
            this.challengeSecurityPreference = challengeSecurityPreference;
            return this;
        }
        public Builder challengeSecurityPreference(@Nullable GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference challengeSecurityPreference) {
            this.challengeSecurityPreference = Codegen.ofNullable(challengeSecurityPreference);
            return this;
        }
        public Builder integrationType(Output<GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType> integrationType) {
            this.integrationType = Objects.requireNonNull(integrationType);
            return this;
        }
        public Builder integrationType(GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType integrationType) {
            this.integrationType = Output.of(Objects.requireNonNull(integrationType));
            return this;
        }        public GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs build() {
            return new GoogleCloudRecaptchaenterpriseV1WebKeySettingsArgs(allowAllDomains, allowAmpTraffic, allowedDomains, challengeSecurityPreference, integrationType);
        }
    }
}
