// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.baremetalsolution_v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * The description of the storage volume snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the storage volume snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An identifier for the snapshot, generated by the backend.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return An identifier for the snapshot, generated by the backend.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The size of the storage volume snapshot, in bytes.
     * 
     */
    @Import(name="sizeBytes")
    private @Nullable Output<String> sizeBytes;

    /**
     * @return The size of the storage volume snapshot, in bytes.
     * 
     */
    public Optional<Output<String>> sizeBytes() {
        return Optional.ofNullable(this.sizeBytes);
    }

    /**
     * The storage volume this snapshot belongs to.
     * 
     */
    @Import(name="storageVolume")
    private @Nullable Output<String> storageVolume;

    /**
     * @return The storage volume this snapshot belongs to.
     * 
     */
    public Optional<Output<String>> storageVolume() {
        return Optional.ofNullable(this.storageVolume);
    }

    @Import(name="volumeId", required=true)
    private Output<String> volumeId;

    public Output<String> volumeId() {
        return this.volumeId;
    }

    private SnapshotArgs() {}

    private SnapshotArgs(SnapshotArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.location = $.location;
        this.project = $.project;
        this.sizeBytes = $.sizeBytes;
        this.storageVolume = $.storageVolume;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotArgs $;

        public Builder() {
            $ = new SnapshotArgs();
        }

        public Builder(SnapshotArgs defaults) {
            $ = new SnapshotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the storage volume snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the storage volume snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id An identifier for the snapshot, generated by the backend.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id An identifier for the snapshot, generated by the backend.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sizeBytes The size of the storage volume snapshot, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder sizeBytes(@Nullable Output<String> sizeBytes) {
            $.sizeBytes = sizeBytes;
            return this;
        }

        /**
         * @param sizeBytes The size of the storage volume snapshot, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder sizeBytes(String sizeBytes) {
            return sizeBytes(Output.of(sizeBytes));
        }

        /**
         * @param storageVolume The storage volume this snapshot belongs to.
         * 
         * @return builder
         * 
         */
        public Builder storageVolume(@Nullable Output<String> storageVolume) {
            $.storageVolume = storageVolume;
            return this;
        }

        /**
         * @param storageVolume The storage volume this snapshot belongs to.
         * 
         * @return builder
         * 
         */
        public Builder storageVolume(String storageVolume) {
            return storageVolume(Output.of(storageVolume));
        }

        public Builder volumeId(Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public SnapshotArgs build() {
            $.volumeId = Objects.requireNonNull($.volumeId, "expected parameter 'volumeId' to be non-null");
            return $;
        }
    }

}
