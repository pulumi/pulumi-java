// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Details for an outcome with a FAILURE outcome summary.
 * 
 */
public final class FailureDetailResponse extends com.pulumi.resources.InvokeArgs {

    public static final FailureDetailResponse Empty = new FailureDetailResponse();

    /**
     * If the failure was severe because the system (app) under test crashed.
     * 
     */
    @Import(name="crashed", required=true)
    private Boolean crashed;

    public Boolean crashed() {
        return this.crashed;
    }

    /**
     * If the device ran out of memory during a test, causing the test to crash.
     * 
     */
    @Import(name="deviceOutOfMemory", required=true)
    private Boolean deviceOutOfMemory;

    public Boolean deviceOutOfMemory() {
        return this.deviceOutOfMemory;
    }

    /**
     * If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
     * 
     */
    @Import(name="failedRoboscript", required=true)
    private Boolean failedRoboscript;

    public Boolean failedRoboscript() {
        return this.failedRoboscript;
    }

    /**
     * If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
     * 
     */
    @Import(name="notInstalled", required=true)
    private Boolean notInstalled;

    public Boolean notInstalled() {
        return this.notInstalled;
    }

    /**
     * If a native process (including any other than the app) crashed.
     * 
     */
    @Import(name="otherNativeCrash", required=true)
    private Boolean otherNativeCrash;

    public Boolean otherNativeCrash() {
        return this.otherNativeCrash;
    }

    /**
     * If the test overran some time limit, and that is why it failed.
     * 
     */
    @Import(name="timedOut", required=true)
    private Boolean timedOut;

    public Boolean timedOut() {
        return this.timedOut;
    }

    /**
     * If the robo was unable to crawl the app; perhaps because the app did not start.
     * 
     */
    @Import(name="unableToCrawl", required=true)
    private Boolean unableToCrawl;

    public Boolean unableToCrawl() {
        return this.unableToCrawl;
    }

    private FailureDetailResponse() {}

    private FailureDetailResponse(FailureDetailResponse $) {
        this.crashed = $.crashed;
        this.deviceOutOfMemory = $.deviceOutOfMemory;
        this.failedRoboscript = $.failedRoboscript;
        this.notInstalled = $.notInstalled;
        this.otherNativeCrash = $.otherNativeCrash;
        this.timedOut = $.timedOut;
        this.unableToCrawl = $.unableToCrawl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FailureDetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FailureDetailResponse $;

        public Builder() {
            $ = new FailureDetailResponse();
        }

        public Builder(FailureDetailResponse defaults) {
            $ = new FailureDetailResponse(Objects.requireNonNull(defaults));
        }

        public Builder crashed(Boolean crashed) {
            $.crashed = crashed;
            return this;
        }

        public Builder deviceOutOfMemory(Boolean deviceOutOfMemory) {
            $.deviceOutOfMemory = deviceOutOfMemory;
            return this;
        }

        public Builder failedRoboscript(Boolean failedRoboscript) {
            $.failedRoboscript = failedRoboscript;
            return this;
        }

        public Builder notInstalled(Boolean notInstalled) {
            $.notInstalled = notInstalled;
            return this;
        }

        public Builder otherNativeCrash(Boolean otherNativeCrash) {
            $.otherNativeCrash = otherNativeCrash;
            return this;
        }

        public Builder timedOut(Boolean timedOut) {
            $.timedOut = timedOut;
            return this;
        }

        public Builder unableToCrawl(Boolean unableToCrawl) {
            $.unableToCrawl = unableToCrawl;
            return this;
        }

        public FailureDetailResponse build() {
            $.crashed = Objects.requireNonNull($.crashed, "expected parameter 'crashed' to be non-null");
            $.deviceOutOfMemory = Objects.requireNonNull($.deviceOutOfMemory, "expected parameter 'deviceOutOfMemory' to be non-null");
            $.failedRoboscript = Objects.requireNonNull($.failedRoboscript, "expected parameter 'failedRoboscript' to be non-null");
            $.notInstalled = Objects.requireNonNull($.notInstalled, "expected parameter 'notInstalled' to be non-null");
            $.otherNativeCrash = Objects.requireNonNull($.otherNativeCrash, "expected parameter 'otherNativeCrash' to be non-null");
            $.timedOut = Objects.requireNonNull($.timedOut, "expected parameter 'timedOut' to be non-null");
            $.unableToCrawl = Objects.requireNonNull($.unableToCrawl, "expected parameter 'unableToCrawl' to be non-null");
            return $;
        }
    }

}
