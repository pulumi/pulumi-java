// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.InitializingReplicationStepResponse;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.PostProcessingStepResponse;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.ReplicatingStepResponse;
import java.lang.String;
import java.util.Objects;


/**
 * CycleStep hold information about a step progress.
 * 
 */
public final class CycleStepResponse extends com.pulumi.resources.InvokeArgs {

    public static final CycleStepResponse Empty = new CycleStepResponse();

    /**
     * The time the cycle step has ended.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    /**
     * @return The time the cycle step has ended.
     * 
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * Initializing replication step.
     * 
     */
    @Import(name="initializingReplication", required=true)
    private InitializingReplicationStepResponse initializingReplication;

    /**
     * @return Initializing replication step.
     * 
     */
    public InitializingReplicationStepResponse initializingReplication() {
        return this.initializingReplication;
    }

    /**
     * Post processing step.
     * 
     */
    @Import(name="postProcessing", required=true)
    private PostProcessingStepResponse postProcessing;

    /**
     * @return Post processing step.
     * 
     */
    public PostProcessingStepResponse postProcessing() {
        return this.postProcessing;
    }

    /**
     * Replicating step.
     * 
     */
    @Import(name="replicating", required=true)
    private ReplicatingStepResponse replicating;

    /**
     * @return Replicating step.
     * 
     */
    public ReplicatingStepResponse replicating() {
        return this.replicating;
    }

    /**
     * The time the cycle step has started.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The time the cycle step has started.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    private CycleStepResponse() {}

    private CycleStepResponse(CycleStepResponse $) {
        this.endTime = $.endTime;
        this.initializingReplication = $.initializingReplication;
        this.postProcessing = $.postProcessing;
        this.replicating = $.replicating;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CycleStepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CycleStepResponse $;

        public Builder() {
            $ = new CycleStepResponse();
        }

        public Builder(CycleStepResponse defaults) {
            $ = new CycleStepResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The time the cycle step has ended.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param initializingReplication Initializing replication step.
         * 
         * @return builder
         * 
         */
        public Builder initializingReplication(InitializingReplicationStepResponse initializingReplication) {
            $.initializingReplication = initializingReplication;
            return this;
        }

        /**
         * @param postProcessing Post processing step.
         * 
         * @return builder
         * 
         */
        public Builder postProcessing(PostProcessingStepResponse postProcessing) {
            $.postProcessing = postProcessing;
            return this;
        }

        /**
         * @param replicating Replicating step.
         * 
         * @return builder
         * 
         */
        public Builder replicating(ReplicatingStepResponse replicating) {
            $.replicating = replicating;
            return this;
        }

        /**
         * @param startTime The time the cycle step has started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public CycleStepResponse build() {
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.initializingReplication = Objects.requireNonNull($.initializingReplication, "expected parameter 'initializingReplication' to be non-null");
            $.postProcessing = Objects.requireNonNull($.postProcessing, "expected parameter 'postProcessing' to be non-null");
            $.replicating = Objects.requireNonNull($.replicating, "expected parameter 'replicating' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
