// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v2beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v2beta1.inputs.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Response media object for media content card.
 * 
 */
public final class GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse Empty = new GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse();

    /**
     * Url where the media is stored.
     * 
     */
    @Import(name="contentUrl", required=true)
    private String contentUrl;

    public String contentUrl() {
        return this.contentUrl;
    }

    /**
     * Optional. Description of media card.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * Optional. Icon to display above media content.
     * 
     */
    @Import(name="icon", required=true)
    private GoogleCloudDialogflowV2beta1IntentMessageImageResponse icon;

    public GoogleCloudDialogflowV2beta1IntentMessageImageResponse icon() {
        return this.icon;
    }

    /**
     * Optional. Image to display above media content.
     * 
     */
    @Import(name="largeImage", required=true)
    private GoogleCloudDialogflowV2beta1IntentMessageImageResponse largeImage;

    public GoogleCloudDialogflowV2beta1IntentMessageImageResponse largeImage() {
        return this.largeImage;
    }

    /**
     * Name of media card.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    private GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse() {}

    private GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse(GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse $) {
        this.contentUrl = $.contentUrl;
        this.description = $.description;
        this.icon = $.icon;
        this.largeImage = $.largeImage;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse();
        }

        public Builder(GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse defaults) {
            $ = new GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse(Objects.requireNonNull(defaults));
        }

        public Builder contentUrl(String contentUrl) {
            $.contentUrl = contentUrl;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder icon(GoogleCloudDialogflowV2beta1IntentMessageImageResponse icon) {
            $.icon = icon;
            return this;
        }

        public Builder largeImage(GoogleCloudDialogflowV2beta1IntentMessageImageResponse largeImage) {
            $.largeImage = largeImage;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse build() {
            $.contentUrl = Objects.requireNonNull($.contentUrl, "expected parameter 'contentUrl' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.icon = Objects.requireNonNull($.icon, "expected parameter 'icon' to be non-null");
            $.largeImage = Objects.requireNonNull($.largeImage, "expected parameter 'largeImage' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
