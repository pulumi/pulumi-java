// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkmanagement_v1.inputs.AbortInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.CloudSQLInstanceInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.DeliverInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.DropInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.EndpointInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.FirewallInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.ForwardInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.ForwardingRuleInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.GKEMasterInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.InstanceInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.LoadBalancerInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.NetworkInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.RouteInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.VpnGatewayInfoResponse;
import com.pulumi.googlenative.networkmanagement_v1.inputs.VpnTunnelInfoResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
 * 
 */
public final class StepResponse extends com.pulumi.resources.InvokeArgs {

    public static final StepResponse Empty = new StepResponse();

    /**
     * Display information of the final state &#34;abort&#34; and reason.
     * 
     */
    @Import(name="abort", required=true)
    private AbortInfoResponse abort;

    public AbortInfoResponse abort() {
        return this.abort;
    }

    /**
     * This is a step that leads to the final state Drop.
     * 
     */
    @Import(name="causesDrop", required=true)
    private Boolean causesDrop;

    public Boolean causesDrop() {
        return this.causesDrop;
    }

    /**
     * Display information of a Cloud SQL instance.
     * 
     */
    @Import(name="cloudSqlInstance", required=true)
    private CloudSQLInstanceInfoResponse cloudSqlInstance;

    public CloudSQLInstanceInfoResponse cloudSqlInstance() {
        return this.cloudSqlInstance;
    }

    /**
     * Display information of the final state &#34;deliver&#34; and reason.
     * 
     */
    @Import(name="deliver", required=true)
    private DeliverInfoResponse deliver;

    public DeliverInfoResponse deliver() {
        return this.deliver;
    }

    /**
     * A description of the step. Usually this is a summary of the state.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * Display information of the final state &#34;drop&#34; and reason.
     * 
     */
    @Import(name="drop", required=true)
    private DropInfoResponse drop;

    public DropInfoResponse drop() {
        return this.drop;
    }

    /**
     * Display information of the source and destination under analysis. The endpoint information in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
     * 
     */
    @Import(name="endpoint", required=true)
    private EndpointInfoResponse endpoint;

    public EndpointInfoResponse endpoint() {
        return this.endpoint;
    }

    /**
     * Display information of a Compute Engine firewall rule.
     * 
     */
    @Import(name="firewall", required=true)
    private FirewallInfoResponse firewall;

    public FirewallInfoResponse firewall() {
        return this.firewall;
    }

    /**
     * Display information of the final state &#34;forward&#34; and reason.
     * 
     */
    @Import(name="forward", required=true)
    private ForwardInfoResponse forward;

    public ForwardInfoResponse forward() {
        return this.forward;
    }

    /**
     * Display information of a Compute Engine forwarding rule.
     * 
     */
    @Import(name="forwardingRule", required=true)
    private ForwardingRuleInfoResponse forwardingRule;

    public ForwardingRuleInfoResponse forwardingRule() {
        return this.forwardingRule;
    }

    /**
     * Display information of a Google Kubernetes Engine cluster master.
     * 
     */
    @Import(name="gkeMaster", required=true)
    private GKEMasterInfoResponse gkeMaster;

    public GKEMasterInfoResponse gkeMaster() {
        return this.gkeMaster;
    }

    /**
     * Display information of a Compute Engine instance.
     * 
     */
    @Import(name="instance", required=true)
    private InstanceInfoResponse instance;

    public InstanceInfoResponse instance() {
        return this.instance;
    }

    /**
     * Display information of the load balancers.
     * 
     */
    @Import(name="loadBalancer", required=true)
    private LoadBalancerInfoResponse loadBalancer;

    public LoadBalancerInfoResponse loadBalancer() {
        return this.loadBalancer;
    }

    /**
     * Display information of a Google Cloud network.
     * 
     */
    @Import(name="network", required=true)
    private NetworkInfoResponse network;

    public NetworkInfoResponse network() {
        return this.network;
    }

    /**
     * Project ID that contains the configuration this step is validating.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    public String project() {
        return this.project;
    }

    /**
     * Display information of a Compute Engine route.
     * 
     */
    @Import(name="route", required=true)
    private RouteInfoResponse route;

    public RouteInfoResponse route() {
        return this.route;
    }

    /**
     * Each step is in one of the pre-defined states.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Display information of a Compute Engine VPN gateway.
     * 
     */
    @Import(name="vpnGateway", required=true)
    private VpnGatewayInfoResponse vpnGateway;

    public VpnGatewayInfoResponse vpnGateway() {
        return this.vpnGateway;
    }

    /**
     * Display information of a Compute Engine VPN tunnel.
     * 
     */
    @Import(name="vpnTunnel", required=true)
    private VpnTunnelInfoResponse vpnTunnel;

    public VpnTunnelInfoResponse vpnTunnel() {
        return this.vpnTunnel;
    }

    private StepResponse() {}

    private StepResponse(StepResponse $) {
        this.abort = $.abort;
        this.causesDrop = $.causesDrop;
        this.cloudSqlInstance = $.cloudSqlInstance;
        this.deliver = $.deliver;
        this.description = $.description;
        this.drop = $.drop;
        this.endpoint = $.endpoint;
        this.firewall = $.firewall;
        this.forward = $.forward;
        this.forwardingRule = $.forwardingRule;
        this.gkeMaster = $.gkeMaster;
        this.instance = $.instance;
        this.loadBalancer = $.loadBalancer;
        this.network = $.network;
        this.project = $.project;
        this.route = $.route;
        this.state = $.state;
        this.vpnGateway = $.vpnGateway;
        this.vpnTunnel = $.vpnTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StepResponse $;

        public Builder() {
            $ = new StepResponse();
        }

        public Builder(StepResponse defaults) {
            $ = new StepResponse(Objects.requireNonNull(defaults));
        }

        public Builder abort(AbortInfoResponse abort) {
            $.abort = abort;
            return this;
        }

        public Builder causesDrop(Boolean causesDrop) {
            $.causesDrop = causesDrop;
            return this;
        }

        public Builder cloudSqlInstance(CloudSQLInstanceInfoResponse cloudSqlInstance) {
            $.cloudSqlInstance = cloudSqlInstance;
            return this;
        }

        public Builder deliver(DeliverInfoResponse deliver) {
            $.deliver = deliver;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder drop(DropInfoResponse drop) {
            $.drop = drop;
            return this;
        }

        public Builder endpoint(EndpointInfoResponse endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder firewall(FirewallInfoResponse firewall) {
            $.firewall = firewall;
            return this;
        }

        public Builder forward(ForwardInfoResponse forward) {
            $.forward = forward;
            return this;
        }

        public Builder forwardingRule(ForwardingRuleInfoResponse forwardingRule) {
            $.forwardingRule = forwardingRule;
            return this;
        }

        public Builder gkeMaster(GKEMasterInfoResponse gkeMaster) {
            $.gkeMaster = gkeMaster;
            return this;
        }

        public Builder instance(InstanceInfoResponse instance) {
            $.instance = instance;
            return this;
        }

        public Builder loadBalancer(LoadBalancerInfoResponse loadBalancer) {
            $.loadBalancer = loadBalancer;
            return this;
        }

        public Builder network(NetworkInfoResponse network) {
            $.network = network;
            return this;
        }

        public Builder project(String project) {
            $.project = project;
            return this;
        }

        public Builder route(RouteInfoResponse route) {
            $.route = route;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder vpnGateway(VpnGatewayInfoResponse vpnGateway) {
            $.vpnGateway = vpnGateway;
            return this;
        }

        public Builder vpnTunnel(VpnTunnelInfoResponse vpnTunnel) {
            $.vpnTunnel = vpnTunnel;
            return this;
        }

        public StepResponse build() {
            $.abort = Objects.requireNonNull($.abort, "expected parameter 'abort' to be non-null");
            $.causesDrop = Objects.requireNonNull($.causesDrop, "expected parameter 'causesDrop' to be non-null");
            $.cloudSqlInstance = Objects.requireNonNull($.cloudSqlInstance, "expected parameter 'cloudSqlInstance' to be non-null");
            $.deliver = Objects.requireNonNull($.deliver, "expected parameter 'deliver' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.drop = Objects.requireNonNull($.drop, "expected parameter 'drop' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.firewall = Objects.requireNonNull($.firewall, "expected parameter 'firewall' to be non-null");
            $.forward = Objects.requireNonNull($.forward, "expected parameter 'forward' to be non-null");
            $.forwardingRule = Objects.requireNonNull($.forwardingRule, "expected parameter 'forwardingRule' to be non-null");
            $.gkeMaster = Objects.requireNonNull($.gkeMaster, "expected parameter 'gkeMaster' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.loadBalancer = Objects.requireNonNull($.loadBalancer, "expected parameter 'loadBalancer' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.route = Objects.requireNonNull($.route, "expected parameter 'route' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.vpnGateway = Objects.requireNonNull($.vpnGateway, "expected parameter 'vpnGateway' to be non-null");
            $.vpnTunnel = Objects.requireNonNull($.vpnTunnel, "expected parameter 'vpnTunnel' to be non-null");
            return $;
        }
    }

}
