// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudkms.v1.outputs.CryptoKeyVersionResponse;
import com.pulumi.googlenative.cloudkms.v1.outputs.CryptoKeyVersionTemplateResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCryptoKeyResult {
    /**
     * @return The time at which this CryptoKey was created.
     * 
     */
    private final String createTime;
    /**
     * @return Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
     * 
     */
    private final String cryptoKeyBackend;
    /**
     * @return Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
     * 
     */
    private final String destroyScheduledDuration;
    /**
     * @return Immutable. Whether this key may contain imported versions only.
     * 
     */
    private final Boolean importOnly;
    /**
     * @return Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return The resource name for this CryptoKey in the format `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*`.
     * 
     */
    private final String name;
    /**
     * @return At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    private final String nextRotationTime;
    /**
     * @return A copy of the &#34;primary&#34; CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey&#39;s primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
     * 
     */
    private final CryptoKeyVersionResponse primary;
    /**
     * @return Immutable. The immutable purpose of this CryptoKey.
     * 
     */
    private final String purpose;
    /**
     * @return next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    private final String rotationPeriod;
    /**
     * @return A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
     * 
     */
    private final CryptoKeyVersionTemplateResponse versionTemplate;

    @CustomType.Constructor
    private GetCryptoKeyResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("cryptoKeyBackend") String cryptoKeyBackend,
        @CustomType.Parameter("destroyScheduledDuration") String destroyScheduledDuration,
        @CustomType.Parameter("importOnly") Boolean importOnly,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nextRotationTime") String nextRotationTime,
        @CustomType.Parameter("primary") CryptoKeyVersionResponse primary,
        @CustomType.Parameter("purpose") String purpose,
        @CustomType.Parameter("rotationPeriod") String rotationPeriod,
        @CustomType.Parameter("versionTemplate") CryptoKeyVersionTemplateResponse versionTemplate) {
        this.createTime = createTime;
        this.cryptoKeyBackend = cryptoKeyBackend;
        this.destroyScheduledDuration = destroyScheduledDuration;
        this.importOnly = importOnly;
        this.labels = labels;
        this.name = name;
        this.nextRotationTime = nextRotationTime;
        this.primary = primary;
        this.purpose = purpose;
        this.rotationPeriod = rotationPeriod;
        this.versionTemplate = versionTemplate;
    }

    /**
     * @return The time at which this CryptoKey was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*{@literal /}locations/*{@literal /}ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
     * 
     */
    public String cryptoKeyBackend() {
        return this.cryptoKeyBackend;
    }
    /**
     * @return Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
     * 
     */
    public String destroyScheduledDuration() {
        return this.destroyScheduledDuration;
    }
    /**
     * @return Immutable. Whether this key may contain imported versions only.
     * 
     */
    public Boolean importOnly() {
        return this.importOnly;
    }
    /**
     * @return Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name for this CryptoKey in the format `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    public String nextRotationTime() {
        return this.nextRotationTime;
    }
    /**
     * @return A copy of the &#34;primary&#34; CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey&#39;s primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
     * 
     */
    public CryptoKeyVersionResponse primary() {
        return this.primary;
    }
    /**
     * @return Immutable. The immutable purpose of this CryptoKey.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     * 
     */
    public String rotationPeriod() {
        return this.rotationPeriod;
    }
    /**
     * @return A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
     * 
     */
    public CryptoKeyVersionTemplateResponse versionTemplate() {
        return this.versionTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoKeyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String cryptoKeyBackend;
        private String destroyScheduledDuration;
        private Boolean importOnly;
        private Map<String,String> labels;
        private String name;
        private String nextRotationTime;
        private CryptoKeyVersionResponse primary;
        private String purpose;
        private String rotationPeriod;
        private CryptoKeyVersionTemplateResponse versionTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCryptoKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.cryptoKeyBackend = defaults.cryptoKeyBackend;
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.importOnly = defaults.importOnly;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.nextRotationTime = defaults.nextRotationTime;
    	      this.primary = defaults.primary;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.versionTemplate = defaults.versionTemplate;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder cryptoKeyBackend(String cryptoKeyBackend) {
            this.cryptoKeyBackend = Objects.requireNonNull(cryptoKeyBackend);
            return this;
        }
        public Builder destroyScheduledDuration(String destroyScheduledDuration) {
            this.destroyScheduledDuration = Objects.requireNonNull(destroyScheduledDuration);
            return this;
        }
        public Builder importOnly(Boolean importOnly) {
            this.importOnly = Objects.requireNonNull(importOnly);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nextRotationTime(String nextRotationTime) {
            this.nextRotationTime = Objects.requireNonNull(nextRotationTime);
            return this;
        }
        public Builder primary(CryptoKeyVersionResponse primary) {
            this.primary = Objects.requireNonNull(primary);
            return this;
        }
        public Builder purpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }
        public Builder rotationPeriod(String rotationPeriod) {
            this.rotationPeriod = Objects.requireNonNull(rotationPeriod);
            return this;
        }
        public Builder versionTemplate(CryptoKeyVersionTemplateResponse versionTemplate) {
            this.versionTemplate = Objects.requireNonNull(versionTemplate);
            return this;
        }        public GetCryptoKeyResult build() {
            return new GetCryptoKeyResult(createTime, cryptoKeyBackend, destroyScheduledDuration, importOnly, labels, name, nextRotationTime, primary, purpose, rotationPeriod, versionTemplate);
        }
    }
}
