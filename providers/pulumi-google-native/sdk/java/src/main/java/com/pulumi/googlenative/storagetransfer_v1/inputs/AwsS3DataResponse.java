// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer_v1.inputs.AwsAccessKeyResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object&#39;s name is the S3 object&#39;s key name.
 * 
 */
public final class AwsS3DataResponse extends com.pulumi.resources.InvokeArgs {

    public static final AwsS3DataResponse Empty = new AwsS3DataResponse();

    /**
     * Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
     * 
     */
    @Import(name="awsAccessKey", required=true)
    private AwsAccessKeyResponse awsAccessKey;

    /**
     * @return Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
     * 
     */
    public AwsAccessKeyResponse awsAccessKey() {
        return this.awsAccessKey;
    }

    /**
     * S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
     * 
     */
    @Import(name="bucketName", required=true)
    private String bucketName;

    /**
     * @return S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }

    /**
     * Root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return Root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.
     * 
     */
    @Import(name="roleArn", required=true)
    private String roleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }

    private AwsS3DataResponse() {}

    private AwsS3DataResponse(AwsS3DataResponse $) {
        this.awsAccessKey = $.awsAccessKey;
        this.bucketName = $.bucketName;
        this.path = $.path;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsS3DataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsS3DataResponse $;

        public Builder() {
            $ = new AwsS3DataResponse();
        }

        public Builder(AwsS3DataResponse defaults) {
            $ = new AwsS3DataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccessKey Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
         * 
         * @return builder
         * 
         */
        public Builder awsAccessKey(AwsAccessKeyResponse awsAccessKey) {
            $.awsAccessKey = awsAccessKey;
            return this;
        }

        /**
         * @param bucketName S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param path Root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public AwsS3DataResponse build() {
            $.awsAccessKey = Objects.requireNonNull($.awsAccessKey, "expected parameter 'awsAccessKey' to be non-null");
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
