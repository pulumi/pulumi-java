// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement.v1.enums.EnumSyntax;
import com.pulumi.googlenative.servicemanagement.v1.inputs.EnumValueArgs;
import com.pulumi.googlenative.servicemanagement.v1.inputs.OptionArgs;
import com.pulumi.googlenative.servicemanagement.v1.inputs.SourceContextArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Enum type definition.
 * 
 */
public final class EnumArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnumArgs Empty = new EnumArgs();

    /**
     * Enum value definitions.
     * 
     */
    @Import(name="enumvalue")
    private @Nullable Output<List<EnumValueArgs>> enumvalue;

    /**
     * @return Enum value definitions.
     * 
     */
    public Optional<Output<List<EnumValueArgs>>> enumvalue() {
        return Optional.ofNullable(this.enumvalue);
    }

    /**
     * Enum type name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Enum type name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Protocol buffer options.
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<OptionArgs>> options;

    /**
     * @return Protocol buffer options.
     * 
     */
    public Optional<Output<List<OptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The source context.
     * 
     */
    @Import(name="sourceContext")
    private @Nullable Output<SourceContextArgs> sourceContext;

    /**
     * @return The source context.
     * 
     */
    public Optional<Output<SourceContextArgs>> sourceContext() {
        return Optional.ofNullable(this.sourceContext);
    }

    /**
     * The source syntax.
     * 
     */
    @Import(name="syntax")
    private @Nullable Output<EnumSyntax> syntax;

    /**
     * @return The source syntax.
     * 
     */
    public Optional<Output<EnumSyntax>> syntax() {
        return Optional.ofNullable(this.syntax);
    }

    private EnumArgs() {}

    private EnumArgs(EnumArgs $) {
        this.enumvalue = $.enumvalue;
        this.name = $.name;
        this.options = $.options;
        this.sourceContext = $.sourceContext;
        this.syntax = $.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnumArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnumArgs $;

        public Builder() {
            $ = new EnumArgs();
        }

        public Builder(EnumArgs defaults) {
            $ = new EnumArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enumvalue Enum value definitions.
         * 
         * @return builder
         * 
         */
        public Builder enumvalue(@Nullable Output<List<EnumValueArgs>> enumvalue) {
            $.enumvalue = enumvalue;
            return this;
        }

        /**
         * @param enumvalue Enum value definitions.
         * 
         * @return builder
         * 
         */
        public Builder enumvalue(List<EnumValueArgs> enumvalue) {
            return enumvalue(Output.of(enumvalue));
        }

        /**
         * @param enumvalue Enum value definitions.
         * 
         * @return builder
         * 
         */
        public Builder enumvalue(EnumValueArgs... enumvalue) {
            return enumvalue(List.of(enumvalue));
        }

        /**
         * @param name Enum type name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Enum type name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param options Protocol buffer options.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<OptionArgs>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Protocol buffer options.
         * 
         * @return builder
         * 
         */
        public Builder options(List<OptionArgs> options) {
            return options(Output.of(options));
        }

        /**
         * @param options Protocol buffer options.
         * 
         * @return builder
         * 
         */
        public Builder options(OptionArgs... options) {
            return options(List.of(options));
        }

        /**
         * @param sourceContext The source context.
         * 
         * @return builder
         * 
         */
        public Builder sourceContext(@Nullable Output<SourceContextArgs> sourceContext) {
            $.sourceContext = sourceContext;
            return this;
        }

        /**
         * @param sourceContext The source context.
         * 
         * @return builder
         * 
         */
        public Builder sourceContext(SourceContextArgs sourceContext) {
            return sourceContext(Output.of(sourceContext));
        }

        /**
         * @param syntax The source syntax.
         * 
         * @return builder
         * 
         */
        public Builder syntax(@Nullable Output<EnumSyntax> syntax) {
            $.syntax = syntax;
            return this;
        }

        /**
         * @param syntax The source syntax.
         * 
         * @return builder
         * 
         */
        public Builder syntax(EnumSyntax syntax) {
            return syntax(Output.of(syntax));
        }

        public EnumArgs build() {
            return $;
        }
    }

}
