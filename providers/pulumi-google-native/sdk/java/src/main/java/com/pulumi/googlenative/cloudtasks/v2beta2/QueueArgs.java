// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudtasks.v2beta2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudtasks.v2beta2.inputs.AppEngineHttpTargetArgs;
import com.pulumi.googlenative.cloudtasks.v2beta2.inputs.PullTargetArgs;
import com.pulumi.googlenative.cloudtasks.v2beta2.inputs.RateLimitsArgs;
import com.pulumi.googlenative.cloudtasks.v2beta2.inputs.RetryConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * App Engine HTTP target. An App Engine queue is a queue that has an AppEngineHttpTarget.
     * 
     */
    @Import(name="appEngineHttpTarget")
    private @Nullable Output<AppEngineHttpTargetArgs> appEngineHttpTarget;

    /**
     * @return App Engine HTTP target. An App Engine queue is a queue that has an AppEngineHttpTarget.
     * 
     */
    public Optional<Output<AppEngineHttpTargetArgs>> appEngineHttpTarget() {
        return Optional.ofNullable(this.appEngineHttpTarget);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue&#39;s location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue&#39;s location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Pull target. A pull queue is a queue that has a PullTarget.
     * 
     */
    @Import(name="pullTarget")
    private @Nullable Output<PullTargetArgs> pullTarget;

    /**
     * @return Pull target. A pull queue is a queue that has a PullTarget.
     * 
     */
    public Optional<Output<PullTargetArgs>> pullTarget() {
        return Optional.ofNullable(this.pullTarget);
    }

    /**
     * Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts however they control how tasks are attempted in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc).
     * 
     */
    @Import(name="rateLimits")
    private @Nullable Output<RateLimitsArgs> rateLimits;

    /**
     * @return Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts however they control how tasks are attempted in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc).
     * 
     */
    public Optional<Output<RateLimitsArgs>> rateLimits() {
        return Optional.ofNullable(this.rateLimits);
    }

    /**
     * Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
     * 
     */
    @Import(name="retryConfig")
    private @Nullable Output<RetryConfigArgs> retryConfig;

    /**
     * @return Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
     * 
     */
    public Optional<Output<RetryConfigArgs>> retryConfig() {
        return Optional.ofNullable(this.retryConfig);
    }

    /**
     * The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
     * 
     */
    @Import(name="taskTtl")
    private @Nullable Output<String> taskTtl;

    /**
     * @return The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
     * 
     */
    public Optional<Output<String>> taskTtl() {
        return Optional.ofNullable(this.taskTtl);
    }

    /**
     * The task tombstone time to live (TTL). After a task is deleted or completed, the task&#39;s tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can&#39;t be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
     * 
     */
    @Import(name="tombstoneTtl")
    private @Nullable Output<String> tombstoneTtl;

    /**
     * @return The task tombstone time to live (TTL). After a task is deleted or completed, the task&#39;s tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can&#39;t be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
     * 
     */
    public Optional<Output<String>> tombstoneTtl() {
        return Optional.ofNullable(this.tombstoneTtl);
    }

    private QueueArgs() {}

    private QueueArgs(QueueArgs $) {
        this.appEngineHttpTarget = $.appEngineHttpTarget;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pullTarget = $.pullTarget;
        this.rateLimits = $.rateLimits;
        this.retryConfig = $.retryConfig;
        this.taskTtl = $.taskTtl;
        this.tombstoneTtl = $.tombstoneTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueArgs $;

        public Builder() {
            $ = new QueueArgs();
        }

        public Builder(QueueArgs defaults) {
            $ = new QueueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appEngineHttpTarget App Engine HTTP target. An App Engine queue is a queue that has an AppEngineHttpTarget.
         * 
         * @return builder
         * 
         */
        public Builder appEngineHttpTarget(@Nullable Output<AppEngineHttpTargetArgs> appEngineHttpTarget) {
            $.appEngineHttpTarget = appEngineHttpTarget;
            return this;
        }

        /**
         * @param appEngineHttpTarget App Engine HTTP target. An App Engine queue is a queue that has an AppEngineHttpTarget.
         * 
         * @return builder
         * 
         */
        public Builder appEngineHttpTarget(AppEngineHttpTargetArgs appEngineHttpTarget) {
            return appEngineHttpTarget(Output.of(appEngineHttpTarget));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue&#39;s location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue&#39;s location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pullTarget Pull target. A pull queue is a queue that has a PullTarget.
         * 
         * @return builder
         * 
         */
        public Builder pullTarget(@Nullable Output<PullTargetArgs> pullTarget) {
            $.pullTarget = pullTarget;
            return this;
        }

        /**
         * @param pullTarget Pull target. A pull queue is a queue that has a PullTarget.
         * 
         * @return builder
         * 
         */
        public Builder pullTarget(PullTargetArgs pullTarget) {
            return pullTarget(Output.of(pullTarget));
        }

        /**
         * @param rateLimits Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts however they control how tasks are attempted in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc).
         * 
         * @return builder
         * 
         */
        public Builder rateLimits(@Nullable Output<RateLimitsArgs> rateLimits) {
            $.rateLimits = rateLimits;
            return this;
        }

        /**
         * @param rateLimits Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts however they control how tasks are attempted in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc).
         * 
         * @return builder
         * 
         */
        public Builder rateLimits(RateLimitsArgs rateLimits) {
            return rateLimits(Output.of(rateLimits));
        }

        /**
         * @param retryConfig Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
         * 
         * @return builder
         * 
         */
        public Builder retryConfig(@Nullable Output<RetryConfigArgs> retryConfig) {
            $.retryConfig = retryConfig;
            return this;
        }

        /**
         * @param retryConfig Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
         * 
         * @return builder
         * 
         */
        public Builder retryConfig(RetryConfigArgs retryConfig) {
            return retryConfig(Output.of(retryConfig));
        }

        /**
         * @param taskTtl The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
         * 
         * @return builder
         * 
         */
        public Builder taskTtl(@Nullable Output<String> taskTtl) {
            $.taskTtl = taskTtl;
            return this;
        }

        /**
         * @param taskTtl The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
         * 
         * @return builder
         * 
         */
        public Builder taskTtl(String taskTtl) {
            return taskTtl(Output.of(taskTtl));
        }

        /**
         * @param tombstoneTtl The task tombstone time to live (TTL). After a task is deleted or completed, the task&#39;s tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can&#39;t be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
         * 
         * @return builder
         * 
         */
        public Builder tombstoneTtl(@Nullable Output<String> tombstoneTtl) {
            $.tombstoneTtl = tombstoneTtl;
            return this;
        }

        /**
         * @param tombstoneTtl The task tombstone time to live (TTL). After a task is deleted or completed, the task&#39;s tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can&#39;t be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
         * 
         * @return builder
         * 
         */
        public Builder tombstoneTtl(String tombstoneTtl) {
            return tombstoneTtl(Output.of(tombstoneTtl));
        }

        public QueueArgs build() {
            return $;
        }
    }

}
