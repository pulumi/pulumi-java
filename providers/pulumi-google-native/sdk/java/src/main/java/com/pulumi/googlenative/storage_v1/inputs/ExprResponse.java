// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Represents an expression text. Example: title: &#34;User account presence&#34; description: &#34;Determines whether the request has a user account&#34; expression: &#34;size(request.user) &gt; 0&#34;
 * 
 */
public final class ExprResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExprResponse Empty = new ExprResponse();

    /**
     * An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.
     * 
     */
    @Import(name="expression", required=true)
    private String expression;

    /**
     * @return Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.
     * 
     */
    public String expression() {
        return this.expression;
    }

    /**
     * An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     * 
     */
    @Import(name="title", required=true)
    private String title;

    /**
     * @return An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     * 
     */
    public String title() {
        return this.title;
    }

    private ExprResponse() {}

    private ExprResponse(ExprResponse $) {
        this.description = $.description;
        this.expression = $.expression;
        this.location = $.location;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExprResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExprResponse $;

        public Builder() {
            $ = new ExprResponse();
        }

        public Builder(ExprResponse defaults) {
            $ = new ExprResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param expression Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param location An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param title An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            $.title = title;
            return this;
        }

        public ExprResponse build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
