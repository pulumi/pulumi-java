// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream_v1.inputs.MysqlSslConfigResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * MySQL database profile.
 * 
 */
public final class MysqlProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final MysqlProfileResponse Empty = new MysqlProfileResponse();

    /**
     * Hostname for the MySQL connection.
     * 
     */
    @Import(name="hostname", required=true)
      private final String hostname;

    public String hostname() {
        return this.hostname;
    }

    /**
     * Input only. Password for the MySQL connection.
     * 
     */
    @Import(name="password", required=true)
      private final String password;

    public String password() {
        return this.password;
    }

    /**
     * Port for the MySQL connection, default value is 3306.
     * 
     */
    @Import(name="port", required=true)
      private final Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * SSL configuration for the MySQL connection.
     * 
     */
    @Import(name="sslConfig", required=true)
      private final MysqlSslConfigResponse sslConfig;

    public MysqlSslConfigResponse sslConfig() {
        return this.sslConfig;
    }

    /**
     * Username for the MySQL connection.
     * 
     */
    @Import(name="username", required=true)
      private final String username;

    public String username() {
        return this.username;
    }

    public MysqlProfileResponse(
        String hostname,
        String password,
        Integer port,
        MysqlSslConfigResponse sslConfig,
        String username) {
        this.hostname = Objects.requireNonNull(hostname, "expected parameter 'hostname' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.sslConfig = Objects.requireNonNull(sslConfig, "expected parameter 'sslConfig' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private MysqlProfileResponse() {
        this.hostname = null;
        this.password = null;
        this.port = null;
        this.sslConfig = null;
        this.username = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MysqlProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String hostname;
        private String password;
        private Integer port;
        private MysqlSslConfigResponse sslConfig;
        private String username;

        public Builder() {
    	      // Empty
        }

        public Builder(MysqlProfileResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.sslConfig = defaults.sslConfig;
    	      this.username = defaults.username;
        }

        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder sslConfig(MysqlSslConfigResponse sslConfig) {
            this.sslConfig = Objects.requireNonNull(sslConfig);
            return this;
        }
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }        public MysqlProfileResponse build() {
            return new MysqlProfileResponse(hostname, password, port, sslConfig, username);
        }
    }
}
