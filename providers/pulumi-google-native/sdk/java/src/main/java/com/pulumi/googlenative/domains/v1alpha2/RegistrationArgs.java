// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.domains.v1alpha2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.domains.v1alpha2.enums.RegistrationContactNoticesItem;
import com.pulumi.googlenative.domains.v1alpha2.enums.RegistrationDomainNoticesItem;
import com.pulumi.googlenative.domains.v1alpha2.inputs.ContactSettingsArgs;
import com.pulumi.googlenative.domains.v1alpha2.inputs.DnsSettingsArgs;
import com.pulumi.googlenative.domains.v1alpha2.inputs.ManagementSettingsArgs;
import com.pulumi.googlenative.domains.v1alpha2.inputs.MoneyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationArgs Empty = new RegistrationArgs();

    /**
     * The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.
     * 
     */
    @Import(name="contactNotices")
    private @Nullable Output<List<RegistrationContactNoticesItem>> contactNotices;

    /**
     * @return The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.
     * 
     */
    public Optional<Output<List<RegistrationContactNoticesItem>>> contactNotices() {
        return Optional.ofNullable(this.contactNotices);
    }

    /**
     * Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.
     * 
     */
    @Import(name="contactSettings", required=true)
    private Output<ContactSettingsArgs> contactSettings;

    /**
     * @return Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.
     * 
     */
    public Output<ContactSettingsArgs> contactSettings() {
        return this.contactSettings;
    }

    /**
     * Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.
     * 
     */
    @Import(name="dnsSettings")
    private @Nullable Output<DnsSettingsArgs> dnsSettings;

    /**
     * @return Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.
     * 
     */
    public Optional<Output<DnsSettingsArgs>> dnsSettings() {
        return Optional.ofNullable(this.dnsSettings);
    }

    /**
     * Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.
     * 
     */
    @Import(name="domainNotices")
    private @Nullable Output<List<RegistrationDomainNoticesItem>> domainNotices;

    /**
     * @return The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.
     * 
     */
    public Optional<Output<List<RegistrationDomainNoticesItem>>> domainNotices() {
        return Optional.ofNullable(this.domainNotices);
    }

    /**
     * Set of labels associated with the `Registration`.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of labels associated with the `Registration`.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.
     * 
     */
    @Import(name="managementSettings")
    private @Nullable Output<ManagementSettingsArgs> managementSettings;

    /**
     * @return Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.
     * 
     */
    public Optional<Output<ManagementSettingsArgs>> managementSettings() {
        return Optional.ofNullable(this.managementSettings);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * When true, only validation is performed, without actually registering the domain. Follows: https://cloud.google.com/apis/design/design_patterns#request_validation
     * 
     */
    @Import(name="validateOnly")
    private @Nullable Output<Boolean> validateOnly;

    /**
     * @return When true, only validation is performed, without actually registering the domain. Follows: https://cloud.google.com/apis/design/design_patterns#request_validation
     * 
     */
    public Optional<Output<Boolean>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    /**
     * Yearly price to register or renew the domain. The value that should be put here can be obtained from RetrieveRegisterParameters or SearchDomains calls.
     * 
     */
    @Import(name="yearlyPrice", required=true)
    private Output<MoneyArgs> yearlyPrice;

    /**
     * @return Yearly price to register or renew the domain. The value that should be put here can be obtained from RetrieveRegisterParameters or SearchDomains calls.
     * 
     */
    public Output<MoneyArgs> yearlyPrice() {
        return this.yearlyPrice;
    }

    private RegistrationArgs() {}

    private RegistrationArgs(RegistrationArgs $) {
        this.contactNotices = $.contactNotices;
        this.contactSettings = $.contactSettings;
        this.dnsSettings = $.dnsSettings;
        this.domainName = $.domainName;
        this.domainNotices = $.domainNotices;
        this.labels = $.labels;
        this.location = $.location;
        this.managementSettings = $.managementSettings;
        this.project = $.project;
        this.validateOnly = $.validateOnly;
        this.yearlyPrice = $.yearlyPrice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationArgs $;

        public Builder() {
            $ = new RegistrationArgs();
        }

        public Builder(RegistrationArgs defaults) {
            $ = new RegistrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(@Nullable Output<List<RegistrationContactNoticesItem>> contactNotices) {
            $.contactNotices = contactNotices;
            return this;
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(List<RegistrationContactNoticesItem> contactNotices) {
            return contactNotices(Output.of(contactNotices));
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(RegistrationContactNoticesItem... contactNotices) {
            return contactNotices(List.of(contactNotices));
        }

        /**
         * @param contactSettings Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.
         * 
         * @return builder
         * 
         */
        public Builder contactSettings(Output<ContactSettingsArgs> contactSettings) {
            $.contactSettings = contactSettings;
            return this;
        }

        /**
         * @param contactSettings Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.
         * 
         * @return builder
         * 
         */
        public Builder contactSettings(ContactSettingsArgs contactSettings) {
            return contactSettings(Output.of(contactSettings));
        }

        /**
         * @param dnsSettings Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.
         * 
         * @return builder
         * 
         */
        public Builder dnsSettings(@Nullable Output<DnsSettingsArgs> dnsSettings) {
            $.dnsSettings = dnsSettings;
            return this;
        }

        /**
         * @param dnsSettings Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.
         * 
         * @return builder
         * 
         */
        public Builder dnsSettings(DnsSettingsArgs dnsSettings) {
            return dnsSettings(Output.of(dnsSettings));
        }

        /**
         * @param domainName Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(@Nullable Output<List<RegistrationDomainNoticesItem>> domainNotices) {
            $.domainNotices = domainNotices;
            return this;
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(List<RegistrationDomainNoticesItem> domainNotices) {
            return domainNotices(Output.of(domainNotices));
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(RegistrationDomainNoticesItem... domainNotices) {
            return domainNotices(List.of(domainNotices));
        }

        /**
         * @param labels Set of labels associated with the `Registration`.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of labels associated with the `Registration`.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementSettings Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.
         * 
         * @return builder
         * 
         */
        public Builder managementSettings(@Nullable Output<ManagementSettingsArgs> managementSettings) {
            $.managementSettings = managementSettings;
            return this;
        }

        /**
         * @param managementSettings Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.
         * 
         * @return builder
         * 
         */
        public Builder managementSettings(ManagementSettingsArgs managementSettings) {
            return managementSettings(Output.of(managementSettings));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param validateOnly When true, only validation is performed, without actually registering the domain. Follows: https://cloud.google.com/apis/design/design_patterns#request_validation
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(@Nullable Output<Boolean> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        /**
         * @param validateOnly When true, only validation is performed, without actually registering the domain. Follows: https://cloud.google.com/apis/design/design_patterns#request_validation
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(Boolean validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        /**
         * @param yearlyPrice Yearly price to register or renew the domain. The value that should be put here can be obtained from RetrieveRegisterParameters or SearchDomains calls.
         * 
         * @return builder
         * 
         */
        public Builder yearlyPrice(Output<MoneyArgs> yearlyPrice) {
            $.yearlyPrice = yearlyPrice;
            return this;
        }

        /**
         * @param yearlyPrice Yearly price to register or renew the domain. The value that should be put here can be obtained from RetrieveRegisterParameters or SearchDomains calls.
         * 
         * @return builder
         * 
         */
        public Builder yearlyPrice(MoneyArgs yearlyPrice) {
            return yearlyPrice(Output.of(yearlyPrice));
        }

        public RegistrationArgs build() {
            $.contactSettings = Objects.requireNonNull($.contactSettings, "expected parameter 'contactSettings' to be non-null");
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.yearlyPrice = Objects.requireNonNull($.yearlyPrice, "expected parameter 'yearlyPrice' to be non-null");
            return $;
        }
    }

}
