// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


/**
 * Encapsulates numeric value that can be either absolute or relative.
 * 
 */
public final class FixedOrPercentResponse extends com.pulumi.resources.InvokeArgs {

    public static final FixedOrPercentResponse Empty = new FixedOrPercentResponse();

    /**
     * Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
     * 
     */
    @Import(name="calculated", required=true)
    private Integer calculated;

    /**
     * @return Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
     * 
     */
    public Integer calculated() {
        return this.calculated;
    }

    /**
     * Specifies a fixed number of VM instances. This must be a positive integer.
     * 
     */
    @Import(name="fixed", required=true)
    private Integer fixed;

    /**
     * @return Specifies a fixed number of VM instances. This must be a positive integer.
     * 
     */
    public Integer fixed() {
        return this.fixed;
    }

    /**
     * Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
     * 
     */
    @Import(name="percent", required=true)
    private Integer percent;

    /**
     * @return Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
     * 
     */
    public Integer percent() {
        return this.percent;
    }

    private FixedOrPercentResponse() {}

    private FixedOrPercentResponse(FixedOrPercentResponse $) {
        this.calculated = $.calculated;
        this.fixed = $.fixed;
        this.percent = $.percent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FixedOrPercentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FixedOrPercentResponse $;

        public Builder() {
            $ = new FixedOrPercentResponse();
        }

        public Builder(FixedOrPercentResponse defaults) {
            $ = new FixedOrPercentResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param calculated Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
         * 
         * @return builder
         * 
         */
        public Builder calculated(Integer calculated) {
            $.calculated = calculated;
            return this;
        }

        /**
         * @param fixed Specifies a fixed number of VM instances. This must be a positive integer.
         * 
         * @return builder
         * 
         */
        public Builder fixed(Integer fixed) {
            $.fixed = fixed;
            return this;
        }

        /**
         * @param percent Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
         * 
         * @return builder
         * 
         */
        public Builder percent(Integer percent) {
            $.percent = percent;
            return this;
        }

        public FixedOrPercentResponse build() {
            $.calculated = Objects.requireNonNull($.calculated, "expected parameter 'calculated' to be non-null");
            $.fixed = Objects.requireNonNull($.fixed, "expected parameter 'fixed' to be non-null");
            $.percent = Objects.requireNonNull($.percent, "expected parameter 'percent' to be non-null");
            return $;
        }
    }

}
