// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;


/**
 * Specification for how requests are aborted as part of fault injection.
 * 
 */
public final class HttpFaultAbortResponse extends com.pulumi.resources.InvokeArgs {

    public static final HttpFaultAbortResponse Empty = new HttpFaultAbortResponse();

    /**
     * The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
     * 
     */
    @Import(name="httpStatus", required=true)
    private Integer httpStatus;

    public Integer httpStatus() {
        return this.httpStatus;
    }

    /**
     * The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
     * 
     */
    @Import(name="percentage", required=true)
    private Double percentage;

    public Double percentage() {
        return this.percentage;
    }

    private HttpFaultAbortResponse() {}

    private HttpFaultAbortResponse(HttpFaultAbortResponse $) {
        this.httpStatus = $.httpStatus;
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpFaultAbortResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpFaultAbortResponse $;

        public Builder() {
            $ = new HttpFaultAbortResponse();
        }

        public Builder(HttpFaultAbortResponse defaults) {
            $ = new HttpFaultAbortResponse(Objects.requireNonNull(defaults));
        }

        public Builder httpStatus(Integer httpStatus) {
            $.httpStatus = httpStatus;
            return this;
        }

        public Builder percentage(Double percentage) {
            $.percentage = percentage;
            return this;
        }

        public HttpFaultAbortResponse build() {
            $.httpStatus = Objects.requireNonNull($.httpStatus, "expected parameter 'httpStatus' to be non-null");
            $.percentage = Objects.requireNonNull($.percentage, "expected parameter 'percentage' to be non-null");
            return $;
        }
    }

}
