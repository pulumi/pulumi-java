// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.RepoSourceResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.StorageSourceManifestResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.StorageSourceResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
 * 
 */
public final class SourceProvenanceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceProvenanceResponse Empty = new SourceProvenanceResponse();

    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * 
     */
    @Import(name="fileHashes", required=true)
    private Map<String,String> fileHashes;

    /**
     * @return Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * 
     */
    public Map<String,String> fileHashes() {
        return this.fileHashes;
    }

    /**
     * A copy of the build&#39;s `source.repo_source`, if exists, with any revisions resolved.
     * 
     */
    @Import(name="resolvedRepoSource", required=true)
    private RepoSourceResponse resolvedRepoSource;

    /**
     * @return A copy of the build&#39;s `source.repo_source`, if exists, with any revisions resolved.
     * 
     */
    public RepoSourceResponse resolvedRepoSource() {
        return this.resolvedRepoSource;
    }

    /**
     * A copy of the build&#39;s `source.storage_source`, if exists, with any generations resolved.
     * 
     */
    @Import(name="resolvedStorageSource", required=true)
    private StorageSourceResponse resolvedStorageSource;

    /**
     * @return A copy of the build&#39;s `source.storage_source`, if exists, with any generations resolved.
     * 
     */
    public StorageSourceResponse resolvedStorageSource() {
        return this.resolvedStorageSource;
    }

    /**
     * A copy of the build&#39;s `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
     * 
     */
    @Import(name="resolvedStorageSourceManifest", required=true)
    private StorageSourceManifestResponse resolvedStorageSourceManifest;

    /**
     * @return A copy of the build&#39;s `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
     * 
     */
    public StorageSourceManifestResponse resolvedStorageSourceManifest() {
        return this.resolvedStorageSourceManifest;
    }

    private SourceProvenanceResponse() {}

    private SourceProvenanceResponse(SourceProvenanceResponse $) {
        this.fileHashes = $.fileHashes;
        this.resolvedRepoSource = $.resolvedRepoSource;
        this.resolvedStorageSource = $.resolvedStorageSource;
        this.resolvedStorageSourceManifest = $.resolvedStorageSourceManifest;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceProvenanceResponse $;

        public Builder() {
            $ = new SourceProvenanceResponse();
        }

        public Builder(SourceProvenanceResponse defaults) {
            $ = new SourceProvenanceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileHashes Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
         * 
         * @return builder
         * 
         */
        public Builder fileHashes(Map<String,String> fileHashes) {
            $.fileHashes = fileHashes;
            return this;
        }

        /**
         * @param resolvedRepoSource A copy of the build&#39;s `source.repo_source`, if exists, with any revisions resolved.
         * 
         * @return builder
         * 
         */
        public Builder resolvedRepoSource(RepoSourceResponse resolvedRepoSource) {
            $.resolvedRepoSource = resolvedRepoSource;
            return this;
        }

        /**
         * @param resolvedStorageSource A copy of the build&#39;s `source.storage_source`, if exists, with any generations resolved.
         * 
         * @return builder
         * 
         */
        public Builder resolvedStorageSource(StorageSourceResponse resolvedStorageSource) {
            $.resolvedStorageSource = resolvedStorageSource;
            return this;
        }

        /**
         * @param resolvedStorageSourceManifest A copy of the build&#39;s `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
         * 
         * @return builder
         * 
         */
        public Builder resolvedStorageSourceManifest(StorageSourceManifestResponse resolvedStorageSourceManifest) {
            $.resolvedStorageSourceManifest = resolvedStorageSourceManifest;
            return this;
        }

        public SourceProvenanceResponse build() {
            $.fileHashes = Objects.requireNonNull($.fileHashes, "expected parameter 'fileHashes' to be non-null");
            $.resolvedRepoSource = Objects.requireNonNull($.resolvedRepoSource, "expected parameter 'resolvedRepoSource' to be non-null");
            $.resolvedStorageSource = Objects.requireNonNull($.resolvedStorageSource, "expected parameter 'resolvedStorageSource' to be non-null");
            $.resolvedStorageSourceManifest = Objects.requireNonNull($.resolvedStorageSourceManifest, "expected parameter 'resolvedStorageSourceManifest' to be non-null");
            return $;
        }
    }

}
