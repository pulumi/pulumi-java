// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1.inputs.HttpRouteFaultInjectionPolicyAbortArgs;
import com.pulumi.googlenative.networkservices.v1.inputs.HttpRouteFaultInjectionPolicyDelayArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
 * 
 */
public final class HttpRouteFaultInjectionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteFaultInjectionPolicyArgs Empty = new HttpRouteFaultInjectionPolicyArgs();

    /**
     * The specification for aborting to client requests.
     * 
     */
    @Import(name="abort")
    private @Nullable Output<HttpRouteFaultInjectionPolicyAbortArgs> abort;

    /**
     * @return The specification for aborting to client requests.
     * 
     */
    public Optional<Output<HttpRouteFaultInjectionPolicyAbortArgs>> abort() {
        return Optional.ofNullable(this.abort);
    }

    /**
     * The specification for injecting delay to client requests.
     * 
     */
    @Import(name="delay")
    private @Nullable Output<HttpRouteFaultInjectionPolicyDelayArgs> delay;

    /**
     * @return The specification for injecting delay to client requests.
     * 
     */
    public Optional<Output<HttpRouteFaultInjectionPolicyDelayArgs>> delay() {
        return Optional.ofNullable(this.delay);
    }

    private HttpRouteFaultInjectionPolicyArgs() {}

    private HttpRouteFaultInjectionPolicyArgs(HttpRouteFaultInjectionPolicyArgs $) {
        this.abort = $.abort;
        this.delay = $.delay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteFaultInjectionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteFaultInjectionPolicyArgs $;

        public Builder() {
            $ = new HttpRouteFaultInjectionPolicyArgs();
        }

        public Builder(HttpRouteFaultInjectionPolicyArgs defaults) {
            $ = new HttpRouteFaultInjectionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abort The specification for aborting to client requests.
         * 
         * @return builder
         * 
         */
        public Builder abort(@Nullable Output<HttpRouteFaultInjectionPolicyAbortArgs> abort) {
            $.abort = abort;
            return this;
        }

        /**
         * @param abort The specification for aborting to client requests.
         * 
         * @return builder
         * 
         */
        public Builder abort(HttpRouteFaultInjectionPolicyAbortArgs abort) {
            return abort(Output.of(abort));
        }

        /**
         * @param delay The specification for injecting delay to client requests.
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Output<HttpRouteFaultInjectionPolicyDelayArgs> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay The specification for injecting delay to client requests.
         * 
         * @return builder
         * 
         */
        public Builder delay(HttpRouteFaultInjectionPolicyDelayArgs delay) {
            return delay(Output.of(delay));
        }

        public HttpRouteFaultInjectionPolicyArgs build() {
            return $;
        }
    }

}
