// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1beta1.inputs.SubjectAltNamesResponse;
import com.pulumi.googlenative.privateca_v1beta1.inputs.SubjectResponse;
import java.lang.String;
import java.util.Objects;


/**
 * These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
 * 
 */
public final class SubjectDescriptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final SubjectDescriptionResponse Empty = new SubjectDescriptionResponse();

    /**
     * The &#34;common name&#34; of the distinguished name.
     * 
     */
    @Import(name="commonName", required=true)
    private String commonName;

    public String commonName() {
        return this.commonName;
    }

    /**
     * The serial number encoded in lowercase hexadecimal.
     * 
     */
    @Import(name="hexSerialNumber", required=true)
    private String hexSerialNumber;

    public String hexSerialNumber() {
        return this.hexSerialNumber;
    }

    /**
     * For convenience, the actual lifetime of an issued certificate. Corresponds to &#39;not_after_time&#39; - &#39;not_before_time&#39;.
     * 
     */
    @Import(name="lifetime", required=true)
    private String lifetime;

    public String lifetime() {
        return this.lifetime;
    }

    /**
     * The time at which the certificate expires.
     * 
     */
    @Import(name="notAfterTime", required=true)
    private String notAfterTime;

    public String notAfterTime() {
        return this.notAfterTime;
    }

    /**
     * The time at which the certificate becomes valid.
     * 
     */
    @Import(name="notBeforeTime", required=true)
    private String notBeforeTime;

    public String notBeforeTime() {
        return this.notBeforeTime;
    }

    /**
     * Contains distinguished name fields such as the location and organization.
     * 
     */
    @Import(name="subject", required=true)
    private SubjectResponse subject;

    public SubjectResponse subject() {
        return this.subject;
    }

    /**
     * The subject alternative name fields.
     * 
     */
    @Import(name="subjectAltName", required=true)
    private SubjectAltNamesResponse subjectAltName;

    public SubjectAltNamesResponse subjectAltName() {
        return this.subjectAltName;
    }

    private SubjectDescriptionResponse() {}

    private SubjectDescriptionResponse(SubjectDescriptionResponse $) {
        this.commonName = $.commonName;
        this.hexSerialNumber = $.hexSerialNumber;
        this.lifetime = $.lifetime;
        this.notAfterTime = $.notAfterTime;
        this.notBeforeTime = $.notBeforeTime;
        this.subject = $.subject;
        this.subjectAltName = $.subjectAltName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubjectDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubjectDescriptionResponse $;

        public Builder() {
            $ = new SubjectDescriptionResponse();
        }

        public Builder(SubjectDescriptionResponse defaults) {
            $ = new SubjectDescriptionResponse(Objects.requireNonNull(defaults));
        }

        public Builder commonName(String commonName) {
            $.commonName = commonName;
            return this;
        }

        public Builder hexSerialNumber(String hexSerialNumber) {
            $.hexSerialNumber = hexSerialNumber;
            return this;
        }

        public Builder lifetime(String lifetime) {
            $.lifetime = lifetime;
            return this;
        }

        public Builder notAfterTime(String notAfterTime) {
            $.notAfterTime = notAfterTime;
            return this;
        }

        public Builder notBeforeTime(String notBeforeTime) {
            $.notBeforeTime = notBeforeTime;
            return this;
        }

        public Builder subject(SubjectResponse subject) {
            $.subject = subject;
            return this;
        }

        public Builder subjectAltName(SubjectAltNamesResponse subjectAltName) {
            $.subjectAltName = subjectAltName;
            return this;
        }

        public SubjectDescriptionResponse build() {
            $.commonName = Objects.requireNonNull($.commonName, "expected parameter 'commonName' to be non-null");
            $.hexSerialNumber = Objects.requireNonNull($.hexSerialNumber, "expected parameter 'hexSerialNumber' to be non-null");
            $.lifetime = Objects.requireNonNull($.lifetime, "expected parameter 'lifetime' to be non-null");
            $.notAfterTime = Objects.requireNonNull($.notAfterTime, "expected parameter 'notAfterTime' to be non-null");
            $.notBeforeTime = Objects.requireNonNull($.notBeforeTime, "expected parameter 'notBeforeTime' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.subjectAltName = Objects.requireNonNull($.subjectAltName, "expected parameter 'subjectAltName' to be non-null");
            return $;
        }
    }

}
