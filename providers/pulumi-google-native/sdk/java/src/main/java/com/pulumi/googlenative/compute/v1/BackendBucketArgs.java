// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.v1.inputs.BackendBucketCdnPolicyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendBucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendBucketArgs Empty = new BackendBucketArgs();

    /**
     * Cloud Storage bucket name.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return Cloud Storage bucket name.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * Cloud CDN configuration for this BackendBucket.
     * 
     */
    @Import(name="cdnPolicy")
    private @Nullable Output<BackendBucketCdnPolicyArgs> cdnPolicy;

    /**
     * @return Cloud CDN configuration for this BackendBucket.
     * 
     */
    public Optional<Output<BackendBucketCdnPolicyArgs>> cdnPolicy() {
        return Optional.ofNullable(this.cdnPolicy);
    }

    /**
     * Headers that the HTTP/S load balancer should add to proxied responses.
     * 
     */
    @Import(name="customResponseHeaders")
    private @Nullable Output<List<String>> customResponseHeaders;

    /**
     * @return Headers that the HTTP/S load balancer should add to proxied responses.
     * 
     */
    public Optional<Output<List<String>>> customResponseHeaders() {
        return Optional.ofNullable(this.customResponseHeaders);
    }

    /**
     * An optional textual description of the resource; provided by the client when the resource is created.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional textual description of the resource; provided by the client when the resource is created.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If true, enable Cloud CDN for this BackendBucket.
     * 
     */
    @Import(name="enableCdn")
    private @Nullable Output<Boolean> enableCdn;

    /**
     * @return If true, enable Cloud CDN for this BackendBucket.
     * 
     */
    public Optional<Output<Boolean>> enableCdn() {
        return Optional.ofNullable(this.enableCdn);
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Type of the resource.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    private BackendBucketArgs() {}

    private BackendBucketArgs(BackendBucketArgs $) {
        this.bucketName = $.bucketName;
        this.cdnPolicy = $.cdnPolicy;
        this.customResponseHeaders = $.customResponseHeaders;
        this.description = $.description;
        this.enableCdn = $.enableCdn;
        this.kind = $.kind;
        this.name = $.name;
        this.project = $.project;
        this.requestId = $.requestId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendBucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendBucketArgs $;

        public Builder() {
            $ = new BackendBucketArgs();
        }

        public Builder(BackendBucketArgs defaults) {
            $ = new BackendBucketArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName Cloud Storage bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Cloud Storage bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param cdnPolicy Cloud CDN configuration for this BackendBucket.
         * 
         * @return builder
         * 
         */
        public Builder cdnPolicy(@Nullable Output<BackendBucketCdnPolicyArgs> cdnPolicy) {
            $.cdnPolicy = cdnPolicy;
            return this;
        }

        /**
         * @param cdnPolicy Cloud CDN configuration for this BackendBucket.
         * 
         * @return builder
         * 
         */
        public Builder cdnPolicy(BackendBucketCdnPolicyArgs cdnPolicy) {
            return cdnPolicy(Output.of(cdnPolicy));
        }

        /**
         * @param customResponseHeaders Headers that the HTTP/S load balancer should add to proxied responses.
         * 
         * @return builder
         * 
         */
        public Builder customResponseHeaders(@Nullable Output<List<String>> customResponseHeaders) {
            $.customResponseHeaders = customResponseHeaders;
            return this;
        }

        /**
         * @param customResponseHeaders Headers that the HTTP/S load balancer should add to proxied responses.
         * 
         * @return builder
         * 
         */
        public Builder customResponseHeaders(List<String> customResponseHeaders) {
            return customResponseHeaders(Output.of(customResponseHeaders));
        }

        /**
         * @param customResponseHeaders Headers that the HTTP/S load balancer should add to proxied responses.
         * 
         * @return builder
         * 
         */
        public Builder customResponseHeaders(String... customResponseHeaders) {
            return customResponseHeaders(List.of(customResponseHeaders));
        }

        /**
         * @param description An optional textual description of the resource; provided by the client when the resource is created.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional textual description of the resource; provided by the client when the resource is created.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableCdn If true, enable Cloud CDN for this BackendBucket.
         * 
         * @return builder
         * 
         */
        public Builder enableCdn(@Nullable Output<Boolean> enableCdn) {
            $.enableCdn = enableCdn;
            return this;
        }

        /**
         * @param enableCdn If true, enable Cloud CDN for this BackendBucket.
         * 
         * @return builder
         * 
         */
        public Builder enableCdn(Boolean enableCdn) {
            return enableCdn(Output.of(enableCdn));
        }

        /**
         * @param kind Type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public BackendBucketArgs build() {
            return $;
        }
    }

}
