// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.pubsub.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class BigQueryConfigResponse {
    /**
     * @return When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
     * 
     */
    private final Boolean dropUnknownFields;
    /**
     * @return An output-only field that indicates whether or not the subscription can receive messages.
     * 
     */
    private final String state;
    /**
     * @return The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
     * 
     */
    private final String table;
    /**
     * @return When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists.
     * 
     */
    private final Boolean useTopicSchema;
    /**
     * @return When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
     * 
     */
    private final Boolean writeMetadata;

    @CustomType.Constructor
    private BigQueryConfigResponse(
        @CustomType.Parameter("dropUnknownFields") Boolean dropUnknownFields,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("table") String table,
        @CustomType.Parameter("useTopicSchema") Boolean useTopicSchema,
        @CustomType.Parameter("writeMetadata") Boolean writeMetadata) {
        this.dropUnknownFields = dropUnknownFields;
        this.state = state;
        this.table = table;
        this.useTopicSchema = useTopicSchema;
        this.writeMetadata = writeMetadata;
    }

    /**
     * @return When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
     * 
     */
    public Boolean dropUnknownFields() {
        return this.dropUnknownFields;
    }
    /**
     * @return An output-only field that indicates whether or not the subscription can receive messages.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
     * 
     */
    public String table() {
        return this.table;
    }
    /**
     * @return When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists.
     * 
     */
    public Boolean useTopicSchema() {
        return this.useTopicSchema;
    }
    /**
     * @return When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
     * 
     */
    public Boolean writeMetadata() {
        return this.writeMetadata;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigQueryConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean dropUnknownFields;
        private String state;
        private String table;
        private Boolean useTopicSchema;
        private Boolean writeMetadata;

        public Builder() {
    	      // Empty
        }

        public Builder(BigQueryConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dropUnknownFields = defaults.dropUnknownFields;
    	      this.state = defaults.state;
    	      this.table = defaults.table;
    	      this.useTopicSchema = defaults.useTopicSchema;
    	      this.writeMetadata = defaults.writeMetadata;
        }

        public Builder dropUnknownFields(Boolean dropUnknownFields) {
            this.dropUnknownFields = Objects.requireNonNull(dropUnknownFields);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder table(String table) {
            this.table = Objects.requireNonNull(table);
            return this;
        }
        public Builder useTopicSchema(Boolean useTopicSchema) {
            this.useTopicSchema = Objects.requireNonNull(useTopicSchema);
            return this;
        }
        public Builder writeMetadata(Boolean writeMetadata) {
            this.writeMetadata = Objects.requireNonNull(writeMetadata);
            return this;
        }        public BigQueryConfigResponse build() {
            return new BigQueryConfigResponse(dropUnknownFields, state, table, useTopicSchema, writeMetadata);
        }
    }
}
