// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.eventarc.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetChannelResult {
    /**
     * @return The activation token for the channel. The token must be used by the provider to register the channel for publishing.
     * 
     */
    private final String activationToken;
    /**
     * @return The creation time.
     * 
     */
    private final String createTime;
    /**
     * @return Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*`.
     * 
     */
    private final String cryptoKeyName;
    /**
     * @return The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
     * 
     */
    private final String name;
    /**
     * @return The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     * 
     */
    private final String provider;
    /**
     * @return The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
     * 
     */
    private final String pubsubTopic;
    /**
     * @return The state of a Channel.
     * 
     */
    private final String state;
    /**
     * @return Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    private final String uid;
    /**
     * @return The last-modified time.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetChannelResult(
        @CustomType.Parameter("activationToken") String activationToken,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("cryptoKeyName") String cryptoKeyName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("provider") String provider,
        @CustomType.Parameter("pubsubTopic") String pubsubTopic,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("uid") String uid,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.activationToken = activationToken;
        this.createTime = createTime;
        this.cryptoKeyName = cryptoKeyName;
        this.name = name;
        this.provider = provider;
        this.pubsubTopic = pubsubTopic;
        this.state = state;
        this.uid = uid;
        this.updateTime = updateTime;
    }

    /**
     * @return The activation token for the channel. The token must be used by the provider to register the channel for publishing.
     * 
     */
    public String activationToken() {
        return this.activationToken;
    }
    /**
     * @return The creation time.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*`.
     * 
     */
    public String cryptoKeyName() {
        return this.cryptoKeyName;
    }
    /**
     * @return The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     * 
     */
    public String provider() {
        return this.provider;
    }
    /**
     * @return The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
     * 
     */
    public String pubsubTopic() {
        return this.pubsubTopic;
    }
    /**
     * @return The state of a Channel.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return The last-modified time.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetChannelResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String activationToken;
        private String createTime;
        private String cryptoKeyName;
        private String name;
        private String provider;
        private String pubsubTopic;
        private String state;
        private String uid;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetChannelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationToken = defaults.activationToken;
    	      this.createTime = defaults.createTime;
    	      this.cryptoKeyName = defaults.cryptoKeyName;
    	      this.name = defaults.name;
    	      this.provider = defaults.provider;
    	      this.pubsubTopic = defaults.pubsubTopic;
    	      this.state = defaults.state;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder activationToken(String activationToken) {
            this.activationToken = Objects.requireNonNull(activationToken);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder cryptoKeyName(String cryptoKeyName) {
            this.cryptoKeyName = Objects.requireNonNull(cryptoKeyName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder provider(String provider) {
            this.provider = Objects.requireNonNull(provider);
            return this;
        }
        public Builder pubsubTopic(String pubsubTopic) {
            this.pubsubTopic = Objects.requireNonNull(pubsubTopic);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetChannelResult build() {
            return new GetChannelResult(activationToken, createTime, cryptoKeyName, name, provider, pubsubTopic, state, uid, updateTime);
        }
    }
}
