// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery.v2.inputs.TableFieldSchemaArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableSchemaArgs Empty = new TableSchemaArgs();

    /**
     * Describes the fields in a table.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<TableFieldSchemaArgs>> fields;

    /**
     * @return Describes the fields in a table.
     * 
     */
    public Optional<Output<List<TableFieldSchemaArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    private TableSchemaArgs() {}

    private TableSchemaArgs(TableSchemaArgs $) {
        this.fields = $.fields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableSchemaArgs $;

        public Builder() {
            $ = new TableSchemaArgs();
        }

        public Builder(TableSchemaArgs defaults) {
            $ = new TableSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fields Describes the fields in a table.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<TableFieldSchemaArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Describes the fields in a table.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<TableFieldSchemaArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Describes the fields in a table.
         * 
         * @return builder
         * 
         */
        public Builder fields(TableFieldSchemaArgs... fields) {
            return fields(List.of(fields));
        }

        public TableSchemaArgs build() {
            return $;
        }
    }

}
