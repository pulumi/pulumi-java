// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.RetryArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
 * 
 */
public final class FailurePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final FailurePolicyArgs Empty = new FailurePolicyArgs();

    /**
     * If specified, then the function will be retried in case of a failure.
     * 
     */
    @Import(name="retry")
      private final @Nullable Output<RetryArgs> retry;

    public Output<RetryArgs> retry() {
        return this.retry == null ? Codegen.empty() : this.retry;
    }

    public FailurePolicyArgs(@Nullable Output<RetryArgs> retry) {
        this.retry = retry;
    }

    private FailurePolicyArgs() {
        this.retry = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FailurePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RetryArgs> retry;

        public Builder() {
    	      // Empty
        }

        public Builder(FailurePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.retry = defaults.retry;
        }

        public Builder retry(@Nullable Output<RetryArgs> retry) {
            this.retry = retry;
            return this;
        }
        public Builder retry(@Nullable RetryArgs retry) {
            this.retry = Codegen.ofNullable(retry);
            return this;
        }        public FailurePolicyArgs build() {
            return new FailurePolicyArgs(retry);
        }
    }
}
