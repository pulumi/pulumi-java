// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datacatalog.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A column within a schema. Columns can be nested inside other columns.
 * 
 */
public final class GoogleCloudDatacatalogV1ColumnSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDatacatalogV1ColumnSchemaArgs Empty = new GoogleCloudDatacatalogV1ColumnSchemaArgs();

    /**
     * Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
     * 
     */
    @Import(name="column", required=true)
    private Output<String> column;

    /**
     * @return Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
     * 
     */
    public Output<String> column() {
        return this.column;
    }

    /**
     * Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. A column&#39;s mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Optional. A column&#39;s mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
     * 
     */
    @Import(name="subcolumns")
    private @Nullable Output<List<GoogleCloudDatacatalogV1ColumnSchemaArgs>> subcolumns;

    /**
     * @return Optional. Schema of sub-columns. A column can have zero or more sub-columns.
     * 
     */
    public Optional<Output<List<GoogleCloudDatacatalogV1ColumnSchemaArgs>>> subcolumns() {
        return Optional.ofNullable(this.subcolumns);
    }

    /**
     * Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GoogleCloudDatacatalogV1ColumnSchemaArgs() {}

    private GoogleCloudDatacatalogV1ColumnSchemaArgs(GoogleCloudDatacatalogV1ColumnSchemaArgs $) {
        this.column = $.column;
        this.description = $.description;
        this.mode = $.mode;
        this.subcolumns = $.subcolumns;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDatacatalogV1ColumnSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDatacatalogV1ColumnSchemaArgs $;

        public Builder() {
            $ = new GoogleCloudDatacatalogV1ColumnSchemaArgs();
        }

        public Builder(GoogleCloudDatacatalogV1ColumnSchemaArgs defaults) {
            $ = new GoogleCloudDatacatalogV1ColumnSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param column Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
         * 
         * @return builder
         * 
         */
        public Builder column(Output<String> column) {
            $.column = column;
            return this;
        }

        /**
         * @param column Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
         * 
         * @return builder
         * 
         */
        public Builder column(String column) {
            return column(Output.of(column));
        }

        /**
         * @param description Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param mode Optional. A column&#39;s mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Optional. A column&#39;s mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param subcolumns Optional. Schema of sub-columns. A column can have zero or more sub-columns.
         * 
         * @return builder
         * 
         */
        public Builder subcolumns(@Nullable Output<List<GoogleCloudDatacatalogV1ColumnSchemaArgs>> subcolumns) {
            $.subcolumns = subcolumns;
            return this;
        }

        /**
         * @param subcolumns Optional. Schema of sub-columns. A column can have zero or more sub-columns.
         * 
         * @return builder
         * 
         */
        public Builder subcolumns(List<GoogleCloudDatacatalogV1ColumnSchemaArgs> subcolumns) {
            return subcolumns(Output.of(subcolumns));
        }

        /**
         * @param subcolumns Optional. Schema of sub-columns. A column can have zero or more sub-columns.
         * 
         * @return builder
         * 
         */
        public Builder subcolumns(GoogleCloudDatacatalogV1ColumnSchemaArgs... subcolumns) {
            return subcolumns(List.of(subcolumns));
        }

        /**
         * @param type Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GoogleCloudDatacatalogV1ColumnSchemaArgs build() {
            $.column = Objects.requireNonNull($.column, "expected parameter 'column' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
