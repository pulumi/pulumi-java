// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig.v1.enums.AptSettingsType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Apt patching is completed by executing `apt-get update &amp;&amp; apt-get upgrade`. Additional options can be set to control how this is executed.
 * 
 */
public final class AptSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AptSettingsArgs Empty = new AptSettingsArgs();

    /**
     * List of packages to exclude from update. These packages will be excluded
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<String>> excludes;

    /**
     * @return List of packages to exclude from update. These packages will be excluded
     * 
     */
    public Optional<Output<List<String>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
     * 
     */
    @Import(name="exclusivePackages")
    private @Nullable Output<List<String>> exclusivePackages;

    /**
     * @return An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
     * 
     */
    public Optional<Output<List<String>>> exclusivePackages() {
        return Optional.ofNullable(this.exclusivePackages);
    }

    /**
     * By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
     * 
     */
    @Import(name="type")
    private @Nullable Output<AptSettingsType> type;

    /**
     * @return By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
     * 
     */
    public Optional<Output<AptSettingsType>> type() {
        return Optional.ofNullable(this.type);
    }

    private AptSettingsArgs() {}

    private AptSettingsArgs(AptSettingsArgs $) {
        this.excludes = $.excludes;
        this.exclusivePackages = $.exclusivePackages;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AptSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AptSettingsArgs $;

        public Builder() {
            $ = new AptSettingsArgs();
        }

        public Builder(AptSettingsArgs defaults) {
            $ = new AptSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludes List of packages to exclude from update. These packages will be excluded
         * 
         * @return builder
         * 
         */
        public Builder excludes(@Nullable Output<List<String>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes List of packages to exclude from update. These packages will be excluded
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<String> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes List of packages to exclude from update. These packages will be excluded
         * 
         * @return builder
         * 
         */
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param exclusivePackages An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
         * 
         * @return builder
         * 
         */
        public Builder exclusivePackages(@Nullable Output<List<String>> exclusivePackages) {
            $.exclusivePackages = exclusivePackages;
            return this;
        }

        /**
         * @param exclusivePackages An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
         * 
         * @return builder
         * 
         */
        public Builder exclusivePackages(List<String> exclusivePackages) {
            return exclusivePackages(Output.of(exclusivePackages));
        }

        /**
         * @param exclusivePackages An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
         * 
         * @return builder
         * 
         */
        public Builder exclusivePackages(String... exclusivePackages) {
            return exclusivePackages(List.of(exclusivePackages));
        }

        /**
         * @param type By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<AptSettingsType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
         * 
         * @return builder
         * 
         */
        public Builder type(AptSettingsType type) {
            return type(Output.of(type));
        }

        public AptSettingsArgs build() {
            return $;
        }
    }

}
