// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2CryptoKeyResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2FieldIdResponse;
import java.lang.Integer;
import java.util.Objects;


/**
 * Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
 * 
 */
public final class GooglePrivacyDlpV2DateShiftConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2DateShiftConfigResponse Empty = new GooglePrivacyDlpV2DateShiftConfigResponse();

    /**
     * Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
     * 
     */
    @Import(name="context", required=true)
    private GooglePrivacyDlpV2FieldIdResponse context;

    public GooglePrivacyDlpV2FieldIdResponse context() {
        return this.context;
    }

    /**
     * Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
     * 
     */
    @Import(name="cryptoKey", required=true)
    private GooglePrivacyDlpV2CryptoKeyResponse cryptoKey;

    public GooglePrivacyDlpV2CryptoKeyResponse cryptoKey() {
        return this.cryptoKey;
    }

    /**
     * For example, -5 means shift date to at most 5 days back in the past.
     * 
     */
    @Import(name="lowerBoundDays", required=true)
    private Integer lowerBoundDays;

    public Integer lowerBoundDays() {
        return this.lowerBoundDays;
    }

    /**
     * Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
     * 
     */
    @Import(name="upperBoundDays", required=true)
    private Integer upperBoundDays;

    public Integer upperBoundDays() {
        return this.upperBoundDays;
    }

    private GooglePrivacyDlpV2DateShiftConfigResponse() {}

    private GooglePrivacyDlpV2DateShiftConfigResponse(GooglePrivacyDlpV2DateShiftConfigResponse $) {
        this.context = $.context;
        this.cryptoKey = $.cryptoKey;
        this.lowerBoundDays = $.lowerBoundDays;
        this.upperBoundDays = $.upperBoundDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2DateShiftConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2DateShiftConfigResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2DateShiftConfigResponse();
        }

        public Builder(GooglePrivacyDlpV2DateShiftConfigResponse defaults) {
            $ = new GooglePrivacyDlpV2DateShiftConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder context(GooglePrivacyDlpV2FieldIdResponse context) {
            $.context = context;
            return this;
        }

        public Builder cryptoKey(GooglePrivacyDlpV2CryptoKeyResponse cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        public Builder lowerBoundDays(Integer lowerBoundDays) {
            $.lowerBoundDays = lowerBoundDays;
            return this;
        }

        public Builder upperBoundDays(Integer upperBoundDays) {
            $.upperBoundDays = upperBoundDays;
            return this;
        }

        public GooglePrivacyDlpV2DateShiftConfigResponse build() {
            $.context = Objects.requireNonNull($.context, "expected parameter 'context' to be non-null");
            $.cryptoKey = Objects.requireNonNull($.cryptoKey, "expected parameter 'cryptoKey' to be non-null");
            $.lowerBoundDays = Objects.requireNonNull($.lowerBoundDays, "expected parameter 'lowerBoundDays' to be non-null");
            $.upperBoundDays = Objects.requireNonNull($.upperBoundDays, "expected parameter 'upperBoundDays' to be non-null");
            return $;
        }
    }

}
