// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkebackup.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.gkebackup.v1.outputs.BackupConfigResponse;
import com.pulumi.googlenative.gkebackup.v1.outputs.RetentionPolicyResponse;
import com.pulumi.googlenative.gkebackup.v1.outputs.ScheduleResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBackupPlanResult {
    /**
     * @return Defines the configuration of Backups created via this BackupPlan.
     * 
     */
    private final BackupConfigResponse backupConfig;
    /**
     * @return Defines a schedule for automatic Backup creation via this BackupPlan.
     * 
     */
    private final ScheduleResponse backupSchedule;
    /**
     * @return Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - projects/*{@literal /}locations/*{@literal /}clusters/* - projects/*{@literal /}zones/*{@literal /}clusters/*
     * 
     */
    private final String cluster;
    /**
     * @return The timestamp when this BackupPlan resource was created.
     * 
     */
    private final String createTime;
    /**
     * @return This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
     * 
     */
    private final Boolean deactivated;
    /**
     * @return User specified descriptive string for this BackupPlan.
     * 
     */
    private final String description;
    /**
     * @return `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the &#39;etag&#39; in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.
     * 
     */
    private final String etag;
    /**
     * @return A set of custom labels supplied by user.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return The full name of the BackupPlan resource. Format: projects/*{@literal /}locations/*{@literal /}backupPlans/*
     * 
     */
    private final String name;
    /**
     * @return The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
     * 
     */
    private final Integer protectedPodCount;
    /**
     * @return RetentionPolicy governs lifecycle of Backups created under this plan.
     * 
     */
    private final RetentionPolicyResponse retentionPolicy;
    /**
     * @return Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
     * 
     */
    private final String uid;
    /**
     * @return The timestamp when this BackupPlan resource was last updated.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetBackupPlanResult(
        @CustomType.Parameter("backupConfig") BackupConfigResponse backupConfig,
        @CustomType.Parameter("backupSchedule") ScheduleResponse backupSchedule,
        @CustomType.Parameter("cluster") String cluster,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("deactivated") Boolean deactivated,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("protectedPodCount") Integer protectedPodCount,
        @CustomType.Parameter("retentionPolicy") RetentionPolicyResponse retentionPolicy,
        @CustomType.Parameter("uid") String uid,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.backupConfig = backupConfig;
        this.backupSchedule = backupSchedule;
        this.cluster = cluster;
        this.createTime = createTime;
        this.deactivated = deactivated;
        this.description = description;
        this.etag = etag;
        this.labels = labels;
        this.name = name;
        this.protectedPodCount = protectedPodCount;
        this.retentionPolicy = retentionPolicy;
        this.uid = uid;
        this.updateTime = updateTime;
    }

    /**
     * @return Defines the configuration of Backups created via this BackupPlan.
     * 
     */
    public BackupConfigResponse backupConfig() {
        return this.backupConfig;
    }
    /**
     * @return Defines a schedule for automatic Backup creation via this BackupPlan.
     * 
     */
    public ScheduleResponse backupSchedule() {
        return this.backupSchedule;
    }
    /**
     * @return Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - projects/*{@literal /}locations/*{@literal /}clusters/* - projects/*{@literal /}zones/*{@literal /}clusters/*
     * 
     */
    public String cluster() {
        return this.cluster;
    }
    /**
     * @return The timestamp when this BackupPlan resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
     * 
     */
    public Boolean deactivated() {
        return this.deactivated;
    }
    /**
     * @return User specified descriptive string for this BackupPlan.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the &#39;etag&#39; in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return A set of custom labels supplied by user.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The full name of the BackupPlan resource. Format: projects/*{@literal /}locations/*{@literal /}backupPlans/*
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
     * 
     */
    public Integer protectedPodCount() {
        return this.protectedPodCount;
    }
    /**
     * @return RetentionPolicy governs lifecycle of Backups created under this plan.
     * 
     */
    public RetentionPolicyResponse retentionPolicy() {
        return this.retentionPolicy;
    }
    /**
     * @return Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return The timestamp when this BackupPlan resource was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupPlanResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupConfigResponse backupConfig;
        private ScheduleResponse backupSchedule;
        private String cluster;
        private String createTime;
        private Boolean deactivated;
        private String description;
        private String etag;
        private Map<String,String> labels;
        private String name;
        private Integer protectedPodCount;
        private RetentionPolicyResponse retentionPolicy;
        private String uid;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupPlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupConfig = defaults.backupConfig;
    	      this.backupSchedule = defaults.backupSchedule;
    	      this.cluster = defaults.cluster;
    	      this.createTime = defaults.createTime;
    	      this.deactivated = defaults.deactivated;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.protectedPodCount = defaults.protectedPodCount;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder backupConfig(BackupConfigResponse backupConfig) {
            this.backupConfig = Objects.requireNonNull(backupConfig);
            return this;
        }
        public Builder backupSchedule(ScheduleResponse backupSchedule) {
            this.backupSchedule = Objects.requireNonNull(backupSchedule);
            return this;
        }
        public Builder cluster(String cluster) {
            this.cluster = Objects.requireNonNull(cluster);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder deactivated(Boolean deactivated) {
            this.deactivated = Objects.requireNonNull(deactivated);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder protectedPodCount(Integer protectedPodCount) {
            this.protectedPodCount = Objects.requireNonNull(protectedPodCount);
            return this;
        }
        public Builder retentionPolicy(RetentionPolicyResponse retentionPolicy) {
            this.retentionPolicy = Objects.requireNonNull(retentionPolicy);
            return this;
        }
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetBackupPlanResult build() {
            return new GetBackupPlanResult(backupConfig, backupSchedule, cluster, createTime, deactivated, description, etag, labels, name, protectedPodCount, retentionPolicy, uid, updateTime);
        }
    }
}
