// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.FingerprintResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.LayerResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
 * 
 */
public final class DerivedResponse extends com.pulumi.resources.InvokeArgs {

    public static final DerivedResponse Empty = new DerivedResponse();

    /**
     * This contains the base image URL for the derived image occurrence.
     * 
     */
    @Import(name="baseResourceUrl", required=true)
    private String baseResourceUrl;

    /**
     * @return This contains the base image URL for the derived image occurrence.
     * 
     */
    public String baseResourceUrl() {
        return this.baseResourceUrl;
    }

    /**
     * The number of layers by which this image differs from the associated image basis.
     * 
     */
    @Import(name="distance", required=true)
    private Integer distance;

    /**
     * @return The number of layers by which this image differs from the associated image basis.
     * 
     */
    public Integer distance() {
        return this.distance;
    }

    /**
     * The fingerprint of the derived image.
     * 
     */
    @Import(name="fingerprint", required=true)
    private FingerprintResponse fingerprint;

    /**
     * @return The fingerprint of the derived image.
     * 
     */
    public FingerprintResponse fingerprint() {
        return this.fingerprint;
    }

    /**
     * This contains layer-specific metadata, if populated it has length &#34;distance&#34; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     * 
     */
    @Import(name="layerInfo", required=true)
    private List<LayerResponse> layerInfo;

    /**
     * @return This contains layer-specific metadata, if populated it has length &#34;distance&#34; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     * 
     */
    public List<LayerResponse> layerInfo() {
        return this.layerInfo;
    }

    private DerivedResponse() {}

    private DerivedResponse(DerivedResponse $) {
        this.baseResourceUrl = $.baseResourceUrl;
        this.distance = $.distance;
        this.fingerprint = $.fingerprint;
        this.layerInfo = $.layerInfo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DerivedResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DerivedResponse $;

        public Builder() {
            $ = new DerivedResponse();
        }

        public Builder(DerivedResponse defaults) {
            $ = new DerivedResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseResourceUrl This contains the base image URL for the derived image occurrence.
         * 
         * @return builder
         * 
         */
        public Builder baseResourceUrl(String baseResourceUrl) {
            $.baseResourceUrl = baseResourceUrl;
            return this;
        }

        /**
         * @param distance The number of layers by which this image differs from the associated image basis.
         * 
         * @return builder
         * 
         */
        public Builder distance(Integer distance) {
            $.distance = distance;
            return this;
        }

        /**
         * @param fingerprint The fingerprint of the derived image.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(FingerprintResponse fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param layerInfo This contains layer-specific metadata, if populated it has length &#34;distance&#34; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
         * 
         * @return builder
         * 
         */
        public Builder layerInfo(List<LayerResponse> layerInfo) {
            $.layerInfo = layerInfo;
            return this;
        }

        /**
         * @param layerInfo This contains layer-specific metadata, if populated it has length &#34;distance&#34; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
         * 
         * @return builder
         * 
         */
        public Builder layerInfo(LayerResponse... layerInfo) {
            return layerInfo(List.of(layerInfo));
        }

        public DerivedResponse build() {
            $.baseResourceUrl = Objects.requireNonNull($.baseResourceUrl, "expected parameter 'baseResourceUrl' to be non-null");
            $.distance = Objects.requireNonNull($.distance, "expected parameter 'distance' to be non-null");
            $.fingerprint = Objects.requireNonNull($.fingerprint, "expected parameter 'fingerprint' to be non-null");
            $.layerInfo = Objects.requireNonNull($.layerInfo, "expected parameter 'layerInfo' to be non-null");
            return $;
        }
    }

}
