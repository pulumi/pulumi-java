// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
 * 
 */
public final class FacetOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final FacetOptionsResponse Empty = new FacetOptionsResponse();

    /**
     * Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
     * 
     */
    @Import(name="numFacetBuckets", required=true)
    private Integer numFacetBuckets;

    public Integer numFacetBuckets() {
        return this.numFacetBuckets;
    }

    /**
     * If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
     * 
     */
    @Import(name="objectType", required=true)
    private String objectType;

    public String objectType() {
        return this.objectType;
    }

    /**
     * Name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
     * 
     */
    @Import(name="operatorName", required=true)
    private String operatorName;

    public String operatorName() {
        return this.operatorName;
    }

    /**
     * Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
     * 
     */
    @Import(name="sourceName", required=true)
    private String sourceName;

    public String sourceName() {
        return this.sourceName;
    }

    private FacetOptionsResponse() {}

    private FacetOptionsResponse(FacetOptionsResponse $) {
        this.numFacetBuckets = $.numFacetBuckets;
        this.objectType = $.objectType;
        this.operatorName = $.operatorName;
        this.sourceName = $.sourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FacetOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FacetOptionsResponse $;

        public Builder() {
            $ = new FacetOptionsResponse();
        }

        public Builder(FacetOptionsResponse defaults) {
            $ = new FacetOptionsResponse(Objects.requireNonNull(defaults));
        }

        public Builder numFacetBuckets(Integer numFacetBuckets) {
            $.numFacetBuckets = numFacetBuckets;
            return this;
        }

        public Builder objectType(String objectType) {
            $.objectType = objectType;
            return this;
        }

        public Builder operatorName(String operatorName) {
            $.operatorName = operatorName;
            return this;
        }

        public Builder sourceName(String sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        public FacetOptionsResponse build() {
            $.numFacetBuckets = Objects.requireNonNull($.numFacetBuckets, "expected parameter 'numFacetBuckets' to be non-null");
            $.objectType = Objects.requireNonNull($.objectType, "expected parameter 'objectType' to be non-null");
            $.operatorName = Objects.requireNonNull($.operatorName, "expected parameter 'operatorName' to be non-null");
            $.sourceName = Objects.requireNonNull($.sourceName, "expected parameter 'sourceName' to be non-null");
            return $;
        }
    }

}
