// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigqueryreservation_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigqueryreservation_v1.enums.CapacityCommitmentPlan;
import com.pulumi.googlenative.bigqueryreservation_v1.enums.CapacityCommitmentRenewalPlan;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CapacityCommitmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final CapacityCommitmentArgs Empty = new CapacityCommitmentArgs();

    @Import(name="capacityCommitmentId")
    private @Nullable Output<String> capacityCommitmentId;

    public Optional<Output<String>> capacityCommitmentId() {
        return Optional.ofNullable(this.capacityCommitmentId);
    }

    @Import(name="enforceSingleAdminProjectPerOrg")
    private @Nullable Output<String> enforceSingleAdminProjectPerOrg;

    public Optional<Output<String>> enforceSingleAdminProjectPerOrg() {
        return Optional.ofNullable(this.enforceSingleAdminProjectPerOrg);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Capacity commitment commitment plan.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<CapacityCommitmentPlan> plan;

    /**
     * @return Capacity commitment commitment plan.
     * 
     */
    public Optional<Output<CapacityCommitmentPlan>> plan() {
        return Optional.ofNullable(this.plan);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
     * 
     */
    @Import(name="renewalPlan")
    private @Nullable Output<CapacityCommitmentRenewalPlan> renewalPlan;

    /**
     * @return The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
     * 
     */
    public Optional<Output<CapacityCommitmentRenewalPlan>> renewalPlan() {
        return Optional.ofNullable(this.renewalPlan);
    }

    /**
     * Number of slots in this commitment.
     * 
     */
    @Import(name="slotCount")
    private @Nullable Output<String> slotCount;

    /**
     * @return Number of slots in this commitment.
     * 
     */
    public Optional<Output<String>> slotCount() {
        return Optional.ofNullable(this.slotCount);
    }

    private CapacityCommitmentArgs() {}

    private CapacityCommitmentArgs(CapacityCommitmentArgs $) {
        this.capacityCommitmentId = $.capacityCommitmentId;
        this.enforceSingleAdminProjectPerOrg = $.enforceSingleAdminProjectPerOrg;
        this.location = $.location;
        this.plan = $.plan;
        this.project = $.project;
        this.renewalPlan = $.renewalPlan;
        this.slotCount = $.slotCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CapacityCommitmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CapacityCommitmentArgs $;

        public Builder() {
            $ = new CapacityCommitmentArgs();
        }

        public Builder(CapacityCommitmentArgs defaults) {
            $ = new CapacityCommitmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder capacityCommitmentId(@Nullable Output<String> capacityCommitmentId) {
            $.capacityCommitmentId = capacityCommitmentId;
            return this;
        }

        public Builder capacityCommitmentId(String capacityCommitmentId) {
            return capacityCommitmentId(Output.of(capacityCommitmentId));
        }

        public Builder enforceSingleAdminProjectPerOrg(@Nullable Output<String> enforceSingleAdminProjectPerOrg) {
            $.enforceSingleAdminProjectPerOrg = enforceSingleAdminProjectPerOrg;
            return this;
        }

        public Builder enforceSingleAdminProjectPerOrg(String enforceSingleAdminProjectPerOrg) {
            return enforceSingleAdminProjectPerOrg(Output.of(enforceSingleAdminProjectPerOrg));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param plan Capacity commitment commitment plan.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<CapacityCommitmentPlan> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Capacity commitment commitment plan.
         * 
         * @return builder
         * 
         */
        public Builder plan(CapacityCommitmentPlan plan) {
            return plan(Output.of(plan));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param renewalPlan The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
         * 
         * @return builder
         * 
         */
        public Builder renewalPlan(@Nullable Output<CapacityCommitmentRenewalPlan> renewalPlan) {
            $.renewalPlan = renewalPlan;
            return this;
        }

        /**
         * @param renewalPlan The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
         * 
         * @return builder
         * 
         */
        public Builder renewalPlan(CapacityCommitmentRenewalPlan renewalPlan) {
            return renewalPlan(Output.of(renewalPlan));
        }

        /**
         * @param slotCount Number of slots in this commitment.
         * 
         * @return builder
         * 
         */
        public Builder slotCount(@Nullable Output<String> slotCount) {
            $.slotCount = slotCount;
            return this;
        }

        /**
         * @param slotCount Number of slots in this commitment.
         * 
         * @return builder
         * 
         */
        public Builder slotCount(String slotCount) {
            return slotCount(Output.of(slotCount));
        }

        public CapacityCommitmentArgs build() {
            return $;
        }
    }

}
