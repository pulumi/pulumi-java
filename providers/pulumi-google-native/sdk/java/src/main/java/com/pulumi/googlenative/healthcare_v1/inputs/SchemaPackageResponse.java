// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare_v1.inputs.Hl7SchemaConfigResponse;
import com.pulumi.googlenative.healthcare_v1.inputs.Hl7TypesConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A schema package contains a set of schemas and type definitions.
 * 
 */
public final class SchemaPackageResponse extends com.pulumi.resources.InvokeArgs {

    public static final SchemaPackageResponse Empty = new SchemaPackageResponse();

    /**
     * Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
     * 
     */
    @Import(name="ignoreMinOccurs", required=true)
    private Boolean ignoreMinOccurs;

    /**
     * @return Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
     * 
     */
    public Boolean ignoreMinOccurs() {
        return this.ignoreMinOccurs;
    }

    /**
     * Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
     * 
     */
    @Import(name="schemas", required=true)
    private List<Hl7SchemaConfigResponse> schemas;

    /**
     * @return Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
     * 
     */
    public List<Hl7SchemaConfigResponse> schemas() {
        return this.schemas;
    }

    /**
     * Determines how messages that fail to parse are handled.
     * 
     */
    @Import(name="schematizedParsingType", required=true)
    private String schematizedParsingType;

    /**
     * @return Determines how messages that fail to parse are handled.
     * 
     */
    public String schematizedParsingType() {
        return this.schematizedParsingType;
    }

    /**
     * Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
     * 
     */
    @Import(name="types", required=true)
    private List<Hl7TypesConfigResponse> types;

    /**
     * @return Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
     * 
     */
    public List<Hl7TypesConfigResponse> types() {
        return this.types;
    }

    /**
     * Determines how unexpected segments (segments not matched to the schema) are handled.
     * 
     */
    @Import(name="unexpectedSegmentHandling", required=true)
    private String unexpectedSegmentHandling;

    /**
     * @return Determines how unexpected segments (segments not matched to the schema) are handled.
     * 
     */
    public String unexpectedSegmentHandling() {
        return this.unexpectedSegmentHandling;
    }

    private SchemaPackageResponse() {}

    private SchemaPackageResponse(SchemaPackageResponse $) {
        this.ignoreMinOccurs = $.ignoreMinOccurs;
        this.schemas = $.schemas;
        this.schematizedParsingType = $.schematizedParsingType;
        this.types = $.types;
        this.unexpectedSegmentHandling = $.unexpectedSegmentHandling;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaPackageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaPackageResponse $;

        public Builder() {
            $ = new SchemaPackageResponse();
        }

        public Builder(SchemaPackageResponse defaults) {
            $ = new SchemaPackageResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param ignoreMinOccurs Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMinOccurs(Boolean ignoreMinOccurs) {
            $.ignoreMinOccurs = ignoreMinOccurs;
            return this;
        }

        /**
         * @param schemas Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<Hl7SchemaConfigResponse> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
         * 
         * @return builder
         * 
         */
        public Builder schemas(Hl7SchemaConfigResponse... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param schematizedParsingType Determines how messages that fail to parse are handled.
         * 
         * @return builder
         * 
         */
        public Builder schematizedParsingType(String schematizedParsingType) {
            $.schematizedParsingType = schematizedParsingType;
            return this;
        }

        /**
         * @param types Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
         * 
         * @return builder
         * 
         */
        public Builder types(List<Hl7TypesConfigResponse> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
         * 
         * @return builder
         * 
         */
        public Builder types(Hl7TypesConfigResponse... types) {
            return types(List.of(types));
        }

        /**
         * @param unexpectedSegmentHandling Determines how unexpected segments (segments not matched to the schema) are handled.
         * 
         * @return builder
         * 
         */
        public Builder unexpectedSegmentHandling(String unexpectedSegmentHandling) {
            $.unexpectedSegmentHandling = unexpectedSegmentHandling;
            return this;
        }

        public SchemaPackageResponse build() {
            $.ignoreMinOccurs = Objects.requireNonNull($.ignoreMinOccurs, "expected parameter 'ignoreMinOccurs' to be non-null");
            $.schemas = Objects.requireNonNull($.schemas, "expected parameter 'schemas' to be non-null");
            $.schematizedParsingType = Objects.requireNonNull($.schematizedParsingType, "expected parameter 'schematizedParsingType' to be non-null");
            $.types = Objects.requireNonNull($.types, "expected parameter 'types' to be non-null");
            $.unexpectedSegmentHandling = Objects.requireNonNull($.unexpectedSegmentHandling, "expected parameter 'unexpectedSegmentHandling' to be non-null");
            return $;
        }
    }

}
