// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.StandardSqlDataTypeResponse;
import java.lang.String;
import java.util.Objects;


/**
 * A field or a column.
 * 
 */
public final class StandardSqlFieldResponse extends com.pulumi.resources.InvokeArgs {

    public static final StandardSqlFieldResponse Empty = new StandardSqlFieldResponse();

    /**
     * Optional. The name of this field. Can be absent for struct fields.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Optional. The name of this field. Can be absent for struct fields.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this &#34;type&#34; field).
     * 
     */
    @Import(name="type", required=true)
    private StandardSqlDataTypeResponse type;

    /**
     * @return Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this &#34;type&#34; field).
     * 
     */
    public StandardSqlDataTypeResponse type() {
        return this.type;
    }

    private StandardSqlFieldResponse() {}

    private StandardSqlFieldResponse(StandardSqlFieldResponse $) {
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardSqlFieldResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardSqlFieldResponse $;

        public Builder() {
            $ = new StandardSqlFieldResponse();
        }

        public Builder(StandardSqlFieldResponse defaults) {
            $ = new StandardSqlFieldResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Optional. The name of this field. Can be absent for struct fields.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this &#34;type&#34; field).
         * 
         * @return builder
         * 
         */
        public Builder type(StandardSqlDataTypeResponse type) {
            $.type = type;
            return this;
        }

        public StandardSqlFieldResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
