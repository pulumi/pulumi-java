// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3InputAudioConfigResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Represents the natural speech audio to be processed.
 * 
 */
public final class GoogleCloudDialogflowCxV3AudioInputResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3AudioInputResponse Empty = new GoogleCloudDialogflowCxV3AudioInputResponse();

    /**
     * The natural language speech audio to be processed. A single request can contain up to 1 minute of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.
     * 
     */
    @Import(name="audio", required=true)
    private String audio;

    /**
     * @return The natural language speech audio to be processed. A single request can contain up to 1 minute of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.
     * 
     */
    public String audio() {
        return this.audio;
    }

    /**
     * Instructs the speech recognizer how to process the speech audio.
     * 
     */
    @Import(name="config", required=true)
    private GoogleCloudDialogflowCxV3InputAudioConfigResponse config;

    /**
     * @return Instructs the speech recognizer how to process the speech audio.
     * 
     */
    public GoogleCloudDialogflowCxV3InputAudioConfigResponse config() {
        return this.config;
    }

    private GoogleCloudDialogflowCxV3AudioInputResponse() {}

    private GoogleCloudDialogflowCxV3AudioInputResponse(GoogleCloudDialogflowCxV3AudioInputResponse $) {
        this.audio = $.audio;
        this.config = $.config;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3AudioInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3AudioInputResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3AudioInputResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3AudioInputResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3AudioInputResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param audio The natural language speech audio to be processed. A single request can contain up to 1 minute of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.
         * 
         * @return builder
         * 
         */
        public Builder audio(String audio) {
            $.audio = audio;
            return this;
        }

        /**
         * @param config Instructs the speech recognizer how to process the speech audio.
         * 
         * @return builder
         * 
         */
        public Builder config(GoogleCloudDialogflowCxV3InputAudioConfigResponse config) {
            $.config = config;
            return this;
        }

        public GoogleCloudDialogflowCxV3AudioInputResponse build() {
            $.audio = Objects.requireNonNull($.audio, "expected parameter 'audio' to be non-null");
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            return $;
        }
    }

}
