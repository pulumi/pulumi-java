// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v2beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetParticipantResult {
    /**
     * @return Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have &#39;US&#39; or &#39;CA&#39; in their market metadata values and &#39;agent&#39; in their user metadata values will be ```documents_metadata_filters { key: &#34;market&#34; value: &#34;US,CA&#34; } documents_metadata_filters { key: &#34;user&#34; value: &#34;agent&#34; }```
     * 
     */
    private final Map<String,String> documentsMetadataFilters;
    /**
     * @return Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
     * 
     */
    private final String name;
    /**
     * @return Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it&#39;s the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be &lt;= 256 characters.
     * 
     */
    private final String obfuscatedExternalUserId;
    /**
     * @return Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
     * 
     */
    private final String role;

    @CustomType.Constructor
    private GetParticipantResult(
        @CustomType.Parameter("documentsMetadataFilters") Map<String,String> documentsMetadataFilters,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("obfuscatedExternalUserId") String obfuscatedExternalUserId,
        @CustomType.Parameter("role") String role) {
        this.documentsMetadataFilters = documentsMetadataFilters;
        this.name = name;
        this.obfuscatedExternalUserId = obfuscatedExternalUserId;
        this.role = role;
    }

    /**
     * @return Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have &#39;US&#39; or &#39;CA&#39; in their market metadata values and &#39;agent&#39; in their user metadata values will be ```documents_metadata_filters { key: &#34;market&#34; value: &#34;US,CA&#34; } documents_metadata_filters { key: &#34;user&#34; value: &#34;agent&#34; }```
     * 
     */
    public Map<String,String> documentsMetadataFilters() {
        return this.documentsMetadataFilters;
    }
    /**
     * @return Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it&#39;s the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be &lt;= 256 characters.
     * 
     */
    public String obfuscatedExternalUserId() {
        return this.obfuscatedExternalUserId;
    }
    /**
     * @return Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
     * 
     */
    public String role() {
        return this.role;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetParticipantResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> documentsMetadataFilters;
        private String name;
        private String obfuscatedExternalUserId;
        private String role;

        public Builder() {
    	      // Empty
        }

        public Builder(GetParticipantResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.documentsMetadataFilters = defaults.documentsMetadataFilters;
    	      this.name = defaults.name;
    	      this.obfuscatedExternalUserId = defaults.obfuscatedExternalUserId;
    	      this.role = defaults.role;
        }

        public Builder documentsMetadataFilters(Map<String,String> documentsMetadataFilters) {
            this.documentsMetadataFilters = Objects.requireNonNull(documentsMetadataFilters);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder obfuscatedExternalUserId(String obfuscatedExternalUserId) {
            this.obfuscatedExternalUserId = Objects.requireNonNull(obfuscatedExternalUserId);
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }        public GetParticipantResult build() {
            return new GetParticipantResult(documentsMetadataFilters, name, obfuscatedExternalUserId, role);
        }
    }
}
