// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
 * 
 */
public final class ReverseSshConnectivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReverseSshConnectivityResponse Empty = new ReverseSshConnectivityResponse();

    /**
     * The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    @Import(name="vm", required=true)
    private String vm;

    public String vm() {
        return this.vm;
    }

    /**
     * The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    @Import(name="vmIp", required=true)
    private String vmIp;

    public String vmIp() {
        return this.vmIp;
    }

    /**
     * The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
     * 
     */
    @Import(name="vmPort", required=true)
    private Integer vmPort;

    public Integer vmPort() {
        return this.vmPort;
    }

    /**
     * The name of the VPC to peer with the Cloud SQL private network.
     * 
     */
    @Import(name="vpc", required=true)
    private String vpc;

    public String vpc() {
        return this.vpc;
    }

    private ReverseSshConnectivityResponse() {}

    private ReverseSshConnectivityResponse(ReverseSshConnectivityResponse $) {
        this.vm = $.vm;
        this.vmIp = $.vmIp;
        this.vmPort = $.vmPort;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReverseSshConnectivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReverseSshConnectivityResponse $;

        public Builder() {
            $ = new ReverseSshConnectivityResponse();
        }

        public Builder(ReverseSshConnectivityResponse defaults) {
            $ = new ReverseSshConnectivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder vm(String vm) {
            $.vm = vm;
            return this;
        }

        public Builder vmIp(String vmIp) {
            $.vmIp = vmIp;
            return this;
        }

        public Builder vmPort(Integer vmPort) {
            $.vmPort = vmPort;
            return this;
        }

        public Builder vpc(String vpc) {
            $.vpc = vpc;
            return this;
        }

        public ReverseSshConnectivityResponse build() {
            $.vm = Objects.requireNonNull($.vm, "expected parameter 'vm' to be non-null");
            $.vmIp = Objects.requireNonNull($.vmIp, "expected parameter 'vmIp' to be non-null");
            $.vmPort = Objects.requireNonNull($.vmPort, "expected parameter 'vmPort' to be non-null");
            $.vpc = Objects.requireNonNull($.vpc, "expected parameter 'vpc' to be non-null");
            return $;
        }
    }

}
