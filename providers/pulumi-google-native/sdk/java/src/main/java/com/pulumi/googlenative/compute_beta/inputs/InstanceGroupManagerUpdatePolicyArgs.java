// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.enums.InstanceGroupManagerUpdatePolicyInstanceRedistributionType;
import com.pulumi.googlenative.compute_beta.enums.InstanceGroupManagerUpdatePolicyMinimalAction;
import com.pulumi.googlenative.compute_beta.enums.InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction;
import com.pulumi.googlenative.compute_beta.enums.InstanceGroupManagerUpdatePolicyReplacementMethod;
import com.pulumi.googlenative.compute_beta.enums.InstanceGroupManagerUpdatePolicyType;
import com.pulumi.googlenative.compute_beta.inputs.FixedOrPercentArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceGroupManagerUpdatePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceGroupManagerUpdatePolicyArgs Empty = new InstanceGroupManagerUpdatePolicyArgs();

    /**
     * The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
     * 
     */
    @Import(name="instanceRedistributionType")
    private @Nullable Output<InstanceGroupManagerUpdatePolicyInstanceRedistributionType> instanceRedistributionType;

    public Optional<Output<InstanceGroupManagerUpdatePolicyInstanceRedistributionType>> instanceRedistributionType() {
        return Optional.ofNullable(this.instanceRedistributionType);
    }

    /**
     * The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
     * 
     */
    @Import(name="maxSurge")
    private @Nullable Output<FixedOrPercentArgs> maxSurge;

    public Optional<Output<FixedOrPercentArgs>> maxSurge() {
        return Optional.ofNullable(this.maxSurge);
    }

    /**
     * The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance&#39;s status is RUNNING. - If there is a health check on the instance group, the instance&#39;s health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
     * 
     */
    @Import(name="maxUnavailable")
    private @Nullable Output<FixedOrPercentArgs> maxUnavailable;

    public Optional<Output<FixedOrPercentArgs>> maxUnavailable() {
        return Optional.ofNullable(this.maxUnavailable);
    }

    /**
     * Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].
     * 
     */
    @Import(name="minReadySec")
    private @Nullable Output<Integer> minReadySec;

    public Optional<Output<Integer>> minReadySec() {
        return Optional.ofNullable(this.minReadySec);
    }

    /**
     * Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
     * 
     */
    @Import(name="minimalAction")
    private @Nullable Output<InstanceGroupManagerUpdatePolicyMinimalAction> minimalAction;

    public Optional<Output<InstanceGroupManagerUpdatePolicyMinimalAction>> minimalAction() {
        return Optional.ofNullable(this.minimalAction);
    }

    /**
     * Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
     * 
     */
    @Import(name="mostDisruptiveAllowedAction")
    private @Nullable Output<InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction> mostDisruptiveAllowedAction;

    public Optional<Output<InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction>> mostDisruptiveAllowedAction() {
        return Optional.ofNullable(this.mostDisruptiveAllowedAction);
    }

    /**
     * What action should be used to replace instances. See minimal_action.REPLACE
     * 
     */
    @Import(name="replacementMethod")
    private @Nullable Output<InstanceGroupManagerUpdatePolicyReplacementMethod> replacementMethod;

    public Optional<Output<InstanceGroupManagerUpdatePolicyReplacementMethod>> replacementMethod() {
        return Optional.ofNullable(this.replacementMethod);
    }

    /**
     * The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
     * 
     */
    @Import(name="type")
    private @Nullable Output<InstanceGroupManagerUpdatePolicyType> type;

    public Optional<Output<InstanceGroupManagerUpdatePolicyType>> type() {
        return Optional.ofNullable(this.type);
    }

    private InstanceGroupManagerUpdatePolicyArgs() {}

    private InstanceGroupManagerUpdatePolicyArgs(InstanceGroupManagerUpdatePolicyArgs $) {
        this.instanceRedistributionType = $.instanceRedistributionType;
        this.maxSurge = $.maxSurge;
        this.maxUnavailable = $.maxUnavailable;
        this.minReadySec = $.minReadySec;
        this.minimalAction = $.minimalAction;
        this.mostDisruptiveAllowedAction = $.mostDisruptiveAllowedAction;
        this.replacementMethod = $.replacementMethod;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGroupManagerUpdatePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGroupManagerUpdatePolicyArgs $;

        public Builder() {
            $ = new InstanceGroupManagerUpdatePolicyArgs();
        }

        public Builder(InstanceGroupManagerUpdatePolicyArgs defaults) {
            $ = new InstanceGroupManagerUpdatePolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder instanceRedistributionType(@Nullable Output<InstanceGroupManagerUpdatePolicyInstanceRedistributionType> instanceRedistributionType) {
            $.instanceRedistributionType = instanceRedistributionType;
            return this;
        }

        public Builder instanceRedistributionType(InstanceGroupManagerUpdatePolicyInstanceRedistributionType instanceRedistributionType) {
            return instanceRedistributionType(Output.of(instanceRedistributionType));
        }

        public Builder maxSurge(@Nullable Output<FixedOrPercentArgs> maxSurge) {
            $.maxSurge = maxSurge;
            return this;
        }

        public Builder maxSurge(FixedOrPercentArgs maxSurge) {
            return maxSurge(Output.of(maxSurge));
        }

        public Builder maxUnavailable(@Nullable Output<FixedOrPercentArgs> maxUnavailable) {
            $.maxUnavailable = maxUnavailable;
            return this;
        }

        public Builder maxUnavailable(FixedOrPercentArgs maxUnavailable) {
            return maxUnavailable(Output.of(maxUnavailable));
        }

        public Builder minReadySec(@Nullable Output<Integer> minReadySec) {
            $.minReadySec = minReadySec;
            return this;
        }

        public Builder minReadySec(Integer minReadySec) {
            return minReadySec(Output.of(minReadySec));
        }

        public Builder minimalAction(@Nullable Output<InstanceGroupManagerUpdatePolicyMinimalAction> minimalAction) {
            $.minimalAction = minimalAction;
            return this;
        }

        public Builder minimalAction(InstanceGroupManagerUpdatePolicyMinimalAction minimalAction) {
            return minimalAction(Output.of(minimalAction));
        }

        public Builder mostDisruptiveAllowedAction(@Nullable Output<InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction> mostDisruptiveAllowedAction) {
            $.mostDisruptiveAllowedAction = mostDisruptiveAllowedAction;
            return this;
        }

        public Builder mostDisruptiveAllowedAction(InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction mostDisruptiveAllowedAction) {
            return mostDisruptiveAllowedAction(Output.of(mostDisruptiveAllowedAction));
        }

        public Builder replacementMethod(@Nullable Output<InstanceGroupManagerUpdatePolicyReplacementMethod> replacementMethod) {
            $.replacementMethod = replacementMethod;
            return this;
        }

        public Builder replacementMethod(InstanceGroupManagerUpdatePolicyReplacementMethod replacementMethod) {
            return replacementMethod(Output.of(replacementMethod));
        }

        public Builder type(@Nullable Output<InstanceGroupManagerUpdatePolicyType> type) {
            $.type = type;
            return this;
        }

        public Builder type(InstanceGroupManagerUpdatePolicyType type) {
            return type(Output.of(type));
        }

        public InstanceGroupManagerUpdatePolicyArgs build() {
            return $;
        }
    }

}
