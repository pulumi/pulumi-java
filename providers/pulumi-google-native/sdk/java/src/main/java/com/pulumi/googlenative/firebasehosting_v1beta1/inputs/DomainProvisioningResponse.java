// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.CertDnsChallengeResponse;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.CertHttpChallengeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The current certificate provisioning status information for a domain.
 * 
 */
public final class DomainProvisioningResponse extends com.pulumi.resources.InvokeArgs {

    public static final DomainProvisioningResponse Empty = new DomainProvisioningResponse();

    /**
     * The TXT records (for the certificate challenge) that were found at the last DNS fetch.
     * 
     */
    @Import(name="certChallengeDiscoveredTxt", required=true)
    private List<String> certChallengeDiscoveredTxt;

    public List<String> certChallengeDiscoveredTxt() {
        return this.certChallengeDiscoveredTxt;
    }

    /**
     * The DNS challenge for generating a certificate.
     * 
     */
    @Import(name="certChallengeDns", required=true)
    private CertDnsChallengeResponse certChallengeDns;

    public CertDnsChallengeResponse certChallengeDns() {
        return this.certChallengeDns;
    }

    /**
     * The HTTP challenge for generating a certificate.
     * 
     */
    @Import(name="certChallengeHttp", required=true)
    private CertHttpChallengeResponse certChallengeHttp;

    public CertHttpChallengeResponse certChallengeHttp() {
        return this.certChallengeHttp;
    }

    /**
     * The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
     * 
     */
    @Import(name="certStatus", required=true)
    private String certStatus;

    public String certStatus() {
        return this.certStatus;
    }

    /**
     * The IPs found at the last DNS fetch.
     * 
     */
    @Import(name="discoveredIps", required=true)
    private List<String> discoveredIps;

    public List<String> discoveredIps() {
        return this.discoveredIps;
    }

    /**
     * The time at which the last DNS fetch occurred.
     * 
     */
    @Import(name="dnsFetchTime", required=true)
    private String dnsFetchTime;

    public String dnsFetchTime() {
        return this.dnsFetchTime;
    }

    /**
     * The DNS record match status as of the last DNS fetch.
     * 
     */
    @Import(name="dnsStatus", required=true)
    private String dnsStatus;

    public String dnsStatus() {
        return this.dnsStatus;
    }

    /**
     * The list of IPs to which the domain is expected to resolve.
     * 
     */
    @Import(name="expectedIps", required=true)
    private List<String> expectedIps;

    public List<String> expectedIps() {
        return this.expectedIps;
    }

    private DomainProvisioningResponse() {}

    private DomainProvisioningResponse(DomainProvisioningResponse $) {
        this.certChallengeDiscoveredTxt = $.certChallengeDiscoveredTxt;
        this.certChallengeDns = $.certChallengeDns;
        this.certChallengeHttp = $.certChallengeHttp;
        this.certStatus = $.certStatus;
        this.discoveredIps = $.discoveredIps;
        this.dnsFetchTime = $.dnsFetchTime;
        this.dnsStatus = $.dnsStatus;
        this.expectedIps = $.expectedIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainProvisioningResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainProvisioningResponse $;

        public Builder() {
            $ = new DomainProvisioningResponse();
        }

        public Builder(DomainProvisioningResponse defaults) {
            $ = new DomainProvisioningResponse(Objects.requireNonNull(defaults));
        }

        public Builder certChallengeDiscoveredTxt(List<String> certChallengeDiscoveredTxt) {
            $.certChallengeDiscoveredTxt = certChallengeDiscoveredTxt;
            return this;
        }

        public Builder certChallengeDiscoveredTxt(String... certChallengeDiscoveredTxt) {
            return certChallengeDiscoveredTxt(List.of(certChallengeDiscoveredTxt));
        }

        public Builder certChallengeDns(CertDnsChallengeResponse certChallengeDns) {
            $.certChallengeDns = certChallengeDns;
            return this;
        }

        public Builder certChallengeHttp(CertHttpChallengeResponse certChallengeHttp) {
            $.certChallengeHttp = certChallengeHttp;
            return this;
        }

        public Builder certStatus(String certStatus) {
            $.certStatus = certStatus;
            return this;
        }

        public Builder discoveredIps(List<String> discoveredIps) {
            $.discoveredIps = discoveredIps;
            return this;
        }

        public Builder discoveredIps(String... discoveredIps) {
            return discoveredIps(List.of(discoveredIps));
        }

        public Builder dnsFetchTime(String dnsFetchTime) {
            $.dnsFetchTime = dnsFetchTime;
            return this;
        }

        public Builder dnsStatus(String dnsStatus) {
            $.dnsStatus = dnsStatus;
            return this;
        }

        public Builder expectedIps(List<String> expectedIps) {
            $.expectedIps = expectedIps;
            return this;
        }

        public Builder expectedIps(String... expectedIps) {
            return expectedIps(List.of(expectedIps));
        }

        public DomainProvisioningResponse build() {
            $.certChallengeDiscoveredTxt = Objects.requireNonNull($.certChallengeDiscoveredTxt, "expected parameter 'certChallengeDiscoveredTxt' to be non-null");
            $.certChallengeDns = Objects.requireNonNull($.certChallengeDns, "expected parameter 'certChallengeDns' to be non-null");
            $.certChallengeHttp = Objects.requireNonNull($.certChallengeHttp, "expected parameter 'certChallengeHttp' to be non-null");
            $.certStatus = Objects.requireNonNull($.certStatus, "expected parameter 'certStatus' to be non-null");
            $.discoveredIps = Objects.requireNonNull($.discoveredIps, "expected parameter 'discoveredIps' to be non-null");
            $.dnsFetchTime = Objects.requireNonNull($.dnsFetchTime, "expected parameter 'dnsFetchTime' to be non-null");
            $.dnsStatus = Objects.requireNonNull($.dnsStatus, "expected parameter 'dnsStatus' to be non-null");
            $.expectedIps = Objects.requireNonNull($.expectedIps, "expected parameter 'expectedIps' to be non-null");
            return $;
        }
    }

}
