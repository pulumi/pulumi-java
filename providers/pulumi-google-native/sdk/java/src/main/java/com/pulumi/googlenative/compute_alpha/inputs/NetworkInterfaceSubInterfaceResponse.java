// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class NetworkInterfaceSubInterfaceResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkInterfaceSubInterfaceResponse Empty = new NetworkInterfaceSubInterfaceResponse();

    /**
     * An IPv4 internal IP address to assign to the instance for this subinterface. If specified, ip_allocation_mode should be set to ALLOCATE_IP.
     * 
     */
    @Import(name="ipAddress", required=true)
    private String ipAddress;

    public String ipAddress() {
        return this.ipAddress;
    }

    @Import(name="ipAllocationMode", required=true)
    private String ipAllocationMode;

    public String ipAllocationMode() {
        return this.ipAllocationMode;
    }

    /**
     * If specified, this subnetwork must belong to the same network as that of the network interface. If not specified the subnet of network interface will be used. If you specify this property, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
     * 
     */
    @Import(name="subnetwork", required=true)
    private String subnetwork;

    public String subnetwork() {
        return this.subnetwork;
    }

    /**
     * VLAN tag. Should match the VLAN(s) supported by the subnetwork to which this subinterface is connecting.
     * 
     */
    @Import(name="vlan", required=true)
    private Integer vlan;

    public Integer vlan() {
        return this.vlan;
    }

    private NetworkInterfaceSubInterfaceResponse() {}

    private NetworkInterfaceSubInterfaceResponse(NetworkInterfaceSubInterfaceResponse $) {
        this.ipAddress = $.ipAddress;
        this.ipAllocationMode = $.ipAllocationMode;
        this.subnetwork = $.subnetwork;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceSubInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceSubInterfaceResponse $;

        public Builder() {
            $ = new NetworkInterfaceSubInterfaceResponse();
        }

        public Builder(NetworkInterfaceSubInterfaceResponse defaults) {
            $ = new NetworkInterfaceSubInterfaceResponse(Objects.requireNonNull(defaults));
        }

        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAllocationMode(String ipAllocationMode) {
            $.ipAllocationMode = ipAllocationMode;
            return this;
        }

        public Builder subnetwork(String subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        public Builder vlan(Integer vlan) {
            $.vlan = vlan;
            return this;
        }

        public NetworkInterfaceSubInterfaceResponse build() {
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.ipAllocationMode = Objects.requireNonNull($.ipAllocationMode, "expected parameter 'ipAllocationMode' to be non-null");
            $.subnetwork = Objects.requireNonNull($.subnetwork, "expected parameter 'subnetwork' to be non-null");
            $.vlan = Objects.requireNonNull($.vlan, "expected parameter 'vlan' to be non-null");
            return $;
        }
    }

}
