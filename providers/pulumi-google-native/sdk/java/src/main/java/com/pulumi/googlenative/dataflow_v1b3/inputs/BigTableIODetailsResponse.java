// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Metadata for a Cloud Bigtable connector used by the job.
 * 
 */
public final class BigTableIODetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final BigTableIODetailsResponse Empty = new BigTableIODetailsResponse();

    /**
     * InstanceId accessed in the connection.
     * 
     */
    @Import(name="instanceId", required=true)
      private final String instanceId;

    public String instanceId() {
        return this.instanceId;
    }

    /**
     * ProjectId accessed in the connection.
     * 
     */
    @Import(name="project", required=true)
      private final String project;

    public String project() {
        return this.project;
    }

    /**
     * TableId accessed in the connection.
     * 
     */
    @Import(name="tableId", required=true)
      private final String tableId;

    public String tableId() {
        return this.tableId;
    }

    public BigTableIODetailsResponse(
        String instanceId,
        String project,
        String tableId) {
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.project = Objects.requireNonNull(project, "expected parameter 'project' to be non-null");
        this.tableId = Objects.requireNonNull(tableId, "expected parameter 'tableId' to be non-null");
    }

    private BigTableIODetailsResponse() {
        this.instanceId = null;
        this.project = null;
        this.tableId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigTableIODetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String instanceId;
        private String project;
        private String tableId;

        public Builder() {
    	      // Empty
        }

        public Builder(BigTableIODetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceId = defaults.instanceId;
    	      this.project = defaults.project;
    	      this.tableId = defaults.tableId;
        }

        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder tableId(String tableId) {
            this.tableId = Objects.requireNonNull(tableId);
            return this;
        }        public BigTableIODetailsResponse build() {
            return new BigTableIODetailsResponse(instanceId, project, tableId);
        }
    }
}
