// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration.v1alpha1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration.v1alpha1.enums.UtilizationReportTimeFrame;
import com.pulumi.googlenative.vmmigration.v1alpha1.inputs.VmUtilizationInfoArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UtilizationReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final UtilizationReportArgs Empty = new UtilizationReportArgs();

    /**
     * The report display name, as assigned by the user.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The report display name, as assigned by the user.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    @Import(name="sourceId", required=true)
    private Output<String> sourceId;

    public Output<String> sourceId() {
        return this.sourceId;
    }

    /**
     * Time frame of the report.
     * 
     */
    @Import(name="timeFrame")
    private @Nullable Output<UtilizationReportTimeFrame> timeFrame;

    /**
     * @return Time frame of the report.
     * 
     */
    public Optional<Output<UtilizationReportTimeFrame>> timeFrame() {
        return Optional.ofNullable(this.timeFrame);
    }

    /**
     * Required. The ID to use for the report, which will become the final component of the reports&#39;s resource name. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
     * 
     */
    @Import(name="utilizationReportId", required=true)
    private Output<String> utilizationReportId;

    /**
     * @return Required. The ID to use for the report, which will become the final component of the reports&#39;s resource name. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
     * 
     */
    public Output<String> utilizationReportId() {
        return this.utilizationReportId;
    }

    /**
     * List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
     * 
     */
    @Import(name="vms")
    private @Nullable Output<List<VmUtilizationInfoArgs>> vms;

    /**
     * @return List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
     * 
     */
    public Optional<Output<List<VmUtilizationInfoArgs>>> vms() {
        return Optional.ofNullable(this.vms);
    }

    private UtilizationReportArgs() {}

    private UtilizationReportArgs(UtilizationReportArgs $) {
        this.displayName = $.displayName;
        this.location = $.location;
        this.project = $.project;
        this.requestId = $.requestId;
        this.sourceId = $.sourceId;
        this.timeFrame = $.timeFrame;
        this.utilizationReportId = $.utilizationReportId;
        this.vms = $.vms;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UtilizationReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UtilizationReportArgs $;

        public Builder() {
            $ = new UtilizationReportArgs();
        }

        public Builder(UtilizationReportArgs defaults) {
            $ = new UtilizationReportArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The report display name, as assigned by the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The report display name, as assigned by the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder sourceId(Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param timeFrame Time frame of the report.
         * 
         * @return builder
         * 
         */
        public Builder timeFrame(@Nullable Output<UtilizationReportTimeFrame> timeFrame) {
            $.timeFrame = timeFrame;
            return this;
        }

        /**
         * @param timeFrame Time frame of the report.
         * 
         * @return builder
         * 
         */
        public Builder timeFrame(UtilizationReportTimeFrame timeFrame) {
            return timeFrame(Output.of(timeFrame));
        }

        /**
         * @param utilizationReportId Required. The ID to use for the report, which will become the final component of the reports&#39;s resource name. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder utilizationReportId(Output<String> utilizationReportId) {
            $.utilizationReportId = utilizationReportId;
            return this;
        }

        /**
         * @param utilizationReportId Required. The ID to use for the report, which will become the final component of the reports&#39;s resource name. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder utilizationReportId(String utilizationReportId) {
            return utilizationReportId(Output.of(utilizationReportId));
        }

        /**
         * @param vms List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
         * 
         * @return builder
         * 
         */
        public Builder vms(@Nullable Output<List<VmUtilizationInfoArgs>> vms) {
            $.vms = vms;
            return this;
        }

        /**
         * @param vms List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
         * 
         * @return builder
         * 
         */
        public Builder vms(List<VmUtilizationInfoArgs> vms) {
            return vms(Output.of(vms));
        }

        /**
         * @param vms List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
         * 
         * @return builder
         * 
         */
        public Builder vms(VmUtilizationInfoArgs... vms) {
            return vms(List.of(vms));
        }

        public UtilizationReportArgs build() {
            $.sourceId = Objects.requireNonNull($.sourceId, "expected parameter 'sourceId' to be non-null");
            $.utilizationReportId = Objects.requireNonNull($.utilizationReportId, "expected parameter 'utilizationReportId' to be non-null");
            return $;
        }
    }

}
