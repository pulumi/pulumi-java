// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * SandboxConfig contains configurations of the sandbox to use for the node.
 * 
 */
public final class SandboxConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final SandboxConfigResponse Empty = new SandboxConfigResponse();

    /**
     * Type of the sandbox to use for the node (e.g. 'gvisor')
     * 
     */
    @Import(name="sandboxType", required=true)
      private final String sandboxType;

    public String sandboxType() {
        return this.sandboxType;
    }

    /**
     * Type of the sandbox to use for the node.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public SandboxConfigResponse(
        String sandboxType,
        String type) {
        this.sandboxType = Objects.requireNonNull(sandboxType, "expected parameter 'sandboxType' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SandboxConfigResponse() {
        this.sandboxType = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SandboxConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String sandboxType;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(SandboxConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sandboxType = defaults.sandboxType;
    	      this.type = defaults.type;
        }

        public Builder sandboxType(String sandboxType) {
            this.sandboxType = Objects.requireNonNull(sandboxType);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public SandboxConfigResponse build() {
            return new SandboxConfigResponse(sandboxType, type);
        }
    }
}
