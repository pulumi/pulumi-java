// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


/**
 * Information required for a TCP Uptime check request.
 * 
 */
public final class TcpCheckResponse extends com.pulumi.resources.InvokeArgs {

    public static final TcpCheckResponse Empty = new TcpCheckResponse();

    /**
     * The TCP port on the server against which to run the check. Will be combined with host (specified within the monitored_resource) to construct the full URL. Required.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    /**
     * @return The TCP port on the server against which to run the check. Will be combined with host (specified within the monitored_resource) to construct the full URL. Required.
     * 
     */
    public Integer port() {
        return this.port;
    }

    private TcpCheckResponse() {}

    private TcpCheckResponse(TcpCheckResponse $) {
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TcpCheckResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TcpCheckResponse $;

        public Builder() {
            $ = new TcpCheckResponse();
        }

        public Builder(TcpCheckResponse defaults) {
            $ = new TcpCheckResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param port The TCP port on the server against which to run the check. Will be combined with host (specified within the monitored_resource) to construct the full URL. Required.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public TcpCheckResponse build() {
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            return $;
        }
    }

}
