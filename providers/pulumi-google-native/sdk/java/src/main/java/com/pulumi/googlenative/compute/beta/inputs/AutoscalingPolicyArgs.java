// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.beta.enums.AutoscalingPolicyMode;
import com.pulumi.googlenative.compute.beta.inputs.AutoscalingPolicyCpuUtilizationArgs;
import com.pulumi.googlenative.compute.beta.inputs.AutoscalingPolicyCustomMetricUtilizationArgs;
import com.pulumi.googlenative.compute.beta.inputs.AutoscalingPolicyLoadBalancingUtilizationArgs;
import com.pulumi.googlenative.compute.beta.inputs.AutoscalingPolicyScaleDownControlArgs;
import com.pulumi.googlenative.compute.beta.inputs.AutoscalingPolicyScaleInControlArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cloud Autoscaler policy.
 * 
 */
public final class AutoscalingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoscalingPolicyArgs Empty = new AutoscalingPolicyArgs();

    /**
     * The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
     * 
     */
    @Import(name="coolDownPeriodSec")
    private @Nullable Output<Integer> coolDownPeriodSec;

    /**
     * @return The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
     * 
     */
    public Optional<Output<Integer>> coolDownPeriodSec() {
        return Optional.ofNullable(this.coolDownPeriodSec);
    }

    /**
     * Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
     * 
     */
    @Import(name="cpuUtilization")
    private @Nullable Output<AutoscalingPolicyCpuUtilizationArgs> cpuUtilization;

    /**
     * @return Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
     * 
     */
    public Optional<Output<AutoscalingPolicyCpuUtilizationArgs>> cpuUtilization() {
        return Optional.ofNullable(this.cpuUtilization);
    }

    /**
     * Configuration parameters of autoscaling based on a custom metric.
     * 
     */
    @Import(name="customMetricUtilizations")
    private @Nullable Output<List<AutoscalingPolicyCustomMetricUtilizationArgs>> customMetricUtilizations;

    /**
     * @return Configuration parameters of autoscaling based on a custom metric.
     * 
     */
    public Optional<Output<List<AutoscalingPolicyCustomMetricUtilizationArgs>>> customMetricUtilizations() {
        return Optional.ofNullable(this.customMetricUtilizations);
    }

    /**
     * Configuration parameters of autoscaling based on load balancer.
     * 
     */
    @Import(name="loadBalancingUtilization")
    private @Nullable Output<AutoscalingPolicyLoadBalancingUtilizationArgs> loadBalancingUtilization;

    /**
     * @return Configuration parameters of autoscaling based on load balancer.
     * 
     */
    public Optional<Output<AutoscalingPolicyLoadBalancingUtilizationArgs>> loadBalancingUtilization() {
        return Optional.ofNullable(this.loadBalancingUtilization);
    }

    /**
     * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
     * 
     */
    @Import(name="maxNumReplicas")
    private @Nullable Output<Integer> maxNumReplicas;

    /**
     * @return The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
     * 
     */
    public Optional<Output<Integer>> maxNumReplicas() {
        return Optional.ofNullable(this.maxNumReplicas);
    }

    /**
     * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
     * 
     */
    @Import(name="minNumReplicas")
    private @Nullable Output<Integer> minNumReplicas;

    /**
     * @return The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
     * 
     */
    public Optional<Output<Integer>> minNumReplicas() {
        return Optional.ofNullable(this.minNumReplicas);
    }

    /**
     * Defines operating mode for this policy.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<AutoscalingPolicyMode> mode;

    /**
     * @return Defines operating mode for this policy.
     * 
     */
    public Optional<Output<AutoscalingPolicyMode>> mode() {
        return Optional.ofNullable(this.mode);
    }

    @Import(name="scaleDownControl")
    private @Nullable Output<AutoscalingPolicyScaleDownControlArgs> scaleDownControl;

    public Optional<Output<AutoscalingPolicyScaleDownControlArgs>> scaleDownControl() {
        return Optional.ofNullable(this.scaleDownControl);
    }

    @Import(name="scaleInControl")
    private @Nullable Output<AutoscalingPolicyScaleInControlArgs> scaleInControl;

    public Optional<Output<AutoscalingPolicyScaleInControlArgs>> scaleInControl() {
        return Optional.ofNullable(this.scaleInControl);
    }

    /**
     * Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
     * 
     */
    @Import(name="scalingSchedules")
    private @Nullable Output<Map<String,String>> scalingSchedules;

    /**
     * @return Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
     * 
     */
    public Optional<Output<Map<String,String>>> scalingSchedules() {
        return Optional.ofNullable(this.scalingSchedules);
    }

    private AutoscalingPolicyArgs() {}

    private AutoscalingPolicyArgs(AutoscalingPolicyArgs $) {
        this.coolDownPeriodSec = $.coolDownPeriodSec;
        this.cpuUtilization = $.cpuUtilization;
        this.customMetricUtilizations = $.customMetricUtilizations;
        this.loadBalancingUtilization = $.loadBalancingUtilization;
        this.maxNumReplicas = $.maxNumReplicas;
        this.minNumReplicas = $.minNumReplicas;
        this.mode = $.mode;
        this.scaleDownControl = $.scaleDownControl;
        this.scaleInControl = $.scaleInControl;
        this.scalingSchedules = $.scalingSchedules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscalingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscalingPolicyArgs $;

        public Builder() {
            $ = new AutoscalingPolicyArgs();
        }

        public Builder(AutoscalingPolicyArgs defaults) {
            $ = new AutoscalingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coolDownPeriodSec The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
         * 
         * @return builder
         * 
         */
        public Builder coolDownPeriodSec(@Nullable Output<Integer> coolDownPeriodSec) {
            $.coolDownPeriodSec = coolDownPeriodSec;
            return this;
        }

        /**
         * @param coolDownPeriodSec The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
         * 
         * @return builder
         * 
         */
        public Builder coolDownPeriodSec(Integer coolDownPeriodSec) {
            return coolDownPeriodSec(Output.of(coolDownPeriodSec));
        }

        /**
         * @param cpuUtilization Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder cpuUtilization(@Nullable Output<AutoscalingPolicyCpuUtilizationArgs> cpuUtilization) {
            $.cpuUtilization = cpuUtilization;
            return this;
        }

        /**
         * @param cpuUtilization Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder cpuUtilization(AutoscalingPolicyCpuUtilizationArgs cpuUtilization) {
            return cpuUtilization(Output.of(cpuUtilization));
        }

        /**
         * @param customMetricUtilizations Configuration parameters of autoscaling based on a custom metric.
         * 
         * @return builder
         * 
         */
        public Builder customMetricUtilizations(@Nullable Output<List<AutoscalingPolicyCustomMetricUtilizationArgs>> customMetricUtilizations) {
            $.customMetricUtilizations = customMetricUtilizations;
            return this;
        }

        /**
         * @param customMetricUtilizations Configuration parameters of autoscaling based on a custom metric.
         * 
         * @return builder
         * 
         */
        public Builder customMetricUtilizations(List<AutoscalingPolicyCustomMetricUtilizationArgs> customMetricUtilizations) {
            return customMetricUtilizations(Output.of(customMetricUtilizations));
        }

        /**
         * @param customMetricUtilizations Configuration parameters of autoscaling based on a custom metric.
         * 
         * @return builder
         * 
         */
        public Builder customMetricUtilizations(AutoscalingPolicyCustomMetricUtilizationArgs... customMetricUtilizations) {
            return customMetricUtilizations(List.of(customMetricUtilizations));
        }

        /**
         * @param loadBalancingUtilization Configuration parameters of autoscaling based on load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingUtilization(@Nullable Output<AutoscalingPolicyLoadBalancingUtilizationArgs> loadBalancingUtilization) {
            $.loadBalancingUtilization = loadBalancingUtilization;
            return this;
        }

        /**
         * @param loadBalancingUtilization Configuration parameters of autoscaling based on load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingUtilization(AutoscalingPolicyLoadBalancingUtilizationArgs loadBalancingUtilization) {
            return loadBalancingUtilization(Output.of(loadBalancingUtilization));
        }

        /**
         * @param maxNumReplicas The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
         * 
         * @return builder
         * 
         */
        public Builder maxNumReplicas(@Nullable Output<Integer> maxNumReplicas) {
            $.maxNumReplicas = maxNumReplicas;
            return this;
        }

        /**
         * @param maxNumReplicas The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
         * 
         * @return builder
         * 
         */
        public Builder maxNumReplicas(Integer maxNumReplicas) {
            return maxNumReplicas(Output.of(maxNumReplicas));
        }

        /**
         * @param minNumReplicas The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
         * 
         * @return builder
         * 
         */
        public Builder minNumReplicas(@Nullable Output<Integer> minNumReplicas) {
            $.minNumReplicas = minNumReplicas;
            return this;
        }

        /**
         * @param minNumReplicas The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
         * 
         * @return builder
         * 
         */
        public Builder minNumReplicas(Integer minNumReplicas) {
            return minNumReplicas(Output.of(minNumReplicas));
        }

        /**
         * @param mode Defines operating mode for this policy.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<AutoscalingPolicyMode> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Defines operating mode for this policy.
         * 
         * @return builder
         * 
         */
        public Builder mode(AutoscalingPolicyMode mode) {
            return mode(Output.of(mode));
        }

        public Builder scaleDownControl(@Nullable Output<AutoscalingPolicyScaleDownControlArgs> scaleDownControl) {
            $.scaleDownControl = scaleDownControl;
            return this;
        }

        public Builder scaleDownControl(AutoscalingPolicyScaleDownControlArgs scaleDownControl) {
            return scaleDownControl(Output.of(scaleDownControl));
        }

        public Builder scaleInControl(@Nullable Output<AutoscalingPolicyScaleInControlArgs> scaleInControl) {
            $.scaleInControl = scaleInControl;
            return this;
        }

        public Builder scaleInControl(AutoscalingPolicyScaleInControlArgs scaleInControl) {
            return scaleInControl(Output.of(scaleInControl));
        }

        /**
         * @param scalingSchedules Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
         * 
         * @return builder
         * 
         */
        public Builder scalingSchedules(@Nullable Output<Map<String,String>> scalingSchedules) {
            $.scalingSchedules = scalingSchedules;
            return this;
        }

        /**
         * @param scalingSchedules Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
         * 
         * @return builder
         * 
         */
        public Builder scalingSchedules(Map<String,String> scalingSchedules) {
            return scalingSchedules(Output.of(scalingSchedules));
        }

        public AutoscalingPolicyArgs build() {
            return $;
        }
    }

}
