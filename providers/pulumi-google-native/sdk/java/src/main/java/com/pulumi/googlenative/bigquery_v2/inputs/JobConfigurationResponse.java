// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.JobConfigurationExtractResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.JobConfigurationLoadResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.JobConfigurationQueryResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.JobConfigurationTableCopyResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class JobConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobConfigurationResponse Empty = new JobConfigurationResponse();

    /**
     * [Pick one] Copies a table.
     * 
     */
    @Import(name="copy", required=true)
    private JobConfigurationTableCopyResponse copy;

    /**
     * @return [Pick one] Copies a table.
     * 
     */
    public JobConfigurationTableCopyResponse copy() {
        return this.copy;
    }

    /**
     * [Optional] If set, don&#39;t actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn&#39;t a dry run. Behavior of non-query jobs is undefined.
     * 
     */
    @Import(name="dryRun", required=true)
    private Boolean dryRun;

    /**
     * @return [Optional] If set, don&#39;t actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn&#39;t a dry run. Behavior of non-query jobs is undefined.
     * 
     */
    public Boolean dryRun() {
        return this.dryRun;
    }

    /**
     * [Pick one] Configures an extract job.
     * 
     */
    @Import(name="extract", required=true)
    private JobConfigurationExtractResponse extract;

    /**
     * @return [Pick one] Configures an extract job.
     * 
     */
    public JobConfigurationExtractResponse extract() {
        return this.extract;
    }

    /**
     * [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
     * 
     */
    @Import(name="jobTimeoutMs", required=true)
    private String jobTimeoutMs;

    /**
     * @return [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
     * 
     */
    public String jobTimeoutMs() {
        return this.jobTimeoutMs;
    }

    /**
     * The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
     * 
     */
    @Import(name="jobType", required=true)
    private String jobType;

    /**
     * @return The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
     * 
     */
    public String jobType() {
        return this.jobType;
    }

    /**
     * The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * [Pick one] Configures a load job.
     * 
     */
    @Import(name="load", required=true)
    private JobConfigurationLoadResponse load;

    /**
     * @return [Pick one] Configures a load job.
     * 
     */
    public JobConfigurationLoadResponse load() {
        return this.load;
    }

    /**
     * [Pick one] Configures a query job.
     * 
     */
    @Import(name="query", required=true)
    private JobConfigurationQueryResponse query;

    /**
     * @return [Pick one] Configures a query job.
     * 
     */
    public JobConfigurationQueryResponse query() {
        return this.query;
    }

    private JobConfigurationResponse() {}

    private JobConfigurationResponse(JobConfigurationResponse $) {
        this.copy = $.copy;
        this.dryRun = $.dryRun;
        this.extract = $.extract;
        this.jobTimeoutMs = $.jobTimeoutMs;
        this.jobType = $.jobType;
        this.labels = $.labels;
        this.load = $.load;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobConfigurationResponse $;

        public Builder() {
            $ = new JobConfigurationResponse();
        }

        public Builder(JobConfigurationResponse defaults) {
            $ = new JobConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param copy [Pick one] Copies a table.
         * 
         * @return builder
         * 
         */
        public Builder copy(JobConfigurationTableCopyResponse copy) {
            $.copy = copy;
            return this;
        }

        /**
         * @param dryRun [Optional] If set, don&#39;t actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn&#39;t a dry run. Behavior of non-query jobs is undefined.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param extract [Pick one] Configures an extract job.
         * 
         * @return builder
         * 
         */
        public Builder extract(JobConfigurationExtractResponse extract) {
            $.extract = extract;
            return this;
        }

        /**
         * @param jobTimeoutMs [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
         * 
         * @return builder
         * 
         */
        public Builder jobTimeoutMs(String jobTimeoutMs) {
            $.jobTimeoutMs = jobTimeoutMs;
            return this;
        }

        /**
         * @param jobType The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
         * 
         * @return builder
         * 
         */
        public Builder jobType(String jobType) {
            $.jobType = jobType;
            return this;
        }

        /**
         * @param labels The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param load [Pick one] Configures a load job.
         * 
         * @return builder
         * 
         */
        public Builder load(JobConfigurationLoadResponse load) {
            $.load = load;
            return this;
        }

        /**
         * @param query [Pick one] Configures a query job.
         * 
         * @return builder
         * 
         */
        public Builder query(JobConfigurationQueryResponse query) {
            $.query = query;
            return this;
        }

        public JobConfigurationResponse build() {
            $.copy = Objects.requireNonNull($.copy, "expected parameter 'copy' to be non-null");
            $.dryRun = Objects.requireNonNull($.dryRun, "expected parameter 'dryRun' to be non-null");
            $.extract = Objects.requireNonNull($.extract, "expected parameter 'extract' to be non-null");
            $.jobTimeoutMs = Objects.requireNonNull($.jobTimeoutMs, "expected parameter 'jobTimeoutMs' to be non-null");
            $.jobType = Objects.requireNonNull($.jobType, "expected parameter 'jobType' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.load = Objects.requireNonNull($.load, "expected parameter 'load' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            return $;
        }
    }

}
