// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies an artifact available via some URI.
 * 
 */
public final class SoftwareRecipeArtifactRemoteArgs extends com.pulumi.resources.ResourceArgs {

    public static final SoftwareRecipeArtifactRemoteArgs Empty = new SoftwareRecipeArtifactRemoteArgs();

    /**
     * Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any of the steps.
     * 
     */
    @Import(name="checksum")
    private @Nullable Output<String> checksum;

    /**
     * @return Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any of the steps.
     * 
     */
    public Optional<Output<String>> checksum() {
        return Optional.ofNullable(this.checksum);
    }

    /**
     * URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private SoftwareRecipeArtifactRemoteArgs() {}

    private SoftwareRecipeArtifactRemoteArgs(SoftwareRecipeArtifactRemoteArgs $) {
        this.checksum = $.checksum;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareRecipeArtifactRemoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareRecipeArtifactRemoteArgs $;

        public Builder() {
            $ = new SoftwareRecipeArtifactRemoteArgs();
        }

        public Builder(SoftwareRecipeArtifactRemoteArgs defaults) {
            $ = new SoftwareRecipeArtifactRemoteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checksum Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any of the steps.
         * 
         * @return builder
         * 
         */
        public Builder checksum(@Nullable Output<String> checksum) {
            $.checksum = checksum;
            return this;
        }

        /**
         * @param checksum Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any of the steps.
         * 
         * @return builder
         * 
         */
        public Builder checksum(String checksum) {
            return checksum(Output.of(checksum));
        }

        /**
         * @param uri URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public SoftwareRecipeArtifactRemoteArgs build() {
            return $;
        }
    }

}
