// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.ExternalRefResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.LicenseResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 * 
 */
public final class PackageInfoNoteResponse extends com.pulumi.resources.InvokeArgs {

    public static final PackageInfoNoteResponse Empty = new PackageInfoNoteResponse();

    /**
     * Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
     * 
     */
    @Import(name="analyzed", required=true)
    private Boolean analyzed;

    /**
     * @return Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
     * 
     */
    public Boolean analyzed() {
        return this.analyzed;
    }

    /**
     * A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
     * 
     */
    @Import(name="attribution", required=true)
    private String attribution;

    /**
     * @return A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
     * 
     */
    public String attribution() {
        return this.attribution;
    }

    /**
     * Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
     * 
     */
    @Import(name="checksum", required=true)
    private String checksum;

    /**
     * @return Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
     * 
     */
    public String checksum() {
        return this.checksum;
    }

    /**
     * Identify the copyright holders of the package, as well as any dates present
     * 
     */
    @Import(name="copyright", required=true)
    private String copyright;

    /**
     * @return Identify the copyright holders of the package, as well as any dates present
     * 
     */
    public String copyright() {
        return this.copyright;
    }

    /**
     * A more detailed description of the package
     * 
     */
    @Import(name="detailedDescription", required=true)
    private String detailedDescription;

    /**
     * @return A more detailed description of the package
     * 
     */
    public String detailedDescription() {
        return this.detailedDescription;
    }

    /**
     * This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
     * 
     */
    @Import(name="downloadLocation", required=true)
    private String downloadLocation;

    /**
     * @return This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
     * 
     */
    public String downloadLocation() {
        return this.downloadLocation;
    }

    /**
     * ExternalRef
     * 
     */
    @Import(name="externalRefs", required=true)
    private List<ExternalRefResponse> externalRefs;

    /**
     * @return ExternalRef
     * 
     */
    public List<ExternalRefResponse> externalRefs() {
        return this.externalRefs;
    }

    /**
     * Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
     * 
     */
    @Import(name="filesLicenseInfo", required=true)
    private List<String> filesLicenseInfo;

    /**
     * @return Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
     * 
     */
    public List<String> filesLicenseInfo() {
        return this.filesLicenseInfo;
    }

    /**
     * Provide a place for the SPDX file creator to record a web site that serves as the package&#39;s home page
     * 
     */
    @Import(name="homePage", required=true)
    private String homePage;

    /**
     * @return Provide a place for the SPDX file creator to record a web site that serves as the package&#39;s home page
     * 
     */
    public String homePage() {
        return this.homePage;
    }

    /**
     * List the licenses that have been declared by the authors of the package
     * 
     */
    @Import(name="licenseDeclared", required=true)
    private LicenseResponse licenseDeclared;

    /**
     * @return List the licenses that have been declared by the authors of the package
     * 
     */
    public LicenseResponse licenseDeclared() {
        return this.licenseDeclared;
    }

    /**
     * If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
     * 
     */
    @Import(name="originator", required=true)
    private String originator;

    /**
     * @return If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
     * 
     */
    public String originator() {
        return this.originator;
    }

    /**
     * The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
     * 
     */
    @Import(name="packageType", required=true)
    private String packageType;

    /**
     * @return The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
     * 
     */
    public String packageType() {
        return this.packageType;
    }

    /**
     * A short description of the package
     * 
     */
    @Import(name="summaryDescription", required=true)
    private String summaryDescription;

    /**
     * @return A short description of the package
     * 
     */
    public String summaryDescription() {
        return this.summaryDescription;
    }

    /**
     * Identify the actual distribution source for the package/directory identified in the SPDX file
     * 
     */
    @Import(name="supplier", required=true)
    private String supplier;

    /**
     * @return Identify the actual distribution source for the package/directory identified in the SPDX file
     * 
     */
    public String supplier() {
        return this.supplier;
    }

    /**
     * Identify the full name of the package as given by the Package Originator
     * 
     */
    @Import(name="title", required=true)
    private String title;

    /**
     * @return Identify the full name of the package as given by the Package Originator
     * 
     */
    public String title() {
        return this.title;
    }

    /**
     * This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
     * 
     */
    @Import(name="verificationCode", required=true)
    private String verificationCode;

    /**
     * @return This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
     * 
     */
    public String verificationCode() {
        return this.verificationCode;
    }

    /**
     * Identify the version of the package
     * 
     */
    @Import(name="version", required=true)
    private String version;

    /**
     * @return Identify the version of the package
     * 
     */
    public String version() {
        return this.version;
    }

    private PackageInfoNoteResponse() {}

    private PackageInfoNoteResponse(PackageInfoNoteResponse $) {
        this.analyzed = $.analyzed;
        this.attribution = $.attribution;
        this.checksum = $.checksum;
        this.copyright = $.copyright;
        this.detailedDescription = $.detailedDescription;
        this.downloadLocation = $.downloadLocation;
        this.externalRefs = $.externalRefs;
        this.filesLicenseInfo = $.filesLicenseInfo;
        this.homePage = $.homePage;
        this.licenseDeclared = $.licenseDeclared;
        this.originator = $.originator;
        this.packageType = $.packageType;
        this.summaryDescription = $.summaryDescription;
        this.supplier = $.supplier;
        this.title = $.title;
        this.verificationCode = $.verificationCode;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageInfoNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageInfoNoteResponse $;

        public Builder() {
            $ = new PackageInfoNoteResponse();
        }

        public Builder(PackageInfoNoteResponse defaults) {
            $ = new PackageInfoNoteResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyzed Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
         * 
         * @return builder
         * 
         */
        public Builder analyzed(Boolean analyzed) {
            $.analyzed = analyzed;
            return this;
        }

        /**
         * @param attribution A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
         * 
         * @return builder
         * 
         */
        public Builder attribution(String attribution) {
            $.attribution = attribution;
            return this;
        }

        /**
         * @param checksum Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
         * 
         * @return builder
         * 
         */
        public Builder checksum(String checksum) {
            $.checksum = checksum;
            return this;
        }

        /**
         * @param copyright Identify the copyright holders of the package, as well as any dates present
         * 
         * @return builder
         * 
         */
        public Builder copyright(String copyright) {
            $.copyright = copyright;
            return this;
        }

        /**
         * @param detailedDescription A more detailed description of the package
         * 
         * @return builder
         * 
         */
        public Builder detailedDescription(String detailedDescription) {
            $.detailedDescription = detailedDescription;
            return this;
        }

        /**
         * @param downloadLocation This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
         * 
         * @return builder
         * 
         */
        public Builder downloadLocation(String downloadLocation) {
            $.downloadLocation = downloadLocation;
            return this;
        }

        /**
         * @param externalRefs ExternalRef
         * 
         * @return builder
         * 
         */
        public Builder externalRefs(List<ExternalRefResponse> externalRefs) {
            $.externalRefs = externalRefs;
            return this;
        }

        /**
         * @param externalRefs ExternalRef
         * 
         * @return builder
         * 
         */
        public Builder externalRefs(ExternalRefResponse... externalRefs) {
            return externalRefs(List.of(externalRefs));
        }

        /**
         * @param filesLicenseInfo Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
         * 
         * @return builder
         * 
         */
        public Builder filesLicenseInfo(List<String> filesLicenseInfo) {
            $.filesLicenseInfo = filesLicenseInfo;
            return this;
        }

        /**
         * @param filesLicenseInfo Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
         * 
         * @return builder
         * 
         */
        public Builder filesLicenseInfo(String... filesLicenseInfo) {
            return filesLicenseInfo(List.of(filesLicenseInfo));
        }

        /**
         * @param homePage Provide a place for the SPDX file creator to record a web site that serves as the package&#39;s home page
         * 
         * @return builder
         * 
         */
        public Builder homePage(String homePage) {
            $.homePage = homePage;
            return this;
        }

        /**
         * @param licenseDeclared List the licenses that have been declared by the authors of the package
         * 
         * @return builder
         * 
         */
        public Builder licenseDeclared(LicenseResponse licenseDeclared) {
            $.licenseDeclared = licenseDeclared;
            return this;
        }

        /**
         * @param originator If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
         * 
         * @return builder
         * 
         */
        public Builder originator(String originator) {
            $.originator = originator;
            return this;
        }

        /**
         * @param packageType The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param summaryDescription A short description of the package
         * 
         * @return builder
         * 
         */
        public Builder summaryDescription(String summaryDescription) {
            $.summaryDescription = summaryDescription;
            return this;
        }

        /**
         * @param supplier Identify the actual distribution source for the package/directory identified in the SPDX file
         * 
         * @return builder
         * 
         */
        public Builder supplier(String supplier) {
            $.supplier = supplier;
            return this;
        }

        /**
         * @param title Identify the full name of the package as given by the Package Originator
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            $.title = title;
            return this;
        }

        /**
         * @param verificationCode This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
         * 
         * @return builder
         * 
         */
        public Builder verificationCode(String verificationCode) {
            $.verificationCode = verificationCode;
            return this;
        }

        /**
         * @param version Identify the version of the package
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public PackageInfoNoteResponse build() {
            $.analyzed = Objects.requireNonNull($.analyzed, "expected parameter 'analyzed' to be non-null");
            $.attribution = Objects.requireNonNull($.attribution, "expected parameter 'attribution' to be non-null");
            $.checksum = Objects.requireNonNull($.checksum, "expected parameter 'checksum' to be non-null");
            $.copyright = Objects.requireNonNull($.copyright, "expected parameter 'copyright' to be non-null");
            $.detailedDescription = Objects.requireNonNull($.detailedDescription, "expected parameter 'detailedDescription' to be non-null");
            $.downloadLocation = Objects.requireNonNull($.downloadLocation, "expected parameter 'downloadLocation' to be non-null");
            $.externalRefs = Objects.requireNonNull($.externalRefs, "expected parameter 'externalRefs' to be non-null");
            $.filesLicenseInfo = Objects.requireNonNull($.filesLicenseInfo, "expected parameter 'filesLicenseInfo' to be non-null");
            $.homePage = Objects.requireNonNull($.homePage, "expected parameter 'homePage' to be non-null");
            $.licenseDeclared = Objects.requireNonNull($.licenseDeclared, "expected parameter 'licenseDeclared' to be non-null");
            $.originator = Objects.requireNonNull($.originator, "expected parameter 'originator' to be non-null");
            $.packageType = Objects.requireNonNull($.packageType, "expected parameter 'packageType' to be non-null");
            $.summaryDescription = Objects.requireNonNull($.summaryDescription, "expected parameter 'summaryDescription' to be non-null");
            $.supplier = Objects.requireNonNull($.supplier, "expected parameter 'supplier' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.verificationCode = Objects.requireNonNull($.verificationCode, "expected parameter 'verificationCode' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
