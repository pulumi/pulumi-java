// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BuiltImageResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.TimeSpanResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Artifacts created by the build pipeline.
 * 
 */
public final class ResultsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResultsResponse Empty = new ResultsResponse();

    /**
     * Path to the artifact manifest. Only populated when artifacts are uploaded.
     * 
     */
    @Import(name="artifactManifest", required=true)
    private String artifactManifest;

    public String artifactManifest() {
        return this.artifactManifest;
    }

    /**
     * Time to push all non-container artifacts.
     * 
     */
    @Import(name="artifactTiming", required=true)
    private TimeSpanResponse artifactTiming;

    public TimeSpanResponse artifactTiming() {
        return this.artifactTiming;
    }

    /**
     * List of build step digests, in the order corresponding to build step indices.
     * 
     */
    @Import(name="buildStepImages", required=true)
    private List<String> buildStepImages;

    public List<String> buildStepImages() {
        return this.buildStepImages;
    }

    /**
     * List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
     * 
     */
    @Import(name="buildStepOutputs", required=true)
    private List<String> buildStepOutputs;

    public List<String> buildStepOutputs() {
        return this.buildStepOutputs;
    }

    /**
     * Container images that were built as a part of the build.
     * 
     */
    @Import(name="images", required=true)
    private List<BuiltImageResponse> images;

    public List<BuiltImageResponse> images() {
        return this.images;
    }

    /**
     * Number of artifacts uploaded. Only populated when artifacts are uploaded.
     * 
     */
    @Import(name="numArtifacts", required=true)
    private String numArtifacts;

    public String numArtifacts() {
        return this.numArtifacts;
    }

    private ResultsResponse() {}

    private ResultsResponse(ResultsResponse $) {
        this.artifactManifest = $.artifactManifest;
        this.artifactTiming = $.artifactTiming;
        this.buildStepImages = $.buildStepImages;
        this.buildStepOutputs = $.buildStepOutputs;
        this.images = $.images;
        this.numArtifacts = $.numArtifacts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResultsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResultsResponse $;

        public Builder() {
            $ = new ResultsResponse();
        }

        public Builder(ResultsResponse defaults) {
            $ = new ResultsResponse(Objects.requireNonNull(defaults));
        }

        public Builder artifactManifest(String artifactManifest) {
            $.artifactManifest = artifactManifest;
            return this;
        }

        public Builder artifactTiming(TimeSpanResponse artifactTiming) {
            $.artifactTiming = artifactTiming;
            return this;
        }

        public Builder buildStepImages(List<String> buildStepImages) {
            $.buildStepImages = buildStepImages;
            return this;
        }

        public Builder buildStepImages(String... buildStepImages) {
            return buildStepImages(List.of(buildStepImages));
        }

        public Builder buildStepOutputs(List<String> buildStepOutputs) {
            $.buildStepOutputs = buildStepOutputs;
            return this;
        }

        public Builder buildStepOutputs(String... buildStepOutputs) {
            return buildStepOutputs(List.of(buildStepOutputs));
        }

        public Builder images(List<BuiltImageResponse> images) {
            $.images = images;
            return this;
        }

        public Builder images(BuiltImageResponse... images) {
            return images(List.of(images));
        }

        public Builder numArtifacts(String numArtifacts) {
            $.numArtifacts = numArtifacts;
            return this;
        }

        public ResultsResponse build() {
            $.artifactManifest = Objects.requireNonNull($.artifactManifest, "expected parameter 'artifactManifest' to be non-null");
            $.artifactTiming = Objects.requireNonNull($.artifactTiming, "expected parameter 'artifactTiming' to be non-null");
            $.buildStepImages = Objects.requireNonNull($.buildStepImages, "expected parameter 'buildStepImages' to be non-null");
            $.buildStepOutputs = Objects.requireNonNull($.buildStepOutputs, "expected parameter 'buildStepOutputs' to be non-null");
            $.images = Objects.requireNonNull($.images, "expected parameter 'images' to be non-null");
            $.numArtifacts = Objects.requireNonNull($.numArtifacts, "expected parameter 'numArtifacts' to be non-null");
            return $;
        }
    }

}
