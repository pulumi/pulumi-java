// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.QueryParameterTypeResponse;
import com.pulumi.googlenative.bigquery_v2.inputs.QueryParameterValueResponse;
import java.lang.String;
import java.util.Objects;


public final class QueryParameterResponse extends com.pulumi.resources.InvokeArgs {

    public static final QueryParameterResponse Empty = new QueryParameterResponse();

    /**
     * [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * [Required] The type of this parameter.
     * 
     */
    @Import(name="parameterType", required=true)
    private QueryParameterTypeResponse parameterType;

    public QueryParameterTypeResponse parameterType() {
        return this.parameterType;
    }

    /**
     * [Required] The value of this parameter.
     * 
     */
    @Import(name="parameterValue", required=true)
    private QueryParameterValueResponse parameterValue;

    public QueryParameterValueResponse parameterValue() {
        return this.parameterValue;
    }

    private QueryParameterResponse() {}

    private QueryParameterResponse(QueryParameterResponse $) {
        this.name = $.name;
        this.parameterType = $.parameterType;
        this.parameterValue = $.parameterValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueryParameterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueryParameterResponse $;

        public Builder() {
            $ = new QueryParameterResponse();
        }

        public Builder(QueryParameterResponse defaults) {
            $ = new QueryParameterResponse(Objects.requireNonNull(defaults));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder parameterType(QueryParameterTypeResponse parameterType) {
            $.parameterType = parameterType;
            return this;
        }

        public Builder parameterValue(QueryParameterValueResponse parameterValue) {
            $.parameterValue = parameterValue;
            return this;
        }

        public QueryParameterResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.parameterType = Objects.requireNonNull($.parameterType, "expected parameter 'parameterType' to be non-null");
            $.parameterValue = Objects.requireNonNull($.parameterValue, "expected parameter 'parameterValue' to be non-null");
            return $;
        }
    }

}
