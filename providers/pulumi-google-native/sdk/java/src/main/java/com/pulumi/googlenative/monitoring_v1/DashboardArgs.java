// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.ColumnLayoutArgs;
import com.pulumi.googlenative.monitoring_v1.inputs.GridLayoutArgs;
import com.pulumi.googlenative.monitoring_v1.inputs.MosaicLayoutArgs;
import com.pulumi.googlenative.monitoring_v1.inputs.RowLayoutArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    /**
     * The content is divided into equally spaced columns and the widgets are arranged vertically.
     * 
     */
    @Import(name="columnLayout")
    private @Nullable Output<ColumnLayoutArgs> columnLayout;

    public Optional<Output<ColumnLayoutArgs>> columnLayout() {
        return Optional.ofNullable(this.columnLayout);
    }

    /**
     * The mutable, human-readable name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.
     * 
     */
    @Import(name="gridLayout")
    private @Nullable Output<GridLayoutArgs> gridLayout;

    public Optional<Output<GridLayoutArgs>> gridLayout() {
        return Optional.ofNullable(this.gridLayout);
    }

    /**
     * Labels applied to the dashboard
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The content is arranged as a grid of tiles, with each content widget occupying one or more grid blocks.
     * 
     */
    @Import(name="mosaicLayout")
    private @Nullable Output<MosaicLayoutArgs> mosaicLayout;

    public Optional<Output<MosaicLayoutArgs>> mosaicLayout() {
        return Optional.ofNullable(this.mosaicLayout);
    }

    /**
     * Immutable. The resource name of the dashboard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The content is divided into equally spaced rows and the widgets are arranged horizontally.
     * 
     */
    @Import(name="rowLayout")
    private @Nullable Output<RowLayoutArgs> rowLayout;

    public Optional<Output<RowLayoutArgs>> rowLayout() {
        return Optional.ofNullable(this.rowLayout);
    }

    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private DashboardArgs() {}

    private DashboardArgs(DashboardArgs $) {
        this.columnLayout = $.columnLayout;
        this.displayName = $.displayName;
        this.etag = $.etag;
        this.gridLayout = $.gridLayout;
        this.labels = $.labels;
        this.mosaicLayout = $.mosaicLayout;
        this.name = $.name;
        this.project = $.project;
        this.rowLayout = $.rowLayout;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardArgs $;

        public Builder() {
            $ = new DashboardArgs();
        }

        public Builder(DashboardArgs defaults) {
            $ = new DashboardArgs(Objects.requireNonNull(defaults));
        }

        public Builder columnLayout(@Nullable Output<ColumnLayoutArgs> columnLayout) {
            $.columnLayout = columnLayout;
            return this;
        }

        public Builder columnLayout(ColumnLayoutArgs columnLayout) {
            return columnLayout(Output.of(columnLayout));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        public Builder gridLayout(@Nullable Output<GridLayoutArgs> gridLayout) {
            $.gridLayout = gridLayout;
            return this;
        }

        public Builder gridLayout(GridLayoutArgs gridLayout) {
            return gridLayout(Output.of(gridLayout));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder mosaicLayout(@Nullable Output<MosaicLayoutArgs> mosaicLayout) {
            $.mosaicLayout = mosaicLayout;
            return this;
        }

        public Builder mosaicLayout(MosaicLayoutArgs mosaicLayout) {
            return mosaicLayout(Output.of(mosaicLayout));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder rowLayout(@Nullable Output<RowLayoutArgs> rowLayout) {
            $.rowLayout = rowLayout;
            return this;
        }

        public Builder rowLayout(RowLayoutArgs rowLayout) {
            return rowLayout(Output.of(rowLayout));
        }

        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public DashboardArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
