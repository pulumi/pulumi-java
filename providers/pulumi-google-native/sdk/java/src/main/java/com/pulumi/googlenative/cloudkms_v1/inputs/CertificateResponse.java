// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
 * 
 */
public final class CertificateResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateResponse Empty = new CertificateResponse();

    /**
     * The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    @Import(name="issuer", required=true)
    private String issuer;

    /**
     * @return The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public String issuer() {
        return this.issuer;
    }

    /**
     * The certificate is not valid after this time. Only present if parsed is true.
     * 
     */
    @Import(name="notAfterTime", required=true)
    private String notAfterTime;

    /**
     * @return The certificate is not valid after this time. Only present if parsed is true.
     * 
     */
    public String notAfterTime() {
        return this.notAfterTime;
    }

    /**
     * The certificate is not valid before this time. Only present if parsed is true.
     * 
     */
    @Import(name="notBeforeTime", required=true)
    private String notBeforeTime;

    /**
     * @return The certificate is not valid before this time. Only present if parsed is true.
     * 
     */
    public String notBeforeTime() {
        return this.notBeforeTime;
    }

    /**
     * True if the certificate was parsed successfully.
     * 
     */
    @Import(name="parsed", required=true)
    private Boolean parsed;

    /**
     * @return True if the certificate was parsed successfully.
     * 
     */
    public Boolean parsed() {
        return this.parsed;
    }

    /**
     * The raw certificate bytes in DER format.
     * 
     */
    @Import(name="rawDer", required=true)
    private String rawDer;

    /**
     * @return The raw certificate bytes in DER format.
     * 
     */
    public String rawDer() {
        return this.rawDer;
    }

    /**
     * The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    @Import(name="serialNumber", required=true)
    private String serialNumber;

    /**
     * @return The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    @Import(name="sha256Fingerprint", required=true)
    private String sha256Fingerprint;

    /**
     * @return The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    public String sha256Fingerprint() {
        return this.sha256Fingerprint;
    }

    /**
     * The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    @Import(name="subject", required=true)
    private String subject;

    /**
     * @return The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public String subject() {
        return this.subject;
    }

    /**
     * The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    @Import(name="subjectAlternativeDnsNames", required=true)
    private List<String> subjectAlternativeDnsNames;

    /**
     * @return The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    public List<String> subjectAlternativeDnsNames() {
        return this.subjectAlternativeDnsNames;
    }

    private CertificateResponse() {}

    private CertificateResponse(CertificateResponse $) {
        this.issuer = $.issuer;
        this.notAfterTime = $.notAfterTime;
        this.notBeforeTime = $.notBeforeTime;
        this.parsed = $.parsed;
        this.rawDer = $.rawDer;
        this.serialNumber = $.serialNumber;
        this.sha256Fingerprint = $.sha256Fingerprint;
        this.subject = $.subject;
        this.subjectAlternativeDnsNames = $.subjectAlternativeDnsNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateResponse $;

        public Builder() {
            $ = new CertificateResponse();
        }

        public Builder(CertificateResponse defaults) {
            $ = new CertificateResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param issuer The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param notAfterTime The certificate is not valid after this time. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder notAfterTime(String notAfterTime) {
            $.notAfterTime = notAfterTime;
            return this;
        }

        /**
         * @param notBeforeTime The certificate is not valid before this time. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeTime(String notBeforeTime) {
            $.notBeforeTime = notBeforeTime;
            return this;
        }

        /**
         * @param parsed True if the certificate was parsed successfully.
         * 
         * @return builder
         * 
         */
        public Builder parsed(Boolean parsed) {
            $.parsed = parsed;
            return this;
        }

        /**
         * @param rawDer The raw certificate bytes in DER format.
         * 
         * @return builder
         * 
         */
        public Builder rawDer(String rawDer) {
            $.rawDer = rawDer;
            return this;
        }

        /**
         * @param serialNumber The certificate serial number as a hex string. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param sha256Fingerprint The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder sha256Fingerprint(String sha256Fingerprint) {
            $.sha256Fingerprint = sha256Fingerprint;
            return this;
        }

        /**
         * @param subject The subject distinguished name in RFC 2253 format. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subjectAlternativeDnsNames The subject Alternative DNS names. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(List<String> subjectAlternativeDnsNames) {
            $.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
            return this;
        }

        /**
         * @param subjectAlternativeDnsNames The subject Alternative DNS names. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(String... subjectAlternativeDnsNames) {
            return subjectAlternativeDnsNames(List.of(subjectAlternativeDnsNames));
        }

        public CertificateResponse build() {
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.notAfterTime = Objects.requireNonNull($.notAfterTime, "expected parameter 'notAfterTime' to be non-null");
            $.notBeforeTime = Objects.requireNonNull($.notBeforeTime, "expected parameter 'notBeforeTime' to be non-null");
            $.parsed = Objects.requireNonNull($.parsed, "expected parameter 'parsed' to be non-null");
            $.rawDer = Objects.requireNonNull($.rawDer, "expected parameter 'rawDer' to be non-null");
            $.serialNumber = Objects.requireNonNull($.serialNumber, "expected parameter 'serialNumber' to be non-null");
            $.sha256Fingerprint = Objects.requireNonNull($.sha256Fingerprint, "expected parameter 'sha256Fingerprint' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.subjectAlternativeDnsNames = Objects.requireNonNull($.subjectAlternativeDnsNames, "expected parameter 'subjectAlternativeDnsNames' to be non-null");
            return $;
        }
    }

}
