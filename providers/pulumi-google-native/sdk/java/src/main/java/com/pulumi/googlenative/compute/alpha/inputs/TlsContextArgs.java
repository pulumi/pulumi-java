// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.inputs.TlsCertificateContextArgs;
import com.pulumi.googlenative.compute.alpha.inputs.TlsValidationContextArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
 * 
 */
public final class TlsContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsContextArgs Empty = new TlsContextArgs();

    /**
     * Defines the mechanism to obtain the client or server certificate.
     * 
     */
    @Import(name="certificateContext")
    private @Nullable Output<TlsCertificateContextArgs> certificateContext;

    /**
     * @return Defines the mechanism to obtain the client or server certificate.
     * 
     */
    public Optional<Output<TlsCertificateContextArgs>> certificateContext() {
        return Optional.ofNullable(this.certificateContext);
    }

    /**
     * Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
     * 
     */
    @Import(name="validationContext")
    private @Nullable Output<TlsValidationContextArgs> validationContext;

    /**
     * @return Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
     * 
     */
    public Optional<Output<TlsValidationContextArgs>> validationContext() {
        return Optional.ofNullable(this.validationContext);
    }

    private TlsContextArgs() {}

    private TlsContextArgs(TlsContextArgs $) {
        this.certificateContext = $.certificateContext;
        this.validationContext = $.validationContext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsContextArgs $;

        public Builder() {
            $ = new TlsContextArgs();
        }

        public Builder(TlsContextArgs defaults) {
            $ = new TlsContextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateContext Defines the mechanism to obtain the client or server certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateContext(@Nullable Output<TlsCertificateContextArgs> certificateContext) {
            $.certificateContext = certificateContext;
            return this;
        }

        /**
         * @param certificateContext Defines the mechanism to obtain the client or server certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateContext(TlsCertificateContextArgs certificateContext) {
            return certificateContext(Output.of(certificateContext));
        }

        /**
         * @param validationContext Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
         * 
         * @return builder
         * 
         */
        public Builder validationContext(@Nullable Output<TlsValidationContextArgs> validationContext) {
            $.validationContext = validationContext;
            return this;
        }

        /**
         * @param validationContext Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
         * 
         * @return builder
         * 
         */
        public Builder validationContext(TlsValidationContextArgs validationContext) {
            return validationContext(Output.of(validationContext));
        }

        public TlsContextArgs build() {
            return $;
        }
    }

}
