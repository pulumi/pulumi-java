// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery.v2.inputs.QueryParameterTypeStructTypesItemArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueryParameterTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueryParameterTypeArgs Empty = new QueryParameterTypeArgs();

    /**
     * [Optional] The type of the array&#39;s elements, if this is an array.
     * 
     */
    @Import(name="arrayType")
    private @Nullable Output<QueryParameterTypeArgs> arrayType;

    /**
     * @return [Optional] The type of the array&#39;s elements, if this is an array.
     * 
     */
    public Optional<Output<QueryParameterTypeArgs>> arrayType() {
        return Optional.ofNullable(this.arrayType);
    }

    /**
     * [Optional] The types of the fields of this struct, in order, if this is a struct.
     * 
     */
    @Import(name="structTypes")
    private @Nullable Output<List<QueryParameterTypeStructTypesItemArgs>> structTypes;

    /**
     * @return [Optional] The types of the fields of this struct, in order, if this is a struct.
     * 
     */
    public Optional<Output<List<QueryParameterTypeStructTypesItemArgs>>> structTypes() {
        return Optional.ofNullable(this.structTypes);
    }

    /**
     * [Required] The top level type of this field.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return [Required] The top level type of this field.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private QueryParameterTypeArgs() {}

    private QueryParameterTypeArgs(QueryParameterTypeArgs $) {
        this.arrayType = $.arrayType;
        this.structTypes = $.structTypes;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueryParameterTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueryParameterTypeArgs $;

        public Builder() {
            $ = new QueryParameterTypeArgs();
        }

        public Builder(QueryParameterTypeArgs defaults) {
            $ = new QueryParameterTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayType [Optional] The type of the array&#39;s elements, if this is an array.
         * 
         * @return builder
         * 
         */
        public Builder arrayType(@Nullable Output<QueryParameterTypeArgs> arrayType) {
            $.arrayType = arrayType;
            return this;
        }

        /**
         * @param arrayType [Optional] The type of the array&#39;s elements, if this is an array.
         * 
         * @return builder
         * 
         */
        public Builder arrayType(QueryParameterTypeArgs arrayType) {
            return arrayType(Output.of(arrayType));
        }

        /**
         * @param structTypes [Optional] The types of the fields of this struct, in order, if this is a struct.
         * 
         * @return builder
         * 
         */
        public Builder structTypes(@Nullable Output<List<QueryParameterTypeStructTypesItemArgs>> structTypes) {
            $.structTypes = structTypes;
            return this;
        }

        /**
         * @param structTypes [Optional] The types of the fields of this struct, in order, if this is a struct.
         * 
         * @return builder
         * 
         */
        public Builder structTypes(List<QueryParameterTypeStructTypesItemArgs> structTypes) {
            return structTypes(Output.of(structTypes));
        }

        /**
         * @param structTypes [Optional] The types of the fields of this struct, in order, if this is a struct.
         * 
         * @return builder
         * 
         */
        public Builder structTypes(QueryParameterTypeStructTypesItemArgs... structTypes) {
            return structTypes(List.of(structTypes));
        }

        /**
         * @param type [Required] The top level type of this field.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type [Required] The top level type of this field.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public QueryParameterTypeArgs build() {
            return $;
        }
    }

}
