// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.gameservices_v1.enums.DataAccessOptionsLogMode;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Write a Data Access (Gin) log
 * 
 */
public final class DataAccessOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataAccessOptionsArgs Empty = new DataAccessOptionsArgs();

    @Import(name="logMode")
      private final @Nullable Output<DataAccessOptionsLogMode> logMode;

    public Output<DataAccessOptionsLogMode> logMode() {
        return this.logMode == null ? Codegen.empty() : this.logMode;
    }

    public DataAccessOptionsArgs(@Nullable Output<DataAccessOptionsLogMode> logMode) {
        this.logMode = logMode;
    }

    private DataAccessOptionsArgs() {
        this.logMode = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataAccessOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DataAccessOptionsLogMode> logMode;

        public Builder() {
    	      // Empty
        }

        public Builder(DataAccessOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logMode = defaults.logMode;
        }

        public Builder logMode(@Nullable Output<DataAccessOptionsLogMode> logMode) {
            this.logMode = logMode;
            return this;
        }
        public Builder logMode(@Nullable DataAccessOptionsLogMode logMode) {
            this.logMode = Codegen.ofNullable(logMode);
            return this;
        }        public DataAccessOptionsArgs build() {
            return new DataAccessOptionsArgs(logMode);
        }
    }
}
