// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A single iOS device.
 * 
 */
public final class IosDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IosDeviceArgs Empty = new IosDeviceArgs();

    /**
     * The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="iosModelId", required=true)
    private Output<String> iosModelId;

    /**
     * @return The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<String> iosModelId() {
        return this.iosModelId;
    }

    /**
     * The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="iosVersionId", required=true)
    private Output<String> iosVersionId;

    /**
     * @return The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<String> iosVersionId() {
        return this.iosVersionId;
    }

    /**
     * The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="locale", required=true)
    private Output<String> locale;

    /**
     * @return The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<String> locale() {
        return this.locale;
    }

    /**
     * How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="orientation", required=true)
    private Output<String> orientation;

    /**
     * @return How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<String> orientation() {
        return this.orientation;
    }

    private IosDeviceArgs() {}

    private IosDeviceArgs(IosDeviceArgs $) {
        this.iosModelId = $.iosModelId;
        this.iosVersionId = $.iosVersionId;
        this.locale = $.locale;
        this.orientation = $.orientation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IosDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IosDeviceArgs $;

        public Builder() {
            $ = new IosDeviceArgs();
        }

        public Builder(IosDeviceArgs defaults) {
            $ = new IosDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param iosModelId The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder iosModelId(Output<String> iosModelId) {
            $.iosModelId = iosModelId;
            return this;
        }

        /**
         * @param iosModelId The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder iosModelId(String iosModelId) {
            return iosModelId(Output.of(iosModelId));
        }

        /**
         * @param iosVersionId The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder iosVersionId(Output<String> iosVersionId) {
            $.iosVersionId = iosVersionId;
            return this;
        }

        /**
         * @param iosVersionId The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder iosVersionId(String iosVersionId) {
            return iosVersionId(Output.of(iosVersionId));
        }

        /**
         * @param locale The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder locale(Output<String> locale) {
            $.locale = locale;
            return this;
        }

        /**
         * @param locale The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder locale(String locale) {
            return locale(Output.of(locale));
        }

        /**
         * @param orientation How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder orientation(Output<String> orientation) {
            $.orientation = orientation;
            return this;
        }

        /**
         * @param orientation How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder orientation(String orientation) {
            return orientation(Output.of(orientation));
        }

        public IosDeviceArgs build() {
            $.iosModelId = Objects.requireNonNull($.iosModelId, "expected parameter 'iosModelId' to be non-null");
            $.iosVersionId = Objects.requireNonNull($.iosVersionId, "expected parameter 'iosVersionId' to be non-null");
            $.locale = Objects.requireNonNull($.locale, "expected parameter 'locale' to be non-null");
            $.orientation = Objects.requireNonNull($.orientation, "expected parameter 'orientation' to be non-null");
            return $;
        }
    }

}
