// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Forward SSH Tunnel connectivity.
 * 
 */
public final class ForwardSshTunnelConnectivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ForwardSshTunnelConnectivityResponse Empty = new ForwardSshTunnelConnectivityResponse();

    /**
     * Hostname for the SSH tunnel.
     * 
     */
    @Import(name="hostname", required=true)
    private String hostname;

    public String hostname() {
        return this.hostname;
    }

    /**
     * Input only. SSH password.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    /**
     * Port for the SSH tunnel, default value is 22.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * Input only. SSH private key.
     * 
     */
    @Import(name="privateKey", required=true)
    private String privateKey;

    public String privateKey() {
        return this.privateKey;
    }

    /**
     * Username for the SSH tunnel.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    private ForwardSshTunnelConnectivityResponse() {}

    private ForwardSshTunnelConnectivityResponse(ForwardSshTunnelConnectivityResponse $) {
        this.hostname = $.hostname;
        this.password = $.password;
        this.port = $.port;
        this.privateKey = $.privateKey;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardSshTunnelConnectivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardSshTunnelConnectivityResponse $;

        public Builder() {
            $ = new ForwardSshTunnelConnectivityResponse();
        }

        public Builder(ForwardSshTunnelConnectivityResponse defaults) {
            $ = new ForwardSshTunnelConnectivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder hostname(String hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder privateKey(String privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public ForwardSshTunnelConnectivityResponse build() {
            $.hostname = Objects.requireNonNull($.hostname, "expected parameter 'hostname' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
