// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.servicemanagement.v1.outputs.EnumValueResponse;
import com.pulumi.googlenative.servicemanagement.v1.outputs.OptionResponse;
import com.pulumi.googlenative.servicemanagement.v1.outputs.SourceContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class EnumResponse {
    /**
     * @return Enum value definitions.
     * 
     */
    private final List<EnumValueResponse> enumvalue;
    /**
     * @return Enum type name.
     * 
     */
    private final String name;
    /**
     * @return Protocol buffer options.
     * 
     */
    private final List<OptionResponse> options;
    /**
     * @return The source context.
     * 
     */
    private final SourceContextResponse sourceContext;
    /**
     * @return The source syntax.
     * 
     */
    private final String syntax;

    @CustomType.Constructor
    private EnumResponse(
        @CustomType.Parameter("enumvalue") List<EnumValueResponse> enumvalue,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("options") List<OptionResponse> options,
        @CustomType.Parameter("sourceContext") SourceContextResponse sourceContext,
        @CustomType.Parameter("syntax") String syntax) {
        this.enumvalue = enumvalue;
        this.name = name;
        this.options = options;
        this.sourceContext = sourceContext;
        this.syntax = syntax;
    }

    /**
     * @return Enum value definitions.
     * 
     */
    public List<EnumValueResponse> enumvalue() {
        return this.enumvalue;
    }
    /**
     * @return Enum type name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Protocol buffer options.
     * 
     */
    public List<OptionResponse> options() {
        return this.options;
    }
    /**
     * @return The source context.
     * 
     */
    public SourceContextResponse sourceContext() {
        return this.sourceContext;
    }
    /**
     * @return The source syntax.
     * 
     */
    public String syntax() {
        return this.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnumResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<EnumValueResponse> enumvalue;
        private String name;
        private List<OptionResponse> options;
        private SourceContextResponse sourceContext;
        private String syntax;

        public Builder() {
    	      // Empty
        }

        public Builder(EnumResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enumvalue = defaults.enumvalue;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.sourceContext = defaults.sourceContext;
    	      this.syntax = defaults.syntax;
        }

        public Builder enumvalue(List<EnumValueResponse> enumvalue) {
            this.enumvalue = Objects.requireNonNull(enumvalue);
            return this;
        }
        public Builder enumvalue(EnumValueResponse... enumvalue) {
            return enumvalue(List.of(enumvalue));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder options(List<OptionResponse> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }
        public Builder sourceContext(SourceContextResponse sourceContext) {
            this.sourceContext = Objects.requireNonNull(sourceContext);
            return this;
        }
        public Builder syntax(String syntax) {
            this.syntax = Objects.requireNonNull(syntax);
            return this;
        }        public EnumResponse build() {
            return new EnumResponse(enumvalue, name, options, sourceContext, syntax);
        }
    }
}
