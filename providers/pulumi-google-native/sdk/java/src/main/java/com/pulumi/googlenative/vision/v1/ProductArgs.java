// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vision.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vision.v1.inputs.KeyValueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProductArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProductArgs Empty = new ProductArgs();

    /**
     * User-provided metadata to be stored with this product. Must be at most 4096 characters long.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided metadata to be stored with this product. Must be at most 4096 characters long.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Immutable. The category for the product identified by the reference image. This should be one of &#34;homegoods-v2&#34;, &#34;apparel-v2&#34;, &#34;toys-v2&#34;, &#34;packagedgoods-v1&#34; or &#34;general-v1&#34;. The legacy categories &#34;homegoods&#34;, &#34;apparel&#34;, and &#34;toys&#34; are still supported, but these should not be used for new products.
     * 
     */
    @Import(name="productCategory")
    private @Nullable Output<String> productCategory;

    /**
     * @return Immutable. The category for the product identified by the reference image. This should be one of &#34;homegoods-v2&#34;, &#34;apparel-v2&#34;, &#34;toys-v2&#34;, &#34;packagedgoods-v1&#34; or &#34;general-v1&#34;. The legacy categories &#34;homegoods&#34;, &#34;apparel&#34;, and &#34;toys&#34; are still supported, but these should not be used for new products.
     * 
     */
    public Optional<Output<String>> productCategory() {
        return Optional.ofNullable(this.productCategory);
    }

    /**
     * A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    /**
     * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. &#34;1199&#34;. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
     * 
     */
    @Import(name="productLabels")
    private @Nullable Output<List<KeyValueArgs>> productLabels;

    /**
     * @return Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. &#34;1199&#34;. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
     * 
     */
    public Optional<Output<List<KeyValueArgs>>> productLabels() {
        return Optional.ofNullable(this.productLabels);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ProductArgs() {}

    private ProductArgs(ProductArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.location = $.location;
        this.name = $.name;
        this.productCategory = $.productCategory;
        this.productId = $.productId;
        this.productLabels = $.productLabels;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProductArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProductArgs $;

        public Builder() {
            $ = new ProductArgs();
        }

        public Builder(ProductArgs defaults) {
            $ = new ProductArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User-provided metadata to be stored with this product. Must be at most 4096 characters long.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided metadata to be stored with this product. Must be at most 4096 characters long.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param productCategory Immutable. The category for the product identified by the reference image. This should be one of &#34;homegoods-v2&#34;, &#34;apparel-v2&#34;, &#34;toys-v2&#34;, &#34;packagedgoods-v1&#34; or &#34;general-v1&#34;. The legacy categories &#34;homegoods&#34;, &#34;apparel&#34;, and &#34;toys&#34; are still supported, but these should not be used for new products.
         * 
         * @return builder
         * 
         */
        public Builder productCategory(@Nullable Output<String> productCategory) {
            $.productCategory = productCategory;
            return this;
        }

        /**
         * @param productCategory Immutable. The category for the product identified by the reference image. This should be one of &#34;homegoods-v2&#34;, &#34;apparel-v2&#34;, &#34;toys-v2&#34;, &#34;packagedgoods-v1&#34; or &#34;general-v1&#34;. The legacy categories &#34;homegoods&#34;, &#34;apparel&#34;, and &#34;toys&#34; are still supported, but these should not be used for new products.
         * 
         * @return builder
         * 
         */
        public Builder productCategory(String productCategory) {
            return productCategory(Output.of(productCategory));
        }

        /**
         * @param productId A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param productLabels Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. &#34;1199&#34;. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
         * 
         * @return builder
         * 
         */
        public Builder productLabels(@Nullable Output<List<KeyValueArgs>> productLabels) {
            $.productLabels = productLabels;
            return this;
        }

        /**
         * @param productLabels Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. &#34;1199&#34;. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
         * 
         * @return builder
         * 
         */
        public Builder productLabels(List<KeyValueArgs> productLabels) {
            return productLabels(Output.of(productLabels));
        }

        /**
         * @param productLabels Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. &#34;1199&#34;. Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
         * 
         * @return builder
         * 
         */
        public Builder productLabels(KeyValueArgs... productLabels) {
            return productLabels(List.of(productLabels));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ProductArgs build() {
            return $;
        }
    }

}
