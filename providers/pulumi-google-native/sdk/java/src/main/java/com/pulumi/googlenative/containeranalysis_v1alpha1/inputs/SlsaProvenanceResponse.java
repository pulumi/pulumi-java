// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.MaterialResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.SlsaBuilderResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.SlsaMetadataResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.SlsaRecipeResponse;
import java.util.List;
import java.util.Objects;


/**
 * SlsaProvenance is the slsa provenance as defined by the slsa spec.
 * 
 */
public final class SlsaProvenanceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SlsaProvenanceResponse Empty = new SlsaProvenanceResponse();

    /**
     * builder is the builder of this provenance
     * 
     */
    @Import(name="builder", required=true)
    private SlsaBuilderResponse builder;

    public SlsaBuilderResponse builder_() {
        return this.builder;
    }

    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    @Import(name="materials", required=true)
    private List<MaterialResponse> materials;

    public List<MaterialResponse> materials() {
        return this.materials;
    }

    /**
     * metadata is the metadata of the provenance
     * 
     */
    @Import(name="metadata", required=true)
    private SlsaMetadataResponse metadata;

    public SlsaMetadataResponse metadata() {
        return this.metadata;
    }

    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
     * 
     */
    @Import(name="recipe", required=true)
    private SlsaRecipeResponse recipe;

    public SlsaRecipeResponse recipe() {
        return this.recipe;
    }

    private SlsaProvenanceResponse() {}

    private SlsaProvenanceResponse(SlsaProvenanceResponse $) {
        this.builder = $.builder;
        this.materials = $.materials;
        this.metadata = $.metadata;
        this.recipe = $.recipe;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlsaProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlsaProvenanceResponse $;

        public Builder() {
            $ = new SlsaProvenanceResponse();
        }

        public Builder(SlsaProvenanceResponse defaults) {
            $ = new SlsaProvenanceResponse(Objects.requireNonNull(defaults));
        }

        public Builder builder_(SlsaBuilderResponse builder) {
            $.builder = builder;
            return this;
        }

        public Builder materials(List<MaterialResponse> materials) {
            $.materials = materials;
            return this;
        }

        public Builder materials(MaterialResponse... materials) {
            return materials(List.of(materials));
        }

        public Builder metadata(SlsaMetadataResponse metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder recipe(SlsaRecipeResponse recipe) {
            $.recipe = recipe;
            return this;
        }

        public SlsaProvenanceResponse build() {
            $.builder = Objects.requireNonNull($.builder, "expected parameter 'builder' to be non-null");
            $.materials = Objects.requireNonNull($.materials, "expected parameter 'materials' to be non-null");
            $.metadata = Objects.requireNonNull($.metadata, "expected parameter 'metadata' to be non-null");
            $.recipe = Objects.requireNonNull($.recipe, "expected parameter 'recipe' to be non-null");
            return $;
        }
    }

}
