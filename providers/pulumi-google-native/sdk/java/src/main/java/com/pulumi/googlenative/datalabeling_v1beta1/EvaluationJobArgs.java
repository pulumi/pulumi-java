// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling_v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.datalabeling_v1beta1.inputs.GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EvaluationJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final EvaluationJobArgs Empty = new EvaluationJobArgs();

    /**
     * Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: "projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}"
     * 
     */
    @Import(name="annotationSpecSet", required=true)
      private final Output<String> annotationSpecSet;

    public Output<String> annotationSpecSet() {
        return this.annotationSpecSet;
    }

    /**
     * Description of the job. The description can be up to 25,000 characters long.
     * 
     */
    @Import(name="description", required=true)
      private final Output<String> description;

    public Output<String> description() {
        return this.description;
    }

    /**
     * Configuration details for the evaluation job.
     * 
     */
    @Import(name="evaluationJobConfig", required=true)
      private final Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig;

    public Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig() {
        return this.evaluationJobConfig;
    }

    /**
     * Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.
     * 
     */
    @Import(name="labelMissingGroundTruth", required=true)
      private final Output<Boolean> labelMissingGroundTruth;

    public Output<Boolean> labelMissingGroundTruth() {
        return this.labelMissingGroundTruth;
    }

    /**
     * The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: "projects/{project_id}/models/{model_name}/versions/{version_name}" There can only be one evaluation job per model version.
     * 
     */
    @Import(name="modelVersion", required=true)
      private final Output<String> modelVersion;

    public Output<String> modelVersion() {
        return this.modelVersion;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
     * 
     */
    @Import(name="schedule", required=true)
      private final Output<String> schedule;

    public Output<String> schedule() {
        return this.schedule;
    }

    public EvaluationJobArgs(
        Output<String> annotationSpecSet,
        Output<String> description,
        Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig,
        Output<Boolean> labelMissingGroundTruth,
        Output<String> modelVersion,
        @Nullable Output<String> project,
        Output<String> schedule) {
        this.annotationSpecSet = Objects.requireNonNull(annotationSpecSet, "expected parameter 'annotationSpecSet' to be non-null");
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.evaluationJobConfig = Objects.requireNonNull(evaluationJobConfig, "expected parameter 'evaluationJobConfig' to be non-null");
        this.labelMissingGroundTruth = Objects.requireNonNull(labelMissingGroundTruth, "expected parameter 'labelMissingGroundTruth' to be non-null");
        this.modelVersion = Objects.requireNonNull(modelVersion, "expected parameter 'modelVersion' to be non-null");
        this.project = project;
        this.schedule = Objects.requireNonNull(schedule, "expected parameter 'schedule' to be non-null");
    }

    private EvaluationJobArgs() {
        this.annotationSpecSet = Codegen.empty();
        this.description = Codegen.empty();
        this.evaluationJobConfig = Codegen.empty();
        this.labelMissingGroundTruth = Codegen.empty();
        this.modelVersion = Codegen.empty();
        this.project = Codegen.empty();
        this.schedule = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EvaluationJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> annotationSpecSet;
        private Output<String> description;
        private Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig;
        private Output<Boolean> labelMissingGroundTruth;
        private Output<String> modelVersion;
        private @Nullable Output<String> project;
        private Output<String> schedule;

        public Builder() {
    	      // Empty
        }

        public Builder(EvaluationJobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotationSpecSet = defaults.annotationSpecSet;
    	      this.description = defaults.description;
    	      this.evaluationJobConfig = defaults.evaluationJobConfig;
    	      this.labelMissingGroundTruth = defaults.labelMissingGroundTruth;
    	      this.modelVersion = defaults.modelVersion;
    	      this.project = defaults.project;
    	      this.schedule = defaults.schedule;
        }

        public Builder annotationSpecSet(Output<String> annotationSpecSet) {
            this.annotationSpecSet = Objects.requireNonNull(annotationSpecSet);
            return this;
        }
        public Builder annotationSpecSet(String annotationSpecSet) {
            this.annotationSpecSet = Output.of(Objects.requireNonNull(annotationSpecSet));
            return this;
        }
        public Builder description(Output<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder description(String description) {
            this.description = Output.of(Objects.requireNonNull(description));
            return this;
        }
        public Builder evaluationJobConfig(Output<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig) {
            this.evaluationJobConfig = Objects.requireNonNull(evaluationJobConfig);
            return this;
        }
        public Builder evaluationJobConfig(GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs evaluationJobConfig) {
            this.evaluationJobConfig = Output.of(Objects.requireNonNull(evaluationJobConfig));
            return this;
        }
        public Builder labelMissingGroundTruth(Output<Boolean> labelMissingGroundTruth) {
            this.labelMissingGroundTruth = Objects.requireNonNull(labelMissingGroundTruth);
            return this;
        }
        public Builder labelMissingGroundTruth(Boolean labelMissingGroundTruth) {
            this.labelMissingGroundTruth = Output.of(Objects.requireNonNull(labelMissingGroundTruth));
            return this;
        }
        public Builder modelVersion(Output<String> modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Output.of(Objects.requireNonNull(modelVersion));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder schedule(Output<String> schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }
        public Builder schedule(String schedule) {
            this.schedule = Output.of(Objects.requireNonNull(schedule));
            return this;
        }        public EvaluationJobArgs build() {
            return new EvaluationJobArgs(annotationSpecSet, description, evaluationJobConfig, labelMissingGroundTruth, modelVersion, project, schedule);
        }
    }
}
