// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow_v1b3.inputs.DisplayDataResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Description of the type, names/ids, and input/outputs for a transform.
 * 
 */
public final class TransformSummaryResponse extends com.pulumi.resources.InvokeArgs {

    public static final TransformSummaryResponse Empty = new TransformSummaryResponse();

    /**
     * Transform-specific display data.
     * 
     */
    @Import(name="displayData", required=true)
    private List<DisplayDataResponse> displayData;

    /**
     * @return Transform-specific display data.
     * 
     */
    public List<DisplayDataResponse> displayData() {
        return this.displayData;
    }

    /**
     * User names for all collection inputs to this transform.
     * 
     */
    @Import(name="inputCollectionName", required=true)
    private List<String> inputCollectionName;

    /**
     * @return User names for all collection inputs to this transform.
     * 
     */
    public List<String> inputCollectionName() {
        return this.inputCollectionName;
    }

    /**
     * Type of transform.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    /**
     * @return Type of transform.
     * 
     */
    public String kind() {
        return this.kind;
    }

    /**
     * User provided name for this transform instance.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return User provided name for this transform instance.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * User names for all collection outputs to this transform.
     * 
     */
    @Import(name="outputCollectionName", required=true)
    private List<String> outputCollectionName;

    /**
     * @return User names for all collection outputs to this transform.
     * 
     */
    public List<String> outputCollectionName() {
        return this.outputCollectionName;
    }

    private TransformSummaryResponse() {}

    private TransformSummaryResponse(TransformSummaryResponse $) {
        this.displayData = $.displayData;
        this.inputCollectionName = $.inputCollectionName;
        this.kind = $.kind;
        this.name = $.name;
        this.outputCollectionName = $.outputCollectionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformSummaryResponse $;

        public Builder() {
            $ = new TransformSummaryResponse();
        }

        public Builder(TransformSummaryResponse defaults) {
            $ = new TransformSummaryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayData Transform-specific display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(List<DisplayDataResponse> displayData) {
            $.displayData = displayData;
            return this;
        }

        /**
         * @param displayData Transform-specific display data.
         * 
         * @return builder
         * 
         */
        public Builder displayData(DisplayDataResponse... displayData) {
            return displayData(List.of(displayData));
        }

        /**
         * @param inputCollectionName User names for all collection inputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder inputCollectionName(List<String> inputCollectionName) {
            $.inputCollectionName = inputCollectionName;
            return this;
        }

        /**
         * @param inputCollectionName User names for all collection inputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder inputCollectionName(String... inputCollectionName) {
            return inputCollectionName(List.of(inputCollectionName));
        }

        /**
         * @param kind Type of transform.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name User provided name for this transform instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param outputCollectionName User names for all collection outputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder outputCollectionName(List<String> outputCollectionName) {
            $.outputCollectionName = outputCollectionName;
            return this;
        }

        /**
         * @param outputCollectionName User names for all collection outputs to this transform.
         * 
         * @return builder
         * 
         */
        public Builder outputCollectionName(String... outputCollectionName) {
            return outputCollectionName(List.of(outputCollectionName));
        }

        public TransformSummaryResponse build() {
            $.displayData = Objects.requireNonNull($.displayData, "expected parameter 'displayData' to be non-null");
            $.inputCollectionName = Objects.requireNonNull($.inputCollectionName, "expected parameter 'inputCollectionName' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.outputCollectionName = Objects.requireNonNull($.outputCollectionName, "expected parameter 'outputCollectionName' to be non-null");
            return $;
        }
    }

}
