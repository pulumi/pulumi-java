// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2JobNotificationEmailsResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2PublishSummaryToCsccResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2PublishToPubSubResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2PublishToStackdriverResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2SaveFindingsResponse;
import java.util.Objects;


/**
 * A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
 * 
 */
public final class GooglePrivacyDlpV2ActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2ActionResponse Empty = new GooglePrivacyDlpV2ActionResponse();

    /**
     * Enable email notification for project owners and editors on job&#39;s completion/failure.
     * 
     */
    @Import(name="jobNotificationEmails", required=true)
    private GooglePrivacyDlpV2JobNotificationEmailsResponse jobNotificationEmails;

    /**
     * @return Enable email notification for project owners and editors on job&#39;s completion/failure.
     * 
     */
    public GooglePrivacyDlpV2JobNotificationEmailsResponse jobNotificationEmails() {
        return this.jobNotificationEmails;
    }

    /**
     * Publish a notification to a pubsub topic.
     * 
     */
    @Import(name="pubSub", required=true)
    private GooglePrivacyDlpV2PublishToPubSubResponse pubSub;

    /**
     * @return Publish a notification to a pubsub topic.
     * 
     */
    public GooglePrivacyDlpV2PublishToPubSubResponse pubSub() {
        return this.pubSub;
    }

    /**
     * Publish findings to Cloud Datahub.
     * 
     */
    @Import(name="publishFindingsToCloudDataCatalog", required=true)
    private GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse publishFindingsToCloudDataCatalog;

    /**
     * @return Publish findings to Cloud Datahub.
     * 
     */
    public GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse publishFindingsToCloudDataCatalog() {
        return this.publishFindingsToCloudDataCatalog;
    }

    /**
     * Publish summary to Cloud Security Command Center (Alpha).
     * 
     */
    @Import(name="publishSummaryToCscc", required=true)
    private GooglePrivacyDlpV2PublishSummaryToCsccResponse publishSummaryToCscc;

    /**
     * @return Publish summary to Cloud Security Command Center (Alpha).
     * 
     */
    public GooglePrivacyDlpV2PublishSummaryToCsccResponse publishSummaryToCscc() {
        return this.publishSummaryToCscc;
    }

    /**
     * Enable Stackdriver metric dlp.googleapis.com/finding_count.
     * 
     */
    @Import(name="publishToStackdriver", required=true)
    private GooglePrivacyDlpV2PublishToStackdriverResponse publishToStackdriver;

    /**
     * @return Enable Stackdriver metric dlp.googleapis.com/finding_count.
     * 
     */
    public GooglePrivacyDlpV2PublishToStackdriverResponse publishToStackdriver() {
        return this.publishToStackdriver;
    }

    /**
     * Save resulting findings in a provided location.
     * 
     */
    @Import(name="saveFindings", required=true)
    private GooglePrivacyDlpV2SaveFindingsResponse saveFindings;

    /**
     * @return Save resulting findings in a provided location.
     * 
     */
    public GooglePrivacyDlpV2SaveFindingsResponse saveFindings() {
        return this.saveFindings;
    }

    private GooglePrivacyDlpV2ActionResponse() {}

    private GooglePrivacyDlpV2ActionResponse(GooglePrivacyDlpV2ActionResponse $) {
        this.jobNotificationEmails = $.jobNotificationEmails;
        this.pubSub = $.pubSub;
        this.publishFindingsToCloudDataCatalog = $.publishFindingsToCloudDataCatalog;
        this.publishSummaryToCscc = $.publishSummaryToCscc;
        this.publishToStackdriver = $.publishToStackdriver;
        this.saveFindings = $.saveFindings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2ActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2ActionResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2ActionResponse();
        }

        public Builder(GooglePrivacyDlpV2ActionResponse defaults) {
            $ = new GooglePrivacyDlpV2ActionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param jobNotificationEmails Enable email notification for project owners and editors on job&#39;s completion/failure.
         * 
         * @return builder
         * 
         */
        public Builder jobNotificationEmails(GooglePrivacyDlpV2JobNotificationEmailsResponse jobNotificationEmails) {
            $.jobNotificationEmails = jobNotificationEmails;
            return this;
        }

        /**
         * @param pubSub Publish a notification to a pubsub topic.
         * 
         * @return builder
         * 
         */
        public Builder pubSub(GooglePrivacyDlpV2PublishToPubSubResponse pubSub) {
            $.pubSub = pubSub;
            return this;
        }

        /**
         * @param publishFindingsToCloudDataCatalog Publish findings to Cloud Datahub.
         * 
         * @return builder
         * 
         */
        public Builder publishFindingsToCloudDataCatalog(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse publishFindingsToCloudDataCatalog) {
            $.publishFindingsToCloudDataCatalog = publishFindingsToCloudDataCatalog;
            return this;
        }

        /**
         * @param publishSummaryToCscc Publish summary to Cloud Security Command Center (Alpha).
         * 
         * @return builder
         * 
         */
        public Builder publishSummaryToCscc(GooglePrivacyDlpV2PublishSummaryToCsccResponse publishSummaryToCscc) {
            $.publishSummaryToCscc = publishSummaryToCscc;
            return this;
        }

        /**
         * @param publishToStackdriver Enable Stackdriver metric dlp.googleapis.com/finding_count.
         * 
         * @return builder
         * 
         */
        public Builder publishToStackdriver(GooglePrivacyDlpV2PublishToStackdriverResponse publishToStackdriver) {
            $.publishToStackdriver = publishToStackdriver;
            return this;
        }

        /**
         * @param saveFindings Save resulting findings in a provided location.
         * 
         * @return builder
         * 
         */
        public Builder saveFindings(GooglePrivacyDlpV2SaveFindingsResponse saveFindings) {
            $.saveFindings = saveFindings;
            return this;
        }

        public GooglePrivacyDlpV2ActionResponse build() {
            $.jobNotificationEmails = Objects.requireNonNull($.jobNotificationEmails, "expected parameter 'jobNotificationEmails' to be non-null");
            $.pubSub = Objects.requireNonNull($.pubSub, "expected parameter 'pubSub' to be non-null");
            $.publishFindingsToCloudDataCatalog = Objects.requireNonNull($.publishFindingsToCloudDataCatalog, "expected parameter 'publishFindingsToCloudDataCatalog' to be non-null");
            $.publishSummaryToCscc = Objects.requireNonNull($.publishSummaryToCscc, "expected parameter 'publishSummaryToCscc' to be non-null");
            $.publishToStackdriver = Objects.requireNonNull($.publishToStackdriver, "expected parameter 'publishToStackdriver' to be non-null");
            $.saveFindings = Objects.requireNonNull($.saveFindings, "expected parameter 'saveFindings' to be non-null");
            return $;
        }
    }

}
