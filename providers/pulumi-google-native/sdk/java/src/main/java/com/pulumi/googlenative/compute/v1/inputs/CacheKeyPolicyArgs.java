// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Message containing what to include in the cache key for a request for Cloud CDN.
 * 
 */
public final class CacheKeyPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheKeyPolicyArgs Empty = new CacheKeyPolicyArgs();

    /**
     * If true, requests to different hosts will be cached separately.
     * 
     */
    @Import(name="includeHost")
    private @Nullable Output<Boolean> includeHost;

    /**
     * @return If true, requests to different hosts will be cached separately.
     * 
     */
    public Optional<Output<Boolean>> includeHost() {
        return Optional.ofNullable(this.includeHost);
    }

    /**
     * Allows HTTP request headers (by name) to be used in the cache key.
     * 
     */
    @Import(name="includeHttpHeaders")
    private @Nullable Output<List<String>> includeHttpHeaders;

    /**
     * @return Allows HTTP request headers (by name) to be used in the cache key.
     * 
     */
    public Optional<Output<List<String>>> includeHttpHeaders() {
        return Optional.ofNullable(this.includeHttpHeaders);
    }

    /**
     * Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     * 
     */
    @Import(name="includeNamedCookies")
    private @Nullable Output<List<String>> includeNamedCookies;

    /**
     * @return Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     * 
     */
    public Optional<Output<List<String>>> includeNamedCookies() {
        return Optional.ofNullable(this.includeNamedCookies);
    }

    /**
     * If true, http and https requests will be cached separately.
     * 
     */
    @Import(name="includeProtocol")
    private @Nullable Output<Boolean> includeProtocol;

    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    public Optional<Output<Boolean>> includeProtocol() {
        return Optional.ofNullable(this.includeProtocol);
    }

    /**
     * If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     * 
     */
    @Import(name="includeQueryString")
    private @Nullable Output<Boolean> includeQueryString;

    /**
     * @return If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     * 
     */
    public Optional<Output<Boolean>> includeQueryString() {
        return Optional.ofNullable(this.includeQueryString);
    }

    /**
     * Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    @Import(name="queryStringBlacklist")
    private @Nullable Output<List<String>> queryStringBlacklist;

    /**
     * @return Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    public Optional<Output<List<String>>> queryStringBlacklist() {
        return Optional.ofNullable(this.queryStringBlacklist);
    }

    /**
     * Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    @Import(name="queryStringWhitelist")
    private @Nullable Output<List<String>> queryStringWhitelist;

    /**
     * @return Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    public Optional<Output<List<String>>> queryStringWhitelist() {
        return Optional.ofNullable(this.queryStringWhitelist);
    }

    private CacheKeyPolicyArgs() {}

    private CacheKeyPolicyArgs(CacheKeyPolicyArgs $) {
        this.includeHost = $.includeHost;
        this.includeHttpHeaders = $.includeHttpHeaders;
        this.includeNamedCookies = $.includeNamedCookies;
        this.includeProtocol = $.includeProtocol;
        this.includeQueryString = $.includeQueryString;
        this.queryStringBlacklist = $.queryStringBlacklist;
        this.queryStringWhitelist = $.queryStringWhitelist;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheKeyPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheKeyPolicyArgs $;

        public Builder() {
            $ = new CacheKeyPolicyArgs();
        }

        public Builder(CacheKeyPolicyArgs defaults) {
            $ = new CacheKeyPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeHost If true, requests to different hosts will be cached separately.
         * 
         * @return builder
         * 
         */
        public Builder includeHost(@Nullable Output<Boolean> includeHost) {
            $.includeHost = includeHost;
            return this;
        }

        /**
         * @param includeHost If true, requests to different hosts will be cached separately.
         * 
         * @return builder
         * 
         */
        public Builder includeHost(Boolean includeHost) {
            return includeHost(Output.of(includeHost));
        }

        /**
         * @param includeHttpHeaders Allows HTTP request headers (by name) to be used in the cache key.
         * 
         * @return builder
         * 
         */
        public Builder includeHttpHeaders(@Nullable Output<List<String>> includeHttpHeaders) {
            $.includeHttpHeaders = includeHttpHeaders;
            return this;
        }

        /**
         * @param includeHttpHeaders Allows HTTP request headers (by name) to be used in the cache key.
         * 
         * @return builder
         * 
         */
        public Builder includeHttpHeaders(List<String> includeHttpHeaders) {
            return includeHttpHeaders(Output.of(includeHttpHeaders));
        }

        /**
         * @param includeHttpHeaders Allows HTTP request headers (by name) to be used in the cache key.
         * 
         * @return builder
         * 
         */
        public Builder includeHttpHeaders(String... includeHttpHeaders) {
            return includeHttpHeaders(List.of(includeHttpHeaders));
        }

        /**
         * @param includeNamedCookies Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
         * 
         * @return builder
         * 
         */
        public Builder includeNamedCookies(@Nullable Output<List<String>> includeNamedCookies) {
            $.includeNamedCookies = includeNamedCookies;
            return this;
        }

        /**
         * @param includeNamedCookies Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
         * 
         * @return builder
         * 
         */
        public Builder includeNamedCookies(List<String> includeNamedCookies) {
            return includeNamedCookies(Output.of(includeNamedCookies));
        }

        /**
         * @param includeNamedCookies Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
         * 
         * @return builder
         * 
         */
        public Builder includeNamedCookies(String... includeNamedCookies) {
            return includeNamedCookies(List.of(includeNamedCookies));
        }

        /**
         * @param includeProtocol If true, http and https requests will be cached separately.
         * 
         * @return builder
         * 
         */
        public Builder includeProtocol(@Nullable Output<Boolean> includeProtocol) {
            $.includeProtocol = includeProtocol;
            return this;
        }

        /**
         * @param includeProtocol If true, http and https requests will be cached separately.
         * 
         * @return builder
         * 
         */
        public Builder includeProtocol(Boolean includeProtocol) {
            return includeProtocol(Output.of(includeProtocol));
        }

        /**
         * @param includeQueryString If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
         * 
         * @return builder
         * 
         */
        public Builder includeQueryString(@Nullable Output<Boolean> includeQueryString) {
            $.includeQueryString = includeQueryString;
            return this;
        }

        /**
         * @param includeQueryString If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
         * 
         * @return builder
         * 
         */
        public Builder includeQueryString(Boolean includeQueryString) {
            return includeQueryString(Output.of(includeQueryString));
        }

        /**
         * @param queryStringBlacklist Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringBlacklist(@Nullable Output<List<String>> queryStringBlacklist) {
            $.queryStringBlacklist = queryStringBlacklist;
            return this;
        }

        /**
         * @param queryStringBlacklist Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringBlacklist(List<String> queryStringBlacklist) {
            return queryStringBlacklist(Output.of(queryStringBlacklist));
        }

        /**
         * @param queryStringBlacklist Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringBlacklist(String... queryStringBlacklist) {
            return queryStringBlacklist(List.of(queryStringBlacklist));
        }

        /**
         * @param queryStringWhitelist Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringWhitelist(@Nullable Output<List<String>> queryStringWhitelist) {
            $.queryStringWhitelist = queryStringWhitelist;
            return this;
        }

        /**
         * @param queryStringWhitelist Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringWhitelist(List<String> queryStringWhitelist) {
            return queryStringWhitelist(Output.of(queryStringWhitelist));
        }

        /**
         * @param queryStringWhitelist Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringWhitelist(String... queryStringWhitelist) {
            return queryStringWhitelist(List.of(queryStringWhitelist));
        }

        public CacheKeyPolicyArgs build() {
            return $;
        }
    }

}
