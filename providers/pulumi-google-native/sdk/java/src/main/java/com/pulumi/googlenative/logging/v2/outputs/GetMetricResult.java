// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.logging.v2.outputs.BucketOptionsResponse;
import com.pulumi.googlenative.logging.v2.outputs.MetricDescriptorResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMetricResult {
    /**
     * @return Optional. The bucket_options are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
     * 
     */
    private final BucketOptionsResponse bucketOptions;
    /**
     * @return The creation timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    private final String createTime;
    /**
     * @return Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
     * 
     */
    private final String description;
    /**
     * @return Optional. If set to True, then this metric is disabled and it does not generate any points.
     * 
     */
    private final Boolean disabled;
    /**
     * @return An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: &#34;resource.type=gae_app AND severity&gt;=ERROR&#34; The maximum length of the filter is 20000 characters.
     * 
     */
    private final String filter;
    /**
     * @return Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
     * 
     */
    private final Map<String,String> labelExtractors;
    /**
     * @return Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of &#34;1&#34;. Such a metric counts the number of log entries matching the filter expression.The name, type, and description fields in the metric_descriptor are output only, and is constructed using the name and description field in the LogMetric.To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a value_extractor expression in the LogMetric.Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the label_extractors map.The metric_kind and value_type fields in the metric_descriptor cannot be updated once initially configured. New labels can be added in the metric_descriptor, but existing labels cannot be modified except for their description.
     * 
     */
    private final MetricDescriptorResponse metricDescriptor;
    /**
     * @return The client-assigned metric identifier. Examples: &#34;error_count&#34;, &#34;nginx/requests&#34;.Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*&#39;,()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format &#34;projects/PROJECT_ID/metrics/METRIC_ID&#34;. Example: If the resource name of a metric is &#34;projects/my-project/metrics/nginx%2Frequests&#34;, this field&#39;s value is &#34;nginx/requests&#34;.
     * 
     */
    private final String name;
    /**
     * @return The last update timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    private final String updateTime;
    /**
     * @return Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument are: 1. field: The name of the log entry field from which the value is to be extracted. 2. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, &#34;.*quantity=(\d+).*&#34;)
     * 
     */
    private final String valueExtractor;
    /**
     * @return Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     * @deprecated
     * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     */
    @Deprecated /* Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed. */
    private final String version;

    @CustomType.Constructor
    private GetMetricResult(
        @CustomType.Parameter("bucketOptions") BucketOptionsResponse bucketOptions,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("disabled") Boolean disabled,
        @CustomType.Parameter("filter") String filter,
        @CustomType.Parameter("labelExtractors") Map<String,String> labelExtractors,
        @CustomType.Parameter("metricDescriptor") MetricDescriptorResponse metricDescriptor,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("updateTime") String updateTime,
        @CustomType.Parameter("valueExtractor") String valueExtractor,
        @CustomType.Parameter("version") String version) {
        this.bucketOptions = bucketOptions;
        this.createTime = createTime;
        this.description = description;
        this.disabled = disabled;
        this.filter = filter;
        this.labelExtractors = labelExtractors;
        this.metricDescriptor = metricDescriptor;
        this.name = name;
        this.updateTime = updateTime;
        this.valueExtractor = valueExtractor;
        this.version = version;
    }

    /**
     * @return Optional. The bucket_options are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
     * 
     */
    public BucketOptionsResponse bucketOptions() {
        return this.bucketOptions;
    }
    /**
     * @return The creation timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Optional. If set to True, then this metric is disabled and it does not generate any points.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: &#34;resource.type=gae_app AND severity&gt;=ERROR&#34; The maximum length of the filter is 20000 characters.
     * 
     */
    public String filter() {
        return this.filter;
    }
    /**
     * @return Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
     * 
     */
    public Map<String,String> labelExtractors() {
        return this.labelExtractors;
    }
    /**
     * @return Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of &#34;1&#34;. Such a metric counts the number of log entries matching the filter expression.The name, type, and description fields in the metric_descriptor are output only, and is constructed using the name and description field in the LogMetric.To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a value_extractor expression in the LogMetric.Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the label_extractors map.The metric_kind and value_type fields in the metric_descriptor cannot be updated once initially configured. New labels can be added in the metric_descriptor, but existing labels cannot be modified except for their description.
     * 
     */
    public MetricDescriptorResponse metricDescriptor() {
        return this.metricDescriptor;
    }
    /**
     * @return The client-assigned metric identifier. Examples: &#34;error_count&#34;, &#34;nginx/requests&#34;.Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*&#39;,()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format &#34;projects/PROJECT_ID/metrics/METRIC_ID&#34;. Example: If the resource name of a metric is &#34;projects/my-project/metrics/nginx%2Frequests&#34;, this field&#39;s value is &#34;nginx/requests&#34;.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The last update timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument are: 1. field: The name of the log entry field from which the value is to be extracted. 2. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, &#34;.*quantity=(\d+).*&#34;)
     * 
     */
    public String valueExtractor() {
        return this.valueExtractor;
    }
    /**
     * @return Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     * @deprecated
     * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     */
    @Deprecated /* Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed. */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketOptionsResponse bucketOptions;
        private String createTime;
        private String description;
        private Boolean disabled;
        private String filter;
        private Map<String,String> labelExtractors;
        private MetricDescriptorResponse metricDescriptor;
        private String name;
        private String updateTime;
        private String valueExtractor;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMetricResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketOptions = defaults.bucketOptions;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.filter = defaults.filter;
    	      this.labelExtractors = defaults.labelExtractors;
    	      this.metricDescriptor = defaults.metricDescriptor;
    	      this.name = defaults.name;
    	      this.updateTime = defaults.updateTime;
    	      this.valueExtractor = defaults.valueExtractor;
    	      this.version = defaults.version;
        }

        public Builder bucketOptions(BucketOptionsResponse bucketOptions) {
            this.bucketOptions = Objects.requireNonNull(bucketOptions);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        public Builder labelExtractors(Map<String,String> labelExtractors) {
            this.labelExtractors = Objects.requireNonNull(labelExtractors);
            return this;
        }
        public Builder metricDescriptor(MetricDescriptorResponse metricDescriptor) {
            this.metricDescriptor = Objects.requireNonNull(metricDescriptor);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public Builder valueExtractor(String valueExtractor) {
            this.valueExtractor = Objects.requireNonNull(valueExtractor);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetMetricResult build() {
            return new GetMetricResult(bucketOptions, createTime, description, disabled, filter, labelExtractors, metricDescriptor, name, updateTime, valueExtractor, version);
        }
    }
}
