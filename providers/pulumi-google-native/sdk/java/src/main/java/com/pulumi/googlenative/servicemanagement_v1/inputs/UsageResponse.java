// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.UsageRuleResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Configuration controlling usage of a service.
 * 
 */
public final class UsageResponse extends com.pulumi.resources.InvokeArgs {

    public static final UsageResponse Empty = new UsageResponse();

    /**
     * The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
     * 
     */
    @Import(name="producerNotificationChannel", required=true)
    private String producerNotificationChannel;

    public String producerNotificationChannel() {
        return this.producerNotificationChannel;
    }

    /**
     * Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example &#39;serviceusage.googleapis.com/billing-enabled&#39;. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include &#34;serviceusage.googleapis.com/tos/cloud&#34;. Other Google APIs should include &#34;serviceusage.googleapis.com/tos/universal&#34;. Additional ToS can be included based on the business needs.
     * 
     */
    @Import(name="requirements", required=true)
    private List<String> requirements;

    public List<String> requirements() {
        return this.requirements;
    }

    /**
     * A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    @Import(name="rules", required=true)
    private List<UsageRuleResponse> rules;

    public List<UsageRuleResponse> rules() {
        return this.rules;
    }

    private UsageResponse() {}

    private UsageResponse(UsageResponse $) {
        this.producerNotificationChannel = $.producerNotificationChannel;
        this.requirements = $.requirements;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageResponse $;

        public Builder() {
            $ = new UsageResponse();
        }

        public Builder(UsageResponse defaults) {
            $ = new UsageResponse(Objects.requireNonNull(defaults));
        }

        public Builder producerNotificationChannel(String producerNotificationChannel) {
            $.producerNotificationChannel = producerNotificationChannel;
            return this;
        }

        public Builder requirements(List<String> requirements) {
            $.requirements = requirements;
            return this;
        }

        public Builder requirements(String... requirements) {
            return requirements(List.of(requirements));
        }

        public Builder rules(List<UsageRuleResponse> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(UsageRuleResponse... rules) {
            return rules(List.of(rules));
        }

        public UsageResponse build() {
            $.producerNotificationChannel = Objects.requireNonNull($.producerNotificationChannel, "expected parameter 'producerNotificationChannel' to be non-null");
            $.requirements = Objects.requireNonNull($.requirements, "expected parameter 'requirements' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
