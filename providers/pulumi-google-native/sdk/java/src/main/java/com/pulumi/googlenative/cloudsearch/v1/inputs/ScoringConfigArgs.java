// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Scoring configurations for a source while processing a Search or Suggest request.
 * 
 */
public final class ScoringConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScoringConfigArgs Empty = new ScoringConfigArgs();

    /**
     * Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
     * 
     */
    @Import(name="disableFreshness")
    private @Nullable Output<Boolean> disableFreshness;

    /**
     * @return Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
     * 
     */
    public Optional<Output<Boolean>> disableFreshness() {
        return Optional.ofNullable(this.disableFreshness);
    }

    /**
     * Whether to personalize the results. By default, personal signals will be used to boost results.
     * 
     */
    @Import(name="disablePersonalization")
    private @Nullable Output<Boolean> disablePersonalization;

    /**
     * @return Whether to personalize the results. By default, personal signals will be used to boost results.
     * 
     */
    public Optional<Output<Boolean>> disablePersonalization() {
        return Optional.ofNullable(this.disablePersonalization);
    }

    private ScoringConfigArgs() {}

    private ScoringConfigArgs(ScoringConfigArgs $) {
        this.disableFreshness = $.disableFreshness;
        this.disablePersonalization = $.disablePersonalization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScoringConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScoringConfigArgs $;

        public Builder() {
            $ = new ScoringConfigArgs();
        }

        public Builder(ScoringConfigArgs defaults) {
            $ = new ScoringConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableFreshness Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
         * 
         * @return builder
         * 
         */
        public Builder disableFreshness(@Nullable Output<Boolean> disableFreshness) {
            $.disableFreshness = disableFreshness;
            return this;
        }

        /**
         * @param disableFreshness Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
         * 
         * @return builder
         * 
         */
        public Builder disableFreshness(Boolean disableFreshness) {
            return disableFreshness(Output.of(disableFreshness));
        }

        /**
         * @param disablePersonalization Whether to personalize the results. By default, personal signals will be used to boost results.
         * 
         * @return builder
         * 
         */
        public Builder disablePersonalization(@Nullable Output<Boolean> disablePersonalization) {
            $.disablePersonalization = disablePersonalization;
            return this;
        }

        /**
         * @param disablePersonalization Whether to personalize the results. By default, personal signals will be used to boost results.
         * 
         * @return builder
         * 
         */
        public Builder disablePersonalization(Boolean disablePersonalization) {
            return disablePersonalization(Output.of(disablePersonalization));
        }

        public ScoringConfigArgs build() {
            return $;
        }
    }

}
