// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.notebooks_v1.enums.ExecutionTemplateJobType;
import com.pulumi.googlenative.notebooks_v1.inputs.DataprocParametersArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.SchedulerAcceleratorConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.VertexAIParametersArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The description a notebook execution workload.
 * 
 */
public final class ExecutionTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecutionTemplateArgs Empty = new ExecutionTemplateArgs();

    /**
     * Configuration (count and accelerator type) for hardware running notebook execution.
     * 
     */
    @Import(name="acceleratorConfig")
      private final @Nullable Output<SchedulerAcceleratorConfigArgs> acceleratorConfig;

    public Output<SchedulerAcceleratorConfigArgs> acceleratorConfig() {
        return this.acceleratorConfig == null ? Codegen.empty() : this.acceleratorConfig;
    }

    /**
     * Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
     * 
     */
    @Import(name="containerImageUri")
      private final @Nullable Output<String> containerImageUri;

    public Output<String> containerImageUri() {
        return this.containerImageUri == null ? Codegen.empty() : this.containerImageUri;
    }

    /**
     * Parameters used in Dataproc JobType executions.
     * 
     */
    @Import(name="dataprocParameters")
      private final @Nullable Output<DataprocParametersArgs> dataprocParameters;

    public Output<DataprocParametersArgs> dataprocParameters() {
        return this.dataprocParameters == null ? Codegen.empty() : this.dataprocParameters;
    }

    /**
     * Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
     * 
     */
    @Import(name="inputNotebookFile")
      private final @Nullable Output<String> inputNotebookFile;

    public Output<String> inputNotebookFile() {
        return this.inputNotebookFile == null ? Codegen.empty() : this.inputNotebookFile;
    }

    /**
     * The type of Job to be used on this execution.
     * 
     */
    @Import(name="jobType")
      private final @Nullable Output<ExecutionTemplateJobType> jobType;

    public Output<ExecutionTemplateJobType> jobType() {
        return this.jobType == null ? Codegen.empty() : this.jobType;
    }

    /**
     * Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
     * 
     */
    @Import(name="kernelSpec")
      private final @Nullable Output<String> kernelSpec;

    public Output<String> kernelSpec() {
        return this.kernelSpec == null ? Codegen.empty() : this.kernelSpec;
    }

    /**
     * Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
     * 
     */
    @Import(name="masterType")
      private final @Nullable Output<String> masterType;

    public Output<String> masterType() {
        return this.masterType == null ? Codegen.empty() : this.masterType;
    }

    /**
     * Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
     * 
     */
    @Import(name="outputNotebookFolder")
      private final @Nullable Output<String> outputNotebookFolder;

    public Output<String> outputNotebookFolder() {
        return this.outputNotebookFolder == null ? Codegen.empty() : this.outputNotebookFolder;
    }

    /**
     * Parameters used within the 'input_notebook_file' notebook.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<String> parameters;

    public Output<String> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
     * 
     */
    @Import(name="paramsYamlFile")
      private final @Nullable Output<String> paramsYamlFile;

    public Output<String> paramsYamlFile() {
        return this.paramsYamlFile == null ? Codegen.empty() : this.paramsYamlFile;
    }

    /**
     * The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
     * 
     */
    @Import(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> serviceAccount() {
        return this.serviceAccount == null ? Codegen.empty() : this.serviceAccount;
    }

    /**
     * Parameters used in Vertex AI JobType executions.
     * 
     */
    @Import(name="vertexAiParameters")
      private final @Nullable Output<VertexAIParametersArgs> vertexAiParameters;

    public Output<VertexAIParametersArgs> vertexAiParameters() {
        return this.vertexAiParameters == null ? Codegen.empty() : this.vertexAiParameters;
    }

    public ExecutionTemplateArgs(
        @Nullable Output<SchedulerAcceleratorConfigArgs> acceleratorConfig,
        @Nullable Output<String> containerImageUri,
        @Nullable Output<DataprocParametersArgs> dataprocParameters,
        @Nullable Output<String> inputNotebookFile,
        @Nullable Output<ExecutionTemplateJobType> jobType,
        @Nullable Output<String> kernelSpec,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> masterType,
        @Nullable Output<String> outputNotebookFolder,
        @Nullable Output<String> parameters,
        @Nullable Output<String> paramsYamlFile,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<VertexAIParametersArgs> vertexAiParameters) {
        this.acceleratorConfig = acceleratorConfig;
        this.containerImageUri = containerImageUri;
        this.dataprocParameters = dataprocParameters;
        this.inputNotebookFile = inputNotebookFile;
        this.jobType = jobType;
        this.kernelSpec = kernelSpec;
        this.labels = labels;
        this.masterType = masterType;
        this.outputNotebookFolder = outputNotebookFolder;
        this.parameters = parameters;
        this.paramsYamlFile = paramsYamlFile;
        this.serviceAccount = serviceAccount;
        this.vertexAiParameters = vertexAiParameters;
    }

    private ExecutionTemplateArgs() {
        this.acceleratorConfig = Codegen.empty();
        this.containerImageUri = Codegen.empty();
        this.dataprocParameters = Codegen.empty();
        this.inputNotebookFile = Codegen.empty();
        this.jobType = Codegen.empty();
        this.kernelSpec = Codegen.empty();
        this.labels = Codegen.empty();
        this.masterType = Codegen.empty();
        this.outputNotebookFolder = Codegen.empty();
        this.parameters = Codegen.empty();
        this.paramsYamlFile = Codegen.empty();
        this.serviceAccount = Codegen.empty();
        this.vertexAiParameters = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SchedulerAcceleratorConfigArgs> acceleratorConfig;
        private @Nullable Output<String> containerImageUri;
        private @Nullable Output<DataprocParametersArgs> dataprocParameters;
        private @Nullable Output<String> inputNotebookFile;
        private @Nullable Output<ExecutionTemplateJobType> jobType;
        private @Nullable Output<String> kernelSpec;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> masterType;
        private @Nullable Output<String> outputNotebookFolder;
        private @Nullable Output<String> parameters;
        private @Nullable Output<String> paramsYamlFile;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<VertexAIParametersArgs> vertexAiParameters;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecutionTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.containerImageUri = defaults.containerImageUri;
    	      this.dataprocParameters = defaults.dataprocParameters;
    	      this.inputNotebookFile = defaults.inputNotebookFile;
    	      this.jobType = defaults.jobType;
    	      this.kernelSpec = defaults.kernelSpec;
    	      this.labels = defaults.labels;
    	      this.masterType = defaults.masterType;
    	      this.outputNotebookFolder = defaults.outputNotebookFolder;
    	      this.parameters = defaults.parameters;
    	      this.paramsYamlFile = defaults.paramsYamlFile;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.vertexAiParameters = defaults.vertexAiParameters;
        }

        public Builder acceleratorConfig(@Nullable Output<SchedulerAcceleratorConfigArgs> acceleratorConfig) {
            this.acceleratorConfig = acceleratorConfig;
            return this;
        }
        public Builder acceleratorConfig(@Nullable SchedulerAcceleratorConfigArgs acceleratorConfig) {
            this.acceleratorConfig = Codegen.ofNullable(acceleratorConfig);
            return this;
        }
        public Builder containerImageUri(@Nullable Output<String> containerImageUri) {
            this.containerImageUri = containerImageUri;
            return this;
        }
        public Builder containerImageUri(@Nullable String containerImageUri) {
            this.containerImageUri = Codegen.ofNullable(containerImageUri);
            return this;
        }
        public Builder dataprocParameters(@Nullable Output<DataprocParametersArgs> dataprocParameters) {
            this.dataprocParameters = dataprocParameters;
            return this;
        }
        public Builder dataprocParameters(@Nullable DataprocParametersArgs dataprocParameters) {
            this.dataprocParameters = Codegen.ofNullable(dataprocParameters);
            return this;
        }
        public Builder inputNotebookFile(@Nullable Output<String> inputNotebookFile) {
            this.inputNotebookFile = inputNotebookFile;
            return this;
        }
        public Builder inputNotebookFile(@Nullable String inputNotebookFile) {
            this.inputNotebookFile = Codegen.ofNullable(inputNotebookFile);
            return this;
        }
        public Builder jobType(@Nullable Output<ExecutionTemplateJobType> jobType) {
            this.jobType = jobType;
            return this;
        }
        public Builder jobType(@Nullable ExecutionTemplateJobType jobType) {
            this.jobType = Codegen.ofNullable(jobType);
            return this;
        }
        public Builder kernelSpec(@Nullable Output<String> kernelSpec) {
            this.kernelSpec = kernelSpec;
            return this;
        }
        public Builder kernelSpec(@Nullable String kernelSpec) {
            this.kernelSpec = Codegen.ofNullable(kernelSpec);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder masterType(@Nullable Output<String> masterType) {
            this.masterType = masterType;
            return this;
        }
        public Builder masterType(@Nullable String masterType) {
            this.masterType = Codegen.ofNullable(masterType);
            return this;
        }
        public Builder outputNotebookFolder(@Nullable Output<String> outputNotebookFolder) {
            this.outputNotebookFolder = outputNotebookFolder;
            return this;
        }
        public Builder outputNotebookFolder(@Nullable String outputNotebookFolder) {
            this.outputNotebookFolder = Codegen.ofNullable(outputNotebookFolder);
            return this;
        }
        public Builder parameters(@Nullable Output<String> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable String parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder paramsYamlFile(@Nullable Output<String> paramsYamlFile) {
            this.paramsYamlFile = paramsYamlFile;
            return this;
        }
        public Builder paramsYamlFile(@Nullable String paramsYamlFile) {
            this.paramsYamlFile = Codegen.ofNullable(paramsYamlFile);
            return this;
        }
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }
        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Codegen.ofNullable(serviceAccount);
            return this;
        }
        public Builder vertexAiParameters(@Nullable Output<VertexAIParametersArgs> vertexAiParameters) {
            this.vertexAiParameters = vertexAiParameters;
            return this;
        }
        public Builder vertexAiParameters(@Nullable VertexAIParametersArgs vertexAiParameters) {
            this.vertexAiParameters = Codegen.ofNullable(vertexAiParameters);
            return this;
        }        public ExecutionTemplateArgs build() {
            return new ExecutionTemplateArgs(acceleratorConfig, containerImageUri, dataprocParameters, inputNotebookFile, jobType, kernelSpec, labels, masterType, outputNotebookFolder, parameters, paramsYamlFile, serviceAccount, vertexAiParameters);
        }
    }
}
