// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v3.inputs.BasicSliResponse;
import com.pulumi.googlenative.monitoring_v3.inputs.RequestBasedSliResponse;
import java.lang.Double;
import java.util.Objects;


/**
 * A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance.
 * 
 */
public final class PerformanceThresholdResponse extends com.pulumi.resources.InvokeArgs {

    public static final PerformanceThresholdResponse Empty = new PerformanceThresholdResponse();

    /**
     * BasicSli to evaluate to judge window quality.
     * 
     */
    @Import(name="basicSliPerformance", required=true)
    private BasicSliResponse basicSliPerformance;

    public BasicSliResponse basicSliPerformance() {
        return this.basicSliPerformance;
    }

    /**
     * RequestBasedSli to evaluate to judge window quality.
     * 
     */
    @Import(name="performance", required=true)
    private RequestBasedSliResponse performance;

    public RequestBasedSliResponse performance() {
        return this.performance;
    }

    /**
     * If window performance &gt;= threshold, the window is counted as good.
     * 
     */
    @Import(name="threshold", required=true)
    private Double threshold;

    public Double threshold() {
        return this.threshold;
    }

    private PerformanceThresholdResponse() {}

    private PerformanceThresholdResponse(PerformanceThresholdResponse $) {
        this.basicSliPerformance = $.basicSliPerformance;
        this.performance = $.performance;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PerformanceThresholdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PerformanceThresholdResponse $;

        public Builder() {
            $ = new PerformanceThresholdResponse();
        }

        public Builder(PerformanceThresholdResponse defaults) {
            $ = new PerformanceThresholdResponse(Objects.requireNonNull(defaults));
        }

        public Builder basicSliPerformance(BasicSliResponse basicSliPerformance) {
            $.basicSliPerformance = basicSliPerformance;
            return this;
        }

        public Builder performance(RequestBasedSliResponse performance) {
            $.performance = performance;
            return this;
        }

        public Builder threshold(Double threshold) {
            $.threshold = threshold;
            return this;
        }

        public PerformanceThresholdResponse build() {
            $.basicSliPerformance = Objects.requireNonNull($.basicSliPerformance, "expected parameter 'basicSliPerformance' to be non-null");
            $.performance = Objects.requireNonNull($.performance, "expected parameter 'performance' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            return $;
        }
    }

}
