// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v3.inputs.BasicSliResponse;
import com.pulumi.googlenative.monitoring_v3.inputs.RequestBasedSliResponse;
import java.lang.Double;
import java.util.Objects;


/**
 * A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance.
 * 
 */
public final class PerformanceThresholdResponse extends com.pulumi.resources.InvokeArgs {

    public static final PerformanceThresholdResponse Empty = new PerformanceThresholdResponse();

    /**
     * BasicSli to evaluate to judge window quality.
     * 
     */
    @Import(name="basicSliPerformance", required=true)
      private final BasicSliResponse basicSliPerformance;

    public BasicSliResponse basicSliPerformance() {
        return this.basicSliPerformance;
    }

    /**
     * RequestBasedSli to evaluate to judge window quality.
     * 
     */
    @Import(name="performance", required=true)
      private final RequestBasedSliResponse performance;

    public RequestBasedSliResponse performance() {
        return this.performance;
    }

    /**
     * If window performance &gt;= threshold, the window is counted as good.
     * 
     */
    @Import(name="threshold", required=true)
      private final Double threshold;

    public Double threshold() {
        return this.threshold;
    }

    public PerformanceThresholdResponse(
        BasicSliResponse basicSliPerformance,
        RequestBasedSliResponse performance,
        Double threshold) {
        this.basicSliPerformance = Objects.requireNonNull(basicSliPerformance, "expected parameter 'basicSliPerformance' to be non-null");
        this.performance = Objects.requireNonNull(performance, "expected parameter 'performance' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
    }

    private PerformanceThresholdResponse() {
        this.basicSliPerformance = null;
        this.performance = null;
        this.threshold = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PerformanceThresholdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicSliResponse basicSliPerformance;
        private RequestBasedSliResponse performance;
        private Double threshold;

        public Builder() {
    	      // Empty
        }

        public Builder(PerformanceThresholdResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basicSliPerformance = defaults.basicSliPerformance;
    	      this.performance = defaults.performance;
    	      this.threshold = defaults.threshold;
        }

        public Builder basicSliPerformance(BasicSliResponse basicSliPerformance) {
            this.basicSliPerformance = Objects.requireNonNull(basicSliPerformance);
            return this;
        }
        public Builder performance(RequestBasedSliResponse performance) {
            this.performance = Objects.requireNonNull(performance);
            return this;
        }
        public Builder threshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }        public PerformanceThresholdResponse build() {
            return new PerformanceThresholdResponse(basicSliPerformance, performance, threshold);
        }
    }
}
