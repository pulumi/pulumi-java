// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigExportToSecurityCommandCenter;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigRiskLevel;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigTargetPlatformsItem;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigUserAgent;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.AuthenticationArgs;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunArgs;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScheduleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScanConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScanConfigArgs Empty = new ScanConfigArgs();

    /**
     * The authentication configuration. If specified, service will use the authentication configuration during scanning.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<AuthenticationArgs> authentication;

    public Optional<Output<AuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
     * 
     */
    @Import(name="blacklistPatterns")
    private @Nullable Output<List<String>> blacklistPatterns;

    public Optional<Output<List<String>>> blacklistPatterns() {
        return Optional.ofNullable(this.blacklistPatterns);
    }

    /**
     * The user provided display name of the ScanConfig.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Controls export of scan configurations and results to Security Command Center.
     * 
     */
    @Import(name="exportToSecurityCommandCenter")
    private @Nullable Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter;

    public Optional<Output<ScanConfigExportToSecurityCommandCenter>> exportToSecurityCommandCenter() {
        return Optional.ofNullable(this.exportToSecurityCommandCenter);
    }

    /**
     * Whether to keep scanning even if most requests return HTTP error codes.
     * 
     */
    @Import(name="ignoreHttpStatusErrors")
    private @Nullable Output<Boolean> ignoreHttpStatusErrors;

    public Optional<Output<Boolean>> ignoreHttpStatusErrors() {
        return Optional.ofNullable(this.ignoreHttpStatusErrors);
    }

    /**
     * Latest ScanRun if available.
     * 
     */
    @Import(name="latestRun")
    private @Nullable Output<ScanRunArgs> latestRun;

    public Optional<Output<ScanRunArgs>> latestRun() {
        return Optional.ofNullable(this.latestRun);
    }

    /**
     * Whether the scan config is managed by Web Security Scanner, output only.
     * 
     */
    @Import(name="managedScan")
    private @Nullable Output<Boolean> managedScan;

    public Optional<Output<Boolean>> managedScan() {
        return Optional.ofNullable(this.managedScan);
    }

    /**
     * The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
     * 
     */
    @Import(name="maxQps")
    private @Nullable Output<Integer> maxQps;

    public Optional<Output<Integer>> maxQps() {
        return Optional.ofNullable(this.maxQps);
    }

    /**
     * The resource name of the ScanConfig. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}&#39;. The ScanConfig IDs are generated by the system.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The risk level selected for the scan
     * 
     */
    @Import(name="riskLevel")
    private @Nullable Output<ScanConfigRiskLevel> riskLevel;

    public Optional<Output<ScanConfigRiskLevel>> riskLevel() {
        return Optional.ofNullable(this.riskLevel);
    }

    /**
     * The schedule of the ScanConfig.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<ScheduleArgs> schedule;

    public Optional<Output<ScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The starting URLs from which the scanner finds site pages.
     * 
     */
    @Import(name="startingUrls", required=true)
    private Output<List<String>> startingUrls;

    public Output<List<String>> startingUrls() {
        return this.startingUrls;
    }

    /**
     * Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
     * 
     */
    @Import(name="staticIpScan")
    private @Nullable Output<Boolean> staticIpScan;

    public Optional<Output<Boolean>> staticIpScan() {
        return Optional.ofNullable(this.staticIpScan);
    }

    /**
     * Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.
     * 
     */
    @Import(name="targetPlatforms")
    private @Nullable Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms;

    public Optional<Output<List<ScanConfigTargetPlatformsItem>>> targetPlatforms() {
        return Optional.ofNullable(this.targetPlatforms);
    }

    /**
     * The user agent used during scanning.
     * 
     */
    @Import(name="userAgent")
    private @Nullable Output<ScanConfigUserAgent> userAgent;

    public Optional<Output<ScanConfigUserAgent>> userAgent() {
        return Optional.ofNullable(this.userAgent);
    }

    private ScanConfigArgs() {}

    private ScanConfigArgs(ScanConfigArgs $) {
        this.authentication = $.authentication;
        this.blacklistPatterns = $.blacklistPatterns;
        this.displayName = $.displayName;
        this.exportToSecurityCommandCenter = $.exportToSecurityCommandCenter;
        this.ignoreHttpStatusErrors = $.ignoreHttpStatusErrors;
        this.latestRun = $.latestRun;
        this.managedScan = $.managedScan;
        this.maxQps = $.maxQps;
        this.name = $.name;
        this.project = $.project;
        this.riskLevel = $.riskLevel;
        this.schedule = $.schedule;
        this.startingUrls = $.startingUrls;
        this.staticIpScan = $.staticIpScan;
        this.targetPlatforms = $.targetPlatforms;
        this.userAgent = $.userAgent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScanConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScanConfigArgs $;

        public Builder() {
            $ = new ScanConfigArgs();
        }

        public Builder(ScanConfigArgs defaults) {
            $ = new ScanConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder authentication(@Nullable Output<AuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder authentication(AuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        public Builder blacklistPatterns(@Nullable Output<List<String>> blacklistPatterns) {
            $.blacklistPatterns = blacklistPatterns;
            return this;
        }

        public Builder blacklistPatterns(List<String> blacklistPatterns) {
            return blacklistPatterns(Output.of(blacklistPatterns));
        }

        public Builder blacklistPatterns(String... blacklistPatterns) {
            return blacklistPatterns(List.of(blacklistPatterns));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder exportToSecurityCommandCenter(@Nullable Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter) {
            $.exportToSecurityCommandCenter = exportToSecurityCommandCenter;
            return this;
        }

        public Builder exportToSecurityCommandCenter(ScanConfigExportToSecurityCommandCenter exportToSecurityCommandCenter) {
            return exportToSecurityCommandCenter(Output.of(exportToSecurityCommandCenter));
        }

        public Builder ignoreHttpStatusErrors(@Nullable Output<Boolean> ignoreHttpStatusErrors) {
            $.ignoreHttpStatusErrors = ignoreHttpStatusErrors;
            return this;
        }

        public Builder ignoreHttpStatusErrors(Boolean ignoreHttpStatusErrors) {
            return ignoreHttpStatusErrors(Output.of(ignoreHttpStatusErrors));
        }

        public Builder latestRun(@Nullable Output<ScanRunArgs> latestRun) {
            $.latestRun = latestRun;
            return this;
        }

        public Builder latestRun(ScanRunArgs latestRun) {
            return latestRun(Output.of(latestRun));
        }

        public Builder managedScan(@Nullable Output<Boolean> managedScan) {
            $.managedScan = managedScan;
            return this;
        }

        public Builder managedScan(Boolean managedScan) {
            return managedScan(Output.of(managedScan));
        }

        public Builder maxQps(@Nullable Output<Integer> maxQps) {
            $.maxQps = maxQps;
            return this;
        }

        public Builder maxQps(Integer maxQps) {
            return maxQps(Output.of(maxQps));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder riskLevel(@Nullable Output<ScanConfigRiskLevel> riskLevel) {
            $.riskLevel = riskLevel;
            return this;
        }

        public Builder riskLevel(ScanConfigRiskLevel riskLevel) {
            return riskLevel(Output.of(riskLevel));
        }

        public Builder schedule(@Nullable Output<ScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(ScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder startingUrls(Output<List<String>> startingUrls) {
            $.startingUrls = startingUrls;
            return this;
        }

        public Builder startingUrls(List<String> startingUrls) {
            return startingUrls(Output.of(startingUrls));
        }

        public Builder startingUrls(String... startingUrls) {
            return startingUrls(List.of(startingUrls));
        }

        public Builder staticIpScan(@Nullable Output<Boolean> staticIpScan) {
            $.staticIpScan = staticIpScan;
            return this;
        }

        public Builder staticIpScan(Boolean staticIpScan) {
            return staticIpScan(Output.of(staticIpScan));
        }

        public Builder targetPlatforms(@Nullable Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms) {
            $.targetPlatforms = targetPlatforms;
            return this;
        }

        public Builder targetPlatforms(List<ScanConfigTargetPlatformsItem> targetPlatforms) {
            return targetPlatforms(Output.of(targetPlatforms));
        }

        public Builder targetPlatforms(ScanConfigTargetPlatformsItem... targetPlatforms) {
            return targetPlatforms(List.of(targetPlatforms));
        }

        public Builder userAgent(@Nullable Output<ScanConfigUserAgent> userAgent) {
            $.userAgent = userAgent;
            return this;
        }

        public Builder userAgent(ScanConfigUserAgent userAgent) {
            return userAgent(Output.of(userAgent));
        }

        public ScanConfigArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.startingUrls = Objects.requireNonNull($.startingUrls, "expected parameter 'startingUrls' to be non-null");
            return $;
        }
    }

}
