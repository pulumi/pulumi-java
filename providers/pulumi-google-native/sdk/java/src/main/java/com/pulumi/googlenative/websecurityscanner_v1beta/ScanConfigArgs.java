// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigExportToSecurityCommandCenter;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigRiskLevel;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigTargetPlatformsItem;
import com.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanConfigUserAgent;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.AuthenticationArgs;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunArgs;
import com.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScheduleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScanConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScanConfigArgs Empty = new ScanConfigArgs();

    /**
     * The authentication configuration. If specified, service will use the authentication configuration during scanning.
     * 
     */
    @Import(name="authentication")
      private final @Nullable Output<AuthenticationArgs> authentication;

    public Output<AuthenticationArgs> authentication() {
        return this.authentication == null ? Codegen.empty() : this.authentication;
    }

    /**
     * The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
     * 
     */
    @Import(name="blacklistPatterns")
      private final @Nullable Output<List<String>> blacklistPatterns;

    public Output<List<String>> blacklistPatterns() {
        return this.blacklistPatterns == null ? Codegen.empty() : this.blacklistPatterns;
    }

    /**
     * The user provided display name of the ScanConfig.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Controls export of scan configurations and results to Security Command Center.
     * 
     */
    @Import(name="exportToSecurityCommandCenter")
      private final @Nullable Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter;

    public Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter() {
        return this.exportToSecurityCommandCenter == null ? Codegen.empty() : this.exportToSecurityCommandCenter;
    }

    /**
     * Whether to keep scanning even if most requests return HTTP error codes.
     * 
     */
    @Import(name="ignoreHttpStatusErrors")
      private final @Nullable Output<Boolean> ignoreHttpStatusErrors;

    public Output<Boolean> ignoreHttpStatusErrors() {
        return this.ignoreHttpStatusErrors == null ? Codegen.empty() : this.ignoreHttpStatusErrors;
    }

    /**
     * Latest ScanRun if available.
     * 
     */
    @Import(name="latestRun")
      private final @Nullable Output<ScanRunArgs> latestRun;

    public Output<ScanRunArgs> latestRun() {
        return this.latestRun == null ? Codegen.empty() : this.latestRun;
    }

    /**
     * Whether the scan config is managed by Web Security Scanner, output only.
     * 
     */
    @Import(name="managedScan")
      private final @Nullable Output<Boolean> managedScan;

    public Output<Boolean> managedScan() {
        return this.managedScan == null ? Codegen.empty() : this.managedScan;
    }

    /**
     * The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
     * 
     */
    @Import(name="maxQps")
      private final @Nullable Output<Integer> maxQps;

    public Output<Integer> maxQps() {
        return this.maxQps == null ? Codegen.empty() : this.maxQps;
    }

    /**
     * The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The risk level selected for the scan
     * 
     */
    @Import(name="riskLevel")
      private final @Nullable Output<ScanConfigRiskLevel> riskLevel;

    public Output<ScanConfigRiskLevel> riskLevel() {
        return this.riskLevel == null ? Codegen.empty() : this.riskLevel;
    }

    /**
     * The schedule of the ScanConfig.
     * 
     */
    @Import(name="schedule")
      private final @Nullable Output<ScheduleArgs> schedule;

    public Output<ScheduleArgs> schedule() {
        return this.schedule == null ? Codegen.empty() : this.schedule;
    }

    /**
     * The starting URLs from which the scanner finds site pages.
     * 
     */
    @Import(name="startingUrls", required=true)
      private final Output<List<String>> startingUrls;

    public Output<List<String>> startingUrls() {
        return this.startingUrls;
    }

    /**
     * Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
     * 
     */
    @Import(name="staticIpScan")
      private final @Nullable Output<Boolean> staticIpScan;

    public Output<Boolean> staticIpScan() {
        return this.staticIpScan == null ? Codegen.empty() : this.staticIpScan;
    }

    /**
     * Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.
     * 
     */
    @Import(name="targetPlatforms")
      private final @Nullable Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms;

    public Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms() {
        return this.targetPlatforms == null ? Codegen.empty() : this.targetPlatforms;
    }

    /**
     * The user agent used during scanning.
     * 
     */
    @Import(name="userAgent")
      private final @Nullable Output<ScanConfigUserAgent> userAgent;

    public Output<ScanConfigUserAgent> userAgent() {
        return this.userAgent == null ? Codegen.empty() : this.userAgent;
    }

    public ScanConfigArgs(
        @Nullable Output<AuthenticationArgs> authentication,
        @Nullable Output<List<String>> blacklistPatterns,
        Output<String> displayName,
        @Nullable Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter,
        @Nullable Output<Boolean> ignoreHttpStatusErrors,
        @Nullable Output<ScanRunArgs> latestRun,
        @Nullable Output<Boolean> managedScan,
        @Nullable Output<Integer> maxQps,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<ScanConfigRiskLevel> riskLevel,
        @Nullable Output<ScheduleArgs> schedule,
        Output<List<String>> startingUrls,
        @Nullable Output<Boolean> staticIpScan,
        @Nullable Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms,
        @Nullable Output<ScanConfigUserAgent> userAgent) {
        this.authentication = authentication;
        this.blacklistPatterns = blacklistPatterns;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.exportToSecurityCommandCenter = exportToSecurityCommandCenter;
        this.ignoreHttpStatusErrors = ignoreHttpStatusErrors;
        this.latestRun = latestRun;
        this.managedScan = managedScan;
        this.maxQps = maxQps;
        this.name = name;
        this.project = project;
        this.riskLevel = riskLevel;
        this.schedule = schedule;
        this.startingUrls = Objects.requireNonNull(startingUrls, "expected parameter 'startingUrls' to be non-null");
        this.staticIpScan = staticIpScan;
        this.targetPlatforms = targetPlatforms;
        this.userAgent = userAgent;
    }

    private ScanConfigArgs() {
        this.authentication = Codegen.empty();
        this.blacklistPatterns = Codegen.empty();
        this.displayName = Codegen.empty();
        this.exportToSecurityCommandCenter = Codegen.empty();
        this.ignoreHttpStatusErrors = Codegen.empty();
        this.latestRun = Codegen.empty();
        this.managedScan = Codegen.empty();
        this.maxQps = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.riskLevel = Codegen.empty();
        this.schedule = Codegen.empty();
        this.startingUrls = Codegen.empty();
        this.staticIpScan = Codegen.empty();
        this.targetPlatforms = Codegen.empty();
        this.userAgent = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScanConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AuthenticationArgs> authentication;
        private @Nullable Output<List<String>> blacklistPatterns;
        private Output<String> displayName;
        private @Nullable Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter;
        private @Nullable Output<Boolean> ignoreHttpStatusErrors;
        private @Nullable Output<ScanRunArgs> latestRun;
        private @Nullable Output<Boolean> managedScan;
        private @Nullable Output<Integer> maxQps;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<ScanConfigRiskLevel> riskLevel;
        private @Nullable Output<ScheduleArgs> schedule;
        private Output<List<String>> startingUrls;
        private @Nullable Output<Boolean> staticIpScan;
        private @Nullable Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms;
        private @Nullable Output<ScanConfigUserAgent> userAgent;

        public Builder() {
    	      // Empty
        }

        public Builder(ScanConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.blacklistPatterns = defaults.blacklistPatterns;
    	      this.displayName = defaults.displayName;
    	      this.exportToSecurityCommandCenter = defaults.exportToSecurityCommandCenter;
    	      this.ignoreHttpStatusErrors = defaults.ignoreHttpStatusErrors;
    	      this.latestRun = defaults.latestRun;
    	      this.managedScan = defaults.managedScan;
    	      this.maxQps = defaults.maxQps;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.riskLevel = defaults.riskLevel;
    	      this.schedule = defaults.schedule;
    	      this.startingUrls = defaults.startingUrls;
    	      this.staticIpScan = defaults.staticIpScan;
    	      this.targetPlatforms = defaults.targetPlatforms;
    	      this.userAgent = defaults.userAgent;
        }

        public Builder authentication(@Nullable Output<AuthenticationArgs> authentication) {
            this.authentication = authentication;
            return this;
        }
        public Builder authentication(@Nullable AuthenticationArgs authentication) {
            this.authentication = Codegen.ofNullable(authentication);
            return this;
        }
        public Builder blacklistPatterns(@Nullable Output<List<String>> blacklistPatterns) {
            this.blacklistPatterns = blacklistPatterns;
            return this;
        }
        public Builder blacklistPatterns(@Nullable List<String> blacklistPatterns) {
            this.blacklistPatterns = Codegen.ofNullable(blacklistPatterns);
            return this;
        }
        public Builder blacklistPatterns(String... blacklistPatterns) {
            return blacklistPatterns(List.of(blacklistPatterns));
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder exportToSecurityCommandCenter(@Nullable Output<ScanConfigExportToSecurityCommandCenter> exportToSecurityCommandCenter) {
            this.exportToSecurityCommandCenter = exportToSecurityCommandCenter;
            return this;
        }
        public Builder exportToSecurityCommandCenter(@Nullable ScanConfigExportToSecurityCommandCenter exportToSecurityCommandCenter) {
            this.exportToSecurityCommandCenter = Codegen.ofNullable(exportToSecurityCommandCenter);
            return this;
        }
        public Builder ignoreHttpStatusErrors(@Nullable Output<Boolean> ignoreHttpStatusErrors) {
            this.ignoreHttpStatusErrors = ignoreHttpStatusErrors;
            return this;
        }
        public Builder ignoreHttpStatusErrors(@Nullable Boolean ignoreHttpStatusErrors) {
            this.ignoreHttpStatusErrors = Codegen.ofNullable(ignoreHttpStatusErrors);
            return this;
        }
        public Builder latestRun(@Nullable Output<ScanRunArgs> latestRun) {
            this.latestRun = latestRun;
            return this;
        }
        public Builder latestRun(@Nullable ScanRunArgs latestRun) {
            this.latestRun = Codegen.ofNullable(latestRun);
            return this;
        }
        public Builder managedScan(@Nullable Output<Boolean> managedScan) {
            this.managedScan = managedScan;
            return this;
        }
        public Builder managedScan(@Nullable Boolean managedScan) {
            this.managedScan = Codegen.ofNullable(managedScan);
            return this;
        }
        public Builder maxQps(@Nullable Output<Integer> maxQps) {
            this.maxQps = maxQps;
            return this;
        }
        public Builder maxQps(@Nullable Integer maxQps) {
            this.maxQps = Codegen.ofNullable(maxQps);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder riskLevel(@Nullable Output<ScanConfigRiskLevel> riskLevel) {
            this.riskLevel = riskLevel;
            return this;
        }
        public Builder riskLevel(@Nullable ScanConfigRiskLevel riskLevel) {
            this.riskLevel = Codegen.ofNullable(riskLevel);
            return this;
        }
        public Builder schedule(@Nullable Output<ScheduleArgs> schedule) {
            this.schedule = schedule;
            return this;
        }
        public Builder schedule(@Nullable ScheduleArgs schedule) {
            this.schedule = Codegen.ofNullable(schedule);
            return this;
        }
        public Builder startingUrls(Output<List<String>> startingUrls) {
            this.startingUrls = Objects.requireNonNull(startingUrls);
            return this;
        }
        public Builder startingUrls(List<String> startingUrls) {
            this.startingUrls = Output.of(Objects.requireNonNull(startingUrls));
            return this;
        }
        public Builder startingUrls(String... startingUrls) {
            return startingUrls(List.of(startingUrls));
        }
        public Builder staticIpScan(@Nullable Output<Boolean> staticIpScan) {
            this.staticIpScan = staticIpScan;
            return this;
        }
        public Builder staticIpScan(@Nullable Boolean staticIpScan) {
            this.staticIpScan = Codegen.ofNullable(staticIpScan);
            return this;
        }
        public Builder targetPlatforms(@Nullable Output<List<ScanConfigTargetPlatformsItem>> targetPlatforms) {
            this.targetPlatforms = targetPlatforms;
            return this;
        }
        public Builder targetPlatforms(@Nullable List<ScanConfigTargetPlatformsItem> targetPlatforms) {
            this.targetPlatforms = Codegen.ofNullable(targetPlatforms);
            return this;
        }
        public Builder targetPlatforms(ScanConfigTargetPlatformsItem... targetPlatforms) {
            return targetPlatforms(List.of(targetPlatforms));
        }
        public Builder userAgent(@Nullable Output<ScanConfigUserAgent> userAgent) {
            this.userAgent = userAgent;
            return this;
        }
        public Builder userAgent(@Nullable ScanConfigUserAgent userAgent) {
            this.userAgent = Codegen.ofNullable(userAgent);
            return this;
        }        public ScanConfigArgs build() {
            return new ScanConfigArgs(authentication, blacklistPatterns, displayName, exportToSecurityCommandCenter, ignoreHttpStatusErrors, latestRun, managedScan, maxQps, name, project, riskLevel, schedule, startingUrls, staticIpScan, targetPlatforms, userAgent);
        }
    }
}
