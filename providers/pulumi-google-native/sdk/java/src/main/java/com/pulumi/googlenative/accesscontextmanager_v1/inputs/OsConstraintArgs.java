// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.accesscontextmanager_v1.enums.OsConstraintOsType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A restriction on the OS type and version of devices making requests.
 * 
 */
public final class OsConstraintArgs extends com.pulumi.resources.ResourceArgs {

    public static final OsConstraintArgs Empty = new OsConstraintArgs();

    /**
     * The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `&#34;major.minor.patch&#34;`. Examples: `&#34;10.5.301&#34;`, `&#34;9.2.1&#34;`.
     * 
     */
    @Import(name="minimumVersion")
      private final @Nullable Output<String> minimumVersion;

    public Output<String> minimumVersion() {
        return this.minimumVersion == null ? Codegen.empty() : this.minimumVersion;
    }

    /**
     * The allowed OS type.
     * 
     */
    @Import(name="osType", required=true)
      private final Output<OsConstraintOsType> osType;

    public Output<OsConstraintOsType> osType() {
        return this.osType;
    }

    /**
     * Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.
     * 
     */
    @Import(name="requireVerifiedChromeOs")
      private final @Nullable Output<Boolean> requireVerifiedChromeOs;

    public Output<Boolean> requireVerifiedChromeOs() {
        return this.requireVerifiedChromeOs == null ? Codegen.empty() : this.requireVerifiedChromeOs;
    }

    public OsConstraintArgs(
        @Nullable Output<String> minimumVersion,
        Output<OsConstraintOsType> osType,
        @Nullable Output<Boolean> requireVerifiedChromeOs) {
        this.minimumVersion = minimumVersion;
        this.osType = Objects.requireNonNull(osType, "expected parameter 'osType' to be non-null");
        this.requireVerifiedChromeOs = requireVerifiedChromeOs;
    }

    private OsConstraintArgs() {
        this.minimumVersion = Codegen.empty();
        this.osType = Codegen.empty();
        this.requireVerifiedChromeOs = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OsConstraintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> minimumVersion;
        private Output<OsConstraintOsType> osType;
        private @Nullable Output<Boolean> requireVerifiedChromeOs;

        public Builder() {
    	      // Empty
        }

        public Builder(OsConstraintArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.minimumVersion = defaults.minimumVersion;
    	      this.osType = defaults.osType;
    	      this.requireVerifiedChromeOs = defaults.requireVerifiedChromeOs;
        }

        public Builder minimumVersion(@Nullable Output<String> minimumVersion) {
            this.minimumVersion = minimumVersion;
            return this;
        }
        public Builder minimumVersion(@Nullable String minimumVersion) {
            this.minimumVersion = Codegen.ofNullable(minimumVersion);
            return this;
        }
        public Builder osType(Output<OsConstraintOsType> osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder osType(OsConstraintOsType osType) {
            this.osType = Output.of(Objects.requireNonNull(osType));
            return this;
        }
        public Builder requireVerifiedChromeOs(@Nullable Output<Boolean> requireVerifiedChromeOs) {
            this.requireVerifiedChromeOs = requireVerifiedChromeOs;
            return this;
        }
        public Builder requireVerifiedChromeOs(@Nullable Boolean requireVerifiedChromeOs) {
            this.requireVerifiedChromeOs = Codegen.ofNullable(requireVerifiedChromeOs);
            return this;
        }        public OsConstraintArgs build() {
            return new OsConstraintArgs(minimumVersion, osType, requireVerifiedChromeOs);
        }
    }
}
