// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3QueryInputResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * The input from the human user.
 * 
 */
public final class GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse Empty = new GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse();

    /**
     * Whether sentiment analysis is enabled.
     * 
     */
    @Import(name="enableSentimentAnalysis", required=true)
    private Boolean enableSentimentAnalysis;

    /**
     * @return Whether sentiment analysis is enabled.
     * 
     */
    public Boolean enableSentimentAnalysis() {
        return this.enableSentimentAnalysis;
    }

    /**
     * Parameters that need to be injected into the conversation during intent detection.
     * 
     */
    @Import(name="injectedParameters", required=true)
    private Map<String,String> injectedParameters;

    /**
     * @return Parameters that need to be injected into the conversation during intent detection.
     * 
     */
    public Map<String,String> injectedParameters() {
        return this.injectedParameters;
    }

    /**
     * Supports text input, event input, dtmf input in the test case.
     * 
     */
    @Import(name="input", required=true)
    private GoogleCloudDialogflowCxV3QueryInputResponse input;

    /**
     * @return Supports text input, event input, dtmf input in the test case.
     * 
     */
    public GoogleCloudDialogflowCxV3QueryInputResponse input() {
        return this.input;
    }

    /**
     * If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
     * 
     */
    @Import(name="isWebhookEnabled", required=true)
    private Boolean isWebhookEnabled;

    /**
     * @return If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
     * 
     */
    public Boolean isWebhookEnabled() {
        return this.isWebhookEnabled;
    }

    private GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse() {}

    private GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse(GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse $) {
        this.enableSentimentAnalysis = $.enableSentimentAnalysis;
        this.injectedParameters = $.injectedParameters;
        this.input = $.input;
        this.isWebhookEnabled = $.isWebhookEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableSentimentAnalysis Whether sentiment analysis is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableSentimentAnalysis(Boolean enableSentimentAnalysis) {
            $.enableSentimentAnalysis = enableSentimentAnalysis;
            return this;
        }

        /**
         * @param injectedParameters Parameters that need to be injected into the conversation during intent detection.
         * 
         * @return builder
         * 
         */
        public Builder injectedParameters(Map<String,String> injectedParameters) {
            $.injectedParameters = injectedParameters;
            return this;
        }

        /**
         * @param input Supports text input, event input, dtmf input in the test case.
         * 
         * @return builder
         * 
         */
        public Builder input(GoogleCloudDialogflowCxV3QueryInputResponse input) {
            $.input = input;
            return this;
        }

        /**
         * @param isWebhookEnabled If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
         * 
         * @return builder
         * 
         */
        public Builder isWebhookEnabled(Boolean isWebhookEnabled) {
            $.isWebhookEnabled = isWebhookEnabled;
            return this;
        }

        public GoogleCloudDialogflowCxV3ConversationTurnUserInputResponse build() {
            $.enableSentimentAnalysis = Objects.requireNonNull($.enableSentimentAnalysis, "expected parameter 'enableSentimentAnalysis' to be non-null");
            $.injectedParameters = Objects.requireNonNull($.injectedParameters, "expected parameter 'injectedParameters' to be non-null");
            $.input = Objects.requireNonNull($.input, "expected parameter 'input' to be non-null");
            $.isWebhookEnabled = Objects.requireNonNull($.isWebhookEnabled, "expected parameter 'isWebhookEnabled' to be non-null");
            return $;
        }
    }

}
