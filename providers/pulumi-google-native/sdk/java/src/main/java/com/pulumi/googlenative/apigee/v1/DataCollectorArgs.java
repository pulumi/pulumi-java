// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.apigee.v1.enums.DataCollectorType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCollectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectorArgs Empty = new DataCollectorArgs();

    /**
     * ID of the data collector. Overrides any ID in the data collector resource. Must be a string beginning with `dc_` that contains only letters, numbers, and underscores.
     * 
     */
    @Import(name="dataCollectorId")
    private @Nullable Output<String> dataCollectorId;

    /**
     * @return ID of the data collector. Overrides any ID in the data collector resource. Must be a string beginning with `dc_` that contains only letters, numbers, and underscores.
     * 
     */
    public Optional<Output<String>> dataCollectorId() {
        return Optional.ofNullable(this.dataCollectorId);
    }

    /**
     * A description of the data collector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the data collector.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the data collector. Must begin with `dc_`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return ID of the data collector. Must begin with `dc_`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Immutable. The type of data this data collector will collect.
     * 
     */
    @Import(name="type")
    private @Nullable Output<DataCollectorType> type;

    /**
     * @return Immutable. The type of data this data collector will collect.
     * 
     */
    public Optional<Output<DataCollectorType>> type() {
        return Optional.ofNullable(this.type);
    }

    private DataCollectorArgs() {}

    private DataCollectorArgs(DataCollectorArgs $) {
        this.dataCollectorId = $.dataCollectorId;
        this.description = $.description;
        this.name = $.name;
        this.organizationId = $.organizationId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectorArgs $;

        public Builder() {
            $ = new DataCollectorArgs();
        }

        public Builder(DataCollectorArgs defaults) {
            $ = new DataCollectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataCollectorId ID of the data collector. Overrides any ID in the data collector resource. Must be a string beginning with `dc_` that contains only letters, numbers, and underscores.
         * 
         * @return builder
         * 
         */
        public Builder dataCollectorId(@Nullable Output<String> dataCollectorId) {
            $.dataCollectorId = dataCollectorId;
            return this;
        }

        /**
         * @param dataCollectorId ID of the data collector. Overrides any ID in the data collector resource. Must be a string beginning with `dc_` that contains only letters, numbers, and underscores.
         * 
         * @return builder
         * 
         */
        public Builder dataCollectorId(String dataCollectorId) {
            return dataCollectorId(Output.of(dataCollectorId));
        }

        /**
         * @param description A description of the data collector.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the data collector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name ID of the data collector. Must begin with `dc_`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name ID of the data collector. Must begin with `dc_`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param type Immutable. The type of data this data collector will collect.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<DataCollectorType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Immutable. The type of data this data collector will collect.
         * 
         * @return builder
         * 
         */
        public Builder type(DataCollectorType type) {
            return type(Output.of(type));
        }

        public DataCollectorArgs build() {
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            return $;
        }
    }

}
