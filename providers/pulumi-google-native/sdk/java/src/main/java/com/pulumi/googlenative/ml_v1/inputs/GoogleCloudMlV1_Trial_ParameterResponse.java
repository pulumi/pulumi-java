// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * A message representing a parameter to be tuned. Contains the name of the parameter and the suggested value to use for this trial.
 * 
 */
public final class GoogleCloudMlV1_Trial_ParameterResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudMlV1_Trial_ParameterResponse Empty = new GoogleCloudMlV1_Trial_ParameterResponse();

    /**
     * Must be set if ParameterType is DOUBLE or DISCRETE.
     * 
     */
    @Import(name="floatValue", required=true)
    private Double floatValue;

    /**
     * @return Must be set if ParameterType is DOUBLE or DISCRETE.
     * 
     */
    public Double floatValue() {
        return this.floatValue;
    }

    /**
     * Must be set if ParameterType is INTEGER
     * 
     */
    @Import(name="intValue", required=true)
    private String intValue;

    /**
     * @return Must be set if ParameterType is INTEGER
     * 
     */
    public String intValue() {
        return this.intValue;
    }

    /**
     * The name of the parameter.
     * 
     */
    @Import(name="parameter", required=true)
    private String parameter;

    /**
     * @return The name of the parameter.
     * 
     */
    public String parameter() {
        return this.parameter;
    }

    /**
     * Must be set if ParameterTypeis CATEGORICAL
     * 
     */
    @Import(name="stringValue", required=true)
    private String stringValue;

    /**
     * @return Must be set if ParameterTypeis CATEGORICAL
     * 
     */
    public String stringValue() {
        return this.stringValue;
    }

    private GoogleCloudMlV1_Trial_ParameterResponse() {}

    private GoogleCloudMlV1_Trial_ParameterResponse(GoogleCloudMlV1_Trial_ParameterResponse $) {
        this.floatValue = $.floatValue;
        this.intValue = $.intValue;
        this.parameter = $.parameter;
        this.stringValue = $.stringValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1_Trial_ParameterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1_Trial_ParameterResponse $;

        public Builder() {
            $ = new GoogleCloudMlV1_Trial_ParameterResponse();
        }

        public Builder(GoogleCloudMlV1_Trial_ParameterResponse defaults) {
            $ = new GoogleCloudMlV1_Trial_ParameterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param floatValue Must be set if ParameterType is DOUBLE or DISCRETE.
         * 
         * @return builder
         * 
         */
        public Builder floatValue(Double floatValue) {
            $.floatValue = floatValue;
            return this;
        }

        /**
         * @param intValue Must be set if ParameterType is INTEGER
         * 
         * @return builder
         * 
         */
        public Builder intValue(String intValue) {
            $.intValue = intValue;
            return this;
        }

        /**
         * @param parameter The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameter(String parameter) {
            $.parameter = parameter;
            return this;
        }

        /**
         * @param stringValue Must be set if ParameterTypeis CATEGORICAL
         * 
         * @return builder
         * 
         */
        public Builder stringValue(String stringValue) {
            $.stringValue = stringValue;
            return this;
        }

        public GoogleCloudMlV1_Trial_ParameterResponse build() {
            $.floatValue = Objects.requireNonNull($.floatValue, "expected parameter 'floatValue' to be non-null");
            $.intValue = Objects.requireNonNull($.intValue, "expected parameter 'intValue' to be non-null");
            $.parameter = Objects.requireNonNull($.parameter, "expected parameter 'parameter' to be non-null");
            $.stringValue = Objects.requireNonNull($.stringValue, "expected parameter 'stringValue' to be non-null");
            return $;
        }
    }

}
