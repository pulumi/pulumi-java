// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1.outputs.FingerprintResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.LayerResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ImageOccurrenceResponse {
    /**
     * @return This contains the base image URL for the derived image occurrence.
     * 
     */
    private final String baseResourceUrl;
    /**
     * @return The number of layers by which this image differs from the associated image basis.
     * 
     */
    private final Integer distance;
    /**
     * @return The fingerprint of the derived image.
     * 
     */
    private final FingerprintResponse fingerprint;
    /**
     * @return This contains layer-specific metadata, if populated it has length &#34;distance&#34; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     * 
     */
    private final List<LayerResponse> layerInfo;

    @CustomType.Constructor
    private ImageOccurrenceResponse(
        @CustomType.Parameter("baseResourceUrl") String baseResourceUrl,
        @CustomType.Parameter("distance") Integer distance,
        @CustomType.Parameter("fingerprint") FingerprintResponse fingerprint,
        @CustomType.Parameter("layerInfo") List<LayerResponse> layerInfo) {
        this.baseResourceUrl = baseResourceUrl;
        this.distance = distance;
        this.fingerprint = fingerprint;
        this.layerInfo = layerInfo;
    }

    /**
     * @return This contains the base image URL for the derived image occurrence.
     * 
     */
    public String baseResourceUrl() {
        return this.baseResourceUrl;
    }
    /**
     * @return The number of layers by which this image differs from the associated image basis.
     * 
     */
    public Integer distance() {
        return this.distance;
    }
    /**
     * @return The fingerprint of the derived image.
     * 
     */
    public FingerprintResponse fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return This contains layer-specific metadata, if populated it has length &#34;distance&#34; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     * 
     */
    public List<LayerResponse> layerInfo() {
        return this.layerInfo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String baseResourceUrl;
        private Integer distance;
        private FingerprintResponse fingerprint;
        private List<LayerResponse> layerInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageOccurrenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseResourceUrl = defaults.baseResourceUrl;
    	      this.distance = defaults.distance;
    	      this.fingerprint = defaults.fingerprint;
    	      this.layerInfo = defaults.layerInfo;
        }

        public Builder baseResourceUrl(String baseResourceUrl) {
            this.baseResourceUrl = Objects.requireNonNull(baseResourceUrl);
            return this;
        }
        public Builder distance(Integer distance) {
            this.distance = Objects.requireNonNull(distance);
            return this;
        }
        public Builder fingerprint(FingerprintResponse fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }
        public Builder layerInfo(List<LayerResponse> layerInfo) {
            this.layerInfo = Objects.requireNonNull(layerInfo);
            return this;
        }
        public Builder layerInfo(LayerResponse... layerInfo) {
            return layerInfo(List.of(layerInfo));
        }        public ImageOccurrenceResponse build() {
            return new ImageOccurrenceResponse(baseResourceUrl, distance, fingerprint, layerInfo);
        }
    }
}
