// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.StandardSqlStructTypeResponse;
import java.lang.String;
import java.util.Objects;


/**
 * The data type of a variable such as a function argument. Examples include: * INT64: `{&#34;typeKind&#34;: &#34;INT64&#34;}` * ARRAY: { &#34;typeKind&#34;: &#34;ARRAY&#34;, &#34;arrayElementType&#34;: {&#34;typeKind&#34;: &#34;STRING&#34;} } * STRUCT&gt;: { &#34;typeKind&#34;: &#34;STRUCT&#34;, &#34;structType&#34;: { &#34;fields&#34;: [ { &#34;name&#34;: &#34;x&#34;, &#34;type&#34;: {&#34;typeKind: &#34;STRING&#34;} }, { &#34;name&#34;: &#34;y&#34;, &#34;type&#34;: { &#34;typeKind&#34;: &#34;ARRAY&#34;, &#34;arrayElementType&#34;: {&#34;typekind&#34;: &#34;DATE&#34;} } } ] } }
 * 
 */
public final class StandardSqlDataTypeResponse extends com.pulumi.resources.InvokeArgs {

    public static final StandardSqlDataTypeResponse Empty = new StandardSqlDataTypeResponse();

    /**
     * The type of the array&#39;s elements, if type_kind = &#34;ARRAY&#34;.
     * 
     */
    @Import(name="arrayElementType", required=true)
    private StandardSqlDataTypeResponse arrayElementType;

    public StandardSqlDataTypeResponse arrayElementType() {
        return this.arrayElementType;
    }

    /**
     * The fields of this struct, in order, if type_kind = &#34;STRUCT&#34;.
     * 
     */
    @Import(name="structType", required=true)
    private StandardSqlStructTypeResponse structType;

    public StandardSqlStructTypeResponse structType() {
        return this.structType;
    }

    /**
     * The top level type of this field. Can be any standard SQL data type (e.g., &#34;INT64&#34;, &#34;DATE&#34;, &#34;ARRAY&#34;).
     * 
     */
    @Import(name="typeKind", required=true)
    private String typeKind;

    public String typeKind() {
        return this.typeKind;
    }

    private StandardSqlDataTypeResponse() {}

    private StandardSqlDataTypeResponse(StandardSqlDataTypeResponse $) {
        this.arrayElementType = $.arrayElementType;
        this.structType = $.structType;
        this.typeKind = $.typeKind;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardSqlDataTypeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardSqlDataTypeResponse $;

        public Builder() {
            $ = new StandardSqlDataTypeResponse();
        }

        public Builder(StandardSqlDataTypeResponse defaults) {
            $ = new StandardSqlDataTypeResponse(Objects.requireNonNull(defaults));
        }

        public Builder arrayElementType(StandardSqlDataTypeResponse arrayElementType) {
            $.arrayElementType = arrayElementType;
            return this;
        }

        public Builder structType(StandardSqlStructTypeResponse structType) {
            $.structType = structType;
            return this;
        }

        public Builder typeKind(String typeKind) {
            $.typeKind = typeKind;
            return this;
        }

        public StandardSqlDataTypeResponse build() {
            $.arrayElementType = Objects.requireNonNull($.arrayElementType, "expected parameter 'arrayElementType' to be non-null");
            $.structType = Objects.requireNonNull($.structType, "expected parameter 'structType' to be non-null");
            $.typeKind = Objects.requireNonNull($.typeKind, "expected parameter 'typeKind' to be non-null");
            return $;
        }
    }

}
