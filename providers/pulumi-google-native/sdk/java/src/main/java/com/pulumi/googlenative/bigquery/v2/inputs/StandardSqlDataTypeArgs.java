// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery.v2.enums.StandardSqlDataTypeTypeKind;
import com.pulumi.googlenative.bigquery.v2.inputs.StandardSqlStructTypeArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The data type of a variable such as a function argument. Examples include: * INT64: `{&#34;typeKind&#34;: &#34;INT64&#34;}` * ARRAY: { &#34;typeKind&#34;: &#34;ARRAY&#34;, &#34;arrayElementType&#34;: {&#34;typeKind&#34;: &#34;STRING&#34;} } * STRUCT&gt;: { &#34;typeKind&#34;: &#34;STRUCT&#34;, &#34;structType&#34;: { &#34;fields&#34;: [ { &#34;name&#34;: &#34;x&#34;, &#34;type&#34;: {&#34;typeKind: &#34;STRING&#34;} }, { &#34;name&#34;: &#34;y&#34;, &#34;type&#34;: { &#34;typeKind&#34;: &#34;ARRAY&#34;, &#34;arrayElementType&#34;: {&#34;typekind&#34;: &#34;DATE&#34;} } } ] } }
 * 
 */
public final class StandardSqlDataTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final StandardSqlDataTypeArgs Empty = new StandardSqlDataTypeArgs();

    /**
     * The type of the array&#39;s elements, if type_kind = &#34;ARRAY&#34;.
     * 
     */
    @Import(name="arrayElementType")
    private @Nullable Output<StandardSqlDataTypeArgs> arrayElementType;

    /**
     * @return The type of the array&#39;s elements, if type_kind = &#34;ARRAY&#34;.
     * 
     */
    public Optional<Output<StandardSqlDataTypeArgs>> arrayElementType() {
        return Optional.ofNullable(this.arrayElementType);
    }

    /**
     * The fields of this struct, in order, if type_kind = &#34;STRUCT&#34;.
     * 
     */
    @Import(name="structType")
    private @Nullable Output<StandardSqlStructTypeArgs> structType;

    /**
     * @return The fields of this struct, in order, if type_kind = &#34;STRUCT&#34;.
     * 
     */
    public Optional<Output<StandardSqlStructTypeArgs>> structType() {
        return Optional.ofNullable(this.structType);
    }

    /**
     * The top level type of this field. Can be any standard SQL data type (e.g., &#34;INT64&#34;, &#34;DATE&#34;, &#34;ARRAY&#34;).
     * 
     */
    @Import(name="typeKind", required=true)
    private Output<StandardSqlDataTypeTypeKind> typeKind;

    /**
     * @return The top level type of this field. Can be any standard SQL data type (e.g., &#34;INT64&#34;, &#34;DATE&#34;, &#34;ARRAY&#34;).
     * 
     */
    public Output<StandardSqlDataTypeTypeKind> typeKind() {
        return this.typeKind;
    }

    private StandardSqlDataTypeArgs() {}

    private StandardSqlDataTypeArgs(StandardSqlDataTypeArgs $) {
        this.arrayElementType = $.arrayElementType;
        this.structType = $.structType;
        this.typeKind = $.typeKind;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardSqlDataTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardSqlDataTypeArgs $;

        public Builder() {
            $ = new StandardSqlDataTypeArgs();
        }

        public Builder(StandardSqlDataTypeArgs defaults) {
            $ = new StandardSqlDataTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayElementType The type of the array&#39;s elements, if type_kind = &#34;ARRAY&#34;.
         * 
         * @return builder
         * 
         */
        public Builder arrayElementType(@Nullable Output<StandardSqlDataTypeArgs> arrayElementType) {
            $.arrayElementType = arrayElementType;
            return this;
        }

        /**
         * @param arrayElementType The type of the array&#39;s elements, if type_kind = &#34;ARRAY&#34;.
         * 
         * @return builder
         * 
         */
        public Builder arrayElementType(StandardSqlDataTypeArgs arrayElementType) {
            return arrayElementType(Output.of(arrayElementType));
        }

        /**
         * @param structType The fields of this struct, in order, if type_kind = &#34;STRUCT&#34;.
         * 
         * @return builder
         * 
         */
        public Builder structType(@Nullable Output<StandardSqlStructTypeArgs> structType) {
            $.structType = structType;
            return this;
        }

        /**
         * @param structType The fields of this struct, in order, if type_kind = &#34;STRUCT&#34;.
         * 
         * @return builder
         * 
         */
        public Builder structType(StandardSqlStructTypeArgs structType) {
            return structType(Output.of(structType));
        }

        /**
         * @param typeKind The top level type of this field. Can be any standard SQL data type (e.g., &#34;INT64&#34;, &#34;DATE&#34;, &#34;ARRAY&#34;).
         * 
         * @return builder
         * 
         */
        public Builder typeKind(Output<StandardSqlDataTypeTypeKind> typeKind) {
            $.typeKind = typeKind;
            return this;
        }

        /**
         * @param typeKind The top level type of this field. Can be any standard SQL data type (e.g., &#34;INT64&#34;, &#34;DATE&#34;, &#34;ARRAY&#34;).
         * 
         * @return builder
         * 
         */
        public Builder typeKind(StandardSqlDataTypeTypeKind typeKind) {
            return typeKind(Output.of(typeKind));
        }

        public StandardSqlDataTypeArgs build() {
            $.typeKind = Objects.requireNonNull($.typeKind, "expected parameter 'typeKind' to be non-null");
            return $;
        }
    }

}
