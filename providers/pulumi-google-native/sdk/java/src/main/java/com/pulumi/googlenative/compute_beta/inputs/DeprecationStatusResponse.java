// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.inputs.RolloutPolicyResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Deprecation status for a public resource.
 * 
 */
public final class DeprecationStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final DeprecationStatusResponse Empty = new DeprecationStatusResponse();

    /**
     * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    @Import(name="deleted", required=true)
    private String deleted;

    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String deleted() {
        return this.deleted;
    }

    /**
     * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    @Import(name="deprecated", required=true)
    private String deprecated;

    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String deprecated() {
        return this.deprecated;
    }

    /**
     * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    @Import(name="obsolete", required=true)
    private String obsolete;

    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String obsolete() {
        return this.obsolete;
    }

    /**
     * The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
     * 
     */
    @Import(name="replacement", required=true)
    private String replacement;

    /**
     * @return The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
     * 
     */
    public String replacement() {
        return this.replacement;
    }

    /**
     * The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * The rollout policy for this deprecation. This policy is only enforced by image family views. The rollout policy restricts the zones where the associated resource is considered in a deprecated state. When the rollout policy does not include the user specified zone, or if the zone is rolled out, the associated resource is considered in a deprecated state. The rollout policy for this deprecation is read-only, except for allowlisted users. This field might not be configured. To view the latest non-deprecated image in a specific zone, use the imageFamilyViews.get method.
     * 
     */
    @Import(name="stateOverride", required=true)
    private RolloutPolicyResponse stateOverride;

    /**
     * @return The rollout policy for this deprecation. This policy is only enforced by image family views. The rollout policy restricts the zones where the associated resource is considered in a deprecated state. When the rollout policy does not include the user specified zone, or if the zone is rolled out, the associated resource is considered in a deprecated state. The rollout policy for this deprecation is read-only, except for allowlisted users. This field might not be configured. To view the latest non-deprecated image in a specific zone, use the imageFamilyViews.get method.
     * 
     */
    public RolloutPolicyResponse stateOverride() {
        return this.stateOverride;
    }

    private DeprecationStatusResponse() {}

    private DeprecationStatusResponse(DeprecationStatusResponse $) {
        this.deleted = $.deleted;
        this.deprecated = $.deprecated;
        this.obsolete = $.obsolete;
        this.replacement = $.replacement;
        this.state = $.state;
        this.stateOverride = $.stateOverride;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeprecationStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeprecationStatusResponse $;

        public Builder() {
            $ = new DeprecationStatusResponse();
        }

        public Builder(DeprecationStatusResponse defaults) {
            $ = new DeprecationStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleted An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
         * 
         * @return builder
         * 
         */
        public Builder deleted(String deleted) {
            $.deleted = deleted;
            return this;
        }

        /**
         * @param deprecated An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
         * 
         * @return builder
         * 
         */
        public Builder deprecated(String deprecated) {
            $.deprecated = deprecated;
            return this;
        }

        /**
         * @param obsolete An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
         * 
         * @return builder
         * 
         */
        public Builder obsolete(String obsolete) {
            $.obsolete = obsolete;
            return this;
        }

        /**
         * @param replacement The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
         * 
         * @return builder
         * 
         */
        public Builder replacement(String replacement) {
            $.replacement = replacement;
            return this;
        }

        /**
         * @param state The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param stateOverride The rollout policy for this deprecation. This policy is only enforced by image family views. The rollout policy restricts the zones where the associated resource is considered in a deprecated state. When the rollout policy does not include the user specified zone, or if the zone is rolled out, the associated resource is considered in a deprecated state. The rollout policy for this deprecation is read-only, except for allowlisted users. This field might not be configured. To view the latest non-deprecated image in a specific zone, use the imageFamilyViews.get method.
         * 
         * @return builder
         * 
         */
        public Builder stateOverride(RolloutPolicyResponse stateOverride) {
            $.stateOverride = stateOverride;
            return this;
        }

        public DeprecationStatusResponse build() {
            $.deleted = Objects.requireNonNull($.deleted, "expected parameter 'deleted' to be non-null");
            $.deprecated = Objects.requireNonNull($.deprecated, "expected parameter 'deprecated' to be non-null");
            $.obsolete = Objects.requireNonNull($.obsolete, "expected parameter 'obsolete' to be non-null");
            $.replacement = Objects.requireNonNull($.replacement, "expected parameter 'replacement' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateOverride = Objects.requireNonNull($.stateOverride, "expected parameter 'stateOverride' to be non-null");
            return $;
        }
    }

}
