// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults_v1beta3.enums.TestIssueCategory;
import com.pulumi.googlenative.toolresults_v1beta3.enums.TestIssueSeverity;
import com.pulumi.googlenative.toolresults_v1beta3.enums.TestIssueType;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.AnyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An issue detected occurring during a test execution.
 * 
 */
public final class TestIssueArgs extends com.pulumi.resources.ResourceArgs {

    public static final TestIssueArgs Empty = new TestIssueArgs();

    /**
     * Category of issue. Required.
     * 
     */
    @Import(name="category")
    private @Nullable Output<TestIssueCategory> category;

    public Optional<Output<TestIssueCategory>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * A brief human-readable message describing the issue. Required.
     * 
     */
    @Import(name="errorMessage")
    private @Nullable Output<String> errorMessage;

    public Optional<Output<String>> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }

    /**
     * Severity of issue. Required.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<TestIssueSeverity> severity;

    public Optional<Output<TestIssueSeverity>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * Type of issue. Required.
     * 
     */
    @Import(name="type")
    private @Nullable Output<TestIssueType> type;

    public Optional<Output<TestIssueType>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Warning message with additional details of the issue. Should always be a message from com.google.devtools.toolresults.v1.warnings
     * 
     */
    @Import(name="warning")
    private @Nullable Output<AnyArgs> warning;

    public Optional<Output<AnyArgs>> warning() {
        return Optional.ofNullable(this.warning);
    }

    private TestIssueArgs() {}

    private TestIssueArgs(TestIssueArgs $) {
        this.category = $.category;
        this.errorMessage = $.errorMessage;
        this.severity = $.severity;
        this.type = $.type;
        this.warning = $.warning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestIssueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestIssueArgs $;

        public Builder() {
            $ = new TestIssueArgs();
        }

        public Builder(TestIssueArgs defaults) {
            $ = new TestIssueArgs(Objects.requireNonNull(defaults));
        }

        public Builder category(@Nullable Output<TestIssueCategory> category) {
            $.category = category;
            return this;
        }

        public Builder category(TestIssueCategory category) {
            return category(Output.of(category));
        }

        public Builder errorMessage(@Nullable Output<String> errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            return errorMessage(Output.of(errorMessage));
        }

        public Builder severity(@Nullable Output<TestIssueSeverity> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(TestIssueSeverity severity) {
            return severity(Output.of(severity));
        }

        public Builder type(@Nullable Output<TestIssueType> type) {
            $.type = type;
            return this;
        }

        public Builder type(TestIssueType type) {
            return type(Output.of(type));
        }

        public Builder warning(@Nullable Output<AnyArgs> warning) {
            $.warning = warning;
            return this;
        }

        public Builder warning(AnyArgs warning) {
            return warning(Output.of(warning));
        }

        public TestIssueArgs build() {
            return $;
        }
    }

}
