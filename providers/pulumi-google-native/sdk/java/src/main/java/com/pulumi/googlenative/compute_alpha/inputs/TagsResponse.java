// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A set of instance tags.
 * 
 */
public final class TagsResponse extends com.pulumi.resources.InvokeArgs {

    public static final TagsResponse Empty = new TagsResponse();

    /**
     * Specifies a fingerprint for this request, which is essentially a hash of the tags&#39; contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
     * 
     */
    @Import(name="fingerprint", required=true)
    private String fingerprint;

    public String fingerprint() {
        return this.fingerprint;
    }

    /**
     * An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
     * 
     */
    @Import(name="items", required=true)
    private List<String> items;

    public List<String> items() {
        return this.items;
    }

    private TagsResponse() {}

    private TagsResponse(TagsResponse $) {
        this.fingerprint = $.fingerprint;
        this.items = $.items;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagsResponse $;

        public Builder() {
            $ = new TagsResponse();
        }

        public Builder(TagsResponse defaults) {
            $ = new TagsResponse(Objects.requireNonNull(defaults));
        }

        public Builder fingerprint(String fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        public Builder items(List<String> items) {
            $.items = items;
            return this;
        }

        public Builder items(String... items) {
            return items(List.of(items));
        }

        public TagsResponse build() {
            $.fingerprint = Objects.requireNonNull($.fingerprint, "expected parameter 'fingerprint' to be non-null");
            $.items = Objects.requireNonNull($.items, "expected parameter 'items' to be non-null");
            return $;
        }
    }

}
