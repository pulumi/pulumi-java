// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
 * 
 */
public final class SubjectResponse extends com.pulumi.resources.InvokeArgs {

    public static final SubjectResponse Empty = new SubjectResponse();

    /**
     * The &#34;common name&#34; of the subject.
     * 
     */
    @Import(name="commonName", required=true)
    private String commonName;

    /**
     * @return The &#34;common name&#34; of the subject.
     * 
     */
    public String commonName() {
        return this.commonName;
    }

    /**
     * The country code of the subject.
     * 
     */
    @Import(name="countryCode", required=true)
    private String countryCode;

    /**
     * @return The country code of the subject.
     * 
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * The locality or city of the subject.
     * 
     */
    @Import(name="locality", required=true)
    private String locality;

    /**
     * @return The locality or city of the subject.
     * 
     */
    public String locality() {
        return this.locality;
    }

    /**
     * The organization of the subject.
     * 
     */
    @Import(name="organization", required=true)
    private String organization;

    /**
     * @return The organization of the subject.
     * 
     */
    public String organization() {
        return this.organization;
    }

    /**
     * The organizational_unit of the subject.
     * 
     */
    @Import(name="organizationalUnit", required=true)
    private String organizationalUnit;

    /**
     * @return The organizational_unit of the subject.
     * 
     */
    public String organizationalUnit() {
        return this.organizationalUnit;
    }

    /**
     * The postal code of the subject.
     * 
     */
    @Import(name="postalCode", required=true)
    private String postalCode;

    /**
     * @return The postal code of the subject.
     * 
     */
    public String postalCode() {
        return this.postalCode;
    }

    /**
     * The province, territory, or regional state of the subject.
     * 
     */
    @Import(name="province", required=true)
    private String province;

    /**
     * @return The province, territory, or regional state of the subject.
     * 
     */
    public String province() {
        return this.province;
    }

    /**
     * The street address of the subject.
     * 
     */
    @Import(name="streetAddress", required=true)
    private String streetAddress;

    /**
     * @return The street address of the subject.
     * 
     */
    public String streetAddress() {
        return this.streetAddress;
    }

    private SubjectResponse() {}

    private SubjectResponse(SubjectResponse $) {
        this.commonName = $.commonName;
        this.countryCode = $.countryCode;
        this.locality = $.locality;
        this.organization = $.organization;
        this.organizationalUnit = $.organizationalUnit;
        this.postalCode = $.postalCode;
        this.province = $.province;
        this.streetAddress = $.streetAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubjectResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubjectResponse $;

        public Builder() {
            $ = new SubjectResponse();
        }

        public Builder(SubjectResponse defaults) {
            $ = new SubjectResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param commonName The &#34;common name&#34; of the subject.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param countryCode The country code of the subject.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param locality The locality or city of the subject.
         * 
         * @return builder
         * 
         */
        public Builder locality(String locality) {
            $.locality = locality;
            return this;
        }

        /**
         * @param organization The organization of the subject.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organizationalUnit The organizational_unit of the subject.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(String organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param postalCode The postal code of the subject.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param province The province, territory, or regional state of the subject.
         * 
         * @return builder
         * 
         */
        public Builder province(String province) {
            $.province = province;
            return this;
        }

        /**
         * @param streetAddress The street address of the subject.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(String streetAddress) {
            $.streetAddress = streetAddress;
            return this;
        }

        public SubjectResponse build() {
            $.commonName = Objects.requireNonNull($.commonName, "expected parameter 'commonName' to be non-null");
            $.countryCode = Objects.requireNonNull($.countryCode, "expected parameter 'countryCode' to be non-null");
            $.locality = Objects.requireNonNull($.locality, "expected parameter 'locality' to be non-null");
            $.organization = Objects.requireNonNull($.organization, "expected parameter 'organization' to be non-null");
            $.organizationalUnit = Objects.requireNonNull($.organizationalUnit, "expected parameter 'organizationalUnit' to be non-null");
            $.postalCode = Objects.requireNonNull($.postalCode, "expected parameter 'postalCode' to be non-null");
            $.province = Objects.requireNonNull($.province, "expected parameter 'province' to be non-null");
            $.streetAddress = Objects.requireNonNull($.streetAddress, "expected parameter 'streetAddress' to be non-null");
            return $;
        }
    }

}
