// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.ByProductsResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.EnvironmentResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.GrafeasV1beta1IntotoArtifactResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * This corresponds to an in-toto link.
 * 
 */
public final class LinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final LinkResponse Empty = new LinkResponse();

    /**
     * ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
     * 
     */
    @Import(name="byproducts", required=true)
    private ByProductsResponse byproducts;

    public ByProductsResponse byproducts() {
        return this.byproducts;
    }

    /**
     * This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren&#39;t directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: &#34;command&#34;: [&#34;git&#34;, &#34;clone&#34;, &#34;https://github.com/in-toto/demo-project.git&#34;]
     * 
     */
    @Import(name="command", required=true)
    private List<String> command;

    public List<String> command() {
        return this.command;
    }

    /**
     * This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: &#34;environment&#34;: { &#34;custom_values&#34;: { &#34;variables&#34;: &#34;&#34;, &#34;filesystem&#34;: &#34;&#34;, &#34;workdir&#34;: &#34;&#34;, &#34;&#34;: &#34;...&#34; } }
     * 
     */
    @Import(name="environment", required=true)
    private EnvironmentResponse environment;

    public EnvironmentResponse environment() {
        return this.environment;
    }

    /**
     * Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: &#34;materials&#34;: [ { &#34;resource_uri&#34;: &#34;foo/bar&#34;, &#34;hashes&#34;: { &#34;sha256&#34;: &#34;ebebf...&#34;, : } } ]
     * 
     */
    @Import(name="materials", required=true)
    private List<GrafeasV1beta1IntotoArtifactResponse> materials;

    public List<GrafeasV1beta1IntotoArtifactResponse> materials() {
        return this.materials;
    }

    /**
     * Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
     * 
     */
    @Import(name="products", required=true)
    private List<GrafeasV1beta1IntotoArtifactResponse> products;

    public List<GrafeasV1beta1IntotoArtifactResponse> products() {
        return this.products;
    }

    private LinkResponse() {}

    private LinkResponse(LinkResponse $) {
        this.byproducts = $.byproducts;
        this.command = $.command;
        this.environment = $.environment;
        this.materials = $.materials;
        this.products = $.products;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkResponse $;

        public Builder() {
            $ = new LinkResponse();
        }

        public Builder(LinkResponse defaults) {
            $ = new LinkResponse(Objects.requireNonNull(defaults));
        }

        public Builder byproducts(ByProductsResponse byproducts) {
            $.byproducts = byproducts;
            return this;
        }

        public Builder command(List<String> command) {
            $.command = command;
            return this;
        }

        public Builder command(String... command) {
            return command(List.of(command));
        }

        public Builder environment(EnvironmentResponse environment) {
            $.environment = environment;
            return this;
        }

        public Builder materials(List<GrafeasV1beta1IntotoArtifactResponse> materials) {
            $.materials = materials;
            return this;
        }

        public Builder materials(GrafeasV1beta1IntotoArtifactResponse... materials) {
            return materials(List.of(materials));
        }

        public Builder products(List<GrafeasV1beta1IntotoArtifactResponse> products) {
            $.products = products;
            return this;
        }

        public Builder products(GrafeasV1beta1IntotoArtifactResponse... products) {
            return products(List.of(products));
        }

        public LinkResponse build() {
            $.byproducts = Objects.requireNonNull($.byproducts, "expected parameter 'byproducts' to be non-null");
            $.command = Objects.requireNonNull($.command, "expected parameter 'command' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.materials = Objects.requireNonNull($.materials, "expected parameter 'materials' to be non-null");
            $.products = Objects.requireNonNull($.products, "expected parameter 'products' to be non-null");
            return $;
        }
    }

}
