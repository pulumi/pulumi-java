// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2TaskTemplateResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GoogleCloudRunV2ExecutionTemplateResponse {
    /**
     * @return KRM-style annotations for the resource.
     * 
     */
    private final Map<String,String> annotations;
    /**
     * @return KRM-style labels for the resource.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Specifies the maximum desired number of tasks the execution should run at given time. Must be &lt;= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
     * 
     */
    private final Integer parallelism;
    /**
     * @return Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     * 
     */
    private final Integer taskCount;
    /**
     * @return Describes the task(s) that will be created when executing an execution.
     * 
     */
    private final GoogleCloudRunV2TaskTemplateResponse template;

    @CustomType.Constructor
    private GoogleCloudRunV2ExecutionTemplateResponse(
        @CustomType.Parameter("annotations") Map<String,String> annotations,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("parallelism") Integer parallelism,
        @CustomType.Parameter("taskCount") Integer taskCount,
        @CustomType.Parameter("template") GoogleCloudRunV2TaskTemplateResponse template) {
        this.annotations = annotations;
        this.labels = labels;
        this.parallelism = parallelism;
        this.taskCount = taskCount;
        this.template = template;
    }

    /**
     * @return KRM-style annotations for the resource.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return KRM-style labels for the resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Specifies the maximum desired number of tasks the execution should run at given time. Must be &lt;= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
     * 
     */
    public Integer parallelism() {
        return this.parallelism;
    }
    /**
     * @return Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     * 
     */
    public Integer taskCount() {
        return this.taskCount;
    }
    /**
     * @return Describes the task(s) that will be created when executing an execution.
     * 
     */
    public GoogleCloudRunV2TaskTemplateResponse template() {
        return this.template;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRunV2ExecutionTemplateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> annotations;
        private Map<String,String> labels;
        private Integer parallelism;
        private Integer taskCount;
        private GoogleCloudRunV2TaskTemplateResponse template;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRunV2ExecutionTemplateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.labels = defaults.labels;
    	      this.parallelism = defaults.parallelism;
    	      this.taskCount = defaults.taskCount;
    	      this.template = defaults.template;
        }

        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder parallelism(Integer parallelism) {
            this.parallelism = Objects.requireNonNull(parallelism);
            return this;
        }
        public Builder taskCount(Integer taskCount) {
            this.taskCount = Objects.requireNonNull(taskCount);
            return this;
        }
        public Builder template(GoogleCloudRunV2TaskTemplateResponse template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }        public GoogleCloudRunV2ExecutionTemplateResponse build() {
            return new GoogleCloudRunV2ExecutionTemplateResponse(annotations, labels, parallelism, taskCount, template);
        }
    }
}
