// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.connectors.v1.outputs.ConfigVariableResponse;
import com.pulumi.googlenative.connectors.v1.outputs.Oauth2ClientCredentialsResponse;
import com.pulumi.googlenative.connectors.v1.outputs.Oauth2JwtBearerResponse;
import com.pulumi.googlenative.connectors.v1.outputs.SshPublicKeyResponse;
import com.pulumi.googlenative.connectors.v1.outputs.UserPasswordResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AuthConfigResponse {
    /**
     * @return List containing additional auth configs.
     * 
     */
    private final List<ConfigVariableResponse> additionalVariables;
    /**
     * @return The type of authentication configured.
     * 
     */
    private final String authType;
    /**
     * @return Oauth2ClientCredentials.
     * 
     */
    private final Oauth2ClientCredentialsResponse oauth2ClientCredentials;
    /**
     * @return Oauth2JwtBearer.
     * 
     */
    private final Oauth2JwtBearerResponse oauth2JwtBearer;
    /**
     * @return SSH Public Key.
     * 
     */
    private final SshPublicKeyResponse sshPublicKey;
    /**
     * @return UserPassword.
     * 
     */
    private final UserPasswordResponse userPassword;

    @CustomType.Constructor
    private AuthConfigResponse(
        @CustomType.Parameter("additionalVariables") List<ConfigVariableResponse> additionalVariables,
        @CustomType.Parameter("authType") String authType,
        @CustomType.Parameter("oauth2ClientCredentials") Oauth2ClientCredentialsResponse oauth2ClientCredentials,
        @CustomType.Parameter("oauth2JwtBearer") Oauth2JwtBearerResponse oauth2JwtBearer,
        @CustomType.Parameter("sshPublicKey") SshPublicKeyResponse sshPublicKey,
        @CustomType.Parameter("userPassword") UserPasswordResponse userPassword) {
        this.additionalVariables = additionalVariables;
        this.authType = authType;
        this.oauth2ClientCredentials = oauth2ClientCredentials;
        this.oauth2JwtBearer = oauth2JwtBearer;
        this.sshPublicKey = sshPublicKey;
        this.userPassword = userPassword;
    }

    /**
     * @return List containing additional auth configs.
     * 
     */
    public List<ConfigVariableResponse> additionalVariables() {
        return this.additionalVariables;
    }
    /**
     * @return The type of authentication configured.
     * 
     */
    public String authType() {
        return this.authType;
    }
    /**
     * @return Oauth2ClientCredentials.
     * 
     */
    public Oauth2ClientCredentialsResponse oauth2ClientCredentials() {
        return this.oauth2ClientCredentials;
    }
    /**
     * @return Oauth2JwtBearer.
     * 
     */
    public Oauth2JwtBearerResponse oauth2JwtBearer() {
        return this.oauth2JwtBearer;
    }
    /**
     * @return SSH Public Key.
     * 
     */
    public SshPublicKeyResponse sshPublicKey() {
        return this.sshPublicKey;
    }
    /**
     * @return UserPassword.
     * 
     */
    public UserPasswordResponse userPassword() {
        return this.userPassword;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ConfigVariableResponse> additionalVariables;
        private String authType;
        private Oauth2ClientCredentialsResponse oauth2ClientCredentials;
        private Oauth2JwtBearerResponse oauth2JwtBearer;
        private SshPublicKeyResponse sshPublicKey;
        private UserPasswordResponse userPassword;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalVariables = defaults.additionalVariables;
    	      this.authType = defaults.authType;
    	      this.oauth2ClientCredentials = defaults.oauth2ClientCredentials;
    	      this.oauth2JwtBearer = defaults.oauth2JwtBearer;
    	      this.sshPublicKey = defaults.sshPublicKey;
    	      this.userPassword = defaults.userPassword;
        }

        public Builder additionalVariables(List<ConfigVariableResponse> additionalVariables) {
            this.additionalVariables = Objects.requireNonNull(additionalVariables);
            return this;
        }
        public Builder additionalVariables(ConfigVariableResponse... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }
        public Builder authType(String authType) {
            this.authType = Objects.requireNonNull(authType);
            return this;
        }
        public Builder oauth2ClientCredentials(Oauth2ClientCredentialsResponse oauth2ClientCredentials) {
            this.oauth2ClientCredentials = Objects.requireNonNull(oauth2ClientCredentials);
            return this;
        }
        public Builder oauth2JwtBearer(Oauth2JwtBearerResponse oauth2JwtBearer) {
            this.oauth2JwtBearer = Objects.requireNonNull(oauth2JwtBearer);
            return this;
        }
        public Builder sshPublicKey(SshPublicKeyResponse sshPublicKey) {
            this.sshPublicKey = Objects.requireNonNull(sshPublicKey);
            return this;
        }
        public Builder userPassword(UserPasswordResponse userPassword) {
            this.userPassword = Objects.requireNonNull(userPassword);
            return this;
        }        public AuthConfigResponse build() {
            return new AuthConfigResponse(additionalVariables, authType, oauth2ClientCredentials, oauth2JwtBearer, sshPublicKey, userPassword);
        }
    }
}
