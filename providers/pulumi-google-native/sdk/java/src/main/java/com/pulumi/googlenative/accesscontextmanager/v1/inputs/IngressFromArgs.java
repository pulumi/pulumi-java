// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.accesscontextmanager.v1.enums.IngressFromIdentityType;
import com.pulumi.googlenative.accesscontextmanager.v1.inputs.IngressSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the conditions under which an IngressPolicy matches a request. Conditions are based on information about the source of the request. The request must satisfy what is defined in `sources` AND identity related fields in order to match.
 * 
 */
public final class IngressFromArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngressFromArgs Empty = new IngressFromArgs();

    /**
     * A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only.
     * 
     */
    @Import(name="identities")
    private @Nullable Output<List<String>> identities;

    /**
     * @return A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only.
     * 
     */
    public Optional<Output<List<String>>> identities() {
        return Optional.ofNullable(this.identities);
    }

    /**
     * Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
     * 
     */
    @Import(name="identityType")
    private @Nullable Output<IngressFromIdentityType> identityType;

    /**
     * @return Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
     * 
     */
    public Optional<Output<IngressFromIdentityType>> identityType() {
        return Optional.ofNullable(this.identityType);
    }

    /**
     * Sources that this IngressPolicy authorizes access from.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<IngressSourceArgs>> sources;

    /**
     * @return Sources that this IngressPolicy authorizes access from.
     * 
     */
    public Optional<Output<List<IngressSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    private IngressFromArgs() {}

    private IngressFromArgs(IngressFromArgs $) {
        this.identities = $.identities;
        this.identityType = $.identityType;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressFromArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressFromArgs $;

        public Builder() {
            $ = new IngressFromArgs();
        }

        public Builder(IngressFromArgs defaults) {
            $ = new IngressFromArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identities A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only.
         * 
         * @return builder
         * 
         */
        public Builder identities(@Nullable Output<List<String>> identities) {
            $.identities = identities;
            return this;
        }

        /**
         * @param identities A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only.
         * 
         * @return builder
         * 
         */
        public Builder identities(List<String> identities) {
            return identities(Output.of(identities));
        }

        /**
         * @param identities A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only.
         * 
         * @return builder
         * 
         */
        public Builder identities(String... identities) {
            return identities(List.of(identities));
        }

        /**
         * @param identityType Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
         * 
         * @return builder
         * 
         */
        public Builder identityType(@Nullable Output<IngressFromIdentityType> identityType) {
            $.identityType = identityType;
            return this;
        }

        /**
         * @param identityType Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
         * 
         * @return builder
         * 
         */
        public Builder identityType(IngressFromIdentityType identityType) {
            return identityType(Output.of(identityType));
        }

        /**
         * @param sources Sources that this IngressPolicy authorizes access from.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<IngressSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Sources that this IngressPolicy authorizes access from.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<IngressSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Sources that this IngressPolicy authorizes access from.
         * 
         * @return builder
         * 
         */
        public Builder sources(IngressSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public IngressFromArgs build() {
            return $;
        }
    }

}
