// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.FixedOrPercentResponse;
import com.pulumi.googlenative.compute_alpha.inputs.InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class InstanceGroupManagerAutoHealingPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final InstanceGroupManagerAutoHealingPolicyResponse Empty = new InstanceGroupManagerAutoHealingPolicyResponse();

    /**
     * Restricts what triggers autohealing.
     * 
     */
    @Import(name="autoHealingTriggers", required=true)
    private InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersResponse autoHealingTriggers;

    public InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersResponse autoHealingTriggers() {
        return this.autoHealingTriggers;
    }

    /**
     * The URL for the health check that signals autohealing.
     * 
     */
    @Import(name="healthCheck", required=true)
    private String healthCheck;

    public String healthCheck() {
        return this.healthCheck;
    }

    /**
     * The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
     * 
     */
    @Import(name="initialDelaySec", required=true)
    private Integer initialDelaySec;

    public Integer initialDelaySec() {
        return this.initialDelaySec;
    }

    /**
     * Maximum number of instances that can be unavailable when autohealing. When &#39;percent&#39; is used, the value is rounded if necessary. The instance is considered available if all of the following conditions are satisfied: 1. Instance&#39;s status is RUNNING. 2. Instance&#39;s currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM. By default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy.
     * 
     */
    @Import(name="maxUnavailable", required=true)
    private FixedOrPercentResponse maxUnavailable;

    public FixedOrPercentResponse maxUnavailable() {
        return this.maxUnavailable;
    }

    @Import(name="updateInstances", required=true)
    private String updateInstances;

    public String updateInstances() {
        return this.updateInstances;
    }

    private InstanceGroupManagerAutoHealingPolicyResponse() {}

    private InstanceGroupManagerAutoHealingPolicyResponse(InstanceGroupManagerAutoHealingPolicyResponse $) {
        this.autoHealingTriggers = $.autoHealingTriggers;
        this.healthCheck = $.healthCheck;
        this.initialDelaySec = $.initialDelaySec;
        this.maxUnavailable = $.maxUnavailable;
        this.updateInstances = $.updateInstances;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGroupManagerAutoHealingPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGroupManagerAutoHealingPolicyResponse $;

        public Builder() {
            $ = new InstanceGroupManagerAutoHealingPolicyResponse();
        }

        public Builder(InstanceGroupManagerAutoHealingPolicyResponse defaults) {
            $ = new InstanceGroupManagerAutoHealingPolicyResponse(Objects.requireNonNull(defaults));
        }

        public Builder autoHealingTriggers(InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersResponse autoHealingTriggers) {
            $.autoHealingTriggers = autoHealingTriggers;
            return this;
        }

        public Builder healthCheck(String healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder initialDelaySec(Integer initialDelaySec) {
            $.initialDelaySec = initialDelaySec;
            return this;
        }

        public Builder maxUnavailable(FixedOrPercentResponse maxUnavailable) {
            $.maxUnavailable = maxUnavailable;
            return this;
        }

        public Builder updateInstances(String updateInstances) {
            $.updateInstances = updateInstances;
            return this;
        }

        public InstanceGroupManagerAutoHealingPolicyResponse build() {
            $.autoHealingTriggers = Objects.requireNonNull($.autoHealingTriggers, "expected parameter 'autoHealingTriggers' to be non-null");
            $.healthCheck = Objects.requireNonNull($.healthCheck, "expected parameter 'healthCheck' to be non-null");
            $.initialDelaySec = Objects.requireNonNull($.initialDelaySec, "expected parameter 'initialDelaySec' to be non-null");
            $.maxUnavailable = Objects.requireNonNull($.maxUnavailable, "expected parameter 'maxUnavailable' to be non-null");
            $.updateInstances = Objects.requireNonNull($.updateInstances, "expected parameter 'updateInstances' to be non-null");
            return $;
        }
    }

}
