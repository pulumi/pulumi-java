// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2DictionaryResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2ExcludeInfoTypesResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2RegexResponse;
import java.lang.String;
import java.util.Objects;


/**
 * The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
 * 
 */
public final class GooglePrivacyDlpV2ExclusionRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2ExclusionRuleResponse Empty = new GooglePrivacyDlpV2ExclusionRuleResponse();

    /**
     * Dictionary which defines the rule.
     * 
     */
    @Import(name="dictionary", required=true)
    private GooglePrivacyDlpV2DictionaryResponse dictionary;

    /**
     * @return Dictionary which defines the rule.
     * 
     */
    public GooglePrivacyDlpV2DictionaryResponse dictionary() {
        return this.dictionary;
    }

    /**
     * Set of infoTypes for which findings would affect this rule.
     * 
     */
    @Import(name="excludeInfoTypes", required=true)
    private GooglePrivacyDlpV2ExcludeInfoTypesResponse excludeInfoTypes;

    /**
     * @return Set of infoTypes for which findings would affect this rule.
     * 
     */
    public GooglePrivacyDlpV2ExcludeInfoTypesResponse excludeInfoTypes() {
        return this.excludeInfoTypes;
    }

    /**
     * How the rule is applied, see MatchingType documentation for details.
     * 
     */
    @Import(name="matchingType", required=true)
    private String matchingType;

    /**
     * @return How the rule is applied, see MatchingType documentation for details.
     * 
     */
    public String matchingType() {
        return this.matchingType;
    }

    /**
     * Regular expression which defines the rule.
     * 
     */
    @Import(name="regex", required=true)
    private GooglePrivacyDlpV2RegexResponse regex;

    /**
     * @return Regular expression which defines the rule.
     * 
     */
    public GooglePrivacyDlpV2RegexResponse regex() {
        return this.regex;
    }

    private GooglePrivacyDlpV2ExclusionRuleResponse() {}

    private GooglePrivacyDlpV2ExclusionRuleResponse(GooglePrivacyDlpV2ExclusionRuleResponse $) {
        this.dictionary = $.dictionary;
        this.excludeInfoTypes = $.excludeInfoTypes;
        this.matchingType = $.matchingType;
        this.regex = $.regex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2ExclusionRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2ExclusionRuleResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2ExclusionRuleResponse();
        }

        public Builder(GooglePrivacyDlpV2ExclusionRuleResponse defaults) {
            $ = new GooglePrivacyDlpV2ExclusionRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dictionary Dictionary which defines the rule.
         * 
         * @return builder
         * 
         */
        public Builder dictionary(GooglePrivacyDlpV2DictionaryResponse dictionary) {
            $.dictionary = dictionary;
            return this;
        }

        /**
         * @param excludeInfoTypes Set of infoTypes for which findings would affect this rule.
         * 
         * @return builder
         * 
         */
        public Builder excludeInfoTypes(GooglePrivacyDlpV2ExcludeInfoTypesResponse excludeInfoTypes) {
            $.excludeInfoTypes = excludeInfoTypes;
            return this;
        }

        /**
         * @param matchingType How the rule is applied, see MatchingType documentation for details.
         * 
         * @return builder
         * 
         */
        public Builder matchingType(String matchingType) {
            $.matchingType = matchingType;
            return this;
        }

        /**
         * @param regex Regular expression which defines the rule.
         * 
         * @return builder
         * 
         */
        public Builder regex(GooglePrivacyDlpV2RegexResponse regex) {
            $.regex = regex;
            return this;
        }

        public GooglePrivacyDlpV2ExclusionRuleResponse build() {
            $.dictionary = Objects.requireNonNull($.dictionary, "expected parameter 'dictionary' to be non-null");
            $.excludeInfoTypes = Objects.requireNonNull($.excludeInfoTypes, "expected parameter 'excludeInfoTypes' to be non-null");
            $.matchingType = Objects.requireNonNull($.matchingType, "expected parameter 'matchingType' to be non-null");
            $.regex = Objects.requireNonNull($.regex, "expected parameter 'regex' to be non-null");
            return $;
        }
    }

}
