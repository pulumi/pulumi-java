// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies settings for an HTTP redirect.
 * 
 */
public final class HttpRedirectActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final HttpRedirectActionResponse Empty = new HttpRedirectActionResponse();

    /**
     * The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
     * 
     */
    @Import(name="hostRedirect", required=true)
    private String hostRedirect;

    /**
     * @return The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
     * 
     */
    public String hostRedirect() {
        return this.hostRedirect;
    }

    /**
     * If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
     * 
     */
    @Import(name="httpsRedirect", required=true)
    private Boolean httpsRedirect;

    /**
     * @return If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
     * 
     */
    public Boolean httpsRedirect() {
        return this.httpsRedirect;
    }

    /**
     * The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    @Import(name="pathRedirect", required=true)
    private String pathRedirect;

    /**
     * @return The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    public String pathRedirect() {
        return this.pathRedirect;
    }

    /**
     * The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    @Import(name="prefixRedirect", required=true)
    private String prefixRedirect;

    /**
     * @return The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     * 
     */
    public String prefixRedirect() {
        return this.prefixRedirect;
    }

    /**
     * The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained.
     * 
     */
    @Import(name="redirectResponseCode", required=true)
    private String redirectResponseCode;

    /**
     * @return The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained.
     * 
     */
    public String redirectResponseCode() {
        return this.redirectResponseCode;
    }

    /**
     * If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
     * 
     */
    @Import(name="stripQuery", required=true)
    private Boolean stripQuery;

    /**
     * @return If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
     * 
     */
    public Boolean stripQuery() {
        return this.stripQuery;
    }

    private HttpRedirectActionResponse() {}

    private HttpRedirectActionResponse(HttpRedirectActionResponse $) {
        this.hostRedirect = $.hostRedirect;
        this.httpsRedirect = $.httpsRedirect;
        this.pathRedirect = $.pathRedirect;
        this.prefixRedirect = $.prefixRedirect;
        this.redirectResponseCode = $.redirectResponseCode;
        this.stripQuery = $.stripQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRedirectActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRedirectActionResponse $;

        public Builder() {
            $ = new HttpRedirectActionResponse();
        }

        public Builder(HttpRedirectActionResponse defaults) {
            $ = new HttpRedirectActionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostRedirect The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder hostRedirect(String hostRedirect) {
            $.hostRedirect = hostRedirect;
            return this;
        }

        /**
         * @param httpsRedirect If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
         * 
         * @return builder
         * 
         */
        public Builder httpsRedirect(Boolean httpsRedirect) {
            $.httpsRedirect = httpsRedirect;
            return this;
        }

        /**
         * @param pathRedirect The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder pathRedirect(String pathRedirect) {
            $.pathRedirect = pathRedirect;
            return this;
        }

        /**
         * @param prefixRedirect The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder prefixRedirect(String prefixRedirect) {
            $.prefixRedirect = prefixRedirect;
            return this;
        }

        /**
         * @param redirectResponseCode The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained.
         * 
         * @return builder
         * 
         */
        public Builder redirectResponseCode(String redirectResponseCode) {
            $.redirectResponseCode = redirectResponseCode;
            return this;
        }

        /**
         * @param stripQuery If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
         * 
         * @return builder
         * 
         */
        public Builder stripQuery(Boolean stripQuery) {
            $.stripQuery = stripQuery;
            return this;
        }

        public HttpRedirectActionResponse build() {
            $.hostRedirect = Objects.requireNonNull($.hostRedirect, "expected parameter 'hostRedirect' to be non-null");
            $.httpsRedirect = Objects.requireNonNull($.httpsRedirect, "expected parameter 'httpsRedirect' to be non-null");
            $.pathRedirect = Objects.requireNonNull($.pathRedirect, "expected parameter 'pathRedirect' to be non-null");
            $.prefixRedirect = Objects.requireNonNull($.prefixRedirect, "expected parameter 'prefixRedirect' to be non-null");
            $.redirectResponseCode = Objects.requireNonNull($.redirectResponseCode, "expected parameter 'redirectResponseCode' to be non-null");
            $.stripQuery = Objects.requireNonNull($.stripQuery, "expected parameter 'stripQuery' to be non-null");
            return $;
        }
    }

}
