// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointAttachmentArgs Empty = new EndpointAttachmentArgs();

    /**
     * ID to use for the endpoint attachment. The ID can contain lowercase letters and numbers, must start with a letter, and must be 1-20 characters in length.
     * 
     */
    @Import(name="endpointAttachmentId")
    private @Nullable Output<String> endpointAttachmentId;

    /**
     * @return ID to use for the endpoint attachment. The ID can contain lowercase letters and numbers, must start with a letter, and must be 1-20 characters in length.
     * 
     */
    public Optional<Output<String>> endpointAttachmentId() {
        return Optional.ofNullable(this.endpointAttachmentId);
    }

    /**
     * Location of the endpoint attachment.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the endpoint attachment.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Format: projects/*{@literal /}regions/*{@literal /}serviceAttachments/*
     * 
     */
    @Import(name="serviceAttachment")
    private @Nullable Output<String> serviceAttachment;

    /**
     * @return Format: projects/*{@literal /}regions/*{@literal /}serviceAttachments/*
     * 
     */
    public Optional<Output<String>> serviceAttachment() {
        return Optional.ofNullable(this.serviceAttachment);
    }

    private EndpointAttachmentArgs() {}

    private EndpointAttachmentArgs(EndpointAttachmentArgs $) {
        this.endpointAttachmentId = $.endpointAttachmentId;
        this.location = $.location;
        this.name = $.name;
        this.organizationId = $.organizationId;
        this.serviceAttachment = $.serviceAttachment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointAttachmentArgs $;

        public Builder() {
            $ = new EndpointAttachmentArgs();
        }

        public Builder(EndpointAttachmentArgs defaults) {
            $ = new EndpointAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointAttachmentId ID to use for the endpoint attachment. The ID can contain lowercase letters and numbers, must start with a letter, and must be 1-20 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder endpointAttachmentId(@Nullable Output<String> endpointAttachmentId) {
            $.endpointAttachmentId = endpointAttachmentId;
            return this;
        }

        /**
         * @param endpointAttachmentId ID to use for the endpoint attachment. The ID can contain lowercase letters and numbers, must start with a letter, and must be 1-20 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder endpointAttachmentId(String endpointAttachmentId) {
            return endpointAttachmentId(Output.of(endpointAttachmentId));
        }

        /**
         * @param location Location of the endpoint attachment.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the endpoint attachment.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param serviceAttachment Format: projects/*{@literal /}regions/*{@literal /}serviceAttachments/*
         * 
         * @return builder
         * 
         */
        public Builder serviceAttachment(@Nullable Output<String> serviceAttachment) {
            $.serviceAttachment = serviceAttachment;
            return this;
        }

        /**
         * @param serviceAttachment Format: projects/*{@literal /}regions/*{@literal /}serviceAttachments/*
         * 
         * @return builder
         * 
         */
        public Builder serviceAttachment(String serviceAttachment) {
            return serviceAttachment(Output.of(serviceAttachment));
        }

        public EndpointAttachmentArgs build() {
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            return $;
        }
    }

}
