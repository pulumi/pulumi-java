// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.certificatemanager.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsAuthorizationArgs Empty = new DnsAuthorizationArgs();

    /**
     * One or more paragraphs of text description of a DnsAuthorization.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return One or more paragraphs of text description of a DnsAuthorization.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Required. A user-provided name of the dns authorization.
     * 
     */
    @Import(name="dnsAuthorizationId", required=true)
    private Output<String> dnsAuthorizationId;

    /**
     * @return Required. A user-provided name of the dns authorization.
     * 
     */
    public Output<String> dnsAuthorizationId() {
        return this.dnsAuthorizationId;
    }

    /**
     * Immutable. A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Immutable. A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * Set of labels associated with a DnsAuthorization.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of labels associated with a DnsAuthorization.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}dnsAuthorizations/*`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}dnsAuthorizations/*`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private DnsAuthorizationArgs() {}

    private DnsAuthorizationArgs(DnsAuthorizationArgs $) {
        this.description = $.description;
        this.dnsAuthorizationId = $.dnsAuthorizationId;
        this.domain = $.domain;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsAuthorizationArgs $;

        public Builder() {
            $ = new DnsAuthorizationArgs();
        }

        public Builder(DnsAuthorizationArgs defaults) {
            $ = new DnsAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description One or more paragraphs of text description of a DnsAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description One or more paragraphs of text description of a DnsAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnsAuthorizationId Required. A user-provided name of the dns authorization.
         * 
         * @return builder
         * 
         */
        public Builder dnsAuthorizationId(Output<String> dnsAuthorizationId) {
            $.dnsAuthorizationId = dnsAuthorizationId;
            return this;
        }

        /**
         * @param dnsAuthorizationId Required. A user-provided name of the dns authorization.
         * 
         * @return builder
         * 
         */
        public Builder dnsAuthorizationId(String dnsAuthorizationId) {
            return dnsAuthorizationId(Output.of(dnsAuthorizationId));
        }

        /**
         * @param domain Immutable. A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Immutable. A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param labels Set of labels associated with a DnsAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of labels associated with a DnsAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}dnsAuthorizations/*`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}dnsAuthorizations/*`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public DnsAuthorizationArgs build() {
            $.dnsAuthorizationId = Objects.requireNonNull($.dnsAuthorizationId, "expected parameter 'dnsAuthorizationId' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            return $;
        }
    }

}
