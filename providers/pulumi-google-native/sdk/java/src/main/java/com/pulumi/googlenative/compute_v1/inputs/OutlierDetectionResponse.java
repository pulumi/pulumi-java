// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.inputs.DurationResponse;
import java.lang.Integer;
import java.util.Objects;


/**
 * Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
 * 
 */
public final class OutlierDetectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final OutlierDetectionResponse Empty = new OutlierDetectionResponse();

    /**
     * The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
     * 
     */
    @Import(name="baseEjectionTime", required=true)
    private DurationResponse baseEjectionTime;

    public DurationResponse baseEjectionTime() {
        return this.baseEjectionTime;
    }

    /**
     * Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
     * 
     */
    @Import(name="consecutiveErrors", required=true)
    private Integer consecutiveErrors;

    public Integer consecutiveErrors() {
        return this.consecutiveErrors;
    }

    /**
     * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
     * 
     */
    @Import(name="consecutiveGatewayFailure", required=true)
    private Integer consecutiveGatewayFailure;

    public Integer consecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
     * 
     */
    @Import(name="enforcingConsecutiveErrors", required=true)
    private Integer enforcingConsecutiveErrors;

    public Integer enforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    @Import(name="enforcingConsecutiveGatewayFailure", required=true)
    private Integer enforcingConsecutiveGatewayFailure;

    public Integer enforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    @Import(name="enforcingSuccessRate", required=true)
    private Integer enforcingSuccessRate;

    public Integer enforcingSuccessRate() {
        return this.enforcingSuccessRate;
    }

    /**
     * Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
     * 
     */
    @Import(name="interval", required=true)
    private DurationResponse interval;

    public DurationResponse interval() {
        return this.interval;
    }

    /**
     * Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
     * 
     */
    @Import(name="maxEjectionPercent", required=true)
    private Integer maxEjectionPercent;

    public Integer maxEjectionPercent() {
        return this.maxEjectionPercent;
    }

    /**
     * The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
     * 
     */
    @Import(name="successRateMinimumHosts", required=true)
    private Integer successRateMinimumHosts;

    public Integer successRateMinimumHosts() {
        return this.successRateMinimumHosts;
    }

    /**
     * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
     * 
     */
    @Import(name="successRateRequestVolume", required=true)
    private Integer successRateRequestVolume;

    public Integer successRateRequestVolume() {
        return this.successRateRequestVolume;
    }

    /**
     * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
     * 
     */
    @Import(name="successRateStdevFactor", required=true)
    private Integer successRateStdevFactor;

    public Integer successRateStdevFactor() {
        return this.successRateStdevFactor;
    }

    private OutlierDetectionResponse() {}

    private OutlierDetectionResponse(OutlierDetectionResponse $) {
        this.baseEjectionTime = $.baseEjectionTime;
        this.consecutiveErrors = $.consecutiveErrors;
        this.consecutiveGatewayFailure = $.consecutiveGatewayFailure;
        this.enforcingConsecutiveErrors = $.enforcingConsecutiveErrors;
        this.enforcingConsecutiveGatewayFailure = $.enforcingConsecutiveGatewayFailure;
        this.enforcingSuccessRate = $.enforcingSuccessRate;
        this.interval = $.interval;
        this.maxEjectionPercent = $.maxEjectionPercent;
        this.successRateMinimumHosts = $.successRateMinimumHosts;
        this.successRateRequestVolume = $.successRateRequestVolume;
        this.successRateStdevFactor = $.successRateStdevFactor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutlierDetectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutlierDetectionResponse $;

        public Builder() {
            $ = new OutlierDetectionResponse();
        }

        public Builder(OutlierDetectionResponse defaults) {
            $ = new OutlierDetectionResponse(Objects.requireNonNull(defaults));
        }

        public Builder baseEjectionTime(DurationResponse baseEjectionTime) {
            $.baseEjectionTime = baseEjectionTime;
            return this;
        }

        public Builder consecutiveErrors(Integer consecutiveErrors) {
            $.consecutiveErrors = consecutiveErrors;
            return this;
        }

        public Builder consecutiveGatewayFailure(Integer consecutiveGatewayFailure) {
            $.consecutiveGatewayFailure = consecutiveGatewayFailure;
            return this;
        }

        public Builder enforcingConsecutiveErrors(Integer enforcingConsecutiveErrors) {
            $.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
            return this;
        }

        public Builder enforcingConsecutiveGatewayFailure(Integer enforcingConsecutiveGatewayFailure) {
            $.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            return this;
        }

        public Builder enforcingSuccessRate(Integer enforcingSuccessRate) {
            $.enforcingSuccessRate = enforcingSuccessRate;
            return this;
        }

        public Builder interval(DurationResponse interval) {
            $.interval = interval;
            return this;
        }

        public Builder maxEjectionPercent(Integer maxEjectionPercent) {
            $.maxEjectionPercent = maxEjectionPercent;
            return this;
        }

        public Builder successRateMinimumHosts(Integer successRateMinimumHosts) {
            $.successRateMinimumHosts = successRateMinimumHosts;
            return this;
        }

        public Builder successRateRequestVolume(Integer successRateRequestVolume) {
            $.successRateRequestVolume = successRateRequestVolume;
            return this;
        }

        public Builder successRateStdevFactor(Integer successRateStdevFactor) {
            $.successRateStdevFactor = successRateStdevFactor;
            return this;
        }

        public OutlierDetectionResponse build() {
            $.baseEjectionTime = Objects.requireNonNull($.baseEjectionTime, "expected parameter 'baseEjectionTime' to be non-null");
            $.consecutiveErrors = Objects.requireNonNull($.consecutiveErrors, "expected parameter 'consecutiveErrors' to be non-null");
            $.consecutiveGatewayFailure = Objects.requireNonNull($.consecutiveGatewayFailure, "expected parameter 'consecutiveGatewayFailure' to be non-null");
            $.enforcingConsecutiveErrors = Objects.requireNonNull($.enforcingConsecutiveErrors, "expected parameter 'enforcingConsecutiveErrors' to be non-null");
            $.enforcingConsecutiveGatewayFailure = Objects.requireNonNull($.enforcingConsecutiveGatewayFailure, "expected parameter 'enforcingConsecutiveGatewayFailure' to be non-null");
            $.enforcingSuccessRate = Objects.requireNonNull($.enforcingSuccessRate, "expected parameter 'enforcingSuccessRate' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            $.maxEjectionPercent = Objects.requireNonNull($.maxEjectionPercent, "expected parameter 'maxEjectionPercent' to be non-null");
            $.successRateMinimumHosts = Objects.requireNonNull($.successRateMinimumHosts, "expected parameter 'successRateMinimumHosts' to be non-null");
            $.successRateRequestVolume = Objects.requireNonNull($.successRateRequestVolume, "expected parameter 'successRateRequestVolume' to be non-null");
            $.successRateStdevFactor = Objects.requireNonNull($.successRateStdevFactor, "expected parameter 'successRateStdevFactor' to be non-null");
            return $;
        }
    }

}
