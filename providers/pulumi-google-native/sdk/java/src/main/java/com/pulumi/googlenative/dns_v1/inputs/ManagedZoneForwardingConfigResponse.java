// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dns_v1.inputs.ManagedZoneForwardingConfigNameServerTargetResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ManagedZoneForwardingConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedZoneForwardingConfigResponse Empty = new ManagedZoneForwardingConfigResponse();

    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
     * 
     */
    @Import(name="targetNameServers", required=true)
    private List<ManagedZoneForwardingConfigNameServerTargetResponse> targetNameServers;

    public List<ManagedZoneForwardingConfigNameServerTargetResponse> targetNameServers() {
        return this.targetNameServers;
    }

    private ManagedZoneForwardingConfigResponse() {}

    private ManagedZoneForwardingConfigResponse(ManagedZoneForwardingConfigResponse $) {
        this.kind = $.kind;
        this.targetNameServers = $.targetNameServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZoneForwardingConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZoneForwardingConfigResponse $;

        public Builder() {
            $ = new ManagedZoneForwardingConfigResponse();
        }

        public Builder(ManagedZoneForwardingConfigResponse defaults) {
            $ = new ManagedZoneForwardingConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder targetNameServers(List<ManagedZoneForwardingConfigNameServerTargetResponse> targetNameServers) {
            $.targetNameServers = targetNameServers;
            return this;
        }

        public Builder targetNameServers(ManagedZoneForwardingConfigNameServerTargetResponse... targetNameServers) {
            return targetNameServers(List.of(targetNameServers));
        }

        public ManagedZoneForwardingConfigResponse build() {
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.targetNameServers = Objects.requireNonNull($.targetNameServers, "expected parameter 'targetNameServers' to be non-null");
            return $;
        }
    }

}
