// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
 * 
 */
public final class CVSSv3Response extends com.pulumi.resources.InvokeArgs {

    public static final CVSSv3Response Empty = new CVSSv3Response();

    @Import(name="attackComplexity", required=true)
    private String attackComplexity;

    public String attackComplexity() {
        return this.attackComplexity;
    }

    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
     * 
     */
    @Import(name="attackVector", required=true)
    private String attackVector;

    public String attackVector() {
        return this.attackVector;
    }

    @Import(name="availabilityImpact", required=true)
    private String availabilityImpact;

    public String availabilityImpact() {
        return this.availabilityImpact;
    }

    /**
     * The base score is a function of the base metric scores.
     * 
     */
    @Import(name="baseScore", required=true)
    private Double baseScore;

    public Double baseScore() {
        return this.baseScore;
    }

    @Import(name="confidentialityImpact", required=true)
    private String confidentialityImpact;

    public String confidentialityImpact() {
        return this.confidentialityImpact;
    }

    @Import(name="exploitabilityScore", required=true)
    private Double exploitabilityScore;

    public Double exploitabilityScore() {
        return this.exploitabilityScore;
    }

    @Import(name="impactScore", required=true)
    private Double impactScore;

    public Double impactScore() {
        return this.impactScore;
    }

    @Import(name="integrityImpact", required=true)
    private String integrityImpact;

    public String integrityImpact() {
        return this.integrityImpact;
    }

    @Import(name="privilegesRequired", required=true)
    private String privilegesRequired;

    public String privilegesRequired() {
        return this.privilegesRequired;
    }

    @Import(name="scope", required=true)
    private String scope;

    public String scope() {
        return this.scope;
    }

    @Import(name="userInteraction", required=true)
    private String userInteraction;

    public String userInteraction() {
        return this.userInteraction;
    }

    private CVSSv3Response() {}

    private CVSSv3Response(CVSSv3Response $) {
        this.attackComplexity = $.attackComplexity;
        this.attackVector = $.attackVector;
        this.availabilityImpact = $.availabilityImpact;
        this.baseScore = $.baseScore;
        this.confidentialityImpact = $.confidentialityImpact;
        this.exploitabilityScore = $.exploitabilityScore;
        this.impactScore = $.impactScore;
        this.integrityImpact = $.integrityImpact;
        this.privilegesRequired = $.privilegesRequired;
        this.scope = $.scope;
        this.userInteraction = $.userInteraction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CVSSv3Response defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CVSSv3Response $;

        public Builder() {
            $ = new CVSSv3Response();
        }

        public Builder(CVSSv3Response defaults) {
            $ = new CVSSv3Response(Objects.requireNonNull(defaults));
        }

        public Builder attackComplexity(String attackComplexity) {
            $.attackComplexity = attackComplexity;
            return this;
        }

        public Builder attackVector(String attackVector) {
            $.attackVector = attackVector;
            return this;
        }

        public Builder availabilityImpact(String availabilityImpact) {
            $.availabilityImpact = availabilityImpact;
            return this;
        }

        public Builder baseScore(Double baseScore) {
            $.baseScore = baseScore;
            return this;
        }

        public Builder confidentialityImpact(String confidentialityImpact) {
            $.confidentialityImpact = confidentialityImpact;
            return this;
        }

        public Builder exploitabilityScore(Double exploitabilityScore) {
            $.exploitabilityScore = exploitabilityScore;
            return this;
        }

        public Builder impactScore(Double impactScore) {
            $.impactScore = impactScore;
            return this;
        }

        public Builder integrityImpact(String integrityImpact) {
            $.integrityImpact = integrityImpact;
            return this;
        }

        public Builder privilegesRequired(String privilegesRequired) {
            $.privilegesRequired = privilegesRequired;
            return this;
        }

        public Builder scope(String scope) {
            $.scope = scope;
            return this;
        }

        public Builder userInteraction(String userInteraction) {
            $.userInteraction = userInteraction;
            return this;
        }

        public CVSSv3Response build() {
            $.attackComplexity = Objects.requireNonNull($.attackComplexity, "expected parameter 'attackComplexity' to be non-null");
            $.attackVector = Objects.requireNonNull($.attackVector, "expected parameter 'attackVector' to be non-null");
            $.availabilityImpact = Objects.requireNonNull($.availabilityImpact, "expected parameter 'availabilityImpact' to be non-null");
            $.baseScore = Objects.requireNonNull($.baseScore, "expected parameter 'baseScore' to be non-null");
            $.confidentialityImpact = Objects.requireNonNull($.confidentialityImpact, "expected parameter 'confidentialityImpact' to be non-null");
            $.exploitabilityScore = Objects.requireNonNull($.exploitabilityScore, "expected parameter 'exploitabilityScore' to be non-null");
            $.impactScore = Objects.requireNonNull($.impactScore, "expected parameter 'impactScore' to be non-null");
            $.integrityImpact = Objects.requireNonNull($.integrityImpact, "expected parameter 'integrityImpact' to be non-null");
            $.privilegesRequired = Objects.requireNonNull($.privilegesRequired, "expected parameter 'privilegesRequired' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.userInteraction = Objects.requireNonNull($.userInteraction, "expected parameter 'userInteraction' to be non-null");
            return $;
        }
    }

}
