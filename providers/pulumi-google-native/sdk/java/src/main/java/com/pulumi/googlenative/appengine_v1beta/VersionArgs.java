// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.appengine_v1beta.enums.VersionInboundServicesItem;
import com.pulumi.googlenative.appengine_v1beta.enums.VersionServingStatus;
import com.pulumi.googlenative.appengine_v1beta.inputs.ApiConfigHandlerArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.AutomaticScalingArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.BasicScalingArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.DeploymentArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.EndpointsApiServiceArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.EntrypointArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.ErrorHandlerArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.HealthCheckArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.LibraryArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.LivenessCheckArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.ManualScalingArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.NetworkArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.ReadinessCheckArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.ResourcesArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.UrlMapArgs;
import com.pulumi.googlenative.appengine_v1beta.inputs.VpcAccessConnectorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VersionArgs Empty = new VersionArgs();

    /**
     * Serving configuration for Google Cloud Endpoints (https://cloud.google.com/appengine/docs/python/endpoints/).Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="apiConfig")
    private @Nullable Output<ApiConfigHandlerArgs> apiConfig;

    public Optional<Output<ApiConfigHandlerArgs>> apiConfig() {
        return Optional.ofNullable(this.apiConfig);
    }

    /**
     * app_engine_apis allows second generation runtimes to access the App Engine APIs.
     * 
     */
    @Import(name="appEngineApis")
    private @Nullable Output<Boolean> appEngineApis;

    public Optional<Output<Boolean>> appEngineApis() {
        return Optional.ofNullable(this.appEngineApis);
    }

    @Import(name="appId", required=true)
    private Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }

    /**
     * Automatic scaling is based on request rate, response latencies, and other application metrics. Instances are dynamically created and destroyed as needed in order to handle traffic.
     * 
     */
    @Import(name="automaticScaling")
    private @Nullable Output<AutomaticScalingArgs> automaticScaling;

    public Optional<Output<AutomaticScalingArgs>> automaticScaling() {
        return Optional.ofNullable(this.automaticScaling);
    }

    /**
     * A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
     * 
     */
    @Import(name="basicScaling")
    private @Nullable Output<BasicScalingArgs> basicScaling;

    public Optional<Output<BasicScalingArgs>> basicScaling() {
        return Optional.ofNullable(this.basicScaling);
    }

    /**
     * Metadata settings that are supplied to this version to enable beta runtime features.
     * 
     */
    @Import(name="betaSettings")
    private @Nullable Output<Map<String,String>> betaSettings;

    public Optional<Output<Map<String,String>>> betaSettings() {
        return Optional.ofNullable(this.betaSettings);
    }

    /**
     * Environment variables available to the build environment.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="buildEnvVariables")
    private @Nullable Output<Map<String,String>> buildEnvVariables;

    public Optional<Output<Map<String,String>>> buildEnvVariables() {
        return Optional.ofNullable(this.buildEnvVariables);
    }

    /**
     * Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding StaticFilesHandler (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StaticFilesHandler) does not specify its own expiration time.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="defaultExpiration")
    private @Nullable Output<String> defaultExpiration;

    public Optional<Output<String>> defaultExpiration() {
        return Optional.ofNullable(this.defaultExpiration);
    }

    /**
     * Code and application artifacts that make up this version.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="deployment")
    private @Nullable Output<DeploymentArgs> deployment;

    public Optional<Output<DeploymentArgs>> deployment() {
        return Optional.ofNullable(this.deployment);
    }

    /**
     * Cloud Endpoints configuration.If endpoints_api_service is set, the Cloud Endpoints Extensible Service Proxy will be provided to serve the API implemented by the app.
     * 
     */
    @Import(name="endpointsApiService")
    private @Nullable Output<EndpointsApiServiceArgs> endpointsApiService;

    public Optional<Output<EndpointsApiServiceArgs>> endpointsApiService() {
        return Optional.ofNullable(this.endpointsApiService);
    }

    /**
     * The entrypoint for the application.
     * 
     */
    @Import(name="entrypoint")
    private @Nullable Output<EntrypointArgs> entrypoint;

    public Optional<Output<EntrypointArgs>> entrypoint() {
        return Optional.ofNullable(this.entrypoint);
    }

    /**
     * App Engine execution environment for this version.Defaults to standard.
     * 
     */
    @Import(name="env")
    private @Nullable Output<String> env;

    public Optional<Output<String>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * Environment variables available to the application.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="envVariables")
    private @Nullable Output<Map<String,String>> envVariables;

    public Optional<Output<Map<String,String>>> envVariables() {
        return Optional.ofNullable(this.envVariables);
    }

    /**
     * Custom static error pages. Limited to 10KB per page.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="errorHandlers")
    private @Nullable Output<List<ErrorHandlerArgs>> errorHandlers;

    public Optional<Output<List<ErrorHandlerArgs>>> errorHandlers() {
        return Optional.ofNullable(this.errorHandlers);
    }

    /**
     * An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the request and other request handlers are not attempted.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="handlers")
    private @Nullable Output<List<UrlMapArgs>> handlers;

    public Optional<Output<List<UrlMapArgs>>> handlers() {
        return Optional.ofNullable(this.handlers);
    }

    /**
     * Configures health checking for instances. Unhealthy instances are stopped and replaced with new instances. Only applicable in the App Engine flexible environment.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<HealthCheckArgs> healthCheck;

    public Optional<Output<HealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * Relative name of the version within the service. Example: v1. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names: &#34;default&#34;, &#34;latest&#34;, and any name with the prefix &#34;ah-&#34;.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Before an application can receive email or XMPP messages, the application must be configured to enable the service.
     * 
     */
    @Import(name="inboundServices")
    private @Nullable Output<List<VersionInboundServicesItem>> inboundServices;

    public Optional<Output<List<VersionInboundServicesItem>>> inboundServices() {
        return Optional.ofNullable(this.inboundServices);
    }

    /**
     * Instance class that is used to run this version. Valid values are: AutomaticScaling: F1, F2, F4, F4_1G ManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for AutomaticScaling and B1 for ManualScaling or BasicScaling.
     * 
     */
    @Import(name="instanceClass")
    private @Nullable Output<String> instanceClass;

    public Optional<Output<String>> instanceClass() {
        return Optional.ofNullable(this.instanceClass);
    }

    /**
     * Configuration for third-party Python runtime libraries that are required by the application.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="libraries")
    private @Nullable Output<List<LibraryArgs>> libraries;

    public Optional<Output<List<LibraryArgs>>> libraries() {
        return Optional.ofNullable(this.libraries);
    }

    /**
     * Configures liveness health checking for instances. Unhealthy instances are stopped and replaced with new instancesOnly returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="livenessCheck")
    private @Nullable Output<LivenessCheckArgs> livenessCheck;

    public Optional<Output<LivenessCheckArgs>> livenessCheck() {
        return Optional.ofNullable(this.livenessCheck);
    }

    /**
     * A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time. Manually scaled versions are sometimes referred to as &#34;backends&#34;.
     * 
     */
    @Import(name="manualScaling")
    private @Nullable Output<ManualScalingArgs> manualScaling;

    public Optional<Output<ManualScalingArgs>> manualScaling() {
        return Optional.ofNullable(this.manualScaling);
    }

    /**
     * Extra network settings. Only applicable in the App Engine flexible environment.
     * 
     */
    @Import(name="network")
    private @Nullable Output<NetworkArgs> network;

    public Optional<Output<NetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Files that match this pattern will not be built into this version. Only applicable for Go runtimes.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="nobuildFilesRegex")
    private @Nullable Output<String> nobuildFilesRegex;

    public Optional<Output<String>> nobuildFilesRegex() {
        return Optional.ofNullable(this.nobuildFilesRegex);
    }

    /**
     * Configures readiness health checking for instances. Unhealthy instances are not put into the backend traffic rotation.Only returned in GET requests if view=FULL is set.
     * 
     */
    @Import(name="readinessCheck")
    private @Nullable Output<ReadinessCheckArgs> readinessCheck;

    public Optional<Output<ReadinessCheckArgs>> readinessCheck() {
        return Optional.ofNullable(this.readinessCheck);
    }

    /**
     * Machine resources for this version. Only applicable in the App Engine flexible environment.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<ResourcesArgs> resources;

    public Optional<Output<ResourcesArgs>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * Desired runtime. Example: python27.
     * 
     */
    @Import(name="runtime")
    private @Nullable Output<String> runtime;

    public Optional<Output<String>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    /**
     * The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard//config/appref
     * 
     */
    @Import(name="runtimeApiVersion")
    private @Nullable Output<String> runtimeApiVersion;

    public Optional<Output<String>> runtimeApiVersion() {
        return Optional.ofNullable(this.runtimeApiVersion);
    }

    /**
     * The channel of the runtime to use. Only available for some runtimes. Defaults to the default channel.
     * 
     */
    @Import(name="runtimeChannel")
    private @Nullable Output<String> runtimeChannel;

    public Optional<Output<String>> runtimeChannel() {
        return Optional.ofNullable(this.runtimeChannel);
    }

    /**
     * The path or name of the app&#39;s main executable.
     * 
     */
    @Import(name="runtimeMainExecutablePath")
    private @Nullable Output<String> runtimeMainExecutablePath;

    public Optional<Output<String>> runtimeMainExecutablePath() {
        return Optional.ofNullable(this.runtimeMainExecutablePath);
    }

    /**
     * The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default if this field is neither provided in app.yaml file nor through CLI flag.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    public Output<String> serviceId() {
        return this.serviceId;
    }

    /**
     * Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.
     * 
     */
    @Import(name="servingStatus")
    private @Nullable Output<VersionServingStatus> servingStatus;

    public Optional<Output<VersionServingStatus>> servingStatus() {
        return Optional.ofNullable(this.servingStatus);
    }

    /**
     * Whether multiple requests can be dispatched to this version at once.
     * 
     */
    @Import(name="threadsafe")
    private @Nullable Output<Boolean> threadsafe;

    public Optional<Output<Boolean>> threadsafe() {
        return Optional.ofNullable(this.threadsafe);
    }

    /**
     * Whether to deploy this version in a container on a virtual machine.
     * 
     */
    @Import(name="vm")
    private @Nullable Output<Boolean> vm;

    public Optional<Output<Boolean>> vm() {
        return Optional.ofNullable(this.vm);
    }

    /**
     * Enables VPC connectivity for standard apps.
     * 
     */
    @Import(name="vpcAccessConnector")
    private @Nullable Output<VpcAccessConnectorArgs> vpcAccessConnector;

    public Optional<Output<VpcAccessConnectorArgs>> vpcAccessConnector() {
        return Optional.ofNullable(this.vpcAccessConnector);
    }

    private VersionArgs() {}

    private VersionArgs(VersionArgs $) {
        this.apiConfig = $.apiConfig;
        this.appEngineApis = $.appEngineApis;
        this.appId = $.appId;
        this.automaticScaling = $.automaticScaling;
        this.basicScaling = $.basicScaling;
        this.betaSettings = $.betaSettings;
        this.buildEnvVariables = $.buildEnvVariables;
        this.defaultExpiration = $.defaultExpiration;
        this.deployment = $.deployment;
        this.endpointsApiService = $.endpointsApiService;
        this.entrypoint = $.entrypoint;
        this.env = $.env;
        this.envVariables = $.envVariables;
        this.errorHandlers = $.errorHandlers;
        this.handlers = $.handlers;
        this.healthCheck = $.healthCheck;
        this.id = $.id;
        this.inboundServices = $.inboundServices;
        this.instanceClass = $.instanceClass;
        this.libraries = $.libraries;
        this.livenessCheck = $.livenessCheck;
        this.manualScaling = $.manualScaling;
        this.network = $.network;
        this.nobuildFilesRegex = $.nobuildFilesRegex;
        this.readinessCheck = $.readinessCheck;
        this.resources = $.resources;
        this.runtime = $.runtime;
        this.runtimeApiVersion = $.runtimeApiVersion;
        this.runtimeChannel = $.runtimeChannel;
        this.runtimeMainExecutablePath = $.runtimeMainExecutablePath;
        this.serviceAccount = $.serviceAccount;
        this.serviceId = $.serviceId;
        this.servingStatus = $.servingStatus;
        this.threadsafe = $.threadsafe;
        this.vm = $.vm;
        this.vpcAccessConnector = $.vpcAccessConnector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VersionArgs $;

        public Builder() {
            $ = new VersionArgs();
        }

        public Builder(VersionArgs defaults) {
            $ = new VersionArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiConfig(@Nullable Output<ApiConfigHandlerArgs> apiConfig) {
            $.apiConfig = apiConfig;
            return this;
        }

        public Builder apiConfig(ApiConfigHandlerArgs apiConfig) {
            return apiConfig(Output.of(apiConfig));
        }

        public Builder appEngineApis(@Nullable Output<Boolean> appEngineApis) {
            $.appEngineApis = appEngineApis;
            return this;
        }

        public Builder appEngineApis(Boolean appEngineApis) {
            return appEngineApis(Output.of(appEngineApis));
        }

        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        public Builder automaticScaling(@Nullable Output<AutomaticScalingArgs> automaticScaling) {
            $.automaticScaling = automaticScaling;
            return this;
        }

        public Builder automaticScaling(AutomaticScalingArgs automaticScaling) {
            return automaticScaling(Output.of(automaticScaling));
        }

        public Builder basicScaling(@Nullable Output<BasicScalingArgs> basicScaling) {
            $.basicScaling = basicScaling;
            return this;
        }

        public Builder basicScaling(BasicScalingArgs basicScaling) {
            return basicScaling(Output.of(basicScaling));
        }

        public Builder betaSettings(@Nullable Output<Map<String,String>> betaSettings) {
            $.betaSettings = betaSettings;
            return this;
        }

        public Builder betaSettings(Map<String,String> betaSettings) {
            return betaSettings(Output.of(betaSettings));
        }

        public Builder buildEnvVariables(@Nullable Output<Map<String,String>> buildEnvVariables) {
            $.buildEnvVariables = buildEnvVariables;
            return this;
        }

        public Builder buildEnvVariables(Map<String,String> buildEnvVariables) {
            return buildEnvVariables(Output.of(buildEnvVariables));
        }

        public Builder defaultExpiration(@Nullable Output<String> defaultExpiration) {
            $.defaultExpiration = defaultExpiration;
            return this;
        }

        public Builder defaultExpiration(String defaultExpiration) {
            return defaultExpiration(Output.of(defaultExpiration));
        }

        public Builder deployment(@Nullable Output<DeploymentArgs> deployment) {
            $.deployment = deployment;
            return this;
        }

        public Builder deployment(DeploymentArgs deployment) {
            return deployment(Output.of(deployment));
        }

        public Builder endpointsApiService(@Nullable Output<EndpointsApiServiceArgs> endpointsApiService) {
            $.endpointsApiService = endpointsApiService;
            return this;
        }

        public Builder endpointsApiService(EndpointsApiServiceArgs endpointsApiService) {
            return endpointsApiService(Output.of(endpointsApiService));
        }

        public Builder entrypoint(@Nullable Output<EntrypointArgs> entrypoint) {
            $.entrypoint = entrypoint;
            return this;
        }

        public Builder entrypoint(EntrypointArgs entrypoint) {
            return entrypoint(Output.of(entrypoint));
        }

        public Builder env(@Nullable Output<String> env) {
            $.env = env;
            return this;
        }

        public Builder env(String env) {
            return env(Output.of(env));
        }

        public Builder envVariables(@Nullable Output<Map<String,String>> envVariables) {
            $.envVariables = envVariables;
            return this;
        }

        public Builder envVariables(Map<String,String> envVariables) {
            return envVariables(Output.of(envVariables));
        }

        public Builder errorHandlers(@Nullable Output<List<ErrorHandlerArgs>> errorHandlers) {
            $.errorHandlers = errorHandlers;
            return this;
        }

        public Builder errorHandlers(List<ErrorHandlerArgs> errorHandlers) {
            return errorHandlers(Output.of(errorHandlers));
        }

        public Builder errorHandlers(ErrorHandlerArgs... errorHandlers) {
            return errorHandlers(List.of(errorHandlers));
        }

        public Builder handlers(@Nullable Output<List<UrlMapArgs>> handlers) {
            $.handlers = handlers;
            return this;
        }

        public Builder handlers(List<UrlMapArgs> handlers) {
            return handlers(Output.of(handlers));
        }

        public Builder handlers(UrlMapArgs... handlers) {
            return handlers(List.of(handlers));
        }

        public Builder healthCheck(@Nullable Output<HealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(HealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder inboundServices(@Nullable Output<List<VersionInboundServicesItem>> inboundServices) {
            $.inboundServices = inboundServices;
            return this;
        }

        public Builder inboundServices(List<VersionInboundServicesItem> inboundServices) {
            return inboundServices(Output.of(inboundServices));
        }

        public Builder inboundServices(VersionInboundServicesItem... inboundServices) {
            return inboundServices(List.of(inboundServices));
        }

        public Builder instanceClass(@Nullable Output<String> instanceClass) {
            $.instanceClass = instanceClass;
            return this;
        }

        public Builder instanceClass(String instanceClass) {
            return instanceClass(Output.of(instanceClass));
        }

        public Builder libraries(@Nullable Output<List<LibraryArgs>> libraries) {
            $.libraries = libraries;
            return this;
        }

        public Builder libraries(List<LibraryArgs> libraries) {
            return libraries(Output.of(libraries));
        }

        public Builder libraries(LibraryArgs... libraries) {
            return libraries(List.of(libraries));
        }

        public Builder livenessCheck(@Nullable Output<LivenessCheckArgs> livenessCheck) {
            $.livenessCheck = livenessCheck;
            return this;
        }

        public Builder livenessCheck(LivenessCheckArgs livenessCheck) {
            return livenessCheck(Output.of(livenessCheck));
        }

        public Builder manualScaling(@Nullable Output<ManualScalingArgs> manualScaling) {
            $.manualScaling = manualScaling;
            return this;
        }

        public Builder manualScaling(ManualScalingArgs manualScaling) {
            return manualScaling(Output.of(manualScaling));
        }

        public Builder network(@Nullable Output<NetworkArgs> network) {
            $.network = network;
            return this;
        }

        public Builder network(NetworkArgs network) {
            return network(Output.of(network));
        }

        public Builder nobuildFilesRegex(@Nullable Output<String> nobuildFilesRegex) {
            $.nobuildFilesRegex = nobuildFilesRegex;
            return this;
        }

        public Builder nobuildFilesRegex(String nobuildFilesRegex) {
            return nobuildFilesRegex(Output.of(nobuildFilesRegex));
        }

        public Builder readinessCheck(@Nullable Output<ReadinessCheckArgs> readinessCheck) {
            $.readinessCheck = readinessCheck;
            return this;
        }

        public Builder readinessCheck(ReadinessCheckArgs readinessCheck) {
            return readinessCheck(Output.of(readinessCheck));
        }

        public Builder resources(@Nullable Output<ResourcesArgs> resources) {
            $.resources = resources;
            return this;
        }

        public Builder resources(ResourcesArgs resources) {
            return resources(Output.of(resources));
        }

        public Builder runtime(@Nullable Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        public Builder runtimeApiVersion(@Nullable Output<String> runtimeApiVersion) {
            $.runtimeApiVersion = runtimeApiVersion;
            return this;
        }

        public Builder runtimeApiVersion(String runtimeApiVersion) {
            return runtimeApiVersion(Output.of(runtimeApiVersion));
        }

        public Builder runtimeChannel(@Nullable Output<String> runtimeChannel) {
            $.runtimeChannel = runtimeChannel;
            return this;
        }

        public Builder runtimeChannel(String runtimeChannel) {
            return runtimeChannel(Output.of(runtimeChannel));
        }

        public Builder runtimeMainExecutablePath(@Nullable Output<String> runtimeMainExecutablePath) {
            $.runtimeMainExecutablePath = runtimeMainExecutablePath;
            return this;
        }

        public Builder runtimeMainExecutablePath(String runtimeMainExecutablePath) {
            return runtimeMainExecutablePath(Output.of(runtimeMainExecutablePath));
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public Builder servingStatus(@Nullable Output<VersionServingStatus> servingStatus) {
            $.servingStatus = servingStatus;
            return this;
        }

        public Builder servingStatus(VersionServingStatus servingStatus) {
            return servingStatus(Output.of(servingStatus));
        }

        public Builder threadsafe(@Nullable Output<Boolean> threadsafe) {
            $.threadsafe = threadsafe;
            return this;
        }

        public Builder threadsafe(Boolean threadsafe) {
            return threadsafe(Output.of(threadsafe));
        }

        public Builder vm(@Nullable Output<Boolean> vm) {
            $.vm = vm;
            return this;
        }

        public Builder vm(Boolean vm) {
            return vm(Output.of(vm));
        }

        public Builder vpcAccessConnector(@Nullable Output<VpcAccessConnectorArgs> vpcAccessConnector) {
            $.vpcAccessConnector = vpcAccessConnector;
            return this;
        }

        public Builder vpcAccessConnector(VpcAccessConnectorArgs vpcAccessConnector) {
            return vpcAccessConnector(Output.of(vpcAccessConnector));
        }

        public VersionArgs build() {
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.serviceId = Objects.requireNonNull($.serviceId, "expected parameter 'serviceId' to be non-null");
            return $;
        }
    }

}
