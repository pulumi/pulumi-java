// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigeeregistry.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.apigeeregistry.v1.SpecArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * CreateApiSpec creates a specified spec.
 * 
 */
@ResourceType(type="google-native:apigeeregistry/v1:Spec")
public class Spec extends com.pulumi.resources.CustomResource {
    /**
     * Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
     * 
     */
    @Export(name="annotations", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> annotations;

    /**
     * @return Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
     * 
     */
    public Output<Map<String,String>> annotations() {
        return this.annotations;
    }
    @Export(name="apiId", type=String.class, parameters={})
    private Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }
    /**
     * Required. The ID to use for the spec, which will become the final component of the spec&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
     * 
     */
    @Export(name="apiSpecId", type=String.class, parameters={})
    private Output<String> apiSpecId;

    /**
     * @return Required. The ID to use for the spec, which will become the final component of the spec&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
     * 
     */
    public Output<String> apiSpecId() {
        return this.apiSpecId;
    }
    /**
     * Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.
     * 
     */
    @Export(name="contents", type=String.class, parameters={})
    private Output<String> contents;

    /**
     * @return Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.
     * 
     */
    public Output<String> contents() {
        return this.contents;
    }
    /**
     * Creation timestamp; when the spec resource was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Creation timestamp; when the spec resource was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * A detailed description.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return A detailed description.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * A possibly-hierarchical name used to refer to the spec from other specs.
     * 
     */
    @Export(name="filename", type=String.class, parameters={})
    private Output<String> filename;

    /**
     * @return A possibly-hierarchical name used to refer to the spec from other specs.
     * 
     */
    public Output<String> filename() {
        return this.filename;
    }
    /**
     * A SHA-256 hash of the spec&#39;s contents. If the spec is gzipped, this is the hash of the uncompressed spec.
     * 
     */
    @Export(name="hash", type=String.class, parameters={})
    private Output<String> hash;

    /**
     * @return A SHA-256 hash of the spec&#39;s contents. If the spec is gzipped, this is the hash of the uncompressed spec.
     * 
     */
    public Output<String> hash() {
        return this.hash;
    }
    /**
     * Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with &#34;apigeeregistry.googleapis.com/&#34; and cannot be changed.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    /**
     * @return Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with &#34;apigeeregistry.googleapis.com/&#34; and cannot be changed.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }
    /**
     * A style (format) descriptor for this spec that is specified as a Media Type (https://en.wikipedia.org/wiki/Media_type). Possible values include &#34;application/vnd.apigee.proto&#34;, &#34;application/vnd.apigee.openapi&#34;, and &#34;application/vnd.apigee.graphql&#34;, with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with &#34;+gzip&#34;).
     * 
     */
    @Export(name="mimeType", type=String.class, parameters={})
    private Output<String> mimeType;

    /**
     * @return A style (format) descriptor for this spec that is specified as a Media Type (https://en.wikipedia.org/wiki/Media_type). Possible values include &#34;application/vnd.apigee.proto&#34;, &#34;application/vnd.apigee.openapi&#34;, and &#34;application/vnd.apigee.graphql&#34;, with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with &#34;+gzip&#34;).
     * 
     */
    public Output<String> mimeType() {
        return this.mimeType;
    }
    /**
     * Resource name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * Revision creation timestamp; when the represented revision was created.
     * 
     */
    @Export(name="revisionCreateTime", type=String.class, parameters={})
    private Output<String> revisionCreateTime;

    /**
     * @return Revision creation timestamp; when the represented revision was created.
     * 
     */
    public Output<String> revisionCreateTime() {
        return this.revisionCreateTime;
    }
    /**
     * Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.
     * 
     */
    @Export(name="revisionId", type=String.class, parameters={})
    private Output<String> revisionId;

    /**
     * @return Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.
     * 
     */
    public Output<String> revisionId() {
        return this.revisionId;
    }
    /**
     * Last update timestamp: when the represented revision was last modified.
     * 
     */
    @Export(name="revisionUpdateTime", type=String.class, parameters={})
    private Output<String> revisionUpdateTime;

    /**
     * @return Last update timestamp: when the represented revision was last modified.
     * 
     */
    public Output<String> revisionUpdateTime() {
        return this.revisionUpdateTime;
    }
    /**
     * The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.
     * 
     */
    @Export(name="sizeBytes", type=Integer.class, parameters={})
    private Output<Integer> sizeBytes;

    /**
     * @return The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.
     * 
     */
    public Output<Integer> sizeBytes() {
        return this.sizeBytes;
    }
    /**
     * The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.
     * 
     */
    @Export(name="sourceUri", type=String.class, parameters={})
    private Output<String> sourceUri;

    /**
     * @return The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.
     * 
     */
    public Output<String> sourceUri() {
        return this.sourceUri;
    }
    @Export(name="versionId", type=String.class, parameters={})
    private Output<String> versionId;

    public Output<String> versionId() {
        return this.versionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Spec(String name) {
        this(name, SpecArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Spec(String name, SpecArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Spec(String name, SpecArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:apigeeregistry/v1:Spec", name, args == null ? SpecArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Spec(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:apigeeregistry/v1:Spec", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Spec get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Spec(name, id, options);
    }
}
