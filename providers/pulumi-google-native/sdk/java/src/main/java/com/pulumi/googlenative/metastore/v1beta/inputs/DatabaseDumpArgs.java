// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.metastore.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.metastore.v1beta.enums.DatabaseDumpDatabaseType;
import com.pulumi.googlenative.metastore.v1beta.enums.DatabaseDumpType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A specification of the location of and metadata about a database dump from a relational database management system.
 * 
 */
public final class DatabaseDumpArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseDumpArgs Empty = new DatabaseDumpArgs();

    /**
     * The type of the database.
     * 
     */
    @Import(name="databaseType")
    private @Nullable Output<DatabaseDumpDatabaseType> databaseType;

    /**
     * @return The type of the database.
     * 
     */
    public Optional<Output<DatabaseDumpDatabaseType>> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
     * 
     */
    @Import(name="gcsUri")
    private @Nullable Output<String> gcsUri;

    /**
     * @return A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
     * 
     */
    public Optional<Output<String>> gcsUri() {
        return Optional.ofNullable(this.gcsUri);
    }

    /**
     * The name of the source database.
     * 
     */
    @Import(name="sourceDatabase")
    private @Nullable Output<String> sourceDatabase;

    /**
     * @return The name of the source database.
     * 
     */
    public Optional<Output<String>> sourceDatabase() {
        return Optional.ofNullable(this.sourceDatabase);
    }

    /**
     * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
     * 
     */
    @Import(name="type")
    private @Nullable Output<DatabaseDumpType> type;

    /**
     * @return Optional. The type of the database dump. If unspecified, defaults to MYSQL.
     * 
     */
    public Optional<Output<DatabaseDumpType>> type() {
        return Optional.ofNullable(this.type);
    }

    private DatabaseDumpArgs() {}

    private DatabaseDumpArgs(DatabaseDumpArgs $) {
        this.databaseType = $.databaseType;
        this.gcsUri = $.gcsUri;
        this.sourceDatabase = $.sourceDatabase;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseDumpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseDumpArgs $;

        public Builder() {
            $ = new DatabaseDumpArgs();
        }

        public Builder(DatabaseDumpArgs defaults) {
            $ = new DatabaseDumpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseType The type of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable Output<DatabaseDumpDatabaseType> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType The type of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(DatabaseDumpDatabaseType databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param gcsUri A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
         * 
         * @return builder
         * 
         */
        public Builder gcsUri(@Nullable Output<String> gcsUri) {
            $.gcsUri = gcsUri;
            return this;
        }

        /**
         * @param gcsUri A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
         * 
         * @return builder
         * 
         */
        public Builder gcsUri(String gcsUri) {
            return gcsUri(Output.of(gcsUri));
        }

        /**
         * @param sourceDatabase The name of the source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabase(@Nullable Output<String> sourceDatabase) {
            $.sourceDatabase = sourceDatabase;
            return this;
        }

        /**
         * @param sourceDatabase The name of the source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabase(String sourceDatabase) {
            return sourceDatabase(Output.of(sourceDatabase));
        }

        /**
         * @param type Optional. The type of the database dump. If unspecified, defaults to MYSQL.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<DatabaseDumpType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Optional. The type of the database dump. If unspecified, defaults to MYSQL.
         * 
         * @return builder
         * 
         */
        public Builder type(DatabaseDumpType type) {
            return type(Output.of(type));
        }

        public DatabaseDumpArgs build() {
            return $;
        }
    }

}
