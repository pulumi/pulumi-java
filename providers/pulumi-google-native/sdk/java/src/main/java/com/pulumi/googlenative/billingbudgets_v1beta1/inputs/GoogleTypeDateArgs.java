// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.billingbudgets_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
 * 
 */
public final class GoogleTypeDateArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleTypeDateArgs Empty = new GoogleTypeDateArgs();

    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn&#39;t significant.
     * 
     */
    @Import(name="day")
    private @Nullable Output<Integer> day;

    public Optional<Output<Integer>> day() {
        return Optional.ofNullable(this.day);
    }

    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     * 
     */
    @Import(name="month")
    private @Nullable Output<Integer> month;

    public Optional<Output<Integer>> month() {
        return Optional.ofNullable(this.month);
    }

    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     * 
     */
    @Import(name="year")
    private @Nullable Output<Integer> year;

    public Optional<Output<Integer>> year() {
        return Optional.ofNullable(this.year);
    }

    private GoogleTypeDateArgs() {}

    private GoogleTypeDateArgs(GoogleTypeDateArgs $) {
        this.day = $.day;
        this.month = $.month;
        this.year = $.year;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleTypeDateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleTypeDateArgs $;

        public Builder() {
            $ = new GoogleTypeDateArgs();
        }

        public Builder(GoogleTypeDateArgs defaults) {
            $ = new GoogleTypeDateArgs(Objects.requireNonNull(defaults));
        }

        public Builder day(@Nullable Output<Integer> day) {
            $.day = day;
            return this;
        }

        public Builder day(Integer day) {
            return day(Output.of(day));
        }

        public Builder month(@Nullable Output<Integer> month) {
            $.month = month;
            return this;
        }

        public Builder month(Integer month) {
            return month(Output.of(month));
        }

        public Builder year(@Nullable Output<Integer> year) {
            $.year = year;
            return this;
        }

        public Builder year(Integer year) {
            return year(Output.of(year));
        }

        public GoogleTypeDateArgs build() {
            return $;
        }
    }

}
