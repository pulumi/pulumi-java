// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.BitbucketServerConfigResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PullRequestFilterResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PushFilterResponse;
import java.lang.String;
import java.util.Objects;


/**
 * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
 * 
 */
public final class BitbucketServerTriggerConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final BitbucketServerTriggerConfigResponse Empty = new BitbucketServerTriggerConfigResponse();

    /**
     * The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
     * 
     */
    @Import(name="bitbucketServerConfig", required=true)
    private BitbucketServerConfigResponse bitbucketServerConfig;

    /**
     * @return The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
     * 
     */
    public BitbucketServerConfigResponse bitbucketServerConfig() {
        return this.bitbucketServerConfig;
    }

    /**
     * The Bitbucket server config resource that this trigger config maps to.
     * 
     */
    @Import(name="bitbucketServerConfigResource", required=true)
    private String bitbucketServerConfigResource;

    /**
     * @return The Bitbucket server config resource that this trigger config maps to.
     * 
     */
    public String bitbucketServerConfigResource() {
        return this.bitbucketServerConfigResource;
    }

    /**
     * Key of the project that the repo is in. For example: The key for http://mybitbucket.server/projects/TEST/repos/test-repo is &#34;TEST&#34;.
     * 
     */
    @Import(name="projectKey", required=true)
    private String projectKey;

    /**
     * @return Key of the project that the repo is in. For example: The key for http://mybitbucket.server/projects/TEST/repos/test-repo is &#34;TEST&#34;.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }

    /**
     * Filter to match changes in pull requests.
     * 
     */
    @Import(name="pullRequest", required=true)
    private PullRequestFilterResponse pullRequest;

    /**
     * @return Filter to match changes in pull requests.
     * 
     */
    public PullRequestFilterResponse pullRequest() {
        return this.pullRequest;
    }

    /**
     * Filter to match changes in refs like branches, tags.
     * 
     */
    @Import(name="push", required=true)
    private PushFilterResponse push;

    /**
     * @return Filter to match changes in refs like branches, tags.
     * 
     */
    public PushFilterResponse push() {
        return this.push;
    }

    /**
     * Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is &#39;test repo&#39;, in the URL it would become &#39;test-repo&#39; as in http://mybitbucket.server/projects/TEST/repos/test-repo.
     * 
     */
    @Import(name="repoSlug", required=true)
    private String repoSlug;

    /**
     * @return Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is &#39;test repo&#39;, in the URL it would become &#39;test-repo&#39; as in http://mybitbucket.server/projects/TEST/repos/test-repo.
     * 
     */
    public String repoSlug() {
        return this.repoSlug;
    }

    private BitbucketServerTriggerConfigResponse() {}

    private BitbucketServerTriggerConfigResponse(BitbucketServerTriggerConfigResponse $) {
        this.bitbucketServerConfig = $.bitbucketServerConfig;
        this.bitbucketServerConfigResource = $.bitbucketServerConfigResource;
        this.projectKey = $.projectKey;
        this.pullRequest = $.pullRequest;
        this.push = $.push;
        this.repoSlug = $.repoSlug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BitbucketServerTriggerConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BitbucketServerTriggerConfigResponse $;

        public Builder() {
            $ = new BitbucketServerTriggerConfigResponse();
        }

        public Builder(BitbucketServerTriggerConfigResponse defaults) {
            $ = new BitbucketServerTriggerConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitbucketServerConfig The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketServerConfig(BitbucketServerConfigResponse bitbucketServerConfig) {
            $.bitbucketServerConfig = bitbucketServerConfig;
            return this;
        }

        /**
         * @param bitbucketServerConfigResource The Bitbucket server config resource that this trigger config maps to.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketServerConfigResource(String bitbucketServerConfigResource) {
            $.bitbucketServerConfigResource = bitbucketServerConfigResource;
            return this;
        }

        /**
         * @param projectKey Key of the project that the repo is in. For example: The key for http://mybitbucket.server/projects/TEST/repos/test-repo is &#34;TEST&#34;.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param pullRequest Filter to match changes in pull requests.
         * 
         * @return builder
         * 
         */
        public Builder pullRequest(PullRequestFilterResponse pullRequest) {
            $.pullRequest = pullRequest;
            return this;
        }

        /**
         * @param push Filter to match changes in refs like branches, tags.
         * 
         * @return builder
         * 
         */
        public Builder push(PushFilterResponse push) {
            $.push = push;
            return this;
        }

        /**
         * @param repoSlug Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is &#39;test repo&#39;, in the URL it would become &#39;test-repo&#39; as in http://mybitbucket.server/projects/TEST/repos/test-repo.
         * 
         * @return builder
         * 
         */
        public Builder repoSlug(String repoSlug) {
            $.repoSlug = repoSlug;
            return this;
        }

        public BitbucketServerTriggerConfigResponse build() {
            $.bitbucketServerConfig = Objects.requireNonNull($.bitbucketServerConfig, "expected parameter 'bitbucketServerConfig' to be non-null");
            $.bitbucketServerConfigResource = Objects.requireNonNull($.bitbucketServerConfigResource, "expected parameter 'bitbucketServerConfigResource' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            $.pullRequest = Objects.requireNonNull($.pullRequest, "expected parameter 'pullRequest' to be non-null");
            $.push = Objects.requireNonNull($.push, "expected parameter 'push' to be non-null");
            $.repoSlug = Objects.requireNonNull($.repoSlug, "expected parameter 'repoSlug' to be non-null");
            return $;
        }
    }

}
