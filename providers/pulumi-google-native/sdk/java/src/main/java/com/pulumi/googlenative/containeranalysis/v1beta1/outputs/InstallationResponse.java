// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1beta1.outputs.LicenseResponse;
import com.pulumi.googlenative.containeranalysis.v1beta1.outputs.LocationResponse;
import com.pulumi.googlenative.containeranalysis.v1beta1.outputs.VersionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class InstallationResponse {
    /**
     * @return The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     * 
     */
    private final String architecture;
    /**
     * @return The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     * 
     */
    private final String cpeUri;
    /**
     * @return Licenses that have been declared by the authors of the package.
     * 
     */
    private final LicenseResponse license;
    /**
     * @return All of the places within the filesystem versions of this package have been found.
     * 
     */
    private final List<LocationResponse> location;
    /**
     * @return The name of the installed package.
     * 
     */
    private final String name;
    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    private final String packageType;
    /**
     * @return The version of the package.
     * 
     */
    private final VersionResponse version;

    @CustomType.Constructor
    private InstallationResponse(
        @CustomType.Parameter("architecture") String architecture,
        @CustomType.Parameter("cpeUri") String cpeUri,
        @CustomType.Parameter("license") LicenseResponse license,
        @CustomType.Parameter("location") List<LocationResponse> location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("packageType") String packageType,
        @CustomType.Parameter("version") VersionResponse version) {
        this.architecture = architecture;
        this.cpeUri = cpeUri;
        this.license = license;
        this.location = location;
        this.name = name;
        this.packageType = packageType;
        this.version = version;
    }

    /**
     * @return The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     * 
     */
    public String cpeUri() {
        return this.cpeUri;
    }
    /**
     * @return Licenses that have been declared by the authors of the package.
     * 
     */
    public LicenseResponse license() {
        return this.license;
    }
    /**
     * @return All of the places within the filesystem versions of this package have been found.
     * 
     */
    public List<LocationResponse> location() {
        return this.location;
    }
    /**
     * @return The name of the installed package.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return The version of the package.
     * 
     */
    public VersionResponse version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstallationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String architecture;
        private String cpeUri;
        private LicenseResponse license;
        private List<LocationResponse> location;
        private String name;
        private String packageType;
        private VersionResponse version;

        public Builder() {
    	      // Empty
        }

        public Builder(InstallationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.cpeUri = defaults.cpeUri;
    	      this.license = defaults.license;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.packageType = defaults.packageType;
    	      this.version = defaults.version;
        }

        public Builder architecture(String architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }
        public Builder cpeUri(String cpeUri) {
            this.cpeUri = Objects.requireNonNull(cpeUri);
            return this;
        }
        public Builder license(LicenseResponse license) {
            this.license = Objects.requireNonNull(license);
            return this;
        }
        public Builder location(List<LocationResponse> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(LocationResponse... location) {
            return location(List.of(location));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder packageType(String packageType) {
            this.packageType = Objects.requireNonNull(packageType);
            return this;
        }
        public Builder version(VersionResponse version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public InstallationResponse build() {
            return new InstallationResponse(architecture, cpeUri, license, location, name, packageType, version);
        }
    }
}
