// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dns_v1.enums.ChangeStatus;
import com.pulumi.googlenative.dns_v1.inputs.ResourceRecordSetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChangeArgs Empty = new ChangeArgs();

    /**
     * Which ResourceRecordSets to add?
     * 
     */
    @Import(name="additions")
    private @Nullable Output<List<ResourceRecordSetArgs>> additions;

    public Optional<Output<List<ResourceRecordSetArgs>>> additions() {
        return Optional.ofNullable(this.additions);
    }

    @Import(name="clientOperationId")
    private @Nullable Output<String> clientOperationId;

    public Optional<Output<String>> clientOperationId() {
        return Optional.ofNullable(this.clientOperationId);
    }

    /**
     * Which ResourceRecordSets to remove? Must match existing data exactly.
     * 
     */
    @Import(name="deletions")
    private @Nullable Output<List<ResourceRecordSetArgs>> deletions;

    public Optional<Output<List<ResourceRecordSetArgs>>> deletions() {
        return Optional.ofNullable(this.deletions);
    }

    /**
     * Unique identifier for the resource; defined by the server (output only).
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * If the DNS queries for the zone will be served.
     * 
     */
    @Import(name="isServing")
    private @Nullable Output<Boolean> isServing;

    public Optional<Output<Boolean>> isServing() {
        return Optional.ofNullable(this.isServing);
    }

    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="managedZone", required=true)
    private Output<String> managedZone;

    public Output<String> managedZone() {
        return this.managedZone;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The time that this operation was started by the server (output only). This is in RFC3339 text format.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Status of the operation (output only). A status of &#34;done&#34; means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
     * 
     */
    @Import(name="status")
    private @Nullable Output<ChangeStatus> status;

    public Optional<Output<ChangeStatus>> status() {
        return Optional.ofNullable(this.status);
    }

    private ChangeArgs() {}

    private ChangeArgs(ChangeArgs $) {
        this.additions = $.additions;
        this.clientOperationId = $.clientOperationId;
        this.deletions = $.deletions;
        this.id = $.id;
        this.isServing = $.isServing;
        this.kind = $.kind;
        this.managedZone = $.managedZone;
        this.project = $.project;
        this.startTime = $.startTime;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChangeArgs $;

        public Builder() {
            $ = new ChangeArgs();
        }

        public Builder(ChangeArgs defaults) {
            $ = new ChangeArgs(Objects.requireNonNull(defaults));
        }

        public Builder additions(@Nullable Output<List<ResourceRecordSetArgs>> additions) {
            $.additions = additions;
            return this;
        }

        public Builder additions(List<ResourceRecordSetArgs> additions) {
            return additions(Output.of(additions));
        }

        public Builder additions(ResourceRecordSetArgs... additions) {
            return additions(List.of(additions));
        }

        public Builder clientOperationId(@Nullable Output<String> clientOperationId) {
            $.clientOperationId = clientOperationId;
            return this;
        }

        public Builder clientOperationId(String clientOperationId) {
            return clientOperationId(Output.of(clientOperationId));
        }

        public Builder deletions(@Nullable Output<List<ResourceRecordSetArgs>> deletions) {
            $.deletions = deletions;
            return this;
        }

        public Builder deletions(List<ResourceRecordSetArgs> deletions) {
            return deletions(Output.of(deletions));
        }

        public Builder deletions(ResourceRecordSetArgs... deletions) {
            return deletions(List.of(deletions));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder isServing(@Nullable Output<Boolean> isServing) {
            $.isServing = isServing;
            return this;
        }

        public Builder isServing(Boolean isServing) {
            return isServing(Output.of(isServing));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder managedZone(Output<String> managedZone) {
            $.managedZone = managedZone;
            return this;
        }

        public Builder managedZone(String managedZone) {
            return managedZone(Output.of(managedZone));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder status(@Nullable Output<ChangeStatus> status) {
            $.status = status;
            return this;
        }

        public Builder status(ChangeStatus status) {
            return status(Output.of(status));
        }

        public ChangeArgs build() {
            $.managedZone = Objects.requireNonNull($.managedZone, "expected parameter 'managedZone' to be non-null");
            return $;
        }
    }

}
