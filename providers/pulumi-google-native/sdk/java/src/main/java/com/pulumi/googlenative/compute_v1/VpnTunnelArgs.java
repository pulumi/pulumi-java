// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnTunnelArgs Empty = new VpnTunnelArgs();

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<Integer> ikeVersion;

    public Optional<Output<Integer>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported.
     * 
     */
    @Import(name="localTrafficSelector")
    private @Nullable Output<List<String>> localTrafficSelector;

    public Optional<Output<List<String>>> localTrafficSelector() {
        return Optional.ofNullable(this.localTrafficSelector);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway.
     * 
     */
    @Import(name="peerExternalGateway")
    private @Nullable Output<String> peerExternalGateway;

    public Optional<Output<String>> peerExternalGateway() {
        return Optional.ofNullable(this.peerExternalGateway);
    }

    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created.
     * 
     */
    @Import(name="peerExternalGatewayInterface")
    private @Nullable Output<Integer> peerExternalGatewayInterface;

    public Optional<Output<Integer>> peerExternalGatewayInterface() {
        return Optional.ofNullable(this.peerExternalGatewayInterface);
    }

    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway.
     * 
     */
    @Import(name="peerGcpGateway")
    private @Nullable Output<String> peerGcpGateway;

    public Optional<Output<String>> peerGcpGateway() {
        return Optional.ofNullable(this.peerGcpGateway);
    }

    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     * 
     */
    @Import(name="peerIp")
    private @Nullable Output<String> peerIp;

    public Optional<Output<String>> peerIp() {
        return Optional.ofNullable(this.peerIp);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="region", required=true)
    private Output<String> region;

    public Output<String> region() {
        return this.region;
    }

    /**
     * Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported.
     * 
     */
    @Import(name="remoteTrafficSelector")
    private @Nullable Output<List<String>> remoteTrafficSelector;

    public Optional<Output<List<String>>> remoteTrafficSelector() {
        return Optional.ofNullable(this.remoteTrafficSelector);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * URL of the router resource to be used for dynamic routing.
     * 
     */
    @Import(name="router")
    private @Nullable Output<String> router;

    public Optional<Output<String>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
     * 
     */
    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    /**
     * Hash of the shared secret.
     * 
     */
    @Import(name="sharedSecretHash")
    private @Nullable Output<String> sharedSecretHash;

    public Optional<Output<String>> sharedSecretHash() {
        return Optional.ofNullable(this.sharedSecretHash);
    }

    /**
     * URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created.
     * 
     */
    @Import(name="targetVpnGateway")
    private @Nullable Output<String> targetVpnGateway;

    public Optional<Output<String>> targetVpnGateway() {
        return Optional.ofNullable(this.targetVpnGateway);
    }

    /**
     * URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created.
     * 
     */
    @Import(name="vpnGateway")
    private @Nullable Output<String> vpnGateway;

    public Optional<Output<String>> vpnGateway() {
        return Optional.ofNullable(this.vpnGateway);
    }

    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     * 
     */
    @Import(name="vpnGatewayInterface")
    private @Nullable Output<Integer> vpnGatewayInterface;

    public Optional<Output<Integer>> vpnGatewayInterface() {
        return Optional.ofNullable(this.vpnGatewayInterface);
    }

    private VpnTunnelArgs() {}

    private VpnTunnelArgs(VpnTunnelArgs $) {
        this.description = $.description;
        this.ikeVersion = $.ikeVersion;
        this.localTrafficSelector = $.localTrafficSelector;
        this.name = $.name;
        this.peerExternalGateway = $.peerExternalGateway;
        this.peerExternalGatewayInterface = $.peerExternalGatewayInterface;
        this.peerGcpGateway = $.peerGcpGateway;
        this.peerIp = $.peerIp;
        this.project = $.project;
        this.region = $.region;
        this.remoteTrafficSelector = $.remoteTrafficSelector;
        this.requestId = $.requestId;
        this.router = $.router;
        this.sharedSecret = $.sharedSecret;
        this.sharedSecretHash = $.sharedSecretHash;
        this.targetVpnGateway = $.targetVpnGateway;
        this.vpnGateway = $.vpnGateway;
        this.vpnGatewayInterface = $.vpnGatewayInterface;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnTunnelArgs $;

        public Builder() {
            $ = new VpnTunnelArgs();
        }

        public Builder(VpnTunnelArgs defaults) {
            $ = new VpnTunnelArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder ikeVersion(@Nullable Output<Integer> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        public Builder ikeVersion(Integer ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        public Builder localTrafficSelector(@Nullable Output<List<String>> localTrafficSelector) {
            $.localTrafficSelector = localTrafficSelector;
            return this;
        }

        public Builder localTrafficSelector(List<String> localTrafficSelector) {
            return localTrafficSelector(Output.of(localTrafficSelector));
        }

        public Builder localTrafficSelector(String... localTrafficSelector) {
            return localTrafficSelector(List.of(localTrafficSelector));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder peerExternalGateway(@Nullable Output<String> peerExternalGateway) {
            $.peerExternalGateway = peerExternalGateway;
            return this;
        }

        public Builder peerExternalGateway(String peerExternalGateway) {
            return peerExternalGateway(Output.of(peerExternalGateway));
        }

        public Builder peerExternalGatewayInterface(@Nullable Output<Integer> peerExternalGatewayInterface) {
            $.peerExternalGatewayInterface = peerExternalGatewayInterface;
            return this;
        }

        public Builder peerExternalGatewayInterface(Integer peerExternalGatewayInterface) {
            return peerExternalGatewayInterface(Output.of(peerExternalGatewayInterface));
        }

        public Builder peerGcpGateway(@Nullable Output<String> peerGcpGateway) {
            $.peerGcpGateway = peerGcpGateway;
            return this;
        }

        public Builder peerGcpGateway(String peerGcpGateway) {
            return peerGcpGateway(Output.of(peerGcpGateway));
        }

        public Builder peerIp(@Nullable Output<String> peerIp) {
            $.peerIp = peerIp;
            return this;
        }

        public Builder peerIp(String peerIp) {
            return peerIp(Output.of(peerIp));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder remoteTrafficSelector(@Nullable Output<List<String>> remoteTrafficSelector) {
            $.remoteTrafficSelector = remoteTrafficSelector;
            return this;
        }

        public Builder remoteTrafficSelector(List<String> remoteTrafficSelector) {
            return remoteTrafficSelector(Output.of(remoteTrafficSelector));
        }

        public Builder remoteTrafficSelector(String... remoteTrafficSelector) {
            return remoteTrafficSelector(List.of(remoteTrafficSelector));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder router(@Nullable Output<String> router) {
            $.router = router;
            return this;
        }

        public Builder router(String router) {
            return router(Output.of(router));
        }

        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        public Builder sharedSecretHash(@Nullable Output<String> sharedSecretHash) {
            $.sharedSecretHash = sharedSecretHash;
            return this;
        }

        public Builder sharedSecretHash(String sharedSecretHash) {
            return sharedSecretHash(Output.of(sharedSecretHash));
        }

        public Builder targetVpnGateway(@Nullable Output<String> targetVpnGateway) {
            $.targetVpnGateway = targetVpnGateway;
            return this;
        }

        public Builder targetVpnGateway(String targetVpnGateway) {
            return targetVpnGateway(Output.of(targetVpnGateway));
        }

        public Builder vpnGateway(@Nullable Output<String> vpnGateway) {
            $.vpnGateway = vpnGateway;
            return this;
        }

        public Builder vpnGateway(String vpnGateway) {
            return vpnGateway(Output.of(vpnGateway));
        }

        public Builder vpnGatewayInterface(@Nullable Output<Integer> vpnGatewayInterface) {
            $.vpnGatewayInterface = vpnGatewayInterface;
            return this;
        }

        public Builder vpnGatewayInterface(Integer vpnGatewayInterface) {
            return vpnGatewayInterface(Output.of(vpnGatewayInterface));
        }

        public VpnTunnelArgs build() {
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
