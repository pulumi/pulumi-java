// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults.v1beta3.enums.StepState;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.DurationArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.MultiStepArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.OutcomeArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.StepDimensionValueEntryArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.StepLabelsEntryArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.TestExecutionStepArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.TimestampArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.ToolExecutionStepArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StepArgs extends com.pulumi.resources.ResourceArgs {

    public static final StepArgs Empty = new StepArgs();

    /**
     * The time when the step status was set to complete. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
     * 
     */
    @Import(name="completionTime")
    private @Nullable Output<TimestampArgs> completionTime;

    /**
     * @return The time when the step status was set to complete. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
     * 
     */
    public Optional<Output<TimestampArgs>> completionTime() {
        return Optional.ofNullable(this.completionTime);
    }

    /**
     * The time when the step was created. - In response: always set - In create/update request: never set
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<TimestampArgs> creationTime;

    /**
     * @return The time when the step was created. - In response: always set - In create/update request: never set
     * 
     */
    public Optional<Output<TimestampArgs>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * How much the device resource is used to perform the test. This is the device usage used for billing purpose, which is different from the run_duration, for example, infrastructure failure won&#39;t be charged for device usage. PRECONDITION_FAILED will be returned if one attempts to set a device_usage on a step which already has this field set. - In response: present if previously set. - In create request: optional - In update request: optional
     * 
     */
    @Import(name="deviceUsageDuration")
    private @Nullable Output<DurationArgs> deviceUsageDuration;

    /**
     * @return How much the device resource is used to perform the test. This is the device usage used for billing purpose, which is different from the run_duration, for example, infrastructure failure won&#39;t be charged for device usage. PRECONDITION_FAILED will be returned if one attempts to set a device_usage on a step which already has this field set. - In response: present if previously set. - In create request: optional - In update request: optional
     * 
     */
    public Optional<Output<DurationArgs>> deviceUsageDuration() {
        return Optional.ofNullable(this.deviceUsageDuration);
    }

    /**
     * If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = [&#39;attempt&#39;, &#39;device&#39;]` then a step must define values for those dimensions, eg. `dimension_value = [&#39;attempt&#39;: &#39;1&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = [&#39;attempt&#39;: &#39;&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set
     * 
     */
    @Import(name="dimensionValue")
    private @Nullable Output<List<StepDimensionValueEntryArgs>> dimensionValue;

    /**
     * @return If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = [&#39;attempt&#39;, &#39;device&#39;]` then a step must define values for those dimensions, eg. `dimension_value = [&#39;attempt&#39;: &#39;1&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = [&#39;attempt&#39;: &#39;&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set
     * 
     */
    public Optional<Output<List<StepDimensionValueEntryArgs>>> dimensionValue() {
        return Optional.ofNullable(this.dimensionValue);
    }

    @Import(name="executionId", required=true)
    private Output<String> executionId;

    public Output<String> executionId() {
        return this.executionId;
    }

    /**
     * Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set
     * 
     */
    @Import(name="hasImages")
    private @Nullable Output<Boolean> hasImages;

    /**
     * @return Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set
     * 
     */
    public Optional<Output<Boolean>> hasImages() {
        return Optional.ofNullable(this.hasImages);
    }

    @Import(name="historyId", required=true)
    private Output<String> historyId;

    public Output<String> historyId() {
        return this.historyId;
    }

    /**
     * Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don&#39;t accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key&#39;s value
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<StepLabelsEntryArgs>> labels;

    /**
     * @return Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don&#39;t accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key&#39;s value
     * 
     */
    public Optional<Output<List<StepLabelsEntryArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Details when multiple steps are run with the same configuration as a group. These details can be used identify which group this step is part of. It also identifies the groups &#39;primary step&#39; which indexes all the group members. - In response: present if previously set. - In create request: optional, set iff this step was performed more than once. - In update request: optional
     * 
     */
    @Import(name="multiStep")
    private @Nullable Output<MultiStepArgs> multiStep;

    /**
     * @return Details when multiple steps are run with the same configuration as a group. These details can be used identify which group this step is part of. It also identifies the groups &#39;primary step&#39; which indexes all the group members. - In response: present if previously set. - In create request: optional, set iff this step was performed more than once. - In update request: optional
     * 
     */
    public Optional<Output<MultiStepArgs>> multiStep() {
        return Optional.ofNullable(this.multiStep);
    }

    /**
     * A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Classification of the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
     * 
     */
    @Import(name="outcome")
    private @Nullable Output<OutcomeArgs> outcome;

    /**
     * @return Classification of the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
     * 
     */
    public Optional<Output<OutcomeArgs>> outcome() {
        return Optional.ofNullable(this.outcome);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * How long it took for this step to run. If unset, this is set to the difference between creation_time and completion_time when the step is set to the COMPLETE state. In some cases, it is appropriate to set this value separately: For instance, if a step is created, but the operation it represents is queued for a few minutes before it executes, it would be appropriate not to include the time spent queued in its run_duration. PRECONDITION_FAILED will be returned if one attempts to set a run_duration on a step which already has this field set. - In response: present if previously set; always present on COMPLETE step - In create request: optional - In update request: optional
     * 
     */
    @Import(name="runDuration")
    private @Nullable Output<DurationArgs> runDuration;

    /**
     * @return How long it took for this step to run. If unset, this is set to the difference between creation_time and completion_time when the step is set to the COMPLETE state. In some cases, it is appropriate to set this value separately: For instance, if a step is created, but the operation it represents is queued for a few minutes before it executes, it would be appropriate not to include the time spent queued in its run_duration. PRECONDITION_FAILED will be returned if one attempts to set a run_duration on a step which already has this field set. - In response: present if previously set; always present on COMPLETE step - In create request: optional - In update request: optional
     * 
     */
    public Optional<Output<DurationArgs>> runDuration() {
        return Optional.ofNullable(this.runDuration);
    }

    /**
     * The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -&gt; COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
     * 
     */
    @Import(name="state")
    private @Nullable Output<StepState> state;

    /**
     * @return The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -&gt; COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
     * 
     */
    public Optional<Output<StepState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set
     * 
     */
    @Import(name="stepId")
    private @Nullable Output<String> stepId;

    /**
     * @return A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set
     * 
     */
    public Optional<Output<String>> stepId() {
        return Optional.ofNullable(this.stepId);
    }

    /**
     * An execution of a test runner.
     * 
     */
    @Import(name="testExecutionStep")
    private @Nullable Output<TestExecutionStepArgs> testExecutionStep;

    /**
     * @return An execution of a test runner.
     * 
     */
    public Optional<Output<TestExecutionStepArgs>> testExecutionStep() {
        return Optional.ofNullable(this.testExecutionStep);
    }

    /**
     * An execution of a tool (used for steps we don&#39;t explicitly support).
     * 
     */
    @Import(name="toolExecutionStep")
    private @Nullable Output<ToolExecutionStepArgs> toolExecutionStep;

    /**
     * @return An execution of a tool (used for steps we don&#39;t explicitly support).
     * 
     */
    public Optional<Output<ToolExecutionStepArgs>> toolExecutionStep() {
        return Optional.ofNullable(this.toolExecutionStep);
    }

    private StepArgs() {}

    private StepArgs(StepArgs $) {
        this.completionTime = $.completionTime;
        this.creationTime = $.creationTime;
        this.description = $.description;
        this.deviceUsageDuration = $.deviceUsageDuration;
        this.dimensionValue = $.dimensionValue;
        this.executionId = $.executionId;
        this.hasImages = $.hasImages;
        this.historyId = $.historyId;
        this.labels = $.labels;
        this.multiStep = $.multiStep;
        this.name = $.name;
        this.outcome = $.outcome;
        this.project = $.project;
        this.requestId = $.requestId;
        this.runDuration = $.runDuration;
        this.state = $.state;
        this.stepId = $.stepId;
        this.testExecutionStep = $.testExecutionStep;
        this.toolExecutionStep = $.toolExecutionStep;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StepArgs $;

        public Builder() {
            $ = new StepArgs();
        }

        public Builder(StepArgs defaults) {
            $ = new StepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param completionTime The time when the step status was set to complete. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder completionTime(@Nullable Output<TimestampArgs> completionTime) {
            $.completionTime = completionTime;
            return this;
        }

        /**
         * @param completionTime The time when the step status was set to complete. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder completionTime(TimestampArgs completionTime) {
            return completionTime(Output.of(completionTime));
        }

        /**
         * @param creationTime The time when the step was created. - In response: always set - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<TimestampArgs> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime The time when the step was created. - In response: always set - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder creationTime(TimestampArgs creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param description A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceUsageDuration How much the device resource is used to perform the test. This is the device usage used for billing purpose, which is different from the run_duration, for example, infrastructure failure won&#39;t be charged for device usage. PRECONDITION_FAILED will be returned if one attempts to set a device_usage on a step which already has this field set. - In response: present if previously set. - In create request: optional - In update request: optional
         * 
         * @return builder
         * 
         */
        public Builder deviceUsageDuration(@Nullable Output<DurationArgs> deviceUsageDuration) {
            $.deviceUsageDuration = deviceUsageDuration;
            return this;
        }

        /**
         * @param deviceUsageDuration How much the device resource is used to perform the test. This is the device usage used for billing purpose, which is different from the run_duration, for example, infrastructure failure won&#39;t be charged for device usage. PRECONDITION_FAILED will be returned if one attempts to set a device_usage on a step which already has this field set. - In response: present if previously set. - In create request: optional - In update request: optional
         * 
         * @return builder
         * 
         */
        public Builder deviceUsageDuration(DurationArgs deviceUsageDuration) {
            return deviceUsageDuration(Output.of(deviceUsageDuration));
        }

        /**
         * @param dimensionValue If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = [&#39;attempt&#39;, &#39;device&#39;]` then a step must define values for those dimensions, eg. `dimension_value = [&#39;attempt&#39;: &#39;1&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = [&#39;attempt&#39;: &#39;&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set
         * 
         * @return builder
         * 
         */
        public Builder dimensionValue(@Nullable Output<List<StepDimensionValueEntryArgs>> dimensionValue) {
            $.dimensionValue = dimensionValue;
            return this;
        }

        /**
         * @param dimensionValue If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = [&#39;attempt&#39;, &#39;device&#39;]` then a step must define values for those dimensions, eg. `dimension_value = [&#39;attempt&#39;: &#39;1&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = [&#39;attempt&#39;: &#39;&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set
         * 
         * @return builder
         * 
         */
        public Builder dimensionValue(List<StepDimensionValueEntryArgs> dimensionValue) {
            return dimensionValue(Output.of(dimensionValue));
        }

        /**
         * @param dimensionValue If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = [&#39;attempt&#39;, &#39;device&#39;]` then a step must define values for those dimensions, eg. `dimension_value = [&#39;attempt&#39;: &#39;1&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = [&#39;attempt&#39;: &#39;&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set
         * 
         * @return builder
         * 
         */
        public Builder dimensionValue(StepDimensionValueEntryArgs... dimensionValue) {
            return dimensionValue(List.of(dimensionValue));
        }

        public Builder executionId(Output<String> executionId) {
            $.executionId = executionId;
            return this;
        }

        public Builder executionId(String executionId) {
            return executionId(Output.of(executionId));
        }

        /**
         * @param hasImages Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder hasImages(@Nullable Output<Boolean> hasImages) {
            $.hasImages = hasImages;
            return this;
        }

        /**
         * @param hasImages Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder hasImages(Boolean hasImages) {
            return hasImages(Output.of(hasImages));
        }

        public Builder historyId(Output<String> historyId) {
            $.historyId = historyId;
            return this;
        }

        public Builder historyId(String historyId) {
            return historyId(Output.of(historyId));
        }

        /**
         * @param labels Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don&#39;t accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key&#39;s value
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<StepLabelsEntryArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don&#39;t accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key&#39;s value
         * 
         * @return builder
         * 
         */
        public Builder labels(List<StepLabelsEntryArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don&#39;t accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key&#39;s value
         * 
         * @return builder
         * 
         */
        public Builder labels(StepLabelsEntryArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param multiStep Details when multiple steps are run with the same configuration as a group. These details can be used identify which group this step is part of. It also identifies the groups &#39;primary step&#39; which indexes all the group members. - In response: present if previously set. - In create request: optional, set iff this step was performed more than once. - In update request: optional
         * 
         * @return builder
         * 
         */
        public Builder multiStep(@Nullable Output<MultiStepArgs> multiStep) {
            $.multiStep = multiStep;
            return this;
        }

        /**
         * @param multiStep Details when multiple steps are run with the same configuration as a group. These details can be used identify which group this step is part of. It also identifies the groups &#39;primary step&#39; which indexes all the group members. - In response: present if previously set. - In create request: optional, set iff this step was performed more than once. - In update request: optional
         * 
         * @return builder
         * 
         */
        public Builder multiStep(MultiStepArgs multiStep) {
            return multiStep(Output.of(multiStep));
        }

        /**
         * @param name A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outcome Classification of the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
         * 
         * @return builder
         * 
         */
        public Builder outcome(@Nullable Output<OutcomeArgs> outcome) {
            $.outcome = outcome;
            return this;
        }

        /**
         * @param outcome Classification of the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
         * 
         * @return builder
         * 
         */
        public Builder outcome(OutcomeArgs outcome) {
            return outcome(Output.of(outcome));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param runDuration How long it took for this step to run. If unset, this is set to the difference between creation_time and completion_time when the step is set to the COMPLETE state. In some cases, it is appropriate to set this value separately: For instance, if a step is created, but the operation it represents is queued for a few minutes before it executes, it would be appropriate not to include the time spent queued in its run_duration. PRECONDITION_FAILED will be returned if one attempts to set a run_duration on a step which already has this field set. - In response: present if previously set; always present on COMPLETE step - In create request: optional - In update request: optional
         * 
         * @return builder
         * 
         */
        public Builder runDuration(@Nullable Output<DurationArgs> runDuration) {
            $.runDuration = runDuration;
            return this;
        }

        /**
         * @param runDuration How long it took for this step to run. If unset, this is set to the difference between creation_time and completion_time when the step is set to the COMPLETE state. In some cases, it is appropriate to set this value separately: For instance, if a step is created, but the operation it represents is queued for a few minutes before it executes, it would be appropriate not to include the time spent queued in its run_duration. PRECONDITION_FAILED will be returned if one attempts to set a run_duration on a step which already has this field set. - In response: present if previously set; always present on COMPLETE step - In create request: optional - In update request: optional
         * 
         * @return builder
         * 
         */
        public Builder runDuration(DurationArgs runDuration) {
            return runDuration(Output.of(runDuration));
        }

        /**
         * @param state The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -&gt; COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<StepState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -&gt; COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
         * 
         * @return builder
         * 
         */
        public Builder state(StepState state) {
            return state(Output.of(state));
        }

        /**
         * @param stepId A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder stepId(@Nullable Output<String> stepId) {
            $.stepId = stepId;
            return this;
        }

        /**
         * @param stepId A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set
         * 
         * @return builder
         * 
         */
        public Builder stepId(String stepId) {
            return stepId(Output.of(stepId));
        }

        /**
         * @param testExecutionStep An execution of a test runner.
         * 
         * @return builder
         * 
         */
        public Builder testExecutionStep(@Nullable Output<TestExecutionStepArgs> testExecutionStep) {
            $.testExecutionStep = testExecutionStep;
            return this;
        }

        /**
         * @param testExecutionStep An execution of a test runner.
         * 
         * @return builder
         * 
         */
        public Builder testExecutionStep(TestExecutionStepArgs testExecutionStep) {
            return testExecutionStep(Output.of(testExecutionStep));
        }

        /**
         * @param toolExecutionStep An execution of a tool (used for steps we don&#39;t explicitly support).
         * 
         * @return builder
         * 
         */
        public Builder toolExecutionStep(@Nullable Output<ToolExecutionStepArgs> toolExecutionStep) {
            $.toolExecutionStep = toolExecutionStep;
            return this;
        }

        /**
         * @param toolExecutionStep An execution of a tool (used for steps we don&#39;t explicitly support).
         * 
         * @return builder
         * 
         */
        public Builder toolExecutionStep(ToolExecutionStepArgs toolExecutionStep) {
            return toolExecutionStep(Output.of(toolExecutionStep));
        }

        public StepArgs build() {
            $.executionId = Objects.requireNonNull($.executionId, "expected parameter 'executionId' to be non-null");
            $.historyId = Objects.requireNonNull($.historyId, "expected parameter 'historyId' to be non-null");
            return $;
        }
    }

}
