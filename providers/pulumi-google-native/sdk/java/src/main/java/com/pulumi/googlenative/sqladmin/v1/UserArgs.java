// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.sqladmin.v1.enums.UserDualPasswordType;
import com.pulumi.googlenative.sqladmin.v1.enums.UserType;
import com.pulumi.googlenative.sqladmin.v1.inputs.SqlServerUserDetailsArgs;
import com.pulumi.googlenative.sqladmin.v1.inputs.UserPasswordValidationPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Dual password status for the user.
     * 
     */
    @Import(name="dualPasswordType")
    private @Nullable Output<UserDualPasswordType> dualPasswordType;

    /**
     * @return Dual password status for the user.
     * 
     */
    public Optional<Output<UserDualPasswordType>> dualPasswordType() {
        return Optional.ofNullable(this.dualPasswordType);
    }

    /**
     * This field is deprecated and will be removed from a future version of the API.
     * 
     * @deprecated
     * This field is deprecated and will be removed from a future version of the API.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return This field is deprecated and will be removed from a future version of the API.
     * 
     * @deprecated
     * This field is deprecated and will be removed from a future version of the API.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * This is always `sql#user`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return This is always `sql#user`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password for the user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * User level password validation policy.
     * 
     */
    @Import(name="passwordPolicy")
    private @Nullable Output<UserPasswordValidationPolicyArgs> passwordPolicy;

    /**
     * @return User level password validation policy.
     * 
     */
    public Optional<Output<UserPasswordValidationPolicyArgs>> passwordPolicy() {
        return Optional.ofNullable(this.passwordPolicy);
    }

    /**
     * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="sqlserverUserDetails")
    private @Nullable Output<SqlServerUserDetailsArgs> sqlserverUserDetails;

    public Optional<Output<SqlServerUserDetailsArgs>> sqlserverUserDetails() {
        return Optional.ofNullable(this.sqlserverUserDetails);
    }

    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<UserType> type;

    /**
     * @return The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
     * 
     */
    public Optional<Output<UserType>> type() {
        return Optional.ofNullable(this.type);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.dualPasswordType = $.dualPasswordType;
        this.etag = $.etag;
        this.host = $.host;
        this.instance = $.instance;
        this.kind = $.kind;
        this.name = $.name;
        this.password = $.password;
        this.passwordPolicy = $.passwordPolicy;
        this.project = $.project;
        this.sqlserverUserDetails = $.sqlserverUserDetails;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dualPasswordType Dual password status for the user.
         * 
         * @return builder
         * 
         */
        public Builder dualPasswordType(@Nullable Output<UserDualPasswordType> dualPasswordType) {
            $.dualPasswordType = dualPasswordType;
            return this;
        }

        /**
         * @param dualPasswordType Dual password status for the user.
         * 
         * @return builder
         * 
         */
        public Builder dualPasswordType(UserDualPasswordType dualPasswordType) {
            return dualPasswordType(Output.of(dualPasswordType));
        }

        /**
         * @param etag This field is deprecated and will be removed from a future version of the API.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed from a future version of the API.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag This field is deprecated and will be removed from a future version of the API.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed from a future version of the API.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed from a future version of the API. */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param host Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param instance The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param kind This is always `sql#user`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind This is always `sql#user`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password for the user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordPolicy User level password validation policy.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(@Nullable Output<UserPasswordValidationPolicyArgs> passwordPolicy) {
            $.passwordPolicy = passwordPolicy;
            return this;
        }

        /**
         * @param passwordPolicy User level password validation policy.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(UserPasswordValidationPolicyArgs passwordPolicy) {
            return passwordPolicy(Output.of(passwordPolicy));
        }

        /**
         * @param project The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder sqlserverUserDetails(@Nullable Output<SqlServerUserDetailsArgs> sqlserverUserDetails) {
            $.sqlserverUserDetails = sqlserverUserDetails;
            return this;
        }

        public Builder sqlserverUserDetails(SqlServerUserDetailsArgs sqlserverUserDetails) {
            return sqlserverUserDetails(Output.of(sqlserverUserDetails));
        }

        /**
         * @param type The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<UserType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
         * 
         * @return builder
         * 
         */
        public Builder type(UserType type) {
            return type(Output.of(type));
        }

        public UserArgs build() {
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            return $;
        }
    }

}
