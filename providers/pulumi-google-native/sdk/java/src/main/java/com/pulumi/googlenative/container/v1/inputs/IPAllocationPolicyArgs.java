// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for controlling how IPs are allocated in the cluster.
 * 
 */
public final class IPAllocationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IPAllocationPolicyArgs Empty = new IPAllocationPolicyArgs();

    /**
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
    @Import(name="clusterIpv4Cidr")
    private @Nullable Output<String> clusterIpv4Cidr;

    /**
     * @return This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
    public Optional<Output<String>> clusterIpv4Cidr() {
        return Optional.ofNullable(this.clusterIpv4Cidr);
    }

    /**
     * The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    @Import(name="clusterIpv4CidrBlock")
    private @Nullable Output<String> clusterIpv4CidrBlock;

    /**
     * @return The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public Optional<Output<String>> clusterIpv4CidrBlock() {
        return Optional.ofNullable(this.clusterIpv4CidrBlock);
    }

    /**
     * The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    @Import(name="clusterSecondaryRangeName")
    private @Nullable Output<String> clusterSecondaryRangeName;

    /**
     * @return The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    public Optional<Output<String>> clusterSecondaryRangeName() {
        return Optional.ofNullable(this.clusterSecondaryRangeName);
    }

    /**
     * Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     * 
     */
    @Import(name="createSubnetwork")
    private @Nullable Output<Boolean> createSubnetwork;

    /**
     * @return Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     * 
     */
    public Optional<Output<Boolean>> createSubnetwork() {
        return Optional.ofNullable(this.createSubnetwork);
    }

    /**
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
    @Import(name="nodeIpv4Cidr")
    private @Nullable Output<String> nodeIpv4Cidr;

    /**
     * @return This field is deprecated, use node_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
    public Optional<Output<String>> nodeIpv4Cidr() {
        return Optional.ofNullable(this.nodeIpv4Cidr);
    }

    /**
     * The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    @Import(name="nodeIpv4CidrBlock")
    private @Nullable Output<String> nodeIpv4CidrBlock;

    /**
     * @return The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public Optional<Output<String>> nodeIpv4CidrBlock() {
        return Optional.ofNullable(this.nodeIpv4CidrBlock);
    }

    /**
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
    @Import(name="servicesIpv4Cidr")
    private @Nullable Output<String> servicesIpv4Cidr;

    /**
     * @return This field is deprecated, use services_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
    public Optional<Output<String>> servicesIpv4Cidr() {
        return Optional.ofNullable(this.servicesIpv4Cidr);
    }

    /**
     * The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    @Import(name="servicesIpv4CidrBlock")
    private @Nullable Output<String> servicesIpv4CidrBlock;

    /**
     * @return The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public Optional<Output<String>> servicesIpv4CidrBlock() {
        return Optional.ofNullable(this.servicesIpv4CidrBlock);
    }

    /**
     * The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    @Import(name="servicesSecondaryRangeName")
    private @Nullable Output<String> servicesSecondaryRangeName;

    /**
     * @return The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    public Optional<Output<String>> servicesSecondaryRangeName() {
        return Optional.ofNullable(this.servicesSecondaryRangeName);
    }

    /**
     * A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     * 
     */
    @Import(name="subnetworkName")
    private @Nullable Output<String> subnetworkName;

    /**
     * @return A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     * 
     */
    public Optional<Output<String>> subnetworkName() {
        return Optional.ofNullable(this.subnetworkName);
    }

    /**
     * The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    @Import(name="tpuIpv4CidrBlock")
    private @Nullable Output<String> tpuIpv4CidrBlock;

    /**
     * @return The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public Optional<Output<String>> tpuIpv4CidrBlock() {
        return Optional.ofNullable(this.tpuIpv4CidrBlock);
    }

    /**
     * Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    @Import(name="useIpAliases")
    private @Nullable Output<Boolean> useIpAliases;

    /**
     * @return Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    public Optional<Output<Boolean>> useIpAliases() {
        return Optional.ofNullable(this.useIpAliases);
    }

    /**
     * Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    @Import(name="useRoutes")
    private @Nullable Output<Boolean> useRoutes;

    /**
     * @return Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    public Optional<Output<Boolean>> useRoutes() {
        return Optional.ofNullable(this.useRoutes);
    }

    private IPAllocationPolicyArgs() {}

    private IPAllocationPolicyArgs(IPAllocationPolicyArgs $) {
        this.clusterIpv4Cidr = $.clusterIpv4Cidr;
        this.clusterIpv4CidrBlock = $.clusterIpv4CidrBlock;
        this.clusterSecondaryRangeName = $.clusterSecondaryRangeName;
        this.createSubnetwork = $.createSubnetwork;
        this.nodeIpv4Cidr = $.nodeIpv4Cidr;
        this.nodeIpv4CidrBlock = $.nodeIpv4CidrBlock;
        this.servicesIpv4Cidr = $.servicesIpv4Cidr;
        this.servicesIpv4CidrBlock = $.servicesIpv4CidrBlock;
        this.servicesSecondaryRangeName = $.servicesSecondaryRangeName;
        this.subnetworkName = $.subnetworkName;
        this.tpuIpv4CidrBlock = $.tpuIpv4CidrBlock;
        this.useIpAliases = $.useIpAliases;
        this.useRoutes = $.useRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IPAllocationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IPAllocationPolicyArgs $;

        public Builder() {
            $ = new IPAllocationPolicyArgs();
        }

        public Builder(IPAllocationPolicyArgs defaults) {
            $ = new IPAllocationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterIpv4Cidr This field is deprecated, use cluster_ipv4_cidr_block.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, use cluster_ipv4_cidr_block.
         * 
         */
        @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
        public Builder clusterIpv4Cidr(@Nullable Output<String> clusterIpv4Cidr) {
            $.clusterIpv4Cidr = clusterIpv4Cidr;
            return this;
        }

        /**
         * @param clusterIpv4Cidr This field is deprecated, use cluster_ipv4_cidr_block.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, use cluster_ipv4_cidr_block.
         * 
         */
        @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
        public Builder clusterIpv4Cidr(String clusterIpv4Cidr) {
            return clusterIpv4Cidr(Output.of(clusterIpv4Cidr));
        }

        /**
         * @param clusterIpv4CidrBlock The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4CidrBlock(@Nullable Output<String> clusterIpv4CidrBlock) {
            $.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }

        /**
         * @param clusterIpv4CidrBlock The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            return clusterIpv4CidrBlock(Output.of(clusterIpv4CidrBlock));
        }

        /**
         * @param clusterSecondaryRangeName The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
         * 
         * @return builder
         * 
         */
        public Builder clusterSecondaryRangeName(@Nullable Output<String> clusterSecondaryRangeName) {
            $.clusterSecondaryRangeName = clusterSecondaryRangeName;
            return this;
        }

        /**
         * @param clusterSecondaryRangeName The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
         * 
         * @return builder
         * 
         */
        public Builder clusterSecondaryRangeName(String clusterSecondaryRangeName) {
            return clusterSecondaryRangeName(Output.of(clusterSecondaryRangeName));
        }

        /**
         * @param createSubnetwork Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
         * 
         * @return builder
         * 
         */
        public Builder createSubnetwork(@Nullable Output<Boolean> createSubnetwork) {
            $.createSubnetwork = createSubnetwork;
            return this;
        }

        /**
         * @param createSubnetwork Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
         * 
         * @return builder
         * 
         */
        public Builder createSubnetwork(Boolean createSubnetwork) {
            return createSubnetwork(Output.of(createSubnetwork));
        }

        /**
         * @param nodeIpv4Cidr This field is deprecated, use node_ipv4_cidr_block.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, use node_ipv4_cidr_block.
         * 
         */
        @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
        public Builder nodeIpv4Cidr(@Nullable Output<String> nodeIpv4Cidr) {
            $.nodeIpv4Cidr = nodeIpv4Cidr;
            return this;
        }

        /**
         * @param nodeIpv4Cidr This field is deprecated, use node_ipv4_cidr_block.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, use node_ipv4_cidr_block.
         * 
         */
        @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
        public Builder nodeIpv4Cidr(String nodeIpv4Cidr) {
            return nodeIpv4Cidr(Output.of(nodeIpv4Cidr));
        }

        /**
         * @param nodeIpv4CidrBlock The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder nodeIpv4CidrBlock(@Nullable Output<String> nodeIpv4CidrBlock) {
            $.nodeIpv4CidrBlock = nodeIpv4CidrBlock;
            return this;
        }

        /**
         * @param nodeIpv4CidrBlock The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder nodeIpv4CidrBlock(String nodeIpv4CidrBlock) {
            return nodeIpv4CidrBlock(Output.of(nodeIpv4CidrBlock));
        }

        /**
         * @param servicesIpv4Cidr This field is deprecated, use services_ipv4_cidr_block.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, use services_ipv4_cidr_block.
         * 
         */
        @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
        public Builder servicesIpv4Cidr(@Nullable Output<String> servicesIpv4Cidr) {
            $.servicesIpv4Cidr = servicesIpv4Cidr;
            return this;
        }

        /**
         * @param servicesIpv4Cidr This field is deprecated, use services_ipv4_cidr_block.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated, use services_ipv4_cidr_block.
         * 
         */
        @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
        public Builder servicesIpv4Cidr(String servicesIpv4Cidr) {
            return servicesIpv4Cidr(Output.of(servicesIpv4Cidr));
        }

        /**
         * @param servicesIpv4CidrBlock The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv4CidrBlock(@Nullable Output<String> servicesIpv4CidrBlock) {
            $.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            return this;
        }

        /**
         * @param servicesIpv4CidrBlock The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
            return servicesIpv4CidrBlock(Output.of(servicesIpv4CidrBlock));
        }

        /**
         * @param servicesSecondaryRangeName The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
         * 
         * @return builder
         * 
         */
        public Builder servicesSecondaryRangeName(@Nullable Output<String> servicesSecondaryRangeName) {
            $.servicesSecondaryRangeName = servicesSecondaryRangeName;
            return this;
        }

        /**
         * @param servicesSecondaryRangeName The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
         * 
         * @return builder
         * 
         */
        public Builder servicesSecondaryRangeName(String servicesSecondaryRangeName) {
            return servicesSecondaryRangeName(Output.of(servicesSecondaryRangeName));
        }

        /**
         * @param subnetworkName A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkName(@Nullable Output<String> subnetworkName) {
            $.subnetworkName = subnetworkName;
            return this;
        }

        /**
         * @param subnetworkName A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkName(String subnetworkName) {
            return subnetworkName(Output.of(subnetworkName));
        }

        /**
         * @param tpuIpv4CidrBlock The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder tpuIpv4CidrBlock(@Nullable Output<String> tpuIpv4CidrBlock) {
            $.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
            return this;
        }

        /**
         * @param tpuIpv4CidrBlock The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder tpuIpv4CidrBlock(String tpuIpv4CidrBlock) {
            return tpuIpv4CidrBlock(Output.of(tpuIpv4CidrBlock));
        }

        /**
         * @param useIpAliases Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
         * 
         * @return builder
         * 
         */
        public Builder useIpAliases(@Nullable Output<Boolean> useIpAliases) {
            $.useIpAliases = useIpAliases;
            return this;
        }

        /**
         * @param useIpAliases Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
         * 
         * @return builder
         * 
         */
        public Builder useIpAliases(Boolean useIpAliases) {
            return useIpAliases(Output.of(useIpAliases));
        }

        /**
         * @param useRoutes Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
         * 
         * @return builder
         * 
         */
        public Builder useRoutes(@Nullable Output<Boolean> useRoutes) {
            $.useRoutes = useRoutes;
            return this;
        }

        /**
         * @param useRoutes Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
         * 
         * @return builder
         * 
         */
        public Builder useRoutes(Boolean useRoutes) {
            return useRoutes(Output.of(useRoutes));
        }

        public IPAllocationPolicyArgs build() {
            return $;
        }
    }

}
