// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.secretmanager.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.secretmanager.v1.outputs.ReplicationResponse;
import com.pulumi.googlenative.secretmanager.v1.outputs.RotationResponse;
import com.pulumi.googlenative.secretmanager.v1.outputs.TopicResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSecretResult {
    /**
     * @return The time at which the Secret was created.
     * 
     */
    private final String createTime;
    /**
     * @return Optional. Etag of the currently stored Secret.
     * 
     */
    private final String etag;
    /**
     * @return Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.
     * 
     */
    private final String expireTime;
    /**
     * @return The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\p{Ll}\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return The resource name of the Secret in the format `projects/*{@literal /}secrets/*`.
     * 
     */
    private final String name;
    /**
     * @return Immutable. The replication policy of the secret data attached to the Secret. The replication policy cannot be changed after the Secret has been created.
     * 
     */
    private final ReplicationResponse replication;
    /**
     * @return Optional. Rotation policy attached to the Secret. May be excluded if there is no rotation policy.
     * 
     */
    private final RotationResponse rotation;
    /**
     * @return Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
     * 
     */
    private final List<TopicResponse> topics;
    /**
     * @return Input only. The TTL for the Secret.
     * 
     */
    private final String ttl;
    /**
     * @return Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore (&#39;_&#39;) characters. An alias string must start with a letter and cannot be the string &#39;latest&#39; or &#39;NEW&#39;. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. At launch Access by Allias will only be supported on GetSecretVersion and AccessSecretVersion.
     * 
     */
    private final Map<String,String> versionAliases;

    @CustomType.Constructor
    private GetSecretResult(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("replication") ReplicationResponse replication,
        @CustomType.Parameter("rotation") RotationResponse rotation,
        @CustomType.Parameter("topics") List<TopicResponse> topics,
        @CustomType.Parameter("ttl") String ttl,
        @CustomType.Parameter("versionAliases") Map<String,String> versionAliases) {
        this.createTime = createTime;
        this.etag = etag;
        this.expireTime = expireTime;
        this.labels = labels;
        this.name = name;
        this.replication = replication;
        this.rotation = rotation;
        this.topics = topics;
        this.ttl = ttl;
        this.versionAliases = versionAliases;
    }

    /**
     * @return The time at which the Secret was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. Etag of the currently stored Secret.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\p{Ll}\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name of the Secret in the format `projects/*{@literal /}secrets/*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Immutable. The replication policy of the secret data attached to the Secret. The replication policy cannot be changed after the Secret has been created.
     * 
     */
    public ReplicationResponse replication() {
        return this.replication;
    }
    /**
     * @return Optional. Rotation policy attached to the Secret. May be excluded if there is no rotation policy.
     * 
     */
    public RotationResponse rotation() {
        return this.rotation;
    }
    /**
     * @return Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
     * 
     */
    public List<TopicResponse> topics() {
        return this.topics;
    }
    /**
     * @return Input only. The TTL for the Secret.
     * 
     */
    public String ttl() {
        return this.ttl;
    }
    /**
     * @return Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore (&#39;_&#39;) characters. An alias string must start with a letter and cannot be the string &#39;latest&#39; or &#39;NEW&#39;. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. At launch Access by Allias will only be supported on GetSecretVersion and AccessSecretVersion.
     * 
     */
    public Map<String,String> versionAliases() {
        return this.versionAliases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String etag;
        private String expireTime;
        private Map<String,String> labels;
        private String name;
        private ReplicationResponse replication;
        private RotationResponse rotation;
        private List<TopicResponse> topics;
        private String ttl;
        private Map<String,String> versionAliases;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSecretResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.etag = defaults.etag;
    	      this.expireTime = defaults.expireTime;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.replication = defaults.replication;
    	      this.rotation = defaults.rotation;
    	      this.topics = defaults.topics;
    	      this.ttl = defaults.ttl;
    	      this.versionAliases = defaults.versionAliases;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder replication(ReplicationResponse replication) {
            this.replication = Objects.requireNonNull(replication);
            return this;
        }
        public Builder rotation(RotationResponse rotation) {
            this.rotation = Objects.requireNonNull(rotation);
            return this;
        }
        public Builder topics(List<TopicResponse> topics) {
            this.topics = Objects.requireNonNull(topics);
            return this;
        }
        public Builder topics(TopicResponse... topics) {
            return topics(List.of(topics));
        }
        public Builder ttl(String ttl) {
            this.ttl = Objects.requireNonNull(ttl);
            return this;
        }
        public Builder versionAliases(Map<String,String> versionAliases) {
            this.versionAliases = Objects.requireNonNull(versionAliases);
            return this;
        }        public GetSecretResult build() {
            return new GetSecretResult(createTime, etag, expireTime, labels, name, replication, rotation, topics, ttl, versionAliases);
        }
    }
}
