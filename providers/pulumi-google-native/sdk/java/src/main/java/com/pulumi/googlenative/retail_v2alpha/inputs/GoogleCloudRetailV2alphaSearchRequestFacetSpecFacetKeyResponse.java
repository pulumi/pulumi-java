// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.retail_v2alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.retail_v2alpha.inputs.GoogleCloudRetailV2alphaIntervalResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Specifies how a facet is computed.
 * 
 */
public final class GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse Empty = new GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse();

    /**
     * Only get facet values that contains the given strings. For example, suppose "categories" has three values "Women > Shoe", "Women > Dress" and "Men > Shoe". If set "contains" to "Shoe", the "categories" facet will give only "Women > Shoe" and "Men > Shoe". Only supported on textual fields. Maximum is 10.
     * 
     */
    @Import(name="contains", required=true)
      private final List<String> contains;

    public List<String> contains() {
        return this.contains;
    }

    /**
     * Set only if values should be bucketized into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 30.
     * 
     */
    @Import(name="intervals", required=true)
      private final List<GoogleCloudRetailV2alphaIntervalResponse> intervals;

    public List<GoogleCloudRetailV2alphaIntervalResponse> intervals() {
        return this.intervals;
    }

    /**
     * Supported textual and numerical facet keys in Product object, over which the facet values are computed. Facet key is case-sensitive. Allowed facet keys when FacetKey.query is not specified: * textual_field = * "brands" * "categories" * "genders" * "ageGroups" * "availability" * "colorFamilies" * "colors" * "sizes" * "materials" * "patterns" * "conditions" * "attributes.key" * "pickupInStore" * "shipToStore" * "sameDayDelivery" * "nextDayDelivery" * "customFulfillment1" * "customFulfillment2" * "customFulfillment3" * "customFulfillment4" * "customFulfillment5" * "inventory(place_id,attributes.key)" * numerical_field = * "price" * "discount" * "rating" * "ratingCount" * "attributes.key" * "inventory(place_id,price)" * "inventory(place_id,original_price)" * "inventory(place_id,attributes.key)"
     * 
     */
    @Import(name="key", required=true)
      private final String key;

    public String key() {
        return this.key;
    }

    /**
     * The order in which Facet.values are returned. Allowed values are: * "count desc", which means order by Facet.FacetValue.count descending. * "value desc", which means order by Facet.FacetValue.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals; FulfillmentInfo.place_ids are sorted in the order given by FacetSpec.FacetKey.restricted_values.
     * 
     */
    @Import(name="orderBy", required=true)
      private final String orderBy;

    public String orderBy() {
        return this.orderBy;
    }

    /**
     * Only get facet values that start with the given string prefix. For example, suppose "categories" has three values "Women > Shoe", "Women > Dress" and "Men > Shoe". If set "prefixes" to "Women", the "categories" facet will give only "Women > Shoe" and "Women > Dress". Only supported on textual fields. Maximum is 10.
     * 
     */
    @Import(name="prefixes", required=true)
      private final List<String> prefixes;

    public List<String> prefixes() {
        return this.prefixes;
    }

    /**
     * The query that is used to compute facet for the given facet key. When provided, it will override the default behavior of facet computation. The query syntax is the same as a filter expression. See SearchRequest.filter for detail syntax and limitations. Notice that there is no limitation on FacetKey.key when query is specified. In the response, FacetValue.value will be always "1" and FacetValue.count will be the number of results that matches the query. For example, you can set a customized facet for "shipToStore", where FacetKey.key is "customizedShipToStore", and FacetKey.query is "availability: ANY(\"IN_STOCK\") AND shipToStore: ANY(\"123\")". Then the facet will count the products that are both in stock and ship to store "123".
     * 
     */
    @Import(name="query", required=true)
      private final String query;

    public String query() {
        return this.query;
    }

    /**
     * Only get facet for the given restricted values. For example, when using "pickupInStore" as key and set restricted values to ["store123", "store456"], only facets for "store123" and "store456" are returned. Only supported on textual fields and fulfillments. Maximum is 20. Must be set for the fulfillment facet keys: * pickupInStore * shipToStore * sameDayDelivery * nextDayDelivery * customFulfillment1 * customFulfillment2 * customFulfillment3 * customFulfillment4 * customFulfillment5
     * 
     */
    @Import(name="restrictedValues", required=true)
      private final List<String> restrictedValues;

    public List<String> restrictedValues() {
        return this.restrictedValues;
    }

    public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse(
        List<String> contains,
        List<GoogleCloudRetailV2alphaIntervalResponse> intervals,
        String key,
        String orderBy,
        List<String> prefixes,
        String query,
        List<String> restrictedValues) {
        this.contains = Objects.requireNonNull(contains, "expected parameter 'contains' to be non-null");
        this.intervals = Objects.requireNonNull(intervals, "expected parameter 'intervals' to be non-null");
        this.key = Objects.requireNonNull(key, "expected parameter 'key' to be non-null");
        this.orderBy = Objects.requireNonNull(orderBy, "expected parameter 'orderBy' to be non-null");
        this.prefixes = Objects.requireNonNull(prefixes, "expected parameter 'prefixes' to be non-null");
        this.query = Objects.requireNonNull(query, "expected parameter 'query' to be non-null");
        this.restrictedValues = Objects.requireNonNull(restrictedValues, "expected parameter 'restrictedValues' to be non-null");
    }

    private GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse() {
        this.contains = List.of();
        this.intervals = List.of();
        this.key = null;
        this.orderBy = null;
        this.prefixes = List.of();
        this.query = null;
        this.restrictedValues = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> contains;
        private List<GoogleCloudRetailV2alphaIntervalResponse> intervals;
        private String key;
        private String orderBy;
        private List<String> prefixes;
        private String query;
        private List<String> restrictedValues;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contains = defaults.contains;
    	      this.intervals = defaults.intervals;
    	      this.key = defaults.key;
    	      this.orderBy = defaults.orderBy;
    	      this.prefixes = defaults.prefixes;
    	      this.query = defaults.query;
    	      this.restrictedValues = defaults.restrictedValues;
        }

        public Builder contains(List<String> contains) {
            this.contains = Objects.requireNonNull(contains);
            return this;
        }
        public Builder contains(String... contains) {
            return contains(List.of(contains));
        }
        public Builder intervals(List<GoogleCloudRetailV2alphaIntervalResponse> intervals) {
            this.intervals = Objects.requireNonNull(intervals);
            return this;
        }
        public Builder intervals(GoogleCloudRetailV2alphaIntervalResponse... intervals) {
            return intervals(List.of(intervals));
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder orderBy(String orderBy) {
            this.orderBy = Objects.requireNonNull(orderBy);
            return this;
        }
        public Builder prefixes(List<String> prefixes) {
            this.prefixes = Objects.requireNonNull(prefixes);
            return this;
        }
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        public Builder restrictedValues(List<String> restrictedValues) {
            this.restrictedValues = Objects.requireNonNull(restrictedValues);
            return this;
        }
        public Builder restrictedValues(String... restrictedValues) {
            return restrictedValues(List.of(restrictedValues));
        }        public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse build() {
            return new GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKeyResponse(contains, intervals, key, orderBy, prefixes, query, restrictedValues);
        }
    }
}
