// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudkms.v1.inputs.CertificateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
 * 
 */
public final class ServiceResolverArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceResolverArgs Empty = new ServiceResolverArgs();

    /**
     * Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    @Import(name="endpointFilter")
    private @Nullable Output<String> endpointFilter;

    /**
     * @return Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    public Optional<Output<String>> endpointFilter() {
        return Optional.ofNullable(this.endpointFilter);
    }

    /**
     * The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
     * 
     */
    @Import(name="serverCertificates", required=true)
    private Output<List<CertificateArgs>> serverCertificates;

    /**
     * @return A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
     * 
     */
    public Output<List<CertificateArgs>> serverCertificates() {
        return this.serverCertificates;
    }

    /**
     * The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
     * 
     */
    @Import(name="serviceDirectoryService", required=true)
    private Output<String> serviceDirectoryService;

    /**
     * @return The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
     * 
     */
    public Output<String> serviceDirectoryService() {
        return this.serviceDirectoryService;
    }

    private ServiceResolverArgs() {}

    private ServiceResolverArgs(ServiceResolverArgs $) {
        this.endpointFilter = $.endpointFilter;
        this.hostname = $.hostname;
        this.serverCertificates = $.serverCertificates;
        this.serviceDirectoryService = $.serviceDirectoryService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceResolverArgs $;

        public Builder() {
            $ = new ServiceResolverArgs();
        }

        public Builder(ServiceResolverArgs defaults) {
            $ = new ServiceResolverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointFilter Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
         * 
         * @return builder
         * 
         */
        public Builder endpointFilter(@Nullable Output<String> endpointFilter) {
            $.endpointFilter = endpointFilter;
            return this;
        }

        /**
         * @param endpointFilter Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
         * 
         * @return builder
         * 
         */
        public Builder endpointFilter(String endpointFilter) {
            return endpointFilter(Output.of(endpointFilter));
        }

        /**
         * @param hostname The hostname of the EKM replica used at TLS and HTTP layers.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname of the EKM replica used at TLS and HTTP layers.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param serverCertificates A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(Output<List<CertificateArgs>> serverCertificates) {
            $.serverCertificates = serverCertificates;
            return this;
        }

        /**
         * @param serverCertificates A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(List<CertificateArgs> serverCertificates) {
            return serverCertificates(Output.of(serverCertificates));
        }

        /**
         * @param serverCertificates A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(CertificateArgs... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }

        /**
         * @param serviceDirectoryService The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryService(Output<String> serviceDirectoryService) {
            $.serviceDirectoryService = serviceDirectoryService;
            return this;
        }

        /**
         * @param serviceDirectoryService The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryService(String serviceDirectoryService) {
            return serviceDirectoryService(Output.of(serviceDirectoryService));
        }

        public ServiceResolverArgs build() {
            $.hostname = Objects.requireNonNull($.hostname, "expected parameter 'hostname' to be non-null");
            $.serverCertificates = Objects.requireNonNull($.serverCertificates, "expected parameter 'serverCertificates' to be non-null");
            $.serviceDirectoryService = Objects.requireNonNull($.serviceDirectoryService, "expected parameter 'serviceDirectoryService' to be non-null");
            return $;
        }
    }

}
