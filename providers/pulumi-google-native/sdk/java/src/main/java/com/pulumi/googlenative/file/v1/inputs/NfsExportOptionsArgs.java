// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.file.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.file.v1.enums.NfsExportOptionsAccessMode;
import com.pulumi.googlenative.file.v1.enums.NfsExportOptionsSquashMode;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * NFS export options specifications.
 * 
 */
public final class NfsExportOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NfsExportOptionsArgs Empty = new NfsExportOptionsArgs();

    /**
     * Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
     * 
     */
    @Import(name="accessMode")
    private @Nullable Output<NfsExportOptionsAccessMode> accessMode;

    /**
     * @return Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
     * 
     */
    public Optional<Output<NfsExportOptionsAccessMode>> accessMode() {
        return Optional.ofNullable(this.accessMode);
    }

    /**
     * An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
     * 
     */
    @Import(name="anonGid")
    private @Nullable Output<String> anonGid;

    /**
     * @return An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
     * 
     */
    public Optional<Output<String>> anonGid() {
        return Optional.ofNullable(this.anonGid);
    }

    /**
     * An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
     * 
     */
    @Import(name="anonUid")
    private @Nullable Output<String> anonUid;

    /**
     * @return An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
     * 
     */
    public Optional<Output<String>> anonUid() {
        return Optional.ofNullable(this.anonUid);
    }

    /**
     * List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
     * 
     */
    @Import(name="ipRanges")
    private @Nullable Output<List<String>> ipRanges;

    /**
     * @return List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
     * 
     */
    public Optional<Output<List<String>>> ipRanges() {
        return Optional.ofNullable(this.ipRanges);
    }

    /**
     * Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
     * 
     */
    @Import(name="squashMode")
    private @Nullable Output<NfsExportOptionsSquashMode> squashMode;

    /**
     * @return Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
     * 
     */
    public Optional<Output<NfsExportOptionsSquashMode>> squashMode() {
        return Optional.ofNullable(this.squashMode);
    }

    private NfsExportOptionsArgs() {}

    private NfsExportOptionsArgs(NfsExportOptionsArgs $) {
        this.accessMode = $.accessMode;
        this.anonGid = $.anonGid;
        this.anonUid = $.anonUid;
        this.ipRanges = $.ipRanges;
        this.squashMode = $.squashMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NfsExportOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NfsExportOptionsArgs $;

        public Builder() {
            $ = new NfsExportOptionsArgs();
        }

        public Builder(NfsExportOptionsArgs defaults) {
            $ = new NfsExportOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(@Nullable Output<NfsExportOptionsAccessMode> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(NfsExportOptionsAccessMode accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param anonGid An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
         * 
         * @return builder
         * 
         */
        public Builder anonGid(@Nullable Output<String> anonGid) {
            $.anonGid = anonGid;
            return this;
        }

        /**
         * @param anonGid An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
         * 
         * @return builder
         * 
         */
        public Builder anonGid(String anonGid) {
            return anonGid(Output.of(anonGid));
        }

        /**
         * @param anonUid An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
         * 
         * @return builder
         * 
         */
        public Builder anonUid(@Nullable Output<String> anonUid) {
            $.anonUid = anonUid;
            return this;
        }

        /**
         * @param anonUid An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
         * 
         * @return builder
         * 
         */
        public Builder anonUid(String anonUid) {
            return anonUid(Output.of(anonUid));
        }

        /**
         * @param ipRanges List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
         * 
         * @return builder
         * 
         */
        public Builder ipRanges(@Nullable Output<List<String>> ipRanges) {
            $.ipRanges = ipRanges;
            return this;
        }

        /**
         * @param ipRanges List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
         * 
         * @return builder
         * 
         */
        public Builder ipRanges(List<String> ipRanges) {
            return ipRanges(Output.of(ipRanges));
        }

        /**
         * @param ipRanges List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
         * 
         * @return builder
         * 
         */
        public Builder ipRanges(String... ipRanges) {
            return ipRanges(List.of(ipRanges));
        }

        /**
         * @param squashMode Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
         * 
         * @return builder
         * 
         */
        public Builder squashMode(@Nullable Output<NfsExportOptionsSquashMode> squashMode) {
            $.squashMode = squashMode;
            return this;
        }

        /**
         * @param squashMode Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
         * 
         * @return builder
         * 
         */
        public Builder squashMode(NfsExportOptionsSquashMode squashMode) {
            return squashMode(Output.of(squashMode));
        }

        public NfsExportOptionsArgs build() {
            return $;
        }
    }

}
