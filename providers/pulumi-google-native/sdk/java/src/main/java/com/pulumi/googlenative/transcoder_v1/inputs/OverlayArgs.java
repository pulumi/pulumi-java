// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.transcoder_v1.inputs.AnimationArgs;
import com.pulumi.googlenative.transcoder_v1.inputs.ImageArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Overlay configuration.
 * 
 */
public final class OverlayArgs extends com.pulumi.resources.ResourceArgs {

    public static final OverlayArgs Empty = new OverlayArgs();

    /**
     * List of Animations. The list should be chronological, without any time overlap.
     * 
     */
    @Import(name="animations")
      private final @Nullable Output<List<AnimationArgs>> animations;

    public Output<List<AnimationArgs>> animations() {
        return this.animations == null ? Codegen.empty() : this.animations;
    }

    /**
     * Image overlay.
     * 
     */
    @Import(name="image")
      private final @Nullable Output<ImageArgs> image;

    public Output<ImageArgs> image() {
        return this.image == null ? Codegen.empty() : this.image;
    }

    public OverlayArgs(
        @Nullable Output<List<AnimationArgs>> animations,
        @Nullable Output<ImageArgs> image) {
        this.animations = animations;
        this.image = image;
    }

    private OverlayArgs() {
        this.animations = Codegen.empty();
        this.image = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OverlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AnimationArgs>> animations;
        private @Nullable Output<ImageArgs> image;

        public Builder() {
    	      // Empty
        }

        public Builder(OverlayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.animations = defaults.animations;
    	      this.image = defaults.image;
        }

        public Builder animations(@Nullable Output<List<AnimationArgs>> animations) {
            this.animations = animations;
            return this;
        }
        public Builder animations(@Nullable List<AnimationArgs> animations) {
            this.animations = Codegen.ofNullable(animations);
            return this;
        }
        public Builder animations(AnimationArgs... animations) {
            return animations(List.of(animations));
        }
        public Builder image(@Nullable Output<ImageArgs> image) {
            this.image = image;
            return this;
        }
        public Builder image(@Nullable ImageArgs image) {
            this.image = Codegen.ofNullable(image);
            return this;
        }        public OverlayArgs build() {
            return new OverlayArgs(animations, image);
        }
    }
}
