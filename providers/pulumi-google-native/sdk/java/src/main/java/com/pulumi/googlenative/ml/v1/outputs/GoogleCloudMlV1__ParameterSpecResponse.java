// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GoogleCloudMlV1__ParameterSpecResponse {
    /**
     * @return Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    private final List<String> categoricalValues;
    /**
     * @return Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    private final List<Double> discreteValues;
    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    private final Double maxValue;
    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    private final Double minValue;
    /**
     * @return The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
     * 
     */
    private final String parameterName;
    /**
     * @return Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    private final String scaleType;
    /**
     * @return The type of the parameter.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GoogleCloudMlV1__ParameterSpecResponse(
        @CustomType.Parameter("categoricalValues") List<String> categoricalValues,
        @CustomType.Parameter("discreteValues") List<Double> discreteValues,
        @CustomType.Parameter("maxValue") Double maxValue,
        @CustomType.Parameter("minValue") Double minValue,
        @CustomType.Parameter("parameterName") String parameterName,
        @CustomType.Parameter("scaleType") String scaleType,
        @CustomType.Parameter("type") String type) {
        this.categoricalValues = categoricalValues;
        this.discreteValues = discreteValues;
        this.maxValue = maxValue;
        this.minValue = minValue;
        this.parameterName = parameterName;
        this.scaleType = scaleType;
        this.type = type;
    }

    /**
     * @return Required if type is `CATEGORICAL`. The list of possible categories.
     * 
     */
    public List<String> categoricalValues() {
        return this.categoricalValues;
    }
    /**
     * @return Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
     * 
     */
    public List<Double> discreteValues() {
        return this.discreteValues;
    }
    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
     * 
     */
    public Double maxValue() {
        return this.maxValue;
    }
    /**
     * @return Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
     * 
     */
    public Double minValue() {
        return this.minValue;
    }
    /**
     * @return The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., &#34;learning_rate&#34;.
     * 
     */
    public String parameterName() {
        return this.parameterName;
    }
    /**
     * @return Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
     * 
     */
    public String scaleType() {
        return this.scaleType;
    }
    /**
     * @return The type of the parameter.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudMlV1__ParameterSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> categoricalValues;
        private List<Double> discreteValues;
        private Double maxValue;
        private Double minValue;
        private String parameterName;
        private String scaleType;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudMlV1__ParameterSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoricalValues = defaults.categoricalValues;
    	      this.discreteValues = defaults.discreteValues;
    	      this.maxValue = defaults.maxValue;
    	      this.minValue = defaults.minValue;
    	      this.parameterName = defaults.parameterName;
    	      this.scaleType = defaults.scaleType;
    	      this.type = defaults.type;
        }

        public Builder categoricalValues(List<String> categoricalValues) {
            this.categoricalValues = Objects.requireNonNull(categoricalValues);
            return this;
        }
        public Builder categoricalValues(String... categoricalValues) {
            return categoricalValues(List.of(categoricalValues));
        }
        public Builder discreteValues(List<Double> discreteValues) {
            this.discreteValues = Objects.requireNonNull(discreteValues);
            return this;
        }
        public Builder discreteValues(Double... discreteValues) {
            return discreteValues(List.of(discreteValues));
        }
        public Builder maxValue(Double maxValue) {
            this.maxValue = Objects.requireNonNull(maxValue);
            return this;
        }
        public Builder minValue(Double minValue) {
            this.minValue = Objects.requireNonNull(minValue);
            return this;
        }
        public Builder parameterName(String parameterName) {
            this.parameterName = Objects.requireNonNull(parameterName);
            return this;
        }
        public Builder scaleType(String scaleType) {
            this.scaleType = Objects.requireNonNull(scaleType);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GoogleCloudMlV1__ParameterSpecResponse build() {
            return new GoogleCloudMlV1__ParameterSpecResponse(categoricalValues, discreteValues, maxValue, minValue, parameterName, scaleType, type);
        }
    }
}
