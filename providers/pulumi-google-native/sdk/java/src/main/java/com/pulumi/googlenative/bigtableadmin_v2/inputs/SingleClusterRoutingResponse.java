// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigtableadmin_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
 * 
 */
public final class SingleClusterRoutingResponse extends com.pulumi.resources.InvokeArgs {

    public static final SingleClusterRoutingResponse Empty = new SingleClusterRoutingResponse();

    /**
     * Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
     * 
     */
    @Import(name="allowTransactionalWrites", required=true)
    private Boolean allowTransactionalWrites;

    /**
     * @return Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
     * 
     */
    public Boolean allowTransactionalWrites() {
        return this.allowTransactionalWrites;
    }

    /**
     * The cluster to which read/write requests should be routed.
     * 
     */
    @Import(name="clusterId", required=true)
    private String clusterId;

    /**
     * @return The cluster to which read/write requests should be routed.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }

    private SingleClusterRoutingResponse() {}

    private SingleClusterRoutingResponse(SingleClusterRoutingResponse $) {
        this.allowTransactionalWrites = $.allowTransactionalWrites;
        this.clusterId = $.clusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingleClusterRoutingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingleClusterRoutingResponse $;

        public Builder() {
            $ = new SingleClusterRoutingResponse();
        }

        public Builder(SingleClusterRoutingResponse defaults) {
            $ = new SingleClusterRoutingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowTransactionalWrites Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
         * 
         * @return builder
         * 
         */
        public Builder allowTransactionalWrites(Boolean allowTransactionalWrites) {
            $.allowTransactionalWrites = allowTransactionalWrites;
            return this;
        }

        /**
         * @param clusterId The cluster to which read/write requests should be routed.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        public SingleClusterRoutingResponse build() {
            $.allowTransactionalWrites = Objects.requireNonNull($.allowTransactionalWrites, "expected parameter 'allowTransactionalWrites' to be non-null");
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            return $;
        }
    }

}
