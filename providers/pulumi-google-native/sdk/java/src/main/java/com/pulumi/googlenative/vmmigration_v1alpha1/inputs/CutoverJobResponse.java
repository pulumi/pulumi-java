// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.ComputeEngineTargetDetailsResponse;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.StatusResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
 * 
 */
public final class CutoverJobResponse extends com.pulumi.resources.InvokeArgs {

    public static final CutoverJobResponse Empty = new CutoverJobResponse();

    /**
     * Details of the target VM in Compute Engine.
     * 
     */
    @Import(name="computeEngineTargetDetails", required=true)
    private ComputeEngineTargetDetailsResponse computeEngineTargetDetails;

    public ComputeEngineTargetDetailsResponse computeEngineTargetDetails() {
        return this.computeEngineTargetDetails;
    }

    /**
     * The time the cutover job was created (as an API call, not when it was actually created in the target).
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    public String createTime() {
        return this.createTime;
    }

    /**
     * Provides details for the errors that led to the Cutover Job&#39;s state.
     * 
     */
    @Import(name="error", required=true)
    private StatusResponse error;

    public StatusResponse error() {
        return this.error;
    }

    /**
     * The name of the cutover job.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The current progress in percentage of the cutover job.
     * 
     */
    @Import(name="progress", required=true)
    private Integer progress;

    public Integer progress() {
        return this.progress;
    }

    /**
     * The current progress in percentage of the cutover job.
     * 
     */
    @Import(name="progressPercent", required=true)
    private Integer progressPercent;

    public Integer progressPercent() {
        return this.progressPercent;
    }

    /**
     * State of the cutover job.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * A message providing possible extra details about the current state.
     * 
     */
    @Import(name="stateMessage", required=true)
    private String stateMessage;

    public String stateMessage() {
        return this.stateMessage;
    }

    /**
     * The time the state was last updated.
     * 
     */
    @Import(name="stateTime", required=true)
    private String stateTime;

    public String stateTime() {
        return this.stateTime;
    }

    private CutoverJobResponse() {}

    private CutoverJobResponse(CutoverJobResponse $) {
        this.computeEngineTargetDetails = $.computeEngineTargetDetails;
        this.createTime = $.createTime;
        this.error = $.error;
        this.name = $.name;
        this.progress = $.progress;
        this.progressPercent = $.progressPercent;
        this.state = $.state;
        this.stateMessage = $.stateMessage;
        this.stateTime = $.stateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CutoverJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CutoverJobResponse $;

        public Builder() {
            $ = new CutoverJobResponse();
        }

        public Builder(CutoverJobResponse defaults) {
            $ = new CutoverJobResponse(Objects.requireNonNull(defaults));
        }

        public Builder computeEngineTargetDetails(ComputeEngineTargetDetailsResponse computeEngineTargetDetails) {
            $.computeEngineTargetDetails = computeEngineTargetDetails;
            return this;
        }

        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder error(StatusResponse error) {
            $.error = error;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder progress(Integer progress) {
            $.progress = progress;
            return this;
        }

        public Builder progressPercent(Integer progressPercent) {
            $.progressPercent = progressPercent;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder stateMessage(String stateMessage) {
            $.stateMessage = stateMessage;
            return this;
        }

        public Builder stateTime(String stateTime) {
            $.stateTime = stateTime;
            return this;
        }

        public CutoverJobResponse build() {
            $.computeEngineTargetDetails = Objects.requireNonNull($.computeEngineTargetDetails, "expected parameter 'computeEngineTargetDetails' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.progress = Objects.requireNonNull($.progress, "expected parameter 'progress' to be non-null");
            $.progressPercent = Objects.requireNonNull($.progressPercent, "expected parameter 'progressPercent' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateMessage = Objects.requireNonNull($.stateMessage, "expected parameter 'stateMessage' to be non-null");
            $.stateTime = Objects.requireNonNull($.stateTime, "expected parameter 'stateTime' to be non-null");
            return $;
        }
    }

}
