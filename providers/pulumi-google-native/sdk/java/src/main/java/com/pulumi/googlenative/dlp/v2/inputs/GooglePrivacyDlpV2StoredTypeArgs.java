// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A reference to a StoredInfoType to use with scanning.
 * 
 */
public final class GooglePrivacyDlpV2StoredTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2StoredTypeArgs Empty = new GooglePrivacyDlpV2StoredTypeArgs();

    /**
     * Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GooglePrivacyDlpV2StoredTypeArgs() {}

    private GooglePrivacyDlpV2StoredTypeArgs(GooglePrivacyDlpV2StoredTypeArgs $) {
        this.createTime = $.createTime;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2StoredTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2StoredTypeArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2StoredTypeArgs();
        }

        public Builder(GooglePrivacyDlpV2StoredTypeArgs defaults) {
            $ = new GooglePrivacyDlpV2StoredTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param name Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GooglePrivacyDlpV2StoredTypeArgs build() {
            return $;
        }
    }

}
