// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder_v1.inputs.SegmentSettingsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Multiplexing settings for output stream.
 * 
 */
public final class MuxStreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final MuxStreamArgs Empty = new MuxStreamArgs();

    /**
     * The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt`
     * 
     */
    @Import(name="container")
    private @Nullable Output<String> container;

    public Optional<Output<String>> container() {
        return Optional.ofNullable(this.container);
    }

    /**
     * List of `ElementaryStream.key`s multiplexed in this stream.
     * 
     */
    @Import(name="elementaryStreams")
    private @Nullable Output<List<String>> elementaryStreams;

    public Optional<Output<List<String>>> elementaryStreams() {
        return Optional.ofNullable(this.elementaryStreams);
    }

    /**
     * The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `.m3u8` extension suffix.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Segment settings for `ts`, `fmp4` and `vtt`.
     * 
     */
    @Import(name="segmentSettings")
    private @Nullable Output<SegmentSettingsArgs> segmentSettings;

    public Optional<Output<SegmentSettingsArgs>> segmentSettings() {
        return Optional.ofNullable(this.segmentSettings);
    }

    private MuxStreamArgs() {}

    private MuxStreamArgs(MuxStreamArgs $) {
        this.container = $.container;
        this.elementaryStreams = $.elementaryStreams;
        this.fileName = $.fileName;
        this.key = $.key;
        this.segmentSettings = $.segmentSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MuxStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MuxStreamArgs $;

        public Builder() {
            $ = new MuxStreamArgs();
        }

        public Builder(MuxStreamArgs defaults) {
            $ = new MuxStreamArgs(Objects.requireNonNull(defaults));
        }

        public Builder container(@Nullable Output<String> container) {
            $.container = container;
            return this;
        }

        public Builder container(String container) {
            return container(Output.of(container));
        }

        public Builder elementaryStreams(@Nullable Output<List<String>> elementaryStreams) {
            $.elementaryStreams = elementaryStreams;
            return this;
        }

        public Builder elementaryStreams(List<String> elementaryStreams) {
            return elementaryStreams(Output.of(elementaryStreams));
        }

        public Builder elementaryStreams(String... elementaryStreams) {
            return elementaryStreams(List.of(elementaryStreams));
        }

        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder segmentSettings(@Nullable Output<SegmentSettingsArgs> segmentSettings) {
            $.segmentSettings = segmentSettings;
            return this;
        }

        public Builder segmentSettings(SegmentSettingsArgs segmentSettings) {
            return segmentSettings(Output.of(segmentSettings));
        }

        public MuxStreamArgs build() {
            return $;
        }
    }

}
