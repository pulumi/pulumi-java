// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: &#34;*&#34; allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: &#34;google.example.library.v1.LibraryService.CreateBook&#34; allow_unregistered_calls: true
 * 
 */
public final class UsageRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsageRuleArgs Empty = new UsageRuleArgs();

    /**
     * If true, the selected method allows unregistered calls, e.g. calls that don&#39;t identify any user or application.
     * 
     */
    @Import(name="allowUnregisteredCalls")
    private @Nullable Output<Boolean> allowUnregisteredCalls;

    /**
     * @return If true, the selected method allows unregistered calls, e.g. calls that don&#39;t identify any user or application.
     * 
     */
    public Optional<Output<Boolean>> allowUnregisteredCalls() {
        return Optional.ofNullable(this.allowUnregisteredCalls);
    }

    /**
     * Selects the methods to which this rule applies. Use &#39;*&#39; to indicate all methods in all APIs. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<String> selector;

    /**
     * @return Selects the methods to which this rule applies. Use &#39;*&#39; to indicate all methods in all APIs. Refer to selector for syntax details.
     * 
     */
    public Optional<Output<String>> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
     * 
     */
    @Import(name="skipServiceControl")
    private @Nullable Output<Boolean> skipServiceControl;

    /**
     * @return If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
     * 
     */
    public Optional<Output<Boolean>> skipServiceControl() {
        return Optional.ofNullable(this.skipServiceControl);
    }

    private UsageRuleArgs() {}

    private UsageRuleArgs(UsageRuleArgs $) {
        this.allowUnregisteredCalls = $.allowUnregisteredCalls;
        this.selector = $.selector;
        this.skipServiceControl = $.skipServiceControl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageRuleArgs $;

        public Builder() {
            $ = new UsageRuleArgs();
        }

        public Builder(UsageRuleArgs defaults) {
            $ = new UsageRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUnregisteredCalls If true, the selected method allows unregistered calls, e.g. calls that don&#39;t identify any user or application.
         * 
         * @return builder
         * 
         */
        public Builder allowUnregisteredCalls(@Nullable Output<Boolean> allowUnregisteredCalls) {
            $.allowUnregisteredCalls = allowUnregisteredCalls;
            return this;
        }

        /**
         * @param allowUnregisteredCalls If true, the selected method allows unregistered calls, e.g. calls that don&#39;t identify any user or application.
         * 
         * @return builder
         * 
         */
        public Builder allowUnregisteredCalls(Boolean allowUnregisteredCalls) {
            return allowUnregisteredCalls(Output.of(allowUnregisteredCalls));
        }

        /**
         * @param selector Selects the methods to which this rule applies. Use &#39;*&#39; to indicate all methods in all APIs. Refer to selector for syntax details.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector Selects the methods to which this rule applies. Use &#39;*&#39; to indicate all methods in all APIs. Refer to selector for syntax details.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        /**
         * @param skipServiceControl If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
         * 
         * @return builder
         * 
         */
        public Builder skipServiceControl(@Nullable Output<Boolean> skipServiceControl) {
            $.skipServiceControl = skipServiceControl;
            return this;
        }

        /**
         * @param skipServiceControl If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
         * 
         * @return builder
         * 
         */
        public Builder skipServiceControl(Boolean skipServiceControl) {
            return skipServiceControl(Output.of(skipServiceControl));
        }

        public UsageRuleArgs build() {
            return $;
        }
    }

}
