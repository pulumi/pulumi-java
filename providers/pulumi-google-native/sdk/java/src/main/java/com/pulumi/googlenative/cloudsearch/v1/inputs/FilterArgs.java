// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudsearch.v1.inputs.CompositeFilterArgs;
import com.pulumi.googlenative.cloudsearch.v1.inputs.ValueFilterArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
 * 
 */
public final class FilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterArgs Empty = new FilterArgs();

    @Import(name="compositeFilter")
    private @Nullable Output<CompositeFilterArgs> compositeFilter;

    public Optional<Output<CompositeFilterArgs>> compositeFilter() {
        return Optional.ofNullable(this.compositeFilter);
    }

    @Import(name="valueFilter")
    private @Nullable Output<ValueFilterArgs> valueFilter;

    public Optional<Output<ValueFilterArgs>> valueFilter() {
        return Optional.ofNullable(this.valueFilter);
    }

    private FilterArgs() {}

    private FilterArgs(FilterArgs $) {
        this.compositeFilter = $.compositeFilter;
        this.valueFilter = $.valueFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterArgs $;

        public Builder() {
            $ = new FilterArgs();
        }

        public Builder(FilterArgs defaults) {
            $ = new FilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder compositeFilter(@Nullable Output<CompositeFilterArgs> compositeFilter) {
            $.compositeFilter = compositeFilter;
            return this;
        }

        public Builder compositeFilter(CompositeFilterArgs compositeFilter) {
            return compositeFilter(Output.of(compositeFilter));
        }

        public Builder valueFilter(@Nullable Output<ValueFilterArgs> valueFilter) {
            $.valueFilter = valueFilter;
            return this;
        }

        public Builder valueFilter(ValueFilterArgs valueFilter) {
            return valueFilter(Output.of(valueFilter));
        }

        public FilterArgs build() {
            return $;
        }
    }

}
