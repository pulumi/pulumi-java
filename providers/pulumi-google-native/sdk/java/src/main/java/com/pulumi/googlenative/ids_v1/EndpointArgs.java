// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ids_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.ids_v1.enums.EndpointSeverity;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * User-provided description of the endpoint
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="endpointId", required=true)
    private Output<String> endpointId;

    public Output<String> endpointId() {
        return this.endpointId;
    }

    /**
     * The labels of the endpoint.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The fully qualified URL of the network to which the IDS Endpoint is attached.
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    public Output<String> network() {
        return this.network;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Lowest threat severity that this endpoint will alert on.
     * 
     */
    @Import(name="severity", required=true)
    private Output<EndpointSeverity> severity;

    public Output<EndpointSeverity> severity() {
        return this.severity;
    }

    /**
     * Whether the endpoint should report traffic logs in addition to threat logs.
     * 
     */
    @Import(name="trafficLogs")
    private @Nullable Output<Boolean> trafficLogs;

    public Optional<Output<Boolean>> trafficLogs() {
        return Optional.ofNullable(this.trafficLogs);
    }

    private EndpointArgs() {}

    private EndpointArgs(EndpointArgs $) {
        this.description = $.description;
        this.endpointId = $.endpointId;
        this.labels = $.labels;
        this.location = $.location;
        this.network = $.network;
        this.project = $.project;
        this.requestId = $.requestId;
        this.severity = $.severity;
        this.trafficLogs = $.trafficLogs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointArgs $;

        public Builder() {
            $ = new EndpointArgs();
        }

        public Builder(EndpointArgs defaults) {
            $ = new EndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder endpointId(Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        public Builder network(String network) {
            return network(Output.of(network));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder severity(Output<EndpointSeverity> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(EndpointSeverity severity) {
            return severity(Output.of(severity));
        }

        public Builder trafficLogs(@Nullable Output<Boolean> trafficLogs) {
            $.trafficLogs = trafficLogs;
            return this;
        }

        public Builder trafficLogs(Boolean trafficLogs) {
            return trafficLogs(Output.of(trafficLogs));
        }

        public EndpointArgs build() {
            $.endpointId = Objects.requireNonNull($.endpointId, "expected parameter 'endpointId' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            return $;
        }
    }

}
