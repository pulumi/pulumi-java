// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp.v2.inputs.GooglePrivacyDlpV2CryptoKeyArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
 * 
 */
public final class GooglePrivacyDlpV2CryptoHashConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2CryptoHashConfigArgs Empty = new GooglePrivacyDlpV2CryptoHashConfigArgs();

    /**
     * The key used by the hash function.
     * 
     */
    @Import(name="cryptoKey")
    private @Nullable Output<GooglePrivacyDlpV2CryptoKeyArgs> cryptoKey;

    /**
     * @return The key used by the hash function.
     * 
     */
    public Optional<Output<GooglePrivacyDlpV2CryptoKeyArgs>> cryptoKey() {
        return Optional.ofNullable(this.cryptoKey);
    }

    private GooglePrivacyDlpV2CryptoHashConfigArgs() {}

    private GooglePrivacyDlpV2CryptoHashConfigArgs(GooglePrivacyDlpV2CryptoHashConfigArgs $) {
        this.cryptoKey = $.cryptoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CryptoHashConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CryptoHashConfigArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CryptoHashConfigArgs();
        }

        public Builder(GooglePrivacyDlpV2CryptoHashConfigArgs defaults) {
            $ = new GooglePrivacyDlpV2CryptoHashConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoKey The key used by the hash function.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(@Nullable Output<GooglePrivacyDlpV2CryptoKeyArgs> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey The key used by the hash function.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(GooglePrivacyDlpV2CryptoKeyArgs cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        public GooglePrivacyDlpV2CryptoHashConfigArgs build() {
            return $;
        }
    }

}
