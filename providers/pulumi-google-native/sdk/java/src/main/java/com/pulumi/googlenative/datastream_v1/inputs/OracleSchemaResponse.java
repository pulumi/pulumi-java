// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream_v1.inputs.OracleTableResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Oracle schema.
 * 
 */
public final class OracleSchemaResponse extends com.pulumi.resources.InvokeArgs {

    public static final OracleSchemaResponse Empty = new OracleSchemaResponse();

    /**
     * Tables in the schema.
     * 
     */
    @Import(name="oracleTables", required=true)
      private final List<OracleTableResponse> oracleTables;

    public List<OracleTableResponse> oracleTables() {
        return this.oracleTables;
    }

    /**
     * Schema name.
     * 
     */
    @Import(name="schema", required=true)
      private final String schema;

    public String schema() {
        return this.schema;
    }

    public OracleSchemaResponse(
        List<OracleTableResponse> oracleTables,
        String schema) {
        this.oracleTables = Objects.requireNonNull(oracleTables, "expected parameter 'oracleTables' to be non-null");
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
    }

    private OracleSchemaResponse() {
        this.oracleTables = List.of();
        this.schema = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OracleSchemaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<OracleTableResponse> oracleTables;
        private String schema;

        public Builder() {
    	      // Empty
        }

        public Builder(OracleSchemaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.oracleTables = defaults.oracleTables;
    	      this.schema = defaults.schema;
        }

        public Builder oracleTables(List<OracleTableResponse> oracleTables) {
            this.oracleTables = Objects.requireNonNull(oracleTables);
            return this;
        }
        public Builder oracleTables(OracleTableResponse... oracleTables) {
            return oracleTables(List.of(oracleTables));
        }
        public Builder schema(String schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }        public OracleSchemaResponse build() {
            return new OracleSchemaResponse(oracleTables, schema);
        }
    }
}
