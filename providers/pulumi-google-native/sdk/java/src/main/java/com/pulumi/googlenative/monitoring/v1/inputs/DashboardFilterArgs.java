// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.enums.DashboardFilterFilterType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A filter to reduce the amount of data charted in relevant widgets.
 * 
 */
public final class DashboardFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardFilterArgs Empty = new DashboardFilterArgs();

    /**
     * The specified filter type
     * 
     */
    @Import(name="filterType")
    private @Nullable Output<DashboardFilterFilterType> filterType;

    /**
     * @return The specified filter type
     * 
     */
    public Optional<Output<DashboardFilterFilterType>> filterType() {
        return Optional.ofNullable(this.filterType);
    }

    /**
     * The key for the label
     * 
     */
    @Import(name="labelKey", required=true)
    private Output<String> labelKey;

    /**
     * @return The key for the label
     * 
     */
    public Output<String> labelKey() {
        return this.labelKey;
    }

    /**
     * A variable-length string value.
     * 
     */
    @Import(name="stringValue")
    private @Nullable Output<String> stringValue;

    /**
     * @return A variable-length string value.
     * 
     */
    public Optional<Output<String>> stringValue() {
        return Optional.ofNullable(this.stringValue);
    }

    /**
     * The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.
     * 
     */
    @Import(name="templateVariable")
    private @Nullable Output<String> templateVariable;

    /**
     * @return The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.
     * 
     */
    public Optional<Output<String>> templateVariable() {
        return Optional.ofNullable(this.templateVariable);
    }

    private DashboardFilterArgs() {}

    private DashboardFilterArgs(DashboardFilterArgs $) {
        this.filterType = $.filterType;
        this.labelKey = $.labelKey;
        this.stringValue = $.stringValue;
        this.templateVariable = $.templateVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardFilterArgs $;

        public Builder() {
            $ = new DashboardFilterArgs();
        }

        public Builder(DashboardFilterArgs defaults) {
            $ = new DashboardFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterType The specified filter type
         * 
         * @return builder
         * 
         */
        public Builder filterType(@Nullable Output<DashboardFilterFilterType> filterType) {
            $.filterType = filterType;
            return this;
        }

        /**
         * @param filterType The specified filter type
         * 
         * @return builder
         * 
         */
        public Builder filterType(DashboardFilterFilterType filterType) {
            return filterType(Output.of(filterType));
        }

        /**
         * @param labelKey The key for the label
         * 
         * @return builder
         * 
         */
        public Builder labelKey(Output<String> labelKey) {
            $.labelKey = labelKey;
            return this;
        }

        /**
         * @param labelKey The key for the label
         * 
         * @return builder
         * 
         */
        public Builder labelKey(String labelKey) {
            return labelKey(Output.of(labelKey));
        }

        /**
         * @param stringValue A variable-length string value.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(@Nullable Output<String> stringValue) {
            $.stringValue = stringValue;
            return this;
        }

        /**
         * @param stringValue A variable-length string value.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(String stringValue) {
            return stringValue(Output.of(stringValue));
        }

        /**
         * @param templateVariable The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariable(@Nullable Output<String> templateVariable) {
            $.templateVariable = templateVariable;
            return this;
        }

        /**
         * @param templateVariable The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariable(String templateVariable) {
            return templateVariable(Output.of(templateVariable));
        }

        public DashboardFilterArgs build() {
            $.labelKey = Objects.requireNonNull($.labelKey, "expected parameter 'labelKey' to be non-null");
            return $;
        }
    }

}
