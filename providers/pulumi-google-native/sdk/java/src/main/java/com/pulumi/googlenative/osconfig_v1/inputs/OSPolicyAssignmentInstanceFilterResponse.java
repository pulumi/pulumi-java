// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig_v1.inputs.OSPolicyAssignmentInstanceFilterInventoryResponse;
import com.pulumi.googlenative.osconfig_v1.inputs.OSPolicyAssignmentLabelSetResponse;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;


/**
 * Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
 * 
 */
public final class OSPolicyAssignmentInstanceFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final OSPolicyAssignmentInstanceFilterResponse Empty = new OSPolicyAssignmentInstanceFilterResponse();

    /**
     * Target all VMs in the project. If true, no other criteria is permitted.
     * 
     */
    @Import(name="all", required=true)
    private Boolean all;

    public Boolean all() {
        return this.all;
    }

    /**
     * List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
     * 
     */
    @Import(name="exclusionLabels", required=true)
    private List<OSPolicyAssignmentLabelSetResponse> exclusionLabels;

    public List<OSPolicyAssignmentLabelSetResponse> exclusionLabels() {
        return this.exclusionLabels;
    }

    /**
     * List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
     * 
     */
    @Import(name="inclusionLabels", required=true)
    private List<OSPolicyAssignmentLabelSetResponse> inclusionLabels;

    public List<OSPolicyAssignmentLabelSetResponse> inclusionLabels() {
        return this.inclusionLabels;
    }

    /**
     * List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
     * 
     */
    @Import(name="inventories", required=true)
    private List<OSPolicyAssignmentInstanceFilterInventoryResponse> inventories;

    public List<OSPolicyAssignmentInstanceFilterInventoryResponse> inventories() {
        return this.inventories;
    }

    private OSPolicyAssignmentInstanceFilterResponse() {}

    private OSPolicyAssignmentInstanceFilterResponse(OSPolicyAssignmentInstanceFilterResponse $) {
        this.all = $.all;
        this.exclusionLabels = $.exclusionLabels;
        this.inclusionLabels = $.inclusionLabels;
        this.inventories = $.inventories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OSPolicyAssignmentInstanceFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OSPolicyAssignmentInstanceFilterResponse $;

        public Builder() {
            $ = new OSPolicyAssignmentInstanceFilterResponse();
        }

        public Builder(OSPolicyAssignmentInstanceFilterResponse defaults) {
            $ = new OSPolicyAssignmentInstanceFilterResponse(Objects.requireNonNull(defaults));
        }

        public Builder all(Boolean all) {
            $.all = all;
            return this;
        }

        public Builder exclusionLabels(List<OSPolicyAssignmentLabelSetResponse> exclusionLabels) {
            $.exclusionLabels = exclusionLabels;
            return this;
        }

        public Builder exclusionLabels(OSPolicyAssignmentLabelSetResponse... exclusionLabels) {
            return exclusionLabels(List.of(exclusionLabels));
        }

        public Builder inclusionLabels(List<OSPolicyAssignmentLabelSetResponse> inclusionLabels) {
            $.inclusionLabels = inclusionLabels;
            return this;
        }

        public Builder inclusionLabels(OSPolicyAssignmentLabelSetResponse... inclusionLabels) {
            return inclusionLabels(List.of(inclusionLabels));
        }

        public Builder inventories(List<OSPolicyAssignmentInstanceFilterInventoryResponse> inventories) {
            $.inventories = inventories;
            return this;
        }

        public Builder inventories(OSPolicyAssignmentInstanceFilterInventoryResponse... inventories) {
            return inventories(List.of(inventories));
        }

        public OSPolicyAssignmentInstanceFilterResponse build() {
            $.all = Objects.requireNonNull($.all, "expected parameter 'all' to be non-null");
            $.exclusionLabels = Objects.requireNonNull($.exclusionLabels, "expected parameter 'exclusionLabels' to be non-null");
            $.inclusionLabels = Objects.requireNonNull($.inclusionLabels, "expected parameter 'inclusionLabels' to be non-null");
            $.inventories = Objects.requireNonNull($.inventories, "expected parameter 'inventories' to be non-null");
            return $;
        }
    }

}
