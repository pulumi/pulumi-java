// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
 * 
 */
public final class ExternalProtectionLevelOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExternalProtectionLevelOptionsResponse Empty = new ExternalProtectionLevelOptionsResponse();

    /**
     * The path to the external key material on the EKM when using EkmConnection e.g., &#34;v0/my/key&#34;. Set this field instead of external_key_uri when using an EkmConnection.
     * 
     */
    @Import(name="ekmConnectionKeyPath", required=true)
    private String ekmConnectionKeyPath;

    /**
     * @return The path to the external key material on the EKM when using EkmConnection e.g., &#34;v0/my/key&#34;. Set this field instead of external_key_uri when using an EkmConnection.
     * 
     */
    public String ekmConnectionKeyPath() {
        return this.ekmConnectionKeyPath;
    }

    /**
     * The URI for an external resource that this CryptoKeyVersion represents.
     * 
     */
    @Import(name="externalKeyUri", required=true)
    private String externalKeyUri;

    /**
     * @return The URI for an external resource that this CryptoKeyVersion represents.
     * 
     */
    public String externalKeyUri() {
        return this.externalKeyUri;
    }

    private ExternalProtectionLevelOptionsResponse() {}

    private ExternalProtectionLevelOptionsResponse(ExternalProtectionLevelOptionsResponse $) {
        this.ekmConnectionKeyPath = $.ekmConnectionKeyPath;
        this.externalKeyUri = $.externalKeyUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalProtectionLevelOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalProtectionLevelOptionsResponse $;

        public Builder() {
            $ = new ExternalProtectionLevelOptionsResponse();
        }

        public Builder(ExternalProtectionLevelOptionsResponse defaults) {
            $ = new ExternalProtectionLevelOptionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param ekmConnectionKeyPath The path to the external key material on the EKM when using EkmConnection e.g., &#34;v0/my/key&#34;. Set this field instead of external_key_uri when using an EkmConnection.
         * 
         * @return builder
         * 
         */
        public Builder ekmConnectionKeyPath(String ekmConnectionKeyPath) {
            $.ekmConnectionKeyPath = ekmConnectionKeyPath;
            return this;
        }

        /**
         * @param externalKeyUri The URI for an external resource that this CryptoKeyVersion represents.
         * 
         * @return builder
         * 
         */
        public Builder externalKeyUri(String externalKeyUri) {
            $.externalKeyUri = externalKeyUri;
            return this;
        }

        public ExternalProtectionLevelOptionsResponse build() {
            $.ekmConnectionKeyPath = Objects.requireNonNull($.ekmConnectionKeyPath, "expected parameter 'ekmConnectionKeyPath' to be non-null");
            $.externalKeyUri = Objects.requireNonNull($.externalKeyUri, "expected parameter 'externalKeyUri' to be non-null");
            return $;
        }
    }

}
