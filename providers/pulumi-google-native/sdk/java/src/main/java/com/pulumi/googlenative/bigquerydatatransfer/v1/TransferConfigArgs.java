// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquerydatatransfer.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquerydatatransfer.v1.inputs.EmailPreferencesArgs;
import com.pulumi.googlenative.bigquerydatatransfer.v1.inputs.ScheduleOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferConfigArgs Empty = new TransferConfigArgs();

    /**
     * Optional OAuth2 authorization code to use with this transfer configuration. This is required only if `transferConfig.dataSourceId` is &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain authorization_code, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=authorization_code * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
     * 
     */
    @Import(name="authorizationCode")
    private @Nullable Output<String> authorizationCode;

    /**
     * @return Optional OAuth2 authorization code to use with this transfer configuration. This is required only if `transferConfig.dataSourceId` is &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain authorization_code, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=authorization_code * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
     * 
     */
    public Optional<Output<String>> authorizationCode() {
        return Optional.ofNullable(this.authorizationCode);
    }

    /**
     * The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
     * 
     */
    @Import(name="dataRefreshWindowDays")
    private @Nullable Output<Integer> dataRefreshWindowDays;

    /**
     * @return The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
     * 
     */
    public Optional<Output<Integer>> dataRefreshWindowDays() {
        return Optional.ofNullable(this.dataRefreshWindowDays);
    }

    /**
     * Data source id. Cannot be changed once data transfer is created.
     * 
     */
    @Import(name="dataSourceId")
    private @Nullable Output<String> dataSourceId;

    /**
     * @return Data source id. Cannot be changed once data transfer is created.
     * 
     */
    public Optional<Output<String>> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    /**
     * The BigQuery target dataset id.
     * 
     */
    @Import(name="destinationDatasetId")
    private @Nullable Output<String> destinationDatasetId;

    /**
     * @return The BigQuery target dataset id.
     * 
     */
    public Optional<Output<String>> destinationDatasetId() {
        return Optional.ofNullable(this.destinationDatasetId);
    }

    /**
     * Is this config disabled. When set to true, no runs are scheduled for a given transfer.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Is this config disabled. When set to true, no runs are scheduled for a given transfer.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * User specified display name for the data transfer.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User specified display name for the data transfer.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
     * 
     */
    @Import(name="emailPreferences")
    private @Nullable Output<EmailPreferencesArgs> emailPreferences;

    /**
     * @return Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
     * 
     */
    public Optional<Output<EmailPreferencesArgs>> emailPreferences() {
        return Optional.ofNullable(this.emailPreferences);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
     * 
     */
    @Import(name="notificationPubsubTopic")
    private @Nullable Output<String> notificationPubsubTopic;

    /**
     * @return Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
     * 
     */
    public Optional<Output<String>> notificationPubsubTopic() {
        return Optional.ofNullable(this.notificationPubsubTopic);
    }

    /**
     * Parameters specific to each data source. For more information see the bq tab in the &#39;Setting up a data transfer&#39; section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
     * 
     */
    @Import(name="params")
    private @Nullable Output<Map<String,String>> params;

    /**
     * @return Parameters specific to each data source. For more information see the bq tab in the &#39;Setting up a data transfer&#39; section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
     * 
     */
    public Optional<Output<Map<String,String>>> params() {
        return Optional.ofNullable(this.params);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Options customizing the data transfer schedule.
     * 
     */
    @Import(name="scheduleOptions")
    private @Nullable Output<ScheduleOptionsArgs> scheduleOptions;

    /**
     * @return Options customizing the data transfer schedule.
     * 
     */
    public Optional<Output<ScheduleOptionsArgs>> scheduleOptions() {
        return Optional.ofNullable(this.scheduleOptions);
    }

    /**
     * Optional service account name. If this field is set, the transfer config will be created with this service account&#39;s credentials. It requires that the requesting user calling this API has permissions to act as this service account. Note that not all data sources support service account credentials when creating a transfer config. For the latest list of data sources, read about [using service accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
     * 
     */
    @Import(name="serviceAccountName")
    private @Nullable Output<String> serviceAccountName;

    /**
     * @return Optional service account name. If this field is set, the transfer config will be created with this service account&#39;s credentials. It requires that the requesting user calling this API has permissions to act as this service account. Note that not all data sources support service account credentials when creating a transfer config. For the latest list of data sources, read about [using service accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
     * 
     */
    public Optional<Output<String>> serviceAccountName() {
        return Optional.ofNullable(this.serviceAccountName);
    }

    /**
     * Deprecated. Unique ID of the user on whose behalf transfer is done.
     * 
     * @deprecated
     * Deprecated. Unique ID of the user on whose behalf transfer is done.
     * 
     */
    @Deprecated /* Deprecated. Unique ID of the user on whose behalf transfer is done. */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return Deprecated. Unique ID of the user on whose behalf transfer is done.
     * 
     * @deprecated
     * Deprecated. Unique ID of the user on whose behalf transfer is done.
     * 
     */
    @Deprecated /* Deprecated. Unique ID of the user on whose behalf transfer is done. */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * Optional version info. This is required only if `transferConfig.dataSourceId` is not &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain version info, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=version_info * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
     * 
     */
    @Import(name="versionInfo")
    private @Nullable Output<String> versionInfo;

    /**
     * @return Optional version info. This is required only if `transferConfig.dataSourceId` is not &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain version info, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=version_info * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
     * 
     */
    public Optional<Output<String>> versionInfo() {
        return Optional.ofNullable(this.versionInfo);
    }

    private TransferConfigArgs() {}

    private TransferConfigArgs(TransferConfigArgs $) {
        this.authorizationCode = $.authorizationCode;
        this.dataRefreshWindowDays = $.dataRefreshWindowDays;
        this.dataSourceId = $.dataSourceId;
        this.destinationDatasetId = $.destinationDatasetId;
        this.disabled = $.disabled;
        this.displayName = $.displayName;
        this.emailPreferences = $.emailPreferences;
        this.location = $.location;
        this.name = $.name;
        this.notificationPubsubTopic = $.notificationPubsubTopic;
        this.params = $.params;
        this.project = $.project;
        this.schedule = $.schedule;
        this.scheduleOptions = $.scheduleOptions;
        this.serviceAccountName = $.serviceAccountName;
        this.userId = $.userId;
        this.versionInfo = $.versionInfo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferConfigArgs $;

        public Builder() {
            $ = new TransferConfigArgs();
        }

        public Builder(TransferConfigArgs defaults) {
            $ = new TransferConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationCode Optional OAuth2 authorization code to use with this transfer configuration. This is required only if `transferConfig.dataSourceId` is &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain authorization_code, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=authorization_code * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
         * 
         * @return builder
         * 
         */
        public Builder authorizationCode(@Nullable Output<String> authorizationCode) {
            $.authorizationCode = authorizationCode;
            return this;
        }

        /**
         * @param authorizationCode Optional OAuth2 authorization code to use with this transfer configuration. This is required only if `transferConfig.dataSourceId` is &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain authorization_code, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=authorization_code * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
         * 
         * @return builder
         * 
         */
        public Builder authorizationCode(String authorizationCode) {
            return authorizationCode(Output.of(authorizationCode));
        }

        /**
         * @param dataRefreshWindowDays The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
         * 
         * @return builder
         * 
         */
        public Builder dataRefreshWindowDays(@Nullable Output<Integer> dataRefreshWindowDays) {
            $.dataRefreshWindowDays = dataRefreshWindowDays;
            return this;
        }

        /**
         * @param dataRefreshWindowDays The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
         * 
         * @return builder
         * 
         */
        public Builder dataRefreshWindowDays(Integer dataRefreshWindowDays) {
            return dataRefreshWindowDays(Output.of(dataRefreshWindowDays));
        }

        /**
         * @param dataSourceId Data source id. Cannot be changed once data transfer is created.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(@Nullable Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId Data source id. Cannot be changed once data transfer is created.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        /**
         * @param destinationDatasetId The BigQuery target dataset id.
         * 
         * @return builder
         * 
         */
        public Builder destinationDatasetId(@Nullable Output<String> destinationDatasetId) {
            $.destinationDatasetId = destinationDatasetId;
            return this;
        }

        /**
         * @param destinationDatasetId The BigQuery target dataset id.
         * 
         * @return builder
         * 
         */
        public Builder destinationDatasetId(String destinationDatasetId) {
            return destinationDatasetId(Output.of(destinationDatasetId));
        }

        /**
         * @param disabled Is this config disabled. When set to true, no runs are scheduled for a given transfer.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Is this config disabled. When set to true, no runs are scheduled for a given transfer.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param displayName User specified display name for the data transfer.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User specified display name for the data transfer.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param emailPreferences Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
         * 
         * @return builder
         * 
         */
        public Builder emailPreferences(@Nullable Output<EmailPreferencesArgs> emailPreferences) {
            $.emailPreferences = emailPreferences;
            return this;
        }

        /**
         * @param emailPreferences Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
         * 
         * @return builder
         * 
         */
        public Builder emailPreferences(EmailPreferencesArgs emailPreferences) {
            return emailPreferences(Output.of(emailPreferences));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationPubsubTopic Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
         * 
         * @return builder
         * 
         */
        public Builder notificationPubsubTopic(@Nullable Output<String> notificationPubsubTopic) {
            $.notificationPubsubTopic = notificationPubsubTopic;
            return this;
        }

        /**
         * @param notificationPubsubTopic Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
         * 
         * @return builder
         * 
         */
        public Builder notificationPubsubTopic(String notificationPubsubTopic) {
            return notificationPubsubTopic(Output.of(notificationPubsubTopic));
        }

        /**
         * @param params Parameters specific to each data source. For more information see the bq tab in the &#39;Setting up a data transfer&#39; section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<Map<String,String>> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Parameters specific to each data source. For more information see the bq tab in the &#39;Setting up a data transfer&#39; section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
         * 
         * @return builder
         * 
         */
        public Builder params(Map<String,String> params) {
            return params(Output.of(params));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param schedule Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param scheduleOptions Options customizing the data transfer schedule.
         * 
         * @return builder
         * 
         */
        public Builder scheduleOptions(@Nullable Output<ScheduleOptionsArgs> scheduleOptions) {
            $.scheduleOptions = scheduleOptions;
            return this;
        }

        /**
         * @param scheduleOptions Options customizing the data transfer schedule.
         * 
         * @return builder
         * 
         */
        public Builder scheduleOptions(ScheduleOptionsArgs scheduleOptions) {
            return scheduleOptions(Output.of(scheduleOptions));
        }

        /**
         * @param serviceAccountName Optional service account name. If this field is set, the transfer config will be created with this service account&#39;s credentials. It requires that the requesting user calling this API has permissions to act as this service account. Note that not all data sources support service account credentials when creating a transfer config. For the latest list of data sources, read about [using service accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(@Nullable Output<String> serviceAccountName) {
            $.serviceAccountName = serviceAccountName;
            return this;
        }

        /**
         * @param serviceAccountName Optional service account name. If this field is set, the transfer config will be created with this service account&#39;s credentials. It requires that the requesting user calling this API has permissions to act as this service account. Note that not all data sources support service account credentials when creating a transfer config. For the latest list of data sources, read about [using service accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(String serviceAccountName) {
            return serviceAccountName(Output.of(serviceAccountName));
        }

        /**
         * @param userId Deprecated. Unique ID of the user on whose behalf transfer is done.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Unique ID of the user on whose behalf transfer is done.
         * 
         */
        @Deprecated /* Deprecated. Unique ID of the user on whose behalf transfer is done. */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId Deprecated. Unique ID of the user on whose behalf transfer is done.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. Unique ID of the user on whose behalf transfer is done.
         * 
         */
        @Deprecated /* Deprecated. Unique ID of the user on whose behalf transfer is done. */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param versionInfo Optional version info. This is required only if `transferConfig.dataSourceId` is not &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain version info, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=version_info * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
         * 
         * @return builder
         * 
         */
        public Builder versionInfo(@Nullable Output<String> versionInfo) {
            $.versionInfo = versionInfo;
            return this;
        }

        /**
         * @param versionInfo Optional version info. This is required only if `transferConfig.dataSourceId` is not &#39;youtube_channel&#39; and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain version info, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth? client_id=client_id&amp;scope=data_source_scopes &amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;response_type=version_info * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.
         * 
         * @return builder
         * 
         */
        public Builder versionInfo(String versionInfo) {
            return versionInfo(Output.of(versionInfo));
        }

        public TransferConfigArgs build() {
            return $;
        }
    }

}
