// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Configuration for how human labeling task should be done.
 * 
 */
public final class GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse Empty = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse();

    /**
     * Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
     * 
     */
    @Import(name="annotatedDatasetDescription", required=true)
    private String annotatedDatasetDescription;

    /**
     * @return Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
     * 
     */
    public String annotatedDatasetDescription() {
        return this.annotatedDatasetDescription;
    }

    /**
     * A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
     * 
     */
    @Import(name="annotatedDatasetDisplayName", required=true)
    private String annotatedDatasetDisplayName;

    /**
     * @return A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
     * 
     */
    public String annotatedDatasetDisplayName() {
        return this.annotatedDatasetDisplayName;
    }

    /**
     * Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
     * 
     */
    @Import(name="contributorEmails", required=true)
    private List<String> contributorEmails;

    /**
     * @return Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
     * 
     */
    public List<String> contributorEmails() {
        return this.contributorEmails;
    }

    /**
     * Instruction resource name.
     * 
     */
    @Import(name="instruction", required=true)
    private String instruction;

    /**
     * @return Instruction resource name.
     * 
     */
    public String instruction() {
        return this.instruction;
    }

    /**
     * Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
     * 
     */
    @Import(name="labelGroup", required=true)
    private String labelGroup;

    /**
     * @return Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
     * 
     */
    public String labelGroup() {
        return this.labelGroup;
    }

    /**
     * Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
     * 
     */
    @Import(name="languageCode", required=true)
    private String languageCode;

    /**
     * @return Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
     * 
     */
    public String languageCode() {
        return this.languageCode;
    }

    /**
     * Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
     * 
     */
    @Import(name="questionDuration", required=true)
    private String questionDuration;

    /**
     * @return Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
     * 
     */
    public String questionDuration() {
        return this.questionDuration;
    }

    /**
     * Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
     * 
     */
    @Import(name="replicaCount", required=true)
    private Integer replicaCount;

    /**
     * @return Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
     * 
     */
    public Integer replicaCount() {
        return this.replicaCount;
    }

    /**
     * Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
     * 
     */
    @Import(name="userEmailAddress", required=true)
    private String userEmailAddress;

    /**
     * @return Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
     * 
     */
    public String userEmailAddress() {
        return this.userEmailAddress;
    }

    private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse() {}

    private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse $) {
        this.annotatedDatasetDescription = $.annotatedDatasetDescription;
        this.annotatedDatasetDisplayName = $.annotatedDatasetDisplayName;
        this.contributorEmails = $.contributorEmails;
        this.instruction = $.instruction;
        this.labelGroup = $.labelGroup;
        this.languageCode = $.languageCode;
        this.questionDuration = $.questionDuration;
        this.replicaCount = $.replicaCount;
        this.userEmailAddress = $.userEmailAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse $;

        public Builder() {
            $ = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse();
        }

        public Builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse defaults) {
            $ = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotatedDatasetDescription Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
         * 
         * @return builder
         * 
         */
        public Builder annotatedDatasetDescription(String annotatedDatasetDescription) {
            $.annotatedDatasetDescription = annotatedDatasetDescription;
            return this;
        }

        /**
         * @param annotatedDatasetDisplayName A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
         * 
         * @return builder
         * 
         */
        public Builder annotatedDatasetDisplayName(String annotatedDatasetDisplayName) {
            $.annotatedDatasetDisplayName = annotatedDatasetDisplayName;
            return this;
        }

        /**
         * @param contributorEmails Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
         * 
         * @return builder
         * 
         */
        public Builder contributorEmails(List<String> contributorEmails) {
            $.contributorEmails = contributorEmails;
            return this;
        }

        /**
         * @param contributorEmails Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
         * 
         * @return builder
         * 
         */
        public Builder contributorEmails(String... contributorEmails) {
            return contributorEmails(List.of(contributorEmails));
        }

        /**
         * @param instruction Instruction resource name.
         * 
         * @return builder
         * 
         */
        public Builder instruction(String instruction) {
            $.instruction = instruction;
            return this;
        }

        /**
         * @param labelGroup Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
         * 
         * @return builder
         * 
         */
        public Builder labelGroup(String labelGroup) {
            $.labelGroup = labelGroup;
            return this;
        }

        /**
         * @param languageCode Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(String languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        /**
         * @param questionDuration Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder questionDuration(String questionDuration) {
            $.questionDuration = questionDuration;
            return this;
        }

        /**
         * @param replicaCount Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
         * 
         * @return builder
         * 
         */
        public Builder replicaCount(Integer replicaCount) {
            $.replicaCount = replicaCount;
            return this;
        }

        /**
         * @param userEmailAddress Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
         * 
         * @return builder
         * 
         */
        public Builder userEmailAddress(String userEmailAddress) {
            $.userEmailAddress = userEmailAddress;
            return this;
        }

        public GoogleCloudDatalabelingV1beta1HumanAnnotationConfigResponse build() {
            $.annotatedDatasetDescription = Objects.requireNonNull($.annotatedDatasetDescription, "expected parameter 'annotatedDatasetDescription' to be non-null");
            $.annotatedDatasetDisplayName = Objects.requireNonNull($.annotatedDatasetDisplayName, "expected parameter 'annotatedDatasetDisplayName' to be non-null");
            $.contributorEmails = Objects.requireNonNull($.contributorEmails, "expected parameter 'contributorEmails' to be non-null");
            $.instruction = Objects.requireNonNull($.instruction, "expected parameter 'instruction' to be non-null");
            $.labelGroup = Objects.requireNonNull($.labelGroup, "expected parameter 'labelGroup' to be non-null");
            $.languageCode = Objects.requireNonNull($.languageCode, "expected parameter 'languageCode' to be non-null");
            $.questionDuration = Objects.requireNonNull($.questionDuration, "expected parameter 'questionDuration' to be non-null");
            $.replicaCount = Objects.requireNonNull($.replicaCount, "expected parameter 'replicaCount' to be non-null");
            $.userEmailAddress = Objects.requireNonNull($.userEmailAddress, "expected parameter 'userEmailAddress' to be non-null");
            return $;
        }
    }

}
