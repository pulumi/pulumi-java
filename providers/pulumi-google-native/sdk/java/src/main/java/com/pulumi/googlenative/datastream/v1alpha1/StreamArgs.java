// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1alpha1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datastream.v1alpha1.enums.StreamState;
import com.pulumi.googlenative.datastream.v1alpha1.inputs.BackfillAllStrategyArgs;
import com.pulumi.googlenative.datastream.v1alpha1.inputs.BackfillNoneStrategyArgs;
import com.pulumi.googlenative.datastream.v1alpha1.inputs.DestinationConfigArgs;
import com.pulumi.googlenative.datastream.v1alpha1.inputs.SourceConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamArgs Empty = new StreamArgs();

    /**
     * Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     * 
     */
    @Import(name="backfillAll")
    private @Nullable Output<BackfillAllStrategyArgs> backfillAll;

    /**
     * @return Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     * 
     */
    public Optional<Output<BackfillAllStrategyArgs>> backfillAll() {
        return Optional.ofNullable(this.backfillAll);
    }

    /**
     * Do not automatically backfill any objects.
     * 
     */
    @Import(name="backfillNone")
    private @Nullable Output<BackfillNoneStrategyArgs> backfillNone;

    /**
     * @return Do not automatically backfill any objects.
     * 
     */
    public Optional<Output<BackfillNoneStrategyArgs>> backfillNone() {
        return Optional.ofNullable(this.backfillNone);
    }

    /**
     * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Import(name="customerManagedEncryptionKey")
    private @Nullable Output<String> customerManagedEncryptionKey;

    /**
     * @return Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    public Optional<Output<String>> customerManagedEncryptionKey() {
        return Optional.ofNullable(this.customerManagedEncryptionKey);
    }

    /**
     * Destination connection profile configuration.
     * 
     */
    @Import(name="destinationConfig", required=true)
    private Output<DestinationConfigArgs> destinationConfig;

    /**
     * @return Destination connection profile configuration.
     * 
     */
    public Output<DestinationConfigArgs> destinationConfig() {
        return this.destinationConfig;
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Optional. Create the stream without validating it.
     * 
     */
    @Import(name="force")
    private @Nullable Output<String> force;

    /**
     * @return Optional. Create the stream without validating it.
     * 
     */
    public Optional<Output<String>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Source connection profile configuration.
     * 
     */
    @Import(name="sourceConfig", required=true)
    private Output<SourceConfigArgs> sourceConfig;

    /**
     * @return Source connection profile configuration.
     * 
     */
    public Output<SourceConfigArgs> sourceConfig() {
        return this.sourceConfig;
    }

    /**
     * The state of the stream.
     * 
     */
    @Import(name="state")
    private @Nullable Output<StreamState> state;

    /**
     * @return The state of the stream.
     * 
     */
    public Optional<Output<StreamState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Required. The stream identifier.
     * 
     */
    @Import(name="streamId", required=true)
    private Output<String> streamId;

    /**
     * @return Required. The stream identifier.
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    /**
     * Optional. Only validate the stream, but do not create any resources. The default is false.
     * 
     */
    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    /**
     * @return Optional. Only validate the stream, but do not create any resources. The default is false.
     * 
     */
    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private StreamArgs() {}

    private StreamArgs(StreamArgs $) {
        this.backfillAll = $.backfillAll;
        this.backfillNone = $.backfillNone;
        this.customerManagedEncryptionKey = $.customerManagedEncryptionKey;
        this.destinationConfig = $.destinationConfig;
        this.displayName = $.displayName;
        this.force = $.force;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.requestId = $.requestId;
        this.sourceConfig = $.sourceConfig;
        this.state = $.state;
        this.streamId = $.streamId;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamArgs $;

        public Builder() {
            $ = new StreamArgs();
        }

        public Builder(StreamArgs defaults) {
            $ = new StreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backfillAll Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
         * 
         * @return builder
         * 
         */
        public Builder backfillAll(@Nullable Output<BackfillAllStrategyArgs> backfillAll) {
            $.backfillAll = backfillAll;
            return this;
        }

        /**
         * @param backfillAll Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
         * 
         * @return builder
         * 
         */
        public Builder backfillAll(BackfillAllStrategyArgs backfillAll) {
            return backfillAll(Output.of(backfillAll));
        }

        /**
         * @param backfillNone Do not automatically backfill any objects.
         * 
         * @return builder
         * 
         */
        public Builder backfillNone(@Nullable Output<BackfillNoneStrategyArgs> backfillNone) {
            $.backfillNone = backfillNone;
            return this;
        }

        /**
         * @param backfillNone Do not automatically backfill any objects.
         * 
         * @return builder
         * 
         */
        public Builder backfillNone(BackfillNoneStrategyArgs backfillNone) {
            return backfillNone(Output.of(backfillNone));
        }

        /**
         * @param customerManagedEncryptionKey Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryptionKey(@Nullable Output<String> customerManagedEncryptionKey) {
            $.customerManagedEncryptionKey = customerManagedEncryptionKey;
            return this;
        }

        /**
         * @param customerManagedEncryptionKey Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryptionKey(String customerManagedEncryptionKey) {
            return customerManagedEncryptionKey(Output.of(customerManagedEncryptionKey));
        }

        /**
         * @param destinationConfig Destination connection profile configuration.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(Output<DestinationConfigArgs> destinationConfig) {
            $.destinationConfig = destinationConfig;
            return this;
        }

        /**
         * @param destinationConfig Destination connection profile configuration.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(DestinationConfigArgs destinationConfig) {
            return destinationConfig(Output.of(destinationConfig));
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param force Optional. Create the stream without validating it.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<String> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Optional. Create the stream without validating it.
         * 
         * @return builder
         * 
         */
        public Builder force(String force) {
            return force(Output.of(force));
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param sourceConfig Source connection profile configuration.
         * 
         * @return builder
         * 
         */
        public Builder sourceConfig(Output<SourceConfigArgs> sourceConfig) {
            $.sourceConfig = sourceConfig;
            return this;
        }

        /**
         * @param sourceConfig Source connection profile configuration.
         * 
         * @return builder
         * 
         */
        public Builder sourceConfig(SourceConfigArgs sourceConfig) {
            return sourceConfig(Output.of(sourceConfig));
        }

        /**
         * @param state The state of the stream.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<StreamState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the stream.
         * 
         * @return builder
         * 
         */
        public Builder state(StreamState state) {
            return state(Output.of(state));
        }

        /**
         * @param streamId Required. The stream identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId Required. The stream identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        /**
         * @param validateOnly Optional. Only validate the stream, but do not create any resources. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        /**
         * @param validateOnly Optional. Only validate the stream, but do not create any resources. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public StreamArgs build() {
            $.destinationConfig = Objects.requireNonNull($.destinationConfig, "expected parameter 'destinationConfig' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.sourceConfig = Objects.requireNonNull($.sourceConfig, "expected parameter 'sourceConfig' to be non-null");
            $.streamId = Objects.requireNonNull($.streamId, "expected parameter 'streamId' to be non-null");
            return $;
        }
    }

}
