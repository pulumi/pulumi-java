// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig_v1beta.inputs.MonthlyScheduleResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.TimeOfDayResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.TimeZoneResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.WeeklyScheduleResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Sets the time for recurring patch deployments.
 * 
 */
public final class RecurringScheduleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RecurringScheduleResponse Empty = new RecurringScheduleResponse();

    /**
     * Optional. The end time at which a recurring patch deployment schedule is no longer active.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    public String endTime() {
        return this.endTime;
    }

    /**
     * The frequency unit of this recurring schedule.
     * 
     */
    @Import(name="frequency", required=true)
    private String frequency;

    public String frequency() {
        return this.frequency;
    }

    /**
     * The time the last patch job ran successfully.
     * 
     */
    @Import(name="lastExecuteTime", required=true)
    private String lastExecuteTime;

    public String lastExecuteTime() {
        return this.lastExecuteTime;
    }

    /**
     * Schedule with monthly executions.
     * 
     */
    @Import(name="monthly", required=true)
    private MonthlyScheduleResponse monthly;

    public MonthlyScheduleResponse monthly() {
        return this.monthly;
    }

    /**
     * The time the next patch job is scheduled to run.
     * 
     */
    @Import(name="nextExecuteTime", required=true)
    private String nextExecuteTime;

    public String nextExecuteTime() {
        return this.nextExecuteTime;
    }

    /**
     * Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * Time of the day to run a recurring deployment.
     * 
     */
    @Import(name="timeOfDay", required=true)
    private TimeOfDayResponse timeOfDay;

    public TimeOfDayResponse timeOfDay() {
        return this.timeOfDay;
    }

    /**
     * Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
     * 
     */
    @Import(name="timeZone", required=true)
    private TimeZoneResponse timeZone;

    public TimeZoneResponse timeZone() {
        return this.timeZone;
    }

    /**
     * Schedule with weekly executions.
     * 
     */
    @Import(name="weekly", required=true)
    private WeeklyScheduleResponse weekly;

    public WeeklyScheduleResponse weekly() {
        return this.weekly;
    }

    private RecurringScheduleResponse() {}

    private RecurringScheduleResponse(RecurringScheduleResponse $) {
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.lastExecuteTime = $.lastExecuteTime;
        this.monthly = $.monthly;
        this.nextExecuteTime = $.nextExecuteTime;
        this.startTime = $.startTime;
        this.timeOfDay = $.timeOfDay;
        this.timeZone = $.timeZone;
        this.weekly = $.weekly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecurringScheduleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecurringScheduleResponse $;

        public Builder() {
            $ = new RecurringScheduleResponse();
        }

        public Builder(RecurringScheduleResponse defaults) {
            $ = new RecurringScheduleResponse(Objects.requireNonNull(defaults));
        }

        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder frequency(String frequency) {
            $.frequency = frequency;
            return this;
        }

        public Builder lastExecuteTime(String lastExecuteTime) {
            $.lastExecuteTime = lastExecuteTime;
            return this;
        }

        public Builder monthly(MonthlyScheduleResponse monthly) {
            $.monthly = monthly;
            return this;
        }

        public Builder nextExecuteTime(String nextExecuteTime) {
            $.nextExecuteTime = nextExecuteTime;
            return this;
        }

        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder timeOfDay(TimeOfDayResponse timeOfDay) {
            $.timeOfDay = timeOfDay;
            return this;
        }

        public Builder timeZone(TimeZoneResponse timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder weekly(WeeklyScheduleResponse weekly) {
            $.weekly = weekly;
            return this;
        }

        public RecurringScheduleResponse build() {
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.lastExecuteTime = Objects.requireNonNull($.lastExecuteTime, "expected parameter 'lastExecuteTime' to be non-null");
            $.monthly = Objects.requireNonNull($.monthly, "expected parameter 'monthly' to be non-null");
            $.nextExecuteTime = Objects.requireNonNull($.nextExecuteTime, "expected parameter 'nextExecuteTime' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.timeOfDay = Objects.requireNonNull($.timeOfDay, "expected parameter 'timeOfDay' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            $.weekly = Objects.requireNonNull($.weekly, "expected parameter 'weekly' to be non-null");
            return $;
        }
    }

}
