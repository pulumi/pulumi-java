// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class MysqlSslConfigResponse {
    /**
     * @return Input only. PEM-encoded certificate of the CA that signed the source database server&#39;s certificate.
     * 
     */
    private final String caCertificate;
    /**
     * @return Indicates whether the ca_certificate field is set.
     * 
     */
    private final Boolean caCertificateSet;
    /**
     * @return Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the &#39;client_key&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    private final String clientCertificate;
    /**
     * @return Indicates whether the client_certificate field is set.
     * 
     */
    private final Boolean clientCertificateSet;
    /**
     * @return Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    private final String clientKey;
    /**
     * @return Indicates whether the client_key field is set.
     * 
     */
    private final Boolean clientKeySet;

    @CustomType.Constructor
    private MysqlSslConfigResponse(
        @CustomType.Parameter("caCertificate") String caCertificate,
        @CustomType.Parameter("caCertificateSet") Boolean caCertificateSet,
        @CustomType.Parameter("clientCertificate") String clientCertificate,
        @CustomType.Parameter("clientCertificateSet") Boolean clientCertificateSet,
        @CustomType.Parameter("clientKey") String clientKey,
        @CustomType.Parameter("clientKeySet") Boolean clientKeySet) {
        this.caCertificate = caCertificate;
        this.caCertificateSet = caCertificateSet;
        this.clientCertificate = clientCertificate;
        this.clientCertificateSet = clientCertificateSet;
        this.clientKey = clientKey;
        this.clientKeySet = clientKeySet;
    }

    /**
     * @return Input only. PEM-encoded certificate of the CA that signed the source database server&#39;s certificate.
     * 
     */
    public String caCertificate() {
        return this.caCertificate;
    }
    /**
     * @return Indicates whether the ca_certificate field is set.
     * 
     */
    public Boolean caCertificateSet() {
        return this.caCertificateSet;
    }
    /**
     * @return Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the &#39;client_key&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }
    /**
     * @return Indicates whether the client_certificate field is set.
     * 
     */
    public Boolean clientCertificateSet() {
        return this.clientCertificateSet;
    }
    /**
     * @return Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    public String clientKey() {
        return this.clientKey;
    }
    /**
     * @return Indicates whether the client_key field is set.
     * 
     */
    public Boolean clientKeySet() {
        return this.clientKeySet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MysqlSslConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String caCertificate;
        private Boolean caCertificateSet;
        private String clientCertificate;
        private Boolean clientCertificateSet;
        private String clientKey;
        private Boolean clientKeySet;

        public Builder() {
    	      // Empty
        }

        public Builder(MysqlSslConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.caCertificateSet = defaults.caCertificateSet;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientCertificateSet = defaults.clientCertificateSet;
    	      this.clientKey = defaults.clientKey;
    	      this.clientKeySet = defaults.clientKeySet;
        }

        public Builder caCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }
        public Builder caCertificateSet(Boolean caCertificateSet) {
            this.caCertificateSet = Objects.requireNonNull(caCertificateSet);
            return this;
        }
        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }
        public Builder clientCertificateSet(Boolean clientCertificateSet) {
            this.clientCertificateSet = Objects.requireNonNull(clientCertificateSet);
            return this;
        }
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        public Builder clientKeySet(Boolean clientKeySet) {
            this.clientKeySet = Objects.requireNonNull(clientKeySet);
            return this;
        }        public MysqlSslConfigResponse build() {
            return new MysqlSslConfigResponse(caCertificate, caCertificateSet, clientCertificate, clientCertificateSet, clientKey, clientKeySet);
        }
    }
}
