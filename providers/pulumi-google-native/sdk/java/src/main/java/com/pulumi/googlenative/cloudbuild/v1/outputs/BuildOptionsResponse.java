// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudbuild.v1.outputs.PoolOptionResponse;
import com.pulumi.googlenative.cloudbuild.v1.outputs.VolumeResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class BuildOptionsResponse {
    /**
     * @return Requested disk size for the VM that runs the build. Note that this is *NOT* &#34;disk free&#34;; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
     * 
     */
    private final String diskSizeGb;
    /**
     * @return Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    private final Boolean dynamicSubstitutions;
    /**
     * @return A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    private final List<String> env;
    /**
     * @return Option to define build log streaming behavior to Google Cloud Storage.
     * 
     */
    private final String logStreamingOption;
    /**
     * @return Option to specify the logging mode, which determines if and where build logs are stored.
     * 
     */
    private final String logging;
    /**
     * @return Compute Engine machine type on which to run the build.
     * 
     */
    private final String machineType;
    /**
     * @return Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
     * 
     */
    private final PoolOptionResponse pool;
    /**
     * @return Requested verifiability options.
     * 
     */
    private final String requestedVerifyOption;
    /**
     * @return A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s `Secret`. These variables will be available to all build steps in this build.
     * 
     */
    private final List<String> secretEnv;
    /**
     * @return Requested hash for SourceProvenance.
     * 
     */
    private final List<String> sourceProvenanceHash;
    /**
     * @return Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    private final String substitutionOption;
    /**
     * @return Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
     * 
     */
    private final List<VolumeResponse> volumes;
    /**
     * @return This field deprecated; please use `pool.name` instead.
     * 
     */
    private final String workerPool;

    @CustomType.Constructor
    private BuildOptionsResponse(
        @CustomType.Parameter("diskSizeGb") String diskSizeGb,
        @CustomType.Parameter("dynamicSubstitutions") Boolean dynamicSubstitutions,
        @CustomType.Parameter("env") List<String> env,
        @CustomType.Parameter("logStreamingOption") String logStreamingOption,
        @CustomType.Parameter("logging") String logging,
        @CustomType.Parameter("machineType") String machineType,
        @CustomType.Parameter("pool") PoolOptionResponse pool,
        @CustomType.Parameter("requestedVerifyOption") String requestedVerifyOption,
        @CustomType.Parameter("secretEnv") List<String> secretEnv,
        @CustomType.Parameter("sourceProvenanceHash") List<String> sourceProvenanceHash,
        @CustomType.Parameter("substitutionOption") String substitutionOption,
        @CustomType.Parameter("volumes") List<VolumeResponse> volumes,
        @CustomType.Parameter("workerPool") String workerPool) {
        this.diskSizeGb = diskSizeGb;
        this.dynamicSubstitutions = dynamicSubstitutions;
        this.env = env;
        this.logStreamingOption = logStreamingOption;
        this.logging = logging;
        this.machineType = machineType;
        this.pool = pool;
        this.requestedVerifyOption = requestedVerifyOption;
        this.secretEnv = secretEnv;
        this.sourceProvenanceHash = sourceProvenanceHash;
        this.substitutionOption = substitutionOption;
        this.volumes = volumes;
        this.workerPool = workerPool;
    }

    /**
     * @return Requested disk size for the VM that runs the build. Note that this is *NOT* &#34;disk free&#34;; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
     * 
     */
    public String diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    public Boolean dynamicSubstitutions() {
        return this.dynamicSubstitutions;
    }
    /**
     * @return A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    public List<String> env() {
        return this.env;
    }
    /**
     * @return Option to define build log streaming behavior to Google Cloud Storage.
     * 
     */
    public String logStreamingOption() {
        return this.logStreamingOption;
    }
    /**
     * @return Option to specify the logging mode, which determines if and where build logs are stored.
     * 
     */
    public String logging() {
        return this.logging;
    }
    /**
     * @return Compute Engine machine type on which to run the build.
     * 
     */
    public String machineType() {
        return this.machineType;
    }
    /**
     * @return Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
     * 
     */
    public PoolOptionResponse pool() {
        return this.pool;
    }
    /**
     * @return Requested verifiability options.
     * 
     */
    public String requestedVerifyOption() {
        return this.requestedVerifyOption;
    }
    /**
     * @return A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s `Secret`. These variables will be available to all build steps in this build.
     * 
     */
    public List<String> secretEnv() {
        return this.secretEnv;
    }
    /**
     * @return Requested hash for SourceProvenance.
     * 
     */
    public List<String> sourceProvenanceHash() {
        return this.sourceProvenanceHash;
    }
    /**
     * @return Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    public String substitutionOption() {
        return this.substitutionOption;
    }
    /**
     * @return Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes;
    }
    /**
     * @return This field deprecated; please use `pool.name` instead.
     * 
     */
    public String workerPool() {
        return this.workerPool;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String diskSizeGb;
        private Boolean dynamicSubstitutions;
        private List<String> env;
        private String logStreamingOption;
        private String logging;
        private String machineType;
        private PoolOptionResponse pool;
        private String requestedVerifyOption;
        private List<String> secretEnv;
        private List<String> sourceProvenanceHash;
        private String substitutionOption;
        private List<VolumeResponse> volumes;
        private String workerPool;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.dynamicSubstitutions = defaults.dynamicSubstitutions;
    	      this.env = defaults.env;
    	      this.logStreamingOption = defaults.logStreamingOption;
    	      this.logging = defaults.logging;
    	      this.machineType = defaults.machineType;
    	      this.pool = defaults.pool;
    	      this.requestedVerifyOption = defaults.requestedVerifyOption;
    	      this.secretEnv = defaults.secretEnv;
    	      this.sourceProvenanceHash = defaults.sourceProvenanceHash;
    	      this.substitutionOption = defaults.substitutionOption;
    	      this.volumes = defaults.volumes;
    	      this.workerPool = defaults.workerPool;
        }

        public Builder diskSizeGb(String diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }
        public Builder dynamicSubstitutions(Boolean dynamicSubstitutions) {
            this.dynamicSubstitutions = Objects.requireNonNull(dynamicSubstitutions);
            return this;
        }
        public Builder env(List<String> env) {
            this.env = Objects.requireNonNull(env);
            return this;
        }
        public Builder env(String... env) {
            return env(List.of(env));
        }
        public Builder logStreamingOption(String logStreamingOption) {
            this.logStreamingOption = Objects.requireNonNull(logStreamingOption);
            return this;
        }
        public Builder logging(String logging) {
            this.logging = Objects.requireNonNull(logging);
            return this;
        }
        public Builder machineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }
        public Builder pool(PoolOptionResponse pool) {
            this.pool = Objects.requireNonNull(pool);
            return this;
        }
        public Builder requestedVerifyOption(String requestedVerifyOption) {
            this.requestedVerifyOption = Objects.requireNonNull(requestedVerifyOption);
            return this;
        }
        public Builder secretEnv(List<String> secretEnv) {
            this.secretEnv = Objects.requireNonNull(secretEnv);
            return this;
        }
        public Builder secretEnv(String... secretEnv) {
            return secretEnv(List.of(secretEnv));
        }
        public Builder sourceProvenanceHash(List<String> sourceProvenanceHash) {
            this.sourceProvenanceHash = Objects.requireNonNull(sourceProvenanceHash);
            return this;
        }
        public Builder sourceProvenanceHash(String... sourceProvenanceHash) {
            return sourceProvenanceHash(List.of(sourceProvenanceHash));
        }
        public Builder substitutionOption(String substitutionOption) {
            this.substitutionOption = Objects.requireNonNull(substitutionOption);
            return this;
        }
        public Builder volumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }
        public Builder workerPool(String workerPool) {
            this.workerPool = Objects.requireNonNull(workerPool);
            return this;
        }        public BuildOptionsResponse build() {
            return new BuildOptionsResponse(diskSizeGb, dynamicSubstitutions, env, logStreamingOption, logging, machineType, pool, requestedVerifyOption, secretEnv, sourceProvenanceHash, substitutionOption, volumes, workerPool);
        }
    }
}
