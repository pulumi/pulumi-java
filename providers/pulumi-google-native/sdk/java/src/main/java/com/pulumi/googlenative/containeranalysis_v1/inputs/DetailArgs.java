// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.VersionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
 * 
 */
public final class DetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetailArgs Empty = new DetailArgs();

    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
     * 
     */
    @Import(name="affectedCpeUri", required=true)
    private Output<String> affectedCpeUri;

    public Output<String> affectedCpeUri() {
        return this.affectedCpeUri;
    }

    /**
     * The package this vulnerability affects.
     * 
     */
    @Import(name="affectedPackage", required=true)
    private Output<String> affectedPackage;

    public Output<String> affectedPackage() {
        return this.affectedPackage;
    }

    /**
     * The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
     * 
     */
    @Import(name="affectedVersionEnd")
    private @Nullable Output<VersionArgs> affectedVersionEnd;

    public Optional<Output<VersionArgs>> affectedVersionEnd() {
        return Optional.ofNullable(this.affectedVersionEnd);
    }

    /**
     * The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
     * 
     */
    @Import(name="affectedVersionStart")
    private @Nullable Output<VersionArgs> affectedVersionStart;

    public Optional<Output<VersionArgs>> affectedVersionStart() {
        return Optional.ofNullable(this.affectedVersionStart);
    }

    /**
     * A vendor-specific description of this vulnerability.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
     * 
     */
    @Import(name="fixedCpeUri")
    private @Nullable Output<String> fixedCpeUri;

    public Optional<Output<String>> fixedCpeUri() {
        return Optional.ofNullable(this.fixedCpeUri);
    }

    /**
     * The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
     * 
     */
    @Import(name="fixedPackage")
    private @Nullable Output<String> fixedPackage;

    public Optional<Output<String>> fixedPackage() {
        return Optional.ofNullable(this.fixedPackage);
    }

    /**
     * The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
     * 
     */
    @Import(name="fixedVersion")
    private @Nullable Output<VersionArgs> fixedVersion;

    public Optional<Output<VersionArgs>> fixedVersion() {
        return Optional.ofNullable(this.fixedVersion);
    }

    /**
     * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
     * 
     */
    @Import(name="isObsolete")
    private @Nullable Output<Boolean> isObsolete;

    public Optional<Output<Boolean>> isObsolete() {
        return Optional.ofNullable(this.isObsolete);
    }

    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * The distro assigned severity of this vulnerability.
     * 
     */
    @Import(name="severityName")
    private @Nullable Output<String> severityName;

    public Optional<Output<String>> severityName() {
        return Optional.ofNullable(this.severityName);
    }

    /**
     * The source from which the information in this Detail was obtained.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     * 
     */
    @Import(name="sourceUpdateTime")
    private @Nullable Output<String> sourceUpdateTime;

    public Optional<Output<String>> sourceUpdateTime() {
        return Optional.ofNullable(this.sourceUpdateTime);
    }

    /**
     * The name of the vendor of the product.
     * 
     */
    @Import(name="vendor")
    private @Nullable Output<String> vendor;

    public Optional<Output<String>> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    private DetailArgs() {}

    private DetailArgs(DetailArgs $) {
        this.affectedCpeUri = $.affectedCpeUri;
        this.affectedPackage = $.affectedPackage;
        this.affectedVersionEnd = $.affectedVersionEnd;
        this.affectedVersionStart = $.affectedVersionStart;
        this.description = $.description;
        this.fixedCpeUri = $.fixedCpeUri;
        this.fixedPackage = $.fixedPackage;
        this.fixedVersion = $.fixedVersion;
        this.isObsolete = $.isObsolete;
        this.packageType = $.packageType;
        this.severityName = $.severityName;
        this.source = $.source;
        this.sourceUpdateTime = $.sourceUpdateTime;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetailArgs $;

        public Builder() {
            $ = new DetailArgs();
        }

        public Builder(DetailArgs defaults) {
            $ = new DetailArgs(Objects.requireNonNull(defaults));
        }

        public Builder affectedCpeUri(Output<String> affectedCpeUri) {
            $.affectedCpeUri = affectedCpeUri;
            return this;
        }

        public Builder affectedCpeUri(String affectedCpeUri) {
            return affectedCpeUri(Output.of(affectedCpeUri));
        }

        public Builder affectedPackage(Output<String> affectedPackage) {
            $.affectedPackage = affectedPackage;
            return this;
        }

        public Builder affectedPackage(String affectedPackage) {
            return affectedPackage(Output.of(affectedPackage));
        }

        public Builder affectedVersionEnd(@Nullable Output<VersionArgs> affectedVersionEnd) {
            $.affectedVersionEnd = affectedVersionEnd;
            return this;
        }

        public Builder affectedVersionEnd(VersionArgs affectedVersionEnd) {
            return affectedVersionEnd(Output.of(affectedVersionEnd));
        }

        public Builder affectedVersionStart(@Nullable Output<VersionArgs> affectedVersionStart) {
            $.affectedVersionStart = affectedVersionStart;
            return this;
        }

        public Builder affectedVersionStart(VersionArgs affectedVersionStart) {
            return affectedVersionStart(Output.of(affectedVersionStart));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fixedCpeUri(@Nullable Output<String> fixedCpeUri) {
            $.fixedCpeUri = fixedCpeUri;
            return this;
        }

        public Builder fixedCpeUri(String fixedCpeUri) {
            return fixedCpeUri(Output.of(fixedCpeUri));
        }

        public Builder fixedPackage(@Nullable Output<String> fixedPackage) {
            $.fixedPackage = fixedPackage;
            return this;
        }

        public Builder fixedPackage(String fixedPackage) {
            return fixedPackage(Output.of(fixedPackage));
        }

        public Builder fixedVersion(@Nullable Output<VersionArgs> fixedVersion) {
            $.fixedVersion = fixedVersion;
            return this;
        }

        public Builder fixedVersion(VersionArgs fixedVersion) {
            return fixedVersion(Output.of(fixedVersion));
        }

        public Builder isObsolete(@Nullable Output<Boolean> isObsolete) {
            $.isObsolete = isObsolete;
            return this;
        }

        public Builder isObsolete(Boolean isObsolete) {
            return isObsolete(Output.of(isObsolete));
        }

        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        public Builder severityName(@Nullable Output<String> severityName) {
            $.severityName = severityName;
            return this;
        }

        public Builder severityName(String severityName) {
            return severityName(Output.of(severityName));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder sourceUpdateTime(@Nullable Output<String> sourceUpdateTime) {
            $.sourceUpdateTime = sourceUpdateTime;
            return this;
        }

        public Builder sourceUpdateTime(String sourceUpdateTime) {
            return sourceUpdateTime(Output.of(sourceUpdateTime));
        }

        public Builder vendor(@Nullable Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public DetailArgs build() {
            $.affectedCpeUri = Objects.requireNonNull($.affectedCpeUri, "expected parameter 'affectedCpeUri' to be non-null");
            $.affectedPackage = Objects.requireNonNull($.affectedPackage, "expected parameter 'affectedPackage' to be non-null");
            return $;
        }
    }

}
