// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.metastore_v1alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.metastore_v1alpha.inputs.EncryptionConfigResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.HiveMetastoreConfigResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.MaintenanceWindowResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.MetadataIntegrationResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.MetadataManagementActivityResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.NetworkConfigResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * A managed metastore service that serves metadata queries.
 * 
 */
public final class ServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServiceResponse Empty = new ServiceResponse();

    /**
     * A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     * 
     */
    @Import(name="artifactGcsUri", required=true)
    private String artifactGcsUri;

    /**
     * @return A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     * 
     */
    public String artifactGcsUri() {
        return this.artifactGcsUri;
    }

    /**
     * The time when the metastore service was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return The time when the metastore service was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * Immutable. The database type that the Metastore service stores its data.
     * 
     */
    @Import(name="databaseType", required=true)
    private String databaseType;

    /**
     * @return Immutable. The database type that the Metastore service stores its data.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }

    /**
     * Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
     * 
     */
    @Import(name="encryptionConfig", required=true)
    private EncryptionConfigResponse encryptionConfig;

    /**
     * @return Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
     * 
     */
    public EncryptionConfigResponse encryptionConfig() {
        return this.encryptionConfig;
    }

    /**
     * The URI of the endpoint used to access the metastore service.
     * 
     */
    @Import(name="endpointUri", required=true)
    private String endpointUri;

    /**
     * @return The URI of the endpoint used to access the metastore service.
     * 
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     * 
     */
    @Import(name="hiveMetastoreConfig", required=true)
    private HiveMetastoreConfigResponse hiveMetastoreConfig;

    /**
     * @return Configuration information specific to running Hive metastore software as the metastore service.
     * 
     */
    public HiveMetastoreConfigResponse hiveMetastoreConfig() {
        return this.hiveMetastoreConfig;
    }

    /**
     * User-defined labels for the metastore service.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return User-defined labels for the metastore service.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
     * 
     */
    @Import(name="maintenanceWindow", required=true)
    private MaintenanceWindowResponse maintenanceWindow;

    /**
     * @return The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
     * 
     */
    public MaintenanceWindowResponse maintenanceWindow() {
        return this.maintenanceWindow;
    }

    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     * 
     */
    @Import(name="metadataIntegration", required=true)
    private MetadataIntegrationResponse metadataIntegration;

    /**
     * @return The setting that defines how metastore metadata should be integrated with external services and systems.
     * 
     */
    public MetadataIntegrationResponse metadataIntegration() {
        return this.metadataIntegration;
    }

    /**
     * The metadata management activities of the metastore service.
     * 
     */
    @Import(name="metadataManagementActivity", required=true)
    private MetadataManagementActivityResponse metadataManagementActivity;

    /**
     * @return The metadata management activities of the metastore service.
     * 
     */
    public MetadataManagementActivityResponse metadataManagementActivity() {
        return this.metadataManagementActivity;
    }

    /**
     * Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    /**
     * @return Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
     * 
     */
    public String network() {
        return this.network;
    }

    /**
     * Immutable. The configuration specifying the network settings for the Dataproc Metastore service.
     * 
     */
    @Import(name="networkConfig", required=true)
    private NetworkConfigResponse networkConfig;

    /**
     * @return Immutable. The configuration specifying the network settings for the Dataproc Metastore service.
     * 
     */
    public NetworkConfigResponse networkConfig() {
        return this.networkConfig;
    }

    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    /**
     * @return The TCP port at which the metastore service is reached. Default: 9083.
     * 
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
     * 
     */
    @Import(name="releaseChannel", required=true)
    private String releaseChannel;

    /**
     * @return Immutable. The release channel of the service. If unspecified, defaults to STABLE.
     * 
     */
    public String releaseChannel() {
        return this.releaseChannel;
    }

    /**
     * The current state of the metastore service.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return The current state of the metastore service.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Additional information about the current state of the metastore service, if available.
     * 
     */
    @Import(name="stateMessage", required=true)
    private String stateMessage;

    /**
     * @return Additional information about the current state of the metastore service, if available.
     * 
     */
    public String stateMessage() {
        return this.stateMessage;
    }

    /**
     * The tier of the service.
     * 
     */
    @Import(name="tier", required=true)
    private String tier;

    /**
     * @return The tier of the service.
     * 
     */
    public String tier() {
        return this.tier;
    }

    /**
     * The globally unique resource identifier of the metastore service.
     * 
     */
    @Import(name="uid", required=true)
    private String uid;

    /**
     * @return The globally unique resource identifier of the metastore service.
     * 
     */
    public String uid() {
        return this.uid;
    }

    /**
     * The time when the metastore service was last updated.
     * 
     */
    @Import(name="updateTime", required=true)
    private String updateTime;

    /**
     * @return The time when the metastore service was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    private ServiceResponse() {}

    private ServiceResponse(ServiceResponse $) {
        this.artifactGcsUri = $.artifactGcsUri;
        this.createTime = $.createTime;
        this.databaseType = $.databaseType;
        this.encryptionConfig = $.encryptionConfig;
        this.endpointUri = $.endpointUri;
        this.hiveMetastoreConfig = $.hiveMetastoreConfig;
        this.labels = $.labels;
        this.maintenanceWindow = $.maintenanceWindow;
        this.metadataIntegration = $.metadataIntegration;
        this.metadataManagementActivity = $.metadataManagementActivity;
        this.name = $.name;
        this.network = $.network;
        this.networkConfig = $.networkConfig;
        this.port = $.port;
        this.releaseChannel = $.releaseChannel;
        this.state = $.state;
        this.stateMessage = $.stateMessage;
        this.tier = $.tier;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceResponse $;

        public Builder() {
            $ = new ServiceResponse();
        }

        public Builder(ServiceResponse defaults) {
            $ = new ServiceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactGcsUri A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
         * 
         * @return builder
         * 
         */
        public Builder artifactGcsUri(String artifactGcsUri) {
            $.artifactGcsUri = artifactGcsUri;
            return this;
        }

        /**
         * @param createTime The time when the metastore service was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param databaseType Immutable. The database type that the Metastore service stores its data.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param encryptionConfig Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(EncryptionConfigResponse encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        /**
         * @param endpointUri The URI of the endpoint used to access the metastore service.
         * 
         * @return builder
         * 
         */
        public Builder endpointUri(String endpointUri) {
            $.endpointUri = endpointUri;
            return this;
        }

        /**
         * @param hiveMetastoreConfig Configuration information specific to running Hive metastore software as the metastore service.
         * 
         * @return builder
         * 
         */
        public Builder hiveMetastoreConfig(HiveMetastoreConfigResponse hiveMetastoreConfig) {
            $.hiveMetastoreConfig = hiveMetastoreConfig;
            return this;
        }

        /**
         * @param labels User-defined labels for the metastore service.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param maintenanceWindow The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(MaintenanceWindowResponse maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param metadataIntegration The setting that defines how metastore metadata should be integrated with external services and systems.
         * 
         * @return builder
         * 
         */
        public Builder metadataIntegration(MetadataIntegrationResponse metadataIntegration) {
            $.metadataIntegration = metadataIntegration;
            return this;
        }

        /**
         * @param metadataManagementActivity The metadata management activities of the metastore service.
         * 
         * @return builder
         * 
         */
        public Builder metadataManagementActivity(MetadataManagementActivityResponse metadataManagementActivity) {
            $.metadataManagementActivity = metadataManagementActivity;
            return this;
        }

        /**
         * @param name Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param network Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            $.network = network;
            return this;
        }

        /**
         * @param networkConfig Immutable. The configuration specifying the network settings for the Dataproc Metastore service.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(NetworkConfigResponse networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param port The TCP port at which the metastore service is reached. Default: 9083.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param releaseChannel Immutable. The release channel of the service. If unspecified, defaults to STABLE.
         * 
         * @return builder
         * 
         */
        public Builder releaseChannel(String releaseChannel) {
            $.releaseChannel = releaseChannel;
            return this;
        }

        /**
         * @param state The current state of the metastore service.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param stateMessage Additional information about the current state of the metastore service, if available.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(String stateMessage) {
            $.stateMessage = stateMessage;
            return this;
        }

        /**
         * @param tier The tier of the service.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param uid The globally unique resource identifier of the metastore service.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param updateTime The time when the metastore service was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public ServiceResponse build() {
            $.artifactGcsUri = Objects.requireNonNull($.artifactGcsUri, "expected parameter 'artifactGcsUri' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            $.encryptionConfig = Objects.requireNonNull($.encryptionConfig, "expected parameter 'encryptionConfig' to be non-null");
            $.endpointUri = Objects.requireNonNull($.endpointUri, "expected parameter 'endpointUri' to be non-null");
            $.hiveMetastoreConfig = Objects.requireNonNull($.hiveMetastoreConfig, "expected parameter 'hiveMetastoreConfig' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.maintenanceWindow = Objects.requireNonNull($.maintenanceWindow, "expected parameter 'maintenanceWindow' to be non-null");
            $.metadataIntegration = Objects.requireNonNull($.metadataIntegration, "expected parameter 'metadataIntegration' to be non-null");
            $.metadataManagementActivity = Objects.requireNonNull($.metadataManagementActivity, "expected parameter 'metadataManagementActivity' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.networkConfig = Objects.requireNonNull($.networkConfig, "expected parameter 'networkConfig' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.releaseChannel = Objects.requireNonNull($.releaseChannel, "expected parameter 'releaseChannel' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateMessage = Objects.requireNonNull($.stateMessage, "expected parameter 'stateMessage' to be non-null");
            $.tier = Objects.requireNonNull($.tier, "expected parameter 'tier' to be non-null");
            $.uid = Objects.requireNonNull($.uid, "expected parameter 'uid' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
