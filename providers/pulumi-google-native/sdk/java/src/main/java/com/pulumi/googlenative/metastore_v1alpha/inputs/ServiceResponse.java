// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.metastore_v1alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.metastore_v1alpha.inputs.EncryptionConfigResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.HiveMetastoreConfigResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.MaintenanceWindowResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.MetadataIntegrationResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.MetadataManagementActivityResponse;
import com.pulumi.googlenative.metastore_v1alpha.inputs.NetworkConfigResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * A managed metastore service that serves metadata queries.
 * 
 */
public final class ServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServiceResponse Empty = new ServiceResponse();

    /**
     * A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     * 
     */
    @Import(name="artifactGcsUri", required=true)
    private String artifactGcsUri;

    public String artifactGcsUri() {
        return this.artifactGcsUri;
    }

    /**
     * The time when the metastore service was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    public String createTime() {
        return this.createTime;
    }

    /**
     * Immutable. The database type that the Metastore service stores its data.
     * 
     */
    @Import(name="databaseType", required=true)
    private String databaseType;

    public String databaseType() {
        return this.databaseType;
    }

    /**
     * Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
     * 
     */
    @Import(name="encryptionConfig", required=true)
    private EncryptionConfigResponse encryptionConfig;

    public EncryptionConfigResponse encryptionConfig() {
        return this.encryptionConfig;
    }

    /**
     * The URI of the endpoint used to access the metastore service.
     * 
     */
    @Import(name="endpointUri", required=true)
    private String endpointUri;

    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     * 
     */
    @Import(name="hiveMetastoreConfig", required=true)
    private HiveMetastoreConfigResponse hiveMetastoreConfig;

    public HiveMetastoreConfigResponse hiveMetastoreConfig() {
        return this.hiveMetastoreConfig;
    }

    /**
     * User-defined labels for the metastore service.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
     * 
     */
    @Import(name="maintenanceWindow", required=true)
    private MaintenanceWindowResponse maintenanceWindow;

    public MaintenanceWindowResponse maintenanceWindow() {
        return this.maintenanceWindow;
    }

    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     * 
     */
    @Import(name="metadataIntegration", required=true)
    private MetadataIntegrationResponse metadataIntegration;

    public MetadataIntegrationResponse metadataIntegration() {
        return this.metadataIntegration;
    }

    /**
     * The metadata management activities of the metastore service.
     * 
     */
    @Import(name="metadataManagementActivity", required=true)
    private MetadataManagementActivityResponse metadataManagementActivity;

    public MetadataManagementActivityResponse metadataManagementActivity() {
        return this.metadataManagementActivity;
    }

    /**
     * Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * Immutable. The configuration specifying the network settings for the Dataproc Metastore service.
     * 
     */
    @Import(name="networkConfig", required=true)
    private NetworkConfigResponse networkConfig;

    public NetworkConfigResponse networkConfig() {
        return this.networkConfig;
    }

    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
     * 
     */
    @Import(name="releaseChannel", required=true)
    private String releaseChannel;

    public String releaseChannel() {
        return this.releaseChannel;
    }

    /**
     * The current state of the metastore service.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Additional information about the current state of the metastore service, if available.
     * 
     */
    @Import(name="stateMessage", required=true)
    private String stateMessage;

    public String stateMessage() {
        return this.stateMessage;
    }

    /**
     * The tier of the service.
     * 
     */
    @Import(name="tier", required=true)
    private String tier;

    public String tier() {
        return this.tier;
    }

    /**
     * The globally unique resource identifier of the metastore service.
     * 
     */
    @Import(name="uid", required=true)
    private String uid;

    public String uid() {
        return this.uid;
    }

    /**
     * The time when the metastore service was last updated.
     * 
     */
    @Import(name="updateTime", required=true)
    private String updateTime;

    public String updateTime() {
        return this.updateTime;
    }

    private ServiceResponse() {}

    private ServiceResponse(ServiceResponse $) {
        this.artifactGcsUri = $.artifactGcsUri;
        this.createTime = $.createTime;
        this.databaseType = $.databaseType;
        this.encryptionConfig = $.encryptionConfig;
        this.endpointUri = $.endpointUri;
        this.hiveMetastoreConfig = $.hiveMetastoreConfig;
        this.labels = $.labels;
        this.maintenanceWindow = $.maintenanceWindow;
        this.metadataIntegration = $.metadataIntegration;
        this.metadataManagementActivity = $.metadataManagementActivity;
        this.name = $.name;
        this.network = $.network;
        this.networkConfig = $.networkConfig;
        this.port = $.port;
        this.releaseChannel = $.releaseChannel;
        this.state = $.state;
        this.stateMessage = $.stateMessage;
        this.tier = $.tier;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceResponse $;

        public Builder() {
            $ = new ServiceResponse();
        }

        public Builder(ServiceResponse defaults) {
            $ = new ServiceResponse(Objects.requireNonNull(defaults));
        }

        public Builder artifactGcsUri(String artifactGcsUri) {
            $.artifactGcsUri = artifactGcsUri;
            return this;
        }

        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder databaseType(String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        public Builder encryptionConfig(EncryptionConfigResponse encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder endpointUri(String endpointUri) {
            $.endpointUri = endpointUri;
            return this;
        }

        public Builder hiveMetastoreConfig(HiveMetastoreConfigResponse hiveMetastoreConfig) {
            $.hiveMetastoreConfig = hiveMetastoreConfig;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        public Builder maintenanceWindow(MaintenanceWindowResponse maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder metadataIntegration(MetadataIntegrationResponse metadataIntegration) {
            $.metadataIntegration = metadataIntegration;
            return this;
        }

        public Builder metadataManagementActivity(MetadataManagementActivityResponse metadataManagementActivity) {
            $.metadataManagementActivity = metadataManagementActivity;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder networkConfig(NetworkConfigResponse networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder releaseChannel(String releaseChannel) {
            $.releaseChannel = releaseChannel;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder stateMessage(String stateMessage) {
            $.stateMessage = stateMessage;
            return this;
        }

        public Builder tier(String tier) {
            $.tier = tier;
            return this;
        }

        public Builder uid(String uid) {
            $.uid = uid;
            return this;
        }

        public Builder updateTime(String updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public ServiceResponse build() {
            $.artifactGcsUri = Objects.requireNonNull($.artifactGcsUri, "expected parameter 'artifactGcsUri' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            $.encryptionConfig = Objects.requireNonNull($.encryptionConfig, "expected parameter 'encryptionConfig' to be non-null");
            $.endpointUri = Objects.requireNonNull($.endpointUri, "expected parameter 'endpointUri' to be non-null");
            $.hiveMetastoreConfig = Objects.requireNonNull($.hiveMetastoreConfig, "expected parameter 'hiveMetastoreConfig' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.maintenanceWindow = Objects.requireNonNull($.maintenanceWindow, "expected parameter 'maintenanceWindow' to be non-null");
            $.metadataIntegration = Objects.requireNonNull($.metadataIntegration, "expected parameter 'metadataIntegration' to be non-null");
            $.metadataManagementActivity = Objects.requireNonNull($.metadataManagementActivity, "expected parameter 'metadataManagementActivity' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.networkConfig = Objects.requireNonNull($.networkConfig, "expected parameter 'networkConfig' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.releaseChannel = Objects.requireNonNull($.releaseChannel, "expected parameter 'releaseChannel' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.stateMessage = Objects.requireNonNull($.stateMessage, "expected parameter 'stateMessage' to be non-null");
            $.tier = Objects.requireNonNull($.tier, "expected parameter 'tier' to be non-null");
            $.uid = Objects.requireNonNull($.uid, "expected parameter 'uid' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
