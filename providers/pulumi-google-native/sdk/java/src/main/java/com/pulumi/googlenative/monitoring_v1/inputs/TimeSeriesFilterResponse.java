// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.AggregationResponse;
import com.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterResponse;
import java.lang.String;
import java.util.Objects;


/**
 * A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method.
 * 
 */
public final class TimeSeriesFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final TimeSeriesFilterResponse Empty = new TimeSeriesFilterResponse();

    /**
     * By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     * 
     */
    @Import(name="aggregation", required=true)
      private final AggregationResponse aggregation;

    public AggregationResponse aggregation() {
        return this.aggregation;
    }

    /**
     * The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     * 
     */
    @Import(name="filter", required=true)
      private final String filter;

    public String filter() {
        return this.filter;
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @Import(name="pickTimeSeriesFilter", required=true)
      private final PickTimeSeriesFilterResponse pickTimeSeriesFilter;

    public PickTimeSeriesFilterResponse pickTimeSeriesFilter() {
        return this.pickTimeSeriesFilter;
    }

    /**
     * Apply a second aggregation after aggregation is applied.
     * 
     */
    @Import(name="secondaryAggregation", required=true)
      private final AggregationResponse secondaryAggregation;

    public AggregationResponse secondaryAggregation() {
        return this.secondaryAggregation;
    }

    public TimeSeriesFilterResponse(
        AggregationResponse aggregation,
        String filter,
        PickTimeSeriesFilterResponse pickTimeSeriesFilter,
        AggregationResponse secondaryAggregation) {
        this.aggregation = Objects.requireNonNull(aggregation, "expected parameter 'aggregation' to be non-null");
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.pickTimeSeriesFilter = Objects.requireNonNull(pickTimeSeriesFilter, "expected parameter 'pickTimeSeriesFilter' to be non-null");
        this.secondaryAggregation = Objects.requireNonNull(secondaryAggregation, "expected parameter 'secondaryAggregation' to be non-null");
    }

    private TimeSeriesFilterResponse() {
        this.aggregation = null;
        this.filter = null;
        this.pickTimeSeriesFilter = null;
        this.secondaryAggregation = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeSeriesFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregationResponse aggregation;
        private String filter;
        private PickTimeSeriesFilterResponse pickTimeSeriesFilter;
        private AggregationResponse secondaryAggregation;

        public Builder() {
    	      // Empty
        }

        public Builder(TimeSeriesFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.filter = defaults.filter;
    	      this.pickTimeSeriesFilter = defaults.pickTimeSeriesFilter;
    	      this.secondaryAggregation = defaults.secondaryAggregation;
        }

        public Builder aggregation(AggregationResponse aggregation) {
            this.aggregation = Objects.requireNonNull(aggregation);
            return this;
        }
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        public Builder pickTimeSeriesFilter(PickTimeSeriesFilterResponse pickTimeSeriesFilter) {
            this.pickTimeSeriesFilter = Objects.requireNonNull(pickTimeSeriesFilter);
            return this;
        }
        public Builder secondaryAggregation(AggregationResponse secondaryAggregation) {
            this.secondaryAggregation = Objects.requireNonNull(secondaryAggregation);
            return this;
        }        public TimeSeriesFilterResponse build() {
            return new TimeSeriesFilterResponse(aggregation, filter, pickTimeSeriesFilter, secondaryAggregation);
        }
    }
}
