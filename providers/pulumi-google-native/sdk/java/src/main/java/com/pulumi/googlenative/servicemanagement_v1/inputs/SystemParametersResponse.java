// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SystemParameterRuleResponse;
import java.util.List;
import java.util.Objects;


/**
 * ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
 * 
 */
public final class SystemParametersResponse extends com.pulumi.resources.InvokeArgs {

    public static final SystemParametersResponse Empty = new SystemParametersResponse();

    /**
     * Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: &#34;*&#34; parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: &#34;/ListShelves&#34; parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    @Import(name="rules", required=true)
    private List<SystemParameterRuleResponse> rules;

    public List<SystemParameterRuleResponse> rules() {
        return this.rules;
    }

    private SystemParametersResponse() {}

    private SystemParametersResponse(SystemParametersResponse $) {
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemParametersResponse $;

        public Builder() {
            $ = new SystemParametersResponse();
        }

        public Builder(SystemParametersResponse defaults) {
            $ = new SystemParametersResponse(Objects.requireNonNull(defaults));
        }

        public Builder rules(List<SystemParameterRuleResponse> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(SystemParameterRuleResponse... rules) {
            return rules(List.of(rules));
        }

        public SystemParametersResponse build() {
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
