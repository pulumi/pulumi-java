// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Provides data to pass through to the worker harness.
 * 
 */
public final class WorkerSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerSettingsArgs Empty = new WorkerSettingsArgs();

    /**
     * The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, &#34;Relative Uniform Resource Locators&#34;. If not specified, the default value is &#34;http://www.googleapis.com/&#34;
     * 
     */
    @Import(name="baseUrl")
      private final @Nullable Output<String> baseUrl;

    public Output<String> baseUrl() {
        return this.baseUrl == null ? Codegen.empty() : this.baseUrl;
    }

    /**
     * Whether to send work progress updates to the service.
     * 
     */
    @Import(name="reportingEnabled")
      private final @Nullable Output<Boolean> reportingEnabled;

    public Output<Boolean> reportingEnabled() {
        return this.reportingEnabled == null ? Codegen.empty() : this.reportingEnabled;
    }

    /**
     * The Cloud Dataflow service path relative to the root URL, for example, &#34;dataflow/v1b3/projects&#34;.
     * 
     */
    @Import(name="servicePath")
      private final @Nullable Output<String> servicePath;

    public Output<String> servicePath() {
        return this.servicePath == null ? Codegen.empty() : this.servicePath;
    }

    /**
     * The Shuffle service path relative to the root URL, for example, &#34;shuffle/v1beta1&#34;.
     * 
     */
    @Import(name="shuffleServicePath")
      private final @Nullable Output<String> shuffleServicePath;

    public Output<String> shuffleServicePath() {
        return this.shuffleServicePath == null ? Codegen.empty() : this.shuffleServicePath;
    }

    /**
     * The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    @Import(name="tempStoragePrefix")
      private final @Nullable Output<String> tempStoragePrefix;

    public Output<String> tempStoragePrefix() {
        return this.tempStoragePrefix == null ? Codegen.empty() : this.tempStoragePrefix;
    }

    /**
     * The ID of the worker running this pipeline.
     * 
     */
    @Import(name="workerId")
      private final @Nullable Output<String> workerId;

    public Output<String> workerId() {
        return this.workerId == null ? Codegen.empty() : this.workerId;
    }

    public WorkerSettingsArgs(
        @Nullable Output<String> baseUrl,
        @Nullable Output<Boolean> reportingEnabled,
        @Nullable Output<String> servicePath,
        @Nullable Output<String> shuffleServicePath,
        @Nullable Output<String> tempStoragePrefix,
        @Nullable Output<String> workerId) {
        this.baseUrl = baseUrl;
        this.reportingEnabled = reportingEnabled;
        this.servicePath = servicePath;
        this.shuffleServicePath = shuffleServicePath;
        this.tempStoragePrefix = tempStoragePrefix;
        this.workerId = workerId;
    }

    private WorkerSettingsArgs() {
        this.baseUrl = Codegen.empty();
        this.reportingEnabled = Codegen.empty();
        this.servicePath = Codegen.empty();
        this.shuffleServicePath = Codegen.empty();
        this.tempStoragePrefix = Codegen.empty();
        this.workerId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkerSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> baseUrl;
        private @Nullable Output<Boolean> reportingEnabled;
        private @Nullable Output<String> servicePath;
        private @Nullable Output<String> shuffleServicePath;
        private @Nullable Output<String> tempStoragePrefix;
        private @Nullable Output<String> workerId;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkerSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseUrl = defaults.baseUrl;
    	      this.reportingEnabled = defaults.reportingEnabled;
    	      this.servicePath = defaults.servicePath;
    	      this.shuffleServicePath = defaults.shuffleServicePath;
    	      this.tempStoragePrefix = defaults.tempStoragePrefix;
    	      this.workerId = defaults.workerId;
        }

        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        public Builder baseUrl(@Nullable String baseUrl) {
            this.baseUrl = Codegen.ofNullable(baseUrl);
            return this;
        }
        public Builder reportingEnabled(@Nullable Output<Boolean> reportingEnabled) {
            this.reportingEnabled = reportingEnabled;
            return this;
        }
        public Builder reportingEnabled(@Nullable Boolean reportingEnabled) {
            this.reportingEnabled = Codegen.ofNullable(reportingEnabled);
            return this;
        }
        public Builder servicePath(@Nullable Output<String> servicePath) {
            this.servicePath = servicePath;
            return this;
        }
        public Builder servicePath(@Nullable String servicePath) {
            this.servicePath = Codegen.ofNullable(servicePath);
            return this;
        }
        public Builder shuffleServicePath(@Nullable Output<String> shuffleServicePath) {
            this.shuffleServicePath = shuffleServicePath;
            return this;
        }
        public Builder shuffleServicePath(@Nullable String shuffleServicePath) {
            this.shuffleServicePath = Codegen.ofNullable(shuffleServicePath);
            return this;
        }
        public Builder tempStoragePrefix(@Nullable Output<String> tempStoragePrefix) {
            this.tempStoragePrefix = tempStoragePrefix;
            return this;
        }
        public Builder tempStoragePrefix(@Nullable String tempStoragePrefix) {
            this.tempStoragePrefix = Codegen.ofNullable(tempStoragePrefix);
            return this;
        }
        public Builder workerId(@Nullable Output<String> workerId) {
            this.workerId = workerId;
            return this;
        }
        public Builder workerId(@Nullable String workerId) {
            this.workerId = Codegen.ofNullable(workerId);
            return this;
        }        public WorkerSettingsArgs build() {
            return new WorkerSettingsArgs(baseUrl, reportingEnabled, servicePath, shuffleServicePath, tempStoragePrefix, workerId);
        }
    }
}
