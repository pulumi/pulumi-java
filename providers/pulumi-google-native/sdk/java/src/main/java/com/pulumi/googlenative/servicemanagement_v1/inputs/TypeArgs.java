// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.enums.TypeSyntax;
import com.pulumi.googlenative.servicemanagement_v1.inputs.FieldArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.OptionArgs;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SourceContextArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A protocol buffer message type.
 * 
 */
public final class TypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final TypeArgs Empty = new TypeArgs();

    /**
     * The list of fields.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<FieldArgs>> fields;

    public Optional<Output<List<FieldArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The fully qualified message name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The list of types appearing in `oneof` definitions in this type.
     * 
     */
    @Import(name="oneofs")
    private @Nullable Output<List<String>> oneofs;

    public Optional<Output<List<String>>> oneofs() {
        return Optional.ofNullable(this.oneofs);
    }

    /**
     * The protocol buffer options.
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<OptionArgs>> options;

    public Optional<Output<List<OptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The source context.
     * 
     */
    @Import(name="sourceContext")
    private @Nullable Output<SourceContextArgs> sourceContext;

    public Optional<Output<SourceContextArgs>> sourceContext() {
        return Optional.ofNullable(this.sourceContext);
    }

    /**
     * The source syntax.
     * 
     */
    @Import(name="syntax")
    private @Nullable Output<TypeSyntax> syntax;

    public Optional<Output<TypeSyntax>> syntax() {
        return Optional.ofNullable(this.syntax);
    }

    private TypeArgs() {}

    private TypeArgs(TypeArgs $) {
        this.fields = $.fields;
        this.name = $.name;
        this.oneofs = $.oneofs;
        this.options = $.options;
        this.sourceContext = $.sourceContext;
        this.syntax = $.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TypeArgs $;

        public Builder() {
            $ = new TypeArgs();
        }

        public Builder(TypeArgs defaults) {
            $ = new TypeArgs(Objects.requireNonNull(defaults));
        }

        public Builder fields(@Nullable Output<List<FieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<FieldArgs> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(FieldArgs... fields) {
            return fields(List.of(fields));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder oneofs(@Nullable Output<List<String>> oneofs) {
            $.oneofs = oneofs;
            return this;
        }

        public Builder oneofs(List<String> oneofs) {
            return oneofs(Output.of(oneofs));
        }

        public Builder oneofs(String... oneofs) {
            return oneofs(List.of(oneofs));
        }

        public Builder options(@Nullable Output<List<OptionArgs>> options) {
            $.options = options;
            return this;
        }

        public Builder options(List<OptionArgs> options) {
            return options(Output.of(options));
        }

        public Builder options(OptionArgs... options) {
            return options(List.of(options));
        }

        public Builder sourceContext(@Nullable Output<SourceContextArgs> sourceContext) {
            $.sourceContext = sourceContext;
            return this;
        }

        public Builder sourceContext(SourceContextArgs sourceContext) {
            return sourceContext(Output.of(sourceContext));
        }

        public Builder syntax(@Nullable Output<TypeSyntax> syntax) {
            $.syntax = syntax;
            return this;
        }

        public Builder syntax(TypeSyntax syntax) {
            return syntax(Output.of(syntax));
        }

        public TypeArgs build() {
            return $;
        }
    }

}
