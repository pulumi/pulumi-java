// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1.enums;

import com.pulumi.core.annotations.EnumType;
import java.lang.String;
import java.util.Objects;
import java.util.StringJoiner;

    /**
     * Security (HTTPS) enforcement for this URL.
     * 
     */
    @EnumType
    public enum ApiConfigHandlerSecurityLevel {
        /**
         * Not specified.
         * 
         */
        SecureUnspecified("SECURE_UNSPECIFIED"),
        /**
         * Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects. The application can examine the request to determine which protocol was used, and respond accordingly.
         * 
         */
        SecureDefault("SECURE_DEFAULT"),
        /**
         * Requests for a URL that match this handler that use HTTPS are automatically redirected to the HTTP equivalent URL.
         * 
         */
        SecureNever("SECURE_NEVER"),
        /**
         * Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects. The application can examine the request to determine which protocol was used and respond accordingly.
         * 
         */
        SecureOptional("SECURE_OPTIONAL"),
        /**
         * Requests for a URL that match this handler that do not use HTTPS are automatically redirected to the HTTPS URL with the same path. Query parameters are reserved for the redirect.
         * 
         */
        SecureAlways("SECURE_ALWAYS");

        private final String value;

        ApiConfigHandlerSecurityLevel(String value) {
            this.value = Objects.requireNonNull(value);
        }

        @EnumType.Converter
        public String getValue() {
            return this.value;
        }

        @Override
        public String toString() {
            return new StringJoiner(", ", "ApiConfigHandlerSecurityLevel[", "]")
                .add("value='" + this.value + "'")
                .toString();
        }
    }
