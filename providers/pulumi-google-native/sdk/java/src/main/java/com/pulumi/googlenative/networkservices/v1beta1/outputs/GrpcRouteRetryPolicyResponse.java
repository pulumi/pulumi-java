// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GrpcRouteRetryPolicyResponse {
    /**
     * @return Specifies the allowed number of retries. This number must be &gt; 0. If not specpfied, default to 1.
     * 
     */
    private final Integer numRetries;
    /**
     * @return - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
     * 
     */
    private final List<String> retryConditions;

    @CustomType.Constructor
    private GrpcRouteRetryPolicyResponse(
        @CustomType.Parameter("numRetries") Integer numRetries,
        @CustomType.Parameter("retryConditions") List<String> retryConditions) {
        this.numRetries = numRetries;
        this.retryConditions = retryConditions;
    }

    /**
     * @return Specifies the allowed number of retries. This number must be &gt; 0. If not specpfied, default to 1.
     * 
     */
    public Integer numRetries() {
        return this.numRetries;
    }
    /**
     * @return - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
     * 
     */
    public List<String> retryConditions() {
        return this.retryConditions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GrpcRouteRetryPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer numRetries;
        private List<String> retryConditions;

        public Builder() {
    	      // Empty
        }

        public Builder(GrpcRouteRetryPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.numRetries = defaults.numRetries;
    	      this.retryConditions = defaults.retryConditions;
        }

        public Builder numRetries(Integer numRetries) {
            this.numRetries = Objects.requireNonNull(numRetries);
            return this;
        }
        public Builder retryConditions(List<String> retryConditions) {
            this.retryConditions = Objects.requireNonNull(retryConditions);
            return this;
        }
        public Builder retryConditions(String... retryConditions) {
            return retryConditions(List.of(retryConditions));
        }        public GrpcRouteRetryPolicyResponse build() {
            return new GrpcRouteRetryPolicyResponse(numRetries, retryConditions);
        }
    }
}
