// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudfunctions_v1.inputs.FailurePolicyResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Describes EventTrigger, used to request events be sent from another service.
 * 
 */
public final class EventTriggerResponse extends com.pulumi.resources.InvokeArgs {

    public static final EventTriggerResponse Empty = new EventTriggerResponse();

    /**
     * The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*{@literal /}eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is &#39;change&#39;. These parts are lower case.
     * 
     */
    @Import(name="eventType", required=true)
    private String eventType;

    public String eventType() {
        return this.eventType;
    }

    /**
     * Specifies policy for failed executions.
     * 
     */
    @Import(name="failurePolicy", required=true)
    private FailurePolicyResponse failurePolicy;

    public FailurePolicyResponse failurePolicy() {
        return this.failurePolicy;
    }

    /**
     * The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of &#34;google.pubsub.topic.publish&#34; should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized &#34;long&#34; format. See each *service&#39;s* documentation for supported formats.
     * 
     */
    @Import(name="resource", required=true)
    private String resource;

    public String resource() {
        return this.resource;
    }

    /**
     * The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
     * 
     */
    @Import(name="service", required=true)
    private String service;

    public String service() {
        return this.service;
    }

    private EventTriggerResponse() {}

    private EventTriggerResponse(EventTriggerResponse $) {
        this.eventType = $.eventType;
        this.failurePolicy = $.failurePolicy;
        this.resource = $.resource;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventTriggerResponse $;

        public Builder() {
            $ = new EventTriggerResponse();
        }

        public Builder(EventTriggerResponse defaults) {
            $ = new EventTriggerResponse(Objects.requireNonNull(defaults));
        }

        public Builder eventType(String eventType) {
            $.eventType = eventType;
            return this;
        }

        public Builder failurePolicy(FailurePolicyResponse failurePolicy) {
            $.failurePolicy = failurePolicy;
            return this;
        }

        public Builder resource(String resource) {
            $.resource = resource;
            return this;
        }

        public Builder service(String service) {
            $.service = service;
            return this;
        }

        public EventTriggerResponse build() {
            $.eventType = Objects.requireNonNull($.eventType, "expected parameter 'eventType' to be non-null");
            $.failurePolicy = Objects.requireNonNull($.failurePolicy, "expected parameter 'failurePolicy' to be non-null");
            $.resource = Objects.requireNonNull($.resource, "expected parameter 'resource' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
