// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder.v1.inputs.AudioArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.ColorArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.CropArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.DeblockArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.DenoiseArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.PadArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Preprocessing configurations.
 * 
 */
public final class PreprocessingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreprocessingConfigArgs Empty = new PreprocessingConfigArgs();

    /**
     * Audio preprocessing configuration.
     * 
     */
    @Import(name="audio")
    private @Nullable Output<AudioArgs> audio;

    /**
     * @return Audio preprocessing configuration.
     * 
     */
    public Optional<Output<AudioArgs>> audio() {
        return Optional.ofNullable(this.audio);
    }

    /**
     * Color preprocessing configuration.
     * 
     */
    @Import(name="color")
    private @Nullable Output<ColorArgs> color;

    /**
     * @return Color preprocessing configuration.
     * 
     */
    public Optional<Output<ColorArgs>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Specify the video cropping configuration.
     * 
     */
    @Import(name="crop")
    private @Nullable Output<CropArgs> crop;

    /**
     * @return Specify the video cropping configuration.
     * 
     */
    public Optional<Output<CropArgs>> crop() {
        return Optional.ofNullable(this.crop);
    }

    /**
     * Deblock preprocessing configuration.
     * 
     */
    @Import(name="deblock")
    private @Nullable Output<DeblockArgs> deblock;

    /**
     * @return Deblock preprocessing configuration.
     * 
     */
    public Optional<Output<DeblockArgs>> deblock() {
        return Optional.ofNullable(this.deblock);
    }

    /**
     * Denoise preprocessing configuration.
     * 
     */
    @Import(name="denoise")
    private @Nullable Output<DenoiseArgs> denoise;

    /**
     * @return Denoise preprocessing configuration.
     * 
     */
    public Optional<Output<DenoiseArgs>> denoise() {
        return Optional.ofNullable(this.denoise);
    }

    /**
     * Specify the video pad filter configuration.
     * 
     */
    @Import(name="pad")
    private @Nullable Output<PadArgs> pad;

    /**
     * @return Specify the video pad filter configuration.
     * 
     */
    public Optional<Output<PadArgs>> pad() {
        return Optional.ofNullable(this.pad);
    }

    private PreprocessingConfigArgs() {}

    private PreprocessingConfigArgs(PreprocessingConfigArgs $) {
        this.audio = $.audio;
        this.color = $.color;
        this.crop = $.crop;
        this.deblock = $.deblock;
        this.denoise = $.denoise;
        this.pad = $.pad;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreprocessingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreprocessingConfigArgs $;

        public Builder() {
            $ = new PreprocessingConfigArgs();
        }

        public Builder(PreprocessingConfigArgs defaults) {
            $ = new PreprocessingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audio Audio preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder audio(@Nullable Output<AudioArgs> audio) {
            $.audio = audio;
            return this;
        }

        /**
         * @param audio Audio preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder audio(AudioArgs audio) {
            return audio(Output.of(audio));
        }

        /**
         * @param color Color preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<ColorArgs> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color Color preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder color(ColorArgs color) {
            return color(Output.of(color));
        }

        /**
         * @param crop Specify the video cropping configuration.
         * 
         * @return builder
         * 
         */
        public Builder crop(@Nullable Output<CropArgs> crop) {
            $.crop = crop;
            return this;
        }

        /**
         * @param crop Specify the video cropping configuration.
         * 
         * @return builder
         * 
         */
        public Builder crop(CropArgs crop) {
            return crop(Output.of(crop));
        }

        /**
         * @param deblock Deblock preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder deblock(@Nullable Output<DeblockArgs> deblock) {
            $.deblock = deblock;
            return this;
        }

        /**
         * @param deblock Deblock preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder deblock(DeblockArgs deblock) {
            return deblock(Output.of(deblock));
        }

        /**
         * @param denoise Denoise preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder denoise(@Nullable Output<DenoiseArgs> denoise) {
            $.denoise = denoise;
            return this;
        }

        /**
         * @param denoise Denoise preprocessing configuration.
         * 
         * @return builder
         * 
         */
        public Builder denoise(DenoiseArgs denoise) {
            return denoise(Output.of(denoise));
        }

        /**
         * @param pad Specify the video pad filter configuration.
         * 
         * @return builder
         * 
         */
        public Builder pad(@Nullable Output<PadArgs> pad) {
            $.pad = pad;
            return this;
        }

        /**
         * @param pad Specify the video pad filter configuration.
         * 
         * @return builder
         * 
         */
        public Builder pad(PadArgs pad) {
            return pad(Output.of(pad));
        }

        public PreprocessingConfigArgs build() {
            return $;
        }
    }

}
