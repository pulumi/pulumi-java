// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Additional details about the progress of the running test.
 * 
 */
public final class TestDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final TestDetailsResponse Empty = new TestDetailsResponse();

    /**
     * If the TestState is ERROR, then this string will contain human-readable details about the error.
     * 
     */
    @Import(name="errorMessage", required=true)
    private String errorMessage;

    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Human-readable, detailed descriptions of the test&#39;s progress. For example: &#34;Provisioning a device&#34;, &#34;Starting Test&#34;. During the course of execution new data may be appended to the end of progress_messages.
     * 
     */
    @Import(name="progressMessages", required=true)
    private List<String> progressMessages;

    public List<String> progressMessages() {
        return this.progressMessages;
    }

    private TestDetailsResponse() {}

    private TestDetailsResponse(TestDetailsResponse $) {
        this.errorMessage = $.errorMessage;
        this.progressMessages = $.progressMessages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestDetailsResponse $;

        public Builder() {
            $ = new TestDetailsResponse();
        }

        public Builder(TestDetailsResponse defaults) {
            $ = new TestDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder errorMessage(String errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        public Builder progressMessages(List<String> progressMessages) {
            $.progressMessages = progressMessages;
            return this;
        }

        public Builder progressMessages(String... progressMessages) {
            return progressMessages(List.of(progressMessages));
        }

        public TestDetailsResponse build() {
            $.errorMessage = Objects.requireNonNull($.errorMessage, "expected parameter 'errorMessage' to be non-null");
            $.progressMessages = Objects.requireNonNull($.progressMessages, "expected parameter 'progressMessages' to be non-null");
            return $;
        }
    }

}
