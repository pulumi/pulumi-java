// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: &#34;mybucket&#34;, include_regex: [&#34;directory1/.*&#34;], exclude_regex: [&#34;directory1/excluded.*&#34;]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn&#39;t match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [&#34;.*&#34;]`). Some other common use cases: * `{bucket_name: &#34;mybucket&#34;, exclude_regex: [&#34;.*\.pdf&#34;]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: &#34;mybucket&#34;, include_regex: [&#34;directory/[^/]+&#34;]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
 * 
 */
public final class GooglePrivacyDlpV2CloudStorageRegexFileSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2CloudStorageRegexFileSetArgs Empty = new GooglePrivacyDlpV2CloudStorageRegexFileSetArgs();

    /**
     * The name of a Cloud Storage bucket. Required.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return The name of a Cloud Storage bucket. Required.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
     * 
     */
    @Import(name="excludeRegex")
    private @Nullable Output<List<String>> excludeRegex;

    /**
     * @return A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
     * 
     */
    public Optional<Output<List<String>>> excludeRegex() {
        return Optional.ofNullable(this.excludeRegex);
    }

    /**
     * A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
     * 
     */
    @Import(name="includeRegex")
    private @Nullable Output<List<String>> includeRegex;

    /**
     * @return A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
     * 
     */
    public Optional<Output<List<String>>> includeRegex() {
        return Optional.ofNullable(this.includeRegex);
    }

    private GooglePrivacyDlpV2CloudStorageRegexFileSetArgs() {}

    private GooglePrivacyDlpV2CloudStorageRegexFileSetArgs(GooglePrivacyDlpV2CloudStorageRegexFileSetArgs $) {
        this.bucketName = $.bucketName;
        this.excludeRegex = $.excludeRegex;
        this.includeRegex = $.includeRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CloudStorageRegexFileSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CloudStorageRegexFileSetArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CloudStorageRegexFileSetArgs();
        }

        public Builder(GooglePrivacyDlpV2CloudStorageRegexFileSetArgs defaults) {
            $ = new GooglePrivacyDlpV2CloudStorageRegexFileSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName The name of a Cloud Storage bucket. Required.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of a Cloud Storage bucket. Required.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param excludeRegex A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
         * 
         * @return builder
         * 
         */
        public Builder excludeRegex(@Nullable Output<List<String>> excludeRegex) {
            $.excludeRegex = excludeRegex;
            return this;
        }

        /**
         * @param excludeRegex A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
         * 
         * @return builder
         * 
         */
        public Builder excludeRegex(List<String> excludeRegex) {
            return excludeRegex(Output.of(excludeRegex));
        }

        /**
         * @param excludeRegex A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
         * 
         * @return builder
         * 
         */
        public Builder excludeRegex(String... excludeRegex) {
            return excludeRegex(List.of(excludeRegex));
        }

        /**
         * @param includeRegex A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
         * 
         * @return builder
         * 
         */
        public Builder includeRegex(@Nullable Output<List<String>> includeRegex) {
            $.includeRegex = includeRegex;
            return this;
        }

        /**
         * @param includeRegex A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
         * 
         * @return builder
         * 
         */
        public Builder includeRegex(List<String> includeRegex) {
            return includeRegex(Output.of(includeRegex));
        }

        /**
         * @param includeRegex A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
         * 
         * @return builder
         * 
         */
        public Builder includeRegex(String... includeRegex) {
            return includeRegex(List.of(includeRegex));
        }

        public GooglePrivacyDlpV2CloudStorageRegexFileSetArgs build() {
            return $;
        }
    }

}
