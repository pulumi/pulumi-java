// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class TimePartitioningResponse extends com.pulumi.resources.InvokeArgs {

    public static final TimePartitioningResponse Empty = new TimePartitioningResponse();

    /**
     * [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
     * 
     */
    @Import(name="expirationMs", required=true)
    private String expirationMs;

    /**
     * @return [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
     * 
     */
    public String expirationMs() {
        return this.expirationMs;
    }

    /**
     * [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either &#39;_PARTITIONTIME&#39; as TIMESTAMP type, or &#39;_PARTITIONDATE&#39; as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
     * 
     */
    @Import(name="field", required=true)
    private String field;

    /**
     * @return [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either &#39;_PARTITIONTIME&#39; as TIMESTAMP type, or &#39;_PARTITIONDATE&#39; as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
     * 
     */
    public String field() {
        return this.field;
    }

    @Import(name="requirePartitionFilter", required=true)
    private Boolean requirePartitionFilter;

    public Boolean requirePartitionFilter() {
        return this.requirePartitionFilter;
    }

    /**
     * [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
     * 
     */
    public String type() {
        return this.type;
    }

    private TimePartitioningResponse() {}

    private TimePartitioningResponse(TimePartitioningResponse $) {
        this.expirationMs = $.expirationMs;
        this.field = $.field;
        this.requirePartitionFilter = $.requirePartitionFilter;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimePartitioningResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimePartitioningResponse $;

        public Builder() {
            $ = new TimePartitioningResponse();
        }

        public Builder(TimePartitioningResponse defaults) {
            $ = new TimePartitioningResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param expirationMs [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
         * 
         * @return builder
         * 
         */
        public Builder expirationMs(String expirationMs) {
            $.expirationMs = expirationMs;
            return this;
        }

        /**
         * @param field [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either &#39;_PARTITIONTIME&#39; as TIMESTAMP type, or &#39;_PARTITIONDATE&#39; as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            $.field = field;
            return this;
        }

        public Builder requirePartitionFilter(Boolean requirePartitionFilter) {
            $.requirePartitionFilter = requirePartitionFilter;
            return this;
        }

        /**
         * @param type [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public TimePartitioningResponse build() {
            $.expirationMs = Objects.requireNonNull($.expirationMs, "expected parameter 'expirationMs' to be non-null");
            $.field = Objects.requireNonNull($.field, "expected parameter 'field' to be non-null");
            $.requirePartitionFilter = Objects.requireNonNull($.requirePartitionFilter, "expected parameter 'requirePartitionFilter' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
