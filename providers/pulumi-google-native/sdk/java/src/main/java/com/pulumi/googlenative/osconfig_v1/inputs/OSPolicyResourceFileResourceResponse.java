// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig_v1.inputs.OSPolicyResourceFileResponse;
import java.lang.String;
import java.util.Objects;


/**
 * A resource that manages the state of a file.
 * 
 */
public final class OSPolicyResourceFileResourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final OSPolicyResourceFileResourceResponse Empty = new OSPolicyResourceFileResourceResponse();

    /**
     * A a file with this content. The size of the content is limited to 1024 characters.
     * 
     */
    @Import(name="content", required=true)
    private String content;

    /**
     * @return A a file with this content. The size of the content is limited to 1024 characters.
     * 
     */
    public String content() {
        return this.content;
    }

    /**
     * A remote or local source.
     * 
     */
    @Import(name="file", required=true)
    private OSPolicyResourceFileResponse file;

    /**
     * @return A remote or local source.
     * 
     */
    public OSPolicyResourceFileResponse file() {
        return this.file;
    }

    /**
     * The absolute path of the file within the VM.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return The absolute path of the file within the VM.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     * 
     */
    @Import(name="permissions", required=true)
    private String permissions;

    /**
     * @return Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     * 
     */
    public String permissions() {
        return this.permissions;
    }

    /**
     * Desired state of the file.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Desired state of the file.
     * 
     */
    public String state() {
        return this.state;
    }

    private OSPolicyResourceFileResourceResponse() {}

    private OSPolicyResourceFileResourceResponse(OSPolicyResourceFileResourceResponse $) {
        this.content = $.content;
        this.file = $.file;
        this.path = $.path;
        this.permissions = $.permissions;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OSPolicyResourceFileResourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OSPolicyResourceFileResourceResponse $;

        public Builder() {
            $ = new OSPolicyResourceFileResourceResponse();
        }

        public Builder(OSPolicyResourceFileResourceResponse defaults) {
            $ = new OSPolicyResourceFileResourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param content A a file with this content. The size of the content is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            $.content = content;
            return this;
        }

        /**
         * @param file A remote or local source.
         * 
         * @return builder
         * 
         */
        public Builder file(OSPolicyResourceFileResponse file) {
            $.file = file;
            return this;
        }

        /**
         * @param path The absolute path of the file within the VM.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param permissions Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param state Desired state of the file.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public OSPolicyResourceFileResourceResponse build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.file = Objects.requireNonNull($.file, "expected parameter 'file' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
