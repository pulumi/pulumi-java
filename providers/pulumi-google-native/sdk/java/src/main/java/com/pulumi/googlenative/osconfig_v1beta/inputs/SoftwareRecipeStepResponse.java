// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepCopyFileResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepExecFileResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepExtractArchiveResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepInstallDpkgResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepInstallMsiResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepInstallRpmResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepRunScriptResponse;
import java.util.Objects;


/**
 * An action that can be taken as part of installing or updating a recipe.
 * 
 */
public final class SoftwareRecipeStepResponse extends com.pulumi.resources.InvokeArgs {

    public static final SoftwareRecipeStepResponse Empty = new SoftwareRecipeStepResponse();

    /**
     * Extracts an archive into the specified directory.
     * 
     */
    @Import(name="archiveExtraction", required=true)
    private SoftwareRecipeStepExtractArchiveResponse archiveExtraction;

    /**
     * @return Extracts an archive into the specified directory.
     * 
     */
    public SoftwareRecipeStepExtractArchiveResponse archiveExtraction() {
        return this.archiveExtraction;
    }

    /**
     * Installs a deb file via dpkg.
     * 
     */
    @Import(name="dpkgInstallation", required=true)
    private SoftwareRecipeStepInstallDpkgResponse dpkgInstallation;

    /**
     * @return Installs a deb file via dpkg.
     * 
     */
    public SoftwareRecipeStepInstallDpkgResponse dpkgInstallation() {
        return this.dpkgInstallation;
    }

    /**
     * Copies a file onto the instance.
     * 
     */
    @Import(name="fileCopy", required=true)
    private SoftwareRecipeStepCopyFileResponse fileCopy;

    /**
     * @return Copies a file onto the instance.
     * 
     */
    public SoftwareRecipeStepCopyFileResponse fileCopy() {
        return this.fileCopy;
    }

    /**
     * Executes an artifact or local file.
     * 
     */
    @Import(name="fileExec", required=true)
    private SoftwareRecipeStepExecFileResponse fileExec;

    /**
     * @return Executes an artifact or local file.
     * 
     */
    public SoftwareRecipeStepExecFileResponse fileExec() {
        return this.fileExec;
    }

    /**
     * Installs an MSI file.
     * 
     */
    @Import(name="msiInstallation", required=true)
    private SoftwareRecipeStepInstallMsiResponse msiInstallation;

    /**
     * @return Installs an MSI file.
     * 
     */
    public SoftwareRecipeStepInstallMsiResponse msiInstallation() {
        return this.msiInstallation;
    }

    /**
     * Installs an rpm file via the rpm utility.
     * 
     */
    @Import(name="rpmInstallation", required=true)
    private SoftwareRecipeStepInstallRpmResponse rpmInstallation;

    /**
     * @return Installs an rpm file via the rpm utility.
     * 
     */
    public SoftwareRecipeStepInstallRpmResponse rpmInstallation() {
        return this.rpmInstallation;
    }

    /**
     * Runs commands in a shell.
     * 
     */
    @Import(name="scriptRun", required=true)
    private SoftwareRecipeStepRunScriptResponse scriptRun;

    /**
     * @return Runs commands in a shell.
     * 
     */
    public SoftwareRecipeStepRunScriptResponse scriptRun() {
        return this.scriptRun;
    }

    private SoftwareRecipeStepResponse() {}

    private SoftwareRecipeStepResponse(SoftwareRecipeStepResponse $) {
        this.archiveExtraction = $.archiveExtraction;
        this.dpkgInstallation = $.dpkgInstallation;
        this.fileCopy = $.fileCopy;
        this.fileExec = $.fileExec;
        this.msiInstallation = $.msiInstallation;
        this.rpmInstallation = $.rpmInstallation;
        this.scriptRun = $.scriptRun;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareRecipeStepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareRecipeStepResponse $;

        public Builder() {
            $ = new SoftwareRecipeStepResponse();
        }

        public Builder(SoftwareRecipeStepResponse defaults) {
            $ = new SoftwareRecipeStepResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveExtraction Extracts an archive into the specified directory.
         * 
         * @return builder
         * 
         */
        public Builder archiveExtraction(SoftwareRecipeStepExtractArchiveResponse archiveExtraction) {
            $.archiveExtraction = archiveExtraction;
            return this;
        }

        /**
         * @param dpkgInstallation Installs a deb file via dpkg.
         * 
         * @return builder
         * 
         */
        public Builder dpkgInstallation(SoftwareRecipeStepInstallDpkgResponse dpkgInstallation) {
            $.dpkgInstallation = dpkgInstallation;
            return this;
        }

        /**
         * @param fileCopy Copies a file onto the instance.
         * 
         * @return builder
         * 
         */
        public Builder fileCopy(SoftwareRecipeStepCopyFileResponse fileCopy) {
            $.fileCopy = fileCopy;
            return this;
        }

        /**
         * @param fileExec Executes an artifact or local file.
         * 
         * @return builder
         * 
         */
        public Builder fileExec(SoftwareRecipeStepExecFileResponse fileExec) {
            $.fileExec = fileExec;
            return this;
        }

        /**
         * @param msiInstallation Installs an MSI file.
         * 
         * @return builder
         * 
         */
        public Builder msiInstallation(SoftwareRecipeStepInstallMsiResponse msiInstallation) {
            $.msiInstallation = msiInstallation;
            return this;
        }

        /**
         * @param rpmInstallation Installs an rpm file via the rpm utility.
         * 
         * @return builder
         * 
         */
        public Builder rpmInstallation(SoftwareRecipeStepInstallRpmResponse rpmInstallation) {
            $.rpmInstallation = rpmInstallation;
            return this;
        }

        /**
         * @param scriptRun Runs commands in a shell.
         * 
         * @return builder
         * 
         */
        public Builder scriptRun(SoftwareRecipeStepRunScriptResponse scriptRun) {
            $.scriptRun = scriptRun;
            return this;
        }

        public SoftwareRecipeStepResponse build() {
            $.archiveExtraction = Objects.requireNonNull($.archiveExtraction, "expected parameter 'archiveExtraction' to be non-null");
            $.dpkgInstallation = Objects.requireNonNull($.dpkgInstallation, "expected parameter 'dpkgInstallation' to be non-null");
            $.fileCopy = Objects.requireNonNull($.fileCopy, "expected parameter 'fileCopy' to be non-null");
            $.fileExec = Objects.requireNonNull($.fileExec, "expected parameter 'fileExec' to be non-null");
            $.msiInstallation = Objects.requireNonNull($.msiInstallation, "expected parameter 'msiInstallation' to be non-null");
            $.rpmInstallation = Objects.requireNonNull($.rpmInstallation, "expected parameter 'rpmInstallation' to be non-null");
            $.scriptRun = Objects.requireNonNull($.scriptRun, "expected parameter 'scriptRun' to be non-null");
            return $;
        }
    }

}
