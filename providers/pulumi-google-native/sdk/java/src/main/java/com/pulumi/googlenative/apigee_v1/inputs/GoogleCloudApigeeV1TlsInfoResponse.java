// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.apigee_v1.inputs.GoogleCloudApigeeV1TlsInfoCommonNameResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * TLS configuration information for virtual hosts and TargetServers.
 * 
 */
public final class GoogleCloudApigeeV1TlsInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudApigeeV1TlsInfoResponse Empty = new GoogleCloudApigeeV1TlsInfoResponse();

    /**
     * The SSL/TLS cipher suites to be used. Must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites
     * 
     */
    @Import(name="ciphers", required=true)
    private List<String> ciphers;

    public List<String> ciphers() {
        return this.ciphers;
    }

    /**
     * Optional. Enables two-way TLS.
     * 
     */
    @Import(name="clientAuthEnabled", required=true)
    private Boolean clientAuthEnabled;

    public Boolean clientAuthEnabled() {
        return this.clientAuthEnabled;
    }

    /**
     * The TLS Common Name of the certificate.
     * 
     */
    @Import(name="commonName", required=true)
    private GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName;

    public GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName() {
        return this.commonName;
    }

    /**
     * Enables TLS. If false, neither one-way nor two-way TLS will be enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
     * 
     */
    @Import(name="ignoreValidationErrors", required=true)
    private Boolean ignoreValidationErrors;

    public Boolean ignoreValidationErrors() {
        return this.ignoreValidationErrors;
    }

    /**
     * Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.
     * 
     */
    @Import(name="keyAlias", required=true)
    private String keyAlias;

    public String keyAlias() {
        return this.keyAlias;
    }

    /**
     * Required if `client_auth_enabled` is true. The resource ID of the keystore.
     * 
     */
    @Import(name="keyStore", required=true)
    private String keyStore;

    public String keyStore() {
        return this.keyStore;
    }

    /**
     * The TLS versioins to be used.
     * 
     */
    @Import(name="protocols", required=true)
    private List<String> protocols;

    public List<String> protocols() {
        return this.protocols;
    }

    /**
     * The resource ID of the truststore.
     * 
     */
    @Import(name="trustStore", required=true)
    private String trustStore;

    public String trustStore() {
        return this.trustStore;
    }

    private GoogleCloudApigeeV1TlsInfoResponse() {}

    private GoogleCloudApigeeV1TlsInfoResponse(GoogleCloudApigeeV1TlsInfoResponse $) {
        this.ciphers = $.ciphers;
        this.clientAuthEnabled = $.clientAuthEnabled;
        this.commonName = $.commonName;
        this.enabled = $.enabled;
        this.ignoreValidationErrors = $.ignoreValidationErrors;
        this.keyAlias = $.keyAlias;
        this.keyStore = $.keyStore;
        this.protocols = $.protocols;
        this.trustStore = $.trustStore;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudApigeeV1TlsInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudApigeeV1TlsInfoResponse $;

        public Builder() {
            $ = new GoogleCloudApigeeV1TlsInfoResponse();
        }

        public Builder(GoogleCloudApigeeV1TlsInfoResponse defaults) {
            $ = new GoogleCloudApigeeV1TlsInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder ciphers(List<String> ciphers) {
            $.ciphers = ciphers;
            return this;
        }

        public Builder ciphers(String... ciphers) {
            return ciphers(List.of(ciphers));
        }

        public Builder clientAuthEnabled(Boolean clientAuthEnabled) {
            $.clientAuthEnabled = clientAuthEnabled;
            return this;
        }

        public Builder commonName(GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName) {
            $.commonName = commonName;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder ignoreValidationErrors(Boolean ignoreValidationErrors) {
            $.ignoreValidationErrors = ignoreValidationErrors;
            return this;
        }

        public Builder keyAlias(String keyAlias) {
            $.keyAlias = keyAlias;
            return this;
        }

        public Builder keyStore(String keyStore) {
            $.keyStore = keyStore;
            return this;
        }

        public Builder protocols(List<String> protocols) {
            $.protocols = protocols;
            return this;
        }

        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        public Builder trustStore(String trustStore) {
            $.trustStore = trustStore;
            return this;
        }

        public GoogleCloudApigeeV1TlsInfoResponse build() {
            $.ciphers = Objects.requireNonNull($.ciphers, "expected parameter 'ciphers' to be non-null");
            $.clientAuthEnabled = Objects.requireNonNull($.clientAuthEnabled, "expected parameter 'clientAuthEnabled' to be non-null");
            $.commonName = Objects.requireNonNull($.commonName, "expected parameter 'commonName' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.ignoreValidationErrors = Objects.requireNonNull($.ignoreValidationErrors, "expected parameter 'ignoreValidationErrors' to be non-null");
            $.keyAlias = Objects.requireNonNull($.keyAlias, "expected parameter 'keyAlias' to be non-null");
            $.keyStore = Objects.requireNonNull($.keyStore, "expected parameter 'keyStore' to be non-null");
            $.protocols = Objects.requireNonNull($.protocols, "expected parameter 'protocols' to be non-null");
            $.trustStore = Objects.requireNonNull($.trustStore, "expected parameter 'trustStore' to be non-null");
            return $;
        }
    }

}
