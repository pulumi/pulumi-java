// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.servicemanagement.v1.outputs.AuthRequirementResponse;
import com.pulumi.googlenative.servicemanagement.v1.outputs.OAuthRequirementsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AuthenticationRuleResponse {
    /**
     * @return If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
     * 
     */
    private final Boolean allowWithoutCredential;
    /**
     * @return The requirements for OAuth credentials.
     * 
     */
    private final OAuthRequirementsResponse oauth;
    /**
     * @return Requirements for additional authentication providers.
     * 
     */
    private final List<AuthRequirementResponse> requirements;
    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    private final String selector;

    @CustomType.Constructor
    private AuthenticationRuleResponse(
        @CustomType.Parameter("allowWithoutCredential") Boolean allowWithoutCredential,
        @CustomType.Parameter("oauth") OAuthRequirementsResponse oauth,
        @CustomType.Parameter("requirements") List<AuthRequirementResponse> requirements,
        @CustomType.Parameter("selector") String selector) {
        this.allowWithoutCredential = allowWithoutCredential;
        this.oauth = oauth;
        this.requirements = requirements;
        this.selector = selector;
    }

    /**
     * @return If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
     * 
     */
    public Boolean allowWithoutCredential() {
        return this.allowWithoutCredential;
    }
    /**
     * @return The requirements for OAuth credentials.
     * 
     */
    public OAuthRequirementsResponse oauth() {
        return this.oauth;
    }
    /**
     * @return Requirements for additional authentication providers.
     * 
     */
    public List<AuthRequirementResponse> requirements() {
        return this.requirements;
    }
    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public String selector() {
        return this.selector;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthenticationRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowWithoutCredential;
        private OAuthRequirementsResponse oauth;
        private List<AuthRequirementResponse> requirements;
        private String selector;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthenticationRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowWithoutCredential = defaults.allowWithoutCredential;
    	      this.oauth = defaults.oauth;
    	      this.requirements = defaults.requirements;
    	      this.selector = defaults.selector;
        }

        public Builder allowWithoutCredential(Boolean allowWithoutCredential) {
            this.allowWithoutCredential = Objects.requireNonNull(allowWithoutCredential);
            return this;
        }
        public Builder oauth(OAuthRequirementsResponse oauth) {
            this.oauth = Objects.requireNonNull(oauth);
            return this;
        }
        public Builder requirements(List<AuthRequirementResponse> requirements) {
            this.requirements = Objects.requireNonNull(requirements);
            return this;
        }
        public Builder requirements(AuthRequirementResponse... requirements) {
            return requirements(List.of(requirements));
        }
        public Builder selector(String selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }        public AuthenticationRuleResponse build() {
            return new AuthenticationRuleResponse(allowWithoutCredential, oauth, requirements, selector);
        }
    }
}
