// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1.enums.SchemaConfigSchemaType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
 * 
 */
public final class SchemaConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaConfigArgs Empty = new SchemaConfigArgs();

    /**
     * The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
     * 
     */
    @Import(name="recursiveStructureDepth")
    private @Nullable Output<String> recursiveStructureDepth;

    /**
     * @return The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
     * 
     */
    public Optional<Output<String>> recursiveStructureDepth() {
        return Optional.ofNullable(this.recursiveStructureDepth);
    }

    /**
     * Specifies the output schema type. Schema type is required.
     * 
     */
    @Import(name="schemaType")
    private @Nullable Output<SchemaConfigSchemaType> schemaType;

    /**
     * @return Specifies the output schema type. Schema type is required.
     * 
     */
    public Optional<Output<SchemaConfigSchemaType>> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    private SchemaConfigArgs() {}

    private SchemaConfigArgs(SchemaConfigArgs $) {
        this.recursiveStructureDepth = $.recursiveStructureDepth;
        this.schemaType = $.schemaType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaConfigArgs $;

        public Builder() {
            $ = new SchemaConfigArgs();
        }

        public Builder(SchemaConfigArgs defaults) {
            $ = new SchemaConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recursiveStructureDepth The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
         * 
         * @return builder
         * 
         */
        public Builder recursiveStructureDepth(@Nullable Output<String> recursiveStructureDepth) {
            $.recursiveStructureDepth = recursiveStructureDepth;
            return this;
        }

        /**
         * @param recursiveStructureDepth The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
         * 
         * @return builder
         * 
         */
        public Builder recursiveStructureDepth(String recursiveStructureDepth) {
            return recursiveStructureDepth(Output.of(recursiveStructureDepth));
        }

        /**
         * @param schemaType Specifies the output schema type. Schema type is required.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(@Nullable Output<SchemaConfigSchemaType> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        /**
         * @param schemaType Specifies the output schema type. Schema type is required.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(SchemaConfigSchemaType schemaType) {
            return schemaType(Output.of(schemaType));
        }

        public SchemaConfigArgs build() {
            return $;
        }
    }

}
