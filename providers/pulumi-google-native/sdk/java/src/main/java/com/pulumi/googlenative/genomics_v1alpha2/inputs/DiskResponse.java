// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.genomics_v1alpha2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A Google Compute Engine disk resource specification.
 * 
 */
public final class DiskResponse extends com.pulumi.resources.InvokeArgs {

    public static final DiskResponse Empty = new DiskResponse();

    /**
     * Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
     * 
     */
    @Import(name="mountPoint", required=true)
    private String mountPoint;

    public String mountPoint() {
        return this.mountPoint;
    }

    /**
     * The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name &#34;boot&#34; is reserved for system use.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
     * 
     */
    @Import(name="readOnly", required=true)
    private Boolean readOnly;

    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
     * 
     */
    @Import(name="sizeGb", required=true)
    private Integer sizeGb;

    public Integer sizeGb() {
        return this.sizeGb;
    }

    /**
     * The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
     * 
     */
    @Import(name="source", required=true)
    private String source;

    public String source() {
        return this.source;
    }

    /**
     * The type of the disk to create.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private DiskResponse() {}

    private DiskResponse(DiskResponse $) {
        this.mountPoint = $.mountPoint;
        this.name = $.name;
        this.readOnly = $.readOnly;
        this.sizeGb = $.sizeGb;
        this.source = $.source;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskResponse $;

        public Builder() {
            $ = new DiskResponse();
        }

        public Builder(DiskResponse defaults) {
            $ = new DiskResponse(Objects.requireNonNull(defaults));
        }

        public Builder mountPoint(String mountPoint) {
            $.mountPoint = mountPoint;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder sizeGb(Integer sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public DiskResponse build() {
            $.mountPoint = Objects.requireNonNull($.mountPoint, "expected parameter 'mountPoint' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.readOnly = Objects.requireNonNull($.readOnly, "expected parameter 'readOnly' to be non-null");
            $.sizeGb = Objects.requireNonNull($.sizeGb, "expected parameter 'sizeGb' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
