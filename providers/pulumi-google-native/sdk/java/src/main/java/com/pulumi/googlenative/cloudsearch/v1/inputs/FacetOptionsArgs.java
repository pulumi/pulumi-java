// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
 * 
 */
public final class FacetOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FacetOptionsArgs Empty = new FacetOptionsArgs();

    /**
     * Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
     * 
     */
    @Import(name="numFacetBuckets")
    private @Nullable Output<Integer> numFacetBuckets;

    /**
     * @return Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
     * 
     */
    public Optional<Output<Integer>> numFacetBuckets() {
        return Optional.ofNullable(this.numFacetBuckets);
    }

    /**
     * If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
     * 
     */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @return If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
     * 
     */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    /**
     * The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
     * 
     */
    @Import(name="operatorName")
    private @Nullable Output<String> operatorName;

    /**
     * @return The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
     * 
     */
    public Optional<Output<String>> operatorName() {
        return Optional.ofNullable(this.operatorName);
    }

    /**
     * Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
     * 
     */
    @Import(name="sourceName")
    private @Nullable Output<String> sourceName;

    /**
     * @return Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
     * 
     */
    public Optional<Output<String>> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    private FacetOptionsArgs() {}

    private FacetOptionsArgs(FacetOptionsArgs $) {
        this.numFacetBuckets = $.numFacetBuckets;
        this.objectType = $.objectType;
        this.operatorName = $.operatorName;
        this.sourceName = $.sourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FacetOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FacetOptionsArgs $;

        public Builder() {
            $ = new FacetOptionsArgs();
        }

        public Builder(FacetOptionsArgs defaults) {
            $ = new FacetOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param numFacetBuckets Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
         * 
         * @return builder
         * 
         */
        public Builder numFacetBuckets(@Nullable Output<Integer> numFacetBuckets) {
            $.numFacetBuckets = numFacetBuckets;
            return this;
        }

        /**
         * @param numFacetBuckets Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
         * 
         * @return builder
         * 
         */
        public Builder numFacetBuckets(Integer numFacetBuckets) {
            return numFacetBuckets(Output.of(numFacetBuckets));
        }

        /**
         * @param objectType If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
         * 
         * @return builder
         * 
         */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        /**
         * @param operatorName The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
         * 
         * @return builder
         * 
         */
        public Builder operatorName(@Nullable Output<String> operatorName) {
            $.operatorName = operatorName;
            return this;
        }

        /**
         * @param operatorName The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
         * 
         * @return builder
         * 
         */
        public Builder operatorName(String operatorName) {
            return operatorName(Output.of(operatorName));
        }

        /**
         * @param sourceName Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(@Nullable Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        /**
         * @param sourceName Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        public FacetOptionsArgs build() {
            return $;
        }
    }

}
