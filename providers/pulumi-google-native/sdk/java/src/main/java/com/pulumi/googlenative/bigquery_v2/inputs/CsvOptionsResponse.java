// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class CsvOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CsvOptionsResponse Empty = new CsvOptionsResponse();

    /**
     * [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
     * 
     */
    @Import(name="allowJaggedRows", required=true)
    private Boolean allowJaggedRows;

    /**
     * @return [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
     * 
     */
    public Boolean allowJaggedRows() {
        return this.allowJaggedRows;
    }

    /**
     * [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
     * 
     */
    @Import(name="allowQuotedNewlines", required=true)
    private Boolean allowQuotedNewlines;

    /**
     * @return [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
     * 
     */
    public Boolean allowQuotedNewlines() {
        return this.allowQuotedNewlines;
    }

    /**
     * [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
     * 
     */
    @Import(name="encoding", required=true)
    private String encoding;

    /**
     * @return [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
     * 
     */
    public String encoding() {
        return this.encoding;
    }

    /**
     * [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence &#34;\t&#34; to specify a tab separator. The default value is a comma (&#39;,&#39;).
     * 
     */
    @Import(name="fieldDelimiter", required=true)
    private String fieldDelimiter;

    /**
     * @return [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence &#34;\t&#34; to specify a tab separator. The default value is a comma (&#39;,&#39;).
     * 
     */
    public String fieldDelimiter() {
        return this.fieldDelimiter;
    }

    /**
     * [Optional] An custom string that will represent a NULL value in CSV import data.
     * 
     */
    @Import(name="nullMarker", required=true)
    private String nullMarker;

    /**
     * @return [Optional] An custom string that will represent a NULL value in CSV import data.
     * 
     */
    public String nullMarker() {
        return this.nullMarker;
    }

    /**
     * [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (&#39;&#34;&#39;). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
     * 
     */
    @Import(name="quote", required=true)
    private String quote;

    /**
     * @return [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (&#39;&#34;&#39;). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
     * 
     */
    public String quote() {
        return this.quote;
    }

    /**
     * [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N &gt; 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
     * 
     */
    @Import(name="skipLeadingRows", required=true)
    private String skipLeadingRows;

    /**
     * @return [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N &gt; 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
     * 
     */
    public String skipLeadingRows() {
        return this.skipLeadingRows;
    }

    private CsvOptionsResponse() {}

    private CsvOptionsResponse(CsvOptionsResponse $) {
        this.allowJaggedRows = $.allowJaggedRows;
        this.allowQuotedNewlines = $.allowQuotedNewlines;
        this.encoding = $.encoding;
        this.fieldDelimiter = $.fieldDelimiter;
        this.nullMarker = $.nullMarker;
        this.quote = $.quote;
        this.skipLeadingRows = $.skipLeadingRows;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CsvOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CsvOptionsResponse $;

        public Builder() {
            $ = new CsvOptionsResponse();
        }

        public Builder(CsvOptionsResponse defaults) {
            $ = new CsvOptionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowJaggedRows [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder allowJaggedRows(Boolean allowJaggedRows) {
            $.allowJaggedRows = allowJaggedRows;
            return this;
        }

        /**
         * @param allowQuotedNewlines [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder allowQuotedNewlines(Boolean allowQuotedNewlines) {
            $.allowQuotedNewlines = allowQuotedNewlines;
            return this;
        }

        /**
         * @param encoding [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param fieldDelimiter [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence &#34;\t&#34; to specify a tab separator. The default value is a comma (&#39;,&#39;).
         * 
         * @return builder
         * 
         */
        public Builder fieldDelimiter(String fieldDelimiter) {
            $.fieldDelimiter = fieldDelimiter;
            return this;
        }

        /**
         * @param nullMarker [Optional] An custom string that will represent a NULL value in CSV import data.
         * 
         * @return builder
         * 
         */
        public Builder nullMarker(String nullMarker) {
            $.nullMarker = nullMarker;
            return this;
        }

        /**
         * @param quote [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (&#39;&#34;&#39;). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
         * 
         * @return builder
         * 
         */
        public Builder quote(String quote) {
            $.quote = quote;
            return this;
        }

        /**
         * @param skipLeadingRows [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N &gt; 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
         * 
         * @return builder
         * 
         */
        public Builder skipLeadingRows(String skipLeadingRows) {
            $.skipLeadingRows = skipLeadingRows;
            return this;
        }

        public CsvOptionsResponse build() {
            $.allowJaggedRows = Objects.requireNonNull($.allowJaggedRows, "expected parameter 'allowJaggedRows' to be non-null");
            $.allowQuotedNewlines = Objects.requireNonNull($.allowQuotedNewlines, "expected parameter 'allowQuotedNewlines' to be non-null");
            $.encoding = Objects.requireNonNull($.encoding, "expected parameter 'encoding' to be non-null");
            $.fieldDelimiter = Objects.requireNonNull($.fieldDelimiter, "expected parameter 'fieldDelimiter' to be non-null");
            $.nullMarker = Objects.requireNonNull($.nullMarker, "expected parameter 'nullMarker' to be non-null");
            $.quote = Objects.requireNonNull($.quote, "expected parameter 'quote' to be non-null");
            $.skipLeadingRows = Objects.requireNonNull($.skipLeadingRows, "expected parameter 'skipLeadingRows' to be non-null");
            return $;
        }
    }

}
