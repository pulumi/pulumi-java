// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * DNSConfig contains the desired set of options for configuring clusterDNS.
 * 
 */
public final class DNSConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final DNSConfigResponse Empty = new DNSConfigResponse();

    /**
     * cluster_dns indicates which in-cluster DNS provider should be used.
     * 
     */
    @Import(name="clusterDns", required=true)
    private String clusterDns;

    /**
     * @return cluster_dns indicates which in-cluster DNS provider should be used.
     * 
     */
    public String clusterDns() {
        return this.clusterDns;
    }

    /**
     * cluster_dns_domain is the suffix used for all cluster service records.
     * 
     */
    @Import(name="clusterDnsDomain", required=true)
    private String clusterDnsDomain;

    /**
     * @return cluster_dns_domain is the suffix used for all cluster service records.
     * 
     */
    public String clusterDnsDomain() {
        return this.clusterDnsDomain;
    }

    /**
     * cluster_dns_scope indicates the scope of access to cluster DNS records.
     * 
     */
    @Import(name="clusterDnsScope", required=true)
    private String clusterDnsScope;

    /**
     * @return cluster_dns_scope indicates the scope of access to cluster DNS records.
     * 
     */
    public String clusterDnsScope() {
        return this.clusterDnsScope;
    }

    private DNSConfigResponse() {}

    private DNSConfigResponse(DNSConfigResponse $) {
        this.clusterDns = $.clusterDns;
        this.clusterDnsDomain = $.clusterDnsDomain;
        this.clusterDnsScope = $.clusterDnsScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DNSConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DNSConfigResponse $;

        public Builder() {
            $ = new DNSConfigResponse();
        }

        public Builder(DNSConfigResponse defaults) {
            $ = new DNSConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterDns cluster_dns indicates which in-cluster DNS provider should be used.
         * 
         * @return builder
         * 
         */
        public Builder clusterDns(String clusterDns) {
            $.clusterDns = clusterDns;
            return this;
        }

        /**
         * @param clusterDnsDomain cluster_dns_domain is the suffix used for all cluster service records.
         * 
         * @return builder
         * 
         */
        public Builder clusterDnsDomain(String clusterDnsDomain) {
            $.clusterDnsDomain = clusterDnsDomain;
            return this;
        }

        /**
         * @param clusterDnsScope cluster_dns_scope indicates the scope of access to cluster DNS records.
         * 
         * @return builder
         * 
         */
        public Builder clusterDnsScope(String clusterDnsScope) {
            $.clusterDnsScope = clusterDnsScope;
            return this;
        }

        public DNSConfigResponse build() {
            $.clusterDns = Objects.requireNonNull($.clusterDns, "expected parameter 'clusterDns' to be non-null");
            $.clusterDnsDomain = Objects.requireNonNull($.clusterDnsDomain, "expected parameter 'clusterDnsDomain' to be non-null");
            $.clusterDnsScope = Objects.requireNonNull($.clusterDnsScope, "expected parameter 'clusterDnsScope' to be non-null");
            return $;
        }
    }

}
