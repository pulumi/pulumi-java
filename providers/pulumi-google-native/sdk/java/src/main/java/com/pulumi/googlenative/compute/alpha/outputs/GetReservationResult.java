// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.AllocationSpecificSKUReservationResponse;
import com.pulumi.googlenative.compute.alpha.outputs.ShareSettingsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetReservationResult {
    /**
     * @return Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
     * 
     */
    private final String commitment;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private final String creationTimestamp;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private final String description;
    /**
     * @return Type of the resource. Always compute#reservations for reservations.
     * 
     */
    private final String kind;
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private final String name;
    /**
     * @return Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation.
     * 
     */
    private final Map<String,String> resourcePolicies;
    /**
     * @return Reserved for future use.
     * 
     */
    private final Boolean satisfiesPzs;
    /**
     * @return Server-defined fully-qualified URL for this resource.
     * 
     */
    private final String selfLink;
    /**
     * @return Server-defined URL for this resource with the resource id.
     * 
     */
    private final String selfLinkWithId;
    /**
     * @return Share-settings for shared-reservation
     * 
     */
    private final ShareSettingsResponse shareSettings;
    /**
     * @return Reservation for instances with specific machine shapes.
     * 
     */
    private final AllocationSpecificSKUReservationResponse specificReservation;
    /**
     * @return Indicates whether the reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
     * 
     */
    private final Boolean specificReservationRequired;
    /**
     * @return The status of the reservation.
     * 
     */
    private final String status;
    /**
     * @return Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
     * 
     */
    private final String zone;

    @CustomType.Constructor
    private GetReservationResult(
        @CustomType.Parameter("commitment") String commitment,
        @CustomType.Parameter("creationTimestamp") String creationTimestamp,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("resourcePolicies") Map<String,String> resourcePolicies,
        @CustomType.Parameter("satisfiesPzs") Boolean satisfiesPzs,
        @CustomType.Parameter("selfLink") String selfLink,
        @CustomType.Parameter("selfLinkWithId") String selfLinkWithId,
        @CustomType.Parameter("shareSettings") ShareSettingsResponse shareSettings,
        @CustomType.Parameter("specificReservation") AllocationSpecificSKUReservationResponse specificReservation,
        @CustomType.Parameter("specificReservationRequired") Boolean specificReservationRequired,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("zone") String zone) {
        this.commitment = commitment;
        this.creationTimestamp = creationTimestamp;
        this.description = description;
        this.kind = kind;
        this.name = name;
        this.resourcePolicies = resourcePolicies;
        this.satisfiesPzs = satisfiesPzs;
        this.selfLink = selfLink;
        this.selfLinkWithId = selfLinkWithId;
        this.shareSettings = shareSettings;
        this.specificReservation = specificReservation;
        this.specificReservationRequired = specificReservationRequired;
        this.status = status;
        this.zone = zone;
    }

    /**
     * @return Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
     * 
     */
    public String commitment() {
        return this.commitment;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Type of the resource. Always compute#reservations for reservations.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation.
     * 
     */
    public Map<String,String> resourcePolicies() {
        return this.resourcePolicies;
    }
    /**
     * @return Reserved for future use.
     * 
     */
    public Boolean satisfiesPzs() {
        return this.satisfiesPzs;
    }
    /**
     * @return Server-defined fully-qualified URL for this resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return Server-defined URL for this resource with the resource id.
     * 
     */
    public String selfLinkWithId() {
        return this.selfLinkWithId;
    }
    /**
     * @return Share-settings for shared-reservation
     * 
     */
    public ShareSettingsResponse shareSettings() {
        return this.shareSettings;
    }
    /**
     * @return Reservation for instances with specific machine shapes.
     * 
     */
    public AllocationSpecificSKUReservationResponse specificReservation() {
        return this.specificReservation;
    }
    /**
     * @return Indicates whether the reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
     * 
     */
    public Boolean specificReservationRequired() {
        return this.specificReservationRequired;
    }
    /**
     * @return The status of the reservation.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReservationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String commitment;
        private String creationTimestamp;
        private String description;
        private String kind;
        private String name;
        private Map<String,String> resourcePolicies;
        private Boolean satisfiesPzs;
        private String selfLink;
        private String selfLinkWithId;
        private ShareSettingsResponse shareSettings;
        private AllocationSpecificSKUReservationResponse specificReservation;
        private Boolean specificReservationRequired;
        private String status;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReservationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commitment = defaults.commitment;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.selfLink = defaults.selfLink;
    	      this.selfLinkWithId = defaults.selfLinkWithId;
    	      this.shareSettings = defaults.shareSettings;
    	      this.specificReservation = defaults.specificReservation;
    	      this.specificReservationRequired = defaults.specificReservationRequired;
    	      this.status = defaults.status;
    	      this.zone = defaults.zone;
        }

        public Builder commitment(String commitment) {
            this.commitment = Objects.requireNonNull(commitment);
            return this;
        }
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder resourcePolicies(Map<String,String> resourcePolicies) {
            this.resourcePolicies = Objects.requireNonNull(resourcePolicies);
            return this;
        }
        public Builder satisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder selfLinkWithId(String selfLinkWithId) {
            this.selfLinkWithId = Objects.requireNonNull(selfLinkWithId);
            return this;
        }
        public Builder shareSettings(ShareSettingsResponse shareSettings) {
            this.shareSettings = Objects.requireNonNull(shareSettings);
            return this;
        }
        public Builder specificReservation(AllocationSpecificSKUReservationResponse specificReservation) {
            this.specificReservation = Objects.requireNonNull(specificReservation);
            return this;
        }
        public Builder specificReservationRequired(Boolean specificReservationRequired) {
            this.specificReservationRequired = Objects.requireNonNull(specificReservationRequired);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }        public GetReservationResult build() {
            return new GetReservationResult(commitment, creationTimestamp, description, kind, name, resourcePolicies, satisfiesPzs, selfLink, selfLinkWithId, shareSettings, specificReservation, specificReservationRequired, status, zone);
        }
    }
}
