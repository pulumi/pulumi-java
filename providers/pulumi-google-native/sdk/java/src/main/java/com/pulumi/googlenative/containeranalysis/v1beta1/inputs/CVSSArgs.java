// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSAttackComplexity;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSAttackVector;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSAuthentication;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSAvailabilityImpact;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSConfidentialityImpact;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSIntegrityImpact;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSPrivilegesRequired;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSScope;
import com.pulumi.googlenative.containeranalysis.v1beta1.enums.CVSSUserInteraction;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
 * 
 */
public final class CVSSArgs extends com.pulumi.resources.ResourceArgs {

    public static final CVSSArgs Empty = new CVSSArgs();

    /**
     * Defined in CVSS v3, CVSS v2
     * 
     */
    @Import(name="attackComplexity")
    private @Nullable Output<CVSSAttackComplexity> attackComplexity;

    /**
     * @return Defined in CVSS v3, CVSS v2
     * 
     */
    public Optional<Output<CVSSAttackComplexity>> attackComplexity() {
        return Optional.ofNullable(this.attackComplexity);
    }

    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
     * 
     */
    @Import(name="attackVector")
    private @Nullable Output<CVSSAttackVector> attackVector;

    /**
     * @return Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
     * 
     */
    public Optional<Output<CVSSAttackVector>> attackVector() {
        return Optional.ofNullable(this.attackVector);
    }

    /**
     * Defined in CVSS v2
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<CVSSAuthentication> authentication;

    /**
     * @return Defined in CVSS v2
     * 
     */
    public Optional<Output<CVSSAuthentication>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Defined in CVSS v3, CVSS v2
     * 
     */
    @Import(name="availabilityImpact")
    private @Nullable Output<CVSSAvailabilityImpact> availabilityImpact;

    /**
     * @return Defined in CVSS v3, CVSS v2
     * 
     */
    public Optional<Output<CVSSAvailabilityImpact>> availabilityImpact() {
        return Optional.ofNullable(this.availabilityImpact);
    }

    /**
     * The base score is a function of the base metric scores.
     * 
     */
    @Import(name="baseScore")
    private @Nullable Output<Double> baseScore;

    /**
     * @return The base score is a function of the base metric scores.
     * 
     */
    public Optional<Output<Double>> baseScore() {
        return Optional.ofNullable(this.baseScore);
    }

    /**
     * Defined in CVSS v3, CVSS v2
     * 
     */
    @Import(name="confidentialityImpact")
    private @Nullable Output<CVSSConfidentialityImpact> confidentialityImpact;

    /**
     * @return Defined in CVSS v3, CVSS v2
     * 
     */
    public Optional<Output<CVSSConfidentialityImpact>> confidentialityImpact() {
        return Optional.ofNullable(this.confidentialityImpact);
    }

    @Import(name="exploitabilityScore")
    private @Nullable Output<Double> exploitabilityScore;

    public Optional<Output<Double>> exploitabilityScore() {
        return Optional.ofNullable(this.exploitabilityScore);
    }

    @Import(name="impactScore")
    private @Nullable Output<Double> impactScore;

    public Optional<Output<Double>> impactScore() {
        return Optional.ofNullable(this.impactScore);
    }

    /**
     * Defined in CVSS v3, CVSS v2
     * 
     */
    @Import(name="integrityImpact")
    private @Nullable Output<CVSSIntegrityImpact> integrityImpact;

    /**
     * @return Defined in CVSS v3, CVSS v2
     * 
     */
    public Optional<Output<CVSSIntegrityImpact>> integrityImpact() {
        return Optional.ofNullable(this.integrityImpact);
    }

    /**
     * Defined in CVSS v3
     * 
     */
    @Import(name="privilegesRequired")
    private @Nullable Output<CVSSPrivilegesRequired> privilegesRequired;

    /**
     * @return Defined in CVSS v3
     * 
     */
    public Optional<Output<CVSSPrivilegesRequired>> privilegesRequired() {
        return Optional.ofNullable(this.privilegesRequired);
    }

    /**
     * Defined in CVSS v3
     * 
     */
    @Import(name="scope")
    private @Nullable Output<CVSSScope> scope;

    /**
     * @return Defined in CVSS v3
     * 
     */
    public Optional<Output<CVSSScope>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Defined in CVSS v3
     * 
     */
    @Import(name="userInteraction")
    private @Nullable Output<CVSSUserInteraction> userInteraction;

    /**
     * @return Defined in CVSS v3
     * 
     */
    public Optional<Output<CVSSUserInteraction>> userInteraction() {
        return Optional.ofNullable(this.userInteraction);
    }

    private CVSSArgs() {}

    private CVSSArgs(CVSSArgs $) {
        this.attackComplexity = $.attackComplexity;
        this.attackVector = $.attackVector;
        this.authentication = $.authentication;
        this.availabilityImpact = $.availabilityImpact;
        this.baseScore = $.baseScore;
        this.confidentialityImpact = $.confidentialityImpact;
        this.exploitabilityScore = $.exploitabilityScore;
        this.impactScore = $.impactScore;
        this.integrityImpact = $.integrityImpact;
        this.privilegesRequired = $.privilegesRequired;
        this.scope = $.scope;
        this.userInteraction = $.userInteraction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CVSSArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CVSSArgs $;

        public Builder() {
            $ = new CVSSArgs();
        }

        public Builder(CVSSArgs defaults) {
            $ = new CVSSArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attackComplexity Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder attackComplexity(@Nullable Output<CVSSAttackComplexity> attackComplexity) {
            $.attackComplexity = attackComplexity;
            return this;
        }

        /**
         * @param attackComplexity Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder attackComplexity(CVSSAttackComplexity attackComplexity) {
            return attackComplexity(Output.of(attackComplexity));
        }

        /**
         * @param attackVector Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder attackVector(@Nullable Output<CVSSAttackVector> attackVector) {
            $.attackVector = attackVector;
            return this;
        }

        /**
         * @param attackVector Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder attackVector(CVSSAttackVector attackVector) {
            return attackVector(Output.of(attackVector));
        }

        /**
         * @param authentication Defined in CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<CVSSAuthentication> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Defined in CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder authentication(CVSSAuthentication authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param availabilityImpact Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder availabilityImpact(@Nullable Output<CVSSAvailabilityImpact> availabilityImpact) {
            $.availabilityImpact = availabilityImpact;
            return this;
        }

        /**
         * @param availabilityImpact Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder availabilityImpact(CVSSAvailabilityImpact availabilityImpact) {
            return availabilityImpact(Output.of(availabilityImpact));
        }

        /**
         * @param baseScore The base score is a function of the base metric scores.
         * 
         * @return builder
         * 
         */
        public Builder baseScore(@Nullable Output<Double> baseScore) {
            $.baseScore = baseScore;
            return this;
        }

        /**
         * @param baseScore The base score is a function of the base metric scores.
         * 
         * @return builder
         * 
         */
        public Builder baseScore(Double baseScore) {
            return baseScore(Output.of(baseScore));
        }

        /**
         * @param confidentialityImpact Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder confidentialityImpact(@Nullable Output<CVSSConfidentialityImpact> confidentialityImpact) {
            $.confidentialityImpact = confidentialityImpact;
            return this;
        }

        /**
         * @param confidentialityImpact Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder confidentialityImpact(CVSSConfidentialityImpact confidentialityImpact) {
            return confidentialityImpact(Output.of(confidentialityImpact));
        }

        public Builder exploitabilityScore(@Nullable Output<Double> exploitabilityScore) {
            $.exploitabilityScore = exploitabilityScore;
            return this;
        }

        public Builder exploitabilityScore(Double exploitabilityScore) {
            return exploitabilityScore(Output.of(exploitabilityScore));
        }

        public Builder impactScore(@Nullable Output<Double> impactScore) {
            $.impactScore = impactScore;
            return this;
        }

        public Builder impactScore(Double impactScore) {
            return impactScore(Output.of(impactScore));
        }

        /**
         * @param integrityImpact Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder integrityImpact(@Nullable Output<CVSSIntegrityImpact> integrityImpact) {
            $.integrityImpact = integrityImpact;
            return this;
        }

        /**
         * @param integrityImpact Defined in CVSS v3, CVSS v2
         * 
         * @return builder
         * 
         */
        public Builder integrityImpact(CVSSIntegrityImpact integrityImpact) {
            return integrityImpact(Output.of(integrityImpact));
        }

        /**
         * @param privilegesRequired Defined in CVSS v3
         * 
         * @return builder
         * 
         */
        public Builder privilegesRequired(@Nullable Output<CVSSPrivilegesRequired> privilegesRequired) {
            $.privilegesRequired = privilegesRequired;
            return this;
        }

        /**
         * @param privilegesRequired Defined in CVSS v3
         * 
         * @return builder
         * 
         */
        public Builder privilegesRequired(CVSSPrivilegesRequired privilegesRequired) {
            return privilegesRequired(Output.of(privilegesRequired));
        }

        /**
         * @param scope Defined in CVSS v3
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<CVSSScope> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Defined in CVSS v3
         * 
         * @return builder
         * 
         */
        public Builder scope(CVSSScope scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param userInteraction Defined in CVSS v3
         * 
         * @return builder
         * 
         */
        public Builder userInteraction(@Nullable Output<CVSSUserInteraction> userInteraction) {
            $.userInteraction = userInteraction;
            return this;
        }

        /**
         * @param userInteraction Defined in CVSS v3
         * 
         * @return builder
         * 
         */
        public Builder userInteraction(CVSSUserInteraction userInteraction) {
            return userInteraction(Output.of(userInteraction));
        }

        public CVSSArgs build() {
            return $;
        }
    }

}
