// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteCorsPolicyArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteDestinationArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteFaultInjectionPolicyArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteHeaderModifierArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteRedirectArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteRequestMirrorPolicyArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteRetryPolicyArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteURLRewriteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The specifications for routing traffic and applying associated policies.
 * 
 */
public final class HttpRouteRouteActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteRouteActionArgs Empty = new HttpRouteRouteActionArgs();

    /**
     * The specification for allowing client side cross-origin requests.
     * 
     */
    @Import(name="corsPolicy")
    private @Nullable Output<HttpRouteCorsPolicyArgs> corsPolicy;

    /**
     * @return The specification for allowing client side cross-origin requests.
     * 
     */
    public Optional<Output<HttpRouteCorsPolicyArgs>> corsPolicy() {
        return Optional.ofNullable(this.corsPolicy);
    }

    /**
     * The destination to which traffic should be forwarded.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<HttpRouteDestinationArgs>> destinations;

    /**
     * @return The destination to which traffic should be forwarded.
     * 
     */
    public Optional<Output<List<HttpRouteDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     * 
     */
    @Import(name="faultInjectionPolicy")
    private @Nullable Output<HttpRouteFaultInjectionPolicyArgs> faultInjectionPolicy;

    /**
     * @return The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     * 
     */
    public Optional<Output<HttpRouteFaultInjectionPolicyArgs>> faultInjectionPolicy() {
        return Optional.ofNullable(this.faultInjectionPolicy);
    }

    /**
     * If set, the request is directed as configured by this field.
     * 
     */
    @Import(name="redirect")
    private @Nullable Output<HttpRouteRedirectArgs> redirect;

    /**
     * @return If set, the request is directed as configured by this field.
     * 
     */
    public Optional<Output<HttpRouteRedirectArgs>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * 
     */
    @Import(name="requestHeaderModifier")
    private @Nullable Output<HttpRouteHeaderModifierArgs> requestHeaderModifier;

    /**
     * @return The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * 
     */
    public Optional<Output<HttpRouteHeaderModifierArgs>> requestHeaderModifier() {
        return Optional.ofNullable(this.requestHeaderModifier);
    }

    /**
     * Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
     * 
     */
    @Import(name="requestMirrorPolicy")
    private @Nullable Output<HttpRouteRequestMirrorPolicyArgs> requestMirrorPolicy;

    /**
     * @return Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
     * 
     */
    public Optional<Output<HttpRouteRequestMirrorPolicyArgs>> requestMirrorPolicy() {
        return Optional.ofNullable(this.requestMirrorPolicy);
    }

    /**
     * The specification for modifying the headers of a response prior to sending the response back to the client.
     * 
     */
    @Import(name="responseHeaderModifier")
    private @Nullable Output<HttpRouteHeaderModifierArgs> responseHeaderModifier;

    /**
     * @return The specification for modifying the headers of a response prior to sending the response back to the client.
     * 
     */
    public Optional<Output<HttpRouteHeaderModifierArgs>> responseHeaderModifier() {
        return Optional.ofNullable(this.responseHeaderModifier);
    }

    /**
     * Specifies the retry policy associated with this route.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<HttpRouteRetryPolicyArgs> retryPolicy;

    /**
     * @return Specifies the retry policy associated with this route.
     * 
     */
    public Optional<Output<HttpRouteRetryPolicyArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The specification for rewrite URL before forwarding requests to the destination.
     * 
     */
    @Import(name="urlRewrite")
    private @Nullable Output<HttpRouteURLRewriteArgs> urlRewrite;

    /**
     * @return The specification for rewrite URL before forwarding requests to the destination.
     * 
     */
    public Optional<Output<HttpRouteURLRewriteArgs>> urlRewrite() {
        return Optional.ofNullable(this.urlRewrite);
    }

    private HttpRouteRouteActionArgs() {}

    private HttpRouteRouteActionArgs(HttpRouteRouteActionArgs $) {
        this.corsPolicy = $.corsPolicy;
        this.destinations = $.destinations;
        this.faultInjectionPolicy = $.faultInjectionPolicy;
        this.redirect = $.redirect;
        this.requestHeaderModifier = $.requestHeaderModifier;
        this.requestMirrorPolicy = $.requestMirrorPolicy;
        this.responseHeaderModifier = $.responseHeaderModifier;
        this.retryPolicy = $.retryPolicy;
        this.timeout = $.timeout;
        this.urlRewrite = $.urlRewrite;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteRouteActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRouteActionArgs $;

        public Builder() {
            $ = new HttpRouteRouteActionArgs();
        }

        public Builder(HttpRouteRouteActionArgs defaults) {
            $ = new HttpRouteRouteActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param corsPolicy The specification for allowing client side cross-origin requests.
         * 
         * @return builder
         * 
         */
        public Builder corsPolicy(@Nullable Output<HttpRouteCorsPolicyArgs> corsPolicy) {
            $.corsPolicy = corsPolicy;
            return this;
        }

        /**
         * @param corsPolicy The specification for allowing client side cross-origin requests.
         * 
         * @return builder
         * 
         */
        public Builder corsPolicy(HttpRouteCorsPolicyArgs corsPolicy) {
            return corsPolicy(Output.of(corsPolicy));
        }

        /**
         * @param destinations The destination to which traffic should be forwarded.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<HttpRouteDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations The destination to which traffic should be forwarded.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<HttpRouteDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations The destination to which traffic should be forwarded.
         * 
         * @return builder
         * 
         */
        public Builder destinations(HttpRouteDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param faultInjectionPolicy The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
         * 
         * @return builder
         * 
         */
        public Builder faultInjectionPolicy(@Nullable Output<HttpRouteFaultInjectionPolicyArgs> faultInjectionPolicy) {
            $.faultInjectionPolicy = faultInjectionPolicy;
            return this;
        }

        /**
         * @param faultInjectionPolicy The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
         * 
         * @return builder
         * 
         */
        public Builder faultInjectionPolicy(HttpRouteFaultInjectionPolicyArgs faultInjectionPolicy) {
            return faultInjectionPolicy(Output.of(faultInjectionPolicy));
        }

        /**
         * @param redirect If set, the request is directed as configured by this field.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable Output<HttpRouteRedirectArgs> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect If set, the request is directed as configured by this field.
         * 
         * @return builder
         * 
         */
        public Builder redirect(HttpRouteRedirectArgs redirect) {
            return redirect(Output.of(redirect));
        }

        /**
         * @param requestHeaderModifier The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifier(@Nullable Output<HttpRouteHeaderModifierArgs> requestHeaderModifier) {
            $.requestHeaderModifier = requestHeaderModifier;
            return this;
        }

        /**
         * @param requestHeaderModifier The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifier(HttpRouteHeaderModifierArgs requestHeaderModifier) {
            return requestHeaderModifier(Output.of(requestHeaderModifier));
        }

        /**
         * @param requestMirrorPolicy Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
         * 
         * @return builder
         * 
         */
        public Builder requestMirrorPolicy(@Nullable Output<HttpRouteRequestMirrorPolicyArgs> requestMirrorPolicy) {
            $.requestMirrorPolicy = requestMirrorPolicy;
            return this;
        }

        /**
         * @param requestMirrorPolicy Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
         * 
         * @return builder
         * 
         */
        public Builder requestMirrorPolicy(HttpRouteRequestMirrorPolicyArgs requestMirrorPolicy) {
            return requestMirrorPolicy(Output.of(requestMirrorPolicy));
        }

        /**
         * @param responseHeaderModifier The specification for modifying the headers of a response prior to sending the response back to the client.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderModifier(@Nullable Output<HttpRouteHeaderModifierArgs> responseHeaderModifier) {
            $.responseHeaderModifier = responseHeaderModifier;
            return this;
        }

        /**
         * @param responseHeaderModifier The specification for modifying the headers of a response prior to sending the response back to the client.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderModifier(HttpRouteHeaderModifierArgs responseHeaderModifier) {
            return responseHeaderModifier(Output.of(responseHeaderModifier));
        }

        /**
         * @param retryPolicy Specifies the retry policy associated with this route.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(@Nullable Output<HttpRouteRetryPolicyArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        /**
         * @param retryPolicy Specifies the retry policy associated with this route.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(HttpRouteRetryPolicyArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        /**
         * @param timeout Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param urlRewrite The specification for rewrite URL before forwarding requests to the destination.
         * 
         * @return builder
         * 
         */
        public Builder urlRewrite(@Nullable Output<HttpRouteURLRewriteArgs> urlRewrite) {
            $.urlRewrite = urlRewrite;
            return this;
        }

        /**
         * @param urlRewrite The specification for rewrite URL before forwarding requests to the destination.
         * 
         * @return builder
         * 
         */
        public Builder urlRewrite(HttpRouteURLRewriteArgs urlRewrite) {
            return urlRewrite(Output.of(urlRewrite));
        }

        public HttpRouteRouteActionArgs build() {
            return $;
        }
    }

}
