// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse {
    /**
     * @return Describes where the config file that kicked off the build came from.
     * 
     */
    private final GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse configSource;
    /**
     * @return Any other builder-controlled inputs necessary for correctly evaluating the build.
     * 
     */
    private final Map<String,String> environment;
    /**
     * @return Collection of all external inputs that influenced the build on top of invocation.configSource.
     * 
     */
    private final Map<String,String> parameters;

    @CustomType.Constructor
    private GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse(
        @CustomType.Parameter("configSource") GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse configSource,
        @CustomType.Parameter("environment") Map<String,String> environment,
        @CustomType.Parameter("parameters") Map<String,String> parameters) {
        this.configSource = configSource;
        this.environment = environment;
        this.parameters = parameters;
    }

    /**
     * @return Describes where the config file that kicked off the build came from.
     * 
     */
    public GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse configSource() {
        return this.configSource;
    }
    /**
     * @return Any other builder-controlled inputs necessary for correctly evaluating the build.
     * 
     */
    public Map<String,String> environment() {
        return this.environment;
    }
    /**
     * @return Collection of all external inputs that influenced the build on top of invocation.configSource.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse configSource;
        private Map<String,String> environment;
        private Map<String,String> parameters;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configSource = defaults.configSource;
    	      this.environment = defaults.environment;
    	      this.parameters = defaults.parameters;
        }

        public Builder configSource(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse configSource) {
            this.configSource = Objects.requireNonNull(configSource);
            return this;
        }
        public Builder environment(Map<String,String> environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }
        public Builder parameters(Map<String,String> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }        public GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse build() {
            return new GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse(configSource, environment, parameters);
        }
    }
}
