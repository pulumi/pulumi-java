// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.enums;

import com.pulumi.core.annotations.EnumType;
import java.lang.String;
import java.util.Objects;
import java.util.StringJoiner;

    /**
     * Required. The top level type of this field. Can be any standard SQL data type (e.g., &#34;INT64&#34;, &#34;DATE&#34;, &#34;ARRAY&#34;).
     * 
     */
    @EnumType
    public enum StandardSqlDataTypeTypeKind {
        /**
         * Invalid type.
         * 
         */
        TypeKindUnspecified("TYPE_KIND_UNSPECIFIED"),
        /**
         * Encoded as a string in decimal format.
         * 
         */
        Int64("INT64"),
        /**
         * Encoded as a boolean &#34;false&#34; or &#34;true&#34;.
         * 
         */
        Bool("BOOL"),
        /**
         * Encoded as a number, or string &#34;NaN&#34;, &#34;Infinity&#34; or &#34;-Infinity&#34;.
         * 
         */
        Float64("FLOAT64"),
        /**
         * Encoded as a string value.
         * 
         */
        String("STRING"),
        /**
         * Encoded as a base64 string per RFC 4648, section 4.
         * 
         */
        Bytes("BYTES"),
        /**
         * Encoded as an RFC 3339 timestamp with mandatory &#34;Z&#34; time zone string: 1985-04-12T23:20:50.52Z
         * 
         */
        Timestamp("TIMESTAMP"),
        /**
         * Encoded as RFC 3339 full-date format string: 1985-04-12
         * 
         */
        Date("DATE"),
        /**
         * Encoded as RFC 3339 partial-time format string: 23:20:50.52
         * 
         */
        Time("TIME"),
        /**
         * Encoded as RFC 3339 full-date &#34;T&#34; partial-time: 1985-04-12T23:20:50.52
         * 
         */
        Datetime("DATETIME"),
        /**
         * Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
         * 
         */
        Interval("INTERVAL"),
        /**
         * Encoded as WKT
         * 
         */
        Geography("GEOGRAPHY"),
        /**
         * Encoded as a decimal string.
         * 
         */
        Numeric("NUMERIC"),
        /**
         * Encoded as a decimal string.
         * 
         */
        Bignumeric("BIGNUMERIC"),
        /**
         * Encoded as a string.
         * 
         */
        Json("JSON"),
        /**
         * Encoded as a list with types matching Type.array_type.
         * 
         */
        Array("ARRAY"),
        /**
         * Encoded as a list with fields of type Type.struct_type[i]. List is used because a JSON object cannot have duplicate field names.
         * 
         */
        Struct("STRUCT");

        private final String value;

        StandardSqlDataTypeTypeKind(String value) {
            this.value = Objects.requireNonNull(value);
        }

        @EnumType.Converter
        public String getValue() {
            return this.value;
        }

        @Override
        public String toString() {
            return new StringJoiner(", ", "StandardSqlDataTypeTypeKind[", "]")
                .add("value='" + this.value + "'")
                .toString();
        }
    }
