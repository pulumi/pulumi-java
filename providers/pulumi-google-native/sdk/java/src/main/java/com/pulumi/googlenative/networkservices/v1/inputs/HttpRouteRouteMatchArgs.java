// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1.inputs.HttpRouteHeaderMatchArgs;
import com.pulumi.googlenative.networkservices.v1.inputs.HttpRouteQueryParameterMatchArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
 * 
 */
public final class HttpRouteRouteMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteRouteMatchArgs Empty = new HttpRouteRouteMatchArgs();

    /**
     * The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
     * 
     */
    @Import(name="fullPathMatch")
    private @Nullable Output<String> fullPathMatch;

    /**
     * @return The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
     * 
     */
    public Optional<Output<String>> fullPathMatch() {
        return Optional.ofNullable(this.fullPathMatch);
    }

    /**
     * Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<HttpRouteHeaderMatchArgs>> headers;

    /**
     * @return Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
     * 
     */
    public Optional<Output<List<HttpRouteHeaderMatchArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
     * 
     */
    @Import(name="ignoreCase")
    private @Nullable Output<Boolean> ignoreCase;

    /**
     * @return Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
     * 
     */
    public Optional<Output<Boolean>> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    /**
     * The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
     * 
     */
    @Import(name="prefixMatch")
    private @Nullable Output<String> prefixMatch;

    /**
     * @return The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
     * 
     */
    public Optional<Output<String>> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }

    /**
     * Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
     * 
     */
    @Import(name="queryParameters")
    private @Nullable Output<List<HttpRouteQueryParameterMatchArgs>> queryParameters;

    /**
     * @return Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
     * 
     */
    public Optional<Output<List<HttpRouteQueryParameterMatchArgs>>> queryParameters() {
        return Optional.ofNullable(this.queryParameters);
    }

    /**
     * The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
     * 
     */
    @Import(name="regexMatch")
    private @Nullable Output<String> regexMatch;

    /**
     * @return The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
     * 
     */
    public Optional<Output<String>> regexMatch() {
        return Optional.ofNullable(this.regexMatch);
    }

    private HttpRouteRouteMatchArgs() {}

    private HttpRouteRouteMatchArgs(HttpRouteRouteMatchArgs $) {
        this.fullPathMatch = $.fullPathMatch;
        this.headers = $.headers;
        this.ignoreCase = $.ignoreCase;
        this.prefixMatch = $.prefixMatch;
        this.queryParameters = $.queryParameters;
        this.regexMatch = $.regexMatch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteRouteMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRouteMatchArgs $;

        public Builder() {
            $ = new HttpRouteRouteMatchArgs();
        }

        public Builder(HttpRouteRouteMatchArgs defaults) {
            $ = new HttpRouteRouteMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fullPathMatch The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
         * 
         * @return builder
         * 
         */
        public Builder fullPathMatch(@Nullable Output<String> fullPathMatch) {
            $.fullPathMatch = fullPathMatch;
            return this;
        }

        /**
         * @param fullPathMatch The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
         * 
         * @return builder
         * 
         */
        public Builder fullPathMatch(String fullPathMatch) {
            return fullPathMatch(Output.of(fullPathMatch));
        }

        /**
         * @param headers Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<HttpRouteHeaderMatchArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<HttpRouteHeaderMatchArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
         * 
         * @return builder
         * 
         */
        public Builder headers(HttpRouteHeaderMatchArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param ignoreCase Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(@Nullable Output<Boolean> ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        /**
         * @param ignoreCase Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(Boolean ignoreCase) {
            return ignoreCase(Output.of(ignoreCase));
        }

        /**
         * @param prefixMatch The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(@Nullable Output<String> prefixMatch) {
            $.prefixMatch = prefixMatch;
            return this;
        }

        /**
         * @param prefixMatch The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(String prefixMatch) {
            return prefixMatch(Output.of(prefixMatch));
        }

        /**
         * @param queryParameters Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(@Nullable Output<List<HttpRouteQueryParameterMatchArgs>> queryParameters) {
            $.queryParameters = queryParameters;
            return this;
        }

        /**
         * @param queryParameters Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(List<HttpRouteQueryParameterMatchArgs> queryParameters) {
            return queryParameters(Output.of(queryParameters));
        }

        /**
         * @param queryParameters Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(HttpRouteQueryParameterMatchArgs... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }

        /**
         * @param regexMatch The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(@Nullable Output<String> regexMatch) {
            $.regexMatch = regexMatch;
            return this;
        }

        /**
         * @param regexMatch The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(String regexMatch) {
            return regexMatch(Output.of(regexMatch));
        }

        public HttpRouteRouteMatchArgs build() {
            return $;
        }
    }

}
