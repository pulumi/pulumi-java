// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.beta.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CacheKeyPolicyResponse {
    /**
     * @return If true, requests to different hosts will be cached separately.
     * 
     */
    private final Boolean includeHost;
    /**
     * @return Allows HTTP request headers (by name) to be used in the cache key.
     * 
     */
    private final List<String> includeHttpHeaders;
    /**
     * @return Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     * 
     */
    private final List<String> includeNamedCookies;
    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    private final Boolean includeProtocol;
    /**
     * @return If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     * 
     */
    private final Boolean includeQueryString;
    /**
     * @return Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    private final List<String> queryStringBlacklist;
    /**
     * @return Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    private final List<String> queryStringWhitelist;

    @CustomType.Constructor
    private CacheKeyPolicyResponse(
        @CustomType.Parameter("includeHost") Boolean includeHost,
        @CustomType.Parameter("includeHttpHeaders") List<String> includeHttpHeaders,
        @CustomType.Parameter("includeNamedCookies") List<String> includeNamedCookies,
        @CustomType.Parameter("includeProtocol") Boolean includeProtocol,
        @CustomType.Parameter("includeQueryString") Boolean includeQueryString,
        @CustomType.Parameter("queryStringBlacklist") List<String> queryStringBlacklist,
        @CustomType.Parameter("queryStringWhitelist") List<String> queryStringWhitelist) {
        this.includeHost = includeHost;
        this.includeHttpHeaders = includeHttpHeaders;
        this.includeNamedCookies = includeNamedCookies;
        this.includeProtocol = includeProtocol;
        this.includeQueryString = includeQueryString;
        this.queryStringBlacklist = queryStringBlacklist;
        this.queryStringWhitelist = queryStringWhitelist;
    }

    /**
     * @return If true, requests to different hosts will be cached separately.
     * 
     */
    public Boolean includeHost() {
        return this.includeHost;
    }
    /**
     * @return Allows HTTP request headers (by name) to be used in the cache key.
     * 
     */
    public List<String> includeHttpHeaders() {
        return this.includeHttpHeaders;
    }
    /**
     * @return Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     * 
     */
    public List<String> includeNamedCookies() {
        return this.includeNamedCookies;
    }
    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    public Boolean includeProtocol() {
        return this.includeProtocol;
    }
    /**
     * @return If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     * 
     */
    public Boolean includeQueryString() {
        return this.includeQueryString;
    }
    /**
     * @return Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    public List<String> queryStringBlacklist() {
        return this.queryStringBlacklist;
    }
    /**
     * @return Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    public List<String> queryStringWhitelist() {
        return this.queryStringWhitelist;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheKeyPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean includeHost;
        private List<String> includeHttpHeaders;
        private List<String> includeNamedCookies;
        private Boolean includeProtocol;
        private Boolean includeQueryString;
        private List<String> queryStringBlacklist;
        private List<String> queryStringWhitelist;

        public Builder() {
    	      // Empty
        }

        public Builder(CacheKeyPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeHost = defaults.includeHost;
    	      this.includeHttpHeaders = defaults.includeHttpHeaders;
    	      this.includeNamedCookies = defaults.includeNamedCookies;
    	      this.includeProtocol = defaults.includeProtocol;
    	      this.includeQueryString = defaults.includeQueryString;
    	      this.queryStringBlacklist = defaults.queryStringBlacklist;
    	      this.queryStringWhitelist = defaults.queryStringWhitelist;
        }

        public Builder includeHost(Boolean includeHost) {
            this.includeHost = Objects.requireNonNull(includeHost);
            return this;
        }
        public Builder includeHttpHeaders(List<String> includeHttpHeaders) {
            this.includeHttpHeaders = Objects.requireNonNull(includeHttpHeaders);
            return this;
        }
        public Builder includeHttpHeaders(String... includeHttpHeaders) {
            return includeHttpHeaders(List.of(includeHttpHeaders));
        }
        public Builder includeNamedCookies(List<String> includeNamedCookies) {
            this.includeNamedCookies = Objects.requireNonNull(includeNamedCookies);
            return this;
        }
        public Builder includeNamedCookies(String... includeNamedCookies) {
            return includeNamedCookies(List.of(includeNamedCookies));
        }
        public Builder includeProtocol(Boolean includeProtocol) {
            this.includeProtocol = Objects.requireNonNull(includeProtocol);
            return this;
        }
        public Builder includeQueryString(Boolean includeQueryString) {
            this.includeQueryString = Objects.requireNonNull(includeQueryString);
            return this;
        }
        public Builder queryStringBlacklist(List<String> queryStringBlacklist) {
            this.queryStringBlacklist = Objects.requireNonNull(queryStringBlacklist);
            return this;
        }
        public Builder queryStringBlacklist(String... queryStringBlacklist) {
            return queryStringBlacklist(List.of(queryStringBlacklist));
        }
        public Builder queryStringWhitelist(List<String> queryStringWhitelist) {
            this.queryStringWhitelist = Objects.requireNonNull(queryStringWhitelist);
            return this;
        }
        public Builder queryStringWhitelist(String... queryStringWhitelist) {
            return queryStringWhitelist(List.of(queryStringWhitelist));
        }        public CacheKeyPolicyResponse build() {
            return new CacheKeyPolicyResponse(includeHost, includeHttpHeaders, includeNamedCookies, includeProtocol, includeQueryString, queryStringBlacklist, queryStringWhitelist);
        }
    }
}
