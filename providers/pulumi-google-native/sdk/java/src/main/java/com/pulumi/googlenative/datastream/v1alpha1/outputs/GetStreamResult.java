// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.datastream.v1alpha1.outputs.BackfillAllStrategyResponse;
import com.pulumi.googlenative.datastream.v1alpha1.outputs.BackfillNoneStrategyResponse;
import com.pulumi.googlenative.datastream.v1alpha1.outputs.DestinationConfigResponse;
import com.pulumi.googlenative.datastream.v1alpha1.outputs.ErrorResponse;
import com.pulumi.googlenative.datastream.v1alpha1.outputs.SourceConfigResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStreamResult {
    /**
     * @return Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     * 
     */
    private final BackfillAllStrategyResponse backfillAll;
    /**
     * @return Do not automatically backfill any objects.
     * 
     */
    private final BackfillNoneStrategyResponse backfillNone;
    /**
     * @return The creation time of the stream.
     * 
     */
    private final String createTime;
    /**
     * @return Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    private final String customerManagedEncryptionKey;
    /**
     * @return Destination connection profile configuration.
     * 
     */
    private final DestinationConfigResponse destinationConfig;
    /**
     * @return Display name.
     * 
     */
    private final String displayName;
    /**
     * @return Errors on the Stream.
     * 
     */
    private final List<ErrorResponse> errors;
    /**
     * @return Labels.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return The stream&#39;s name.
     * 
     */
    private final String name;
    /**
     * @return Source connection profile configuration.
     * 
     */
    private final SourceConfigResponse sourceConfig;
    /**
     * @return The state of the stream.
     * 
     */
    private final String state;
    /**
     * @return The last update time of the stream.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetStreamResult(
        @CustomType.Parameter("backfillAll") BackfillAllStrategyResponse backfillAll,
        @CustomType.Parameter("backfillNone") BackfillNoneStrategyResponse backfillNone,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("customerManagedEncryptionKey") String customerManagedEncryptionKey,
        @CustomType.Parameter("destinationConfig") DestinationConfigResponse destinationConfig,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("errors") List<ErrorResponse> errors,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("sourceConfig") SourceConfigResponse sourceConfig,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.backfillAll = backfillAll;
        this.backfillNone = backfillNone;
        this.createTime = createTime;
        this.customerManagedEncryptionKey = customerManagedEncryptionKey;
        this.destinationConfig = destinationConfig;
        this.displayName = displayName;
        this.errors = errors;
        this.labels = labels;
        this.name = name;
        this.sourceConfig = sourceConfig;
        this.state = state;
        this.updateTime = updateTime;
    }

    /**
     * @return Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     * 
     */
    public BackfillAllStrategyResponse backfillAll() {
        return this.backfillAll;
    }
    /**
     * @return Do not automatically backfill any objects.
     * 
     */
    public BackfillNoneStrategyResponse backfillNone() {
        return this.backfillNone;
    }
    /**
     * @return The creation time of the stream.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    public String customerManagedEncryptionKey() {
        return this.customerManagedEncryptionKey;
    }
    /**
     * @return Destination connection profile configuration.
     * 
     */
    public DestinationConfigResponse destinationConfig() {
        return this.destinationConfig;
    }
    /**
     * @return Display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Errors on the Stream.
     * 
     */
    public List<ErrorResponse> errors() {
        return this.errors;
    }
    /**
     * @return Labels.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The stream&#39;s name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Source connection profile configuration.
     * 
     */
    public SourceConfigResponse sourceConfig() {
        return this.sourceConfig;
    }
    /**
     * @return The state of the stream.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The last update time of the stream.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackfillAllStrategyResponse backfillAll;
        private BackfillNoneStrategyResponse backfillNone;
        private String createTime;
        private String customerManagedEncryptionKey;
        private DestinationConfigResponse destinationConfig;
        private String displayName;
        private List<ErrorResponse> errors;
        private Map<String,String> labels;
        private String name;
        private SourceConfigResponse sourceConfig;
        private String state;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetStreamResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backfillAll = defaults.backfillAll;
    	      this.backfillNone = defaults.backfillNone;
    	      this.createTime = defaults.createTime;
    	      this.customerManagedEncryptionKey = defaults.customerManagedEncryptionKey;
    	      this.destinationConfig = defaults.destinationConfig;
    	      this.displayName = defaults.displayName;
    	      this.errors = defaults.errors;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.sourceConfig = defaults.sourceConfig;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder backfillAll(BackfillAllStrategyResponse backfillAll) {
            this.backfillAll = Objects.requireNonNull(backfillAll);
            return this;
        }
        public Builder backfillNone(BackfillNoneStrategyResponse backfillNone) {
            this.backfillNone = Objects.requireNonNull(backfillNone);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder customerManagedEncryptionKey(String customerManagedEncryptionKey) {
            this.customerManagedEncryptionKey = Objects.requireNonNull(customerManagedEncryptionKey);
            return this;
        }
        public Builder destinationConfig(DestinationConfigResponse destinationConfig) {
            this.destinationConfig = Objects.requireNonNull(destinationConfig);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder errors(List<ErrorResponse> errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        public Builder errors(ErrorResponse... errors) {
            return errors(List.of(errors));
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder sourceConfig(SourceConfigResponse sourceConfig) {
            this.sourceConfig = Objects.requireNonNull(sourceConfig);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetStreamResult build() {
            return new GetStreamResult(backfillAll, backfillNone, createTime, customerManagedEncryptionKey, destinationConfig, displayName, errors, labels, name, sourceConfig, state, updateTime);
        }
    }
}
