// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1ConversationTurnResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Represents a result from running a test case in an agent environment.
 * 
 */
public final class GoogleCloudDialogflowCxV3beta1TestCaseResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDialogflowCxV3beta1TestCaseResultResponse Empty = new GoogleCloudDialogflowCxV3beta1TestCaseResultResponse();

    /**
     * The conversation turns uttered during the test case replay in chronological order.
     * 
     */
    @Import(name="conversationTurns", required=true)
    private List<GoogleCloudDialogflowCxV3beta1ConversationTurnResponse> conversationTurns;

    /**
     * @return The conversation turns uttered during the test case replay in chronological order.
     * 
     */
    public List<GoogleCloudDialogflowCxV3beta1ConversationTurnResponse> conversationTurns() {
        return this.conversationTurns;
    }

    /**
     * Environment where the test was run. If not set, it indicates the draft environment.
     * 
     */
    @Import(name="environment", required=true)
    private String environment;

    /**
     * @return Environment where the test was run. If not set, it indicates the draft environment.
     * 
     */
    public String environment() {
        return this.environment;
    }

    /**
     * The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Whether the test case passed in the agent environment.
     * 
     */
    @Import(name="testResult", required=true)
    private String testResult;

    /**
     * @return Whether the test case passed in the agent environment.
     * 
     */
    public String testResult() {
        return this.testResult;
    }

    /**
     * The time that the test was run.
     * 
     */
    @Import(name="testTime", required=true)
    private String testTime;

    /**
     * @return The time that the test was run.
     * 
     */
    public String testTime() {
        return this.testTime;
    }

    private GoogleCloudDialogflowCxV3beta1TestCaseResultResponse() {}

    private GoogleCloudDialogflowCxV3beta1TestCaseResultResponse(GoogleCloudDialogflowCxV3beta1TestCaseResultResponse $) {
        this.conversationTurns = $.conversationTurns;
        this.environment = $.environment;
        this.name = $.name;
        this.testResult = $.testResult;
        this.testTime = $.testTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3beta1TestCaseResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3beta1TestCaseResultResponse $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3beta1TestCaseResultResponse();
        }

        public Builder(GoogleCloudDialogflowCxV3beta1TestCaseResultResponse defaults) {
            $ = new GoogleCloudDialogflowCxV3beta1TestCaseResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param conversationTurns The conversation turns uttered during the test case replay in chronological order.
         * 
         * @return builder
         * 
         */
        public Builder conversationTurns(List<GoogleCloudDialogflowCxV3beta1ConversationTurnResponse> conversationTurns) {
            $.conversationTurns = conversationTurns;
            return this;
        }

        /**
         * @param conversationTurns The conversation turns uttered during the test case replay in chronological order.
         * 
         * @return builder
         * 
         */
        public Builder conversationTurns(GoogleCloudDialogflowCxV3beta1ConversationTurnResponse... conversationTurns) {
            return conversationTurns(List.of(conversationTurns));
        }

        /**
         * @param environment Environment where the test was run. If not set, it indicates the draft environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param name The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param testResult Whether the test case passed in the agent environment.
         * 
         * @return builder
         * 
         */
        public Builder testResult(String testResult) {
            $.testResult = testResult;
            return this;
        }

        /**
         * @param testTime The time that the test was run.
         * 
         * @return builder
         * 
         */
        public Builder testTime(String testTime) {
            $.testTime = testTime;
            return this;
        }

        public GoogleCloudDialogflowCxV3beta1TestCaseResultResponse build() {
            $.conversationTurns = Objects.requireNonNull($.conversationTurns, "expected parameter 'conversationTurns' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.testResult = Objects.requireNonNull($.testResult, "expected parameter 'testResult' to be non-null");
            $.testTime = Objects.requireNonNull($.testTime, "expected parameter 'testTime' to be non-null");
            return $;
        }
    }

}
