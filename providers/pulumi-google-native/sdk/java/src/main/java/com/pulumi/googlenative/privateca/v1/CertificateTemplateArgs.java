// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca.v1.inputs.CertificateExtensionConstraintsArgs;
import com.pulumi.googlenative.privateca.v1.inputs.CertificateIdentityConstraintsArgs;
import com.pulumi.googlenative.privateca.v1.inputs.X509ParametersArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateTemplateArgs Empty = new CertificateTemplateArgs();

    /**
     * Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    @Import(name="certificateTemplateId", required=true)
    private Output<String> certificateTemplateId;

    /**
     * @return Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    public Output<String> certificateTemplateId() {
        return this.certificateTemplateId;
    }

    /**
     * Optional. A human-readable description of scenarios this template is intended for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A human-readable description of scenarios this template is intended for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
     * 
     */
    @Import(name="identityConstraints")
    private @Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints;

    /**
     * @return Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
     * 
     */
    public Optional<Output<CertificateIdentityConstraintsArgs>> identityConstraints() {
        return Optional.ofNullable(this.identityConstraints);
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels with user-defined metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
     * 
     */
    @Import(name="passthroughExtensions")
    private @Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions;

    /**
     * @return Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
     * 
     */
    public Optional<Output<CertificateExtensionConstraintsArgs>> passthroughExtensions() {
        return Optional.ofNullable(this.passthroughExtensions);
    }

    /**
     * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @Import(name="predefinedValues")
    private @Nullable Output<X509ParametersArgs> predefinedValues;

    /**
     * @return Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    public Optional<Output<X509ParametersArgs>> predefinedValues() {
        return Optional.ofNullable(this.predefinedValues);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    private CertificateTemplateArgs() {}

    private CertificateTemplateArgs(CertificateTemplateArgs $) {
        this.certificateTemplateId = $.certificateTemplateId;
        this.description = $.description;
        this.identityConstraints = $.identityConstraints;
        this.labels = $.labels;
        this.location = $.location;
        this.passthroughExtensions = $.passthroughExtensions;
        this.predefinedValues = $.predefinedValues;
        this.project = $.project;
        this.requestId = $.requestId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateTemplateArgs $;

        public Builder() {
            $ = new CertificateTemplateArgs();
        }

        public Builder(CertificateTemplateArgs defaults) {
            $ = new CertificateTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateTemplateId Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder certificateTemplateId(Output<String> certificateTemplateId) {
            $.certificateTemplateId = certificateTemplateId;
            return this;
        }

        /**
         * @param certificateTemplateId Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder certificateTemplateId(String certificateTemplateId) {
            return certificateTemplateId(Output.of(certificateTemplateId));
        }

        /**
         * @param description Optional. A human-readable description of scenarios this template is intended for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A human-readable description of scenarios this template is intended for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identityConstraints Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
         * 
         * @return builder
         * 
         */
        public Builder identityConstraints(@Nullable Output<CertificateIdentityConstraintsArgs> identityConstraints) {
            $.identityConstraints = identityConstraints;
            return this;
        }

        /**
         * @param identityConstraints Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
         * 
         * @return builder
         * 
         */
        public Builder identityConstraints(CertificateIdentityConstraintsArgs identityConstraints) {
            return identityConstraints(Output.of(identityConstraints));
        }

        /**
         * @param labels Optional. Labels with user-defined metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels with user-defined metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param passthroughExtensions Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
         * 
         * @return builder
         * 
         */
        public Builder passthroughExtensions(@Nullable Output<CertificateExtensionConstraintsArgs> passthroughExtensions) {
            $.passthroughExtensions = passthroughExtensions;
            return this;
        }

        /**
         * @param passthroughExtensions Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
         * 
         * @return builder
         * 
         */
        public Builder passthroughExtensions(CertificateExtensionConstraintsArgs passthroughExtensions) {
            return passthroughExtensions(Output.of(passthroughExtensions));
        }

        /**
         * @param predefinedValues Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
         * 
         * @return builder
         * 
         */
        public Builder predefinedValues(@Nullable Output<X509ParametersArgs> predefinedValues) {
            $.predefinedValues = predefinedValues;
            return this;
        }

        /**
         * @param predefinedValues Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
         * 
         * @return builder
         * 
         */
        public Builder predefinedValues(X509ParametersArgs predefinedValues) {
            return predefinedValues(Output.of(predefinedValues));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public CertificateTemplateArgs build() {
            $.certificateTemplateId = Objects.requireNonNull($.certificateTemplateId, "expected parameter 'certificateTemplateId' to be non-null");
            return $;
        }
    }

}
