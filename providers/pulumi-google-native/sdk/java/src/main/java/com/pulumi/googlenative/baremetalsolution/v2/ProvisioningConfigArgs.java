// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.baremetalsolution.v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.baremetalsolution.v2.inputs.InstanceConfigArgs;
import com.pulumi.googlenative.baremetalsolution.v2.inputs.NetworkConfigArgs;
import com.pulumi.googlenative.baremetalsolution.v2.inputs.VolumeConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProvisioningConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProvisioningConfigArgs Empty = new ProvisioningConfigArgs();

    /**
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     * @deprecated
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     */
    @Deprecated /* Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     * @deprecated
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     * 
     */
    @Deprecated /* Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * A service account to enable customers to access instance credentials upon handover.
     * 
     */
    @Import(name="handoverServiceAccount")
    private @Nullable Output<String> handoverServiceAccount;

    /**
     * @return A service account to enable customers to access instance credentials upon handover.
     * 
     */
    public Optional<Output<String>> handoverServiceAccount() {
        return Optional.ofNullable(this.handoverServiceAccount);
    }

    /**
     * Instances to be created.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<InstanceConfigArgs>> instances;

    /**
     * @return Instances to be created.
     * 
     */
    public Optional<Output<List<InstanceConfigArgs>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Networks to be created.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<NetworkConfigArgs>> networks;

    /**
     * @return Networks to be created.
     * 
     */
    public Optional<Output<List<NetworkConfigArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional status messages associated with the FAILED state.
     * 
     */
    @Import(name="statusMessage")
    private @Nullable Output<String> statusMessage;

    /**
     * @return Optional status messages associated with the FAILED state.
     * 
     */
    public Optional<Output<String>> statusMessage() {
        return Optional.ofNullable(this.statusMessage);
    }

    /**
     * A generated ticket id to track provisioning request.
     * 
     */
    @Import(name="ticketId")
    private @Nullable Output<String> ticketId;

    /**
     * @return A generated ticket id to track provisioning request.
     * 
     */
    public Optional<Output<String>> ticketId() {
        return Optional.ofNullable(this.ticketId);
    }

    /**
     * Volumes to be created.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<VolumeConfigArgs>> volumes;

    /**
     * @return Volumes to be created.
     * 
     */
    public Optional<Output<List<VolumeConfigArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    /**
     * If true, VPC SC is enabled for the cluster.
     * 
     */
    @Import(name="vpcScEnabled")
    private @Nullable Output<Boolean> vpcScEnabled;

    /**
     * @return If true, VPC SC is enabled for the cluster.
     * 
     */
    public Optional<Output<Boolean>> vpcScEnabled() {
        return Optional.ofNullable(this.vpcScEnabled);
    }

    private ProvisioningConfigArgs() {}

    private ProvisioningConfigArgs(ProvisioningConfigArgs $) {
        this.email = $.email;
        this.handoverServiceAccount = $.handoverServiceAccount;
        this.instances = $.instances;
        this.location = $.location;
        this.networks = $.networks;
        this.project = $.project;
        this.statusMessage = $.statusMessage;
        this.ticketId = $.ticketId;
        this.volumes = $.volumes;
        this.vpcScEnabled = $.vpcScEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProvisioningConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProvisioningConfigArgs $;

        public Builder() {
            $ = new ProvisioningConfigArgs();
        }

        public Builder(ProvisioningConfigArgs defaults) {
            $ = new ProvisioningConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
         * 
         * @return builder
         * 
         * @deprecated
         * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
         * 
         */
        @Deprecated /* Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
         * 
         * @return builder
         * 
         * @deprecated
         * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
         * 
         */
        @Deprecated /* Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param handoverServiceAccount A service account to enable customers to access instance credentials upon handover.
         * 
         * @return builder
         * 
         */
        public Builder handoverServiceAccount(@Nullable Output<String> handoverServiceAccount) {
            $.handoverServiceAccount = handoverServiceAccount;
            return this;
        }

        /**
         * @param handoverServiceAccount A service account to enable customers to access instance credentials upon handover.
         * 
         * @return builder
         * 
         */
        public Builder handoverServiceAccount(String handoverServiceAccount) {
            return handoverServiceAccount(Output.of(handoverServiceAccount));
        }

        /**
         * @param instances Instances to be created.
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<List<InstanceConfigArgs>> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances Instances to be created.
         * 
         * @return builder
         * 
         */
        public Builder instances(List<InstanceConfigArgs> instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param instances Instances to be created.
         * 
         * @return builder
         * 
         */
        public Builder instances(InstanceConfigArgs... instances) {
            return instances(List.of(instances));
        }

        /**
         * @param location Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param networks Networks to be created.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<NetworkConfigArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Networks to be created.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<NetworkConfigArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Networks to be created.
         * 
         * @return builder
         * 
         */
        public Builder networks(NetworkConfigArgs... networks) {
            return networks(List.of(networks));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param statusMessage Optional status messages associated with the FAILED state.
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(@Nullable Output<String> statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        /**
         * @param statusMessage Optional status messages associated with the FAILED state.
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(String statusMessage) {
            return statusMessage(Output.of(statusMessage));
        }

        /**
         * @param ticketId A generated ticket id to track provisioning request.
         * 
         * @return builder
         * 
         */
        public Builder ticketId(@Nullable Output<String> ticketId) {
            $.ticketId = ticketId;
            return this;
        }

        /**
         * @param ticketId A generated ticket id to track provisioning request.
         * 
         * @return builder
         * 
         */
        public Builder ticketId(String ticketId) {
            return ticketId(Output.of(ticketId));
        }

        /**
         * @param volumes Volumes to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<VolumeConfigArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes Volumes to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<VolumeConfigArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes Volumes to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(VolumeConfigArgs... volumes) {
            return volumes(List.of(volumes));
        }

        /**
         * @param vpcScEnabled If true, VPC SC is enabled for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcScEnabled(@Nullable Output<Boolean> vpcScEnabled) {
            $.vpcScEnabled = vpcScEnabled;
            return this;
        }

        /**
         * @param vpcScEnabled If true, VPC SC is enabled for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcScEnabled(Boolean vpcScEnabled) {
            return vpcScEnabled(Output.of(vpcScEnabled));
        }

        public ProvisioningConfigArgs build() {
            return $;
        }
    }

}
