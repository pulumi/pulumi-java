// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.appengine_v1.inputs.CpuUtilizationResponse;
import com.pulumi.googlenative.appengine_v1.inputs.DiskUtilizationResponse;
import com.pulumi.googlenative.appengine_v1.inputs.NetworkUtilizationResponse;
import com.pulumi.googlenative.appengine_v1.inputs.RequestUtilizationResponse;
import com.pulumi.googlenative.appengine_v1.inputs.StandardSchedulerSettingsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Automatic scaling is based on request rate, response latencies, and other application metrics.
 * 
 */
public final class AutomaticScalingResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutomaticScalingResponse Empty = new AutomaticScalingResponse();

    /**
     * The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
     * 
     */
    @Import(name="coolDownPeriod", required=true)
    private String coolDownPeriod;

    /**
     * @return The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
     * 
     */
    public String coolDownPeriod() {
        return this.coolDownPeriod;
    }

    /**
     * Target scaling by CPU usage.
     * 
     */
    @Import(name="cpuUtilization", required=true)
    private CpuUtilizationResponse cpuUtilization;

    /**
     * @return Target scaling by CPU usage.
     * 
     */
    public CpuUtilizationResponse cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Target scaling by disk usage.
     * 
     */
    @Import(name="diskUtilization", required=true)
    private DiskUtilizationResponse diskUtilization;

    /**
     * @return Target scaling by disk usage.
     * 
     */
    public DiskUtilizationResponse diskUtilization() {
        return this.diskUtilization;
    }

    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
     * 
     */
    @Import(name="maxConcurrentRequests", required=true)
    private Integer maxConcurrentRequests;

    /**
     * @return Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
     * 
     */
    public Integer maxConcurrentRequests() {
        return this.maxConcurrentRequests;
    }

    /**
     * Maximum number of idle instances that should be maintained for this version.
     * 
     */
    @Import(name="maxIdleInstances", required=true)
    private Integer maxIdleInstances;

    /**
     * @return Maximum number of idle instances that should be maintained for this version.
     * 
     */
    public Integer maxIdleInstances() {
        return this.maxIdleInstances;
    }

    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="maxPendingLatency", required=true)
    private String maxPendingLatency;

    /**
     * @return Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    public String maxPendingLatency() {
        return this.maxPendingLatency;
    }

    /**
     * Maximum number of instances that should be started to handle requests for this version.
     * 
     */
    @Import(name="maxTotalInstances", required=true)
    private Integer maxTotalInstances;

    /**
     * @return Maximum number of instances that should be started to handle requests for this version.
     * 
     */
    public Integer maxTotalInstances() {
        return this.maxTotalInstances;
    }

    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    @Import(name="minIdleInstances", required=true)
    private Integer minIdleInstances;

    /**
     * @return Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    public Integer minIdleInstances() {
        return this.minIdleInstances;
    }

    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="minPendingLatency", required=true)
    private String minPendingLatency;

    /**
     * @return Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    public String minPendingLatency() {
        return this.minPendingLatency;
    }

    /**
     * Minimum number of running instances that should be maintained for this version.
     * 
     */
    @Import(name="minTotalInstances", required=true)
    private Integer minTotalInstances;

    /**
     * @return Minimum number of running instances that should be maintained for this version.
     * 
     */
    public Integer minTotalInstances() {
        return this.minTotalInstances;
    }

    /**
     * Target scaling by network usage.
     * 
     */
    @Import(name="networkUtilization", required=true)
    private NetworkUtilizationResponse networkUtilization;

    /**
     * @return Target scaling by network usage.
     * 
     */
    public NetworkUtilizationResponse networkUtilization() {
        return this.networkUtilization;
    }

    /**
     * Target scaling by request utilization.
     * 
     */
    @Import(name="requestUtilization", required=true)
    private RequestUtilizationResponse requestUtilization;

    /**
     * @return Target scaling by request utilization.
     * 
     */
    public RequestUtilizationResponse requestUtilization() {
        return this.requestUtilization;
    }

    /**
     * Scheduler settings for standard environment.
     * 
     */
    @Import(name="standardSchedulerSettings", required=true)
    private StandardSchedulerSettingsResponse standardSchedulerSettings;

    /**
     * @return Scheduler settings for standard environment.
     * 
     */
    public StandardSchedulerSettingsResponse standardSchedulerSettings() {
        return this.standardSchedulerSettings;
    }

    private AutomaticScalingResponse() {}

    private AutomaticScalingResponse(AutomaticScalingResponse $) {
        this.coolDownPeriod = $.coolDownPeriod;
        this.cpuUtilization = $.cpuUtilization;
        this.diskUtilization = $.diskUtilization;
        this.maxConcurrentRequests = $.maxConcurrentRequests;
        this.maxIdleInstances = $.maxIdleInstances;
        this.maxPendingLatency = $.maxPendingLatency;
        this.maxTotalInstances = $.maxTotalInstances;
        this.minIdleInstances = $.minIdleInstances;
        this.minPendingLatency = $.minPendingLatency;
        this.minTotalInstances = $.minTotalInstances;
        this.networkUtilization = $.networkUtilization;
        this.requestUtilization = $.requestUtilization;
        this.standardSchedulerSettings = $.standardSchedulerSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomaticScalingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomaticScalingResponse $;

        public Builder() {
            $ = new AutomaticScalingResponse();
        }

        public Builder(AutomaticScalingResponse defaults) {
            $ = new AutomaticScalingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param coolDownPeriod The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
         * 
         * @return builder
         * 
         */
        public Builder coolDownPeriod(String coolDownPeriod) {
            $.coolDownPeriod = coolDownPeriod;
            return this;
        }

        /**
         * @param cpuUtilization Target scaling by CPU usage.
         * 
         * @return builder
         * 
         */
        public Builder cpuUtilization(CpuUtilizationResponse cpuUtilization) {
            $.cpuUtilization = cpuUtilization;
            return this;
        }

        /**
         * @param diskUtilization Target scaling by disk usage.
         * 
         * @return builder
         * 
         */
        public Builder diskUtilization(DiskUtilizationResponse diskUtilization) {
            $.diskUtilization = diskUtilization;
            return this;
        }

        /**
         * @param maxConcurrentRequests Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRequests(Integer maxConcurrentRequests) {
            $.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }

        /**
         * @param maxIdleInstances Maximum number of idle instances that should be maintained for this version.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleInstances(Integer maxIdleInstances) {
            $.maxIdleInstances = maxIdleInstances;
            return this;
        }

        /**
         * @param maxPendingLatency Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
         * 
         * @return builder
         * 
         */
        public Builder maxPendingLatency(String maxPendingLatency) {
            $.maxPendingLatency = maxPendingLatency;
            return this;
        }

        /**
         * @param maxTotalInstances Maximum number of instances that should be started to handle requests for this version.
         * 
         * @return builder
         * 
         */
        public Builder maxTotalInstances(Integer maxTotalInstances) {
            $.maxTotalInstances = maxTotalInstances;
            return this;
        }

        /**
         * @param minIdleInstances Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
         * 
         * @return builder
         * 
         */
        public Builder minIdleInstances(Integer minIdleInstances) {
            $.minIdleInstances = minIdleInstances;
            return this;
        }

        /**
         * @param minPendingLatency Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
         * 
         * @return builder
         * 
         */
        public Builder minPendingLatency(String minPendingLatency) {
            $.minPendingLatency = minPendingLatency;
            return this;
        }

        /**
         * @param minTotalInstances Minimum number of running instances that should be maintained for this version.
         * 
         * @return builder
         * 
         */
        public Builder minTotalInstances(Integer minTotalInstances) {
            $.minTotalInstances = minTotalInstances;
            return this;
        }

        /**
         * @param networkUtilization Target scaling by network usage.
         * 
         * @return builder
         * 
         */
        public Builder networkUtilization(NetworkUtilizationResponse networkUtilization) {
            $.networkUtilization = networkUtilization;
            return this;
        }

        /**
         * @param requestUtilization Target scaling by request utilization.
         * 
         * @return builder
         * 
         */
        public Builder requestUtilization(RequestUtilizationResponse requestUtilization) {
            $.requestUtilization = requestUtilization;
            return this;
        }

        /**
         * @param standardSchedulerSettings Scheduler settings for standard environment.
         * 
         * @return builder
         * 
         */
        public Builder standardSchedulerSettings(StandardSchedulerSettingsResponse standardSchedulerSettings) {
            $.standardSchedulerSettings = standardSchedulerSettings;
            return this;
        }

        public AutomaticScalingResponse build() {
            $.coolDownPeriod = Objects.requireNonNull($.coolDownPeriod, "expected parameter 'coolDownPeriod' to be non-null");
            $.cpuUtilization = Objects.requireNonNull($.cpuUtilization, "expected parameter 'cpuUtilization' to be non-null");
            $.diskUtilization = Objects.requireNonNull($.diskUtilization, "expected parameter 'diskUtilization' to be non-null");
            $.maxConcurrentRequests = Objects.requireNonNull($.maxConcurrentRequests, "expected parameter 'maxConcurrentRequests' to be non-null");
            $.maxIdleInstances = Objects.requireNonNull($.maxIdleInstances, "expected parameter 'maxIdleInstances' to be non-null");
            $.maxPendingLatency = Objects.requireNonNull($.maxPendingLatency, "expected parameter 'maxPendingLatency' to be non-null");
            $.maxTotalInstances = Objects.requireNonNull($.maxTotalInstances, "expected parameter 'maxTotalInstances' to be non-null");
            $.minIdleInstances = Objects.requireNonNull($.minIdleInstances, "expected parameter 'minIdleInstances' to be non-null");
            $.minPendingLatency = Objects.requireNonNull($.minPendingLatency, "expected parameter 'minPendingLatency' to be non-null");
            $.minTotalInstances = Objects.requireNonNull($.minTotalInstances, "expected parameter 'minTotalInstances' to be non-null");
            $.networkUtilization = Objects.requireNonNull($.networkUtilization, "expected parameter 'networkUtilization' to be non-null");
            $.requestUtilization = Objects.requireNonNull($.requestUtilization, "expected parameter 'requestUtilization' to be non-null");
            $.standardSchedulerSettings = Objects.requireNonNull($.standardSchedulerSettings, "expected parameter 'standardSchedulerSettings' to be non-null");
            return $;
        }
    }

}
