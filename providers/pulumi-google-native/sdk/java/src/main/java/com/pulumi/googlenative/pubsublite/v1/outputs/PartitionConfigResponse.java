// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.pubsublite.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.pubsublite.v1.outputs.CapacityResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PartitionConfigResponse {
    /**
     * @return The capacity configuration.
     * 
     */
    private final CapacityResponse capacity;
    /**
     * @return The number of partitions in the topic. Must be at least 1. Once a topic has been created the number of partitions can be increased but not decreased. Message ordering is not guaranteed across a topic resize. For more information see https://cloud.google.com/pubsub/lite/docs/topics#scaling_capacity
     * 
     */
    private final String count;
    /**
     * @return DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
     * 
     * @deprecated
     * DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
     * 
     */
    @Deprecated /* DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4]. */
    private final Integer scale;

    @CustomType.Constructor
    private PartitionConfigResponse(
        @CustomType.Parameter("capacity") CapacityResponse capacity,
        @CustomType.Parameter("count") String count,
        @CustomType.Parameter("scale") Integer scale) {
        this.capacity = capacity;
        this.count = count;
        this.scale = scale;
    }

    /**
     * @return The capacity configuration.
     * 
     */
    public CapacityResponse capacity() {
        return this.capacity;
    }
    /**
     * @return The number of partitions in the topic. Must be at least 1. Once a topic has been created the number of partitions can be increased but not decreased. Message ordering is not guaranteed across a topic resize. For more information see https://cloud.google.com/pubsub/lite/docs/topics#scaling_capacity
     * 
     */
    public String count() {
        return this.count;
    }
    /**
     * @return DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
     * 
     * @deprecated
     * DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
     * 
     */
    @Deprecated /* DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4]. */
    public Integer scale() {
        return this.scale;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PartitionConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CapacityResponse capacity;
        private String count;
        private Integer scale;

        public Builder() {
    	      // Empty
        }

        public Builder(PartitionConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.count = defaults.count;
    	      this.scale = defaults.scale;
        }

        public Builder capacity(CapacityResponse capacity) {
            this.capacity = Objects.requireNonNull(capacity);
            return this;
        }
        public Builder count(String count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }
        public Builder scale(Integer scale) {
            this.scale = Objects.requireNonNull(scale);
            return this;
        }        public PartitionConfigResponse build() {
            return new PartitionConfigResponse(capacity, count, scale);
        }
    }
}
