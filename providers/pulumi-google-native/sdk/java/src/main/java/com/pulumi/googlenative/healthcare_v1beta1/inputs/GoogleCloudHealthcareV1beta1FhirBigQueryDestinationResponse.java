// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare_v1beta1.inputs.SchemaConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The configuration for exporting to BigQuery.
 * 
 */
public final class GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse Empty = new GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse();

    /**
     * BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
     * 
     */
    @Import(name="datasetUri", required=true)
    private String datasetUri;

    public String datasetUri() {
        return this.datasetUri;
    }

    /**
     * Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    @Import(name="force", required=true)
    private Boolean force;

    public Boolean force() {
        return this.force;
    }

    /**
     * The configuration for the exported BigQuery schema.
     * 
     */
    @Import(name="schemaConfig", required=true)
    private SchemaConfigResponse schemaConfig;

    public SchemaConfigResponse schemaConfig() {
        return this.schemaConfig;
    }

    /**
     * Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    @Import(name="writeDisposition", required=true)
    private String writeDisposition;

    public String writeDisposition() {
        return this.writeDisposition;
    }

    private GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse() {}

    private GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse(GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse $) {
        this.datasetUri = $.datasetUri;
        this.force = $.force;
        this.schemaConfig = $.schemaConfig;
        this.writeDisposition = $.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse $;

        public Builder() {
            $ = new GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse();
        }

        public Builder(GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse defaults) {
            $ = new GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse(Objects.requireNonNull(defaults));
        }

        public Builder datasetUri(String datasetUri) {
            $.datasetUri = datasetUri;
            return this;
        }

        public Builder force(Boolean force) {
            $.force = force;
            return this;
        }

        public Builder schemaConfig(SchemaConfigResponse schemaConfig) {
            $.schemaConfig = schemaConfig;
            return this;
        }

        public Builder writeDisposition(String writeDisposition) {
            $.writeDisposition = writeDisposition;
            return this;
        }

        public GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse build() {
            $.datasetUri = Objects.requireNonNull($.datasetUri, "expected parameter 'datasetUri' to be non-null");
            $.force = Objects.requireNonNull($.force, "expected parameter 'force' to be non-null");
            $.schemaConfig = Objects.requireNonNull($.schemaConfig, "expected parameter 'schemaConfig' to be non-null");
            $.writeDisposition = Objects.requireNonNull($.writeDisposition, "expected parameter 'writeDisposition' to be non-null");
            return $;
        }
    }

}
