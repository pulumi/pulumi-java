// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v3.inputs.AggregationResponse;
import com.pulumi.googlenative.monitoring_v3.inputs.TriggerResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A condition type that checks that monitored resources are reporting data. The configuration defines a metric and a set of monitored resources. The predicate is considered in violation when a time series for the specified metric of a monitored resource does not include any data in the specified duration.
 * 
 */
public final class MetricAbsenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetricAbsenceResponse Empty = new MetricAbsenceResponse();

    /**
     * Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
     * 
     */
    @Import(name="aggregations", required=true)
    private List<AggregationResponse> aggregations;

    public List<AggregationResponse> aggregations() {
        return this.aggregations;
    }

    /**
     * The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.
     * 
     */
    @Import(name="duration", required=true)
    private String duration;

    public String duration() {
        return this.duration;
    }

    /**
     * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
     * 
     */
    @Import(name="filter", required=true)
    private String filter;

    public String filter() {
        return this.filter;
    }

    /**
     * The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations.
     * 
     */
    @Import(name="trigger", required=true)
    private TriggerResponse trigger;

    public TriggerResponse trigger() {
        return this.trigger;
    }

    private MetricAbsenceResponse() {}

    private MetricAbsenceResponse(MetricAbsenceResponse $) {
        this.aggregations = $.aggregations;
        this.duration = $.duration;
        this.filter = $.filter;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAbsenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAbsenceResponse $;

        public Builder() {
            $ = new MetricAbsenceResponse();
        }

        public Builder(MetricAbsenceResponse defaults) {
            $ = new MetricAbsenceResponse(Objects.requireNonNull(defaults));
        }

        public Builder aggregations(List<AggregationResponse> aggregations) {
            $.aggregations = aggregations;
            return this;
        }

        public Builder aggregations(AggregationResponse... aggregations) {
            return aggregations(List.of(aggregations));
        }

        public Builder duration(String duration) {
            $.duration = duration;
            return this;
        }

        public Builder filter(String filter) {
            $.filter = filter;
            return this;
        }

        public Builder trigger(TriggerResponse trigger) {
            $.trigger = trigger;
            return this;
        }

        public MetricAbsenceResponse build() {
            $.aggregations = Objects.requireNonNull($.aggregations, "expected parameter 'aggregations' to be non-null");
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.trigger = Objects.requireNonNull($.trigger, "expected parameter 'trigger' to be non-null");
            return $;
        }
    }

}
