// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.ArtifactRuleArgs;
import com.pulumi.googlenative.containeranalysis.v1beta1.inputs.SigningKeyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
 * 
 */
public final class InTotoArgs extends com.pulumi.resources.ResourceArgs {

    public static final InTotoArgs Empty = new InTotoArgs();

    /**
     * This field contains the expected command used to perform the step.
     * 
     */
    @Import(name="expectedCommand")
    private @Nullable Output<List<String>> expectedCommand;

    /**
     * @return This field contains the expected command used to perform the step.
     * 
     */
    public Optional<Output<List<String>>> expectedCommand() {
        return Optional.ofNullable(this.expectedCommand);
    }

    /**
     * The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
     * 
     */
    @Import(name="expectedMaterials")
    private @Nullable Output<List<ArtifactRuleArgs>> expectedMaterials;

    /**
     * @return The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
     * 
     */
    public Optional<Output<List<ArtifactRuleArgs>>> expectedMaterials() {
        return Optional.ofNullable(this.expectedMaterials);
    }

    @Import(name="expectedProducts")
    private @Nullable Output<List<ArtifactRuleArgs>> expectedProducts;

    public Optional<Output<List<ArtifactRuleArgs>>> expectedProducts() {
        return Optional.ofNullable(this.expectedProducts);
    }

    /**
     * This field contains the public keys that can be used to verify the signatures on the step metadata.
     * 
     */
    @Import(name="signingKeys")
    private @Nullable Output<List<SigningKeyArgs>> signingKeys;

    /**
     * @return This field contains the public keys that can be used to verify the signatures on the step metadata.
     * 
     */
    public Optional<Output<List<SigningKeyArgs>>> signingKeys() {
        return Optional.ofNullable(this.signingKeys);
    }

    /**
     * This field identifies the name of the step in the supply chain.
     * 
     */
    @Import(name="stepName")
    private @Nullable Output<String> stepName;

    /**
     * @return This field identifies the name of the step in the supply chain.
     * 
     */
    public Optional<Output<String>> stepName() {
        return Optional.ofNullable(this.stepName);
    }

    /**
     * This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<String> threshold;

    /**
     * @return This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
     * 
     */
    public Optional<Output<String>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private InTotoArgs() {}

    private InTotoArgs(InTotoArgs $) {
        this.expectedCommand = $.expectedCommand;
        this.expectedMaterials = $.expectedMaterials;
        this.expectedProducts = $.expectedProducts;
        this.signingKeys = $.signingKeys;
        this.stepName = $.stepName;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InTotoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InTotoArgs $;

        public Builder() {
            $ = new InTotoArgs();
        }

        public Builder(InTotoArgs defaults) {
            $ = new InTotoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expectedCommand This field contains the expected command used to perform the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedCommand(@Nullable Output<List<String>> expectedCommand) {
            $.expectedCommand = expectedCommand;
            return this;
        }

        /**
         * @param expectedCommand This field contains the expected command used to perform the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedCommand(List<String> expectedCommand) {
            return expectedCommand(Output.of(expectedCommand));
        }

        /**
         * @param expectedCommand This field contains the expected command used to perform the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedCommand(String... expectedCommand) {
            return expectedCommand(List.of(expectedCommand));
        }

        /**
         * @param expectedMaterials The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedMaterials(@Nullable Output<List<ArtifactRuleArgs>> expectedMaterials) {
            $.expectedMaterials = expectedMaterials;
            return this;
        }

        /**
         * @param expectedMaterials The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedMaterials(List<ArtifactRuleArgs> expectedMaterials) {
            return expectedMaterials(Output.of(expectedMaterials));
        }

        /**
         * @param expectedMaterials The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedMaterials(ArtifactRuleArgs... expectedMaterials) {
            return expectedMaterials(List.of(expectedMaterials));
        }

        public Builder expectedProducts(@Nullable Output<List<ArtifactRuleArgs>> expectedProducts) {
            $.expectedProducts = expectedProducts;
            return this;
        }

        public Builder expectedProducts(List<ArtifactRuleArgs> expectedProducts) {
            return expectedProducts(Output.of(expectedProducts));
        }

        public Builder expectedProducts(ArtifactRuleArgs... expectedProducts) {
            return expectedProducts(List.of(expectedProducts));
        }

        /**
         * @param signingKeys This field contains the public keys that can be used to verify the signatures on the step metadata.
         * 
         * @return builder
         * 
         */
        public Builder signingKeys(@Nullable Output<List<SigningKeyArgs>> signingKeys) {
            $.signingKeys = signingKeys;
            return this;
        }

        /**
         * @param signingKeys This field contains the public keys that can be used to verify the signatures on the step metadata.
         * 
         * @return builder
         * 
         */
        public Builder signingKeys(List<SigningKeyArgs> signingKeys) {
            return signingKeys(Output.of(signingKeys));
        }

        /**
         * @param signingKeys This field contains the public keys that can be used to verify the signatures on the step metadata.
         * 
         * @return builder
         * 
         */
        public Builder signingKeys(SigningKeyArgs... signingKeys) {
            return signingKeys(List.of(signingKeys));
        }

        /**
         * @param stepName This field identifies the name of the step in the supply chain.
         * 
         * @return builder
         * 
         */
        public Builder stepName(@Nullable Output<String> stepName) {
            $.stepName = stepName;
            return this;
        }

        /**
         * @param stepName This field identifies the name of the step in the supply chain.
         * 
         * @return builder
         * 
         */
        public Builder stepName(String stepName) {
            return stepName(Output.of(stepName));
        }

        /**
         * @param threshold This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<String> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
         * 
         * @return builder
         * 
         */
        public Builder threshold(String threshold) {
            return threshold(Output.of(threshold));
        }

        public InTotoArgs build() {
            return $;
        }
    }

}
