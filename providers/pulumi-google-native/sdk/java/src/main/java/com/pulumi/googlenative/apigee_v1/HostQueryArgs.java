// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.apigee_v1.inputs.GoogleCloudApigeeV1QueryMetricArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostQueryArgs Empty = new HostQueryArgs();

    /**
     * Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
     * 
     */
    @Import(name="csvDelimiter")
    private @Nullable Output<String> csvDelimiter;

    public Optional<Output<String>> csvDelimiter() {
        return Optional.ofNullable(this.csvDelimiter);
    }

    /**
     * A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<String>> dimensions;

    public Optional<Output<List<String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostAsyncQuery where analytics data will be grouped by organization and hostname.
     * 
     */
    @Import(name="envgroupHostname")
    private @Nullable Output<String> envgroupHostname;

    public Optional<Output<String>> envgroupHostname() {
        return Optional.ofNullable(this.envgroupHostname);
    }

    /**
     * Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
     * 
     */
    @Import(name="groupByTimeUnit")
    private @Nullable Output<String> groupByTimeUnit;

    public Optional<Output<String>> groupByTimeUnit() {
        return Optional.ofNullable(this.groupByTimeUnit);
    }

    /**
     * Maximum number of rows that can be returned in the result.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * A list of Metrics.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<GoogleCloudApigeeV1QueryMetricArgs>> metrics;

    public Optional<Output<List<GoogleCloudApigeeV1QueryMetricArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * Asynchronous Query Name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
     * 
     */
    @Import(name="outputFormat")
    private @Nullable Output<String> outputFormat;

    public Optional<Output<String>> outputFormat() {
        return Optional.ofNullable(this.outputFormat);
    }

    /**
     * Asynchronous Report ID.
     * 
     */
    @Import(name="reportDefinitionId")
    private @Nullable Output<String> reportDefinitionId;

    public Optional<Output<String>> reportDefinitionId() {
        return Optional.ofNullable(this.reportDefinitionId);
    }

    /**
     * Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: &#34;timeRange&#34;: { &#34;start&#34;: &#34;2018-07-29T00:13:00Z&#34;, &#34;end&#34;: &#34;2018-08-01T00:18:00Z&#34; }
     * 
     */
    @Import(name="timeRange", required=true)
    private Output<Object> timeRange;

    public Output<Object> timeRange() {
        return this.timeRange;
    }

    private HostQueryArgs() {}

    private HostQueryArgs(HostQueryArgs $) {
        this.csvDelimiter = $.csvDelimiter;
        this.dimensions = $.dimensions;
        this.envgroupHostname = $.envgroupHostname;
        this.filter = $.filter;
        this.groupByTimeUnit = $.groupByTimeUnit;
        this.limit = $.limit;
        this.metrics = $.metrics;
        this.name = $.name;
        this.organizationId = $.organizationId;
        this.outputFormat = $.outputFormat;
        this.reportDefinitionId = $.reportDefinitionId;
        this.timeRange = $.timeRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostQueryArgs $;

        public Builder() {
            $ = new HostQueryArgs();
        }

        public Builder(HostQueryArgs defaults) {
            $ = new HostQueryArgs(Objects.requireNonNull(defaults));
        }

        public Builder csvDelimiter(@Nullable Output<String> csvDelimiter) {
            $.csvDelimiter = csvDelimiter;
            return this;
        }

        public Builder csvDelimiter(String csvDelimiter) {
            return csvDelimiter(Output.of(csvDelimiter));
        }

        public Builder dimensions(@Nullable Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder envgroupHostname(@Nullable Output<String> envgroupHostname) {
            $.envgroupHostname = envgroupHostname;
            return this;
        }

        public Builder envgroupHostname(String envgroupHostname) {
            return envgroupHostname(Output.of(envgroupHostname));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder groupByTimeUnit(@Nullable Output<String> groupByTimeUnit) {
            $.groupByTimeUnit = groupByTimeUnit;
            return this;
        }

        public Builder groupByTimeUnit(String groupByTimeUnit) {
            return groupByTimeUnit(Output.of(groupByTimeUnit));
        }

        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        public Builder metrics(@Nullable Output<List<GoogleCloudApigeeV1QueryMetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<GoogleCloudApigeeV1QueryMetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(GoogleCloudApigeeV1QueryMetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public Builder outputFormat(@Nullable Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        public Builder reportDefinitionId(@Nullable Output<String> reportDefinitionId) {
            $.reportDefinitionId = reportDefinitionId;
            return this;
        }

        public Builder reportDefinitionId(String reportDefinitionId) {
            return reportDefinitionId(Output.of(reportDefinitionId));
        }

        public Builder timeRange(Output<Object> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        public Builder timeRange(Object timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public HostQueryArgs build() {
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            $.timeRange = Objects.requireNonNull($.timeRange, "expected parameter 'timeRange' to be non-null");
            return $;
        }
    }

}
