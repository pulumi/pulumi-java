// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigtableadmin.v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigtableadmin.v2.enums.ClusterDefaultStorageType;
import com.pulumi.googlenative.bigtableadmin.v2.inputs.ClusterConfigArgs;
import com.pulumi.googlenative.bigtableadmin.v2.inputs.EncryptionConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * Configuration for this cluster.
     * 
     */
    @Import(name="clusterConfig")
    private @Nullable Output<ClusterConfigArgs> clusterConfig;

    /**
     * @return Configuration for this cluster.
     * 
     */
    public Optional<Output<ClusterConfigArgs>> clusterConfig() {
        return Optional.ofNullable(this.clusterConfig);
    }

    /**
     * Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Immutable. The type of storage used by this cluster to serve its parent instance&#39;s tables, unless explicitly overridden.
     * 
     */
    @Import(name="defaultStorageType")
    private @Nullable Output<ClusterDefaultStorageType> defaultStorageType;

    /**
     * @return Immutable. The type of storage used by this cluster to serve its parent instance&#39;s tables, unless explicitly overridden.
     * 
     */
    public Optional<Output<ClusterDefaultStorageType>> defaultStorageType() {
        return Optional.ofNullable(this.defaultStorageType);
    }

    /**
     * Immutable. The encryption configuration for CMEK-protected clusters.
     * 
     */
    @Import(name="encryptionConfig")
    private @Nullable Output<EncryptionConfigArgs> encryptionConfig;

    /**
     * @return Immutable. The encryption configuration for CMEK-protected clusters.
     * 
     */
    public Optional<Output<EncryptionConfigArgs>> encryptionConfig() {
        return Optional.ofNullable(this.encryptionConfig);
    }

    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Immutable. The location where this cluster&#39;s nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Immutable. The location where this cluster&#39;s nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
     * 
     */
    @Import(name="serveNodes")
    private @Nullable Output<Integer> serveNodes;

    /**
     * @return The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
     * 
     */
    public Optional<Output<Integer>> serveNodes() {
        return Optional.ofNullable(this.serveNodes);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.clusterConfig = $.clusterConfig;
        this.clusterId = $.clusterId;
        this.defaultStorageType = $.defaultStorageType;
        this.encryptionConfig = $.encryptionConfig;
        this.instanceId = $.instanceId;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.serveNodes = $.serveNodes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterConfig Configuration for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterConfig(@Nullable Output<ClusterConfigArgs> clusterConfig) {
            $.clusterConfig = clusterConfig;
            return this;
        }

        /**
         * @param clusterConfig Configuration for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterConfig(ClusterConfigArgs clusterConfig) {
            return clusterConfig(Output.of(clusterConfig));
        }

        /**
         * @param clusterId Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param defaultStorageType Immutable. The type of storage used by this cluster to serve its parent instance&#39;s tables, unless explicitly overridden.
         * 
         * @return builder
         * 
         */
        public Builder defaultStorageType(@Nullable Output<ClusterDefaultStorageType> defaultStorageType) {
            $.defaultStorageType = defaultStorageType;
            return this;
        }

        /**
         * @param defaultStorageType Immutable. The type of storage used by this cluster to serve its parent instance&#39;s tables, unless explicitly overridden.
         * 
         * @return builder
         * 
         */
        public Builder defaultStorageType(ClusterDefaultStorageType defaultStorageType) {
            return defaultStorageType(Output.of(defaultStorageType));
        }

        /**
         * @param encryptionConfig Immutable. The encryption configuration for CMEK-protected clusters.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(@Nullable Output<EncryptionConfigArgs> encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        /**
         * @param encryptionConfig Immutable. The encryption configuration for CMEK-protected clusters.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(EncryptionConfigArgs encryptionConfig) {
            return encryptionConfig(Output.of(encryptionConfig));
        }

        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param location Immutable. The location where this cluster&#39;s nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Immutable. The location where this cluster&#39;s nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serveNodes The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
         * 
         * @return builder
         * 
         */
        public Builder serveNodes(@Nullable Output<Integer> serveNodes) {
            $.serveNodes = serveNodes;
            return this;
        }

        /**
         * @param serveNodes The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
         * 
         * @return builder
         * 
         */
        public Builder serveNodes(Integer serveNodes) {
            return serveNodes(Output.of(serveNodes));
        }

        public ClusterArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            return $;
        }
    }

}
