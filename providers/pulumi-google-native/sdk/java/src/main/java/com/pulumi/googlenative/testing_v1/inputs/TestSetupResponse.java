// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.AccountResponse;
import com.pulumi.googlenative.testing_v1.inputs.ApkResponse;
import com.pulumi.googlenative.testing_v1.inputs.DeviceFileResponse;
import com.pulumi.googlenative.testing_v1.inputs.EnvironmentVariableResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A description of how to set up the Android device prior to running the test.
 * 
 */
public final class TestSetupResponse extends com.pulumi.resources.InvokeArgs {

    public static final TestSetupResponse Empty = new TestSetupResponse();

    /**
     * The device will be logged in on this account for the duration of the test.
     * 
     */
    @Import(name="account", required=true)
    private AccountResponse account;

    public AccountResponse account() {
        return this.account;
    }

    /**
     * APKs to install in addition to those being directly tested. Currently capped at 100.
     * 
     */
    @Import(name="additionalApks", required=true)
    private List<ApkResponse> additionalApks;

    public List<ApkResponse> additionalApks() {
        return this.additionalApks;
    }

    /**
     * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     * 
     */
    @Import(name="directoriesToPull", required=true)
    private List<String> directoriesToPull;

    public List<String> directoriesToPull() {
        return this.directoriesToPull;
    }

    /**
     * Whether to prevent all runtime permissions to be granted at app install
     * 
     */
    @Import(name="dontAutograntPermissions", required=true)
    private Boolean dontAutograntPermissions;

    public Boolean dontAutograntPermissions() {
        return this.dontAutograntPermissions;
    }

    /**
     * Environment variables to set for the test (only applicable for instrumentation tests).
     * 
     */
    @Import(name="environmentVariables", required=true)
    private List<EnvironmentVariableResponse> environmentVariables;

    public List<EnvironmentVariableResponse> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * List of files to push to the device before starting the test.
     * 
     */
    @Import(name="filesToPush", required=true)
    private List<DeviceFileResponse> filesToPush;

    public List<DeviceFileResponse> filesToPush() {
        return this.filesToPush;
    }

    /**
     * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * 
     */
    @Import(name="networkProfile", required=true)
    private String networkProfile;

    public String networkProfile() {
        return this.networkProfile;
    }

    private TestSetupResponse() {}

    private TestSetupResponse(TestSetupResponse $) {
        this.account = $.account;
        this.additionalApks = $.additionalApks;
        this.directoriesToPull = $.directoriesToPull;
        this.dontAutograntPermissions = $.dontAutograntPermissions;
        this.environmentVariables = $.environmentVariables;
        this.filesToPush = $.filesToPush;
        this.networkProfile = $.networkProfile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestSetupResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestSetupResponse $;

        public Builder() {
            $ = new TestSetupResponse();
        }

        public Builder(TestSetupResponse defaults) {
            $ = new TestSetupResponse(Objects.requireNonNull(defaults));
        }

        public Builder account(AccountResponse account) {
            $.account = account;
            return this;
        }

        public Builder additionalApks(List<ApkResponse> additionalApks) {
            $.additionalApks = additionalApks;
            return this;
        }

        public Builder additionalApks(ApkResponse... additionalApks) {
            return additionalApks(List.of(additionalApks));
        }

        public Builder directoriesToPull(List<String> directoriesToPull) {
            $.directoriesToPull = directoriesToPull;
            return this;
        }

        public Builder directoriesToPull(String... directoriesToPull) {
            return directoriesToPull(List.of(directoriesToPull));
        }

        public Builder dontAutograntPermissions(Boolean dontAutograntPermissions) {
            $.dontAutograntPermissions = dontAutograntPermissions;
            return this;
        }

        public Builder environmentVariables(List<EnvironmentVariableResponse> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        public Builder environmentVariables(EnvironmentVariableResponse... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        public Builder filesToPush(List<DeviceFileResponse> filesToPush) {
            $.filesToPush = filesToPush;
            return this;
        }

        public Builder filesToPush(DeviceFileResponse... filesToPush) {
            return filesToPush(List.of(filesToPush));
        }

        public Builder networkProfile(String networkProfile) {
            $.networkProfile = networkProfile;
            return this;
        }

        public TestSetupResponse build() {
            $.account = Objects.requireNonNull($.account, "expected parameter 'account' to be non-null");
            $.additionalApks = Objects.requireNonNull($.additionalApks, "expected parameter 'additionalApks' to be non-null");
            $.directoriesToPull = Objects.requireNonNull($.directoriesToPull, "expected parameter 'directoriesToPull' to be non-null");
            $.dontAutograntPermissions = Objects.requireNonNull($.dontAutograntPermissions, "expected parameter 'dontAutograntPermissions' to be non-null");
            $.environmentVariables = Objects.requireNonNull($.environmentVariables, "expected parameter 'environmentVariables' to be non-null");
            $.filesToPush = Objects.requireNonNull($.filesToPush, "expected parameter 'filesToPush' to be non-null");
            $.networkProfile = Objects.requireNonNull($.networkProfile, "expected parameter 'networkProfile' to be non-null");
            return $;
        }
    }

}
