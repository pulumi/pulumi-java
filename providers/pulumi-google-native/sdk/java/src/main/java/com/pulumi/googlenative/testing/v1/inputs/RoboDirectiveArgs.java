// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing.v1.enums.RoboDirectiveActionType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
 * 
 */
public final class RoboDirectiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoboDirectiveArgs Empty = new RoboDirectiveArgs();

    /**
     * The type of action that Robo should perform on the specified element.
     * 
     */
    @Import(name="actionType", required=true)
    private Output<RoboDirectiveActionType> actionType;

    /**
     * @return The type of action that Robo should perform on the specified element.
     * 
     */
    public Output<RoboDirectiveActionType> actionType() {
        return this.actionType;
    }

    /**
     * The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
     * 
     */
    @Import(name="inputText")
    private @Nullable Output<String> inputText;

    /**
     * @return The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
     * 
     */
    public Optional<Output<String>> inputText() {
        return Optional.ofNullable(this.inputText);
    }

    /**
     * The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the &#34;foo&#34; part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the &#34;foo&#34; part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    private RoboDirectiveArgs() {}

    private RoboDirectiveArgs(RoboDirectiveArgs $) {
        this.actionType = $.actionType;
        this.inputText = $.inputText;
        this.resourceName = $.resourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoboDirectiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoboDirectiveArgs $;

        public Builder() {
            $ = new RoboDirectiveArgs();
        }

        public Builder(RoboDirectiveArgs defaults) {
            $ = new RoboDirectiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionType The type of action that Robo should perform on the specified element.
         * 
         * @return builder
         * 
         */
        public Builder actionType(Output<RoboDirectiveActionType> actionType) {
            $.actionType = actionType;
            return this;
        }

        /**
         * @param actionType The type of action that Robo should perform on the specified element.
         * 
         * @return builder
         * 
         */
        public Builder actionType(RoboDirectiveActionType actionType) {
            return actionType(Output.of(actionType));
        }

        /**
         * @param inputText The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
         * 
         * @return builder
         * 
         */
        public Builder inputText(@Nullable Output<String> inputText) {
            $.inputText = inputText;
            return this;
        }

        /**
         * @param inputText The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
         * 
         * @return builder
         * 
         */
        public Builder inputText(String inputText) {
            return inputText(Output.of(inputText));
        }

        /**
         * @param resourceName The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the &#34;foo&#34; part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the &#34;foo&#34; part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public RoboDirectiveArgs build() {
            $.actionType = Objects.requireNonNull($.actionType, "expected parameter 'actionType' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            return $;
        }
    }

}
