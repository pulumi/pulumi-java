// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.UpgradeDistributionArgs;
import com.pulumi.googlenative.containeranalysis.v1alpha1.inputs.VersionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
 * 
 */
public final class UpgradeOccurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpgradeOccurrenceArgs Empty = new UpgradeOccurrenceArgs();

    /**
     * Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     * 
     */
    @Import(name="distribution")
    private @Nullable Output<UpgradeDistributionArgs> distribution;

    /**
     * @return Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     * 
     */
    public Optional<Output<UpgradeDistributionArgs>> distribution() {
        return Optional.ofNullable(this.distribution);
    }

    /**
     * Required - The package this Upgrade is for.
     * 
     */
    @Import(name="package")
    private @Nullable Output<String> package_;

    /**
     * @return Required - The package this Upgrade is for.
     * 
     */
    public Optional<Output<String>> package_() {
        return Optional.ofNullable(this.package_);
    }

    /**
     * Required - The version of the package in a machine + human readable form.
     * 
     */
    @Import(name="parsedVersion")
    private @Nullable Output<VersionArgs> parsedVersion;

    /**
     * @return Required - The version of the package in a machine + human readable form.
     * 
     */
    public Optional<Output<VersionArgs>> parsedVersion() {
        return Optional.ofNullable(this.parsedVersion);
    }

    private UpgradeOccurrenceArgs() {}

    private UpgradeOccurrenceArgs(UpgradeOccurrenceArgs $) {
        this.distribution = $.distribution;
        this.package_ = $.package_;
        this.parsedVersion = $.parsedVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpgradeOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpgradeOccurrenceArgs $;

        public Builder() {
            $ = new UpgradeOccurrenceArgs();
        }

        public Builder(UpgradeOccurrenceArgs defaults) {
            $ = new UpgradeOccurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param distribution Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
         * 
         * @return builder
         * 
         */
        public Builder distribution(@Nullable Output<UpgradeDistributionArgs> distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param distribution Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
         * 
         * @return builder
         * 
         */
        public Builder distribution(UpgradeDistributionArgs distribution) {
            return distribution(Output.of(distribution));
        }

        /**
         * @param package_ Required - The package this Upgrade is for.
         * 
         * @return builder
         * 
         */
        public Builder package_(@Nullable Output<String> package_) {
            $.package_ = package_;
            return this;
        }

        /**
         * @param package_ Required - The package this Upgrade is for.
         * 
         * @return builder
         * 
         */
        public Builder package_(String package_) {
            return package_(Output.of(package_));
        }

        /**
         * @param parsedVersion Required - The version of the package in a machine + human readable form.
         * 
         * @return builder
         * 
         */
        public Builder parsedVersion(@Nullable Output<VersionArgs> parsedVersion) {
            $.parsedVersion = parsedVersion;
            return this;
        }

        /**
         * @param parsedVersion Required - The version of the package in a machine + human readable form.
         * 
         * @return builder
         * 
         */
        public Builder parsedVersion(VersionArgs parsedVersion) {
            return parsedVersion(Output.of(parsedVersion));
        }

        public UpgradeOccurrenceArgs build() {
            return $;
        }
    }

}
