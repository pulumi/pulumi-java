// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Copies the artifact to the specified path on the instance.
 * 
 */
public final class SoftwareRecipeStepCopyFileResponse extends com.pulumi.resources.InvokeArgs {

    public static final SoftwareRecipeStepCopyFileResponse Empty = new SoftwareRecipeStepCopyFileResponse();

    /**
     * The id of the relevant artifact in the recipe.
     * 
     */
    @Import(name="artifactId", required=true)
    private String artifactId;

    /**
     * @return The id of the relevant artifact in the recipe.
     * 
     */
    public String artifactId() {
        return this.artifactId;
    }

    /**
     * The absolute path on the instance to put the file.
     * 
     */
    @Import(name="destination", required=true)
    private String destination;

    /**
     * @return The absolute path on the instance to put the file.
     * 
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
     * 
     */
    @Import(name="overwrite", required=true)
    private Boolean overwrite;

    /**
     * @return Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
     * 
     */
    public Boolean overwrite() {
        return this.overwrite;
    }

    /**
     * Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     * 
     */
    @Import(name="permissions", required=true)
    private String permissions;

    /**
     * @return Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     * 
     */
    public String permissions() {
        return this.permissions;
    }

    private SoftwareRecipeStepCopyFileResponse() {}

    private SoftwareRecipeStepCopyFileResponse(SoftwareRecipeStepCopyFileResponse $) {
        this.artifactId = $.artifactId;
        this.destination = $.destination;
        this.overwrite = $.overwrite;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareRecipeStepCopyFileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareRecipeStepCopyFileResponse $;

        public Builder() {
            $ = new SoftwareRecipeStepCopyFileResponse();
        }

        public Builder(SoftwareRecipeStepCopyFileResponse defaults) {
            $ = new SoftwareRecipeStepCopyFileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactId The id of the relevant artifact in the recipe.
         * 
         * @return builder
         * 
         */
        public Builder artifactId(String artifactId) {
            $.artifactId = artifactId;
            return this;
        }

        /**
         * @param destination The absolute path on the instance to put the file.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param overwrite Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder overwrite(Boolean overwrite) {
            $.overwrite = overwrite;
            return this;
        }

        /**
         * @param permissions Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            $.permissions = permissions;
            return this;
        }

        public SoftwareRecipeStepCopyFileResponse build() {
            $.artifactId = Objects.requireNonNull($.artifactId, "expected parameter 'artifactId' to be non-null");
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.overwrite = Objects.requireNonNull($.overwrite, "expected parameter 'overwrite' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            return $;
        }
    }

}
