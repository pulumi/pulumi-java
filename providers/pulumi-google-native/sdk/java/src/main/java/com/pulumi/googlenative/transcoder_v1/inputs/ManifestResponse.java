// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Manifest configuration.
 * 
 */
public final class ManifestResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManifestResponse Empty = new ManifestResponse();

    /**
     * The name of the generated file. The default is `manifest` with the extension suffix corresponding to the `Manifest.type`.
     * 
     */
    @Import(name="fileName", required=true)
    private String fileName;

    public String fileName() {
        return this.fileName;
    }

    /**
     * List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
     * 
     */
    @Import(name="muxStreams", required=true)
    private List<String> muxStreams;

    public List<String> muxStreams() {
        return this.muxStreams;
    }

    /**
     * Type of the manifest, can be `HLS` or `DASH`.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ManifestResponse() {}

    private ManifestResponse(ManifestResponse $) {
        this.fileName = $.fileName;
        this.muxStreams = $.muxStreams;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManifestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManifestResponse $;

        public Builder() {
            $ = new ManifestResponse();
        }

        public Builder(ManifestResponse defaults) {
            $ = new ManifestResponse(Objects.requireNonNull(defaults));
        }

        public Builder fileName(String fileName) {
            $.fileName = fileName;
            return this;
        }

        public Builder muxStreams(List<String> muxStreams) {
            $.muxStreams = muxStreams;
            return this;
        }

        public Builder muxStreams(String... muxStreams) {
            return muxStreams(List.of(muxStreams));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ManifestResponse build() {
            $.fileName = Objects.requireNonNull($.fileName, "expected parameter 'fileName' to be non-null");
            $.muxStreams = Objects.requireNonNull($.muxStreams, "expected parameter 'muxStreams' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
