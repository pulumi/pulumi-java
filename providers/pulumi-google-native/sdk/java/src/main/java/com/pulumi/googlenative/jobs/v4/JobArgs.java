// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.jobs.v4;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.jobs.v4.enums.JobDegreeTypesItem;
import com.pulumi.googlenative.jobs.v4.enums.JobEmploymentTypesItem;
import com.pulumi.googlenative.jobs.v4.enums.JobJobBenefitsItem;
import com.pulumi.googlenative.jobs.v4.enums.JobJobLevel;
import com.pulumi.googlenative.jobs.v4.enums.JobPostingRegion;
import com.pulumi.googlenative.jobs.v4.enums.JobVisibility;
import com.pulumi.googlenative.jobs.v4.inputs.ApplicationInfoArgs;
import com.pulumi.googlenative.jobs.v4.inputs.CompensationInfoArgs;
import com.pulumi.googlenative.jobs.v4.inputs.ProcessingOptionsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. &#39;ReqA&#39; becomes &#39;ReqA-1&#39;, &#39;ReqA-2&#39;, and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses &#34;1600 Amphitheatre Parkway, Mountain View, CA, USA&#34; and &#34;London, UK&#34; may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<String>> addresses;

    /**
     * @return Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. &#39;ReqA&#39; becomes &#39;ReqA-1&#39;, &#39;ReqA-2&#39;, and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses &#34;1600 Amphitheatre Parkway, Mountain View, CA, USA&#34; and &#34;London, UK&#34; may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
     * 
     */
    public Optional<Output<List<String>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * Job application information.
     * 
     */
    @Import(name="applicationInfo")
    private @Nullable Output<ApplicationInfoArgs> applicationInfo;

    /**
     * @return Job application information.
     * 
     */
    public Optional<Output<ApplicationInfoArgs>> applicationInfo() {
        return Optional.ofNullable(this.applicationInfo);
    }

    /**
     * The resource name of the company listing the job. The format is &#34;projects/{project_id}/tenants/{tenant_id}/companies/{company_id}&#34;. For example, &#34;projects/foo/tenants/bar/companies/baz&#34;.
     * 
     */
    @Import(name="company", required=true)
    private Output<String> company;

    /**
     * @return The resource name of the company listing the job. The format is &#34;projects/{project_id}/tenants/{tenant_id}/companies/{company_id}&#34;. For example, &#34;projects/foo/tenants/bar/companies/baz&#34;.
     * 
     */
    public Output<String> company() {
        return this.company;
    }

    /**
     * Job compensation information (a.k.a. &#34;pay rate&#34;) i.e., the compensation that will paid to the employee.
     * 
     */
    @Import(name="compensationInfo")
    private @Nullable Output<CompensationInfoArgs> compensationInfo;

    /**
     * @return Job compensation information (a.k.a. &#34;pay rate&#34;) i.e., the compensation that will paid to the employee.
     * 
     */
    public Optional<Output<CompensationInfoArgs>> compensationInfo() {
        return Optional.ofNullable(this.compensationInfo);
    }

    /**
     * A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The desired education degrees for the job, such as Bachelors, Masters.
     * 
     */
    @Import(name="degreeTypes")
    private @Nullable Output<List<JobDegreeTypesItem>> degreeTypes;

    /**
     * @return The desired education degrees for the job, such as Bachelors, Masters.
     * 
     */
    public Optional<Output<List<JobDegreeTypesItem>>> degreeTypes() {
        return Optional.ofNullable(this.degreeTypes);
    }

    /**
     * The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
     * 
     */
    @Import(name="department")
    private @Nullable Output<String> department;

    /**
     * @return The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
     * 
     */
    public Optional<Output<String>> department() {
        return Optional.ofNullable(this.department);
    }

    /**
     * The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The employment type(s) of a job, for example, full time or part time.
     * 
     */
    @Import(name="employmentTypes")
    private @Nullable Output<List<JobEmploymentTypesItem>> employmentTypes;

    /**
     * @return The employment type(s) of a job, for example, full time or part time.
     * 
     */
    public Optional<Output<List<JobEmploymentTypesItem>>> employmentTypes() {
        return Optional.ofNullable(this.employmentTypes);
    }

    /**
     * A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
     * 
     */
    @Import(name="incentives")
    private @Nullable Output<String> incentives;

    /**
     * @return A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
     * 
     */
    public Optional<Output<String>> incentives() {
        return Optional.ofNullable(this.incentives);
    }

    /**
     * The benefits included with the job.
     * 
     */
    @Import(name="jobBenefits")
    private @Nullable Output<List<JobJobBenefitsItem>> jobBenefits;

    /**
     * @return The benefits included with the job.
     * 
     */
    public Optional<Output<List<JobJobBenefitsItem>>> jobBenefits() {
        return Optional.ofNullable(this.jobBenefits);
    }

    /**
     * The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    @Import(name="jobEndTime")
    private @Nullable Output<String> jobEndTime;

    /**
     * @return The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    public Optional<Output<String>> jobEndTime() {
        return Optional.ofNullable(this.jobEndTime);
    }

    /**
     * The experience level associated with the job, such as &#34;Entry Level&#34;.
     * 
     */
    @Import(name="jobLevel")
    private @Nullable Output<JobJobLevel> jobLevel;

    /**
     * @return The experience level associated with the job, such as &#34;Entry Level&#34;.
     * 
     */
    public Optional<Output<JobJobLevel>> jobLevel() {
        return Optional.ofNullable(this.jobLevel);
    }

    /**
     * The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    @Import(name="jobStartTime")
    private @Nullable Output<String> jobStartTime;

    /**
     * @return The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    public Optional<Output<String>> jobStartTime() {
        return Optional.ofNullable(this.jobStartTime);
    }

    /**
     * The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as &#34;en-US&#34; or &#34;sr-Latn&#34;. For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=&#34;external&#34; target=&#34;_blank&#34; }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to &#39;en_US&#39;.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    /**
     * @return The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as &#34;en-US&#34; or &#34;sr-Latn&#34;. For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=&#34;external&#34; target=&#34;_blank&#34; }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to &#39;en_US&#39;.
     * 
     */
    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    /**
     * Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}&#34;. For example, &#34;projects/foo/tenants/bar/jobs/baz&#34;. Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}&#34;. For example, &#34;projects/foo/tenants/bar/jobs/baz&#34;. Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can&#39;t be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn&#39;t exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn&#39;t provided at the time of job creation or is invalid, the job posting expires after 30 days from the job&#39;s creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn&#39;t provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job&#39;s last update time. Otherwise the expiration date isn&#39;t updated.
     * 
     */
    @Import(name="postingExpireTime")
    private @Nullable Output<String> postingExpireTime;

    /**
     * @return Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can&#39;t be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn&#39;t exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn&#39;t provided at the time of job creation or is invalid, the job posting expires after 30 days from the job&#39;s creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn&#39;t provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job&#39;s last update time. Otherwise the expiration date isn&#39;t updated.
     * 
     */
    public Optional<Output<String>> postingExpireTime() {
        return Optional.ofNullable(this.postingExpireTime);
    }

    /**
     * The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
     * 
     */
    @Import(name="postingPublishTime")
    private @Nullable Output<String> postingPublishTime;

    /**
     * @return The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
     * 
     */
    public Optional<Output<String>> postingPublishTime() {
        return Optional.ofNullable(this.postingPublishTime);
    }

    /**
     * The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn&#39;t specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
     * 
     */
    @Import(name="postingRegion")
    private @Nullable Output<JobPostingRegion> postingRegion;

    /**
     * @return The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn&#39;t specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
     * 
     */
    public Optional<Output<JobPostingRegion>> postingRegion() {
        return Optional.ofNullable(this.postingRegion);
    }

    /**
     * Options for job processing.
     * 
     */
    @Import(name="processingOptions")
    private @Nullable Output<ProcessingOptionsArgs> processingOptions;

    /**
     * @return Options for job processing.
     * 
     */
    public Optional<Output<ProcessingOptionsArgs>> processingOptions() {
        return Optional.ofNullable(this.processingOptions);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue &gt;0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
     * 
     */
    @Import(name="promotionValue")
    private @Nullable Output<Integer> promotionValue;

    /**
     * @return A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue &gt;0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
     * 
     */
    public Optional<Output<Integer>> promotionValue() {
        return Optional.ofNullable(this.promotionValue);
    }

    /**
     * A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    @Import(name="qualifications")
    private @Nullable Output<String> qualifications;

    /**
     * @return A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    public Optional<Output<String>> qualifications() {
        return Optional.ofNullable(this.qualifications);
    }

    /**
     * The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn&#39;t allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.
     * 
     */
    @Import(name="requisitionId", required=true)
    private Output<String> requisitionId;

    /**
     * @return The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn&#39;t allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.
     * 
     */
    public Output<String> requisitionId() {
        return this.requisitionId;
    }

    /**
     * A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    @Import(name="responsibilities")
    private @Nullable Output<String> responsibilities;

    /**
     * @return A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    public Optional<Output<String>> responsibilities() {
        return Optional.ofNullable(this.responsibilities);
    }

    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId;
    }

    /**
     * The title of the job, such as &#34;Software Engineer&#34; The maximum number of allowed characters is 500.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The title of the job, such as &#34;Software Engineer&#34; The maximum number of allowed characters is 500.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
     * 
     * @deprecated
     * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
     * 
     */
    @Deprecated /* Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified. */
    @Import(name="visibility")
    private @Nullable Output<JobVisibility> visibility;

    /**
     * @return Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
     * 
     * @deprecated
     * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
     * 
     */
    @Deprecated /* Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified. */
    public Optional<Output<JobVisibility>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private JobArgs() {}

    private JobArgs(JobArgs $) {
        this.addresses = $.addresses;
        this.applicationInfo = $.applicationInfo;
        this.company = $.company;
        this.compensationInfo = $.compensationInfo;
        this.customAttributes = $.customAttributes;
        this.degreeTypes = $.degreeTypes;
        this.department = $.department;
        this.description = $.description;
        this.employmentTypes = $.employmentTypes;
        this.incentives = $.incentives;
        this.jobBenefits = $.jobBenefits;
        this.jobEndTime = $.jobEndTime;
        this.jobLevel = $.jobLevel;
        this.jobStartTime = $.jobStartTime;
        this.languageCode = $.languageCode;
        this.name = $.name;
        this.postingExpireTime = $.postingExpireTime;
        this.postingPublishTime = $.postingPublishTime;
        this.postingRegion = $.postingRegion;
        this.processingOptions = $.processingOptions;
        this.project = $.project;
        this.promotionValue = $.promotionValue;
        this.qualifications = $.qualifications;
        this.requisitionId = $.requisitionId;
        this.responsibilities = $.responsibilities;
        this.tenantId = $.tenantId;
        this.title = $.title;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobArgs $;

        public Builder() {
            $ = new JobArgs();
        }

        public Builder(JobArgs defaults) {
            $ = new JobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. &#39;ReqA&#39; becomes &#39;ReqA-1&#39;, &#39;ReqA-2&#39;, and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses &#34;1600 Amphitheatre Parkway, Mountain View, CA, USA&#34; and &#34;London, UK&#34; may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. &#39;ReqA&#39; becomes &#39;ReqA-1&#39;, &#39;ReqA-2&#39;, and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses &#34;1600 Amphitheatre Parkway, Mountain View, CA, USA&#34; and &#34;London, UK&#34; may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. &#39;ReqA&#39; becomes &#39;ReqA-1&#39;, &#39;ReqA-2&#39;, and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses &#34;1600 Amphitheatre Parkway, Mountain View, CA, USA&#34; and &#34;London, UK&#34; may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
         * 
         * @return builder
         * 
         */
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param applicationInfo Job application information.
         * 
         * @return builder
         * 
         */
        public Builder applicationInfo(@Nullable Output<ApplicationInfoArgs> applicationInfo) {
            $.applicationInfo = applicationInfo;
            return this;
        }

        /**
         * @param applicationInfo Job application information.
         * 
         * @return builder
         * 
         */
        public Builder applicationInfo(ApplicationInfoArgs applicationInfo) {
            return applicationInfo(Output.of(applicationInfo));
        }

        /**
         * @param company The resource name of the company listing the job. The format is &#34;projects/{project_id}/tenants/{tenant_id}/companies/{company_id}&#34;. For example, &#34;projects/foo/tenants/bar/companies/baz&#34;.
         * 
         * @return builder
         * 
         */
        public Builder company(Output<String> company) {
            $.company = company;
            return this;
        }

        /**
         * @param company The resource name of the company listing the job. The format is &#34;projects/{project_id}/tenants/{tenant_id}/companies/{company_id}&#34;. For example, &#34;projects/foo/tenants/bar/companies/baz&#34;.
         * 
         * @return builder
         * 
         */
        public Builder company(String company) {
            return company(Output.of(company));
        }

        /**
         * @param compensationInfo Job compensation information (a.k.a. &#34;pay rate&#34;) i.e., the compensation that will paid to the employee.
         * 
         * @return builder
         * 
         */
        public Builder compensationInfo(@Nullable Output<CompensationInfoArgs> compensationInfo) {
            $.compensationInfo = compensationInfo;
            return this;
        }

        /**
         * @param compensationInfo Job compensation information (a.k.a. &#34;pay rate&#34;) i.e., the compensation that will paid to the employee.
         * 
         * @return builder
         * 
         */
        public Builder compensationInfo(CompensationInfoArgs compensationInfo) {
            return compensationInfo(Output.of(compensationInfo));
        }

        /**
         * @param customAttributes A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param degreeTypes The desired education degrees for the job, such as Bachelors, Masters.
         * 
         * @return builder
         * 
         */
        public Builder degreeTypes(@Nullable Output<List<JobDegreeTypesItem>> degreeTypes) {
            $.degreeTypes = degreeTypes;
            return this;
        }

        /**
         * @param degreeTypes The desired education degrees for the job, such as Bachelors, Masters.
         * 
         * @return builder
         * 
         */
        public Builder degreeTypes(List<JobDegreeTypesItem> degreeTypes) {
            return degreeTypes(Output.of(degreeTypes));
        }

        /**
         * @param degreeTypes The desired education degrees for the job, such as Bachelors, Masters.
         * 
         * @return builder
         * 
         */
        public Builder degreeTypes(JobDegreeTypesItem... degreeTypes) {
            return degreeTypes(List.of(degreeTypes));
        }

        /**
         * @param department The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
         * 
         * @return builder
         * 
         */
        public Builder department(@Nullable Output<String> department) {
            $.department = department;
            return this;
        }

        /**
         * @param department The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
         * 
         * @return builder
         * 
         */
        public Builder department(String department) {
            return department(Output.of(department));
        }

        /**
         * @param description The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param employmentTypes The employment type(s) of a job, for example, full time or part time.
         * 
         * @return builder
         * 
         */
        public Builder employmentTypes(@Nullable Output<List<JobEmploymentTypesItem>> employmentTypes) {
            $.employmentTypes = employmentTypes;
            return this;
        }

        /**
         * @param employmentTypes The employment type(s) of a job, for example, full time or part time.
         * 
         * @return builder
         * 
         */
        public Builder employmentTypes(List<JobEmploymentTypesItem> employmentTypes) {
            return employmentTypes(Output.of(employmentTypes));
        }

        /**
         * @param employmentTypes The employment type(s) of a job, for example, full time or part time.
         * 
         * @return builder
         * 
         */
        public Builder employmentTypes(JobEmploymentTypesItem... employmentTypes) {
            return employmentTypes(List.of(employmentTypes));
        }

        /**
         * @param incentives A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
         * 
         * @return builder
         * 
         */
        public Builder incentives(@Nullable Output<String> incentives) {
            $.incentives = incentives;
            return this;
        }

        /**
         * @param incentives A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
         * 
         * @return builder
         * 
         */
        public Builder incentives(String incentives) {
            return incentives(Output.of(incentives));
        }

        /**
         * @param jobBenefits The benefits included with the job.
         * 
         * @return builder
         * 
         */
        public Builder jobBenefits(@Nullable Output<List<JobJobBenefitsItem>> jobBenefits) {
            $.jobBenefits = jobBenefits;
            return this;
        }

        /**
         * @param jobBenefits The benefits included with the job.
         * 
         * @return builder
         * 
         */
        public Builder jobBenefits(List<JobJobBenefitsItem> jobBenefits) {
            return jobBenefits(Output.of(jobBenefits));
        }

        /**
         * @param jobBenefits The benefits included with the job.
         * 
         * @return builder
         * 
         */
        public Builder jobBenefits(JobJobBenefitsItem... jobBenefits) {
            return jobBenefits(List.of(jobBenefits));
        }

        /**
         * @param jobEndTime The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
         * 
         * @return builder
         * 
         */
        public Builder jobEndTime(@Nullable Output<String> jobEndTime) {
            $.jobEndTime = jobEndTime;
            return this;
        }

        /**
         * @param jobEndTime The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
         * 
         * @return builder
         * 
         */
        public Builder jobEndTime(String jobEndTime) {
            return jobEndTime(Output.of(jobEndTime));
        }

        /**
         * @param jobLevel The experience level associated with the job, such as &#34;Entry Level&#34;.
         * 
         * @return builder
         * 
         */
        public Builder jobLevel(@Nullable Output<JobJobLevel> jobLevel) {
            $.jobLevel = jobLevel;
            return this;
        }

        /**
         * @param jobLevel The experience level associated with the job, such as &#34;Entry Level&#34;.
         * 
         * @return builder
         * 
         */
        public Builder jobLevel(JobJobLevel jobLevel) {
            return jobLevel(Output.of(jobLevel));
        }

        /**
         * @param jobStartTime The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
         * 
         * @return builder
         * 
         */
        public Builder jobStartTime(@Nullable Output<String> jobStartTime) {
            $.jobStartTime = jobStartTime;
            return this;
        }

        /**
         * @param jobStartTime The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
         * 
         * @return builder
         * 
         */
        public Builder jobStartTime(String jobStartTime) {
            return jobStartTime(Output.of(jobStartTime));
        }

        /**
         * @param languageCode The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as &#34;en-US&#34; or &#34;sr-Latn&#34;. For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=&#34;external&#34; target=&#34;_blank&#34; }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to &#39;en_US&#39;.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        /**
         * @param languageCode The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as &#34;en-US&#34; or &#34;sr-Latn&#34;. For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=&#34;external&#34; target=&#34;_blank&#34; }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to &#39;en_US&#39;.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        /**
         * @param name Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}&#34;. For example, &#34;projects/foo/tenants/bar/jobs/baz&#34;. Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}&#34;. For example, &#34;projects/foo/tenants/bar/jobs/baz&#34;. Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param postingExpireTime Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can&#39;t be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn&#39;t exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn&#39;t provided at the time of job creation or is invalid, the job posting expires after 30 days from the job&#39;s creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn&#39;t provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job&#39;s last update time. Otherwise the expiration date isn&#39;t updated.
         * 
         * @return builder
         * 
         */
        public Builder postingExpireTime(@Nullable Output<String> postingExpireTime) {
            $.postingExpireTime = postingExpireTime;
            return this;
        }

        /**
         * @param postingExpireTime Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can&#39;t be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn&#39;t exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn&#39;t provided at the time of job creation or is invalid, the job posting expires after 30 days from the job&#39;s creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn&#39;t provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job&#39;s last update time. Otherwise the expiration date isn&#39;t updated.
         * 
         * @return builder
         * 
         */
        public Builder postingExpireTime(String postingExpireTime) {
            return postingExpireTime(Output.of(postingExpireTime));
        }

        /**
         * @param postingPublishTime The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
         * 
         * @return builder
         * 
         */
        public Builder postingPublishTime(@Nullable Output<String> postingPublishTime) {
            $.postingPublishTime = postingPublishTime;
            return this;
        }

        /**
         * @param postingPublishTime The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
         * 
         * @return builder
         * 
         */
        public Builder postingPublishTime(String postingPublishTime) {
            return postingPublishTime(Output.of(postingPublishTime));
        }

        /**
         * @param postingRegion The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn&#39;t specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
         * 
         * @return builder
         * 
         */
        public Builder postingRegion(@Nullable Output<JobPostingRegion> postingRegion) {
            $.postingRegion = postingRegion;
            return this;
        }

        /**
         * @param postingRegion The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn&#39;t specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
         * 
         * @return builder
         * 
         */
        public Builder postingRegion(JobPostingRegion postingRegion) {
            return postingRegion(Output.of(postingRegion));
        }

        /**
         * @param processingOptions Options for job processing.
         * 
         * @return builder
         * 
         */
        public Builder processingOptions(@Nullable Output<ProcessingOptionsArgs> processingOptions) {
            $.processingOptions = processingOptions;
            return this;
        }

        /**
         * @param processingOptions Options for job processing.
         * 
         * @return builder
         * 
         */
        public Builder processingOptions(ProcessingOptionsArgs processingOptions) {
            return processingOptions(Output.of(processingOptions));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param promotionValue A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue &gt;0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
         * 
         * @return builder
         * 
         */
        public Builder promotionValue(@Nullable Output<Integer> promotionValue) {
            $.promotionValue = promotionValue;
            return this;
        }

        /**
         * @param promotionValue A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue &gt;0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
         * 
         * @return builder
         * 
         */
        public Builder promotionValue(Integer promotionValue) {
            return promotionValue(Output.of(promotionValue));
        }

        /**
         * @param qualifications A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
         * 
         * @return builder
         * 
         */
        public Builder qualifications(@Nullable Output<String> qualifications) {
            $.qualifications = qualifications;
            return this;
        }

        /**
         * @param qualifications A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
         * 
         * @return builder
         * 
         */
        public Builder qualifications(String qualifications) {
            return qualifications(Output.of(qualifications));
        }

        /**
         * @param requisitionId The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn&#39;t allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.
         * 
         * @return builder
         * 
         */
        public Builder requisitionId(Output<String> requisitionId) {
            $.requisitionId = requisitionId;
            return this;
        }

        /**
         * @param requisitionId The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn&#39;t allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.
         * 
         * @return builder
         * 
         */
        public Builder requisitionId(String requisitionId) {
            return requisitionId(Output.of(requisitionId));
        }

        /**
         * @param responsibilities A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
         * 
         * @return builder
         * 
         */
        public Builder responsibilities(@Nullable Output<String> responsibilities) {
            $.responsibilities = responsibilities;
            return this;
        }

        /**
         * @param responsibilities A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
         * 
         * @return builder
         * 
         */
        public Builder responsibilities(String responsibilities) {
            return responsibilities(Output.of(responsibilities));
        }

        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param title The title of the job, such as &#34;Software Engineer&#34; The maximum number of allowed characters is 500.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the job, such as &#34;Software Engineer&#34; The maximum number of allowed characters is 500.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param visibility Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
         * 
         */
        @Deprecated /* Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified. */
        public Builder visibility(@Nullable Output<JobVisibility> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
         * 
         */
        @Deprecated /* Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified. */
        public Builder visibility(JobVisibility visibility) {
            return visibility(Output.of(visibility));
        }

        public JobArgs build() {
            $.company = Objects.requireNonNull($.company, "expected parameter 'company' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.requisitionId = Objects.requireNonNull($.requisitionId, "expected parameter 'requisitionId' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
