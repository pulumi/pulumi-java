// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.beyondcorp.v1alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.beyondcorp.v1alpha.inputs.EgressArgs;
import com.pulumi.googlenative.beyondcorp.v1alpha.inputs.IngressArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientConnectorServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientConnectorServiceArgs Empty = new ClientConnectorServiceArgs();

    /**
     * Optional. User-settable client connector service resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter. A random system generated name will be assigned if not specified by the user.
     * 
     */
    @Import(name="clientConnectorServiceId")
    private @Nullable Output<String> clientConnectorServiceId;

    /**
     * @return Optional. User-settable client connector service resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter. A random system generated name will be assigned if not specified by the user.
     * 
     */
    public Optional<Output<String>> clientConnectorServiceId() {
        return Optional.ofNullable(this.clientConnectorServiceId);
    }

    /**
     * Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The details of the egress settings.
     * 
     */
    @Import(name="egress", required=true)
    private Output<EgressArgs> egress;

    /**
     * @return The details of the egress settings.
     * 
     */
    public Output<EgressArgs> egress() {
        return this.egress;
    }

    /**
     * The details of the ingress settings.
     * 
     */
    @Import(name="ingress", required=true)
    private Output<IngressArgs> ingress;

    /**
     * @return The details of the ingress settings.
     * 
     */
    public Output<IngressArgs> ingress() {
        return this.ingress;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of resource. The name is ignored during creation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of resource. The name is ignored during creation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
     * 
     */
    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    /**
     * @return Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
     * 
     */
    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private ClientConnectorServiceArgs() {}

    private ClientConnectorServiceArgs(ClientConnectorServiceArgs $) {
        this.clientConnectorServiceId = $.clientConnectorServiceId;
        this.displayName = $.displayName;
        this.egress = $.egress;
        this.ingress = $.ingress;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.requestId = $.requestId;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientConnectorServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientConnectorServiceArgs $;

        public Builder() {
            $ = new ClientConnectorServiceArgs();
        }

        public Builder(ClientConnectorServiceArgs defaults) {
            $ = new ClientConnectorServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientConnectorServiceId Optional. User-settable client connector service resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter. A random system generated name will be assigned if not specified by the user.
         * 
         * @return builder
         * 
         */
        public Builder clientConnectorServiceId(@Nullable Output<String> clientConnectorServiceId) {
            $.clientConnectorServiceId = clientConnectorServiceId;
            return this;
        }

        /**
         * @param clientConnectorServiceId Optional. User-settable client connector service resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter. A random system generated name will be assigned if not specified by the user.
         * 
         * @return builder
         * 
         */
        public Builder clientConnectorServiceId(String clientConnectorServiceId) {
            return clientConnectorServiceId(Output.of(clientConnectorServiceId));
        }

        /**
         * @param displayName Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param egress The details of the egress settings.
         * 
         * @return builder
         * 
         */
        public Builder egress(Output<EgressArgs> egress) {
            $.egress = egress;
            return this;
        }

        /**
         * @param egress The details of the egress settings.
         * 
         * @return builder
         * 
         */
        public Builder egress(EgressArgs egress) {
            return egress(Output.of(egress));
        }

        /**
         * @param ingress The details of the ingress settings.
         * 
         * @return builder
         * 
         */
        public Builder ingress(Output<IngressArgs> ingress) {
            $.ingress = ingress;
            return this;
        }

        /**
         * @param ingress The details of the ingress settings.
         * 
         * @return builder
         * 
         */
        public Builder ingress(IngressArgs ingress) {
            return ingress(Output.of(ingress));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of resource. The name is ignored during creation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of resource. The name is ignored during creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        /**
         * @param validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
         * 
         * @return builder
         * 
         */
        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public ClientConnectorServiceArgs build() {
            $.egress = Objects.requireNonNull($.egress, "expected parameter 'egress' to be non-null");
            $.ingress = Objects.requireNonNull($.ingress, "expected parameter 'ingress' to be non-null");
            return $;
        }
    }

}
