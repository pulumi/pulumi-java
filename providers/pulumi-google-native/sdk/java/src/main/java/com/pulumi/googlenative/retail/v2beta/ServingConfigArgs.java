// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.retail.v2beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.retail.v2beta.enums.ServingConfigSolutionTypesItem;
import com.pulumi.googlenative.retail.v2beta.inputs.GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServingConfigArgs Empty = new ServingConfigArgs();

    /**
     * Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="boostControlIds")
    private @Nullable Output<List<String>> boostControlIds;

    /**
     * @return Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> boostControlIds() {
        return Optional.ofNullable(this.boostControlIds);
    }

    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * How much diversity to use in recommendation model results e.g. &#39;medium-diversity&#39; or &#39;high-diversity&#39;. Currently supported values: * &#39;no-diversity&#39; * &#39;low-diversity&#39; * &#39;medium-diversity&#39; * &#39;high-diversity&#39; * &#39;auto-diversity&#39; If not specified, we choose default based on recommendation model type. Default value: &#39;no-diversity&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    @Import(name="diversityLevel")
    private @Nullable Output<String> diversityLevel;

    /**
     * @return How much diversity to use in recommendation model results e.g. &#39;medium-diversity&#39; or &#39;high-diversity&#39;. Currently supported values: * &#39;no-diversity&#39; * &#39;low-diversity&#39; * &#39;medium-diversity&#39; * &#39;high-diversity&#39; * &#39;auto-diversity&#39; If not specified, we choose default based on recommendation model type. Default value: &#39;no-diversity&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    public Optional<Output<String>> diversityLevel() {
        return Optional.ofNullable(this.diversityLevel);
    }

    /**
     * Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="doNotAssociateControlIds")
    private @Nullable Output<List<String>> doNotAssociateControlIds;

    /**
     * @return Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> doNotAssociateControlIds() {
        return Optional.ofNullable(this.doNotAssociateControlIds);
    }

    /**
     * The specification for dynamically generated facets. Notice that only textual facets can be dynamically generated. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="dynamicFacetSpec")
    private @Nullable Output<GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecArgs> dynamicFacetSpec;

    /**
     * @return The specification for dynamically generated facets. Notice that only textual facets can be dynamically generated. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecArgs>> dynamicFacetSpec() {
        return Optional.ofNullable(this.dynamicFacetSpec);
    }

    /**
     * Whether to add additional category filters on the &#39;similar-items&#39; model. If not specified, we enable it by default. Allowed values are: * &#39;no-category-match&#39;: No additional filtering of original results from the model and the customer&#39;s filters. * &#39;relaxed-category-match&#39;: Only keep results with categories that match at least one item categories in the PredictRequests&#39;s context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    @Import(name="enableCategoryFilterLevel")
    private @Nullable Output<String> enableCategoryFilterLevel;

    /**
     * @return Whether to add additional category filters on the &#39;similar-items&#39; model. If not specified, we enable it by default. Allowed values are: * &#39;no-category-match&#39;: No additional filtering of original results from the model and the customer&#39;s filters. * &#39;relaxed-category-match&#39;: Only keep results with categories that match at least one item categories in the PredictRequests&#39;s context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    public Optional<Output<String>> enableCategoryFilterLevel() {
        return Optional.ofNullable(this.enableCategoryFilterLevel);
    }

    /**
     * Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="facetControlIds")
    private @Nullable Output<List<String>> facetControlIds;

    /**
     * @return Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> facetControlIds() {
        return Optional.ofNullable(this.facetControlIds);
    }

    /**
     * Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="filterControlIds")
    private @Nullable Output<List<String>> filterControlIds;

    /**
     * @return Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> filterControlIds() {
        return Optional.ofNullable(this.filterControlIds);
    }

    /**
     * Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="ignoreControlIds")
    private @Nullable Output<List<String>> ignoreControlIds;

    /**
     * @return Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> ignoreControlIds() {
        return Optional.ofNullable(this.ignoreControlIds);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The id of the model to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    @Import(name="modelId")
    private @Nullable Output<String> modelId;

    /**
     * @return The id of the model to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    public Optional<Output<String>> modelId() {
        return Optional.ofNullable(this.modelId);
    }

    /**
     * Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}servingConfig/*`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}servingConfig/*`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="onewaySynonymsControlIds")
    private @Nullable Output<List<String>> onewaySynonymsControlIds;

    /**
     * @return Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> onewaySynonymsControlIds() {
        return Optional.ofNullable(this.onewaySynonymsControlIds);
    }

    /**
     * How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * &#39;no-price-reranking&#39; * &#39;low-price-raranking&#39; * &#39;medium-price-reranking&#39; * &#39;high-price-reranking&#39; If not specified, we choose default based on model type. Default value: &#39;no-price-reranking&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    @Import(name="priceRerankingLevel")
    private @Nullable Output<String> priceRerankingLevel;

    /**
     * @return How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * &#39;no-price-reranking&#39; * &#39;low-price-raranking&#39; * &#39;medium-price-reranking&#39; * &#39;high-price-reranking&#39; If not specified, we choose default based on model type. Default value: &#39;no-price-reranking&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
     * 
     */
    public Optional<Output<String>> priceRerankingLevel() {
        return Optional.ofNullable(this.priceRerankingLevel);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="redirectControlIds")
    private @Nullable Output<List<String>> redirectControlIds;

    /**
     * @return Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> redirectControlIds() {
        return Optional.ofNullable(this.redirectControlIds);
    }

    /**
     * Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="replacementControlIds")
    private @Nullable Output<List<String>> replacementControlIds;

    /**
     * @return Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> replacementControlIds() {
        return Optional.ofNullable(this.replacementControlIds);
    }

    /**
     * Required. The ID to use for the ServingConfig, which will become the final component of the ServingConfig&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
     * 
     */
    @Import(name="servingConfigId", required=true)
    private Output<String> servingConfigId;

    /**
     * @return Required. The ID to use for the ServingConfig, which will become the final component of the ServingConfig&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
     * 
     */
    public Output<String> servingConfigId() {
        return this.servingConfigId;
    }

    /**
     * Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
     * 
     */
    @Import(name="solutionTypes", required=true)
    private Output<List<ServingConfigSolutionTypesItem>> solutionTypes;

    /**
     * @return Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
     * 
     */
    public Output<List<ServingConfigSolutionTypesItem>> solutionTypes() {
        return this.solutionTypes;
    }

    /**
     * Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    @Import(name="twowaySynonymsControlIds")
    private @Nullable Output<List<String>> twowaySynonymsControlIds;

    /**
     * @return Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
     * 
     */
    public Optional<Output<List<String>>> twowaySynonymsControlIds() {
        return Optional.ofNullable(this.twowaySynonymsControlIds);
    }

    private ServingConfigArgs() {}

    private ServingConfigArgs(ServingConfigArgs $) {
        this.boostControlIds = $.boostControlIds;
        this.catalogId = $.catalogId;
        this.displayName = $.displayName;
        this.diversityLevel = $.diversityLevel;
        this.doNotAssociateControlIds = $.doNotAssociateControlIds;
        this.dynamicFacetSpec = $.dynamicFacetSpec;
        this.enableCategoryFilterLevel = $.enableCategoryFilterLevel;
        this.facetControlIds = $.facetControlIds;
        this.filterControlIds = $.filterControlIds;
        this.ignoreControlIds = $.ignoreControlIds;
        this.location = $.location;
        this.modelId = $.modelId;
        this.name = $.name;
        this.onewaySynonymsControlIds = $.onewaySynonymsControlIds;
        this.priceRerankingLevel = $.priceRerankingLevel;
        this.project = $.project;
        this.redirectControlIds = $.redirectControlIds;
        this.replacementControlIds = $.replacementControlIds;
        this.servingConfigId = $.servingConfigId;
        this.solutionTypes = $.solutionTypes;
        this.twowaySynonymsControlIds = $.twowaySynonymsControlIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServingConfigArgs $;

        public Builder() {
            $ = new ServingConfigArgs();
        }

        public Builder(ServingConfigArgs defaults) {
            $ = new ServingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boostControlIds Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder boostControlIds(@Nullable Output<List<String>> boostControlIds) {
            $.boostControlIds = boostControlIds;
            return this;
        }

        /**
         * @param boostControlIds Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder boostControlIds(List<String> boostControlIds) {
            return boostControlIds(Output.of(boostControlIds));
        }

        /**
         * @param boostControlIds Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder boostControlIds(String... boostControlIds) {
            return boostControlIds(List.of(boostControlIds));
        }

        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param displayName The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param diversityLevel How much diversity to use in recommendation model results e.g. &#39;medium-diversity&#39; or &#39;high-diversity&#39;. Currently supported values: * &#39;no-diversity&#39; * &#39;low-diversity&#39; * &#39;medium-diversity&#39; * &#39;high-diversity&#39; * &#39;auto-diversity&#39; If not specified, we choose default based on recommendation model type. Default value: &#39;no-diversity&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder diversityLevel(@Nullable Output<String> diversityLevel) {
            $.diversityLevel = diversityLevel;
            return this;
        }

        /**
         * @param diversityLevel How much diversity to use in recommendation model results e.g. &#39;medium-diversity&#39; or &#39;high-diversity&#39;. Currently supported values: * &#39;no-diversity&#39; * &#39;low-diversity&#39; * &#39;medium-diversity&#39; * &#39;high-diversity&#39; * &#39;auto-diversity&#39; If not specified, we choose default based on recommendation model type. Default value: &#39;no-diversity&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder diversityLevel(String diversityLevel) {
            return diversityLevel(Output.of(diversityLevel));
        }

        /**
         * @param doNotAssociateControlIds Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder doNotAssociateControlIds(@Nullable Output<List<String>> doNotAssociateControlIds) {
            $.doNotAssociateControlIds = doNotAssociateControlIds;
            return this;
        }

        /**
         * @param doNotAssociateControlIds Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder doNotAssociateControlIds(List<String> doNotAssociateControlIds) {
            return doNotAssociateControlIds(Output.of(doNotAssociateControlIds));
        }

        /**
         * @param doNotAssociateControlIds Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder doNotAssociateControlIds(String... doNotAssociateControlIds) {
            return doNotAssociateControlIds(List.of(doNotAssociateControlIds));
        }

        /**
         * @param dynamicFacetSpec The specification for dynamically generated facets. Notice that only textual facets can be dynamically generated. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder dynamicFacetSpec(@Nullable Output<GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecArgs> dynamicFacetSpec) {
            $.dynamicFacetSpec = dynamicFacetSpec;
            return this;
        }

        /**
         * @param dynamicFacetSpec The specification for dynamically generated facets. Notice that only textual facets can be dynamically generated. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder dynamicFacetSpec(GoogleCloudRetailV2betaSearchRequestDynamicFacetSpecArgs dynamicFacetSpec) {
            return dynamicFacetSpec(Output.of(dynamicFacetSpec));
        }

        /**
         * @param enableCategoryFilterLevel Whether to add additional category filters on the &#39;similar-items&#39; model. If not specified, we enable it by default. Allowed values are: * &#39;no-category-match&#39;: No additional filtering of original results from the model and the customer&#39;s filters. * &#39;relaxed-category-match&#39;: Only keep results with categories that match at least one item categories in the PredictRequests&#39;s context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder enableCategoryFilterLevel(@Nullable Output<String> enableCategoryFilterLevel) {
            $.enableCategoryFilterLevel = enableCategoryFilterLevel;
            return this;
        }

        /**
         * @param enableCategoryFilterLevel Whether to add additional category filters on the &#39;similar-items&#39; model. If not specified, we enable it by default. Allowed values are: * &#39;no-category-match&#39;: No additional filtering of original results from the model and the customer&#39;s filters. * &#39;relaxed-category-match&#39;: Only keep results with categories that match at least one item categories in the PredictRequests&#39;s context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder enableCategoryFilterLevel(String enableCategoryFilterLevel) {
            return enableCategoryFilterLevel(Output.of(enableCategoryFilterLevel));
        }

        /**
         * @param facetControlIds Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder facetControlIds(@Nullable Output<List<String>> facetControlIds) {
            $.facetControlIds = facetControlIds;
            return this;
        }

        /**
         * @param facetControlIds Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder facetControlIds(List<String> facetControlIds) {
            return facetControlIds(Output.of(facetControlIds));
        }

        /**
         * @param facetControlIds Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder facetControlIds(String... facetControlIds) {
            return facetControlIds(List.of(facetControlIds));
        }

        /**
         * @param filterControlIds Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder filterControlIds(@Nullable Output<List<String>> filterControlIds) {
            $.filterControlIds = filterControlIds;
            return this;
        }

        /**
         * @param filterControlIds Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder filterControlIds(List<String> filterControlIds) {
            return filterControlIds(Output.of(filterControlIds));
        }

        /**
         * @param filterControlIds Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder filterControlIds(String... filterControlIds) {
            return filterControlIds(List.of(filterControlIds));
        }

        /**
         * @param ignoreControlIds Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder ignoreControlIds(@Nullable Output<List<String>> ignoreControlIds) {
            $.ignoreControlIds = ignoreControlIds;
            return this;
        }

        /**
         * @param ignoreControlIds Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder ignoreControlIds(List<String> ignoreControlIds) {
            return ignoreControlIds(Output.of(ignoreControlIds));
        }

        /**
         * @param ignoreControlIds Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder ignoreControlIds(String... ignoreControlIds) {
            return ignoreControlIds(List.of(ignoreControlIds));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param modelId The id of the model to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder modelId(@Nullable Output<String> modelId) {
            $.modelId = modelId;
            return this;
        }

        /**
         * @param modelId The id of the model to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder modelId(String modelId) {
            return modelId(Output.of(modelId));
        }

        /**
         * @param name Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}servingConfig/*`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. Fully qualified name `projects/*{@literal /}locations/global/catalogs/*{@literal /}servingConfig/*`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param onewaySynonymsControlIds Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder onewaySynonymsControlIds(@Nullable Output<List<String>> onewaySynonymsControlIds) {
            $.onewaySynonymsControlIds = onewaySynonymsControlIds;
            return this;
        }

        /**
         * @param onewaySynonymsControlIds Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder onewaySynonymsControlIds(List<String> onewaySynonymsControlIds) {
            return onewaySynonymsControlIds(Output.of(onewaySynonymsControlIds));
        }

        /**
         * @param onewaySynonymsControlIds Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder onewaySynonymsControlIds(String... onewaySynonymsControlIds) {
            return onewaySynonymsControlIds(List.of(onewaySynonymsControlIds));
        }

        /**
         * @param priceRerankingLevel How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * &#39;no-price-reranking&#39; * &#39;low-price-raranking&#39; * &#39;medium-price-reranking&#39; * &#39;high-price-reranking&#39; If not specified, we choose default based on model type. Default value: &#39;no-price-reranking&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder priceRerankingLevel(@Nullable Output<String> priceRerankingLevel) {
            $.priceRerankingLevel = priceRerankingLevel;
            return this;
        }

        /**
         * @param priceRerankingLevel How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * &#39;no-price-reranking&#39; * &#39;low-price-raranking&#39; * &#39;medium-price-reranking&#39; * &#39;high-price-reranking&#39; If not specified, we choose default based on model type. Default value: &#39;no-price-reranking&#39;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
         * 
         * @return builder
         * 
         */
        public Builder priceRerankingLevel(String priceRerankingLevel) {
            return priceRerankingLevel(Output.of(priceRerankingLevel));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param redirectControlIds Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder redirectControlIds(@Nullable Output<List<String>> redirectControlIds) {
            $.redirectControlIds = redirectControlIds;
            return this;
        }

        /**
         * @param redirectControlIds Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder redirectControlIds(List<String> redirectControlIds) {
            return redirectControlIds(Output.of(redirectControlIds));
        }

        /**
         * @param redirectControlIds Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder redirectControlIds(String... redirectControlIds) {
            return redirectControlIds(List.of(redirectControlIds));
        }

        /**
         * @param replacementControlIds Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder replacementControlIds(@Nullable Output<List<String>> replacementControlIds) {
            $.replacementControlIds = replacementControlIds;
            return this;
        }

        /**
         * @param replacementControlIds Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder replacementControlIds(List<String> replacementControlIds) {
            return replacementControlIds(Output.of(replacementControlIds));
        }

        /**
         * @param replacementControlIds Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder replacementControlIds(String... replacementControlIds) {
            return replacementControlIds(List.of(replacementControlIds));
        }

        /**
         * @param servingConfigId Required. The ID to use for the ServingConfig, which will become the final component of the ServingConfig&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
         * 
         * @return builder
         * 
         */
        public Builder servingConfigId(Output<String> servingConfigId) {
            $.servingConfigId = servingConfigId;
            return this;
        }

        /**
         * @param servingConfigId Required. The ID to use for the ServingConfig, which will become the final component of the ServingConfig&#39;s resource name. This value should be 4-63 characters, and valid characters are /a-z-_/.
         * 
         * @return builder
         * 
         */
        public Builder servingConfigId(String servingConfigId) {
            return servingConfigId(Output.of(servingConfigId));
        }

        /**
         * @param solutionTypes Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(Output<List<ServingConfigSolutionTypesItem>> solutionTypes) {
            $.solutionTypes = solutionTypes;
            return this;
        }

        /**
         * @param solutionTypes Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(List<ServingConfigSolutionTypesItem> solutionTypes) {
            return solutionTypes(Output.of(solutionTypes));
        }

        /**
         * @param solutionTypes Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(ServingConfigSolutionTypesItem... solutionTypes) {
            return solutionTypes(List.of(solutionTypes));
        }

        /**
         * @param twowaySynonymsControlIds Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder twowaySynonymsControlIds(@Nullable Output<List<String>> twowaySynonymsControlIds) {
            $.twowaySynonymsControlIds = twowaySynonymsControlIds;
            return this;
        }

        /**
         * @param twowaySynonymsControlIds Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder twowaySynonymsControlIds(List<String> twowaySynonymsControlIds) {
            return twowaySynonymsControlIds(Output.of(twowaySynonymsControlIds));
        }

        /**
         * @param twowaySynonymsControlIds Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
         * 
         * @return builder
         * 
         */
        public Builder twowaySynonymsControlIds(String... twowaySynonymsControlIds) {
            return twowaySynonymsControlIds(List.of(twowaySynonymsControlIds));
        }

        public ServingConfigArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.servingConfigId = Objects.requireNonNull($.servingConfigId, "expected parameter 'servingConfigId' to be non-null");
            $.solutionTypes = Objects.requireNonNull($.solutionTypes, "expected parameter 'solutionTypes' to be non-null");
            return $;
        }
    }

}
