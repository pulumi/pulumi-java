// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig.v1beta.enums.RecurringScheduleFrequency;
import com.pulumi.googlenative.osconfig.v1beta.inputs.MonthlyScheduleArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.TimeOfDayArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.TimeZoneArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.WeeklyScheduleArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sets the time for recurring patch deployments.
 * 
 */
public final class RecurringScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecurringScheduleArgs Empty = new RecurringScheduleArgs();

    /**
     * Optional. The end time at which a recurring patch deployment schedule is no longer active.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return Optional. The end time at which a recurring patch deployment schedule is no longer active.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The frequency unit of this recurring schedule.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<RecurringScheduleFrequency> frequency;

    /**
     * @return The frequency unit of this recurring schedule.
     * 
     */
    public Output<RecurringScheduleFrequency> frequency() {
        return this.frequency;
    }

    /**
     * Schedule with monthly executions.
     * 
     */
    @Import(name="monthly", required=true)
    private Output<MonthlyScheduleArgs> monthly;

    /**
     * @return Schedule with monthly executions.
     * 
     */
    public Output<MonthlyScheduleArgs> monthly() {
        return this.monthly;
    }

    /**
     * Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Time of the day to run a recurring deployment.
     * 
     */
    @Import(name="timeOfDay", required=true)
    private Output<TimeOfDayArgs> timeOfDay;

    /**
     * @return Time of the day to run a recurring deployment.
     * 
     */
    public Output<TimeOfDayArgs> timeOfDay() {
        return this.timeOfDay;
    }

    /**
     * Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<TimeZoneArgs> timeZone;

    /**
     * @return Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
     * 
     */
    public Output<TimeZoneArgs> timeZone() {
        return this.timeZone;
    }

    /**
     * Schedule with weekly executions.
     * 
     */
    @Import(name="weekly", required=true)
    private Output<WeeklyScheduleArgs> weekly;

    /**
     * @return Schedule with weekly executions.
     * 
     */
    public Output<WeeklyScheduleArgs> weekly() {
        return this.weekly;
    }

    private RecurringScheduleArgs() {}

    private RecurringScheduleArgs(RecurringScheduleArgs $) {
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.monthly = $.monthly;
        this.startTime = $.startTime;
        this.timeOfDay = $.timeOfDay;
        this.timeZone = $.timeZone;
        this.weekly = $.weekly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecurringScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecurringScheduleArgs $;

        public Builder() {
            $ = new RecurringScheduleArgs();
        }

        public Builder(RecurringScheduleArgs defaults) {
            $ = new RecurringScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime Optional. The end time at which a recurring patch deployment schedule is no longer active.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Optional. The end time at which a recurring patch deployment schedule is no longer active.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param frequency The frequency unit of this recurring schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<RecurringScheduleFrequency> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency unit of this recurring schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(RecurringScheduleFrequency frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param monthly Schedule with monthly executions.
         * 
         * @return builder
         * 
         */
        public Builder monthly(Output<MonthlyScheduleArgs> monthly) {
            $.monthly = monthly;
            return this;
        }

        /**
         * @param monthly Schedule with monthly executions.
         * 
         * @return builder
         * 
         */
        public Builder monthly(MonthlyScheduleArgs monthly) {
            return monthly(Output.of(monthly));
        }

        /**
         * @param startTime Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeOfDay Time of the day to run a recurring deployment.
         * 
         * @return builder
         * 
         */
        public Builder timeOfDay(Output<TimeOfDayArgs> timeOfDay) {
            $.timeOfDay = timeOfDay;
            return this;
        }

        /**
         * @param timeOfDay Time of the day to run a recurring deployment.
         * 
         * @return builder
         * 
         */
        public Builder timeOfDay(TimeOfDayArgs timeOfDay) {
            return timeOfDay(Output.of(timeOfDay));
        }

        /**
         * @param timeZone Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<TimeZoneArgs> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(TimeZoneArgs timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param weekly Schedule with weekly executions.
         * 
         * @return builder
         * 
         */
        public Builder weekly(Output<WeeklyScheduleArgs> weekly) {
            $.weekly = weekly;
            return this;
        }

        /**
         * @param weekly Schedule with weekly executions.
         * 
         * @return builder
         * 
         */
        public Builder weekly(WeeklyScheduleArgs weekly) {
            return weekly(Output.of(weekly));
        }

        public RecurringScheduleArgs build() {
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.monthly = Objects.requireNonNull($.monthly, "expected parameter 'monthly' to be non-null");
            $.timeOfDay = Objects.requireNonNull($.timeOfDay, "expected parameter 'timeOfDay' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            $.weekly = Objects.requireNonNull($.weekly, "expected parameter 'weekly' to be non-null");
            return $;
        }
    }

}
