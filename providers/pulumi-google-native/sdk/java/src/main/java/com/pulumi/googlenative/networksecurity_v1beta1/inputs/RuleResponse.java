// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networksecurity_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networksecurity_v1beta1.inputs.DestinationResponse;
import com.pulumi.googlenative.networksecurity_v1beta1.inputs.SourceResponse;
import java.util.List;
import java.util.Objects;


/**
 * Specification of rules.
 * 
 */
public final class RuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RuleResponse Empty = new RuleResponse();

    /**
     * Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
     * 
     */
    @Import(name="destinations", required=true)
      private final List<DestinationResponse> destinations;

    public List<DestinationResponse> destinations() {
        return this.destinations;
    }

    /**
     * Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
     * 
     */
    @Import(name="sources", required=true)
      private final List<SourceResponse> sources;

    public List<SourceResponse> sources() {
        return this.sources;
    }

    public RuleResponse(
        List<DestinationResponse> destinations,
        List<SourceResponse> sources) {
        this.destinations = Objects.requireNonNull(destinations, "expected parameter 'destinations' to be non-null");
        this.sources = Objects.requireNonNull(sources, "expected parameter 'sources' to be non-null");
    }

    private RuleResponse() {
        this.destinations = List.of();
        this.sources = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<DestinationResponse> destinations;
        private List<SourceResponse> sources;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinations = defaults.destinations;
    	      this.sources = defaults.sources;
        }

        public Builder destinations(List<DestinationResponse> destinations) {
            this.destinations = Objects.requireNonNull(destinations);
            return this;
        }
        public Builder destinations(DestinationResponse... destinations) {
            return destinations(List.of(destinations));
        }
        public Builder sources(List<SourceResponse> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(SourceResponse... sources) {
            return sources(List.of(sources));
        }        public RuleResponse build() {
            return new RuleResponse(destinations, sources);
        }
    }
}
