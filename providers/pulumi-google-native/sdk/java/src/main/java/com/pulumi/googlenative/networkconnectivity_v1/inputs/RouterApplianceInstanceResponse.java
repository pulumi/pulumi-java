// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkconnectivity_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM&#39;s network interfaces.
 * 
 */
public final class RouterApplianceInstanceResponse extends com.pulumi.resources.InvokeArgs {

    public static final RouterApplianceInstanceResponse Empty = new RouterApplianceInstanceResponse();

    /**
     * The IP address on the VM to use for peering.
     * 
     */
    @Import(name="ipAddress", required=true)
    private String ipAddress;

    /**
     * @return The IP address on the VM to use for peering.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * The URI of the VM.
     * 
     */
    @Import(name="virtualMachine", required=true)
    private String virtualMachine;

    /**
     * @return The URI of the VM.
     * 
     */
    public String virtualMachine() {
        return this.virtualMachine;
    }

    private RouterApplianceInstanceResponse() {}

    private RouterApplianceInstanceResponse(RouterApplianceInstanceResponse $) {
        this.ipAddress = $.ipAddress;
        this.virtualMachine = $.virtualMachine;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterApplianceInstanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterApplianceInstanceResponse $;

        public Builder() {
            $ = new RouterApplianceInstanceResponse();
        }

        public Builder(RouterApplianceInstanceResponse defaults) {
            $ = new RouterApplianceInstanceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress The IP address on the VM to use for peering.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param virtualMachine The URI of the VM.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachine(String virtualMachine) {
            $.virtualMachine = virtualMachine;
            return this;
        }

        public RouterApplianceInstanceResponse build() {
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.virtualMachine = Objects.requireNonNull($.virtualMachine, "expected parameter 'virtualMachine' to be non-null");
            return $;
        }
    }

}
