// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Defines a SDK harness container for executing Dataflow pipelines.
 * 
 */
public final class SdkHarnessContainerImageResponse extends com.pulumi.resources.InvokeArgs {

    public static final SdkHarnessContainerImageResponse Empty = new SdkHarnessContainerImageResponse();

    /**
     * A docker container image that resides in Google Container Registry.
     * 
     */
    @Import(name="containerImage", required=true)
    private String containerImage;

    public String containerImage() {
        return this.containerImage;
    }

    /**
     * Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
     * 
     */
    @Import(name="environmentId", required=true)
    private String environmentId;

    public String environmentId() {
        return this.environmentId;
    }

    /**
     * If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
     * 
     */
    @Import(name="useSingleCorePerContainer", required=true)
    private Boolean useSingleCorePerContainer;

    public Boolean useSingleCorePerContainer() {
        return this.useSingleCorePerContainer;
    }

    private SdkHarnessContainerImageResponse() {}

    private SdkHarnessContainerImageResponse(SdkHarnessContainerImageResponse $) {
        this.containerImage = $.containerImage;
        this.environmentId = $.environmentId;
        this.useSingleCorePerContainer = $.useSingleCorePerContainer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SdkHarnessContainerImageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SdkHarnessContainerImageResponse $;

        public Builder() {
            $ = new SdkHarnessContainerImageResponse();
        }

        public Builder(SdkHarnessContainerImageResponse defaults) {
            $ = new SdkHarnessContainerImageResponse(Objects.requireNonNull(defaults));
        }

        public Builder containerImage(String containerImage) {
            $.containerImage = containerImage;
            return this;
        }

        public Builder environmentId(String environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        public Builder useSingleCorePerContainer(Boolean useSingleCorePerContainer) {
            $.useSingleCorePerContainer = useSingleCorePerContainer;
            return this;
        }

        public SdkHarnessContainerImageResponse build() {
            $.containerImage = Objects.requireNonNull($.containerImage, "expected parameter 'containerImage' to be non-null");
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            $.useSingleCorePerContainer = Objects.requireNonNull($.useSingleCorePerContainer, "expected parameter 'useSingleCorePerContainer' to be non-null");
            return $;
        }
    }

}
