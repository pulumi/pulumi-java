// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.genomics.v1alpha2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.genomics.v1alpha2.outputs.DiskResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class PipelineResourcesResponse {
    /**
     * @return Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
     * 
     */
    private final String acceleratorCount;
    /**
     * @return Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
     * 
     */
    private final String acceleratorType;
    /**
     * @return The size of the boot disk. Defaults to 10 (GB).
     * 
     */
    private final Integer bootDiskSizeGb;
    /**
     * @return Disks to attach.
     * 
     */
    private final List<DiskResponse> disks;
    /**
     * @return The minimum number of cores to use. Defaults to 1.
     * 
     */
    private final Integer minimumCpuCores;
    /**
     * @return The minimum amount of RAM to use. Defaults to 3.75 (GB)
     * 
     */
    private final Double minimumRamGb;
    /**
     * @return Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM&#39;s Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
     * 
     */
    private final Boolean noAddress;
    /**
     * @return Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
     * 
     */
    private final Boolean preemptible;
    /**
     * @return List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
     * 
     */
    private final List<String> zones;

    @CustomType.Constructor
    private PipelineResourcesResponse(
        @CustomType.Parameter("acceleratorCount") String acceleratorCount,
        @CustomType.Parameter("acceleratorType") String acceleratorType,
        @CustomType.Parameter("bootDiskSizeGb") Integer bootDiskSizeGb,
        @CustomType.Parameter("disks") List<DiskResponse> disks,
        @CustomType.Parameter("minimumCpuCores") Integer minimumCpuCores,
        @CustomType.Parameter("minimumRamGb") Double minimumRamGb,
        @CustomType.Parameter("noAddress") Boolean noAddress,
        @CustomType.Parameter("preemptible") Boolean preemptible,
        @CustomType.Parameter("zones") List<String> zones) {
        this.acceleratorCount = acceleratorCount;
        this.acceleratorType = acceleratorType;
        this.bootDiskSizeGb = bootDiskSizeGb;
        this.disks = disks;
        this.minimumCpuCores = minimumCpuCores;
        this.minimumRamGb = minimumRamGb;
        this.noAddress = noAddress;
        this.preemptible = preemptible;
        this.zones = zones;
    }

    /**
     * @return Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
     * 
     */
    public String acceleratorCount() {
        return this.acceleratorCount;
    }
    /**
     * @return Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
     * 
     */
    public String acceleratorType() {
        return this.acceleratorType;
    }
    /**
     * @return The size of the boot disk. Defaults to 10 (GB).
     * 
     */
    public Integer bootDiskSizeGb() {
        return this.bootDiskSizeGb;
    }
    /**
     * @return Disks to attach.
     * 
     */
    public List<DiskResponse> disks() {
        return this.disks;
    }
    /**
     * @return The minimum number of cores to use. Defaults to 1.
     * 
     */
    public Integer minimumCpuCores() {
        return this.minimumCpuCores;
    }
    /**
     * @return The minimum amount of RAM to use. Defaults to 3.75 (GB)
     * 
     */
    public Double minimumRamGb() {
        return this.minimumRamGb;
    }
    /**
     * @return Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM&#39;s Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
     * 
     */
    public Boolean noAddress() {
        return this.noAddress;
    }
    /**
     * @return Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
     * 
     */
    public Boolean preemptible() {
        return this.preemptible;
    }
    /**
     * @return List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineResourcesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String acceleratorCount;
        private String acceleratorType;
        private Integer bootDiskSizeGb;
        private List<DiskResponse> disks;
        private Integer minimumCpuCores;
        private Double minimumRamGb;
        private Boolean noAddress;
        private Boolean preemptible;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineResourcesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorCount = defaults.acceleratorCount;
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.disks = defaults.disks;
    	      this.minimumCpuCores = defaults.minimumCpuCores;
    	      this.minimumRamGb = defaults.minimumRamGb;
    	      this.noAddress = defaults.noAddress;
    	      this.preemptible = defaults.preemptible;
    	      this.zones = defaults.zones;
        }

        public Builder acceleratorCount(String acceleratorCount) {
            this.acceleratorCount = Objects.requireNonNull(acceleratorCount);
            return this;
        }
        public Builder acceleratorType(String acceleratorType) {
            this.acceleratorType = Objects.requireNonNull(acceleratorType);
            return this;
        }
        public Builder bootDiskSizeGb(Integer bootDiskSizeGb) {
            this.bootDiskSizeGb = Objects.requireNonNull(bootDiskSizeGb);
            return this;
        }
        public Builder disks(List<DiskResponse> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(DiskResponse... disks) {
            return disks(List.of(disks));
        }
        public Builder minimumCpuCores(Integer minimumCpuCores) {
            this.minimumCpuCores = Objects.requireNonNull(minimumCpuCores);
            return this;
        }
        public Builder minimumRamGb(Double minimumRamGb) {
            this.minimumRamGb = Objects.requireNonNull(minimumRamGb);
            return this;
        }
        public Builder noAddress(Boolean noAddress) {
            this.noAddress = Objects.requireNonNull(noAddress);
            return this;
        }
        public Builder preemptible(Boolean preemptible) {
            this.preemptible = Objects.requireNonNull(preemptible);
            return this;
        }
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public PipelineResourcesResponse build() {
            return new PipelineResourcesResponse(acceleratorCount, acceleratorType, bootDiskSizeGb, disks, minimumCpuCores, minimumRamGb, noAddress, preemptible, zones);
        }
    }
}
