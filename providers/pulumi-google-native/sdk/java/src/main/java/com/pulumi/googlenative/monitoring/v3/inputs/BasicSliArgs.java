// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v3.inputs.AvailabilityCriteriaArgs;
import com.pulumi.googlenative.monitoring.v3.inputs.LatencyCriteriaArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
 * 
 */
public final class BasicSliArgs extends com.pulumi.resources.ResourceArgs {

    public static final BasicSliArgs Empty = new BasicSliArgs();

    /**
     * Good service is defined to be the count of requests made to this service that return successfully.
     * 
     */
    @Import(name="availability")
    private @Nullable Output<AvailabilityCriteriaArgs> availability;

    /**
     * @return Good service is defined to be the count of requests made to this service that return successfully.
     * 
     */
    public Optional<Output<AvailabilityCriteriaArgs>> availability() {
        return Optional.ofNullable(this.availability);
    }

    /**
     * Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
     * 
     */
    @Import(name="latency")
    private @Nullable Output<LatencyCriteriaArgs> latency;

    /**
     * @return Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
     * 
     */
    public Optional<Output<LatencyCriteriaArgs>> latency() {
        return Optional.ofNullable(this.latency);
    }

    /**
     * OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
     * 
     */
    @Import(name="location")
    private @Nullable Output<List<String>> location;

    /**
     * @return OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
     * 
     */
    public Optional<Output<List<String>>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
     * 
     */
    @Import(name="method")
    private @Nullable Output<List<String>> method;

    /**
     * @return OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
     * 
     */
    public Optional<Output<List<String>>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
     * 
     */
    @Import(name="version")
    private @Nullable Output<List<String>> version;

    /**
     * @return OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
     * 
     */
    public Optional<Output<List<String>>> version() {
        return Optional.ofNullable(this.version);
    }

    private BasicSliArgs() {}

    private BasicSliArgs(BasicSliArgs $) {
        this.availability = $.availability;
        this.latency = $.latency;
        this.location = $.location;
        this.method = $.method;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicSliArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicSliArgs $;

        public Builder() {
            $ = new BasicSliArgs();
        }

        public Builder(BasicSliArgs defaults) {
            $ = new BasicSliArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availability Good service is defined to be the count of requests made to this service that return successfully.
         * 
         * @return builder
         * 
         */
        public Builder availability(@Nullable Output<AvailabilityCriteriaArgs> availability) {
            $.availability = availability;
            return this;
        }

        /**
         * @param availability Good service is defined to be the count of requests made to this service that return successfully.
         * 
         * @return builder
         * 
         */
        public Builder availability(AvailabilityCriteriaArgs availability) {
            return availability(Output.of(availability));
        }

        /**
         * @param latency Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
         * 
         * @return builder
         * 
         */
        public Builder latency(@Nullable Output<LatencyCriteriaArgs> latency) {
            $.latency = latency;
            return this;
        }

        /**
         * @param latency Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
         * 
         * @return builder
         * 
         */
        public Builder latency(LatencyCriteriaArgs latency) {
            return latency(Output.of(latency));
        }

        /**
         * @param location OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<List<String>> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder location(List<String> location) {
            return location(Output.of(location));
        }

        /**
         * @param location OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don&#39;t support breaking down by location, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder location(String... location) {
            return location(List.of(location));
        }

        /**
         * @param method OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<List<String>> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder method(List<String> method) {
            return method(Output.of(method));
        }

        /**
         * @param method OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service&#39;s methods. For service types that don&#39;t support breaking down by method, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder method(String... method) {
            return method(List.of(method));
        }

        /**
         * @param version OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<List<String>> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder version(List<String> version) {
            return version(Output.of(version));
        }

        /**
         * @param version OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don&#39;t support breaking down by version, setting this field will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder version(String... version) {
            return version(List.of(version));
        }

        public BasicSliArgs build() {
            return $;
        }
    }

}
