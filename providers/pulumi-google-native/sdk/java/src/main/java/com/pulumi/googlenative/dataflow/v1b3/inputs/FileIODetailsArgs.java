// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow.v1b3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Metadata for a File connector used by the job.
 * 
 */
public final class FileIODetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileIODetailsArgs Empty = new FileIODetailsArgs();

    /**
     * File Pattern used to access files by the connector.
     * 
     */
    @Import(name="filePattern")
    private @Nullable Output<String> filePattern;

    /**
     * @return File Pattern used to access files by the connector.
     * 
     */
    public Optional<Output<String>> filePattern() {
        return Optional.ofNullable(this.filePattern);
    }

    private FileIODetailsArgs() {}

    private FileIODetailsArgs(FileIODetailsArgs $) {
        this.filePattern = $.filePattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileIODetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileIODetailsArgs $;

        public Builder() {
            $ = new FileIODetailsArgs();
        }

        public Builder(FileIODetailsArgs defaults) {
            $ = new FileIODetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filePattern File Pattern used to access files by the connector.
         * 
         * @return builder
         * 
         */
        public Builder filePattern(@Nullable Output<String> filePattern) {
            $.filePattern = filePattern;
            return this;
        }

        /**
         * @param filePattern File Pattern used to access files by the connector.
         * 
         * @return builder
         * 
         */
        public Builder filePattern(String filePattern) {
            return filePattern(Output.of(filePattern));
        }

        public FileIODetailsArgs build() {
            return $;
        }
    }

}
