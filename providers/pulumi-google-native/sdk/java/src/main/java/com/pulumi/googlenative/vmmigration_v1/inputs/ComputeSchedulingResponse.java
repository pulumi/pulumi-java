// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration_v1.inputs.SchedulingNodeAffinityResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
 * 
 */
public final class ComputeSchedulingResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComputeSchedulingResponse Empty = new ComputeSchedulingResponse();

    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
     * 
     */
    @Import(name="minNodeCpus", required=true)
    private Integer minNodeCpus;

    /**
     * @return The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
     * 
     */
    public Integer minNodeCpus() {
        return this.minNodeCpus;
    }

    /**
     * A set of node affinity and anti-affinity configurations for sole tenant nodes.
     * 
     */
    @Import(name="nodeAffinities", required=true)
    private List<SchedulingNodeAffinityResponse> nodeAffinities;

    /**
     * @return A set of node affinity and anti-affinity configurations for sole tenant nodes.
     * 
     */
    public List<SchedulingNodeAffinityResponse> nodeAffinities() {
        return this.nodeAffinities;
    }

    /**
     * How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
     * 
     */
    @Import(name="onHostMaintenance", required=true)
    private String onHostMaintenance;

    /**
     * @return How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
     * 
     */
    public String onHostMaintenance() {
        return this.onHostMaintenance;
    }

    /**
     * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
     * 
     */
    @Import(name="restartType", required=true)
    private String restartType;

    /**
     * @return Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
     * 
     */
    public String restartType() {
        return this.restartType;
    }

    private ComputeSchedulingResponse() {}

    private ComputeSchedulingResponse(ComputeSchedulingResponse $) {
        this.minNodeCpus = $.minNodeCpus;
        this.nodeAffinities = $.nodeAffinities;
        this.onHostMaintenance = $.onHostMaintenance;
        this.restartType = $.restartType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeSchedulingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeSchedulingResponse $;

        public Builder() {
            $ = new ComputeSchedulingResponse();
        }

        public Builder(ComputeSchedulingResponse defaults) {
            $ = new ComputeSchedulingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param minNodeCpus The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCpus(Integer minNodeCpus) {
            $.minNodeCpus = minNodeCpus;
            return this;
        }

        /**
         * @param nodeAffinities A set of node affinity and anti-affinity configurations for sole tenant nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(List<SchedulingNodeAffinityResponse> nodeAffinities) {
            $.nodeAffinities = nodeAffinities;
            return this;
        }

        /**
         * @param nodeAffinities A set of node affinity and anti-affinity configurations for sole tenant nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(SchedulingNodeAffinityResponse... nodeAffinities) {
            return nodeAffinities(List.of(nodeAffinities));
        }

        /**
         * @param onHostMaintenance How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
         * 
         * @return builder
         * 
         */
        public Builder onHostMaintenance(String onHostMaintenance) {
            $.onHostMaintenance = onHostMaintenance;
            return this;
        }

        /**
         * @param restartType Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
         * 
         * @return builder
         * 
         */
        public Builder restartType(String restartType) {
            $.restartType = restartType;
            return this;
        }

        public ComputeSchedulingResponse build() {
            $.minNodeCpus = Objects.requireNonNull($.minNodeCpus, "expected parameter 'minNodeCpus' to be non-null");
            $.nodeAffinities = Objects.requireNonNull($.nodeAffinities, "expected parameter 'nodeAffinities' to be non-null");
            $.onHostMaintenance = Objects.requireNonNull($.onHostMaintenance, "expected parameter 'onHostMaintenance' to be non-null");
            $.restartType = Objects.requireNonNull($.restartType, "expected parameter 'restartType' to be non-null");
            return $;
        }
    }

}
