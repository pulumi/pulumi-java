// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Read-replica configuration specific to MySQL databases.
 * 
 */
public final class MySqlReplicaConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MySqlReplicaConfigurationArgs Empty = new MySqlReplicaConfigurationArgs();

    /**
     * PEM representation of the trusted CA&#39;s x509 certificate.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * PEM representation of the replica&#39;s x509 certificate.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<String> clientCertificate;

    public Optional<Output<String>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * PEM representation of the replica&#39;s private key. The corresponsing public key is encoded in the client&#39;s certificate.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * Seconds to wait between connect retries. MySQL&#39;s default is 60 seconds.
     * 
     */
    @Import(name="connectRetryInterval")
    private @Nullable Output<Integer> connectRetryInterval;

    public Optional<Output<Integer>> connectRetryInterval() {
        return Optional.ofNullable(this.connectRetryInterval);
    }

    /**
     * Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
     * 
     */
    @Import(name="dumpFilePath")
    private @Nullable Output<String> dumpFilePath;

    public Optional<Output<String>> dumpFilePath() {
        return Optional.ofNullable(this.dumpFilePath);
    }

    /**
     * This is always `sql#mysqlReplicaConfiguration`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Interval in milliseconds between replication heartbeats.
     * 
     */
    @Import(name="masterHeartbeatPeriod")
    private @Nullable Output<String> masterHeartbeatPeriod;

    public Optional<Output<String>> masterHeartbeatPeriod() {
        return Optional.ofNullable(this.masterHeartbeatPeriod);
    }

    /**
     * The password for the replication connection.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * A list of permissible ciphers to use for SSL encryption.
     * 
     */
    @Import(name="sslCipher")
    private @Nullable Output<String> sslCipher;

    public Optional<Output<String>> sslCipher() {
        return Optional.ofNullable(this.sslCipher);
    }

    /**
     * The username for the replication connection.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Whether or not to check the primary instance&#39;s Common Name value in the certificate that it sends during the SSL handshake.
     * 
     */
    @Import(name="verifyServerCertificate")
    private @Nullable Output<Boolean> verifyServerCertificate;

    public Optional<Output<Boolean>> verifyServerCertificate() {
        return Optional.ofNullable(this.verifyServerCertificate);
    }

    private MySqlReplicaConfigurationArgs() {}

    private MySqlReplicaConfigurationArgs(MySqlReplicaConfigurationArgs $) {
        this.caCertificate = $.caCertificate;
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.connectRetryInterval = $.connectRetryInterval;
        this.dumpFilePath = $.dumpFilePath;
        this.kind = $.kind;
        this.masterHeartbeatPeriod = $.masterHeartbeatPeriod;
        this.password = $.password;
        this.sslCipher = $.sslCipher;
        this.username = $.username;
        this.verifyServerCertificate = $.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlReplicaConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlReplicaConfigurationArgs $;

        public Builder() {
            $ = new MySqlReplicaConfigurationArgs();
        }

        public Builder(MySqlReplicaConfigurationArgs defaults) {
            $ = new MySqlReplicaConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        public Builder clientCertificate(@Nullable Output<String> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        public Builder connectRetryInterval(@Nullable Output<Integer> connectRetryInterval) {
            $.connectRetryInterval = connectRetryInterval;
            return this;
        }

        public Builder connectRetryInterval(Integer connectRetryInterval) {
            return connectRetryInterval(Output.of(connectRetryInterval));
        }

        public Builder dumpFilePath(@Nullable Output<String> dumpFilePath) {
            $.dumpFilePath = dumpFilePath;
            return this;
        }

        public Builder dumpFilePath(String dumpFilePath) {
            return dumpFilePath(Output.of(dumpFilePath));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder masterHeartbeatPeriod(@Nullable Output<String> masterHeartbeatPeriod) {
            $.masterHeartbeatPeriod = masterHeartbeatPeriod;
            return this;
        }

        public Builder masterHeartbeatPeriod(String masterHeartbeatPeriod) {
            return masterHeartbeatPeriod(Output.of(masterHeartbeatPeriod));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder sslCipher(@Nullable Output<String> sslCipher) {
            $.sslCipher = sslCipher;
            return this;
        }

        public Builder sslCipher(String sslCipher) {
            return sslCipher(Output.of(sslCipher));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public Builder verifyServerCertificate(@Nullable Output<Boolean> verifyServerCertificate) {
            $.verifyServerCertificate = verifyServerCertificate;
            return this;
        }

        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            return verifyServerCertificate(Output.of(verifyServerCertificate));
        }

        public MySqlReplicaConfigurationArgs build() {
            return $;
        }
    }

}
