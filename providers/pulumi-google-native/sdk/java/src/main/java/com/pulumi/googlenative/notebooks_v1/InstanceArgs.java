// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceBootDiskType;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceDataDiskType;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceDiskEncryption;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceNicType;
import com.pulumi.googlenative.notebooks_v1.inputs.AcceleratorConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.ContainerImageArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.ReservationAffinityArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.ShieldedInstanceConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.UpgradeHistoryEntryArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.VmImageArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The hardware accelerator used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).
     * 
     */
    @Import(name="acceleratorConfig")
    private @Nullable Output<AcceleratorConfigArgs> acceleratorConfig;

    public Optional<Output<AcceleratorConfigArgs>> acceleratorConfig() {
        return Optional.ofNullable(this.acceleratorConfig);
    }

    /**
     * Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
     * 
     */
    @Import(name="bootDiskSizeGb")
    private @Nullable Output<String> bootDiskSizeGb;

    public Optional<Output<String>> bootDiskSizeGb() {
        return Optional.ofNullable(this.bootDiskSizeGb);
    }

    /**
     * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
     */
    @Import(name="bootDiskType")
    private @Nullable Output<InstanceBootDiskType> bootDiskType;

    public Optional<Output<InstanceBootDiskType>> bootDiskType() {
        return Optional.ofNullable(this.bootDiskType);
    }

    /**
     * Use a container image to start the notebook instance.
     * 
     */
    @Import(name="containerImage")
    private @Nullable Output<ContainerImageArgs> containerImage;

    public Optional<Output<ContainerImageArgs>> containerImage() {
        return Optional.ofNullable(this.containerImage);
    }

    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we&#39;ll automatically choose from official GPU drivers.
     * 
     */
    @Import(name="customGpuDriverPath")
    private @Nullable Output<String> customGpuDriverPath;

    public Optional<Output<String>> customGpuDriverPath() {
        return Optional.ofNullable(this.customGpuDriverPath);
    }

    /**
     * Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
     * 
     */
    @Import(name="dataDiskSizeGb")
    private @Nullable Output<String> dataDiskSizeGb;

    public Optional<Output<String>> dataDiskSizeGb() {
        return Optional.ofNullable(this.dataDiskSizeGb);
    }

    /**
     * Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
     */
    @Import(name="dataDiskType")
    private @Nullable Output<InstanceDataDiskType> dataDiskType;

    public Optional<Output<InstanceDataDiskType>> dataDiskType() {
        return Optional.ofNullable(this.dataDiskType);
    }

    /**
     * Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
     * 
     */
    @Import(name="diskEncryption")
    private @Nullable Output<InstanceDiskEncryption> diskEncryption;

    public Optional<Output<InstanceDiskEncryption>> diskEncryption() {
        return Optional.ofNullable(this.diskEncryption);
    }

    /**
     * Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won&#39;t be installed. Only applicable to instances with GPUs.
     * 
     */
    @Import(name="installGpuDriver")
    private @Nullable Output<Boolean> installGpuDriver;

    public Optional<Output<Boolean>> installGpuDriver() {
        return Optional.ofNullable(this.installGpuDriver);
    }

    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance&#39;s service account can use the instance.
     * 
     */
    @Import(name="instanceOwners")
    private @Nullable Output<List<String>> instanceOwners;

    public Optional<Output<List<String>>> instanceOwners() {
        return Optional.ofNullable(this.instanceOwners);
    }

    /**
     * Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The [Compute Engine machine type](/compute/docs/machine-types) of this instance.
     * 
     */
    @Import(name="machineType", required=true)
    private Output<String> machineType;

    public Output<String> machineType() {
        return this.machineType;
    }

    /**
     * Custom metadata to apply to this instance.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
     */
    @Import(name="nicType")
    private @Nullable Output<InstanceNicType> nicType;

    public Optional<Output<InstanceNicType>> nicType() {
        return Optional.ofNullable(this.nicType);
    }

    /**
     * If true, the notebook instance will not register with the proxy.
     * 
     */
    @Import(name="noProxyAccess")
    private @Nullable Output<Boolean> noProxyAccess;

    public Optional<Output<Boolean>> noProxyAccess() {
        return Optional.ofNullable(this.noProxyAccess);
    }

    /**
     * If true, no public IP will be assigned to this instance.
     * 
     */
    @Import(name="noPublicIp")
    private @Nullable Output<Boolean> noPublicIp;

    public Optional<Output<Boolean>> noPublicIp() {
        return Optional.ofNullable(this.noPublicIp);
    }

    /**
     * Input only. If true, the data disk will not be auto deleted when deleting the instance.
     * 
     */
    @Import(name="noRemoveDataDisk")
    private @Nullable Output<Boolean> noRemoveDataDisk;

    public Optional<Output<Boolean>> noRemoveDataDisk() {
        return Optional.ofNullable(this.noRemoveDataDisk);
    }

    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
     */
    @Import(name="postStartupScript")
    private @Nullable Output<String> postStartupScript;

    public Optional<Output<String>> postStartupScript() {
        return Optional.ofNullable(this.postStartupScript);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this notebook instance.
     * 
     */
    @Import(name="reservationAffinity")
    private @Nullable Output<ReservationAffinityArgs> reservationAffinity;

    public Optional<Output<ReservationAffinityArgs>> reservationAffinity() {
        return Optional.ofNullable(this.reservationAffinity);
    }

    /**
     * The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
     * 
     */
    @Import(name="serviceAccountScopes")
    private @Nullable Output<List<String>> serviceAccountScopes;

    public Optional<Output<List<String>>> serviceAccountScopes() {
        return Optional.ofNullable(this.serviceAccountScopes);
    }

    /**
     * Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
     * 
     */
    @Import(name="shieldedInstanceConfig")
    private @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Optional<Output<ShieldedInstanceConfigArgs>> shieldedInstanceConfig() {
        return Optional.ofNullable(this.shieldedInstanceConfig);
    }

    /**
     * The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The upgrade history of this instance.
     * 
     */
    @Import(name="upgradeHistory")
    private @Nullable Output<List<UpgradeHistoryEntryArgs>> upgradeHistory;

    public Optional<Output<List<UpgradeHistoryEntryArgs>>> upgradeHistory() {
        return Optional.ofNullable(this.upgradeHistory);
    }

    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * 
     */
    @Import(name="vmImage")
    private @Nullable Output<VmImageArgs> vmImage;

    public Optional<Output<VmImageArgs>> vmImage() {
        return Optional.ofNullable(this.vmImage);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.acceleratorConfig = $.acceleratorConfig;
        this.bootDiskSizeGb = $.bootDiskSizeGb;
        this.bootDiskType = $.bootDiskType;
        this.containerImage = $.containerImage;
        this.customGpuDriverPath = $.customGpuDriverPath;
        this.dataDiskSizeGb = $.dataDiskSizeGb;
        this.dataDiskType = $.dataDiskType;
        this.diskEncryption = $.diskEncryption;
        this.installGpuDriver = $.installGpuDriver;
        this.instanceId = $.instanceId;
        this.instanceOwners = $.instanceOwners;
        this.kmsKey = $.kmsKey;
        this.labels = $.labels;
        this.location = $.location;
        this.machineType = $.machineType;
        this.metadata = $.metadata;
        this.network = $.network;
        this.nicType = $.nicType;
        this.noProxyAccess = $.noProxyAccess;
        this.noPublicIp = $.noPublicIp;
        this.noRemoveDataDisk = $.noRemoveDataDisk;
        this.postStartupScript = $.postStartupScript;
        this.project = $.project;
        this.reservationAffinity = $.reservationAffinity;
        this.serviceAccount = $.serviceAccount;
        this.serviceAccountScopes = $.serviceAccountScopes;
        this.shieldedInstanceConfig = $.shieldedInstanceConfig;
        this.subnet = $.subnet;
        this.tags = $.tags;
        this.upgradeHistory = $.upgradeHistory;
        this.vmImage = $.vmImage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder acceleratorConfig(@Nullable Output<AcceleratorConfigArgs> acceleratorConfig) {
            $.acceleratorConfig = acceleratorConfig;
            return this;
        }

        public Builder acceleratorConfig(AcceleratorConfigArgs acceleratorConfig) {
            return acceleratorConfig(Output.of(acceleratorConfig));
        }

        public Builder bootDiskSizeGb(@Nullable Output<String> bootDiskSizeGb) {
            $.bootDiskSizeGb = bootDiskSizeGb;
            return this;
        }

        public Builder bootDiskSizeGb(String bootDiskSizeGb) {
            return bootDiskSizeGb(Output.of(bootDiskSizeGb));
        }

        public Builder bootDiskType(@Nullable Output<InstanceBootDiskType> bootDiskType) {
            $.bootDiskType = bootDiskType;
            return this;
        }

        public Builder bootDiskType(InstanceBootDiskType bootDiskType) {
            return bootDiskType(Output.of(bootDiskType));
        }

        public Builder containerImage(@Nullable Output<ContainerImageArgs> containerImage) {
            $.containerImage = containerImage;
            return this;
        }

        public Builder containerImage(ContainerImageArgs containerImage) {
            return containerImage(Output.of(containerImage));
        }

        public Builder customGpuDriverPath(@Nullable Output<String> customGpuDriverPath) {
            $.customGpuDriverPath = customGpuDriverPath;
            return this;
        }

        public Builder customGpuDriverPath(String customGpuDriverPath) {
            return customGpuDriverPath(Output.of(customGpuDriverPath));
        }

        public Builder dataDiskSizeGb(@Nullable Output<String> dataDiskSizeGb) {
            $.dataDiskSizeGb = dataDiskSizeGb;
            return this;
        }

        public Builder dataDiskSizeGb(String dataDiskSizeGb) {
            return dataDiskSizeGb(Output.of(dataDiskSizeGb));
        }

        public Builder dataDiskType(@Nullable Output<InstanceDataDiskType> dataDiskType) {
            $.dataDiskType = dataDiskType;
            return this;
        }

        public Builder dataDiskType(InstanceDataDiskType dataDiskType) {
            return dataDiskType(Output.of(dataDiskType));
        }

        public Builder diskEncryption(@Nullable Output<InstanceDiskEncryption> diskEncryption) {
            $.diskEncryption = diskEncryption;
            return this;
        }

        public Builder diskEncryption(InstanceDiskEncryption diskEncryption) {
            return diskEncryption(Output.of(diskEncryption));
        }

        public Builder installGpuDriver(@Nullable Output<Boolean> installGpuDriver) {
            $.installGpuDriver = installGpuDriver;
            return this;
        }

        public Builder installGpuDriver(Boolean installGpuDriver) {
            return installGpuDriver(Output.of(installGpuDriver));
        }

        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public Builder instanceOwners(@Nullable Output<List<String>> instanceOwners) {
            $.instanceOwners = instanceOwners;
            return this;
        }

        public Builder instanceOwners(List<String> instanceOwners) {
            return instanceOwners(Output.of(instanceOwners));
        }

        public Builder instanceOwners(String... instanceOwners) {
            return instanceOwners(List.of(instanceOwners));
        }

        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder machineType(Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        public Builder network(String network) {
            return network(Output.of(network));
        }

        public Builder nicType(@Nullable Output<InstanceNicType> nicType) {
            $.nicType = nicType;
            return this;
        }

        public Builder nicType(InstanceNicType nicType) {
            return nicType(Output.of(nicType));
        }

        public Builder noProxyAccess(@Nullable Output<Boolean> noProxyAccess) {
            $.noProxyAccess = noProxyAccess;
            return this;
        }

        public Builder noProxyAccess(Boolean noProxyAccess) {
            return noProxyAccess(Output.of(noProxyAccess));
        }

        public Builder noPublicIp(@Nullable Output<Boolean> noPublicIp) {
            $.noPublicIp = noPublicIp;
            return this;
        }

        public Builder noPublicIp(Boolean noPublicIp) {
            return noPublicIp(Output.of(noPublicIp));
        }

        public Builder noRemoveDataDisk(@Nullable Output<Boolean> noRemoveDataDisk) {
            $.noRemoveDataDisk = noRemoveDataDisk;
            return this;
        }

        public Builder noRemoveDataDisk(Boolean noRemoveDataDisk) {
            return noRemoveDataDisk(Output.of(noRemoveDataDisk));
        }

        public Builder postStartupScript(@Nullable Output<String> postStartupScript) {
            $.postStartupScript = postStartupScript;
            return this;
        }

        public Builder postStartupScript(String postStartupScript) {
            return postStartupScript(Output.of(postStartupScript));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder reservationAffinity(@Nullable Output<ReservationAffinityArgs> reservationAffinity) {
            $.reservationAffinity = reservationAffinity;
            return this;
        }

        public Builder reservationAffinity(ReservationAffinityArgs reservationAffinity) {
            return reservationAffinity(Output.of(reservationAffinity));
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public Builder serviceAccountScopes(@Nullable Output<List<String>> serviceAccountScopes) {
            $.serviceAccountScopes = serviceAccountScopes;
            return this;
        }

        public Builder serviceAccountScopes(List<String> serviceAccountScopes) {
            return serviceAccountScopes(Output.of(serviceAccountScopes));
        }

        public Builder serviceAccountScopes(String... serviceAccountScopes) {
            return serviceAccountScopes(List.of(serviceAccountScopes));
        }

        public Builder shieldedInstanceConfig(@Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            $.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder shieldedInstanceConfig(ShieldedInstanceConfigArgs shieldedInstanceConfig) {
            return shieldedInstanceConfig(Output.of(shieldedInstanceConfig));
        }

        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder upgradeHistory(@Nullable Output<List<UpgradeHistoryEntryArgs>> upgradeHistory) {
            $.upgradeHistory = upgradeHistory;
            return this;
        }

        public Builder upgradeHistory(List<UpgradeHistoryEntryArgs> upgradeHistory) {
            return upgradeHistory(Output.of(upgradeHistory));
        }

        public Builder upgradeHistory(UpgradeHistoryEntryArgs... upgradeHistory) {
            return upgradeHistory(List.of(upgradeHistory));
        }

        public Builder vmImage(@Nullable Output<VmImageArgs> vmImage) {
            $.vmImage = vmImage;
            return this;
        }

        public Builder vmImage(VmImageArgs vmImage) {
            return vmImage(Output.of(vmImage));
        }

        public InstanceArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.machineType = Objects.requireNonNull($.machineType, "expected parameter 'machineType' to be non-null");
            return $;
        }
    }

}
