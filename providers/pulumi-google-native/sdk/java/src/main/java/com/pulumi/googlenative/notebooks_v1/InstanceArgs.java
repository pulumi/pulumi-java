// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceBootDiskType;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceDataDiskType;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceDiskEncryption;
import com.pulumi.googlenative.notebooks_v1.enums.InstanceNicType;
import com.pulumi.googlenative.notebooks_v1.inputs.AcceleratorConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.ContainerImageArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.ReservationAffinityArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.ShieldedInstanceConfigArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.UpgradeHistoryEntryArgs;
import com.pulumi.googlenative.notebooks_v1.inputs.VmImageArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The hardware accelerator used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).
     * 
     */
    @Import(name="acceleratorConfig")
      private final @Nullable Output<AcceleratorConfigArgs> acceleratorConfig;

    public Output<AcceleratorConfigArgs> acceleratorConfig() {
        return this.acceleratorConfig == null ? Codegen.empty() : this.acceleratorConfig;
    }

    /**
     * Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
     * 
     */
    @Import(name="bootDiskSizeGb")
      private final @Nullable Output<String> bootDiskSizeGb;

    public Output<String> bootDiskSizeGb() {
        return this.bootDiskSizeGb == null ? Codegen.empty() : this.bootDiskSizeGb;
    }

    /**
     * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
     */
    @Import(name="bootDiskType")
      private final @Nullable Output<InstanceBootDiskType> bootDiskType;

    public Output<InstanceBootDiskType> bootDiskType() {
        return this.bootDiskType == null ? Codegen.empty() : this.bootDiskType;
    }

    /**
     * Use a container image to start the notebook instance.
     * 
     */
    @Import(name="containerImage")
      private final @Nullable Output<ContainerImageArgs> containerImage;

    public Output<ContainerImageArgs> containerImage() {
        return this.containerImage == null ? Codegen.empty() : this.containerImage;
    }

    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we&#39;ll automatically choose from official GPU drivers.
     * 
     */
    @Import(name="customGpuDriverPath")
      private final @Nullable Output<String> customGpuDriverPath;

    public Output<String> customGpuDriverPath() {
        return this.customGpuDriverPath == null ? Codegen.empty() : this.customGpuDriverPath;
    }

    /**
     * Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
     * 
     */
    @Import(name="dataDiskSizeGb")
      private final @Nullable Output<String> dataDiskSizeGb;

    public Output<String> dataDiskSizeGb() {
        return this.dataDiskSizeGb == null ? Codegen.empty() : this.dataDiskSizeGb;
    }

    /**
     * Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     * 
     */
    @Import(name="dataDiskType")
      private final @Nullable Output<InstanceDataDiskType> dataDiskType;

    public Output<InstanceDataDiskType> dataDiskType() {
        return this.dataDiskType == null ? Codegen.empty() : this.dataDiskType;
    }

    /**
     * Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
     * 
     */
    @Import(name="diskEncryption")
      private final @Nullable Output<InstanceDiskEncryption> diskEncryption;

    public Output<InstanceDiskEncryption> diskEncryption() {
        return this.diskEncryption == null ? Codegen.empty() : this.diskEncryption;
    }

    /**
     * Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won&#39;t be installed. Only applicable to instances with GPUs.
     * 
     */
    @Import(name="installGpuDriver")
      private final @Nullable Output<Boolean> installGpuDriver;

    public Output<Boolean> installGpuDriver() {
        return this.installGpuDriver == null ? Codegen.empty() : this.installGpuDriver;
    }

    @Import(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance&#39;s service account can use the instance.
     * 
     */
    @Import(name="instanceOwners")
      private final @Nullable Output<List<String>> instanceOwners;

    public Output<List<String>> instanceOwners() {
        return this.instanceOwners == null ? Codegen.empty() : this.instanceOwners;
    }

    /**
     * Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
     * 
     */
    @Import(name="kmsKey")
      private final @Nullable Output<String> kmsKey;

    public Output<String> kmsKey() {
        return this.kmsKey == null ? Codegen.empty() : this.kmsKey;
    }

    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The [Compute Engine machine type](/compute/docs/machine-types) of this instance.
     * 
     */
    @Import(name="machineType", required=true)
      private final Output<String> machineType;

    public Output<String> machineType() {
        return this.machineType;
    }

    /**
     * Custom metadata to apply to this instance.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> network() {
        return this.network == null ? Codegen.empty() : this.network;
    }

    /**
     * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     * 
     */
    @Import(name="nicType")
      private final @Nullable Output<InstanceNicType> nicType;

    public Output<InstanceNicType> nicType() {
        return this.nicType == null ? Codegen.empty() : this.nicType;
    }

    /**
     * If true, the notebook instance will not register with the proxy.
     * 
     */
    @Import(name="noProxyAccess")
      private final @Nullable Output<Boolean> noProxyAccess;

    public Output<Boolean> noProxyAccess() {
        return this.noProxyAccess == null ? Codegen.empty() : this.noProxyAccess;
    }

    /**
     * If true, no public IP will be assigned to this instance.
     * 
     */
    @Import(name="noPublicIp")
      private final @Nullable Output<Boolean> noPublicIp;

    public Output<Boolean> noPublicIp() {
        return this.noPublicIp == null ? Codegen.empty() : this.noPublicIp;
    }

    /**
     * Input only. If true, the data disk will not be auto deleted when deleting the instance.
     * 
     */
    @Import(name="noRemoveDataDisk")
      private final @Nullable Output<Boolean> noRemoveDataDisk;

    public Output<Boolean> noRemoveDataDisk() {
        return this.noRemoveDataDisk == null ? Codegen.empty() : this.noRemoveDataDisk;
    }

    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
     */
    @Import(name="postStartupScript")
      private final @Nullable Output<String> postStartupScript;

    public Output<String> postStartupScript() {
        return this.postStartupScript == null ? Codegen.empty() : this.postStartupScript;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Optional. The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this notebook instance.
     * 
     */
    @Import(name="reservationAffinity")
      private final @Nullable Output<ReservationAffinityArgs> reservationAffinity;

    public Output<ReservationAffinityArgs> reservationAffinity() {
        return this.reservationAffinity == null ? Codegen.empty() : this.reservationAffinity;
    }

    /**
     * The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     * 
     */
    @Import(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> serviceAccount() {
        return this.serviceAccount == null ? Codegen.empty() : this.serviceAccount;
    }

    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
     * 
     */
    @Import(name="serviceAccountScopes")
      private final @Nullable Output<List<String>> serviceAccountScopes;

    public Output<List<String>> serviceAccountScopes() {
        return this.serviceAccountScopes == null ? Codegen.empty() : this.serviceAccountScopes;
    }

    /**
     * Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
     * 
     */
    @Import(name="shieldedInstanceConfig")
      private final @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Codegen.empty() : this.shieldedInstanceConfig;
    }

    /**
     * The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
     * 
     */
    @Import(name="subnet")
      private final @Nullable Output<String> subnet;

    public Output<String> subnet() {
        return this.subnet == null ? Codegen.empty() : this.subnet;
    }

    /**
     * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The upgrade history of this instance.
     * 
     */
    @Import(name="upgradeHistory")
      private final @Nullable Output<List<UpgradeHistoryEntryArgs>> upgradeHistory;

    public Output<List<UpgradeHistoryEntryArgs>> upgradeHistory() {
        return this.upgradeHistory == null ? Codegen.empty() : this.upgradeHistory;
    }

    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * 
     */
    @Import(name="vmImage")
      private final @Nullable Output<VmImageArgs> vmImage;

    public Output<VmImageArgs> vmImage() {
        return this.vmImage == null ? Codegen.empty() : this.vmImage;
    }

    public InstanceArgs(
        @Nullable Output<AcceleratorConfigArgs> acceleratorConfig,
        @Nullable Output<String> bootDiskSizeGb,
        @Nullable Output<InstanceBootDiskType> bootDiskType,
        @Nullable Output<ContainerImageArgs> containerImage,
        @Nullable Output<String> customGpuDriverPath,
        @Nullable Output<String> dataDiskSizeGb,
        @Nullable Output<InstanceDataDiskType> dataDiskType,
        @Nullable Output<InstanceDiskEncryption> diskEncryption,
        @Nullable Output<Boolean> installGpuDriver,
        Output<String> instanceId,
        @Nullable Output<List<String>> instanceOwners,
        @Nullable Output<String> kmsKey,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        Output<String> machineType,
        @Nullable Output<Map<String,String>> metadata,
        @Nullable Output<String> network,
        @Nullable Output<InstanceNicType> nicType,
        @Nullable Output<Boolean> noProxyAccess,
        @Nullable Output<Boolean> noPublicIp,
        @Nullable Output<Boolean> noRemoveDataDisk,
        @Nullable Output<String> postStartupScript,
        @Nullable Output<String> project,
        @Nullable Output<ReservationAffinityArgs> reservationAffinity,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<List<String>> serviceAccountScopes,
        @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig,
        @Nullable Output<String> subnet,
        @Nullable Output<List<String>> tags,
        @Nullable Output<List<UpgradeHistoryEntryArgs>> upgradeHistory,
        @Nullable Output<VmImageArgs> vmImage) {
        this.acceleratorConfig = acceleratorConfig;
        this.bootDiskSizeGb = bootDiskSizeGb;
        this.bootDiskType = bootDiskType;
        this.containerImage = containerImage;
        this.customGpuDriverPath = customGpuDriverPath;
        this.dataDiskSizeGb = dataDiskSizeGb;
        this.dataDiskType = dataDiskType;
        this.diskEncryption = diskEncryption;
        this.installGpuDriver = installGpuDriver;
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.instanceOwners = instanceOwners;
        this.kmsKey = kmsKey;
        this.labels = labels;
        this.location = location;
        this.machineType = Objects.requireNonNull(machineType, "expected parameter 'machineType' to be non-null");
        this.metadata = metadata;
        this.network = network;
        this.nicType = nicType;
        this.noProxyAccess = noProxyAccess;
        this.noPublicIp = noPublicIp;
        this.noRemoveDataDisk = noRemoveDataDisk;
        this.postStartupScript = postStartupScript;
        this.project = project;
        this.reservationAffinity = reservationAffinity;
        this.serviceAccount = serviceAccount;
        this.serviceAccountScopes = serviceAccountScopes;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.subnet = subnet;
        this.tags = tags;
        this.upgradeHistory = upgradeHistory;
        this.vmImage = vmImage;
    }

    private InstanceArgs() {
        this.acceleratorConfig = Codegen.empty();
        this.bootDiskSizeGb = Codegen.empty();
        this.bootDiskType = Codegen.empty();
        this.containerImage = Codegen.empty();
        this.customGpuDriverPath = Codegen.empty();
        this.dataDiskSizeGb = Codegen.empty();
        this.dataDiskType = Codegen.empty();
        this.diskEncryption = Codegen.empty();
        this.installGpuDriver = Codegen.empty();
        this.instanceId = Codegen.empty();
        this.instanceOwners = Codegen.empty();
        this.kmsKey = Codegen.empty();
        this.labels = Codegen.empty();
        this.location = Codegen.empty();
        this.machineType = Codegen.empty();
        this.metadata = Codegen.empty();
        this.network = Codegen.empty();
        this.nicType = Codegen.empty();
        this.noProxyAccess = Codegen.empty();
        this.noPublicIp = Codegen.empty();
        this.noRemoveDataDisk = Codegen.empty();
        this.postStartupScript = Codegen.empty();
        this.project = Codegen.empty();
        this.reservationAffinity = Codegen.empty();
        this.serviceAccount = Codegen.empty();
        this.serviceAccountScopes = Codegen.empty();
        this.shieldedInstanceConfig = Codegen.empty();
        this.subnet = Codegen.empty();
        this.tags = Codegen.empty();
        this.upgradeHistory = Codegen.empty();
        this.vmImage = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AcceleratorConfigArgs> acceleratorConfig;
        private @Nullable Output<String> bootDiskSizeGb;
        private @Nullable Output<InstanceBootDiskType> bootDiskType;
        private @Nullable Output<ContainerImageArgs> containerImage;
        private @Nullable Output<String> customGpuDriverPath;
        private @Nullable Output<String> dataDiskSizeGb;
        private @Nullable Output<InstanceDataDiskType> dataDiskType;
        private @Nullable Output<InstanceDiskEncryption> diskEncryption;
        private @Nullable Output<Boolean> installGpuDriver;
        private Output<String> instanceId;
        private @Nullable Output<List<String>> instanceOwners;
        private @Nullable Output<String> kmsKey;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private Output<String> machineType;
        private @Nullable Output<Map<String,String>> metadata;
        private @Nullable Output<String> network;
        private @Nullable Output<InstanceNicType> nicType;
        private @Nullable Output<Boolean> noProxyAccess;
        private @Nullable Output<Boolean> noPublicIp;
        private @Nullable Output<Boolean> noRemoveDataDisk;
        private @Nullable Output<String> postStartupScript;
        private @Nullable Output<String> project;
        private @Nullable Output<ReservationAffinityArgs> reservationAffinity;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<List<String>> serviceAccountScopes;
        private @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig;
        private @Nullable Output<String> subnet;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<List<UpgradeHistoryEntryArgs>> upgradeHistory;
        private @Nullable Output<VmImageArgs> vmImage;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.bootDiskType = defaults.bootDiskType;
    	      this.containerImage = defaults.containerImage;
    	      this.customGpuDriverPath = defaults.customGpuDriverPath;
    	      this.dataDiskSizeGb = defaults.dataDiskSizeGb;
    	      this.dataDiskType = defaults.dataDiskType;
    	      this.diskEncryption = defaults.diskEncryption;
    	      this.installGpuDriver = defaults.installGpuDriver;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceOwners = defaults.instanceOwners;
    	      this.kmsKey = defaults.kmsKey;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.nicType = defaults.nicType;
    	      this.noProxyAccess = defaults.noProxyAccess;
    	      this.noPublicIp = defaults.noPublicIp;
    	      this.noRemoveDataDisk = defaults.noRemoveDataDisk;
    	      this.postStartupScript = defaults.postStartupScript;
    	      this.project = defaults.project;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountScopes = defaults.serviceAccountScopes;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
    	      this.upgradeHistory = defaults.upgradeHistory;
    	      this.vmImage = defaults.vmImage;
        }

        public Builder acceleratorConfig(@Nullable Output<AcceleratorConfigArgs> acceleratorConfig) {
            this.acceleratorConfig = acceleratorConfig;
            return this;
        }
        public Builder acceleratorConfig(@Nullable AcceleratorConfigArgs acceleratorConfig) {
            this.acceleratorConfig = Codegen.ofNullable(acceleratorConfig);
            return this;
        }
        public Builder bootDiskSizeGb(@Nullable Output<String> bootDiskSizeGb) {
            this.bootDiskSizeGb = bootDiskSizeGb;
            return this;
        }
        public Builder bootDiskSizeGb(@Nullable String bootDiskSizeGb) {
            this.bootDiskSizeGb = Codegen.ofNullable(bootDiskSizeGb);
            return this;
        }
        public Builder bootDiskType(@Nullable Output<InstanceBootDiskType> bootDiskType) {
            this.bootDiskType = bootDiskType;
            return this;
        }
        public Builder bootDiskType(@Nullable InstanceBootDiskType bootDiskType) {
            this.bootDiskType = Codegen.ofNullable(bootDiskType);
            return this;
        }
        public Builder containerImage(@Nullable Output<ContainerImageArgs> containerImage) {
            this.containerImage = containerImage;
            return this;
        }
        public Builder containerImage(@Nullable ContainerImageArgs containerImage) {
            this.containerImage = Codegen.ofNullable(containerImage);
            return this;
        }
        public Builder customGpuDriverPath(@Nullable Output<String> customGpuDriverPath) {
            this.customGpuDriverPath = customGpuDriverPath;
            return this;
        }
        public Builder customGpuDriverPath(@Nullable String customGpuDriverPath) {
            this.customGpuDriverPath = Codegen.ofNullable(customGpuDriverPath);
            return this;
        }
        public Builder dataDiskSizeGb(@Nullable Output<String> dataDiskSizeGb) {
            this.dataDiskSizeGb = dataDiskSizeGb;
            return this;
        }
        public Builder dataDiskSizeGb(@Nullable String dataDiskSizeGb) {
            this.dataDiskSizeGb = Codegen.ofNullable(dataDiskSizeGb);
            return this;
        }
        public Builder dataDiskType(@Nullable Output<InstanceDataDiskType> dataDiskType) {
            this.dataDiskType = dataDiskType;
            return this;
        }
        public Builder dataDiskType(@Nullable InstanceDataDiskType dataDiskType) {
            this.dataDiskType = Codegen.ofNullable(dataDiskType);
            return this;
        }
        public Builder diskEncryption(@Nullable Output<InstanceDiskEncryption> diskEncryption) {
            this.diskEncryption = diskEncryption;
            return this;
        }
        public Builder diskEncryption(@Nullable InstanceDiskEncryption diskEncryption) {
            this.diskEncryption = Codegen.ofNullable(diskEncryption);
            return this;
        }
        public Builder installGpuDriver(@Nullable Output<Boolean> installGpuDriver) {
            this.installGpuDriver = installGpuDriver;
            return this;
        }
        public Builder installGpuDriver(@Nullable Boolean installGpuDriver) {
            this.installGpuDriver = Codegen.ofNullable(installGpuDriver);
            return this;
        }
        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }
        public Builder instanceOwners(@Nullable Output<List<String>> instanceOwners) {
            this.instanceOwners = instanceOwners;
            return this;
        }
        public Builder instanceOwners(@Nullable List<String> instanceOwners) {
            this.instanceOwners = Codegen.ofNullable(instanceOwners);
            return this;
        }
        public Builder instanceOwners(String... instanceOwners) {
            return instanceOwners(List.of(instanceOwners));
        }
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            this.kmsKey = kmsKey;
            return this;
        }
        public Builder kmsKey(@Nullable String kmsKey) {
            this.kmsKey = Codegen.ofNullable(kmsKey);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder machineType(Output<String> machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }
        public Builder machineType(String machineType) {
            this.machineType = Output.of(Objects.requireNonNull(machineType));
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Codegen.ofNullable(network);
            return this;
        }
        public Builder nicType(@Nullable Output<InstanceNicType> nicType) {
            this.nicType = nicType;
            return this;
        }
        public Builder nicType(@Nullable InstanceNicType nicType) {
            this.nicType = Codegen.ofNullable(nicType);
            return this;
        }
        public Builder noProxyAccess(@Nullable Output<Boolean> noProxyAccess) {
            this.noProxyAccess = noProxyAccess;
            return this;
        }
        public Builder noProxyAccess(@Nullable Boolean noProxyAccess) {
            this.noProxyAccess = Codegen.ofNullable(noProxyAccess);
            return this;
        }
        public Builder noPublicIp(@Nullable Output<Boolean> noPublicIp) {
            this.noPublicIp = noPublicIp;
            return this;
        }
        public Builder noPublicIp(@Nullable Boolean noPublicIp) {
            this.noPublicIp = Codegen.ofNullable(noPublicIp);
            return this;
        }
        public Builder noRemoveDataDisk(@Nullable Output<Boolean> noRemoveDataDisk) {
            this.noRemoveDataDisk = noRemoveDataDisk;
            return this;
        }
        public Builder noRemoveDataDisk(@Nullable Boolean noRemoveDataDisk) {
            this.noRemoveDataDisk = Codegen.ofNullable(noRemoveDataDisk);
            return this;
        }
        public Builder postStartupScript(@Nullable Output<String> postStartupScript) {
            this.postStartupScript = postStartupScript;
            return this;
        }
        public Builder postStartupScript(@Nullable String postStartupScript) {
            this.postStartupScript = Codegen.ofNullable(postStartupScript);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder reservationAffinity(@Nullable Output<ReservationAffinityArgs> reservationAffinity) {
            this.reservationAffinity = reservationAffinity;
            return this;
        }
        public Builder reservationAffinity(@Nullable ReservationAffinityArgs reservationAffinity) {
            this.reservationAffinity = Codegen.ofNullable(reservationAffinity);
            return this;
        }
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }
        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Codegen.ofNullable(serviceAccount);
            return this;
        }
        public Builder serviceAccountScopes(@Nullable Output<List<String>> serviceAccountScopes) {
            this.serviceAccountScopes = serviceAccountScopes;
            return this;
        }
        public Builder serviceAccountScopes(@Nullable List<String> serviceAccountScopes) {
            this.serviceAccountScopes = Codegen.ofNullable(serviceAccountScopes);
            return this;
        }
        public Builder serviceAccountScopes(String... serviceAccountScopes) {
            return serviceAccountScopes(List.of(serviceAccountScopes));
        }
        public Builder shieldedInstanceConfig(@Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }
        public Builder shieldedInstanceConfig(@Nullable ShieldedInstanceConfigArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Codegen.ofNullable(shieldedInstanceConfig);
            return this;
        }
        public Builder subnet(@Nullable Output<String> subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder subnet(@Nullable String subnet) {
            this.subnet = Codegen.ofNullable(subnet);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder upgradeHistory(@Nullable Output<List<UpgradeHistoryEntryArgs>> upgradeHistory) {
            this.upgradeHistory = upgradeHistory;
            return this;
        }
        public Builder upgradeHistory(@Nullable List<UpgradeHistoryEntryArgs> upgradeHistory) {
            this.upgradeHistory = Codegen.ofNullable(upgradeHistory);
            return this;
        }
        public Builder upgradeHistory(UpgradeHistoryEntryArgs... upgradeHistory) {
            return upgradeHistory(List.of(upgradeHistory));
        }
        public Builder vmImage(@Nullable Output<VmImageArgs> vmImage) {
            this.vmImage = vmImage;
            return this;
        }
        public Builder vmImage(@Nullable VmImageArgs vmImage) {
            this.vmImage = Codegen.ofNullable(vmImage);
            return this;
        }        public InstanceArgs build() {
            return new InstanceArgs(acceleratorConfig, bootDiskSizeGb, bootDiskType, containerImage, customGpuDriverPath, dataDiskSizeGb, dataDiskType, diskEncryption, installGpuDriver, instanceId, instanceOwners, kmsKey, labels, location, machineType, metadata, network, nicType, noProxyAccess, noPublicIp, noRemoveDataDisk, postStartupScript, project, reservationAffinity, serviceAccount, serviceAccountScopes, shieldedInstanceConfig, subnet, tags, upgradeHistory, vmImage);
        }
    }
}
