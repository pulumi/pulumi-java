// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.gameservices_v1beta.inputs.CustomFieldResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Increment a streamz counter with the specified metric and field names. Metric names should start with a &#39;/&#39;, generally be lowercase-only, and end in &#34;_count&#34;. Field names should not contain an initial slash. The actual exported metric names will have &#34;/iam/policy&#34; prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - &#34;authority&#34;, which is &#34;[token]&#34; if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - &#34;iam_principal&#34;, a representation of IAMContext.principal even if a token or authority selector is present; or - &#34;&#34; (empty string), resulting in a counter with no fields. Examples: counter { metric: &#34;/debug_access_count&#34; field: &#34;iam_principal&#34; } ==&gt; increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
 * 
 */
public final class CounterOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CounterOptionsResponse Empty = new CounterOptionsResponse();

    /**
     * Custom fields.
     * 
     */
    @Import(name="customFields", required=true)
      private final List<CustomFieldResponse> customFields;

    public List<CustomFieldResponse> customFields() {
        return this.customFields;
    }

    /**
     * The field value to attribute.
     * 
     */
    @Import(name="field", required=true)
      private final String field;

    public String field() {
        return this.field;
    }

    /**
     * The metric to update.
     * 
     */
    @Import(name="metric", required=true)
      private final String metric;

    public String metric() {
        return this.metric;
    }

    public CounterOptionsResponse(
        List<CustomFieldResponse> customFields,
        String field,
        String metric) {
        this.customFields = Objects.requireNonNull(customFields, "expected parameter 'customFields' to be non-null");
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.metric = Objects.requireNonNull(metric, "expected parameter 'metric' to be non-null");
    }

    private CounterOptionsResponse() {
        this.customFields = List.of();
        this.field = null;
        this.metric = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CounterOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<CustomFieldResponse> customFields;
        private String field;
        private String metric;

        public Builder() {
    	      // Empty
        }

        public Builder(CounterOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customFields = defaults.customFields;
    	      this.field = defaults.field;
    	      this.metric = defaults.metric;
        }

        public Builder customFields(List<CustomFieldResponse> customFields) {
            this.customFields = Objects.requireNonNull(customFields);
            return this;
        }
        public Builder customFields(CustomFieldResponse... customFields) {
            return customFields(List.of(customFields));
        }
        public Builder field(String field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        public Builder metric(String metric) {
            this.metric = Objects.requireNonNull(metric);
            return this;
        }        public CounterOptionsResponse build() {
            return new CounterOptionsResponse(customFields, field, metric);
        }
    }
}
