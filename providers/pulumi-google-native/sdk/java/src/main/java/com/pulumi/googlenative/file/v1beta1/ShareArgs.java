// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.file.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.file.v1beta1.inputs.NfsExportOptionsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShareArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShareArgs Empty = new ShareArgs();

    /**
     * File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
     * 
     */
    @Import(name="capacityGb")
    private @Nullable Output<String> capacityGb;

    /**
     * @return File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
     * 
     */
    public Optional<Output<String>> capacityGb() {
        return Optional.ofNullable(this.capacityGb);
    }

    /**
     * A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
     * 
     */
    @Import(name="mountName")
    private @Nullable Output<String> mountName;

    /**
     * @return The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
     * 
     */
    public Optional<Output<String>> mountName() {
        return Optional.ofNullable(this.mountName);
    }

    /**
     * Nfs Export Options. There is a limit of 10 export options per file share.
     * 
     */
    @Import(name="nfsExportOptions")
    private @Nullable Output<List<NfsExportOptionsArgs>> nfsExportOptions;

    /**
     * @return Nfs Export Options. There is a limit of 10 export options per file share.
     * 
     */
    public Optional<Output<List<NfsExportOptionsArgs>>> nfsExportOptions() {
        return Optional.ofNullable(this.nfsExportOptions);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * 
     */
    @Import(name="shareId", required=true)
    private Output<String> shareId;

    /**
     * @return Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * 
     */
    public Output<String> shareId() {
        return this.shareId;
    }

    private ShareArgs() {}

    private ShareArgs(ShareArgs $) {
        this.capacityGb = $.capacityGb;
        this.description = $.description;
        this.instanceId = $.instanceId;
        this.labels = $.labels;
        this.location = $.location;
        this.mountName = $.mountName;
        this.nfsExportOptions = $.nfsExportOptions;
        this.project = $.project;
        this.shareId = $.shareId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareArgs $;

        public Builder() {
            $ = new ShareArgs();
        }

        public Builder(ShareArgs defaults) {
            $ = new ShareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityGb File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder capacityGb(@Nullable Output<String> capacityGb) {
            $.capacityGb = capacityGb;
            return this;
        }

        /**
         * @param capacityGb File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder capacityGb(String capacityGb) {
            return capacityGb(Output.of(capacityGb));
        }

        /**
         * @param description A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mountName The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
         * 
         * @return builder
         * 
         */
        public Builder mountName(@Nullable Output<String> mountName) {
            $.mountName = mountName;
            return this;
        }

        /**
         * @param mountName The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
         * 
         * @return builder
         * 
         */
        public Builder mountName(String mountName) {
            return mountName(Output.of(mountName));
        }

        /**
         * @param nfsExportOptions Nfs Export Options. There is a limit of 10 export options per file share.
         * 
         * @return builder
         * 
         */
        public Builder nfsExportOptions(@Nullable Output<List<NfsExportOptionsArgs>> nfsExportOptions) {
            $.nfsExportOptions = nfsExportOptions;
            return this;
        }

        /**
         * @param nfsExportOptions Nfs Export Options. There is a limit of 10 export options per file share.
         * 
         * @return builder
         * 
         */
        public Builder nfsExportOptions(List<NfsExportOptionsArgs> nfsExportOptions) {
            return nfsExportOptions(Output.of(nfsExportOptions));
        }

        /**
         * @param nfsExportOptions Nfs Export Options. There is a limit of 10 export options per file share.
         * 
         * @return builder
         * 
         */
        public Builder nfsExportOptions(NfsExportOptionsArgs... nfsExportOptions) {
            return nfsExportOptions(List.of(nfsExportOptions));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param shareId Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder shareId(Output<String> shareId) {
            $.shareId = shareId;
            return this;
        }

        /**
         * @param shareId Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder shareId(String shareId) {
            return shareId(Output.of(shareId));
        }

        public ShareArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.shareId = Objects.requireNonNull($.shareId, "expected parameter 'shareId' to be non-null");
            return $;
        }
    }

}
