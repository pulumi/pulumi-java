// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.jobs.v4;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TenantArgs extends com.pulumi.resources.ResourceArgs {

    public static final TenantArgs Empty = new TenantArgs();

    /**
     * Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255.
     * 
     */
    @Import(name="externalId", required=true)
    private Output<String> externalId;

    /**
     * @return Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255.
     * 
     */
    public Output<String> externalId() {
        return this.externalId;
    }

    /**
     * Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}&#34;, for example, &#34;projects/foo/tenants/bar&#34;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}&#34;, for example, &#34;projects/foo/tenants/bar&#34;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private TenantArgs() {}

    private TenantArgs(TenantArgs $) {
        this.externalId = $.externalId;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TenantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TenantArgs $;

        public Builder() {
            $ = new TenantArgs();
        }

        public Builder(TenantArgs defaults) {
            $ = new TenantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalId Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255.
         * 
         * @return builder
         * 
         */
        public Builder externalId(Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param name Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}&#34;, for example, &#34;projects/foo/tenants/bar&#34;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is &#34;projects/{project_id}/tenants/{tenant_id}&#34;, for example, &#34;projects/foo/tenants/bar&#34;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public TenantArgs build() {
            $.externalId = Objects.requireNonNull($.externalId, "expected parameter 'externalId' to be non-null");
            return $;
        }
    }

}
