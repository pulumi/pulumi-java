// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.networkservices.v1beta1.outputs.HttpRouteRouteActionResponse;
import com.pulumi.googlenative.networkservices.v1beta1.outputs.HttpRouteRouteMatchResponse;
import java.util.List;
import java.util.Objects;

@CustomType
public final class HttpRouteRouteRuleResponse {
    /**
     * @return The detailed rule defining how to route matched traffic.
     * 
     */
    private final HttpRouteRouteActionResponse action;
    /**
     * @return A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
     * 
     */
    private final List<HttpRouteRouteMatchResponse> matches;

    @CustomType.Constructor
    private HttpRouteRouteRuleResponse(
        @CustomType.Parameter("action") HttpRouteRouteActionResponse action,
        @CustomType.Parameter("matches") List<HttpRouteRouteMatchResponse> matches) {
        this.action = action;
        this.matches = matches;
    }

    /**
     * @return The detailed rule defining how to route matched traffic.
     * 
     */
    public HttpRouteRouteActionResponse action() {
        return this.action;
    }
    /**
     * @return A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
     * 
     */
    public List<HttpRouteRouteMatchResponse> matches() {
        return this.matches;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRouteRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRouteActionResponse action;
        private List<HttpRouteRouteMatchResponse> matches;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRouteRouteRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.matches = defaults.matches;
        }

        public Builder action(HttpRouteRouteActionResponse action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder matches(List<HttpRouteRouteMatchResponse> matches) {
            this.matches = Objects.requireNonNull(matches);
            return this;
        }
        public Builder matches(HttpRouteRouteMatchResponse... matches) {
            return matches(List.of(matches));
        }        public HttpRouteRouteRuleResponse build() {
            return new HttpRouteRouteRuleResponse(action, matches);
        }
    }
}
