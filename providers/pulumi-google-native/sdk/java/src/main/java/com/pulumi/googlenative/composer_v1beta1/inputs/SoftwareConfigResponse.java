// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.composer_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Specifies the selection and configuration of software inside the environment.
 * 
 */
public final class SoftwareConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final SoftwareConfigResponse Empty = new SoftwareConfigResponse();

    /**
     * Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example &#34;core-dags_are_paused_at_creation&#34;. Section names must not contain hyphens (&#34;-&#34;), opening square brackets (&#34;[&#34;), or closing square brackets (&#34;]&#34;). The property name must not be empty and must not contain an equals sign (&#34;=&#34;) or semicolon (&#34;;&#34;). Section and property names must not contain a period (&#34;.&#34;). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
     * 
     */
    @Import(name="airflowConfigOverrides", required=true)
    private Map<String,String> airflowConfigOverrides;

    /**
     * @return Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example &#34;core-dags_are_paused_at_creation&#34;. Section names must not contain hyphens (&#34;-&#34;), opening square brackets (&#34;[&#34;), or closing square brackets (&#34;]&#34;). The property name must not be empty and must not contain an equals sign (&#34;=&#34;) or semicolon (&#34;;&#34;). Section and property names must not contain a period (&#34;.&#34;). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
     * 
     */
    public Map<String,String> airflowConfigOverrides() {
        return this.airflowConfigOverrides;
    }

    /**
     * Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
     * 
     */
    @Import(name="envVariables", required=true)
    private Map<String,String> envVariables;

    /**
     * @return Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
     * 
     */
    public Map<String,String> envVariables() {
        return this.envVariables;
    }

    /**
     * The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
     * 
     */
    @Import(name="imageVersion", required=true)
    private String imageVersion;

    /**
     * @return The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
     * 
     */
    public String imageVersion() {
        return this.imageVersion;
    }

    /**
     * Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as &#34;numpy&#34; and values are the lowercase extras and version specifier such as &#34;==1.12.0&#34;, &#34;[devel,gcp_api]&#34;, or &#34;[devel]&gt;=1.8.2, &lt;1.9.2&#34;. To specify a package without pinning it to a version specifier, use the empty string as the value.
     * 
     */
    @Import(name="pypiPackages", required=true)
    private Map<String,String> pypiPackages;

    /**
     * @return Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as &#34;numpy&#34; and values are the lowercase extras and version specifier such as &#34;==1.12.0&#34;, &#34;[devel,gcp_api]&#34;, or &#34;[devel]&gt;=1.8.2, &lt;1.9.2&#34;. To specify a package without pinning it to a version specifier, use the empty string as the value.
     * 
     */
    public Map<String,String> pypiPackages() {
        return this.pypiPackages;
    }

    /**
     * Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to &#39;2&#39; or &#39;3&#39;. If not specified, the default is &#39;3&#39;. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
     * 
     */
    @Import(name="pythonVersion", required=true)
    private String pythonVersion;

    /**
     * @return Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to &#39;2&#39; or &#39;3&#39;. If not specified, the default is &#39;3&#39;. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
     * 
     */
    public String pythonVersion() {
        return this.pythonVersion;
    }

    /**
     * Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
     * 
     */
    @Import(name="schedulerCount", required=true)
    private Integer schedulerCount;

    /**
     * @return Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
     * 
     */
    public Integer schedulerCount() {
        return this.schedulerCount;
    }

    private SoftwareConfigResponse() {}

    private SoftwareConfigResponse(SoftwareConfigResponse $) {
        this.airflowConfigOverrides = $.airflowConfigOverrides;
        this.envVariables = $.envVariables;
        this.imageVersion = $.imageVersion;
        this.pypiPackages = $.pypiPackages;
        this.pythonVersion = $.pythonVersion;
        this.schedulerCount = $.schedulerCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareConfigResponse $;

        public Builder() {
            $ = new SoftwareConfigResponse();
        }

        public Builder(SoftwareConfigResponse defaults) {
            $ = new SoftwareConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param airflowConfigOverrides Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example &#34;core-dags_are_paused_at_creation&#34;. Section names must not contain hyphens (&#34;-&#34;), opening square brackets (&#34;[&#34;), or closing square brackets (&#34;]&#34;). The property name must not be empty and must not contain an equals sign (&#34;=&#34;) or semicolon (&#34;;&#34;). Section and property names must not contain a period (&#34;.&#34;). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
         * 
         * @return builder
         * 
         */
        public Builder airflowConfigOverrides(Map<String,String> airflowConfigOverrides) {
            $.airflowConfigOverrides = airflowConfigOverrides;
            return this;
        }

        /**
         * @param envVariables Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
         * 
         * @return builder
         * 
         */
        public Builder envVariables(Map<String,String> envVariables) {
            $.envVariables = envVariables;
            return this;
        }

        /**
         * @param imageVersion The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
         * 
         * @return builder
         * 
         */
        public Builder imageVersion(String imageVersion) {
            $.imageVersion = imageVersion;
            return this;
        }

        /**
         * @param pypiPackages Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as &#34;numpy&#34; and values are the lowercase extras and version specifier such as &#34;==1.12.0&#34;, &#34;[devel,gcp_api]&#34;, or &#34;[devel]&gt;=1.8.2, &lt;1.9.2&#34;. To specify a package without pinning it to a version specifier, use the empty string as the value.
         * 
         * @return builder
         * 
         */
        public Builder pypiPackages(Map<String,String> pypiPackages) {
            $.pypiPackages = pypiPackages;
            return this;
        }

        /**
         * @param pythonVersion Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to &#39;2&#39; or &#39;3&#39;. If not specified, the default is &#39;3&#39;. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
         * 
         * @return builder
         * 
         */
        public Builder pythonVersion(String pythonVersion) {
            $.pythonVersion = pythonVersion;
            return this;
        }

        /**
         * @param schedulerCount Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
         * 
         * @return builder
         * 
         */
        public Builder schedulerCount(Integer schedulerCount) {
            $.schedulerCount = schedulerCount;
            return this;
        }

        public SoftwareConfigResponse build() {
            $.airflowConfigOverrides = Objects.requireNonNull($.airflowConfigOverrides, "expected parameter 'airflowConfigOverrides' to be non-null");
            $.envVariables = Objects.requireNonNull($.envVariables, "expected parameter 'envVariables' to be non-null");
            $.imageVersion = Objects.requireNonNull($.imageVersion, "expected parameter 'imageVersion' to be non-null");
            $.pypiPackages = Objects.requireNonNull($.pypiPackages, "expected parameter 'pypiPackages' to be non-null");
            $.pythonVersion = Objects.requireNonNull($.pythonVersion, "expected parameter 'pythonVersion' to be non-null");
            $.schedulerCount = Objects.requireNonNull($.schedulerCount, "expected parameter 'schedulerCount' to be non-null");
            return $;
        }
    }

}
