// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class H265CodecSettingsResponse {
    /**
     * Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
     */
    private final Boolean allowOpenGop;
    /**
     * Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
     */
    private final Double aqStrength;
    /**
     * The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
     */
    private final Integer bFrameCount;
    /**
     * Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
     */
    private final Boolean bPyramid;
    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
     */
    private final Integer bitrateBps;
    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
     */
    private final Integer crfLevel;
    /**
     * Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
     */
    private final Boolean enableTwoPass;
    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    private final Double frameRate;
    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    private final String gopDuration;
    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    private final Integer gopFrameCount;
    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    private final Integer heightPixels;
    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    private final String pixelFormat;
    /**
     * Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    private final String preset;
    /**
     * Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    private final String profile;
    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
     */
    private final String rateControlMode;
    /**
     * Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
     */
    private final String tune;
    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
     */
    private final Integer vbvFullnessBits;
    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
     */
    private final Integer vbvSizeBits;
    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    private final Integer widthPixels;

    @CustomType.Constructor
    private H265CodecSettingsResponse(
        @CustomType.Parameter("allowOpenGop") Boolean allowOpenGop,
        @CustomType.Parameter("aqStrength") Double aqStrength,
        @CustomType.Parameter("bFrameCount") Integer bFrameCount,
        @CustomType.Parameter("bPyramid") Boolean bPyramid,
        @CustomType.Parameter("bitrateBps") Integer bitrateBps,
        @CustomType.Parameter("crfLevel") Integer crfLevel,
        @CustomType.Parameter("enableTwoPass") Boolean enableTwoPass,
        @CustomType.Parameter("frameRate") Double frameRate,
        @CustomType.Parameter("gopDuration") String gopDuration,
        @CustomType.Parameter("gopFrameCount") Integer gopFrameCount,
        @CustomType.Parameter("heightPixels") Integer heightPixels,
        @CustomType.Parameter("pixelFormat") String pixelFormat,
        @CustomType.Parameter("preset") String preset,
        @CustomType.Parameter("profile") String profile,
        @CustomType.Parameter("rateControlMode") String rateControlMode,
        @CustomType.Parameter("tune") String tune,
        @CustomType.Parameter("vbvFullnessBits") Integer vbvFullnessBits,
        @CustomType.Parameter("vbvSizeBits") Integer vbvSizeBits,
        @CustomType.Parameter("widthPixels") Integer widthPixels) {
        this.allowOpenGop = allowOpenGop;
        this.aqStrength = aqStrength;
        this.bFrameCount = bFrameCount;
        this.bPyramid = bPyramid;
        this.bitrateBps = bitrateBps;
        this.crfLevel = crfLevel;
        this.enableTwoPass = enableTwoPass;
        this.frameRate = frameRate;
        this.gopDuration = gopDuration;
        this.gopFrameCount = gopFrameCount;
        this.heightPixels = heightPixels;
        this.pixelFormat = pixelFormat;
        this.preset = preset;
        this.profile = profile;
        this.rateControlMode = rateControlMode;
        this.tune = tune;
        this.vbvFullnessBits = vbvFullnessBits;
        this.vbvSizeBits = vbvSizeBits;
        this.widthPixels = widthPixels;
    }

    /**
     * Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
    */
    public Boolean allowOpenGop() {
        return this.allowOpenGop;
    }
    /**
     * Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
    */
    public Double aqStrength() {
        return this.aqStrength;
    }
    /**
     * The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
    */
    public Integer bFrameCount() {
        return this.bFrameCount;
    }
    /**
     * Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
    */
    public Boolean bPyramid() {
        return this.bPyramid;
    }
    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
    */
    public Integer bitrateBps() {
        return this.bitrateBps;
    }
    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
    */
    public Integer crfLevel() {
        return this.crfLevel;
    }
    /**
     * Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
    */
    public Boolean enableTwoPass() {
        return this.enableTwoPass;
    }
    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
    */
    public Double frameRate() {
        return this.frameRate;
    }
    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
    */
    public String gopDuration() {
        return this.gopDuration;
    }
    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
    */
    public Integer gopFrameCount() {
        return this.gopFrameCount;
    }
    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
    */
    public Integer heightPixels() {
        return this.heightPixels;
    }
    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
    */
    public String pixelFormat() {
        return this.pixelFormat;
    }
    /**
     * Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
    */
    public String preset() {
        return this.preset;
    }
    /**
     * Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
    */
    public String profile() {
        return this.profile;
    }
    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
    */
    public String rateControlMode() {
        return this.rateControlMode;
    }
    /**
     * Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
     * 
    */
    public String tune() {
        return this.tune;
    }
    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
    */
    public Integer vbvFullnessBits() {
        return this.vbvFullnessBits;
    }
    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
    */
    public Integer vbvSizeBits() {
        return this.vbvSizeBits;
    }
    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
    */
    public Integer widthPixels() {
        return this.widthPixels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(H265CodecSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowOpenGop;
        private Double aqStrength;
        private Integer bFrameCount;
        private Boolean bPyramid;
        private Integer bitrateBps;
        private Integer crfLevel;
        private Boolean enableTwoPass;
        private Double frameRate;
        private String gopDuration;
        private Integer gopFrameCount;
        private Integer heightPixels;
        private String pixelFormat;
        private String preset;
        private String profile;
        private String rateControlMode;
        private String tune;
        private Integer vbvFullnessBits;
        private Integer vbvSizeBits;
        private Integer widthPixels;

        public Builder() {
    	      // Empty
        }

        public Builder(H265CodecSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowOpenGop = defaults.allowOpenGop;
    	      this.aqStrength = defaults.aqStrength;
    	      this.bFrameCount = defaults.bFrameCount;
    	      this.bPyramid = defaults.bPyramid;
    	      this.bitrateBps = defaults.bitrateBps;
    	      this.crfLevel = defaults.crfLevel;
    	      this.enableTwoPass = defaults.enableTwoPass;
    	      this.frameRate = defaults.frameRate;
    	      this.gopDuration = defaults.gopDuration;
    	      this.gopFrameCount = defaults.gopFrameCount;
    	      this.heightPixels = defaults.heightPixels;
    	      this.pixelFormat = defaults.pixelFormat;
    	      this.preset = defaults.preset;
    	      this.profile = defaults.profile;
    	      this.rateControlMode = defaults.rateControlMode;
    	      this.tune = defaults.tune;
    	      this.vbvFullnessBits = defaults.vbvFullnessBits;
    	      this.vbvSizeBits = defaults.vbvSizeBits;
    	      this.widthPixels = defaults.widthPixels;
        }

        public Builder allowOpenGop(Boolean allowOpenGop) {
            this.allowOpenGop = Objects.requireNonNull(allowOpenGop);
            return this;
        }
        public Builder aqStrength(Double aqStrength) {
            this.aqStrength = Objects.requireNonNull(aqStrength);
            return this;
        }
        public Builder bFrameCount(Integer bFrameCount) {
            this.bFrameCount = Objects.requireNonNull(bFrameCount);
            return this;
        }
        public Builder bPyramid(Boolean bPyramid) {
            this.bPyramid = Objects.requireNonNull(bPyramid);
            return this;
        }
        public Builder bitrateBps(Integer bitrateBps) {
            this.bitrateBps = Objects.requireNonNull(bitrateBps);
            return this;
        }
        public Builder crfLevel(Integer crfLevel) {
            this.crfLevel = Objects.requireNonNull(crfLevel);
            return this;
        }
        public Builder enableTwoPass(Boolean enableTwoPass) {
            this.enableTwoPass = Objects.requireNonNull(enableTwoPass);
            return this;
        }
        public Builder frameRate(Double frameRate) {
            this.frameRate = Objects.requireNonNull(frameRate);
            return this;
        }
        public Builder gopDuration(String gopDuration) {
            this.gopDuration = Objects.requireNonNull(gopDuration);
            return this;
        }
        public Builder gopFrameCount(Integer gopFrameCount) {
            this.gopFrameCount = Objects.requireNonNull(gopFrameCount);
            return this;
        }
        public Builder heightPixels(Integer heightPixels) {
            this.heightPixels = Objects.requireNonNull(heightPixels);
            return this;
        }
        public Builder pixelFormat(String pixelFormat) {
            this.pixelFormat = Objects.requireNonNull(pixelFormat);
            return this;
        }
        public Builder preset(String preset) {
            this.preset = Objects.requireNonNull(preset);
            return this;
        }
        public Builder profile(String profile) {
            this.profile = Objects.requireNonNull(profile);
            return this;
        }
        public Builder rateControlMode(String rateControlMode) {
            this.rateControlMode = Objects.requireNonNull(rateControlMode);
            return this;
        }
        public Builder tune(String tune) {
            this.tune = Objects.requireNonNull(tune);
            return this;
        }
        public Builder vbvFullnessBits(Integer vbvFullnessBits) {
            this.vbvFullnessBits = Objects.requireNonNull(vbvFullnessBits);
            return this;
        }
        public Builder vbvSizeBits(Integer vbvSizeBits) {
            this.vbvSizeBits = Objects.requireNonNull(vbvSizeBits);
            return this;
        }
        public Builder widthPixels(Integer widthPixels) {
            this.widthPixels = Objects.requireNonNull(widthPixels);
            return this;
        }        public H265CodecSettingsResponse build() {
            return new H265CodecSettingsResponse(allowOpenGop, aqStrength, bFrameCount, bPyramid, bitrateBps, crfLevel, enableTwoPass, frameRate, gopDuration, gopFrameCount, heightPixels, pixelFormat, preset, profile, rateControlMode, tune, vbvFullnessBits, vbvSizeBits, widthPixels);
        }
    }
}
