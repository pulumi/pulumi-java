// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.ml_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.ml_v1.inputs.GoogleCloudMlV1_Measurement_MetricResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A message representing a measurement.
 * 
 */
public final class GoogleCloudMlV1__MeasurementResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudMlV1__MeasurementResponse Empty = new GoogleCloudMlV1__MeasurementResponse();

    /**
     * Time that the trial has been running at the point of this measurement.
     * 
     */
    @Import(name="elapsedTime", required=true)
    private String elapsedTime;

    /**
     * @return Time that the trial has been running at the point of this measurement.
     * 
     */
    public String elapsedTime() {
        return this.elapsedTime;
    }

    /**
     * Provides a list of metrics that act as inputs into the objective function.
     * 
     */
    @Import(name="metrics", required=true)
    private List<GoogleCloudMlV1_Measurement_MetricResponse> metrics;

    /**
     * @return Provides a list of metrics that act as inputs into the objective function.
     * 
     */
    public List<GoogleCloudMlV1_Measurement_MetricResponse> metrics() {
        return this.metrics;
    }

    /**
     * The number of steps a machine learning model has been trained for. Must be non-negative.
     * 
     */
    @Import(name="stepCount", required=true)
    private String stepCount;

    /**
     * @return The number of steps a machine learning model has been trained for. Must be non-negative.
     * 
     */
    public String stepCount() {
        return this.stepCount;
    }

    private GoogleCloudMlV1__MeasurementResponse() {}

    private GoogleCloudMlV1__MeasurementResponse(GoogleCloudMlV1__MeasurementResponse $) {
        this.elapsedTime = $.elapsedTime;
        this.metrics = $.metrics;
        this.stepCount = $.stepCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudMlV1__MeasurementResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__MeasurementResponse $;

        public Builder() {
            $ = new GoogleCloudMlV1__MeasurementResponse();
        }

        public Builder(GoogleCloudMlV1__MeasurementResponse defaults) {
            $ = new GoogleCloudMlV1__MeasurementResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param elapsedTime Time that the trial has been running at the point of this measurement.
         * 
         * @return builder
         * 
         */
        public Builder elapsedTime(String elapsedTime) {
            $.elapsedTime = elapsedTime;
            return this;
        }

        /**
         * @param metrics Provides a list of metrics that act as inputs into the objective function.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<GoogleCloudMlV1_Measurement_MetricResponse> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics Provides a list of metrics that act as inputs into the objective function.
         * 
         * @return builder
         * 
         */
        public Builder metrics(GoogleCloudMlV1_Measurement_MetricResponse... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param stepCount The number of steps a machine learning model has been trained for. Must be non-negative.
         * 
         * @return builder
         * 
         */
        public Builder stepCount(String stepCount) {
            $.stepCount = stepCount;
            return this;
        }

        public GoogleCloudMlV1__MeasurementResponse build() {
            $.elapsedTime = Objects.requireNonNull($.elapsedTime, "expected parameter 'elapsedTime' to be non-null");
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            $.stepCount = Objects.requireNonNull($.stepCount, "expected parameter 'stepCount' to be non-null");
            return $;
        }
    }

}
