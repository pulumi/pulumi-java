// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Represents a DNS certificate challenge.
 * 
 */
public final class CertDnsChallengeResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertDnsChallengeResponse Empty = new CertDnsChallengeResponse();

    /**
     * The domain name upon which the DNS challenge must be satisfied.
     * 
     */
    @Import(name="domainName", required=true)
    private String domainName;

    public String domainName() {
        return this.domainName;
    }

    /**
     * The value that must be present as a TXT record on the domain name to satisfy the challenge.
     * 
     */
    @Import(name="token", required=true)
    private String token;

    public String token() {
        return this.token;
    }

    private CertDnsChallengeResponse() {}

    private CertDnsChallengeResponse(CertDnsChallengeResponse $) {
        this.domainName = $.domainName;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertDnsChallengeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertDnsChallengeResponse $;

        public Builder() {
            $ = new CertDnsChallengeResponse();
        }

        public Builder(CertDnsChallengeResponse defaults) {
            $ = new CertDnsChallengeResponse(Objects.requireNonNull(defaults));
        }

        public Builder domainName(String domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder token(String token) {
            $.token = token;
            return this;
        }

        public CertDnsChallengeResponse build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.token = Objects.requireNonNull($.token, "expected parameter 'token' to be non-null");
            return $;
        }
    }

}
