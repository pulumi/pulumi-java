// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.RepoSourceArgs;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.StorageSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Source describes the location of the source used for the build.
 * 
 */
public final class SourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceArgs Empty = new SourceArgs();

    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     * 
     */
    @Import(name="additionalContexts")
      private final @Nullable Output<List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs>> additionalContexts;

    public Output<List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs>> additionalContexts() {
        return this.additionalContexts == null ? Codegen.empty() : this.additionalContexts;
    }

    /**
     * If provided, the input binary artifacts for the build came from this location.
     * 
     */
    @Import(name="artifactStorageSource")
      private final @Nullable Output<StorageSourceArgs> artifactStorageSource;

    public Output<StorageSourceArgs> artifactStorageSource() {
        return this.artifactStorageSource == null ? Codegen.empty() : this.artifactStorageSource;
    }

    /**
     * If provided, the source code used for the build came from this location.
     * 
     */
    @Import(name="context")
      private final @Nullable Output<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs> context;

    public Output<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs> context() {
        return this.context == null ? Codegen.empty() : this.context;
    }

    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     * 
     */
    @Import(name="fileHashes")
      private final @Nullable Output<Map<String,String>> fileHashes;

    public Output<Map<String,String>> fileHashes() {
        return this.fileHashes == null ? Codegen.empty() : this.fileHashes;
    }

    /**
     * If provided, get source from this location in a Cloud Repo.
     * 
     */
    @Import(name="repoSource")
      private final @Nullable Output<RepoSourceArgs> repoSource;

    public Output<RepoSourceArgs> repoSource() {
        return this.repoSource == null ? Codegen.empty() : this.repoSource;
    }

    /**
     * If provided, get the source from this location in in Google Cloud Storage.
     * 
     */
    @Import(name="storageSource")
      private final @Nullable Output<StorageSourceArgs> storageSource;

    public Output<StorageSourceArgs> storageSource() {
        return this.storageSource == null ? Codegen.empty() : this.storageSource;
    }

    public SourceArgs(
        @Nullable Output<List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs>> additionalContexts,
        @Nullable Output<StorageSourceArgs> artifactStorageSource,
        @Nullable Output<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs> context,
        @Nullable Output<Map<String,String>> fileHashes,
        @Nullable Output<RepoSourceArgs> repoSource,
        @Nullable Output<StorageSourceArgs> storageSource) {
        this.additionalContexts = additionalContexts;
        this.artifactStorageSource = artifactStorageSource;
        this.context = context;
        this.fileHashes = fileHashes;
        this.repoSource = repoSource;
        this.storageSource = storageSource;
    }

    private SourceArgs() {
        this.additionalContexts = Codegen.empty();
        this.artifactStorageSource = Codegen.empty();
        this.context = Codegen.empty();
        this.fileHashes = Codegen.empty();
        this.repoSource = Codegen.empty();
        this.storageSource = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs>> additionalContexts;
        private @Nullable Output<StorageSourceArgs> artifactStorageSource;
        private @Nullable Output<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs> context;
        private @Nullable Output<Map<String,String>> fileHashes;
        private @Nullable Output<RepoSourceArgs> repoSource;
        private @Nullable Output<StorageSourceArgs> storageSource;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalContexts = defaults.additionalContexts;
    	      this.artifactStorageSource = defaults.artifactStorageSource;
    	      this.context = defaults.context;
    	      this.fileHashes = defaults.fileHashes;
    	      this.repoSource = defaults.repoSource;
    	      this.storageSource = defaults.storageSource;
        }

        public Builder additionalContexts(@Nullable Output<List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs>> additionalContexts) {
            this.additionalContexts = additionalContexts;
            return this;
        }
        public Builder additionalContexts(@Nullable List<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs> additionalContexts) {
            this.additionalContexts = Codegen.ofNullable(additionalContexts);
            return this;
        }
        public Builder additionalContexts(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs... additionalContexts) {
            return additionalContexts(List.of(additionalContexts));
        }
        public Builder artifactStorageSource(@Nullable Output<StorageSourceArgs> artifactStorageSource) {
            this.artifactStorageSource = artifactStorageSource;
            return this;
        }
        public Builder artifactStorageSource(@Nullable StorageSourceArgs artifactStorageSource) {
            this.artifactStorageSource = Codegen.ofNullable(artifactStorageSource);
            return this;
        }
        public Builder context(@Nullable Output<GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs> context) {
            this.context = context;
            return this;
        }
        public Builder context(@Nullable GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs context) {
            this.context = Codegen.ofNullable(context);
            return this;
        }
        public Builder fileHashes(@Nullable Output<Map<String,String>> fileHashes) {
            this.fileHashes = fileHashes;
            return this;
        }
        public Builder fileHashes(@Nullable Map<String,String> fileHashes) {
            this.fileHashes = Codegen.ofNullable(fileHashes);
            return this;
        }
        public Builder repoSource(@Nullable Output<RepoSourceArgs> repoSource) {
            this.repoSource = repoSource;
            return this;
        }
        public Builder repoSource(@Nullable RepoSourceArgs repoSource) {
            this.repoSource = Codegen.ofNullable(repoSource);
            return this;
        }
        public Builder storageSource(@Nullable Output<StorageSourceArgs> storageSource) {
            this.storageSource = storageSource;
            return this;
        }
        public Builder storageSource(@Nullable StorageSourceArgs storageSource) {
            this.storageSource = Codegen.ofNullable(storageSource);
            return this;
        }        public SourceArgs build() {
            return new SourceArgs(additionalContexts, artifactStorageSource, context, fileHashes, repoSource, storageSource);
        }
    }
}
