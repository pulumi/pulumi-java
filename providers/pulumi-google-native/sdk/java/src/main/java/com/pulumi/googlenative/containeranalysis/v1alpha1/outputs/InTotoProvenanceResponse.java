// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.BuilderConfigResponse;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.MetadataResponse;
import com.pulumi.googlenative.containeranalysis.v1alpha1.outputs.RecipeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class InTotoProvenanceResponse {
    /**
     * @return required
     * 
     */
    private final BuilderConfigResponse builderConfig;
    /**
     * @return The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    private final List<String> materials;
    private final MetadataResponse metadata;
    /**
     * @return Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
     */
    private final RecipeResponse recipe;

    @CustomType.Constructor
    private InTotoProvenanceResponse(
        @CustomType.Parameter("builderConfig") BuilderConfigResponse builderConfig,
        @CustomType.Parameter("materials") List<String> materials,
        @CustomType.Parameter("metadata") MetadataResponse metadata,
        @CustomType.Parameter("recipe") RecipeResponse recipe) {
        this.builderConfig = builderConfig;
        this.materials = materials;
        this.metadata = metadata;
        this.recipe = recipe;
    }

    /**
     * @return required
     * 
     */
    public BuilderConfigResponse builderConfig() {
        return this.builderConfig;
    }
    /**
     * @return The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    public List<String> materials() {
        return this.materials;
    }
    public MetadataResponse metadata() {
        return this.metadata;
    }
    /**
     * @return Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
     */
    public RecipeResponse recipe() {
        return this.recipe;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InTotoProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuilderConfigResponse builderConfig;
        private List<String> materials;
        private MetadataResponse metadata;
        private RecipeResponse recipe;

        public Builder() {
    	      // Empty
        }

        public Builder(InTotoProvenanceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.builderConfig = defaults.builderConfig;
    	      this.materials = defaults.materials;
    	      this.metadata = defaults.metadata;
    	      this.recipe = defaults.recipe;
        }

        public Builder builderConfig(BuilderConfigResponse builderConfig) {
            this.builderConfig = Objects.requireNonNull(builderConfig);
            return this;
        }
        public Builder materials(List<String> materials) {
            this.materials = Objects.requireNonNull(materials);
            return this;
        }
        public Builder materials(String... materials) {
            return materials(List.of(materials));
        }
        public Builder metadata(MetadataResponse metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder recipe(RecipeResponse recipe) {
            this.recipe = Objects.requireNonNull(recipe);
            return this;
        }        public InTotoProvenanceResponse build() {
            return new InTotoProvenanceResponse(builderConfig, materials, metadata, recipe);
        }
    }
}
