// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelArgs Empty = new ChannelArgs();

    @Import(name="channelId", required=true)
    private Output<String> channelId;

    public Output<String> channelId() {
        return this.channelId;
    }

    /**
     * The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it&#39;s set directly or via the `ttl` field.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * Text labels used for extra metadata and/or filtering.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.
     * 
     */
    @Import(name="retainedReleaseCount")
    private @Nullable Output<Integer> retainedReleaseCount;

    public Optional<Output<Integer>> retainedReleaseCount() {
        return Optional.ofNullable(this.retainedReleaseCount);
    }

    @Import(name="siteId", required=true)
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private ChannelArgs() {}

    private ChannelArgs(ChannelArgs $) {
        this.channelId = $.channelId;
        this.expireTime = $.expireTime;
        this.labels = $.labels;
        this.name = $.name;
        this.project = $.project;
        this.retainedReleaseCount = $.retainedReleaseCount;
        this.siteId = $.siteId;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelArgs $;

        public Builder() {
            $ = new ChannelArgs();
        }

        public Builder(ChannelArgs defaults) {
            $ = new ChannelArgs(Objects.requireNonNull(defaults));
        }

        public Builder channelId(Output<String> channelId) {
            $.channelId = channelId;
            return this;
        }

        public Builder channelId(String channelId) {
            return channelId(Output.of(channelId));
        }

        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder retainedReleaseCount(@Nullable Output<Integer> retainedReleaseCount) {
            $.retainedReleaseCount = retainedReleaseCount;
            return this;
        }

        public Builder retainedReleaseCount(Integer retainedReleaseCount) {
            return retainedReleaseCount(Output.of(retainedReleaseCount));
        }

        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public ChannelArgs build() {
            $.channelId = Objects.requireNonNull($.channelId, "expected parameter 'channelId' to be non-null");
            $.siteId = Objects.requireNonNull($.siteId, "expected parameter 'siteId' to be non-null");
            return $;
        }
    }

}
