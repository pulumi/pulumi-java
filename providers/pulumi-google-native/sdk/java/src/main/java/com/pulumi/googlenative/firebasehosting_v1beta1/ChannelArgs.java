// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ChannelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelArgs Empty = new ChannelArgs();

    @Import(name="channelId", required=true)
      private final Output<String> channelId;

    public Output<String> channelId() {
        return this.channelId;
    }

    /**
     * The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.
     * 
     */
    @Import(name="expireTime")
      private final @Nullable Output<String> expireTime;

    public Output<String> expireTime() {
        return this.expireTime == null ? Codegen.empty() : this.expireTime;
    }

    /**
     * Text labels used for extra metadata and/or filtering.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.
     * 
     */
    @Import(name="retainedReleaseCount")
      private final @Nullable Output<Integer> retainedReleaseCount;

    public Output<Integer> retainedReleaseCount() {
        return this.retainedReleaseCount == null ? Codegen.empty() : this.retainedReleaseCount;
    }

    @Import(name="siteId", required=true)
      private final Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.
     * 
     */
    @Import(name="ttl")
      private final @Nullable Output<String> ttl;

    public Output<String> ttl() {
        return this.ttl == null ? Codegen.empty() : this.ttl;
    }

    public ChannelArgs(
        Output<String> channelId,
        @Nullable Output<String> expireTime,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<Integer> retainedReleaseCount,
        Output<String> siteId,
        @Nullable Output<String> ttl) {
        this.channelId = Objects.requireNonNull(channelId, "expected parameter 'channelId' to be non-null");
        this.expireTime = expireTime;
        this.labels = labels;
        this.name = name;
        this.project = project;
        this.retainedReleaseCount = retainedReleaseCount;
        this.siteId = Objects.requireNonNull(siteId, "expected parameter 'siteId' to be non-null");
        this.ttl = ttl;
    }

    private ChannelArgs() {
        this.channelId = Codegen.empty();
        this.expireTime = Codegen.empty();
        this.labels = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.retainedReleaseCount = Codegen.empty();
        this.siteId = Codegen.empty();
        this.ttl = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> channelId;
        private @Nullable Output<String> expireTime;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<Integer> retainedReleaseCount;
        private Output<String> siteId;
        private @Nullable Output<String> ttl;

        public Builder() {
    	      // Empty
        }

        public Builder(ChannelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channelId = defaults.channelId;
    	      this.expireTime = defaults.expireTime;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.retainedReleaseCount = defaults.retainedReleaseCount;
    	      this.siteId = defaults.siteId;
    	      this.ttl = defaults.ttl;
        }

        public Builder channelId(Output<String> channelId) {
            this.channelId = Objects.requireNonNull(channelId);
            return this;
        }
        public Builder channelId(String channelId) {
            this.channelId = Output.of(Objects.requireNonNull(channelId));
            return this;
        }
        public Builder expireTime(@Nullable Output<String> expireTime) {
            this.expireTime = expireTime;
            return this;
        }
        public Builder expireTime(@Nullable String expireTime) {
            this.expireTime = Codegen.ofNullable(expireTime);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder retainedReleaseCount(@Nullable Output<Integer> retainedReleaseCount) {
            this.retainedReleaseCount = retainedReleaseCount;
            return this;
        }
        public Builder retainedReleaseCount(@Nullable Integer retainedReleaseCount) {
            this.retainedReleaseCount = Codegen.ofNullable(retainedReleaseCount);
            return this;
        }
        public Builder siteId(Output<String> siteId) {
            this.siteId = Objects.requireNonNull(siteId);
            return this;
        }
        public Builder siteId(String siteId) {
            this.siteId = Output.of(Objects.requireNonNull(siteId));
            return this;
        }
        public Builder ttl(@Nullable Output<String> ttl) {
            this.ttl = ttl;
            return this;
        }
        public Builder ttl(@Nullable String ttl) {
            this.ttl = Codegen.ofNullable(ttl);
            return this;
        }        public ChannelArgs build() {
            return new ChannelArgs(channelId, expireTime, labels, name, project, retainedReleaseCount, siteId, ttl);
        }
    }
}
