// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudsearch_v1.inputs.ValueResponse;
import java.lang.String;
import java.util.Objects;


public final class ValueFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final ValueFilterResponse Empty = new ValueFilterResponse();

    /**
     * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     * 
     */
    @Import(name="operatorName", required=true)
    private String operatorName;

    /**
     * @return The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     * 
     */
    public String operatorName() {
        return this.operatorName;
    }

    /**
     * The value to be compared with.
     * 
     */
    @Import(name="value", required=true)
    private ValueResponse value;

    /**
     * @return The value to be compared with.
     * 
     */
    public ValueResponse value() {
        return this.value;
    }

    private ValueFilterResponse() {}

    private ValueFilterResponse(ValueFilterResponse $) {
        this.operatorName = $.operatorName;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValueFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValueFilterResponse $;

        public Builder() {
            $ = new ValueFilterResponse();
        }

        public Builder(ValueFilterResponse defaults) {
            $ = new ValueFilterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param operatorName The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
         * 
         * @return builder
         * 
         */
        public Builder operatorName(String operatorName) {
            $.operatorName = operatorName;
            return this;
        }

        /**
         * @param value The value to be compared with.
         * 
         * @return builder
         * 
         */
        public Builder value(ValueResponse value) {
            $.value = value;
            return this;
        }

        public ValueFilterResponse build() {
            $.operatorName = Objects.requireNonNull($.operatorName, "expected parameter 'operatorName' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
