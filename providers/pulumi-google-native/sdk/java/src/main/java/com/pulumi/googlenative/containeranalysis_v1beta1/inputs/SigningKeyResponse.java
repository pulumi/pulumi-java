// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { &#34;key_id&#34;: &#34;776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...&#34;, &#34;key_type&#34;: &#34;rsa&#34;, &#34;public_key_value&#34;: &#34;-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...&#34;, &#34;key_scheme&#34;: &#34;rsassa-pss-sha256&#34; } The format for in-toto&#39;s key definition can be found in section 4.2 of the in-toto specification.
 * 
 */
public final class SigningKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final SigningKeyResponse Empty = new SigningKeyResponse();

    /**
     * key_id is an identifier for the signing key.
     * 
     */
    @Import(name="keyId", required=true)
    private String keyId;

    public String keyId() {
        return this.keyId;
    }

    /**
     * This field contains the corresponding signature scheme. Eg: &#34;rsassa-pss-sha256&#34;.
     * 
     */
    @Import(name="keyScheme", required=true)
    private String keyScheme;

    public String keyScheme() {
        return this.keyScheme;
    }

    /**
     * This field identifies the specific signing method. Eg: &#34;rsa&#34;, &#34;ed25519&#34;, and &#34;ecdsa&#34;.
     * 
     */
    @Import(name="keyType", required=true)
    private String keyType;

    public String keyType() {
        return this.keyType;
    }

    /**
     * This field contains the actual public key.
     * 
     */
    @Import(name="publicKeyValue", required=true)
    private String publicKeyValue;

    public String publicKeyValue() {
        return this.publicKeyValue;
    }

    private SigningKeyResponse() {}

    private SigningKeyResponse(SigningKeyResponse $) {
        this.keyId = $.keyId;
        this.keyScheme = $.keyScheme;
        this.keyType = $.keyType;
        this.publicKeyValue = $.publicKeyValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SigningKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SigningKeyResponse $;

        public Builder() {
            $ = new SigningKeyResponse();
        }

        public Builder(SigningKeyResponse defaults) {
            $ = new SigningKeyResponse(Objects.requireNonNull(defaults));
        }

        public Builder keyId(String keyId) {
            $.keyId = keyId;
            return this;
        }

        public Builder keyScheme(String keyScheme) {
            $.keyScheme = keyScheme;
            return this;
        }

        public Builder keyType(String keyType) {
            $.keyType = keyType;
            return this;
        }

        public Builder publicKeyValue(String publicKeyValue) {
            $.publicKeyValue = publicKeyValue;
            return this;
        }

        public SigningKeyResponse build() {
            $.keyId = Objects.requireNonNull($.keyId, "expected parameter 'keyId' to be non-null");
            $.keyScheme = Objects.requireNonNull($.keyScheme, "expected parameter 'keyScheme' to be non-null");
            $.keyType = Objects.requireNonNull($.keyType, "expected parameter 'keyType' to be non-null");
            $.publicKeyValue = Objects.requireNonNull($.publicKeyValue, "expected parameter 'publicKeyValue' to be non-null");
            return $;
        }
    }

}
