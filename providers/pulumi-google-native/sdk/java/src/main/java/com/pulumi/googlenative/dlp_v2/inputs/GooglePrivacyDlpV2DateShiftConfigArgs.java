// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2CryptoKeyArgs;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2FieldIdArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
 * 
 */
public final class GooglePrivacyDlpV2DateShiftConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2DateShiftConfigArgs Empty = new GooglePrivacyDlpV2DateShiftConfigArgs();

    /**
     * Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
     * 
     */
    @Import(name="context")
    private @Nullable Output<GooglePrivacyDlpV2FieldIdArgs> context;

    public Optional<Output<GooglePrivacyDlpV2FieldIdArgs>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
     * 
     */
    @Import(name="cryptoKey")
    private @Nullable Output<GooglePrivacyDlpV2CryptoKeyArgs> cryptoKey;

    public Optional<Output<GooglePrivacyDlpV2CryptoKeyArgs>> cryptoKey() {
        return Optional.ofNullable(this.cryptoKey);
    }

    /**
     * For example, -5 means shift date to at most 5 days back in the past.
     * 
     */
    @Import(name="lowerBoundDays", required=true)
    private Output<Integer> lowerBoundDays;

    public Output<Integer> lowerBoundDays() {
        return this.lowerBoundDays;
    }

    /**
     * Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
     * 
     */
    @Import(name="upperBoundDays", required=true)
    private Output<Integer> upperBoundDays;

    public Output<Integer> upperBoundDays() {
        return this.upperBoundDays;
    }

    private GooglePrivacyDlpV2DateShiftConfigArgs() {}

    private GooglePrivacyDlpV2DateShiftConfigArgs(GooglePrivacyDlpV2DateShiftConfigArgs $) {
        this.context = $.context;
        this.cryptoKey = $.cryptoKey;
        this.lowerBoundDays = $.lowerBoundDays;
        this.upperBoundDays = $.upperBoundDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2DateShiftConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2DateShiftConfigArgs $;

        public Builder() {
            $ = new GooglePrivacyDlpV2DateShiftConfigArgs();
        }

        public Builder(GooglePrivacyDlpV2DateShiftConfigArgs defaults) {
            $ = new GooglePrivacyDlpV2DateShiftConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder context(@Nullable Output<GooglePrivacyDlpV2FieldIdArgs> context) {
            $.context = context;
            return this;
        }

        public Builder context(GooglePrivacyDlpV2FieldIdArgs context) {
            return context(Output.of(context));
        }

        public Builder cryptoKey(@Nullable Output<GooglePrivacyDlpV2CryptoKeyArgs> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        public Builder cryptoKey(GooglePrivacyDlpV2CryptoKeyArgs cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        public Builder lowerBoundDays(Output<Integer> lowerBoundDays) {
            $.lowerBoundDays = lowerBoundDays;
            return this;
        }

        public Builder lowerBoundDays(Integer lowerBoundDays) {
            return lowerBoundDays(Output.of(lowerBoundDays));
        }

        public Builder upperBoundDays(Output<Integer> upperBoundDays) {
            $.upperBoundDays = upperBoundDays;
            return this;
        }

        public Builder upperBoundDays(Integer upperBoundDays) {
            return upperBoundDays(Output.of(upperBoundDays));
        }

        public GooglePrivacyDlpV2DateShiftConfigArgs build() {
            $.lowerBoundDays = Objects.requireNonNull($.lowerBoundDays, "expected parameter 'lowerBoundDays' to be non-null");
            $.upperBoundDays = Objects.requireNonNull($.upperBoundDays, "expected parameter 'upperBoundDays' to be non-null");
            return $;
        }
    }

}
