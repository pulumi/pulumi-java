// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.appengine.v1alpha.DomainMappingArgs;
import com.pulumi.googlenative.appengine.v1alpha.outputs.ResourceRecordResponse;
import com.pulumi.googlenative.appengine.v1alpha.outputs.SslSettingsResponse;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
 * Auto-naming is currently not supported for this resource.
 * 
 */
@ResourceType(type="google-native:appengine/v1alpha:DomainMapping")
public class DomainMapping extends com.pulumi.resources.CustomResource {
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }
    /**
     * Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manaually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated.
     * 
     */
    @Export(name="noManagedCertificate", type=String.class, parameters={})
    private Output</* @Nullable */ String> noManagedCertificate;

    /**
     * @return Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manaually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated.
     * 
     */
    public Output<Optional<String>> noManagedCertificate() {
        return Codegen.optional(this.noManagedCertificate);
    }
    /**
     * Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
     * 
     */
    @Export(name="overrideStrategy", type=String.class, parameters={})
    private Output</* @Nullable */ String> overrideStrategy;

    /**
     * @return Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
     * 
     */
    public Output<Optional<String>> overrideStrategy() {
        return Codegen.optional(this.overrideStrategy);
    }
    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS configuration in order to serve the application via this domain mapping.
     * 
     */
    @Export(name="resourceRecords", type=List.class, parameters={ResourceRecordResponse.class})
    private Output<List<ResourceRecordResponse>> resourceRecords;

    /**
     * @return The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS configuration in order to serve the application via this domain mapping.
     * 
     */
    public Output<List<ResourceRecordResponse>> resourceRecords() {
        return this.resourceRecords;
    }
    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * 
     */
    @Export(name="sslSettings", type=SslSettingsResponse.class, parameters={})
    private Output<SslSettingsResponse> sslSettings;

    /**
     * @return SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * 
     */
    public Output<SslSettingsResponse> sslSettings() {
        return this.sslSettings;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DomainMapping(String name) {
        this(name, DomainMappingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DomainMapping(String name, DomainMappingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DomainMapping(String name, DomainMappingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:appengine/v1alpha:DomainMapping", name, args == null ? DomainMappingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DomainMapping(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:appengine/v1alpha:DomainMapping", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DomainMapping get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DomainMapping(name, id, options);
    }
}
