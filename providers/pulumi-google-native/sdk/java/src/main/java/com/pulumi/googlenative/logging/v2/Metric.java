// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.logging.v2.MetricArgs;
import com.pulumi.googlenative.logging.v2.outputs.BucketOptionsResponse;
import com.pulumi.googlenative.logging.v2.outputs.MetricDescriptorResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Creates a logs-based metric.
 * 
 */
@ResourceType(type="google-native:logging/v2:Metric")
public class Metric extends com.pulumi.resources.CustomResource {
    /**
     * Optional. The bucket_options are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
     * 
     */
    @Export(name="bucketOptions", type=BucketOptionsResponse.class, parameters={})
    private Output<BucketOptionsResponse> bucketOptions;

    /**
     * @return Optional. The bucket_options are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
     * 
     */
    public Output<BucketOptionsResponse> bucketOptions() {
        return this.bucketOptions;
    }
    /**
     * The creation timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The creation timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Optional. If set to True, then this metric is disabled and it does not generate any points.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output<Boolean> disabled;

    /**
     * @return Optional. If set to True, then this metric is disabled and it does not generate any points.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: &#34;resource.type=gae_app AND severity&gt;=ERROR&#34; The maximum length of the filter is 20000 characters.
     * 
     */
    @Export(name="filter", type=String.class, parameters={})
    private Output<String> filter;

    /**
     * @return An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: &#34;resource.type=gae_app AND severity&gt;=ERROR&#34; The maximum length of the filter is 20000 characters.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }
    /**
     * Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
     * 
     */
    @Export(name="labelExtractors", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labelExtractors;

    /**
     * @return Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
     * 
     */
    public Output<Map<String,String>> labelExtractors() {
        return this.labelExtractors;
    }
    /**
     * Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of &#34;1&#34;. Such a metric counts the number of log entries matching the filter expression.The name, type, and description fields in the metric_descriptor are output only, and is constructed using the name and description field in the LogMetric.To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a value_extractor expression in the LogMetric.Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the label_extractors map.The metric_kind and value_type fields in the metric_descriptor cannot be updated once initially configured. New labels can be added in the metric_descriptor, but existing labels cannot be modified except for their description.
     * 
     */
    @Export(name="metricDescriptor", type=MetricDescriptorResponse.class, parameters={})
    private Output<MetricDescriptorResponse> metricDescriptor;

    /**
     * @return Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of &#34;1&#34;. Such a metric counts the number of log entries matching the filter expression.The name, type, and description fields in the metric_descriptor are output only, and is constructed using the name and description field in the LogMetric.To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a value_extractor expression in the LogMetric.Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the label_extractors map.The metric_kind and value_type fields in the metric_descriptor cannot be updated once initially configured. New labels can be added in the metric_descriptor, but existing labels cannot be modified except for their description.
     * 
     */
    public Output<MetricDescriptorResponse> metricDescriptor() {
        return this.metricDescriptor;
    }
    /**
     * The client-assigned metric identifier. Examples: &#34;error_count&#34;, &#34;nginx/requests&#34;.Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*&#39;,()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format &#34;projects/PROJECT_ID/metrics/METRIC_ID&#34;. Example: If the resource name of a metric is &#34;projects/my-project/metrics/nginx%2Frequests&#34;, this field&#39;s value is &#34;nginx/requests&#34;.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The client-assigned metric identifier. Examples: &#34;error_count&#34;, &#34;nginx/requests&#34;.Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*&#39;,()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format &#34;projects/PROJECT_ID/metrics/METRIC_ID&#34;. Example: If the resource name of a metric is &#34;projects/my-project/metrics/nginx%2Frequests&#34;, this field&#39;s value is &#34;nginx/requests&#34;.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * The last update timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The last update timestamp of the metric.This field may not be present for older metrics.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument are: 1. field: The name of the log entry field from which the value is to be extracted. 2. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, &#34;.*quantity=(\d+).*&#34;)
     * 
     */
    @Export(name="valueExtractor", type=String.class, parameters={})
    private Output<String> valueExtractor;

    /**
     * @return Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument are: 1. field: The name of the log entry field from which the value is to be extracted. 2. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, &#34;.*quantity=(\d+).*&#34;)
     * 
     */
    public Output<String> valueExtractor() {
        return this.valueExtractor;
    }
    /**
     * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     * @deprecated
     * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     */
    @Deprecated /* Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed. */
    @Export(name="version", type=String.class, parameters={})
    private Output<String> version;

    /**
     * @return Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Metric(String name) {
        this(name, MetricArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Metric(String name, MetricArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Metric(String name, MetricArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:logging/v2:Metric", name, args == null ? MetricArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Metric(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:logging/v2:Metric", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Metric get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Metric(name, id, options);
    }
}
