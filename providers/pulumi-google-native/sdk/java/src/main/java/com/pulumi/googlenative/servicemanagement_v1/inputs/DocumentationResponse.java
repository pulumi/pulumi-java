// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.DocumentationRuleResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.PageResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * `Documentation` provides the information for describing a service. Example: documentation: summary: &gt; The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages; - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: &gt; ... - selector: google.calendar.Calendar.Put description: &gt; ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
 * 
 */
public final class DocumentationResponse extends com.pulumi.resources.InvokeArgs {

    public static final DocumentationResponse Empty = new DocumentationResponse();

    /**
     * The URL to the root of documentation.
     * 
     */
    @Import(name="documentationRootUrl", required=true)
    private String documentationRootUrl;

    /**
     * @return The URL to the root of documentation.
     * 
     */
    public String documentationRootUrl() {
        return this.documentationRootUrl;
    }

    /**
     * Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
     * 
     */
    @Import(name="overview", required=true)
    private String overview;

    /**
     * @return Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
     * 
     */
    public String overview() {
        return this.overview;
    }

    /**
     * The top level pages for the documentation set.
     * 
     */
    @Import(name="pages", required=true)
    private List<PageResponse> pages;

    /**
     * @return The top level pages for the documentation set.
     * 
     */
    public List<PageResponse> pages() {
        return this.pages;
    }

    /**
     * A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    @Import(name="rules", required=true)
    private List<DocumentationRuleResponse> rules;

    /**
     * @return A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    public List<DocumentationRuleResponse> rules() {
        return this.rules;
    }

    /**
     * Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
     * 
     */
    @Import(name="serviceRootUrl", required=true)
    private String serviceRootUrl;

    /**
     * @return Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
     * 
     */
    public String serviceRootUrl() {
        return this.serviceRootUrl;
    }

    /**
     * A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
     * 
     */
    @Import(name="summary", required=true)
    private String summary;

    /**
     * @return A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
     * 
     */
    public String summary() {
        return this.summary;
    }

    private DocumentationResponse() {}

    private DocumentationResponse(DocumentationResponse $) {
        this.documentationRootUrl = $.documentationRootUrl;
        this.overview = $.overview;
        this.pages = $.pages;
        this.rules = $.rules;
        this.serviceRootUrl = $.serviceRootUrl;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentationResponse $;

        public Builder() {
            $ = new DocumentationResponse();
        }

        public Builder(DocumentationResponse defaults) {
            $ = new DocumentationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param documentationRootUrl The URL to the root of documentation.
         * 
         * @return builder
         * 
         */
        public Builder documentationRootUrl(String documentationRootUrl) {
            $.documentationRootUrl = documentationRootUrl;
            return this;
        }

        /**
         * @param overview Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
         * 
         * @return builder
         * 
         */
        public Builder overview(String overview) {
            $.overview = overview;
            return this;
        }

        /**
         * @param pages The top level pages for the documentation set.
         * 
         * @return builder
         * 
         */
        public Builder pages(List<PageResponse> pages) {
            $.pages = pages;
            return this;
        }

        /**
         * @param pages The top level pages for the documentation set.
         * 
         * @return builder
         * 
         */
        public Builder pages(PageResponse... pages) {
            return pages(List.of(pages));
        }

        /**
         * @param rules A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<DocumentationRuleResponse> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
         * 
         * @return builder
         * 
         */
        public Builder rules(DocumentationRuleResponse... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param serviceRootUrl Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
         * 
         * @return builder
         * 
         */
        public Builder serviceRootUrl(String serviceRootUrl) {
            $.serviceRootUrl = serviceRootUrl;
            return this;
        }

        /**
         * @param summary A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            $.summary = summary;
            return this;
        }

        public DocumentationResponse build() {
            $.documentationRootUrl = Objects.requireNonNull($.documentationRootUrl, "expected parameter 'documentationRootUrl' to be non-null");
            $.overview = Objects.requireNonNull($.overview, "expected parameter 'overview' to be non-null");
            $.pages = Objects.requireNonNull($.pages, "expected parameter 'pages' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            $.serviceRootUrl = Objects.requireNonNull($.serviceRootUrl, "expected parameter 'serviceRootUrl' to be non-null");
            $.summary = Objects.requireNonNull($.summary, "expected parameter 'summary' to be non-null");
            return $;
        }
    }

}
