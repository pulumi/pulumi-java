// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.appengine.v1beta.inputs.BuildInfoArgs;
import com.pulumi.googlenative.appengine.v1beta.inputs.CloudBuildOptionsArgs;
import com.pulumi.googlenative.appengine.v1beta.inputs.ContainerInfoArgs;
import com.pulumi.googlenative.appengine.v1beta.inputs.ZipInfoArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Code and application artifacts used to deploy a version to App Engine.
 * 
 */
public final class DeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentArgs Empty = new DeploymentArgs();

    /**
     * Google Cloud Build build information. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    @Import(name="build")
    private @Nullable Output<BuildInfoArgs> build;

    /**
     * @return Google Cloud Build build information. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    public Optional<Output<BuildInfoArgs>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
     * 
     */
    @Import(name="cloudBuildOptions")
    private @Nullable Output<CloudBuildOptionsArgs> cloudBuildOptions;

    /**
     * @return Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
     * 
     */
    public Optional<Output<CloudBuildOptionsArgs>> cloudBuildOptions() {
        return Optional.ofNullable(this.cloudBuildOptions);
    }

    /**
     * The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    @Import(name="container")
    private @Nullable Output<ContainerInfoArgs> container;

    /**
     * @return The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
     * 
     */
    public Optional<Output<ContainerInfoArgs>> container() {
        return Optional.ofNullable(this.container);
    }

    /**
     * Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
     * 
     */
    @Import(name="files")
    private @Nullable Output<Map<String,String>> files;

    /**
     * @return Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
     * 
     */
    public Optional<Output<Map<String,String>>> files() {
        return Optional.ofNullable(this.files);
    }

    /**
     * The zip file for this deployment, if this is a zip deployment.
     * 
     */
    @Import(name="zip")
    private @Nullable Output<ZipInfoArgs> zip;

    /**
     * @return The zip file for this deployment, if this is a zip deployment.
     * 
     */
    public Optional<Output<ZipInfoArgs>> zip() {
        return Optional.ofNullable(this.zip);
    }

    private DeploymentArgs() {}

    private DeploymentArgs(DeploymentArgs $) {
        this.build = $.build;
        this.cloudBuildOptions = $.cloudBuildOptions;
        this.container = $.container;
        this.files = $.files;
        this.zip = $.zip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentArgs $;

        public Builder() {
            $ = new DeploymentArgs();
        }

        public Builder(DeploymentArgs defaults) {
            $ = new DeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param build Google Cloud Build build information. Only applicable for instances running in the App Engine flexible environment.
         * 
         * @return builder
         * 
         */
        public Builder build(@Nullable Output<BuildInfoArgs> build) {
            $.build = build;
            return this;
        }

        /**
         * @param build Google Cloud Build build information. Only applicable for instances running in the App Engine flexible environment.
         * 
         * @return builder
         * 
         */
        public Builder build(BuildInfoArgs build) {
            return build(Output.of(build));
        }

        /**
         * @param cloudBuildOptions Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
         * 
         * @return builder
         * 
         */
        public Builder cloudBuildOptions(@Nullable Output<CloudBuildOptionsArgs> cloudBuildOptions) {
            $.cloudBuildOptions = cloudBuildOptions;
            return this;
        }

        /**
         * @param cloudBuildOptions Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
         * 
         * @return builder
         * 
         */
        public Builder cloudBuildOptions(CloudBuildOptionsArgs cloudBuildOptions) {
            return cloudBuildOptions(Output.of(cloudBuildOptions));
        }

        /**
         * @param container The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
         * 
         * @return builder
         * 
         */
        public Builder container(@Nullable Output<ContainerInfoArgs> container) {
            $.container = container;
            return this;
        }

        /**
         * @param container The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
         * 
         * @return builder
         * 
         */
        public Builder container(ContainerInfoArgs container) {
            return container(Output.of(container));
        }

        /**
         * @param files Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
         * 
         * @return builder
         * 
         */
        public Builder files(@Nullable Output<Map<String,String>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
         * 
         * @return builder
         * 
         */
        public Builder files(Map<String,String> files) {
            return files(Output.of(files));
        }

        /**
         * @param zip The zip file for this deployment, if this is a zip deployment.
         * 
         * @return builder
         * 
         */
        public Builder zip(@Nullable Output<ZipInfoArgs> zip) {
            $.zip = zip;
            return this;
        }

        /**
         * @param zip The zip file for this deployment, if this is a zip deployment.
         * 
         * @return builder
         * 
         */
        public Builder zip(ZipInfoArgs zip) {
            return zip(Output.of(zip));
        }

        public DeploymentArgs build() {
            return $;
        }
    }

}
