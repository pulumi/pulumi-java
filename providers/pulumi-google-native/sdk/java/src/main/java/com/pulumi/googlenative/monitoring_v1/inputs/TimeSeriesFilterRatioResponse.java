// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.AggregationResponse;
import com.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterResponse;
import com.pulumi.googlenative.monitoring_v1.inputs.RatioPartResponse;
import java.util.Objects;


/**
 * A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.
 * 
 */
public final class TimeSeriesFilterRatioResponse extends com.pulumi.resources.InvokeArgs {

    public static final TimeSeriesFilterRatioResponse Empty = new TimeSeriesFilterRatioResponse();

    /**
     * The denominator of the ratio.
     * 
     */
    @Import(name="denominator", required=true)
    private RatioPartResponse denominator;

    public RatioPartResponse denominator() {
        return this.denominator;
    }

    /**
     * The numerator of the ratio.
     * 
     */
    @Import(name="numerator", required=true)
    private RatioPartResponse numerator;

    public RatioPartResponse numerator() {
        return this.numerator;
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @Import(name="pickTimeSeriesFilter", required=true)
    private PickTimeSeriesFilterResponse pickTimeSeriesFilter;

    public PickTimeSeriesFilterResponse pickTimeSeriesFilter() {
        return this.pickTimeSeriesFilter;
    }

    /**
     * Apply a second aggregation after the ratio is computed.
     * 
     */
    @Import(name="secondaryAggregation", required=true)
    private AggregationResponse secondaryAggregation;

    public AggregationResponse secondaryAggregation() {
        return this.secondaryAggregation;
    }

    private TimeSeriesFilterRatioResponse() {}

    private TimeSeriesFilterRatioResponse(TimeSeriesFilterRatioResponse $) {
        this.denominator = $.denominator;
        this.numerator = $.numerator;
        this.pickTimeSeriesFilter = $.pickTimeSeriesFilter;
        this.secondaryAggregation = $.secondaryAggregation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeSeriesFilterRatioResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeSeriesFilterRatioResponse $;

        public Builder() {
            $ = new TimeSeriesFilterRatioResponse();
        }

        public Builder(TimeSeriesFilterRatioResponse defaults) {
            $ = new TimeSeriesFilterRatioResponse(Objects.requireNonNull(defaults));
        }

        public Builder denominator(RatioPartResponse denominator) {
            $.denominator = denominator;
            return this;
        }

        public Builder numerator(RatioPartResponse numerator) {
            $.numerator = numerator;
            return this;
        }

        public Builder pickTimeSeriesFilter(PickTimeSeriesFilterResponse pickTimeSeriesFilter) {
            $.pickTimeSeriesFilter = pickTimeSeriesFilter;
            return this;
        }

        public Builder secondaryAggregation(AggregationResponse secondaryAggregation) {
            $.secondaryAggregation = secondaryAggregation;
            return this;
        }

        public TimeSeriesFilterRatioResponse build() {
            $.denominator = Objects.requireNonNull($.denominator, "expected parameter 'denominator' to be non-null");
            $.numerator = Objects.requireNonNull($.numerator, "expected parameter 'numerator' to be non-null");
            $.pickTimeSeriesFilter = Objects.requireNonNull($.pickTimeSeriesFilter, "expected parameter 'pickTimeSeriesFilter' to be non-null");
            $.secondaryAggregation = Objects.requireNonNull($.secondaryAggregation, "expected parameter 'secondaryAggregation' to be non-null");
            return $;
        }
    }

}
