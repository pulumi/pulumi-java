// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1beta1.inputs.X509ExtensionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the &#34;common name&#34; in the distinguished name).
 * 
 */
public final class SubjectAltNamesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SubjectAltNamesResponse Empty = new SubjectAltNamesResponse();

    /**
     * Contains additional subject alternative name values.
     * 
     */
    @Import(name="customSans", required=true)
    private List<X509ExtensionResponse> customSans;

    /**
     * @return Contains additional subject alternative name values.
     * 
     */
    public List<X509ExtensionResponse> customSans() {
        return this.customSans;
    }

    /**
     * Contains only valid, fully-qualified host names.
     * 
     */
    @Import(name="dnsNames", required=true)
    private List<String> dnsNames;

    /**
     * @return Contains only valid, fully-qualified host names.
     * 
     */
    public List<String> dnsNames() {
        return this.dnsNames;
    }

    /**
     * Contains only valid RFC 2822 E-mail addresses.
     * 
     */
    @Import(name="emailAddresses", required=true)
    private List<String> emailAddresses;

    /**
     * @return Contains only valid RFC 2822 E-mail addresses.
     * 
     */
    public List<String> emailAddresses() {
        return this.emailAddresses;
    }

    /**
     * Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
     * 
     */
    @Import(name="ipAddresses", required=true)
    private List<String> ipAddresses;

    /**
     * @return Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
     * 
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Contains only valid RFC 3986 URIs.
     * 
     */
    @Import(name="uris", required=true)
    private List<String> uris;

    /**
     * @return Contains only valid RFC 3986 URIs.
     * 
     */
    public List<String> uris() {
        return this.uris;
    }

    private SubjectAltNamesResponse() {}

    private SubjectAltNamesResponse(SubjectAltNamesResponse $) {
        this.customSans = $.customSans;
        this.dnsNames = $.dnsNames;
        this.emailAddresses = $.emailAddresses;
        this.ipAddresses = $.ipAddresses;
        this.uris = $.uris;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubjectAltNamesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubjectAltNamesResponse $;

        public Builder() {
            $ = new SubjectAltNamesResponse();
        }

        public Builder(SubjectAltNamesResponse defaults) {
            $ = new SubjectAltNamesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param customSans Contains additional subject alternative name values.
         * 
         * @return builder
         * 
         */
        public Builder customSans(List<X509ExtensionResponse> customSans) {
            $.customSans = customSans;
            return this;
        }

        /**
         * @param customSans Contains additional subject alternative name values.
         * 
         * @return builder
         * 
         */
        public Builder customSans(X509ExtensionResponse... customSans) {
            return customSans(List.of(customSans));
        }

        /**
         * @param dnsNames Contains only valid, fully-qualified host names.
         * 
         * @return builder
         * 
         */
        public Builder dnsNames(List<String> dnsNames) {
            $.dnsNames = dnsNames;
            return this;
        }

        /**
         * @param dnsNames Contains only valid, fully-qualified host names.
         * 
         * @return builder
         * 
         */
        public Builder dnsNames(String... dnsNames) {
            return dnsNames(List.of(dnsNames));
        }

        /**
         * @param emailAddresses Contains only valid RFC 2822 E-mail addresses.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(List<String> emailAddresses) {
            $.emailAddresses = emailAddresses;
            return this;
        }

        /**
         * @param emailAddresses Contains only valid RFC 2822 E-mail addresses.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(String... emailAddresses) {
            return emailAddresses(List.of(emailAddresses));
        }

        /**
         * @param ipAddresses Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(List<String> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param uris Contains only valid RFC 3986 URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(List<String> uris) {
            $.uris = uris;
            return this;
        }

        /**
         * @param uris Contains only valid RFC 3986 URIs.
         * 
         * @return builder
         * 
         */
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        public SubjectAltNamesResponse build() {
            $.customSans = Objects.requireNonNull($.customSans, "expected parameter 'customSans' to be non-null");
            $.dnsNames = Objects.requireNonNull($.dnsNames, "expected parameter 'dnsNames' to be non-null");
            $.emailAddresses = Objects.requireNonNull($.emailAddresses, "expected parameter 'emailAddresses' to be non-null");
            $.ipAddresses = Objects.requireNonNull($.ipAddresses, "expected parameter 'ipAddresses' to be non-null");
            $.uris = Objects.requireNonNull($.uris, "expected parameter 'uris' to be non-null");
            return $;
        }
    }

}
