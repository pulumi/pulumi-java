// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v1.outputs.AggregationResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class RatioPartResponse {
    /**
     * @return By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     * 
     */
    private final AggregationResponse aggregation;
    /**
     * @return The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     * 
     */
    private final String filter;

    @CustomType.Constructor
    private RatioPartResponse(
        @CustomType.Parameter("aggregation") AggregationResponse aggregation,
        @CustomType.Parameter("filter") String filter) {
        this.aggregation = aggregation;
        this.filter = filter;
    }

    /**
     * @return By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     * 
     */
    public AggregationResponse aggregation() {
        return this.aggregation;
    }
    /**
     * @return The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     * 
     */
    public String filter() {
        return this.filter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RatioPartResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregationResponse aggregation;
        private String filter;

        public Builder() {
    	      // Empty
        }

        public Builder(RatioPartResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.filter = defaults.filter;
        }

        public Builder aggregation(AggregationResponse aggregation) {
            this.aggregation = Objects.requireNonNull(aggregation);
            return this;
        }
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }        public RatioPartResponse build() {
            return new RatioPartResponse(aggregation, filter);
        }
    }
}
