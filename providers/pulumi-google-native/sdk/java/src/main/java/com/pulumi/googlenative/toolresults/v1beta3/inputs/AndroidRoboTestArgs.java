// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes.
 * 
 */
public final class AndroidRoboTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final AndroidRoboTestArgs Empty = new AndroidRoboTestArgs();

    /**
     * The initial activity that should be used to start the app. Optional
     * 
     */
    @Import(name="appInitialActivity")
    private @Nullable Output<String> appInitialActivity;

    /**
     * @return The initial activity that should be used to start the app. Optional
     * 
     */
    public Optional<Output<String>> appInitialActivity() {
        return Optional.ofNullable(this.appInitialActivity);
    }

    /**
     * The java package for the bootstrap. Optional
     * 
     */
    @Import(name="bootstrapPackageId")
    private @Nullable Output<String> bootstrapPackageId;

    /**
     * @return The java package for the bootstrap. Optional
     * 
     */
    public Optional<Output<String>> bootstrapPackageId() {
        return Optional.ofNullable(this.bootstrapPackageId);
    }

    /**
     * The runner class for the bootstrap. Optional
     * 
     */
    @Import(name="bootstrapRunnerClass")
    private @Nullable Output<String> bootstrapRunnerClass;

    /**
     * @return The runner class for the bootstrap. Optional
     * 
     */
    public Optional<Output<String>> bootstrapRunnerClass() {
        return Optional.ofNullable(this.bootstrapRunnerClass);
    }

    /**
     * The max depth of the traversal stack Robo can explore. Optional
     * 
     */
    @Import(name="maxDepth")
    private @Nullable Output<Integer> maxDepth;

    /**
     * @return The max depth of the traversal stack Robo can explore. Optional
     * 
     */
    public Optional<Output<Integer>> maxDepth() {
        return Optional.ofNullable(this.maxDepth);
    }

    /**
     * The max number of steps/actions Robo can execute. Default is no limit (0). Optional
     * 
     */
    @Import(name="maxSteps")
    private @Nullable Output<Integer> maxSteps;

    /**
     * @return The max number of steps/actions Robo can execute. Default is no limit (0). Optional
     * 
     */
    public Optional<Output<Integer>> maxSteps() {
        return Optional.ofNullable(this.maxSteps);
    }

    private AndroidRoboTestArgs() {}

    private AndroidRoboTestArgs(AndroidRoboTestArgs $) {
        this.appInitialActivity = $.appInitialActivity;
        this.bootstrapPackageId = $.bootstrapPackageId;
        this.bootstrapRunnerClass = $.bootstrapRunnerClass;
        this.maxDepth = $.maxDepth;
        this.maxSteps = $.maxSteps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidRoboTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidRoboTestArgs $;

        public Builder() {
            $ = new AndroidRoboTestArgs();
        }

        public Builder(AndroidRoboTestArgs defaults) {
            $ = new AndroidRoboTestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appInitialActivity The initial activity that should be used to start the app. Optional
         * 
         * @return builder
         * 
         */
        public Builder appInitialActivity(@Nullable Output<String> appInitialActivity) {
            $.appInitialActivity = appInitialActivity;
            return this;
        }

        /**
         * @param appInitialActivity The initial activity that should be used to start the app. Optional
         * 
         * @return builder
         * 
         */
        public Builder appInitialActivity(String appInitialActivity) {
            return appInitialActivity(Output.of(appInitialActivity));
        }

        /**
         * @param bootstrapPackageId The java package for the bootstrap. Optional
         * 
         * @return builder
         * 
         */
        public Builder bootstrapPackageId(@Nullable Output<String> bootstrapPackageId) {
            $.bootstrapPackageId = bootstrapPackageId;
            return this;
        }

        /**
         * @param bootstrapPackageId The java package for the bootstrap. Optional
         * 
         * @return builder
         * 
         */
        public Builder bootstrapPackageId(String bootstrapPackageId) {
            return bootstrapPackageId(Output.of(bootstrapPackageId));
        }

        /**
         * @param bootstrapRunnerClass The runner class for the bootstrap. Optional
         * 
         * @return builder
         * 
         */
        public Builder bootstrapRunnerClass(@Nullable Output<String> bootstrapRunnerClass) {
            $.bootstrapRunnerClass = bootstrapRunnerClass;
            return this;
        }

        /**
         * @param bootstrapRunnerClass The runner class for the bootstrap. Optional
         * 
         * @return builder
         * 
         */
        public Builder bootstrapRunnerClass(String bootstrapRunnerClass) {
            return bootstrapRunnerClass(Output.of(bootstrapRunnerClass));
        }

        /**
         * @param maxDepth The max depth of the traversal stack Robo can explore. Optional
         * 
         * @return builder
         * 
         */
        public Builder maxDepth(@Nullable Output<Integer> maxDepth) {
            $.maxDepth = maxDepth;
            return this;
        }

        /**
         * @param maxDepth The max depth of the traversal stack Robo can explore. Optional
         * 
         * @return builder
         * 
         */
        public Builder maxDepth(Integer maxDepth) {
            return maxDepth(Output.of(maxDepth));
        }

        /**
         * @param maxSteps The max number of steps/actions Robo can execute. Default is no limit (0). Optional
         * 
         * @return builder
         * 
         */
        public Builder maxSteps(@Nullable Output<Integer> maxSteps) {
            $.maxSteps = maxSteps;
            return this;
        }

        /**
         * @param maxSteps The max number of steps/actions Robo can execute. Default is no limit (0). Optional
         * 
         * @return builder
         * 
         */
        public Builder maxSteps(Integer maxSteps) {
            return maxSteps(Output.of(maxSteps));
        }

        public AndroidRoboTestArgs build() {
            return $;
        }
    }

}
