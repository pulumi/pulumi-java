// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datastream_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * MySQL SSL configuration information.
 * 
 */
public final class MysqlSslConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final MysqlSslConfigResponse Empty = new MysqlSslConfigResponse();

    /**
     * Input only. PEM-encoded certificate of the CA that signed the source database server&#39;s certificate.
     * 
     */
    @Import(name="caCertificate", required=true)
    private String caCertificate;

    /**
     * @return Input only. PEM-encoded certificate of the CA that signed the source database server&#39;s certificate.
     * 
     */
    public String caCertificate() {
        return this.caCertificate;
    }

    /**
     * Indicates whether the ca_certificate field is set.
     * 
     */
    @Import(name="caCertificateSet", required=true)
    private Boolean caCertificateSet;

    /**
     * @return Indicates whether the ca_certificate field is set.
     * 
     */
    public Boolean caCertificateSet() {
        return this.caCertificateSet;
    }

    /**
     * Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the &#39;client_key&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    @Import(name="clientCertificate", required=true)
    private String clientCertificate;

    /**
     * @return Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the &#39;client_key&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * Indicates whether the client_certificate field is set.
     * 
     */
    @Import(name="clientCertificateSet", required=true)
    private Boolean clientCertificateSet;

    /**
     * @return Indicates whether the client_certificate field is set.
     * 
     */
    public Boolean clientCertificateSet() {
        return this.clientCertificateSet;
    }

    /**
     * Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    @Import(name="clientKey", required=true)
    private String clientKey;

    /**
     * @return Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; and the &#39;ca_certificate&#39; fields are mandatory.
     * 
     */
    public String clientKey() {
        return this.clientKey;
    }

    /**
     * Indicates whether the client_key field is set.
     * 
     */
    @Import(name="clientKeySet", required=true)
    private Boolean clientKeySet;

    /**
     * @return Indicates whether the client_key field is set.
     * 
     */
    public Boolean clientKeySet() {
        return this.clientKeySet;
    }

    private MysqlSslConfigResponse() {}

    private MysqlSslConfigResponse(MysqlSslConfigResponse $) {
        this.caCertificate = $.caCertificate;
        this.caCertificateSet = $.caCertificateSet;
        this.clientCertificate = $.clientCertificate;
        this.clientCertificateSet = $.clientCertificateSet;
        this.clientKey = $.clientKey;
        this.clientKeySet = $.clientKeySet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlSslConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlSslConfigResponse $;

        public Builder() {
            $ = new MysqlSslConfigResponse();
        }

        public Builder(MysqlSslConfigResponse defaults) {
            $ = new MysqlSslConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificate Input only. PEM-encoded certificate of the CA that signed the source database server&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificateSet Indicates whether the ca_certificate field is set.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateSet(Boolean caCertificateSet) {
            $.caCertificateSet = caCertificateSet;
            return this;
        }

        /**
         * @param clientCertificate Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the &#39;client_key&#39; and the &#39;ca_certificate&#39; fields are mandatory.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(String clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificateSet Indicates whether the client_certificate field is set.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateSet(Boolean clientCertificateSet) {
            $.clientCertificateSet = clientCertificateSet;
            return this;
        }

        /**
         * @param clientKey Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; and the &#39;ca_certificate&#39; fields are mandatory.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKeySet Indicates whether the client_key field is set.
         * 
         * @return builder
         * 
         */
        public Builder clientKeySet(Boolean clientKeySet) {
            $.clientKeySet = clientKeySet;
            return this;
        }

        public MysqlSslConfigResponse build() {
            $.caCertificate = Objects.requireNonNull($.caCertificate, "expected parameter 'caCertificate' to be non-null");
            $.caCertificateSet = Objects.requireNonNull($.caCertificateSet, "expected parameter 'caCertificateSet' to be non-null");
            $.clientCertificate = Objects.requireNonNull($.clientCertificate, "expected parameter 'clientCertificate' to be non-null");
            $.clientCertificateSet = Objects.requireNonNull($.clientCertificateSet, "expected parameter 'clientCertificateSet' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.clientKeySet = Objects.requireNonNull($.clientKeySet, "expected parameter 'clientKeySet' to be non-null");
            return $;
        }
    }

}
