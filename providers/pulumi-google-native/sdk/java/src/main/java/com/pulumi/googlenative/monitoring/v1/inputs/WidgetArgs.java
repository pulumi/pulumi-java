// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.inputs.AlertChartArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.CollapsibleGroupArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.EmptyArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.LogsPanelArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.ScorecardArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.TextArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.TimeSeriesTableArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.XyChartArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Widget contains a single dashboard component and configuration of how to present the component in the dashboard.
 * 
 */
public final class WidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final WidgetArgs Empty = new WidgetArgs();

    /**
     * A chart of alert policy data.
     * 
     */
    @Import(name="alertChart")
    private @Nullable Output<AlertChartArgs> alertChart;

    /**
     * @return A chart of alert policy data.
     * 
     */
    public Optional<Output<AlertChartArgs>> alertChart() {
        return Optional.ofNullable(this.alertChart);
    }

    /**
     * A blank space.
     * 
     */
    @Import(name="blank")
    private @Nullable Output<EmptyArgs> blank;

    /**
     * @return A blank space.
     * 
     */
    public Optional<Output<EmptyArgs>> blank() {
        return Optional.ofNullable(this.blank);
    }

    /**
     * A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
     * 
     */
    @Import(name="collapsibleGroup")
    private @Nullable Output<CollapsibleGroupArgs> collapsibleGroup;

    /**
     * @return A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
     * 
     */
    public Optional<Output<CollapsibleGroupArgs>> collapsibleGroup() {
        return Optional.ofNullable(this.collapsibleGroup);
    }

    /**
     * A widget that shows a stream of logs.
     * 
     */
    @Import(name="logsPanel")
    private @Nullable Output<LogsPanelArgs> logsPanel;

    /**
     * @return A widget that shows a stream of logs.
     * 
     */
    public Optional<Output<LogsPanelArgs>> logsPanel() {
        return Optional.ofNullable(this.logsPanel);
    }

    /**
     * A scorecard summarizing time series data.
     * 
     */
    @Import(name="scorecard")
    private @Nullable Output<ScorecardArgs> scorecard;

    /**
     * @return A scorecard summarizing time series data.
     * 
     */
    public Optional<Output<ScorecardArgs>> scorecard() {
        return Optional.ofNullable(this.scorecard);
    }

    /**
     * A raw string or markdown displaying textual content.
     * 
     */
    @Import(name="text")
    private @Nullable Output<TextArgs> text;

    /**
     * @return A raw string or markdown displaying textual content.
     * 
     */
    public Optional<Output<TextArgs>> text() {
        return Optional.ofNullable(this.text);
    }

    /**
     * A widget that displays time series data in a tabular format.
     * 
     */
    @Import(name="timeSeriesTable")
    private @Nullable Output<TimeSeriesTableArgs> timeSeriesTable;

    /**
     * @return A widget that displays time series data in a tabular format.
     * 
     */
    public Optional<Output<TimeSeriesTableArgs>> timeSeriesTable() {
        return Optional.ofNullable(this.timeSeriesTable);
    }

    /**
     * Optional. The title of the widget.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Optional. The title of the widget.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * A chart of time series data.
     * 
     */
    @Import(name="xyChart")
    private @Nullable Output<XyChartArgs> xyChart;

    /**
     * @return A chart of time series data.
     * 
     */
    public Optional<Output<XyChartArgs>> xyChart() {
        return Optional.ofNullable(this.xyChart);
    }

    private WidgetArgs() {}

    private WidgetArgs(WidgetArgs $) {
        this.alertChart = $.alertChart;
        this.blank = $.blank;
        this.collapsibleGroup = $.collapsibleGroup;
        this.logsPanel = $.logsPanel;
        this.scorecard = $.scorecard;
        this.text = $.text;
        this.timeSeriesTable = $.timeSeriesTable;
        this.title = $.title;
        this.xyChart = $.xyChart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WidgetArgs $;

        public Builder() {
            $ = new WidgetArgs();
        }

        public Builder(WidgetArgs defaults) {
            $ = new WidgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertChart A chart of alert policy data.
         * 
         * @return builder
         * 
         */
        public Builder alertChart(@Nullable Output<AlertChartArgs> alertChart) {
            $.alertChart = alertChart;
            return this;
        }

        /**
         * @param alertChart A chart of alert policy data.
         * 
         * @return builder
         * 
         */
        public Builder alertChart(AlertChartArgs alertChart) {
            return alertChart(Output.of(alertChart));
        }

        /**
         * @param blank A blank space.
         * 
         * @return builder
         * 
         */
        public Builder blank(@Nullable Output<EmptyArgs> blank) {
            $.blank = blank;
            return this;
        }

        /**
         * @param blank A blank space.
         * 
         * @return builder
         * 
         */
        public Builder blank(EmptyArgs blank) {
            return blank(Output.of(blank));
        }

        /**
         * @param collapsibleGroup A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
         * 
         * @return builder
         * 
         */
        public Builder collapsibleGroup(@Nullable Output<CollapsibleGroupArgs> collapsibleGroup) {
            $.collapsibleGroup = collapsibleGroup;
            return this;
        }

        /**
         * @param collapsibleGroup A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
         * 
         * @return builder
         * 
         */
        public Builder collapsibleGroup(CollapsibleGroupArgs collapsibleGroup) {
            return collapsibleGroup(Output.of(collapsibleGroup));
        }

        /**
         * @param logsPanel A widget that shows a stream of logs.
         * 
         * @return builder
         * 
         */
        public Builder logsPanel(@Nullable Output<LogsPanelArgs> logsPanel) {
            $.logsPanel = logsPanel;
            return this;
        }

        /**
         * @param logsPanel A widget that shows a stream of logs.
         * 
         * @return builder
         * 
         */
        public Builder logsPanel(LogsPanelArgs logsPanel) {
            return logsPanel(Output.of(logsPanel));
        }

        /**
         * @param scorecard A scorecard summarizing time series data.
         * 
         * @return builder
         * 
         */
        public Builder scorecard(@Nullable Output<ScorecardArgs> scorecard) {
            $.scorecard = scorecard;
            return this;
        }

        /**
         * @param scorecard A scorecard summarizing time series data.
         * 
         * @return builder
         * 
         */
        public Builder scorecard(ScorecardArgs scorecard) {
            return scorecard(Output.of(scorecard));
        }

        /**
         * @param text A raw string or markdown displaying textual content.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<TextArgs> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text A raw string or markdown displaying textual content.
         * 
         * @return builder
         * 
         */
        public Builder text(TextArgs text) {
            return text(Output.of(text));
        }

        /**
         * @param timeSeriesTable A widget that displays time series data in a tabular format.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesTable(@Nullable Output<TimeSeriesTableArgs> timeSeriesTable) {
            $.timeSeriesTable = timeSeriesTable;
            return this;
        }

        /**
         * @param timeSeriesTable A widget that displays time series data in a tabular format.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesTable(TimeSeriesTableArgs timeSeriesTable) {
            return timeSeriesTable(Output.of(timeSeriesTable));
        }

        /**
         * @param title Optional. The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Optional. The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param xyChart A chart of time series data.
         * 
         * @return builder
         * 
         */
        public Builder xyChart(@Nullable Output<XyChartArgs> xyChart) {
            $.xyChart = xyChart;
            return this;
        }

        /**
         * @param xyChart A chart of time series data.
         * 
         * @return builder
         * 
         */
        public Builder xyChart(XyChartArgs xyChart) {
            return xyChart(Output.of(xyChart));
        }

        public WidgetArgs build() {
            return $;
        }
    }

}
