// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
 * 
 */
public final class SubsettingResponse extends com.pulumi.resources.InvokeArgs {

    public static final SubsettingResponse Empty = new SubsettingResponse();

    @Import(name="policy", required=true)
    private String policy;

    public String policy() {
        return this.policy;
    }

    /**
     * The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
     * 
     */
    @Import(name="subsetSize", required=true)
    private Integer subsetSize;

    /**
     * @return The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
     * 
     */
    public Integer subsetSize() {
        return this.subsetSize;
    }

    private SubsettingResponse() {}

    private SubsettingResponse(SubsettingResponse $) {
        this.policy = $.policy;
        this.subsetSize = $.subsetSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubsettingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubsettingResponse $;

        public Builder() {
            $ = new SubsettingResponse();
        }

        public Builder(SubsettingResponse defaults) {
            $ = new SubsettingResponse(Objects.requireNonNull(defaults));
        }

        public Builder policy(String policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param subsetSize The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder subsetSize(Integer subsetSize) {
            $.subsetSize = subsetSize;
            return this;
        }

        public SubsettingResponse build() {
            $.policy = Objects.requireNonNull($.policy, "expected parameter 'policy' to be non-null");
            $.subsetSize = Objects.requireNonNull($.subsetSize, "expected parameter 'subsetSize' to be non-null");
            return $;
        }
    }

}
