// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.notebooks_v1.inputs.LocalDiskInitializeParamsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A Local attached disk resource.
 * 
 */
public final class LocalDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocalDiskArgs Empty = new LocalDiskArgs();

    /**
     * Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
     * 
     */
    @Import(name="initializeParams")
      private final @Nullable Output<LocalDiskInitializeParamsArgs> initializeParams;

    public Output<LocalDiskInitializeParamsArgs> initializeParams() {
        return this.initializeParams == null ? Codegen.empty() : this.initializeParams;
    }

    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * NVME * SCSI
     * 
     */
    @Import(name="interface")
      private final @Nullable Output<String> interface_;

    public Output<String> interface_() {
        return this.interface_ == null ? Codegen.empty() : this.interface_;
    }

    /**
     * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: * READ_ONLY * READ_WRITE
     * 
     */
    @Import(name="mode")
      private final @Nullable Output<String> mode;

    public Output<String> mode() {
        return this.mode == null ? Codegen.empty() : this.mode;
    }

    /**
     * Specifies a valid partial or full URL to an existing Persistent Disk resource.
     * 
     */
    @Import(name="source")
      private final @Nullable Output<String> source;

    public Output<String> source() {
        return this.source == null ? Codegen.empty() : this.source;
    }

    /**
     * Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT. Valid values: * PERSISTENT * SCRATCH
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public LocalDiskArgs(
        @Nullable Output<LocalDiskInitializeParamsArgs> initializeParams,
        @Nullable Output<String> interface_,
        @Nullable Output<String> mode,
        @Nullable Output<String> source,
        @Nullable Output<String> type) {
        this.initializeParams = initializeParams;
        this.interface_ = interface_;
        this.mode = mode;
        this.source = source;
        this.type = type;
    }

    private LocalDiskArgs() {
        this.initializeParams = Codegen.empty();
        this.interface_ = Codegen.empty();
        this.mode = Codegen.empty();
        this.source = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocalDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<LocalDiskInitializeParamsArgs> initializeParams;
        private @Nullable Output<String> interface_;
        private @Nullable Output<String> mode;
        private @Nullable Output<String> source;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(LocalDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initializeParams = defaults.initializeParams;
    	      this.interface_ = defaults.interface_;
    	      this.mode = defaults.mode;
    	      this.source = defaults.source;
    	      this.type = defaults.type;
        }

        public Builder initializeParams(@Nullable Output<LocalDiskInitializeParamsArgs> initializeParams) {
            this.initializeParams = initializeParams;
            return this;
        }
        public Builder initializeParams(@Nullable LocalDiskInitializeParamsArgs initializeParams) {
            this.initializeParams = Codegen.ofNullable(initializeParams);
            return this;
        }
        public Builder interface_(@Nullable Output<String> interface_) {
            this.interface_ = interface_;
            return this;
        }
        public Builder interface_(@Nullable String interface_) {
            this.interface_ = Codegen.ofNullable(interface_);
            return this;
        }
        public Builder mode(@Nullable Output<String> mode) {
            this.mode = mode;
            return this;
        }
        public Builder mode(@Nullable String mode) {
            this.mode = Codegen.ofNullable(mode);
            return this;
        }
        public Builder source(@Nullable Output<String> source) {
            this.source = source;
            return this;
        }
        public Builder source(@Nullable String source) {
            this.source = Codegen.ofNullable(source);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public LocalDiskArgs build() {
            return new LocalDiskArgs(initializeParams, interface_, mode, source, type);
        }
    }
}
