// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2FileSetResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Options defining a file or a set of files within a Google Cloud Storage bucket.
 * 
 */
public final class GooglePrivacyDlpV2CloudStorageOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2CloudStorageOptionsResponse Empty = new GooglePrivacyDlpV2CloudStorageOptionsResponse();

    /**
     * Max number of bytes to scan from a file. If a scanned file&#39;s size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     * 
     */
    @Import(name="bytesLimitPerFile", required=true)
    private String bytesLimitPerFile;

    public String bytesLimitPerFile() {
        return this.bytesLimitPerFile;
    }

    /**
     * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     * 
     */
    @Import(name="bytesLimitPerFilePercent", required=true)
    private Integer bytesLimitPerFilePercent;

    public Integer bytesLimitPerFilePercent() {
        return this.bytesLimitPerFilePercent;
    }

    /**
     * The set of one or more files to scan.
     * 
     */
    @Import(name="fileSet", required=true)
    private GooglePrivacyDlpV2FileSetResponse fileSet;

    public GooglePrivacyDlpV2FileSetResponse fileSet() {
        return this.fileSet;
    }

    /**
     * List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to &#39;global&#39;, &#39;us&#39;, &#39;asia&#39;, and &#39;europe&#39;.
     * 
     */
    @Import(name="fileTypes", required=true)
    private List<String> fileTypes;

    public List<String> fileTypes() {
        return this.fileTypes;
    }

    /**
     * Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
     * 
     */
    @Import(name="filesLimitPercent", required=true)
    private Integer filesLimitPercent;

    public Integer filesLimitPercent() {
        return this.filesLimitPercent;
    }

    @Import(name="sampleMethod", required=true)
    private String sampleMethod;

    public String sampleMethod() {
        return this.sampleMethod;
    }

    private GooglePrivacyDlpV2CloudStorageOptionsResponse() {}

    private GooglePrivacyDlpV2CloudStorageOptionsResponse(GooglePrivacyDlpV2CloudStorageOptionsResponse $) {
        this.bytesLimitPerFile = $.bytesLimitPerFile;
        this.bytesLimitPerFilePercent = $.bytesLimitPerFilePercent;
        this.fileSet = $.fileSet;
        this.fileTypes = $.fileTypes;
        this.filesLimitPercent = $.filesLimitPercent;
        this.sampleMethod = $.sampleMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2CloudStorageOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2CloudStorageOptionsResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2CloudStorageOptionsResponse();
        }

        public Builder(GooglePrivacyDlpV2CloudStorageOptionsResponse defaults) {
            $ = new GooglePrivacyDlpV2CloudStorageOptionsResponse(Objects.requireNonNull(defaults));
        }

        public Builder bytesLimitPerFile(String bytesLimitPerFile) {
            $.bytesLimitPerFile = bytesLimitPerFile;
            return this;
        }

        public Builder bytesLimitPerFilePercent(Integer bytesLimitPerFilePercent) {
            $.bytesLimitPerFilePercent = bytesLimitPerFilePercent;
            return this;
        }

        public Builder fileSet(GooglePrivacyDlpV2FileSetResponse fileSet) {
            $.fileSet = fileSet;
            return this;
        }

        public Builder fileTypes(List<String> fileTypes) {
            $.fileTypes = fileTypes;
            return this;
        }

        public Builder fileTypes(String... fileTypes) {
            return fileTypes(List.of(fileTypes));
        }

        public Builder filesLimitPercent(Integer filesLimitPercent) {
            $.filesLimitPercent = filesLimitPercent;
            return this;
        }

        public Builder sampleMethod(String sampleMethod) {
            $.sampleMethod = sampleMethod;
            return this;
        }

        public GooglePrivacyDlpV2CloudStorageOptionsResponse build() {
            $.bytesLimitPerFile = Objects.requireNonNull($.bytesLimitPerFile, "expected parameter 'bytesLimitPerFile' to be non-null");
            $.bytesLimitPerFilePercent = Objects.requireNonNull($.bytesLimitPerFilePercent, "expected parameter 'bytesLimitPerFilePercent' to be non-null");
            $.fileSet = Objects.requireNonNull($.fileSet, "expected parameter 'fileSet' to be non-null");
            $.fileTypes = Objects.requireNonNull($.fileTypes, "expected parameter 'fileTypes' to be non-null");
            $.filesLimitPercent = Objects.requireNonNull($.filesLimitPercent, "expected parameter 'filesLimitPercent' to be non-null");
            $.sampleMethod = Objects.requireNonNull($.sampleMethod, "expected parameter 'sampleMethod' to be non-null");
            return $;
        }
    }

}
