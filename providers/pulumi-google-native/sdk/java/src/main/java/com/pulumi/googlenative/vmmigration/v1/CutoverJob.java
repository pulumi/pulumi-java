// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.vmmigration.v1.CutoverJobArgs;
import com.pulumi.googlenative.vmmigration.v1.outputs.ComputeEngineTargetDetailsResponse;
import com.pulumi.googlenative.vmmigration.v1.outputs.StatusResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Initiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated.
 * Auto-naming is currently not supported for this resource.
 * Note - this resource&#39;s API doesn&#39;t support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 * 
 */
@ResourceType(type="google-native:vmmigration/v1:CutoverJob")
public class CutoverJob extends com.pulumi.resources.CustomResource {
    /**
     * Details of the target VM in Compute Engine.
     * 
     */
    @Export(name="computeEngineTargetDetails", type=ComputeEngineTargetDetailsResponse.class, parameters={})
    private Output<ComputeEngineTargetDetailsResponse> computeEngineTargetDetails;

    /**
     * @return Details of the target VM in Compute Engine.
     * 
     */
    public Output<ComputeEngineTargetDetailsResponse> computeEngineTargetDetails() {
        return this.computeEngineTargetDetails;
    }
    /**
     * The time the cutover job was created (as an API call, not when it was actually created in the target).
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time the cutover job was created (as an API call, not when it was actually created in the target).
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Required. The cutover job identifier.
     * 
     */
    @Export(name="cutoverJobId", type=String.class, parameters={})
    private Output<String> cutoverJobId;

    /**
     * @return Required. The cutover job identifier.
     * 
     */
    public Output<String> cutoverJobId() {
        return this.cutoverJobId;
    }
    /**
     * The time the cutover job had finished.
     * 
     */
    @Export(name="endTime", type=String.class, parameters={})
    private Output<String> endTime;

    /**
     * @return The time the cutover job had finished.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }
    /**
     * Provides details for the errors that led to the Cutover Job&#39;s state.
     * 
     */
    @Export(name="error", type=StatusResponse.class, parameters={})
    private Output<StatusResponse> error;

    /**
     * @return Provides details for the errors that led to the Cutover Job&#39;s state.
     * 
     */
    public Output<StatusResponse> error() {
        return this.error;
    }
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }
    @Export(name="migratingVmId", type=String.class, parameters={})
    private Output<String> migratingVmId;

    public Output<String> migratingVmId() {
        return this.migratingVmId;
    }
    /**
     * The name of the cutover job.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the cutover job.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The current progress in percentage of the cutover job.
     * 
     */
    @Export(name="progressPercent", type=Integer.class, parameters={})
    private Output<Integer> progressPercent;

    /**
     * @return The current progress in percentage of the cutover job.
     * 
     */
    public Output<Integer> progressPercent() {
        return this.progressPercent;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Export(name="requestId", type=String.class, parameters={})
    private Output</* @Nullable */ String> requestId;

    /**
     * @return A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Output<Optional<String>> requestId() {
        return Codegen.optional(this.requestId);
    }
    @Export(name="sourceId", type=String.class, parameters={})
    private Output<String> sourceId;

    public Output<String> sourceId() {
        return this.sourceId;
    }
    /**
     * State of the cutover job.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return State of the cutover job.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * A message providing possible extra details about the current state.
     * 
     */
    @Export(name="stateMessage", type=String.class, parameters={})
    private Output<String> stateMessage;

    /**
     * @return A message providing possible extra details about the current state.
     * 
     */
    public Output<String> stateMessage() {
        return this.stateMessage;
    }
    /**
     * The time the state was last updated.
     * 
     */
    @Export(name="stateTime", type=String.class, parameters={})
    private Output<String> stateTime;

    /**
     * @return The time the state was last updated.
     * 
     */
    public Output<String> stateTime() {
        return this.stateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CutoverJob(String name) {
        this(name, CutoverJobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CutoverJob(String name, CutoverJobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CutoverJob(String name, CutoverJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:vmmigration/v1:CutoverJob", name, args == null ? CutoverJobArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CutoverJob(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:vmmigration/v1:CutoverJob", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CutoverJob get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CutoverJob(name, id, options);
    }
}
