// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.PackageIssueResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Used by Occurrence to point to where the vulnerability exists and how to fix it.
 * 
 */
public final class VulnerabilityDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final VulnerabilityDetailsResponse Empty = new VulnerabilityDetailsResponse();

    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    @Import(name="cvssScore", required=true)
    private Double cvssScore;

    /**
     * @return The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    public Double cvssScore() {
        return this.cvssScore;
    }

    /**
     * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity", required=true)
    private String effectiveSeverity;

    /**
     * @return The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
     * 
     */
    public String effectiveSeverity() {
        return this.effectiveSeverity;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
    private List<PackageIssueResponse> packageIssue;

    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    public List<PackageIssueResponse> packageIssue() {
        return this.packageIssue;
    }

    /**
     * The note provider assigned Severity of the vulnerability.
     * 
     */
    @Import(name="severity", required=true)
    private String severity;

    /**
     * @return The note provider assigned Severity of the vulnerability.
     * 
     */
    public String severity() {
        return this.severity;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
     * 
     */
    public String type() {
        return this.type;
    }

    private VulnerabilityDetailsResponse() {}

    private VulnerabilityDetailsResponse(VulnerabilityDetailsResponse $) {
        this.cvssScore = $.cvssScore;
        this.effectiveSeverity = $.effectiveSeverity;
        this.packageIssue = $.packageIssue;
        this.severity = $.severity;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityDetailsResponse $;

        public Builder() {
            $ = new VulnerabilityDetailsResponse();
        }

        public Builder(VulnerabilityDetailsResponse defaults) {
            $ = new VulnerabilityDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cvssScore The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
         * 
         * @return builder
         * 
         */
        public Builder cvssScore(Double cvssScore) {
            $.cvssScore = cvssScore;
            return this;
        }

        /**
         * @param effectiveSeverity The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
         * 
         * @return builder
         * 
         */
        public Builder effectiveSeverity(String effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(List<PackageIssueResponse> packageIssue) {
            $.packageIssue = packageIssue;
            return this;
        }

        /**
         * @param packageIssue The set of affected locations and their fixes (if available) within the associated resource.
         * 
         * @return builder
         * 
         */
        public Builder packageIssue(PackageIssueResponse... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }

        /**
         * @param severity The note provider assigned Severity of the vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param type The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public VulnerabilityDetailsResponse build() {
            $.cvssScore = Objects.requireNonNull($.cvssScore, "expected parameter 'cvssScore' to be non-null");
            $.effectiveSeverity = Objects.requireNonNull($.effectiveSeverity, "expected parameter 'effectiveSeverity' to be non-null");
            $.packageIssue = Objects.requireNonNull($.packageIssue, "expected parameter 'packageIssue' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
