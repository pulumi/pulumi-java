// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder.v1.inputs.AnimationEndArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.AnimationFadeArgs;
import com.pulumi.googlenative.transcoder.v1.inputs.AnimationStaticArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Animation types.
 * 
 */
public final class AnimationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnimationArgs Empty = new AnimationArgs();

    /**
     * End previous animation.
     * 
     */
    @Import(name="animationEnd")
    private @Nullable Output<AnimationEndArgs> animationEnd;

    /**
     * @return End previous animation.
     * 
     */
    public Optional<Output<AnimationEndArgs>> animationEnd() {
        return Optional.ofNullable(this.animationEnd);
    }

    /**
     * Display overlay object with fade animation.
     * 
     */
    @Import(name="animationFade")
    private @Nullable Output<AnimationFadeArgs> animationFade;

    /**
     * @return Display overlay object with fade animation.
     * 
     */
    public Optional<Output<AnimationFadeArgs>> animationFade() {
        return Optional.ofNullable(this.animationFade);
    }

    /**
     * Display static overlay object.
     * 
     */
    @Import(name="animationStatic")
    private @Nullable Output<AnimationStaticArgs> animationStatic;

    /**
     * @return Display static overlay object.
     * 
     */
    public Optional<Output<AnimationStaticArgs>> animationStatic() {
        return Optional.ofNullable(this.animationStatic);
    }

    private AnimationArgs() {}

    private AnimationArgs(AnimationArgs $) {
        this.animationEnd = $.animationEnd;
        this.animationFade = $.animationFade;
        this.animationStatic = $.animationStatic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnimationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnimationArgs $;

        public Builder() {
            $ = new AnimationArgs();
        }

        public Builder(AnimationArgs defaults) {
            $ = new AnimationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param animationEnd End previous animation.
         * 
         * @return builder
         * 
         */
        public Builder animationEnd(@Nullable Output<AnimationEndArgs> animationEnd) {
            $.animationEnd = animationEnd;
            return this;
        }

        /**
         * @param animationEnd End previous animation.
         * 
         * @return builder
         * 
         */
        public Builder animationEnd(AnimationEndArgs animationEnd) {
            return animationEnd(Output.of(animationEnd));
        }

        /**
         * @param animationFade Display overlay object with fade animation.
         * 
         * @return builder
         * 
         */
        public Builder animationFade(@Nullable Output<AnimationFadeArgs> animationFade) {
            $.animationFade = animationFade;
            return this;
        }

        /**
         * @param animationFade Display overlay object with fade animation.
         * 
         * @return builder
         * 
         */
        public Builder animationFade(AnimationFadeArgs animationFade) {
            return animationFade(Output.of(animationFade));
        }

        /**
         * @param animationStatic Display static overlay object.
         * 
         * @return builder
         * 
         */
        public Builder animationStatic(@Nullable Output<AnimationStaticArgs> animationStatic) {
            $.animationStatic = animationStatic;
            return this;
        }

        /**
         * @param animationStatic Display static overlay object.
         * 
         * @return builder
         * 
         */
        public Builder animationStatic(AnimationStaticArgs animationStatic) {
            return animationStatic(Output.of(animationStatic));
        }

        public AnimationArgs build() {
            return $;
        }
    }

}
