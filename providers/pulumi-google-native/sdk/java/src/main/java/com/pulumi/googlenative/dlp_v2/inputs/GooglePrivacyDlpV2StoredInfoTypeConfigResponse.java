// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2DictionaryResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2RegexResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
 * 
 */
public final class GooglePrivacyDlpV2StoredInfoTypeConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2StoredInfoTypeConfigResponse Empty = new GooglePrivacyDlpV2StoredInfoTypeConfigResponse();

    /**
     * Description of the StoredInfoType (max 256 characters).
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Description of the StoredInfoType (max 256 characters).
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * Store dictionary-based CustomInfoType.
     * 
     */
    @Import(name="dictionary", required=true)
    private GooglePrivacyDlpV2DictionaryResponse dictionary;

    /**
     * @return Store dictionary-based CustomInfoType.
     * 
     */
    public GooglePrivacyDlpV2DictionaryResponse dictionary() {
        return this.dictionary;
    }

    /**
     * Display name of the StoredInfoType (max 256 characters).
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return Display name of the StoredInfoType (max 256 characters).
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * StoredInfoType where findings are defined by a dictionary of phrases.
     * 
     */
    @Import(name="largeCustomDictionary", required=true)
    private GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse largeCustomDictionary;

    /**
     * @return StoredInfoType where findings are defined by a dictionary of phrases.
     * 
     */
    public GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse largeCustomDictionary() {
        return this.largeCustomDictionary;
    }

    /**
     * Store regular expression-based StoredInfoType.
     * 
     */
    @Import(name="regex", required=true)
    private GooglePrivacyDlpV2RegexResponse regex;

    /**
     * @return Store regular expression-based StoredInfoType.
     * 
     */
    public GooglePrivacyDlpV2RegexResponse regex() {
        return this.regex;
    }

    private GooglePrivacyDlpV2StoredInfoTypeConfigResponse() {}

    private GooglePrivacyDlpV2StoredInfoTypeConfigResponse(GooglePrivacyDlpV2StoredInfoTypeConfigResponse $) {
        this.description = $.description;
        this.dictionary = $.dictionary;
        this.displayName = $.displayName;
        this.largeCustomDictionary = $.largeCustomDictionary;
        this.regex = $.regex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2StoredInfoTypeConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2StoredInfoTypeConfigResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2StoredInfoTypeConfigResponse();
        }

        public Builder(GooglePrivacyDlpV2StoredInfoTypeConfigResponse defaults) {
            $ = new GooglePrivacyDlpV2StoredInfoTypeConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the StoredInfoType (max 256 characters).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param dictionary Store dictionary-based CustomInfoType.
         * 
         * @return builder
         * 
         */
        public Builder dictionary(GooglePrivacyDlpV2DictionaryResponse dictionary) {
            $.dictionary = dictionary;
            return this;
        }

        /**
         * @param displayName Display name of the StoredInfoType (max 256 characters).
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param largeCustomDictionary StoredInfoType where findings are defined by a dictionary of phrases.
         * 
         * @return builder
         * 
         */
        public Builder largeCustomDictionary(GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse largeCustomDictionary) {
            $.largeCustomDictionary = largeCustomDictionary;
            return this;
        }

        /**
         * @param regex Store regular expression-based StoredInfoType.
         * 
         * @return builder
         * 
         */
        public Builder regex(GooglePrivacyDlpV2RegexResponse regex) {
            $.regex = regex;
            return this;
        }

        public GooglePrivacyDlpV2StoredInfoTypeConfigResponse build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.dictionary = Objects.requireNonNull($.dictionary, "expected parameter 'dictionary' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.largeCustomDictionary = Objects.requireNonNull($.largeCustomDictionary, "expected parameter 'largeCustomDictionary' to be non-null");
            $.regex = Objects.requireNonNull($.regex, "expected parameter 'regex' to be non-null");
            return $;
        }
    }

}
