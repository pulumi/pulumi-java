// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults.v1beta3.enums.OutcomeSummary;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.FailureDetailArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.InconclusiveDetailArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.SkippedDetailArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.SuccessDetailArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Interprets a result so that humans and machines can act on it.
 * 
 */
public final class OutcomeArgs extends com.pulumi.resources.ResourceArgs {

    public static final OutcomeArgs Empty = new OutcomeArgs();

    /**
     * More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE. Optional
     * 
     */
    @Import(name="failureDetail")
    private @Nullable Output<FailureDetailArgs> failureDetail;

    /**
     * @return More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE. Optional
     * 
     */
    public Optional<Output<FailureDetailArgs>> failureDetail() {
        return Optional.ofNullable(this.failureDetail);
    }

    /**
     * More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE. Optional
     * 
     */
    @Import(name="inconclusiveDetail")
    private @Nullable Output<InconclusiveDetailArgs> inconclusiveDetail;

    /**
     * @return More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE. Optional
     * 
     */
    public Optional<Output<InconclusiveDetailArgs>> inconclusiveDetail() {
        return Optional.ofNullable(this.inconclusiveDetail);
    }

    /**
     * More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED. Optional
     * 
     */
    @Import(name="skippedDetail")
    private @Nullable Output<SkippedDetailArgs> skippedDetail;

    /**
     * @return More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED. Optional
     * 
     */
    public Optional<Output<SkippedDetailArgs>> skippedDetail() {
        return Optional.ofNullable(this.skippedDetail);
    }

    /**
     * More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS. Optional
     * 
     */
    @Import(name="successDetail")
    private @Nullable Output<SuccessDetailArgs> successDetail;

    /**
     * @return More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS. Optional
     * 
     */
    public Optional<Output<SuccessDetailArgs>> successDetail() {
        return Optional.ofNullable(this.successDetail);
    }

    /**
     * The simplest way to interpret a result. Required
     * 
     */
    @Import(name="summary")
    private @Nullable Output<OutcomeSummary> summary;

    /**
     * @return The simplest way to interpret a result. Required
     * 
     */
    public Optional<Output<OutcomeSummary>> summary() {
        return Optional.ofNullable(this.summary);
    }

    private OutcomeArgs() {}

    private OutcomeArgs(OutcomeArgs $) {
        this.failureDetail = $.failureDetail;
        this.inconclusiveDetail = $.inconclusiveDetail;
        this.skippedDetail = $.skippedDetail;
        this.successDetail = $.successDetail;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutcomeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutcomeArgs $;

        public Builder() {
            $ = new OutcomeArgs();
        }

        public Builder(OutcomeArgs defaults) {
            $ = new OutcomeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failureDetail More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE. Optional
         * 
         * @return builder
         * 
         */
        public Builder failureDetail(@Nullable Output<FailureDetailArgs> failureDetail) {
            $.failureDetail = failureDetail;
            return this;
        }

        /**
         * @param failureDetail More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE. Optional
         * 
         * @return builder
         * 
         */
        public Builder failureDetail(FailureDetailArgs failureDetail) {
            return failureDetail(Output.of(failureDetail));
        }

        /**
         * @param inconclusiveDetail More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE. Optional
         * 
         * @return builder
         * 
         */
        public Builder inconclusiveDetail(@Nullable Output<InconclusiveDetailArgs> inconclusiveDetail) {
            $.inconclusiveDetail = inconclusiveDetail;
            return this;
        }

        /**
         * @param inconclusiveDetail More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE. Optional
         * 
         * @return builder
         * 
         */
        public Builder inconclusiveDetail(InconclusiveDetailArgs inconclusiveDetail) {
            return inconclusiveDetail(Output.of(inconclusiveDetail));
        }

        /**
         * @param skippedDetail More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED. Optional
         * 
         * @return builder
         * 
         */
        public Builder skippedDetail(@Nullable Output<SkippedDetailArgs> skippedDetail) {
            $.skippedDetail = skippedDetail;
            return this;
        }

        /**
         * @param skippedDetail More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED. Optional
         * 
         * @return builder
         * 
         */
        public Builder skippedDetail(SkippedDetailArgs skippedDetail) {
            return skippedDetail(Output.of(skippedDetail));
        }

        /**
         * @param successDetail More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS. Optional
         * 
         * @return builder
         * 
         */
        public Builder successDetail(@Nullable Output<SuccessDetailArgs> successDetail) {
            $.successDetail = successDetail;
            return this;
        }

        /**
         * @param successDetail More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS. Optional
         * 
         * @return builder
         * 
         */
        public Builder successDetail(SuccessDetailArgs successDetail) {
            return successDetail(Output.of(successDetail));
        }

        /**
         * @param summary The simplest way to interpret a result. Required
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<OutcomeSummary> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The simplest way to interpret a result. Required
         * 
         * @return builder
         * 
         */
        public Builder summary(OutcomeSummary summary) {
            return summary(Output.of(summary));
        }

        public OutcomeArgs build() {
            return $;
        }
    }

}
