// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.osconfig.v1beta.outputs.AssignmentGroupLabelResponse;
import com.pulumi.googlenative.osconfig.v1beta.outputs.AssignmentOsTypeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AssignmentResponse {
    /**
     * @return Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example &#34;env=prod or env=staging&#34;.
     * 
     */
    private final List<AssignmentGroupLabelResponse> groupLabels;
    /**
     * @return Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix=&#34;prod-&#34;. Only supported for project-level policies.
     * 
     */
    private final List<String> instanceNamePrefixes;
    /**
     * @return Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
     * 
     */
    private final List<String> instances;
    /**
     * @return Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
     * 
     */
    private final List<AssignmentOsTypeResponse> osTypes;
    /**
     * @return Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     * 
     */
    private final List<String> zones;

    @CustomType.Constructor
    private AssignmentResponse(
        @CustomType.Parameter("groupLabels") List<AssignmentGroupLabelResponse> groupLabels,
        @CustomType.Parameter("instanceNamePrefixes") List<String> instanceNamePrefixes,
        @CustomType.Parameter("instances") List<String> instances,
        @CustomType.Parameter("osTypes") List<AssignmentOsTypeResponse> osTypes,
        @CustomType.Parameter("zones") List<String> zones) {
        this.groupLabels = groupLabels;
        this.instanceNamePrefixes = instanceNamePrefixes;
        this.instances = instances;
        this.osTypes = osTypes;
        this.zones = zones;
    }

    /**
     * @return Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example &#34;env=prod or env=staging&#34;.
     * 
     */
    public List<AssignmentGroupLabelResponse> groupLabels() {
        return this.groupLabels;
    }
    /**
     * @return Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix=&#34;prod-&#34;. Only supported for project-level policies.
     * 
     */
    public List<String> instanceNamePrefixes() {
        return this.instanceNamePrefixes;
    }
    /**
     * @return Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
     * 
     */
    public List<String> instances() {
        return this.instances;
    }
    /**
     * @return Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
     * 
     */
    public List<AssignmentOsTypeResponse> osTypes() {
        return this.osTypes;
    }
    /**
     * @return Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssignmentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AssignmentGroupLabelResponse> groupLabels;
        private List<String> instanceNamePrefixes;
        private List<String> instances;
        private List<AssignmentOsTypeResponse> osTypes;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(AssignmentResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupLabels = defaults.groupLabels;
    	      this.instanceNamePrefixes = defaults.instanceNamePrefixes;
    	      this.instances = defaults.instances;
    	      this.osTypes = defaults.osTypes;
    	      this.zones = defaults.zones;
        }

        public Builder groupLabels(List<AssignmentGroupLabelResponse> groupLabels) {
            this.groupLabels = Objects.requireNonNull(groupLabels);
            return this;
        }
        public Builder groupLabels(AssignmentGroupLabelResponse... groupLabels) {
            return groupLabels(List.of(groupLabels));
        }
        public Builder instanceNamePrefixes(List<String> instanceNamePrefixes) {
            this.instanceNamePrefixes = Objects.requireNonNull(instanceNamePrefixes);
            return this;
        }
        public Builder instanceNamePrefixes(String... instanceNamePrefixes) {
            return instanceNamePrefixes(List.of(instanceNamePrefixes));
        }
        public Builder instances(List<String> instances) {
            this.instances = Objects.requireNonNull(instances);
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        public Builder osTypes(List<AssignmentOsTypeResponse> osTypes) {
            this.osTypes = Objects.requireNonNull(osTypes);
            return this;
        }
        public Builder osTypes(AssignmentOsTypeResponse... osTypes) {
            return osTypes(List.of(osTypes));
        }
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public AssignmentResponse build() {
            return new AssignmentResponse(groupLabels, instanceNamePrefixes, instances, osTypes, zones);
        }
    }
}
