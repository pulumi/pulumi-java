// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v3beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow.v3beta1.enums.SessionEntityTypeEntityOverrideMode;
import com.pulumi.googlenative.dialogflow.v3beta1.inputs.GoogleCloudDialogflowCxV3beta1EntityTypeEntityArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SessionEntityTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SessionEntityTypeArgs Empty = new SessionEntityTypeArgs();

    @Import(name="agentId", required=true)
    private Output<String> agentId;

    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * The collection of entities to override or supplement the custom entity type.
     * 
     */
    @Import(name="entities", required=true)
    private Output<List<GoogleCloudDialogflowCxV3beta1EntityTypeEntityArgs>> entities;

    /**
     * @return The collection of entities to override or supplement the custom entity type.
     * 
     */
    public Output<List<GoogleCloudDialogflowCxV3beta1EntityTypeEntityArgs>> entities() {
        return this.entities;
    }

    /**
     * Indicates whether the additional data should override or supplement the custom entity type definition.
     * 
     */
    @Import(name="entityOverrideMode", required=true)
    private Output<SessionEntityTypeEntityOverrideMode> entityOverrideMode;

    /**
     * @return Indicates whether the additional data should override or supplement the custom entity type definition.
     * 
     */
    public Output<SessionEntityTypeEntityOverrideMode> entityOverrideMode() {
        return this.entityOverrideMode;
    }

    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    public Output<String> environmentId() {
        return this.environmentId;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique identifier of the session entity type. Format: `projects//locations//agents//sessions//entityTypes/` or `projects//locations//agents//environments//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default &#39;draft&#39; environment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique identifier of the session entity type. Format: `projects//locations//agents//sessions//entityTypes/` or `projects//locations//agents//environments//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default &#39;draft&#39; environment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="sessionId", required=true)
    private Output<String> sessionId;

    public Output<String> sessionId() {
        return this.sessionId;
    }

    private SessionEntityTypeArgs() {}

    private SessionEntityTypeArgs(SessionEntityTypeArgs $) {
        this.agentId = $.agentId;
        this.entities = $.entities;
        this.entityOverrideMode = $.entityOverrideMode;
        this.environmentId = $.environmentId;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.sessionId = $.sessionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SessionEntityTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SessionEntityTypeArgs $;

        public Builder() {
            $ = new SessionEntityTypeArgs();
        }

        public Builder(SessionEntityTypeArgs defaults) {
            $ = new SessionEntityTypeArgs(Objects.requireNonNull(defaults));
        }

        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param entities The collection of entities to override or supplement the custom entity type.
         * 
         * @return builder
         * 
         */
        public Builder entities(Output<List<GoogleCloudDialogflowCxV3beta1EntityTypeEntityArgs>> entities) {
            $.entities = entities;
            return this;
        }

        /**
         * @param entities The collection of entities to override or supplement the custom entity type.
         * 
         * @return builder
         * 
         */
        public Builder entities(List<GoogleCloudDialogflowCxV3beta1EntityTypeEntityArgs> entities) {
            return entities(Output.of(entities));
        }

        /**
         * @param entities The collection of entities to override or supplement the custom entity type.
         * 
         * @return builder
         * 
         */
        public Builder entities(GoogleCloudDialogflowCxV3beta1EntityTypeEntityArgs... entities) {
            return entities(List.of(entities));
        }

        /**
         * @param entityOverrideMode Indicates whether the additional data should override or supplement the custom entity type definition.
         * 
         * @return builder
         * 
         */
        public Builder entityOverrideMode(Output<SessionEntityTypeEntityOverrideMode> entityOverrideMode) {
            $.entityOverrideMode = entityOverrideMode;
            return this;
        }

        /**
         * @param entityOverrideMode Indicates whether the additional data should override or supplement the custom entity type definition.
         * 
         * @return builder
         * 
         */
        public Builder entityOverrideMode(SessionEntityTypeEntityOverrideMode entityOverrideMode) {
            return entityOverrideMode(Output.of(entityOverrideMode));
        }

        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique identifier of the session entity type. Format: `projects//locations//agents//sessions//entityTypes/` or `projects//locations//agents//environments//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default &#39;draft&#39; environment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique identifier of the session entity type. Format: `projects//locations//agents//sessions//entityTypes/` or `projects//locations//agents//environments//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default &#39;draft&#39; environment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder sessionId(Output<String> sessionId) {
            $.sessionId = sessionId;
            return this;
        }

        public Builder sessionId(String sessionId) {
            return sessionId(Output.of(sessionId));
        }

        public SessionEntityTypeArgs build() {
            $.agentId = Objects.requireNonNull($.agentId, "expected parameter 'agentId' to be non-null");
            $.entities = Objects.requireNonNull($.entities, "expected parameter 'entities' to be non-null");
            $.entityOverrideMode = Objects.requireNonNull($.entityOverrideMode, "expected parameter 'entityOverrideMode' to be non-null");
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            $.sessionId = Objects.requireNonNull($.sessionId, "expected parameter 'sessionId' to be non-null");
            return $;
        }
    }

}
