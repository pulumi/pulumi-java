// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults.v1beta3.enums.HistoryTestPlatform;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HistoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final HistoryArgs Empty = new HistoryArgs();

    /**
     * A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
     * 
     */
    @Import(name="historyId")
    private @Nullable Output<String> historyId;

    /**
     * @return A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
     * 
     */
    public Optional<Output<String>> historyId() {
        return Optional.ofNullable(this.historyId);
    }

    /**
     * A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
     * 
     */
    @Import(name="testPlatform")
    private @Nullable Output<HistoryTestPlatform> testPlatform;

    /**
     * @return The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
     * 
     */
    public Optional<Output<HistoryTestPlatform>> testPlatform() {
        return Optional.ofNullable(this.testPlatform);
    }

    private HistoryArgs() {}

    private HistoryArgs(HistoryArgs $) {
        this.displayName = $.displayName;
        this.historyId = $.historyId;
        this.name = $.name;
        this.project = $.project;
        this.requestId = $.requestId;
        this.testPlatform = $.testPlatform;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HistoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HistoryArgs $;

        public Builder() {
            $ = new HistoryArgs();
        }

        public Builder(HistoryArgs defaults) {
            $ = new HistoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param historyId A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
         * 
         * @return builder
         * 
         */
        public Builder historyId(@Nullable Output<String> historyId) {
            $.historyId = historyId;
            return this;
        }

        /**
         * @param historyId A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
         * 
         * @return builder
         * 
         */
        public Builder historyId(String historyId) {
            return historyId(Output.of(historyId));
        }

        /**
         * @param name A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param testPlatform The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
         * 
         * @return builder
         * 
         */
        public Builder testPlatform(@Nullable Output<HistoryTestPlatform> testPlatform) {
            $.testPlatform = testPlatform;
            return this;
        }

        /**
         * @param testPlatform The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
         * 
         * @return builder
         * 
         */
        public Builder testPlatform(HistoryTestPlatform testPlatform) {
            return testPlatform(Output.of(testPlatform));
        }

        public HistoryArgs build() {
            return $;
        }
    }

}
