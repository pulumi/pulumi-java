// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v1alpha1.outputs.ContainerResponse;
import com.pulumi.googlenative.run.v1alpha1.outputs.VolumeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class InstanceSpecResponse {
    /**
     * @return Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
     * 
     */
    private final String activeDeadlineSeconds;
    /**
     * @return Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
     * 
     */
    private final List<ContainerResponse> containers;
    /**
     * @return Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
     * 
     */
    private final String restartPolicy;
    /**
     * @return Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project&#39;s default service account. +optional
     * 
     */
    private final String serviceAccountName;
    /**
     * @return Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
     * 
     */
    private final String terminationGracePeriodSeconds;
    /**
     * @return Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
     * 
     */
    private final List<VolumeResponse> volumes;

    @CustomType.Constructor
    private InstanceSpecResponse(
        @CustomType.Parameter("activeDeadlineSeconds") String activeDeadlineSeconds,
        @CustomType.Parameter("containers") List<ContainerResponse> containers,
        @CustomType.Parameter("restartPolicy") String restartPolicy,
        @CustomType.Parameter("serviceAccountName") String serviceAccountName,
        @CustomType.Parameter("terminationGracePeriodSeconds") String terminationGracePeriodSeconds,
        @CustomType.Parameter("volumes") List<VolumeResponse> volumes) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        this.containers = containers;
        this.restartPolicy = restartPolicy;
        this.serviceAccountName = serviceAccountName;
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        this.volumes = volumes;
    }

    /**
     * @return Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
     * 
     */
    public String activeDeadlineSeconds() {
        return this.activeDeadlineSeconds;
    }
    /**
     * @return Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
     * 
     */
    public List<ContainerResponse> containers() {
        return this.containers;
    }
    /**
     * @return Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
     * 
     */
    public String restartPolicy() {
        return this.restartPolicy;
    }
    /**
     * @return Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project&#39;s default service account. +optional
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }
    /**
     * @return Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
     * 
     */
    public String terminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds;
    }
    /**
     * @return Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String activeDeadlineSeconds;
        private List<ContainerResponse> containers;
        private String restartPolicy;
        private String serviceAccountName;
        private String terminationGracePeriodSeconds;
        private List<VolumeResponse> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeadlineSeconds = defaults.activeDeadlineSeconds;
    	      this.containers = defaults.containers;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder activeDeadlineSeconds(String activeDeadlineSeconds) {
            this.activeDeadlineSeconds = Objects.requireNonNull(activeDeadlineSeconds);
            return this;
        }
        public Builder containers(List<ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }
        public Builder containers(ContainerResponse... containers) {
            return containers(List.of(containers));
        }
        public Builder restartPolicy(String restartPolicy) {
            this.restartPolicy = Objects.requireNonNull(restartPolicy);
            return this;
        }
        public Builder serviceAccountName(String serviceAccountName) {
            this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
            return this;
        }
        public Builder terminationGracePeriodSeconds(String terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = Objects.requireNonNull(terminationGracePeriodSeconds);
            return this;
        }
        public Builder volumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }        public InstanceSpecResponse build() {
            return new InstanceSpecResponse(activeDeadlineSeconds, containers, restartPolicy, serviceAccountName, terminationGracePeriodSeconds, volumes);
        }
    }
}
