// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Custom static error page to be served when an error occurs.
 * 
 */
public final class ErrorHandlerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ErrorHandlerResponse Empty = new ErrorHandlerResponse();

    /**
     * Error condition this handler applies to.
     * 
     */
    @Import(name="errorCode", required=true)
    private String errorCode;

    /**
     * @return Error condition this handler applies to.
     * 
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * MIME type of file. Defaults to text/html.
     * 
     */
    @Import(name="mimeType", required=true)
    private String mimeType;

    /**
     * @return MIME type of file. Defaults to text/html.
     * 
     */
    public String mimeType() {
        return this.mimeType;
    }

    /**
     * Static file content to be served for this error.
     * 
     */
    @Import(name="staticFile", required=true)
    private String staticFile;

    /**
     * @return Static file content to be served for this error.
     * 
     */
    public String staticFile() {
        return this.staticFile;
    }

    private ErrorHandlerResponse() {}

    private ErrorHandlerResponse(ErrorHandlerResponse $) {
        this.errorCode = $.errorCode;
        this.mimeType = $.mimeType;
        this.staticFile = $.staticFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ErrorHandlerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ErrorHandlerResponse $;

        public Builder() {
            $ = new ErrorHandlerResponse();
        }

        public Builder(ErrorHandlerResponse defaults) {
            $ = new ErrorHandlerResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorCode Error condition this handler applies to.
         * 
         * @return builder
         * 
         */
        public Builder errorCode(String errorCode) {
            $.errorCode = errorCode;
            return this;
        }

        /**
         * @param mimeType MIME type of file. Defaults to text/html.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(String mimeType) {
            $.mimeType = mimeType;
            return this;
        }

        /**
         * @param staticFile Static file content to be served for this error.
         * 
         * @return builder
         * 
         */
        public Builder staticFile(String staticFile) {
            $.staticFile = staticFile;
            return this;
        }

        public ErrorHandlerResponse build() {
            $.errorCode = Objects.requireNonNull($.errorCode, "expected parameter 'errorCode' to be non-null");
            $.mimeType = Objects.requireNonNull($.mimeType, "expected parameter 'mimeType' to be non-null");
            $.staticFile = Objects.requireNonNull($.staticFile, "expected parameter 'staticFile' to be non-null");
            return $;
        }
    }

}
