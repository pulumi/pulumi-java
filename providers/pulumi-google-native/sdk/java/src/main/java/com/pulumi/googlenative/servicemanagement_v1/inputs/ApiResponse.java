// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.MethodResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.MixinResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.OptionResponse;
import com.pulumi.googlenative.servicemanagement_v1.inputs.SourceContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Api is a light-weight descriptor for an API Interface. Interfaces are also described as &#34;protocol buffer services&#34; in some contexts, such as by the &#34;service&#34; keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as &#34;APIs&#34; in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
 * 
 */
public final class ApiResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApiResponse Empty = new ApiResponse();

    /**
     * The methods of this interface, in unspecified order.
     * 
     */
    @Import(name="methods", required=true)
    private List<MethodResponse> methods;

    /**
     * @return The methods of this interface, in unspecified order.
     * 
     */
    public List<MethodResponse> methods() {
        return this.methods;
    }

    /**
     * Included interfaces. See Mixin.
     * 
     */
    @Import(name="mixins", required=true)
    private List<MixinResponse> mixins;

    /**
     * @return Included interfaces. See Mixin.
     * 
     */
    public List<MixinResponse> mixins() {
        return this.mixins;
    }

    /**
     * The fully qualified name of this interface, including package name followed by the interface&#39;s simple name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The fully qualified name of this interface, including package name followed by the interface&#39;s simple name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Any metadata attached to the interface.
     * 
     */
    @Import(name="options", required=true)
    private List<OptionResponse> options;

    /**
     * @return Any metadata attached to the interface.
     * 
     */
    public List<OptionResponse> options() {
        return this.options;
    }

    /**
     * Source context for the protocol buffer service represented by this message.
     * 
     */
    @Import(name="sourceContext", required=true)
    private SourceContextResponse sourceContext;

    /**
     * @return Source context for the protocol buffer service represented by this message.
     * 
     */
    public SourceContextResponse sourceContext() {
        return this.sourceContext;
    }

    /**
     * The source syntax of the service.
     * 
     */
    @Import(name="syntax", required=true)
    private String syntax;

    /**
     * @return The source syntax of the service.
     * 
     */
    public String syntax() {
        return this.syntax;
    }

    /**
     * A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    /**
     * @return A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces.
     * 
     */
    public String version() {
        return this.version;
    }

    private ApiResponse() {}

    private ApiResponse(ApiResponse $) {
        this.methods = $.methods;
        this.mixins = $.mixins;
        this.name = $.name;
        this.options = $.options;
        this.sourceContext = $.sourceContext;
        this.syntax = $.syntax;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiResponse $;

        public Builder() {
            $ = new ApiResponse();
        }

        public Builder(ApiResponse defaults) {
            $ = new ApiResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param methods The methods of this interface, in unspecified order.
         * 
         * @return builder
         * 
         */
        public Builder methods(List<MethodResponse> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods The methods of this interface, in unspecified order.
         * 
         * @return builder
         * 
         */
        public Builder methods(MethodResponse... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param mixins Included interfaces. See Mixin.
         * 
         * @return builder
         * 
         */
        public Builder mixins(List<MixinResponse> mixins) {
            $.mixins = mixins;
            return this;
        }

        /**
         * @param mixins Included interfaces. See Mixin.
         * 
         * @return builder
         * 
         */
        public Builder mixins(MixinResponse... mixins) {
            return mixins(List.of(mixins));
        }

        /**
         * @param name The fully qualified name of this interface, including package name followed by the interface&#39;s simple name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param options Any metadata attached to the interface.
         * 
         * @return builder
         * 
         */
        public Builder options(List<OptionResponse> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Any metadata attached to the interface.
         * 
         * @return builder
         * 
         */
        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }

        /**
         * @param sourceContext Source context for the protocol buffer service represented by this message.
         * 
         * @return builder
         * 
         */
        public Builder sourceContext(SourceContextResponse sourceContext) {
            $.sourceContext = sourceContext;
            return this;
        }

        /**
         * @param syntax The source syntax of the service.
         * 
         * @return builder
         * 
         */
        public Builder syntax(String syntax) {
            $.syntax = syntax;
            return this;
        }

        /**
         * @param version A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public ApiResponse build() {
            $.methods = Objects.requireNonNull($.methods, "expected parameter 'methods' to be non-null");
            $.mixins = Objects.requireNonNull($.mixins, "expected parameter 'mixins' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.sourceContext = Objects.requireNonNull($.sourceContext, "expected parameter 'sourceContext' to be non-null");
            $.syntax = Objects.requireNonNull($.syntax, "expected parameter 'syntax' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
