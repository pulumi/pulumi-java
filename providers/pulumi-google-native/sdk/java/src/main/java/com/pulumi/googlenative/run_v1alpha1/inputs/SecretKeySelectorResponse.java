// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1alpha1.inputs.LocalObjectReferenceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * SecretKeySelector selects a key of a Secret.
 * 
 */
public final class SecretKeySelectorResponse extends com.pulumi.resources.InvokeArgs {

    public static final SecretKeySelectorResponse Empty = new SecretKeySelectorResponse();

    /**
     * A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * This field should not be used directly as it is meant to be inlined directly into the message. Use the &#34;name&#34; field instead.
     * 
     */
    @Import(name="localObjectReference", required=true)
    private LocalObjectReferenceResponse localObjectReference;

    /**
     * @return This field should not be used directly as it is meant to be inlined directly into the message. Use the &#34;name&#34; field instead.
     * 
     */
    public LocalObjectReferenceResponse localObjectReference() {
        return this.localObjectReference;
    }

    /**
     * The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod&#39;s namespace to select from.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod&#39;s namespace to select from.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * (Optional) Specify whether the Secret or its key must be defined
     * 
     */
    @Import(name="optional", required=true)
    private Boolean optional;

    /**
     * @return (Optional) Specify whether the Secret or its key must be defined
     * 
     */
    public Boolean optional() {
        return this.optional;
    }

    private SecretKeySelectorResponse() {}

    private SecretKeySelectorResponse(SecretKeySelectorResponse $) {
        this.key = $.key;
        this.localObjectReference = $.localObjectReference;
        this.name = $.name;
        this.optional = $.optional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretKeySelectorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretKeySelectorResponse $;

        public Builder() {
            $ = new SecretKeySelectorResponse();
        }

        public Builder(SecretKeySelectorResponse defaults) {
            $ = new SecretKeySelectorResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param key A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param localObjectReference This field should not be used directly as it is meant to be inlined directly into the message. Use the &#34;name&#34; field instead.
         * 
         * @return builder
         * 
         */
        public Builder localObjectReference(LocalObjectReferenceResponse localObjectReference) {
            $.localObjectReference = localObjectReference;
            return this;
        }

        /**
         * @param name The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod&#39;s namespace to select from.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param optional (Optional) Specify whether the Secret or its key must be defined
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            $.optional = optional;
            return this;
        }

        public SecretKeySelectorResponse build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.localObjectReference = Objects.requireNonNull($.localObjectReference, "expected parameter 'localObjectReference' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.optional = Objects.requireNonNull($.optional, "expected parameter 'optional' to be non-null");
            return $;
        }
    }

}
