// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.beyondcorp.v1alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.beyondcorp.v1alpha.enums.ConfigTransportProtocol;
import com.pulumi.googlenative.beyondcorp.v1alpha.inputs.DestinationRouteArgs;
import java.util.List;
import java.util.Objects;


/**
 * The basic ingress config for ClientGateways.
 * 
 */
public final class ConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigArgs Empty = new ConfigArgs();

    /**
     * The settings used to configure basic ClientGateways.
     * 
     */
    @Import(name="destinationRoutes", required=true)
    private Output<List<DestinationRouteArgs>> destinationRoutes;

    /**
     * @return The settings used to configure basic ClientGateways.
     * 
     */
    public Output<List<DestinationRouteArgs>> destinationRoutes() {
        return this.destinationRoutes;
    }

    /**
     * Immutable. The transport protocol used between the client and the server.
     * 
     */
    @Import(name="transportProtocol", required=true)
    private Output<ConfigTransportProtocol> transportProtocol;

    /**
     * @return Immutable. The transport protocol used between the client and the server.
     * 
     */
    public Output<ConfigTransportProtocol> transportProtocol() {
        return this.transportProtocol;
    }

    private ConfigArgs() {}

    private ConfigArgs(ConfigArgs $) {
        this.destinationRoutes = $.destinationRoutes;
        this.transportProtocol = $.transportProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigArgs $;

        public Builder() {
            $ = new ConfigArgs();
        }

        public Builder(ConfigArgs defaults) {
            $ = new ConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationRoutes The settings used to configure basic ClientGateways.
         * 
         * @return builder
         * 
         */
        public Builder destinationRoutes(Output<List<DestinationRouteArgs>> destinationRoutes) {
            $.destinationRoutes = destinationRoutes;
            return this;
        }

        /**
         * @param destinationRoutes The settings used to configure basic ClientGateways.
         * 
         * @return builder
         * 
         */
        public Builder destinationRoutes(List<DestinationRouteArgs> destinationRoutes) {
            return destinationRoutes(Output.of(destinationRoutes));
        }

        /**
         * @param destinationRoutes The settings used to configure basic ClientGateways.
         * 
         * @return builder
         * 
         */
        public Builder destinationRoutes(DestinationRouteArgs... destinationRoutes) {
            return destinationRoutes(List.of(destinationRoutes));
        }

        /**
         * @param transportProtocol Immutable. The transport protocol used between the client and the server.
         * 
         * @return builder
         * 
         */
        public Builder transportProtocol(Output<ConfigTransportProtocol> transportProtocol) {
            $.transportProtocol = transportProtocol;
            return this;
        }

        /**
         * @param transportProtocol Immutable. The transport protocol used between the client and the server.
         * 
         * @return builder
         * 
         */
        public Builder transportProtocol(ConfigTransportProtocol transportProtocol) {
            return transportProtocol(Output.of(transportProtocol));
        }

        public ConfigArgs build() {
            $.destinationRoutes = Objects.requireNonNull($.destinationRoutes, "expected parameter 'destinationRoutes' to be non-null");
            $.transportProtocol = Objects.requireNonNull($.transportProtocol, "expected parameter 'transportProtocol' to be non-null");
            return $;
        }
    }

}
