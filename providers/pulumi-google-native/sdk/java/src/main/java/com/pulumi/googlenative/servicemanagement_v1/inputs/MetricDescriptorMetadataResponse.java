// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Additional annotations that can be used to guide the usage of a metric.
 * 
 */
public final class MetricDescriptorMetadataResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetricDescriptorMetadataResponse Empty = new MetricDescriptorMetadataResponse();

    /**
     * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     * 
     */
    @Import(name="ingestDelay", required=true)
    private String ingestDelay;

    /**
     * @return The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     * 
     */
    public String ingestDelay() {
        return this.ingestDelay;
    }

    /**
     * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     * 
     */
    @Import(name="samplePeriod", required=true)
    private String samplePeriod;

    /**
     * @return The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     * 
     */
    public String samplePeriod() {
        return this.samplePeriod;
    }

    private MetricDescriptorMetadataResponse() {}

    private MetricDescriptorMetadataResponse(MetricDescriptorMetadataResponse $) {
        this.ingestDelay = $.ingestDelay;
        this.samplePeriod = $.samplePeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricDescriptorMetadataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricDescriptorMetadataResponse $;

        public Builder() {
            $ = new MetricDescriptorMetadataResponse();
        }

        public Builder(MetricDescriptorMetadataResponse defaults) {
            $ = new MetricDescriptorMetadataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param ingestDelay The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
         * 
         * @return builder
         * 
         */
        public Builder ingestDelay(String ingestDelay) {
            $.ingestDelay = ingestDelay;
            return this;
        }

        /**
         * @param samplePeriod The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
         * 
         * @return builder
         * 
         */
        public Builder samplePeriod(String samplePeriod) {
            $.samplePeriod = samplePeriod;
            return this;
        }

        public MetricDescriptorMetadataResponse build() {
            $.ingestDelay = Objects.requireNonNull($.ingestDelay, "expected parameter 'ingestDelay' to be non-null");
            $.samplePeriod = Objects.requireNonNull($.samplePeriod, "expected parameter 'samplePeriod' to be non-null");
            return $;
        }
    }

}
