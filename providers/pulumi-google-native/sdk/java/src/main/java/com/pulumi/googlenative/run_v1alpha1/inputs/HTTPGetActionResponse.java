// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1alpha1.inputs.HTTPHeaderResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
 * 
 */
public final class HTTPGetActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final HTTPGetActionResponse Empty = new HTTPGetActionResponse();

    /**
     * (Optional) Host name to connect to, defaults to the pod IP. You probably want to set &#34;Host&#34; in httpHeaders instead.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    /**
     * @return (Optional) Host name to connect to, defaults to the pod IP. You probably want to set &#34;Host&#34; in httpHeaders instead.
     * 
     */
    public String host() {
        return this.host;
    }

    /**
     * (Optional) Custom headers to set in the request. HTTP allows repeated headers.
     * 
     */
    @Import(name="httpHeaders", required=true)
    private List<HTTPHeaderResponse> httpHeaders;

    /**
     * @return (Optional) Custom headers to set in the request. HTTP allows repeated headers.
     * 
     */
    public List<HTTPHeaderResponse> httpHeaders() {
        return this.httpHeaders;
    }

    /**
     * (Optional) Path to access on the HTTP server.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return (Optional) Path to access on the HTTP server.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
     * 
     */
    @Import(name="scheme", required=true)
    private String scheme;

    /**
     * @return (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
     * 
     */
    public String scheme() {
        return this.scheme;
    }

    private HTTPGetActionResponse() {}

    private HTTPGetActionResponse(HTTPGetActionResponse $) {
        this.host = $.host;
        this.httpHeaders = $.httpHeaders;
        this.path = $.path;
        this.scheme = $.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HTTPGetActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HTTPGetActionResponse $;

        public Builder() {
            $ = new HTTPGetActionResponse();
        }

        public Builder(HTTPGetActionResponse defaults) {
            $ = new HTTPGetActionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param host (Optional) Host name to connect to, defaults to the pod IP. You probably want to set &#34;Host&#34; in httpHeaders instead.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            $.host = host;
            return this;
        }

        /**
         * @param httpHeaders (Optional) Custom headers to set in the request. HTTP allows repeated headers.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(List<HTTPHeaderResponse> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders (Optional) Custom headers to set in the request. HTTP allows repeated headers.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(HTTPHeaderResponse... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }

        /**
         * @param path (Optional) Path to access on the HTTP server.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param scheme (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            $.scheme = scheme;
            return this;
        }

        public HTTPGetActionResponse build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.httpHeaders = Objects.requireNonNull($.httpHeaders, "expected parameter 'httpHeaders' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.scheme = Objects.requireNonNull($.scheme, "expected parameter 'scheme' to be non-null");
            return $;
        }
    }

}
