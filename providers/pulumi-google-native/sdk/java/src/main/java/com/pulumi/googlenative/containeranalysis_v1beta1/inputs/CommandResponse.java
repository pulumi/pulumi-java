// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Command describes a step performed as part of the build pipeline.
 * 
 */
public final class CommandResponse extends com.pulumi.resources.InvokeArgs {

    public static final CommandResponse Empty = new CommandResponse();

    /**
     * Command-line arguments used when executing this command.
     * 
     */
    @Import(name="args", required=true)
    private List<String> args;

    public List<String> args() {
        return this.args;
    }

    /**
     * Working directory (relative to project source root) used when running this command.
     * 
     */
    @Import(name="dir", required=true)
    private String dir;

    public String dir() {
        return this.dir;
    }

    /**
     * Environment variables set before running this command.
     * 
     */
    @Import(name="env", required=true)
    private List<String> env;

    public List<String> env() {
        return this.env;
    }

    /**
     * Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The ID(s) of the command(s) that this command depends on.
     * 
     */
    @Import(name="waitFor", required=true)
    private List<String> waitFor;

    public List<String> waitFor() {
        return this.waitFor;
    }

    private CommandResponse() {}

    private CommandResponse(CommandResponse $) {
        this.args = $.args;
        this.dir = $.dir;
        this.env = $.env;
        this.name = $.name;
        this.waitFor = $.waitFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommandResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommandResponse $;

        public Builder() {
            $ = new CommandResponse();
        }

        public Builder(CommandResponse defaults) {
            $ = new CommandResponse(Objects.requireNonNull(defaults));
        }

        public Builder args(List<String> args) {
            $.args = args;
            return this;
        }

        public Builder args(String... args) {
            return args(List.of(args));
        }

        public Builder dir(String dir) {
            $.dir = dir;
            return this;
        }

        public Builder env(List<String> env) {
            $.env = env;
            return this;
        }

        public Builder env(String... env) {
            return env(List.of(env));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder waitFor(List<String> waitFor) {
            $.waitFor = waitFor;
            return this;
        }

        public Builder waitFor(String... waitFor) {
            return waitFor(List.of(waitFor));
        }

        public CommandResponse build() {
            $.args = Objects.requireNonNull($.args, "expected parameter 'args' to be non-null");
            $.dir = Objects.requireNonNull($.dir, "expected parameter 'dir' to be non-null");
            $.env = Objects.requireNonNull($.env, "expected parameter 'env' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.waitFor = Objects.requireNonNull($.waitFor, "expected parameter 'waitFor' to be non-null");
            return $;
        }
    }

}
