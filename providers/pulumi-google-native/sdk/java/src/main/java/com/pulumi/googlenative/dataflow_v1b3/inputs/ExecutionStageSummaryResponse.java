// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow_v1b3.inputs.ComponentSourceResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.ComponentTransformResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.StageSourceResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
 * 
 */
public final class ExecutionStageSummaryResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExecutionStageSummaryResponse Empty = new ExecutionStageSummaryResponse();

    /**
     * Collections produced and consumed by component transforms of this stage.
     * 
     */
    @Import(name="componentSource", required=true)
    private List<ComponentSourceResponse> componentSource;

    /**
     * @return Collections produced and consumed by component transforms of this stage.
     * 
     */
    public List<ComponentSourceResponse> componentSource() {
        return this.componentSource;
    }

    /**
     * Transforms that comprise this execution stage.
     * 
     */
    @Import(name="componentTransform", required=true)
    private List<ComponentTransformResponse> componentTransform;

    /**
     * @return Transforms that comprise this execution stage.
     * 
     */
    public List<ComponentTransformResponse> componentTransform() {
        return this.componentTransform;
    }

    /**
     * Input sources for this stage.
     * 
     */
    @Import(name="inputSource", required=true)
    private List<StageSourceResponse> inputSource;

    /**
     * @return Input sources for this stage.
     * 
     */
    public List<StageSourceResponse> inputSource() {
        return this.inputSource;
    }

    /**
     * Type of transform this stage is executing.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    /**
     * @return Type of transform this stage is executing.
     * 
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Dataflow service generated name for this stage.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Dataflow service generated name for this stage.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Output sources for this stage.
     * 
     */
    @Import(name="outputSource", required=true)
    private List<StageSourceResponse> outputSource;

    /**
     * @return Output sources for this stage.
     * 
     */
    public List<StageSourceResponse> outputSource() {
        return this.outputSource;
    }

    /**
     * Other stages that must complete before this stage can run.
     * 
     */
    @Import(name="prerequisiteStage", required=true)
    private List<String> prerequisiteStage;

    /**
     * @return Other stages that must complete before this stage can run.
     * 
     */
    public List<String> prerequisiteStage() {
        return this.prerequisiteStage;
    }

    private ExecutionStageSummaryResponse() {}

    private ExecutionStageSummaryResponse(ExecutionStageSummaryResponse $) {
        this.componentSource = $.componentSource;
        this.componentTransform = $.componentTransform;
        this.inputSource = $.inputSource;
        this.kind = $.kind;
        this.name = $.name;
        this.outputSource = $.outputSource;
        this.prerequisiteStage = $.prerequisiteStage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecutionStageSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecutionStageSummaryResponse $;

        public Builder() {
            $ = new ExecutionStageSummaryResponse();
        }

        public Builder(ExecutionStageSummaryResponse defaults) {
            $ = new ExecutionStageSummaryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param componentSource Collections produced and consumed by component transforms of this stage.
         * 
         * @return builder
         * 
         */
        public Builder componentSource(List<ComponentSourceResponse> componentSource) {
            $.componentSource = componentSource;
            return this;
        }

        /**
         * @param componentSource Collections produced and consumed by component transforms of this stage.
         * 
         * @return builder
         * 
         */
        public Builder componentSource(ComponentSourceResponse... componentSource) {
            return componentSource(List.of(componentSource));
        }

        /**
         * @param componentTransform Transforms that comprise this execution stage.
         * 
         * @return builder
         * 
         */
        public Builder componentTransform(List<ComponentTransformResponse> componentTransform) {
            $.componentTransform = componentTransform;
            return this;
        }

        /**
         * @param componentTransform Transforms that comprise this execution stage.
         * 
         * @return builder
         * 
         */
        public Builder componentTransform(ComponentTransformResponse... componentTransform) {
            return componentTransform(List.of(componentTransform));
        }

        /**
         * @param inputSource Input sources for this stage.
         * 
         * @return builder
         * 
         */
        public Builder inputSource(List<StageSourceResponse> inputSource) {
            $.inputSource = inputSource;
            return this;
        }

        /**
         * @param inputSource Input sources for this stage.
         * 
         * @return builder
         * 
         */
        public Builder inputSource(StageSourceResponse... inputSource) {
            return inputSource(List.of(inputSource));
        }

        /**
         * @param kind Type of transform this stage is executing.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name Dataflow service generated name for this stage.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param outputSource Output sources for this stage.
         * 
         * @return builder
         * 
         */
        public Builder outputSource(List<StageSourceResponse> outputSource) {
            $.outputSource = outputSource;
            return this;
        }

        /**
         * @param outputSource Output sources for this stage.
         * 
         * @return builder
         * 
         */
        public Builder outputSource(StageSourceResponse... outputSource) {
            return outputSource(List.of(outputSource));
        }

        /**
         * @param prerequisiteStage Other stages that must complete before this stage can run.
         * 
         * @return builder
         * 
         */
        public Builder prerequisiteStage(List<String> prerequisiteStage) {
            $.prerequisiteStage = prerequisiteStage;
            return this;
        }

        /**
         * @param prerequisiteStage Other stages that must complete before this stage can run.
         * 
         * @return builder
         * 
         */
        public Builder prerequisiteStage(String... prerequisiteStage) {
            return prerequisiteStage(List.of(prerequisiteStage));
        }

        public ExecutionStageSummaryResponse build() {
            $.componentSource = Objects.requireNonNull($.componentSource, "expected parameter 'componentSource' to be non-null");
            $.componentTransform = Objects.requireNonNull($.componentTransform, "expected parameter 'componentTransform' to be non-null");
            $.inputSource = Objects.requireNonNull($.inputSource, "expected parameter 'inputSource' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.outputSource = Objects.requireNonNull($.outputSource, "expected parameter 'outputSource' to be non-null");
            $.prerequisiteStage = Objects.requireNonNull($.prerequisiteStage, "expected parameter 'prerequisiteStage' to be non-null");
            return $;
        }
    }

}
