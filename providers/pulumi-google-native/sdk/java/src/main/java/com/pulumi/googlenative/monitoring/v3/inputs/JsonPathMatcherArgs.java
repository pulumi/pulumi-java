// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v3.enums.JsonPathMatcherJsonMatcher;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
 * 
 */
public final class JsonPathMatcherArgs extends com.pulumi.resources.ResourceArgs {

    public static final JsonPathMatcherArgs Empty = new JsonPathMatcherArgs();

    /**
     * The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
     * 
     */
    @Import(name="jsonMatcher")
    private @Nullable Output<JsonPathMatcherJsonMatcher> jsonMatcher;

    /**
     * @return The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
     * 
     */
    public Optional<Output<JsonPathMatcherJsonMatcher>> jsonMatcher() {
        return Optional.ofNullable(this.jsonMatcher);
    }

    /**
     * JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
     * 
     */
    @Import(name="jsonPath")
    private @Nullable Output<String> jsonPath;

    /**
     * @return JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
     * 
     */
    public Optional<Output<String>> jsonPath() {
        return Optional.ofNullable(this.jsonPath);
    }

    private JsonPathMatcherArgs() {}

    private JsonPathMatcherArgs(JsonPathMatcherArgs $) {
        this.jsonMatcher = $.jsonMatcher;
        this.jsonPath = $.jsonPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JsonPathMatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JsonPathMatcherArgs $;

        public Builder() {
            $ = new JsonPathMatcherArgs();
        }

        public Builder(JsonPathMatcherArgs defaults) {
            $ = new JsonPathMatcherArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jsonMatcher The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
         * 
         * @return builder
         * 
         */
        public Builder jsonMatcher(@Nullable Output<JsonPathMatcherJsonMatcher> jsonMatcher) {
            $.jsonMatcher = jsonMatcher;
            return this;
        }

        /**
         * @param jsonMatcher The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
         * 
         * @return builder
         * 
         */
        public Builder jsonMatcher(JsonPathMatcherJsonMatcher jsonMatcher) {
            return jsonMatcher(Output.of(jsonMatcher));
        }

        /**
         * @param jsonPath JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
         * 
         * @return builder
         * 
         */
        public Builder jsonPath(@Nullable Output<String> jsonPath) {
            $.jsonPath = jsonPath;
            return this;
        }

        /**
         * @param jsonPath JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
         * 
         * @return builder
         * 
         */
        public Builder jsonPath(String jsonPath) {
            return jsonPath(Output.of(jsonPath));
        }

        public JsonPathMatcherArgs build() {
            return $;
        }
    }

}
