// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.ExplainQueryStepResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ExplainQueryStageResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExplainQueryStageResponse Empty = new ExplainQueryStageResponse();

    /**
     * Number of parallel input segments completed.
     * 
     */
    @Import(name="completedParallelInputs", required=true)
    private String completedParallelInputs;

    /**
     * @return Number of parallel input segments completed.
     * 
     */
    public String completedParallelInputs() {
        return this.completedParallelInputs;
    }

    /**
     * Milliseconds the average shard spent on CPU-bound tasks.
     * 
     */
    @Import(name="computeMsAvg", required=true)
    private String computeMsAvg;

    /**
     * @return Milliseconds the average shard spent on CPU-bound tasks.
     * 
     */
    public String computeMsAvg() {
        return this.computeMsAvg;
    }

    /**
     * Milliseconds the slowest shard spent on CPU-bound tasks.
     * 
     */
    @Import(name="computeMsMax", required=true)
    private String computeMsMax;

    /**
     * @return Milliseconds the slowest shard spent on CPU-bound tasks.
     * 
     */
    public String computeMsMax() {
        return this.computeMsMax;
    }

    /**
     * Relative amount of time the average shard spent on CPU-bound tasks.
     * 
     */
    @Import(name="computeRatioAvg", required=true)
    private Double computeRatioAvg;

    /**
     * @return Relative amount of time the average shard spent on CPU-bound tasks.
     * 
     */
    public Double computeRatioAvg() {
        return this.computeRatioAvg;
    }

    /**
     * Relative amount of time the slowest shard spent on CPU-bound tasks.
     * 
     */
    @Import(name="computeRatioMax", required=true)
    private Double computeRatioMax;

    /**
     * @return Relative amount of time the slowest shard spent on CPU-bound tasks.
     * 
     */
    public Double computeRatioMax() {
        return this.computeRatioMax;
    }

    /**
     * Stage end time represented as milliseconds since epoch.
     * 
     */
    @Import(name="endMs", required=true)
    private String endMs;

    /**
     * @return Stage end time represented as milliseconds since epoch.
     * 
     */
    public String endMs() {
        return this.endMs;
    }

    /**
     * IDs for stages that are inputs to this stage.
     * 
     */
    @Import(name="inputStages", required=true)
    private List<String> inputStages;

    /**
     * @return IDs for stages that are inputs to this stage.
     * 
     */
    public List<String> inputStages() {
        return this.inputStages;
    }

    /**
     * Human-readable name for stage.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Human-readable name for stage.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Number of parallel input segments to be processed.
     * 
     */
    @Import(name="parallelInputs", required=true)
    private String parallelInputs;

    /**
     * @return Number of parallel input segments to be processed.
     * 
     */
    public String parallelInputs() {
        return this.parallelInputs;
    }

    /**
     * Milliseconds the average shard spent reading input.
     * 
     */
    @Import(name="readMsAvg", required=true)
    private String readMsAvg;

    /**
     * @return Milliseconds the average shard spent reading input.
     * 
     */
    public String readMsAvg() {
        return this.readMsAvg;
    }

    /**
     * Milliseconds the slowest shard spent reading input.
     * 
     */
    @Import(name="readMsMax", required=true)
    private String readMsMax;

    /**
     * @return Milliseconds the slowest shard spent reading input.
     * 
     */
    public String readMsMax() {
        return this.readMsMax;
    }

    /**
     * Relative amount of time the average shard spent reading input.
     * 
     */
    @Import(name="readRatioAvg", required=true)
    private Double readRatioAvg;

    /**
     * @return Relative amount of time the average shard spent reading input.
     * 
     */
    public Double readRatioAvg() {
        return this.readRatioAvg;
    }

    /**
     * Relative amount of time the slowest shard spent reading input.
     * 
     */
    @Import(name="readRatioMax", required=true)
    private Double readRatioMax;

    /**
     * @return Relative amount of time the slowest shard spent reading input.
     * 
     */
    public Double readRatioMax() {
        return this.readRatioMax;
    }

    /**
     * Number of records read into the stage.
     * 
     */
    @Import(name="recordsRead", required=true)
    private String recordsRead;

    /**
     * @return Number of records read into the stage.
     * 
     */
    public String recordsRead() {
        return this.recordsRead;
    }

    /**
     * Number of records written by the stage.
     * 
     */
    @Import(name="recordsWritten", required=true)
    private String recordsWritten;

    /**
     * @return Number of records written by the stage.
     * 
     */
    public String recordsWritten() {
        return this.recordsWritten;
    }

    /**
     * Total number of bytes written to shuffle.
     * 
     */
    @Import(name="shuffleOutputBytes", required=true)
    private String shuffleOutputBytes;

    /**
     * @return Total number of bytes written to shuffle.
     * 
     */
    public String shuffleOutputBytes() {
        return this.shuffleOutputBytes;
    }

    /**
     * Total number of bytes written to shuffle and spilled to disk.
     * 
     */
    @Import(name="shuffleOutputBytesSpilled", required=true)
    private String shuffleOutputBytesSpilled;

    /**
     * @return Total number of bytes written to shuffle and spilled to disk.
     * 
     */
    public String shuffleOutputBytesSpilled() {
        return this.shuffleOutputBytesSpilled;
    }

    /**
     * Slot-milliseconds used by the stage.
     * 
     */
    @Import(name="slotMs", required=true)
    private String slotMs;

    /**
     * @return Slot-milliseconds used by the stage.
     * 
     */
    public String slotMs() {
        return this.slotMs;
    }

    /**
     * Stage start time represented as milliseconds since epoch.
     * 
     */
    @Import(name="startMs", required=true)
    private String startMs;

    /**
     * @return Stage start time represented as milliseconds since epoch.
     * 
     */
    public String startMs() {
        return this.startMs;
    }

    /**
     * Current status for the stage.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Current status for the stage.
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * List of operations within the stage in dependency order (approximately chronological).
     * 
     */
    @Import(name="steps", required=true)
    private List<ExplainQueryStepResponse> steps;

    /**
     * @return List of operations within the stage in dependency order (approximately chronological).
     * 
     */
    public List<ExplainQueryStepResponse> steps() {
        return this.steps;
    }

    /**
     * Milliseconds the average shard spent waiting to be scheduled.
     * 
     */
    @Import(name="waitMsAvg", required=true)
    private String waitMsAvg;

    /**
     * @return Milliseconds the average shard spent waiting to be scheduled.
     * 
     */
    public String waitMsAvg() {
        return this.waitMsAvg;
    }

    /**
     * Milliseconds the slowest shard spent waiting to be scheduled.
     * 
     */
    @Import(name="waitMsMax", required=true)
    private String waitMsMax;

    /**
     * @return Milliseconds the slowest shard spent waiting to be scheduled.
     * 
     */
    public String waitMsMax() {
        return this.waitMsMax;
    }

    /**
     * Relative amount of time the average shard spent waiting to be scheduled.
     * 
     */
    @Import(name="waitRatioAvg", required=true)
    private Double waitRatioAvg;

    /**
     * @return Relative amount of time the average shard spent waiting to be scheduled.
     * 
     */
    public Double waitRatioAvg() {
        return this.waitRatioAvg;
    }

    /**
     * Relative amount of time the slowest shard spent waiting to be scheduled.
     * 
     */
    @Import(name="waitRatioMax", required=true)
    private Double waitRatioMax;

    /**
     * @return Relative amount of time the slowest shard spent waiting to be scheduled.
     * 
     */
    public Double waitRatioMax() {
        return this.waitRatioMax;
    }

    /**
     * Milliseconds the average shard spent on writing output.
     * 
     */
    @Import(name="writeMsAvg", required=true)
    private String writeMsAvg;

    /**
     * @return Milliseconds the average shard spent on writing output.
     * 
     */
    public String writeMsAvg() {
        return this.writeMsAvg;
    }

    /**
     * Milliseconds the slowest shard spent on writing output.
     * 
     */
    @Import(name="writeMsMax", required=true)
    private String writeMsMax;

    /**
     * @return Milliseconds the slowest shard spent on writing output.
     * 
     */
    public String writeMsMax() {
        return this.writeMsMax;
    }

    /**
     * Relative amount of time the average shard spent on writing output.
     * 
     */
    @Import(name="writeRatioAvg", required=true)
    private Double writeRatioAvg;

    /**
     * @return Relative amount of time the average shard spent on writing output.
     * 
     */
    public Double writeRatioAvg() {
        return this.writeRatioAvg;
    }

    /**
     * Relative amount of time the slowest shard spent on writing output.
     * 
     */
    @Import(name="writeRatioMax", required=true)
    private Double writeRatioMax;

    /**
     * @return Relative amount of time the slowest shard spent on writing output.
     * 
     */
    public Double writeRatioMax() {
        return this.writeRatioMax;
    }

    private ExplainQueryStageResponse() {}

    private ExplainQueryStageResponse(ExplainQueryStageResponse $) {
        this.completedParallelInputs = $.completedParallelInputs;
        this.computeMsAvg = $.computeMsAvg;
        this.computeMsMax = $.computeMsMax;
        this.computeRatioAvg = $.computeRatioAvg;
        this.computeRatioMax = $.computeRatioMax;
        this.endMs = $.endMs;
        this.inputStages = $.inputStages;
        this.name = $.name;
        this.parallelInputs = $.parallelInputs;
        this.readMsAvg = $.readMsAvg;
        this.readMsMax = $.readMsMax;
        this.readRatioAvg = $.readRatioAvg;
        this.readRatioMax = $.readRatioMax;
        this.recordsRead = $.recordsRead;
        this.recordsWritten = $.recordsWritten;
        this.shuffleOutputBytes = $.shuffleOutputBytes;
        this.shuffleOutputBytesSpilled = $.shuffleOutputBytesSpilled;
        this.slotMs = $.slotMs;
        this.startMs = $.startMs;
        this.status = $.status;
        this.steps = $.steps;
        this.waitMsAvg = $.waitMsAvg;
        this.waitMsMax = $.waitMsMax;
        this.waitRatioAvg = $.waitRatioAvg;
        this.waitRatioMax = $.waitRatioMax;
        this.writeMsAvg = $.writeMsAvg;
        this.writeMsMax = $.writeMsMax;
        this.writeRatioAvg = $.writeRatioAvg;
        this.writeRatioMax = $.writeRatioMax;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExplainQueryStageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExplainQueryStageResponse $;

        public Builder() {
            $ = new ExplainQueryStageResponse();
        }

        public Builder(ExplainQueryStageResponse defaults) {
            $ = new ExplainQueryStageResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param completedParallelInputs Number of parallel input segments completed.
         * 
         * @return builder
         * 
         */
        public Builder completedParallelInputs(String completedParallelInputs) {
            $.completedParallelInputs = completedParallelInputs;
            return this;
        }

        /**
         * @param computeMsAvg Milliseconds the average shard spent on CPU-bound tasks.
         * 
         * @return builder
         * 
         */
        public Builder computeMsAvg(String computeMsAvg) {
            $.computeMsAvg = computeMsAvg;
            return this;
        }

        /**
         * @param computeMsMax Milliseconds the slowest shard spent on CPU-bound tasks.
         * 
         * @return builder
         * 
         */
        public Builder computeMsMax(String computeMsMax) {
            $.computeMsMax = computeMsMax;
            return this;
        }

        /**
         * @param computeRatioAvg Relative amount of time the average shard spent on CPU-bound tasks.
         * 
         * @return builder
         * 
         */
        public Builder computeRatioAvg(Double computeRatioAvg) {
            $.computeRatioAvg = computeRatioAvg;
            return this;
        }

        /**
         * @param computeRatioMax Relative amount of time the slowest shard spent on CPU-bound tasks.
         * 
         * @return builder
         * 
         */
        public Builder computeRatioMax(Double computeRatioMax) {
            $.computeRatioMax = computeRatioMax;
            return this;
        }

        /**
         * @param endMs Stage end time represented as milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder endMs(String endMs) {
            $.endMs = endMs;
            return this;
        }

        /**
         * @param inputStages IDs for stages that are inputs to this stage.
         * 
         * @return builder
         * 
         */
        public Builder inputStages(List<String> inputStages) {
            $.inputStages = inputStages;
            return this;
        }

        /**
         * @param inputStages IDs for stages that are inputs to this stage.
         * 
         * @return builder
         * 
         */
        public Builder inputStages(String... inputStages) {
            return inputStages(List.of(inputStages));
        }

        /**
         * @param name Human-readable name for stage.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param parallelInputs Number of parallel input segments to be processed.
         * 
         * @return builder
         * 
         */
        public Builder parallelInputs(String parallelInputs) {
            $.parallelInputs = parallelInputs;
            return this;
        }

        /**
         * @param readMsAvg Milliseconds the average shard spent reading input.
         * 
         * @return builder
         * 
         */
        public Builder readMsAvg(String readMsAvg) {
            $.readMsAvg = readMsAvg;
            return this;
        }

        /**
         * @param readMsMax Milliseconds the slowest shard spent reading input.
         * 
         * @return builder
         * 
         */
        public Builder readMsMax(String readMsMax) {
            $.readMsMax = readMsMax;
            return this;
        }

        /**
         * @param readRatioAvg Relative amount of time the average shard spent reading input.
         * 
         * @return builder
         * 
         */
        public Builder readRatioAvg(Double readRatioAvg) {
            $.readRatioAvg = readRatioAvg;
            return this;
        }

        /**
         * @param readRatioMax Relative amount of time the slowest shard spent reading input.
         * 
         * @return builder
         * 
         */
        public Builder readRatioMax(Double readRatioMax) {
            $.readRatioMax = readRatioMax;
            return this;
        }

        /**
         * @param recordsRead Number of records read into the stage.
         * 
         * @return builder
         * 
         */
        public Builder recordsRead(String recordsRead) {
            $.recordsRead = recordsRead;
            return this;
        }

        /**
         * @param recordsWritten Number of records written by the stage.
         * 
         * @return builder
         * 
         */
        public Builder recordsWritten(String recordsWritten) {
            $.recordsWritten = recordsWritten;
            return this;
        }

        /**
         * @param shuffleOutputBytes Total number of bytes written to shuffle.
         * 
         * @return builder
         * 
         */
        public Builder shuffleOutputBytes(String shuffleOutputBytes) {
            $.shuffleOutputBytes = shuffleOutputBytes;
            return this;
        }

        /**
         * @param shuffleOutputBytesSpilled Total number of bytes written to shuffle and spilled to disk.
         * 
         * @return builder
         * 
         */
        public Builder shuffleOutputBytesSpilled(String shuffleOutputBytesSpilled) {
            $.shuffleOutputBytesSpilled = shuffleOutputBytesSpilled;
            return this;
        }

        /**
         * @param slotMs Slot-milliseconds used by the stage.
         * 
         * @return builder
         * 
         */
        public Builder slotMs(String slotMs) {
            $.slotMs = slotMs;
            return this;
        }

        /**
         * @param startMs Stage start time represented as milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder startMs(String startMs) {
            $.startMs = startMs;
            return this;
        }

        /**
         * @param status Current status for the stage.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param steps List of operations within the stage in dependency order (approximately chronological).
         * 
         * @return builder
         * 
         */
        public Builder steps(List<ExplainQueryStepResponse> steps) {
            $.steps = steps;
            return this;
        }

        /**
         * @param steps List of operations within the stage in dependency order (approximately chronological).
         * 
         * @return builder
         * 
         */
        public Builder steps(ExplainQueryStepResponse... steps) {
            return steps(List.of(steps));
        }

        /**
         * @param waitMsAvg Milliseconds the average shard spent waiting to be scheduled.
         * 
         * @return builder
         * 
         */
        public Builder waitMsAvg(String waitMsAvg) {
            $.waitMsAvg = waitMsAvg;
            return this;
        }

        /**
         * @param waitMsMax Milliseconds the slowest shard spent waiting to be scheduled.
         * 
         * @return builder
         * 
         */
        public Builder waitMsMax(String waitMsMax) {
            $.waitMsMax = waitMsMax;
            return this;
        }

        /**
         * @param waitRatioAvg Relative amount of time the average shard spent waiting to be scheduled.
         * 
         * @return builder
         * 
         */
        public Builder waitRatioAvg(Double waitRatioAvg) {
            $.waitRatioAvg = waitRatioAvg;
            return this;
        }

        /**
         * @param waitRatioMax Relative amount of time the slowest shard spent waiting to be scheduled.
         * 
         * @return builder
         * 
         */
        public Builder waitRatioMax(Double waitRatioMax) {
            $.waitRatioMax = waitRatioMax;
            return this;
        }

        /**
         * @param writeMsAvg Milliseconds the average shard spent on writing output.
         * 
         * @return builder
         * 
         */
        public Builder writeMsAvg(String writeMsAvg) {
            $.writeMsAvg = writeMsAvg;
            return this;
        }

        /**
         * @param writeMsMax Milliseconds the slowest shard spent on writing output.
         * 
         * @return builder
         * 
         */
        public Builder writeMsMax(String writeMsMax) {
            $.writeMsMax = writeMsMax;
            return this;
        }

        /**
         * @param writeRatioAvg Relative amount of time the average shard spent on writing output.
         * 
         * @return builder
         * 
         */
        public Builder writeRatioAvg(Double writeRatioAvg) {
            $.writeRatioAvg = writeRatioAvg;
            return this;
        }

        /**
         * @param writeRatioMax Relative amount of time the slowest shard spent on writing output.
         * 
         * @return builder
         * 
         */
        public Builder writeRatioMax(Double writeRatioMax) {
            $.writeRatioMax = writeRatioMax;
            return this;
        }

        public ExplainQueryStageResponse build() {
            $.completedParallelInputs = Objects.requireNonNull($.completedParallelInputs, "expected parameter 'completedParallelInputs' to be non-null");
            $.computeMsAvg = Objects.requireNonNull($.computeMsAvg, "expected parameter 'computeMsAvg' to be non-null");
            $.computeMsMax = Objects.requireNonNull($.computeMsMax, "expected parameter 'computeMsMax' to be non-null");
            $.computeRatioAvg = Objects.requireNonNull($.computeRatioAvg, "expected parameter 'computeRatioAvg' to be non-null");
            $.computeRatioMax = Objects.requireNonNull($.computeRatioMax, "expected parameter 'computeRatioMax' to be non-null");
            $.endMs = Objects.requireNonNull($.endMs, "expected parameter 'endMs' to be non-null");
            $.inputStages = Objects.requireNonNull($.inputStages, "expected parameter 'inputStages' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.parallelInputs = Objects.requireNonNull($.parallelInputs, "expected parameter 'parallelInputs' to be non-null");
            $.readMsAvg = Objects.requireNonNull($.readMsAvg, "expected parameter 'readMsAvg' to be non-null");
            $.readMsMax = Objects.requireNonNull($.readMsMax, "expected parameter 'readMsMax' to be non-null");
            $.readRatioAvg = Objects.requireNonNull($.readRatioAvg, "expected parameter 'readRatioAvg' to be non-null");
            $.readRatioMax = Objects.requireNonNull($.readRatioMax, "expected parameter 'readRatioMax' to be non-null");
            $.recordsRead = Objects.requireNonNull($.recordsRead, "expected parameter 'recordsRead' to be non-null");
            $.recordsWritten = Objects.requireNonNull($.recordsWritten, "expected parameter 'recordsWritten' to be non-null");
            $.shuffleOutputBytes = Objects.requireNonNull($.shuffleOutputBytes, "expected parameter 'shuffleOutputBytes' to be non-null");
            $.shuffleOutputBytesSpilled = Objects.requireNonNull($.shuffleOutputBytesSpilled, "expected parameter 'shuffleOutputBytesSpilled' to be non-null");
            $.slotMs = Objects.requireNonNull($.slotMs, "expected parameter 'slotMs' to be non-null");
            $.startMs = Objects.requireNonNull($.startMs, "expected parameter 'startMs' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.steps = Objects.requireNonNull($.steps, "expected parameter 'steps' to be non-null");
            $.waitMsAvg = Objects.requireNonNull($.waitMsAvg, "expected parameter 'waitMsAvg' to be non-null");
            $.waitMsMax = Objects.requireNonNull($.waitMsMax, "expected parameter 'waitMsMax' to be non-null");
            $.waitRatioAvg = Objects.requireNonNull($.waitRatioAvg, "expected parameter 'waitRatioAvg' to be non-null");
            $.waitRatioMax = Objects.requireNonNull($.waitRatioMax, "expected parameter 'waitRatioMax' to be non-null");
            $.writeMsAvg = Objects.requireNonNull($.writeMsAvg, "expected parameter 'writeMsAvg' to be non-null");
            $.writeMsMax = Objects.requireNonNull($.writeMsMax, "expected parameter 'writeMsMax' to be non-null");
            $.writeRatioAvg = Objects.requireNonNull($.writeRatioAvg, "expected parameter 'writeRatioAvg' to be non-null");
            $.writeRatioMax = Objects.requireNonNull($.writeRatioMax, "expected parameter 'writeRatioMax' to be non-null");
            return $;
        }
    }

}
