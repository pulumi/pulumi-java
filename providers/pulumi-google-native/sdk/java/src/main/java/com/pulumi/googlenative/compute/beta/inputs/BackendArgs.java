// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.beta.enums.BackendBalancingMode;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Message containing information of one individual backend.
 * 
 */
public final class BackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendArgs Empty = new BackendArgs();

    /**
     * Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
     * 
     */
    @Import(name="balancingMode")
    private @Nullable Output<BackendBalancingMode> balancingMode;

    /**
     * @return Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
     * 
     */
    public Optional<Output<BackendBalancingMode>> balancingMode() {
        return Optional.ofNullable(this.balancingMode);
    }

    /**
     * A multiplier applied to the backend&#39;s target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
     * 
     */
    @Import(name="capacityScaler")
    private @Nullable Output<Double> capacityScaler;

    /**
     * @return A multiplier applied to the backend&#39;s target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
     * 
     */
    public Optional<Output<Double>> capacityScaler() {
        return Optional.ofNullable(this.capacityScaler);
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
     * 
     */
    @Import(name="failover")
    private @Nullable Output<Boolean> failover;

    /**
     * @return This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
     * 
     */
    public Optional<Output<Boolean>> failover() {
        return Optional.ofNullable(this.failover);
    }

    /**
     * The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
     * 
     */
    @Import(name="maxConnectionsPerEndpoint")
    private @Nullable Output<Integer> maxConnectionsPerEndpoint;

    /**
     * @return Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
     * 
     */
    public Optional<Output<Integer>> maxConnectionsPerEndpoint() {
        return Optional.ofNullable(this.maxConnectionsPerEndpoint);
    }

    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
     * 
     */
    @Import(name="maxConnectionsPerInstance")
    private @Nullable Output<Integer> maxConnectionsPerInstance;

    /**
     * @return Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
     * 
     */
    public Optional<Output<Integer>> maxConnectionsPerInstance() {
        return Optional.ofNullable(this.maxConnectionsPerInstance);
    }

    /**
     * Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
     * 
     */
    @Import(name="maxRate")
    private @Nullable Output<Integer> maxRate;

    /**
     * @return Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
     * 
     */
    public Optional<Output<Integer>> maxRate() {
        return Optional.ofNullable(this.maxRate);
    }

    /**
     * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
     * 
     */
    @Import(name="maxRatePerEndpoint")
    private @Nullable Output<Double> maxRatePerEndpoint;

    /**
     * @return Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
     * 
     */
    public Optional<Output<Double>> maxRatePerEndpoint() {
        return Optional.ofNullable(this.maxRatePerEndpoint);
    }

    /**
     * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
     * 
     */
    @Import(name="maxRatePerInstance")
    private @Nullable Output<Double> maxRatePerInstance;

    /**
     * @return Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
     * 
     */
    public Optional<Output<Double>> maxRatePerInstance() {
        return Optional.ofNullable(this.maxRatePerInstance);
    }

    /**
     * Optional parameter to define a target capacity for the UTILIZATIONbalancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
     * 
     */
    @Import(name="maxUtilization")
    private @Nullable Output<Double> maxUtilization;

    /**
     * @return Optional parameter to define a target capacity for the UTILIZATIONbalancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
     * 
     */
    public Optional<Output<Double>> maxUtilization() {
        return Optional.ofNullable(this.maxUtilization);
    }

    private BackendArgs() {}

    private BackendArgs(BackendArgs $) {
        this.balancingMode = $.balancingMode;
        this.capacityScaler = $.capacityScaler;
        this.description = $.description;
        this.failover = $.failover;
        this.group = $.group;
        this.maxConnections = $.maxConnections;
        this.maxConnectionsPerEndpoint = $.maxConnectionsPerEndpoint;
        this.maxConnectionsPerInstance = $.maxConnectionsPerInstance;
        this.maxRate = $.maxRate;
        this.maxRatePerEndpoint = $.maxRatePerEndpoint;
        this.maxRatePerInstance = $.maxRatePerInstance;
        this.maxUtilization = $.maxUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendArgs $;

        public Builder() {
            $ = new BackendArgs();
        }

        public Builder(BackendArgs defaults) {
            $ = new BackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param balancingMode Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
         * 
         * @return builder
         * 
         */
        public Builder balancingMode(@Nullable Output<BackendBalancingMode> balancingMode) {
            $.balancingMode = balancingMode;
            return this;
        }

        /**
         * @param balancingMode Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
         * 
         * @return builder
         * 
         */
        public Builder balancingMode(BackendBalancingMode balancingMode) {
            return balancingMode(Output.of(balancingMode));
        }

        /**
         * @param capacityScaler A multiplier applied to the backend&#39;s target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
         * 
         * @return builder
         * 
         */
        public Builder capacityScaler(@Nullable Output<Double> capacityScaler) {
            $.capacityScaler = capacityScaler;
            return this;
        }

        /**
         * @param capacityScaler A multiplier applied to the backend&#39;s target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
         * 
         * @return builder
         * 
         */
        public Builder capacityScaler(Double capacityScaler) {
            return capacityScaler(Output.of(capacityScaler));
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param failover This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
         * 
         * @return builder
         * 
         */
        public Builder failover(@Nullable Output<Boolean> failover) {
            $.failover = failover;
            return this;
        }

        /**
         * @param failover This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
         * 
         * @return builder
         * 
         */
        public Builder failover(Boolean failover) {
            return failover(Output.of(failover));
        }

        /**
         * @param group The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param maxConnections Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxConnectionsPerEndpoint Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionsPerEndpoint(@Nullable Output<Integer> maxConnectionsPerEndpoint) {
            $.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            return this;
        }

        /**
         * @param maxConnectionsPerEndpoint Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionsPerEndpoint(Integer maxConnectionsPerEndpoint) {
            return maxConnectionsPerEndpoint(Output.of(maxConnectionsPerEndpoint));
        }

        /**
         * @param maxConnectionsPerInstance Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionsPerInstance(@Nullable Output<Integer> maxConnectionsPerInstance) {
            $.maxConnectionsPerInstance = maxConnectionsPerInstance;
            return this;
        }

        /**
         * @param maxConnectionsPerInstance Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is RATE.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionsPerInstance(Integer maxConnectionsPerInstance) {
            return maxConnectionsPerInstance(Output.of(maxConnectionsPerInstance));
        }

        /**
         * @param maxRate Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
         * 
         * @return builder
         * 
         */
        public Builder maxRate(@Nullable Output<Integer> maxRate) {
            $.maxRate = maxRate;
            return this;
        }

        /**
         * @param maxRate Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
         * 
         * @return builder
         * 
         */
        public Builder maxRate(Integer maxRate) {
            return maxRate(Output.of(maxRate));
        }

        /**
         * @param maxRatePerEndpoint Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerEndpoint(@Nullable Output<Double> maxRatePerEndpoint) {
            $.maxRatePerEndpoint = maxRatePerEndpoint;
            return this;
        }

        /**
         * @param maxRatePerEndpoint Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerEndpoint(Double maxRatePerEndpoint) {
            return maxRatePerEndpoint(Output.of(maxRatePerEndpoint));
        }

        /**
         * @param maxRatePerInstance Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerInstance(@Nullable Output<Double> maxRatePerInstance) {
            $.maxRatePerInstance = maxRatePerInstance;
            return this;
        }

        /**
         * @param maxRatePerInstance Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend&#39;s balancingMode is CONNECTION.
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerInstance(Double maxRatePerInstance) {
            return maxRatePerInstance(Output.of(maxRatePerInstance));
        }

        /**
         * @param maxUtilization Optional parameter to define a target capacity for the UTILIZATIONbalancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
         * 
         * @return builder
         * 
         */
        public Builder maxUtilization(@Nullable Output<Double> maxUtilization) {
            $.maxUtilization = maxUtilization;
            return this;
        }

        /**
         * @param maxUtilization Optional parameter to define a target capacity for the UTILIZATIONbalancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
         * 
         * @return builder
         * 
         */
        public Builder maxUtilization(Double maxUtilization) {
            return maxUtilization(Output.of(maxUtilization));
        }

        public BackendArgs build() {
            return $;
        }
    }

}
