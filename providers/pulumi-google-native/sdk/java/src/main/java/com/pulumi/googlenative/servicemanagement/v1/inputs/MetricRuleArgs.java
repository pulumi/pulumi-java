// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Bind API methods to metrics. Binding a method to a metric causes that metric&#39;s configured quota behaviors to apply to the method call.
 * 
 */
public final class MetricRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRuleArgs Empty = new MetricRuleArgs();

    /**
     * Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    @Import(name="metricCosts")
    private @Nullable Output<Map<String,String>> metricCosts;

    /**
     * @return Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    public Optional<Output<Map<String,String>>> metricCosts() {
        return Optional.ofNullable(this.metricCosts);
    }

    /**
     * Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<String> selector;

    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public Optional<Output<String>> selector() {
        return Optional.ofNullable(this.selector);
    }

    private MetricRuleArgs() {}

    private MetricRuleArgs(MetricRuleArgs $) {
        this.metricCosts = $.metricCosts;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRuleArgs $;

        public Builder() {
            $ = new MetricRuleArgs();
        }

        public Builder(MetricRuleArgs defaults) {
            $ = new MetricRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricCosts Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
         * 
         * @return builder
         * 
         */
        public Builder metricCosts(@Nullable Output<Map<String,String>> metricCosts) {
            $.metricCosts = metricCosts;
            return this;
        }

        /**
         * @param metricCosts Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
         * 
         * @return builder
         * 
         */
        public Builder metricCosts(Map<String,String> metricCosts) {
            return metricCosts(Output.of(metricCosts));
        }

        /**
         * @param selector Selects the methods to which this rule applies. Refer to selector for syntax details.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector Selects the methods to which this rule applies. Refer to selector for syntax details.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        public MetricRuleArgs build() {
            return $;
        }
    }

}
