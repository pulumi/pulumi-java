// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.ActingUserResponse;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.ServingConfigResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * A `Version` is a configuration and a collection of static files which determine how a site is displayed.
 * 
 */
public final class VersionResponse extends com.pulumi.resources.InvokeArgs {

    public static final VersionResponse Empty = new VersionResponse();

    /**
     * The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
     * 
     */
    @Import(name="config", required=true)
    private ServingConfigResponse config;

    public ServingConfigResponse config() {
        return this.config;
    }

    /**
     * The time at which the version was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    public String createTime() {
        return this.createTime;
    }

    /**
     * Identifies the user who created the version.
     * 
     */
    @Import(name="createUser", required=true)
    private ActingUserResponse createUser;

    public ActingUserResponse createUser() {
        return this.createUser;
    }

    /**
     * The time at which the version was `DELETED`.
     * 
     */
    @Import(name="deleteTime", required=true)
    private String deleteTime;

    public String deleteTime() {
        return this.deleteTime;
    }

    /**
     * Identifies the user who `DELETED` the version.
     * 
     */
    @Import(name="deleteUser", required=true)
    private ActingUserResponse deleteUser;

    public ActingUserResponse deleteUser() {
        return this.deleteUser;
    }

    /**
     * The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
     * 
     */
    @Import(name="fileCount", required=true)
    private String fileCount;

    public String fileCount() {
        return this.fileCount;
    }

    /**
     * The time at which the version was `FINALIZED`.
     * 
     */
    @Import(name="finalizeTime", required=true)
    private String finalizeTime;

    public String finalizeTime() {
        return this.finalizeTime;
    }

    /**
     * Identifies the user who `FINALIZED` the version.
     * 
     */
    @Import(name="finalizeUser", required=true)
    private ActingUserResponse finalizeUser;

    public ActingUserResponse finalizeUser() {
        return this.finalizeUser;
    }

    /**
     * The labels used for extra metadata and/or filtering.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
     * 
     */
    @Import(name="versionBytes", required=true)
    private String versionBytes;

    public String versionBytes() {
        return this.versionBytes;
    }

    private VersionResponse() {}

    private VersionResponse(VersionResponse $) {
        this.config = $.config;
        this.createTime = $.createTime;
        this.createUser = $.createUser;
        this.deleteTime = $.deleteTime;
        this.deleteUser = $.deleteUser;
        this.fileCount = $.fileCount;
        this.finalizeTime = $.finalizeTime;
        this.finalizeUser = $.finalizeUser;
        this.labels = $.labels;
        this.name = $.name;
        this.status = $.status;
        this.versionBytes = $.versionBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VersionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VersionResponse $;

        public Builder() {
            $ = new VersionResponse();
        }

        public Builder(VersionResponse defaults) {
            $ = new VersionResponse(Objects.requireNonNull(defaults));
        }

        public Builder config(ServingConfigResponse config) {
            $.config = config;
            return this;
        }

        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createUser(ActingUserResponse createUser) {
            $.createUser = createUser;
            return this;
        }

        public Builder deleteTime(String deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        public Builder deleteUser(ActingUserResponse deleteUser) {
            $.deleteUser = deleteUser;
            return this;
        }

        public Builder fileCount(String fileCount) {
            $.fileCount = fileCount;
            return this;
        }

        public Builder finalizeTime(String finalizeTime) {
            $.finalizeTime = finalizeTime;
            return this;
        }

        public Builder finalizeUser(ActingUserResponse finalizeUser) {
            $.finalizeUser = finalizeUser;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder versionBytes(String versionBytes) {
            $.versionBytes = versionBytes;
            return this;
        }

        public VersionResponse build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.createUser = Objects.requireNonNull($.createUser, "expected parameter 'createUser' to be non-null");
            $.deleteTime = Objects.requireNonNull($.deleteTime, "expected parameter 'deleteTime' to be non-null");
            $.deleteUser = Objects.requireNonNull($.deleteUser, "expected parameter 'deleteUser' to be non-null");
            $.fileCount = Objects.requireNonNull($.fileCount, "expected parameter 'fileCount' to be non-null");
            $.finalizeTime = Objects.requireNonNull($.finalizeTime, "expected parameter 'finalizeTime' to be non-null");
            $.finalizeUser = Objects.requireNonNull($.finalizeUser, "expected parameter 'finalizeUser' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.versionBytes = Objects.requireNonNull($.versionBytes, "expected parameter 'versionBytes' to be non-null");
            return $;
        }
    }

}
