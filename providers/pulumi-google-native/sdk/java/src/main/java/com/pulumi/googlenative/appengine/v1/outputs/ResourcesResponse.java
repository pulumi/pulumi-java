// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.appengine.v1.outputs.VolumeResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ResourcesResponse {
    /**
     * @return Number of CPU cores needed.
     * 
     */
    private final Double cpu;
    /**
     * @return Disk size (GB) needed.
     * 
     */
    private final Double diskGb;
    /**
     * @return The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
     * 
     */
    private final String kmsKeyReference;
    /**
     * @return Memory (GB) needed.
     * 
     */
    private final Double memoryGb;
    /**
     * @return User specified volumes.
     * 
     */
    private final List<VolumeResponse> volumes;

    @CustomType.Constructor
    private ResourcesResponse(
        @CustomType.Parameter("cpu") Double cpu,
        @CustomType.Parameter("diskGb") Double diskGb,
        @CustomType.Parameter("kmsKeyReference") String kmsKeyReference,
        @CustomType.Parameter("memoryGb") Double memoryGb,
        @CustomType.Parameter("volumes") List<VolumeResponse> volumes) {
        this.cpu = cpu;
        this.diskGb = diskGb;
        this.kmsKeyReference = kmsKeyReference;
        this.memoryGb = memoryGb;
        this.volumes = volumes;
    }

    /**
     * @return Number of CPU cores needed.
     * 
     */
    public Double cpu() {
        return this.cpu;
    }
    /**
     * @return Disk size (GB) needed.
     * 
     */
    public Double diskGb() {
        return this.diskGb;
    }
    /**
     * @return The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
     * 
     */
    public String kmsKeyReference() {
        return this.kmsKeyReference;
    }
    /**
     * @return Memory (GB) needed.
     * 
     */
    public Double memoryGb() {
        return this.memoryGb;
    }
    /**
     * @return User specified volumes.
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourcesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double cpu;
        private Double diskGb;
        private String kmsKeyReference;
        private Double memoryGb;
        private List<VolumeResponse> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourcesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpu = defaults.cpu;
    	      this.diskGb = defaults.diskGb;
    	      this.kmsKeyReference = defaults.kmsKeyReference;
    	      this.memoryGb = defaults.memoryGb;
    	      this.volumes = defaults.volumes;
        }

        public Builder cpu(Double cpu) {
            this.cpu = Objects.requireNonNull(cpu);
            return this;
        }
        public Builder diskGb(Double diskGb) {
            this.diskGb = Objects.requireNonNull(diskGb);
            return this;
        }
        public Builder kmsKeyReference(String kmsKeyReference) {
            this.kmsKeyReference = Objects.requireNonNull(kmsKeyReference);
            return this;
        }
        public Builder memoryGb(Double memoryGb) {
            this.memoryGb = Objects.requireNonNull(memoryGb);
            return this;
        }
        public Builder volumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }        public ResourcesResponse build() {
            return new ResourcesResponse(cpu, diskGb, kmsKeyReference, memoryGb, volumes);
        }
    }
}
