// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.inputs.FixedOrPercentArgs;
import com.pulumi.googlenative.compute.alpha.inputs.InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceGroupManagerAutoHealingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceGroupManagerAutoHealingPolicyArgs Empty = new InstanceGroupManagerAutoHealingPolicyArgs();

    /**
     * Restricts what triggers autohealing.
     * 
     */
    @Import(name="autoHealingTriggers")
    private @Nullable Output<InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersArgs> autoHealingTriggers;

    /**
     * @return Restricts what triggers autohealing.
     * 
     */
    public Optional<Output<InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersArgs>> autoHealingTriggers() {
        return Optional.ofNullable(this.autoHealingTriggers);
    }

    /**
     * The URL for the health check that signals autohealing.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<String> healthCheck;

    /**
     * @return The URL for the health check that signals autohealing.
     * 
     */
    public Optional<Output<String>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
     * 
     */
    @Import(name="initialDelaySec")
    private @Nullable Output<Integer> initialDelaySec;

    /**
     * @return The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
     * 
     */
    public Optional<Output<Integer>> initialDelaySec() {
        return Optional.ofNullable(this.initialDelaySec);
    }

    /**
     * Maximum number of instances that can be unavailable when autohealing. When &#39;percent&#39; is used, the value is rounded if necessary. The instance is considered available if all of the following conditions are satisfied: 1. Instance&#39;s status is RUNNING. 2. Instance&#39;s currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM. By default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy.
     * 
     */
    @Import(name="maxUnavailable")
    private @Nullable Output<FixedOrPercentArgs> maxUnavailable;

    /**
     * @return Maximum number of instances that can be unavailable when autohealing. When &#39;percent&#39; is used, the value is rounded if necessary. The instance is considered available if all of the following conditions are satisfied: 1. Instance&#39;s status is RUNNING. 2. Instance&#39;s currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM. By default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy.
     * 
     */
    public Optional<Output<FixedOrPercentArgs>> maxUnavailable() {
        return Optional.ofNullable(this.maxUnavailable);
    }

    private InstanceGroupManagerAutoHealingPolicyArgs() {}

    private InstanceGroupManagerAutoHealingPolicyArgs(InstanceGroupManagerAutoHealingPolicyArgs $) {
        this.autoHealingTriggers = $.autoHealingTriggers;
        this.healthCheck = $.healthCheck;
        this.initialDelaySec = $.initialDelaySec;
        this.maxUnavailable = $.maxUnavailable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGroupManagerAutoHealingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGroupManagerAutoHealingPolicyArgs $;

        public Builder() {
            $ = new InstanceGroupManagerAutoHealingPolicyArgs();
        }

        public Builder(InstanceGroupManagerAutoHealingPolicyArgs defaults) {
            $ = new InstanceGroupManagerAutoHealingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoHealingTriggers Restricts what triggers autohealing.
         * 
         * @return builder
         * 
         */
        public Builder autoHealingTriggers(@Nullable Output<InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersArgs> autoHealingTriggers) {
            $.autoHealingTriggers = autoHealingTriggers;
            return this;
        }

        /**
         * @param autoHealingTriggers Restricts what triggers autohealing.
         * 
         * @return builder
         * 
         */
        public Builder autoHealingTriggers(InstanceGroupManagerAutoHealingPolicyAutoHealingTriggersArgs autoHealingTriggers) {
            return autoHealingTriggers(Output.of(autoHealingTriggers));
        }

        /**
         * @param healthCheck The URL for the health check that signals autohealing.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<String> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck The URL for the health check that signals autohealing.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(String healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param initialDelaySec The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
         * 
         * @return builder
         * 
         */
        public Builder initialDelaySec(@Nullable Output<Integer> initialDelaySec) {
            $.initialDelaySec = initialDelaySec;
            return this;
        }

        /**
         * @param initialDelaySec The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
         * 
         * @return builder
         * 
         */
        public Builder initialDelaySec(Integer initialDelaySec) {
            return initialDelaySec(Output.of(initialDelaySec));
        }

        /**
         * @param maxUnavailable Maximum number of instances that can be unavailable when autohealing. When &#39;percent&#39; is used, the value is rounded if necessary. The instance is considered available if all of the following conditions are satisfied: 1. Instance&#39;s status is RUNNING. 2. Instance&#39;s currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM. By default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder maxUnavailable(@Nullable Output<FixedOrPercentArgs> maxUnavailable) {
            $.maxUnavailable = maxUnavailable;
            return this;
        }

        /**
         * @param maxUnavailable Maximum number of instances that can be unavailable when autohealing. When &#39;percent&#39; is used, the value is rounded if necessary. The instance is considered available if all of the following conditions are satisfied: 1. Instance&#39;s status is RUNNING. 2. Instance&#39;s currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM. By default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder maxUnavailable(FixedOrPercentArgs maxUnavailable) {
            return maxUnavailable(Output.of(maxUnavailable));
        }

        public InstanceGroupManagerAutoHealingPolicyArgs build() {
            return $;
        }
    }

}
