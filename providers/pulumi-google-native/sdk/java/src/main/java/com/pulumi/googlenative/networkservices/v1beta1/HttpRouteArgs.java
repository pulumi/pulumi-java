// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.HttpRouteRouteRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteArgs Empty = new HttpRouteArgs();

    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
     * 
     */
    @Import(name="gateways")
    private @Nullable Output<List<String>> gateways;

    /**
     * @return Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
     * 
     */
    public Optional<Output<List<String>>> gateways() {
        return Optional.ofNullable(this.gateways);
    }

    /**
     * Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be &#34;precise&#34; which is a domain name without the terminating dot of a network host (e.g. &#34;foo.example.com&#34;) or &#34;wildcard&#34;, which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or &#39;-&#39;, and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames &#34;*.foo.bar.com&#34; and &#34;*.bar.com&#34; to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with &#34;*.bar.com&#34; or both with &#34;bar.com&#34;.
     * 
     */
    @Import(name="hostnames", required=true)
    private Output<List<String>> hostnames;

    /**
     * @return Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be &#34;precise&#34; which is a domain name without the terminating dot of a network host (e.g. &#34;foo.example.com&#34;) or &#34;wildcard&#34;, which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or &#39;-&#39;, and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames &#34;*.foo.bar.com&#34; and &#34;*.bar.com&#34; to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with &#34;*.bar.com&#34; or both with &#34;bar.com&#34;.
     * 
     */
    public Output<List<String>> hostnames() {
        return this.hostnames;
    }

    /**
     * Required. Short name of the HttpRoute resource to be created.
     * 
     */
    @Import(name="httpRouteId", required=true)
    private Output<String> httpRouteId;

    /**
     * @return Required. Short name of the HttpRoute resource to be created.
     * 
     */
    public Output<String> httpRouteId() {
        return this.httpRouteId;
    }

    /**
     * Optional. Set of label tags associated with the HttpRoute resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Set of label tags associated with the HttpRoute resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
     * 
     */
    @Import(name="meshes")
    private @Nullable Output<List<String>> meshes;

    /**
     * @return Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
     * 
     */
    public Optional<Output<List<String>>> meshes() {
        return Optional.ofNullable(this.meshes);
    }

    /**
     * Name of the HttpRoute resource. It matches pattern `projects/*{@literal /}locations/global/httpRoutes/http_route_name&gt;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the HttpRoute resource. It matches pattern `projects/*{@literal /}locations/global/httpRoutes/http_route_name&gt;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<HttpRouteRouteRuleArgs>> rules;

    /**
     * @return Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
     * 
     */
    public Output<List<HttpRouteRouteRuleArgs>> rules() {
        return this.rules;
    }

    private HttpRouteArgs() {}

    private HttpRouteArgs(HttpRouteArgs $) {
        this.description = $.description;
        this.gateways = $.gateways;
        this.hostnames = $.hostnames;
        this.httpRouteId = $.httpRouteId;
        this.labels = $.labels;
        this.location = $.location;
        this.meshes = $.meshes;
        this.name = $.name;
        this.project = $.project;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteArgs $;

        public Builder() {
            $ = new HttpRouteArgs();
        }

        public Builder(HttpRouteArgs defaults) {
            $ = new HttpRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gateways Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
         * 
         * @return builder
         * 
         */
        public Builder gateways(@Nullable Output<List<String>> gateways) {
            $.gateways = gateways;
            return this;
        }

        /**
         * @param gateways Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
         * 
         * @return builder
         * 
         */
        public Builder gateways(List<String> gateways) {
            return gateways(Output.of(gateways));
        }

        /**
         * @param gateways Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
         * 
         * @return builder
         * 
         */
        public Builder gateways(String... gateways) {
            return gateways(List.of(gateways));
        }

        /**
         * @param hostnames Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be &#34;precise&#34; which is a domain name without the terminating dot of a network host (e.g. &#34;foo.example.com&#34;) or &#34;wildcard&#34;, which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or &#39;-&#39;, and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames &#34;*.foo.bar.com&#34; and &#34;*.bar.com&#34; to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with &#34;*.bar.com&#34; or both with &#34;bar.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(Output<List<String>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be &#34;precise&#34; which is a domain name without the terminating dot of a network host (e.g. &#34;foo.example.com&#34;) or &#34;wildcard&#34;, which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or &#39;-&#39;, and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames &#34;*.foo.bar.com&#34; and &#34;*.bar.com&#34; to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with &#34;*.bar.com&#34; or both with &#34;bar.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<String> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param hostnames Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be &#34;precise&#34; which is a domain name without the terminating dot of a network host (e.g. &#34;foo.example.com&#34;) or &#34;wildcard&#34;, which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or &#39;-&#39;, and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames &#34;*.foo.bar.com&#34; and &#34;*.bar.com&#34; to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with &#34;*.bar.com&#34; or both with &#34;bar.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param httpRouteId Required. Short name of the HttpRoute resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder httpRouteId(Output<String> httpRouteId) {
            $.httpRouteId = httpRouteId;
            return this;
        }

        /**
         * @param httpRouteId Required. Short name of the HttpRoute resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder httpRouteId(String httpRouteId) {
            return httpRouteId(Output.of(httpRouteId));
        }

        /**
         * @param labels Optional. Set of label tags associated with the HttpRoute resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Set of label tags associated with the HttpRoute resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param meshes Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
         * 
         * @return builder
         * 
         */
        public Builder meshes(@Nullable Output<List<String>> meshes) {
            $.meshes = meshes;
            return this;
        }

        /**
         * @param meshes Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
         * 
         * @return builder
         * 
         */
        public Builder meshes(List<String> meshes) {
            return meshes(Output.of(meshes));
        }

        /**
         * @param meshes Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
         * 
         * @return builder
         * 
         */
        public Builder meshes(String... meshes) {
            return meshes(List.of(meshes));
        }

        /**
         * @param name Name of the HttpRoute resource. It matches pattern `projects/*{@literal /}locations/global/httpRoutes/http_route_name&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the HttpRoute resource. It matches pattern `projects/*{@literal /}locations/global/httpRoutes/http_route_name&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rules Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<HttpRouteRouteRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<HttpRouteRouteRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
         * 
         * @return builder
         * 
         */
        public Builder rules(HttpRouteRouteRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public HttpRouteArgs build() {
            $.hostnames = Objects.requireNonNull($.hostnames, "expected parameter 'hostnames' to be non-null");
            $.httpRouteId = Objects.requireNonNull($.httpRouteId, "expected parameter 'httpRouteId' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
