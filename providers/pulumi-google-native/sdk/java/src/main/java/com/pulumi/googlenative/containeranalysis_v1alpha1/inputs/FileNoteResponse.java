// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 * 
 */
public final class FileNoteResponse extends com.pulumi.resources.InvokeArgs {

    public static final FileNoteResponse Empty = new FileNoteResponse();

    /**
     * Provide a unique identifier to match analysis information on each specific file in a package
     * 
     */
    @Import(name="checksum", required=true)
    private List<String> checksum;

    /**
     * @return Provide a unique identifier to match analysis information on each specific file in a package
     * 
     */
    public List<String> checksum() {
        return this.checksum;
    }

    /**
     * This field provides information about the type of file identified
     * 
     */
    @Import(name="fileType", required=true)
    private String fileType;

    /**
     * @return This field provides information about the type of file identified
     * 
     */
    public String fileType() {
        return this.fileType;
    }

    /**
     * Identify the full path and filename that corresponds to the file information in this section
     * 
     */
    @Import(name="title", required=true)
    private String title;

    /**
     * @return Identify the full path and filename that corresponds to the file information in this section
     * 
     */
    public String title() {
        return this.title;
    }

    private FileNoteResponse() {}

    private FileNoteResponse(FileNoteResponse $) {
        this.checksum = $.checksum;
        this.fileType = $.fileType;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileNoteResponse $;

        public Builder() {
            $ = new FileNoteResponse();
        }

        public Builder(FileNoteResponse defaults) {
            $ = new FileNoteResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param checksum Provide a unique identifier to match analysis information on each specific file in a package
         * 
         * @return builder
         * 
         */
        public Builder checksum(List<String> checksum) {
            $.checksum = checksum;
            return this;
        }

        /**
         * @param checksum Provide a unique identifier to match analysis information on each specific file in a package
         * 
         * @return builder
         * 
         */
        public Builder checksum(String... checksum) {
            return checksum(List.of(checksum));
        }

        /**
         * @param fileType This field provides information about the type of file identified
         * 
         * @return builder
         * 
         */
        public Builder fileType(String fileType) {
            $.fileType = fileType;
            return this;
        }

        /**
         * @param title Identify the full path and filename that corresponds to the file information in this section
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            $.title = title;
            return this;
        }

        public FileNoteResponse build() {
            $.checksum = Objects.requireNonNull($.checksum, "expected parameter 'checksum' to be non-null");
            $.fileType = Objects.requireNonNull($.fileType, "expected parameter 'fileType' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
