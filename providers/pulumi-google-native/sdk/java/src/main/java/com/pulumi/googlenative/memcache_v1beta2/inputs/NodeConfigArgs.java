// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.memcache_v1beta2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.Objects;


/**
 * Configuration for a Memcached Node.
 * 
 */
public final class NodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeConfigArgs Empty = new NodeConfigArgs();

    /**
     * Number of cpus per Memcached node.
     * 
     */
    @Import(name="cpuCount", required=true)
      private final Output<Integer> cpuCount;

    public Output<Integer> cpuCount() {
        return this.cpuCount;
    }

    /**
     * Memory size in MiB for each Memcached node.
     * 
     */
    @Import(name="memorySizeMb", required=true)
      private final Output<Integer> memorySizeMb;

    public Output<Integer> memorySizeMb() {
        return this.memorySizeMb;
    }

    public NodeConfigArgs(
        Output<Integer> cpuCount,
        Output<Integer> memorySizeMb) {
        this.cpuCount = Objects.requireNonNull(cpuCount, "expected parameter 'cpuCount' to be non-null");
        this.memorySizeMb = Objects.requireNonNull(memorySizeMb, "expected parameter 'memorySizeMb' to be non-null");
    }

    private NodeConfigArgs() {
        this.cpuCount = Codegen.empty();
        this.memorySizeMb = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> cpuCount;
        private Output<Integer> memorySizeMb;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuCount = defaults.cpuCount;
    	      this.memorySizeMb = defaults.memorySizeMb;
        }

        public Builder cpuCount(Output<Integer> cpuCount) {
            this.cpuCount = Objects.requireNonNull(cpuCount);
            return this;
        }
        public Builder cpuCount(Integer cpuCount) {
            this.cpuCount = Output.of(Objects.requireNonNull(cpuCount));
            return this;
        }
        public Builder memorySizeMb(Output<Integer> memorySizeMb) {
            this.memorySizeMb = Objects.requireNonNull(memorySizeMb);
            return this;
        }
        public Builder memorySizeMb(Integer memorySizeMb) {
            this.memorySizeMb = Output.of(Objects.requireNonNull(memorySizeMb));
            return this;
        }        public NodeConfigArgs build() {
            return new NodeConfigArgs(cpuCount, memorySizeMb);
        }
    }
}
