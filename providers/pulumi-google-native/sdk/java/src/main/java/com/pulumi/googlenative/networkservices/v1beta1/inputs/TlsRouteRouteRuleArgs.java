// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.TlsRouteRouteActionArgs;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.TlsRouteRouteMatchArgs;
import java.util.List;
import java.util.Objects;


/**
 * Specifies how to match traffic and how to route traffic when traffic is matched.
 * 
 */
public final class TlsRouteRouteRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsRouteRouteRuleArgs Empty = new TlsRouteRouteRuleArgs();

    /**
     * The detailed rule defining how to route matched traffic.
     * 
     */
    @Import(name="action", required=true)
    private Output<TlsRouteRouteActionArgs> action;

    /**
     * @return The detailed rule defining how to route matched traffic.
     * 
     */
    public Output<TlsRouteRouteActionArgs> action() {
        return this.action;
    }

    /**
     * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
     * 
     */
    @Import(name="matches", required=true)
    private Output<List<TlsRouteRouteMatchArgs>> matches;

    /**
     * @return RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
     * 
     */
    public Output<List<TlsRouteRouteMatchArgs>> matches() {
        return this.matches;
    }

    private TlsRouteRouteRuleArgs() {}

    private TlsRouteRouteRuleArgs(TlsRouteRouteRuleArgs $) {
        this.action = $.action;
        this.matches = $.matches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsRouteRouteRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsRouteRouteRuleArgs $;

        public Builder() {
            $ = new TlsRouteRouteRuleArgs();
        }

        public Builder(TlsRouteRouteRuleArgs defaults) {
            $ = new TlsRouteRouteRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The detailed rule defining how to route matched traffic.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<TlsRouteRouteActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The detailed rule defining how to route matched traffic.
         * 
         * @return builder
         * 
         */
        public Builder action(TlsRouteRouteActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param matches RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
         * 
         * @return builder
         * 
         */
        public Builder matches(Output<List<TlsRouteRouteMatchArgs>> matches) {
            $.matches = matches;
            return this;
        }

        /**
         * @param matches RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
         * 
         * @return builder
         * 
         */
        public Builder matches(List<TlsRouteRouteMatchArgs> matches) {
            return matches(Output.of(matches));
        }

        /**
         * @param matches RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
         * 
         * @return builder
         * 
         */
        public Builder matches(TlsRouteRouteMatchArgs... matches) {
            return matches(List.of(matches));
        }

        public TlsRouteRouteRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.matches = Objects.requireNonNull($.matches, "expected parameter 'matches' to be non-null");
            return $;
        }
    }

}
