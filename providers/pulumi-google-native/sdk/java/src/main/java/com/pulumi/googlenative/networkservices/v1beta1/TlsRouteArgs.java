// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.networkservices.v1beta1.inputs.TlsRouteRouteRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsRouteArgs Empty = new TlsRouteArgs();

    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
     * 
     */
    @Import(name="gateways")
    private @Nullable Output<List<String>> gateways;

    /**
     * @return Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
     * 
     */
    public Optional<Output<List<String>>> gateways() {
        return Optional.ofNullable(this.gateways);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
     * 
     */
    @Import(name="meshes")
    private @Nullable Output<List<String>> meshes;

    /**
     * @return Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
     * 
     */
    public Optional<Output<List<String>>> meshes() {
        return Optional.ofNullable(this.meshes);
    }

    /**
     * Name of the TlsRoute resource. It matches pattern `projects/*{@literal /}locations/global/tlsRoutes/tls_route_name&gt;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the TlsRoute resource. It matches pattern `projects/*{@literal /}locations/global/tlsRoutes/tls_route_name&gt;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<TlsRouteRouteRuleArgs>> rules;

    /**
     * @return Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
     * 
     */
    public Output<List<TlsRouteRouteRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
     * 
     */
    @Import(name="tlsRouteId", required=true)
    private Output<String> tlsRouteId;

    /**
     * @return Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
     * 
     */
    public Output<String> tlsRouteId() {
        return this.tlsRouteId;
    }

    private TlsRouteArgs() {}

    private TlsRouteArgs(TlsRouteArgs $) {
        this.description = $.description;
        this.gateways = $.gateways;
        this.location = $.location;
        this.meshes = $.meshes;
        this.name = $.name;
        this.project = $.project;
        this.rules = $.rules;
        this.tlsRouteId = $.tlsRouteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsRouteArgs $;

        public Builder() {
            $ = new TlsRouteArgs();
        }

        public Builder(TlsRouteArgs defaults) {
            $ = new TlsRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gateways Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
         * 
         * @return builder
         * 
         */
        public Builder gateways(@Nullable Output<List<String>> gateways) {
            $.gateways = gateways;
            return this;
        }

        /**
         * @param gateways Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
         * 
         * @return builder
         * 
         */
        public Builder gateways(List<String> gateways) {
            return gateways(Output.of(gateways));
        }

        /**
         * @param gateways Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*{@literal /}locations/global/gateways/`
         * 
         * @return builder
         * 
         */
        public Builder gateways(String... gateways) {
            return gateways(List.of(gateways));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param meshes Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
         * 
         * @return builder
         * 
         */
        public Builder meshes(@Nullable Output<List<String>> meshes) {
            $.meshes = meshes;
            return this;
        }

        /**
         * @param meshes Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
         * 
         * @return builder
         * 
         */
        public Builder meshes(List<String> meshes) {
            return meshes(Output.of(meshes));
        }

        /**
         * @param meshes Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*{@literal /}locations/global/meshes/` The attached Mesh should be of a type SIDECAR
         * 
         * @return builder
         * 
         */
        public Builder meshes(String... meshes) {
            return meshes(List.of(meshes));
        }

        /**
         * @param name Name of the TlsRoute resource. It matches pattern `projects/*{@literal /}locations/global/tlsRoutes/tls_route_name&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the TlsRoute resource. It matches pattern `projects/*{@literal /}locations/global/tlsRoutes/tls_route_name&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rules Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<TlsRouteRouteRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<TlsRouteRouteRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
         * 
         * @return builder
         * 
         */
        public Builder rules(TlsRouteRouteRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param tlsRouteId Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
         * 
         * @return builder
         * 
         */
        public Builder tlsRouteId(Output<String> tlsRouteId) {
            $.tlsRouteId = tlsRouteId;
            return this;
        }

        /**
         * @param tlsRouteId Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
         * 
         * @return builder
         * 
         */
        public Builder tlsRouteId(String tlsRouteId) {
            return tlsRouteId(Output.of(tlsRouteId));
        }

        public TlsRouteArgs build() {
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            $.tlsRouteId = Objects.requireNonNull($.tlsRouteId, "expected parameter 'tlsRouteId' to be non-null");
            return $;
        }
    }

}
