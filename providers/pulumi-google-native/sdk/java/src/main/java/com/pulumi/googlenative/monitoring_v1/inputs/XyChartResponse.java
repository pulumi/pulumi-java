// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.AxisResponse;
import com.pulumi.googlenative.monitoring_v1.inputs.ChartOptionsResponse;
import com.pulumi.googlenative.monitoring_v1.inputs.DataSetResponse;
import com.pulumi.googlenative.monitoring_v1.inputs.ThresholdResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 * 
 */
public final class XyChartResponse extends com.pulumi.resources.InvokeArgs {

    public static final XyChartResponse Empty = new XyChartResponse();

    /**
     * Display options for the chart.
     * 
     */
    @Import(name="chartOptions", required=true)
    private ChartOptionsResponse chartOptions;

    public ChartOptionsResponse chartOptions() {
        return this.chartOptions;
    }

    /**
     * The data displayed in this chart.
     * 
     */
    @Import(name="dataSets", required=true)
    private List<DataSetResponse> dataSets;

    public List<DataSetResponse> dataSets() {
        return this.dataSets;
    }

    /**
     * Threshold lines drawn horizontally across the chart.
     * 
     */
    @Import(name="thresholds", required=true)
    private List<ThresholdResponse> thresholds;

    public List<ThresholdResponse> thresholds() {
        return this.thresholds;
    }

    /**
     * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     * 
     */
    @Import(name="timeshiftDuration", required=true)
    private String timeshiftDuration;

    public String timeshiftDuration() {
        return this.timeshiftDuration;
    }

    /**
     * The properties applied to the X axis.
     * 
     */
    @Import(name="xAxis", required=true)
    private AxisResponse xAxis;

    public AxisResponse xAxis() {
        return this.xAxis;
    }

    /**
     * The properties applied to the Y2 axis.
     * 
     */
    @Import(name="y2Axis", required=true)
    private AxisResponse y2Axis;

    public AxisResponse y2Axis() {
        return this.y2Axis;
    }

    /**
     * The properties applied to the Y axis.
     * 
     */
    @Import(name="yAxis", required=true)
    private AxisResponse yAxis;

    public AxisResponse yAxis() {
        return this.yAxis;
    }

    private XyChartResponse() {}

    private XyChartResponse(XyChartResponse $) {
        this.chartOptions = $.chartOptions;
        this.dataSets = $.dataSets;
        this.thresholds = $.thresholds;
        this.timeshiftDuration = $.timeshiftDuration;
        this.xAxis = $.xAxis;
        this.y2Axis = $.y2Axis;
        this.yAxis = $.yAxis;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(XyChartResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private XyChartResponse $;

        public Builder() {
            $ = new XyChartResponse();
        }

        public Builder(XyChartResponse defaults) {
            $ = new XyChartResponse(Objects.requireNonNull(defaults));
        }

        public Builder chartOptions(ChartOptionsResponse chartOptions) {
            $.chartOptions = chartOptions;
            return this;
        }

        public Builder dataSets(List<DataSetResponse> dataSets) {
            $.dataSets = dataSets;
            return this;
        }

        public Builder dataSets(DataSetResponse... dataSets) {
            return dataSets(List.of(dataSets));
        }

        public Builder thresholds(List<ThresholdResponse> thresholds) {
            $.thresholds = thresholds;
            return this;
        }

        public Builder thresholds(ThresholdResponse... thresholds) {
            return thresholds(List.of(thresholds));
        }

        public Builder timeshiftDuration(String timeshiftDuration) {
            $.timeshiftDuration = timeshiftDuration;
            return this;
        }

        public Builder xAxis(AxisResponse xAxis) {
            $.xAxis = xAxis;
            return this;
        }

        public Builder y2Axis(AxisResponse y2Axis) {
            $.y2Axis = y2Axis;
            return this;
        }

        public Builder yAxis(AxisResponse yAxis) {
            $.yAxis = yAxis;
            return this;
        }

        public XyChartResponse build() {
            $.chartOptions = Objects.requireNonNull($.chartOptions, "expected parameter 'chartOptions' to be non-null");
            $.dataSets = Objects.requireNonNull($.dataSets, "expected parameter 'dataSets' to be non-null");
            $.thresholds = Objects.requireNonNull($.thresholds, "expected parameter 'thresholds' to be non-null");
            $.timeshiftDuration = Objects.requireNonNull($.timeshiftDuration, "expected parameter 'timeshiftDuration' to be non-null");
            $.xAxis = Objects.requireNonNull($.xAxis, "expected parameter 'xAxis' to be non-null");
            $.y2Axis = Objects.requireNonNull($.y2Axis, "expected parameter 'y2Axis' to be non-null");
            $.yAxis = Objects.requireNonNull($.yAxis, "expected parameter 'yAxis' to be non-null");
            return $;
        }
    }

}
