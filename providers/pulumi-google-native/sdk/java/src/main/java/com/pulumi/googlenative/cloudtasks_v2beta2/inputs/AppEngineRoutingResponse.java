// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudtasks_v2beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
 * 
 */
public final class AppEngineRoutingResponse extends com.pulumi.resources.InvokeArgs {

    public static final AppEngineRoutingResponse Empty = new AppEngineRoutingResponse();

    /**
     * The host that the task is sent to. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + &#39;.&#39; + [application_domain_name]` `| [version] + &#39;.&#39; + [application_domain_name]` `| [version_dot_service]+ &#39;.&#39; + [application_domain_name]` `| [instance] + &#39;.&#39; + [application_domain_name]` `| [instance_dot_service] + &#39;.&#39; + [application_domain_name]` `| [instance_dot_version] + &#39;.&#39; + [application_domain_name]` `| [instance_dot_version_dot_service] + &#39;.&#39; + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the queue&#39;s project ID. Some tasks which were created using the App Engine SDK use a custom domain name. * `service =` service * `version =` version * `version_dot_service =` version `+ &#39;.&#39; +` service * `instance =` instance * `instance_dot_service =` instance `+ &#39;.&#39; +` service * `instance_dot_version =` instance `+ &#39;.&#39; +` version * `instance_dot_version_dot_service =` instance `+ &#39;.&#39; +` version `+ &#39;.&#39; +` service If service is empty, then the task will be sent to the service which is the default service when the task is attempted. If version is empty, then the task will be sent to the version which is the default version when the task is attempted. If instance is empty, then the task will be sent to an instance which is available when the task is attempted. If service, version, or instance is invalid, then the task will be sent to the default version of the default service when the task is attempted.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    public String host() {
        return this.host;
    }

    /**
     * App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
     * 
     */
    @Import(name="instance", required=true)
    private String instance;

    public String instance() {
        return this.instance;
    }

    /**
     * App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
     * 
     */
    @Import(name="service", required=true)
    private String service;

    public String service() {
        return this.service;
    }

    /**
     * App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    private AppEngineRoutingResponse() {}

    private AppEngineRoutingResponse(AppEngineRoutingResponse $) {
        this.host = $.host;
        this.instance = $.instance;
        this.service = $.service;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppEngineRoutingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppEngineRoutingResponse $;

        public Builder() {
            $ = new AppEngineRoutingResponse();
        }

        public Builder(AppEngineRoutingResponse defaults) {
            $ = new AppEngineRoutingResponse(Objects.requireNonNull(defaults));
        }

        public Builder host(String host) {
            $.host = host;
            return this;
        }

        public Builder instance(String instance) {
            $.instance = instance;
            return this;
        }

        public Builder service(String service) {
            $.service = service;
            return this;
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public AppEngineRoutingResponse build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
