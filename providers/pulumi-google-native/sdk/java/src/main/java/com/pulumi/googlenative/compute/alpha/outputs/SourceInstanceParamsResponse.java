// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.DiskInstantiationConfigResponse;
import java.util.List;
import java.util.Objects;

@CustomType
public final class SourceInstanceParamsResponse {
    /**
     * @return Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
     * 
     */
    private final List<DiskInstantiationConfigResponse> diskConfigs;

    @CustomType.Constructor
    private SourceInstanceParamsResponse(@CustomType.Parameter("diskConfigs") List<DiskInstantiationConfigResponse> diskConfigs) {
        this.diskConfigs = diskConfigs;
    }

    /**
     * @return Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
     * 
     */
    public List<DiskInstantiationConfigResponse> diskConfigs() {
        return this.diskConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceInstanceParamsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<DiskInstantiationConfigResponse> diskConfigs;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceInstanceParamsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskConfigs = defaults.diskConfigs;
        }

        public Builder diskConfigs(List<DiskInstantiationConfigResponse> diskConfigs) {
            this.diskConfigs = Objects.requireNonNull(diskConfigs);
            return this;
        }
        public Builder diskConfigs(DiskInstantiationConfigResponse... diskConfigs) {
            return diskConfigs(List.of(diskConfigs));
        }        public SourceInstanceParamsResponse build() {
            return new SourceInstanceParamsResponse(diskConfigs);
        }
    }
}
