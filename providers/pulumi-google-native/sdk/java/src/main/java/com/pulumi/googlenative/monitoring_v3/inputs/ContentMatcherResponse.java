// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check&#39;s response (and the first 1 MB of a TCP check&#39;s response) are examined for purposes of content matching.
 * 
 */
public final class ContentMatcherResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContentMatcherResponse Empty = new ContentMatcherResponse();

    /**
     * String or regex content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
     * 
     */
    @Import(name="content", required=true)
    private String content;

    public String content() {
        return this.content;
    }

    /**
     * The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
     * 
     */
    @Import(name="matcher", required=true)
    private String matcher;

    public String matcher() {
        return this.matcher;
    }

    private ContentMatcherResponse() {}

    private ContentMatcherResponse(ContentMatcherResponse $) {
        this.content = $.content;
        this.matcher = $.matcher;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentMatcherResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentMatcherResponse $;

        public Builder() {
            $ = new ContentMatcherResponse();
        }

        public Builder(ContentMatcherResponse defaults) {
            $ = new ContentMatcherResponse(Objects.requireNonNull(defaults));
        }

        public Builder content(String content) {
            $.content = content;
            return this;
        }

        public Builder matcher(String matcher) {
            $.matcher = matcher;
            return this;
        }

        public ContentMatcherResponse build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.matcher = Objects.requireNonNull($.matcher, "expected parameter 'matcher' to be non-null");
            return $;
        }
    }

}
