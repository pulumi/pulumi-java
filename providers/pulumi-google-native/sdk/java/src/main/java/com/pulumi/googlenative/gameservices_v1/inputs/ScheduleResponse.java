// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The schedule of a recurring or one time event. The event&#39;s time span is specified by start_time and end_time. If the scheduled event&#39;s timespan is larger than the cron_spec + cron_job_duration, the event will be recurring. If only cron_spec + cron_job_duration are specified, the event is effective starting at the local time specified by cron_spec, and is recurring. ```start_time|-------[cron job]-------[cron job]-------[cron job]---|end_time cron job: cron spec start time + duration```
 * 
 */
public final class ScheduleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ScheduleResponse Empty = new ScheduleResponse();

    /**
     * The duration for the cron job event. The duration of the event is effective after the cron job&#39;s start time.
     * 
     */
    @Import(name="cronJobDuration", required=true)
    private String cronJobDuration;

    public String cronJobDuration() {
        return this.cronJobDuration;
    }

    /**
     * The cron definition of the scheduled event. See https://en.wikipedia.org/wiki/Cron. Cron spec specifies the local time as defined by the realm.
     * 
     */
    @Import(name="cronSpec", required=true)
    private String cronSpec;

    public String cronSpec() {
        return this.cronSpec;
    }

    /**
     * The end time of the event.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    public String endTime() {
        return this.endTime;
    }

    /**
     * The start time of the event.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    public String startTime() {
        return this.startTime;
    }

    private ScheduleResponse() {}

    private ScheduleResponse(ScheduleResponse $) {
        this.cronJobDuration = $.cronJobDuration;
        this.cronSpec = $.cronSpec;
        this.endTime = $.endTime;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleResponse $;

        public Builder() {
            $ = new ScheduleResponse();
        }

        public Builder(ScheduleResponse defaults) {
            $ = new ScheduleResponse(Objects.requireNonNull(defaults));
        }

        public Builder cronJobDuration(String cronJobDuration) {
            $.cronJobDuration = cronJobDuration;
            return this;
        }

        public Builder cronSpec(String cronSpec) {
            $.cronSpec = cronSpec;
            return this;
        }

        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public ScheduleResponse build() {
            $.cronJobDuration = Objects.requireNonNull($.cronJobDuration, "expected parameter 'cronJobDuration' to be non-null");
            $.cronSpec = Objects.requireNonNull($.cronSpec, "expected parameter 'cronSpec' to be non-null");
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
