// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.beyondcorp.v1alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.beyondcorp.v1alpha.outputs.ApplicationEndpointResponse;
import com.pulumi.googlenative.beyondcorp.v1alpha.outputs.GatewayResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionResult {
    /**
     * @return Address of the remote application endpoint for the BeyondCorp Connection.
     * 
     */
    private final ApplicationEndpointResponse applicationEndpoint;
    /**
     * @return Optional. List of [google.cloud.beyondcorp.v1main.Connector.name] that are authorised to be associated with this Connection.
     * 
     */
    private final List<String> connectors;
    /**
     * @return Timestamp when the resource was created.
     * 
     */
    private final String createTime;
    /**
     * @return Optional. An arbitrary user-provided name for the connection. Cannot exceed 64 characters.
     * 
     */
    private final String displayName;
    /**
     * @return Optional. Gateway used by the connection.
     * 
     */
    private final GatewayResponse gateway;
    /**
     * @return Optional. Resource labels to represent user provided metadata.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return Unique resource name of the connection. The name is ignored when creating a connection.
     * 
     */
    private final String name;
    /**
     * @return The current state of the connection.
     * 
     */
    private final String state;
    /**
     * @return The type of network connectivity used by the connection.
     * 
     */
    private final String type;
    /**
     * @return A unique identifier for the instance generated by the system.
     * 
     */
    private final String uid;
    /**
     * @return Timestamp when the resource was last modified.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetConnectionResult(
        @CustomType.Parameter("applicationEndpoint") ApplicationEndpointResponse applicationEndpoint,
        @CustomType.Parameter("connectors") List<String> connectors,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("gateway") GatewayResponse gateway,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("uid") String uid,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.applicationEndpoint = applicationEndpoint;
        this.connectors = connectors;
        this.createTime = createTime;
        this.displayName = displayName;
        this.gateway = gateway;
        this.labels = labels;
        this.name = name;
        this.state = state;
        this.type = type;
        this.uid = uid;
        this.updateTime = updateTime;
    }

    /**
     * @return Address of the remote application endpoint for the BeyondCorp Connection.
     * 
     */
    public ApplicationEndpointResponse applicationEndpoint() {
        return this.applicationEndpoint;
    }
    /**
     * @return Optional. List of [google.cloud.beyondcorp.v1main.Connector.name] that are authorised to be associated with this Connection.
     * 
     */
    public List<String> connectors() {
        return this.connectors;
    }
    /**
     * @return Timestamp when the resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. An arbitrary user-provided name for the connection. Cannot exceed 64 characters.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Optional. Gateway used by the connection.
     * 
     */
    public GatewayResponse gateway() {
        return this.gateway;
    }
    /**
     * @return Optional. Resource labels to represent user provided metadata.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Unique resource name of the connection. The name is ignored when creating a connection.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current state of the connection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The type of network connectivity used by the connection.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A unique identifier for the instance generated by the system.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return Timestamp when the resource was last modified.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationEndpointResponse applicationEndpoint;
        private List<String> connectors;
        private String createTime;
        private String displayName;
        private GatewayResponse gateway;
        private Map<String,String> labels;
        private String name;
        private String state;
        private String type;
        private String uid;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationEndpoint = defaults.applicationEndpoint;
    	      this.connectors = defaults.connectors;
    	      this.createTime = defaults.createTime;
    	      this.displayName = defaults.displayName;
    	      this.gateway = defaults.gateway;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder applicationEndpoint(ApplicationEndpointResponse applicationEndpoint) {
            this.applicationEndpoint = Objects.requireNonNull(applicationEndpoint);
            return this;
        }
        public Builder connectors(List<String> connectors) {
            this.connectors = Objects.requireNonNull(connectors);
            return this;
        }
        public Builder connectors(String... connectors) {
            return connectors(List.of(connectors));
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder gateway(GatewayResponse gateway) {
            this.gateway = Objects.requireNonNull(gateway);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetConnectionResult build() {
            return new GetConnectionResult(applicationEndpoint, connectors, createTime, displayName, gateway, labels, name, state, type, uid, updateTime);
        }
    }
}
