// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vmmigration_v1alpha1.inputs.CycleStepResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * ReplicationCycle contains information about the current replication cycle status.
 * 
 */
public final class ReplicationCycleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReplicationCycleResponse Empty = new ReplicationCycleResponse();

    /**
     * The time the replication cycle has ended.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    /**
     * @return The time the replication cycle has ended.
     * 
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * The current progress in percentage of this cycle.
     * 
     */
    @Import(name="progress", required=true)
    private Integer progress;

    /**
     * @return The current progress in percentage of this cycle.
     * 
     */
    public Integer progress() {
        return this.progress;
    }

    /**
     * The current progress in percentage of this cycle.
     * 
     */
    @Import(name="progressPercent", required=true)
    private Integer progressPercent;

    /**
     * @return The current progress in percentage of this cycle.
     * 
     */
    public Integer progressPercent() {
        return this.progressPercent;
    }

    /**
     * The time the replication cycle has started.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The time the replication cycle has started.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * The cycle&#39;s steps list reflecting its progress.
     * 
     */
    @Import(name="steps", required=true)
    private List<CycleStepResponse> steps;

    /**
     * @return The cycle&#39;s steps list reflecting its progress.
     * 
     */
    public List<CycleStepResponse> steps() {
        return this.steps;
    }

    /**
     * The accumulated duration the replication cycle was paused.
     * 
     */
    @Import(name="totalPauseDuration", required=true)
    private String totalPauseDuration;

    /**
     * @return The accumulated duration the replication cycle was paused.
     * 
     */
    public String totalPauseDuration() {
        return this.totalPauseDuration;
    }

    private ReplicationCycleResponse() {}

    private ReplicationCycleResponse(ReplicationCycleResponse $) {
        this.endTime = $.endTime;
        this.progress = $.progress;
        this.progressPercent = $.progressPercent;
        this.startTime = $.startTime;
        this.steps = $.steps;
        this.totalPauseDuration = $.totalPauseDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationCycleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationCycleResponse $;

        public Builder() {
            $ = new ReplicationCycleResponse();
        }

        public Builder(ReplicationCycleResponse defaults) {
            $ = new ReplicationCycleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The time the replication cycle has ended.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param progress The current progress in percentage of this cycle.
         * 
         * @return builder
         * 
         */
        public Builder progress(Integer progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param progressPercent The current progress in percentage of this cycle.
         * 
         * @return builder
         * 
         */
        public Builder progressPercent(Integer progressPercent) {
            $.progressPercent = progressPercent;
            return this;
        }

        /**
         * @param startTime The time the replication cycle has started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param steps The cycle&#39;s steps list reflecting its progress.
         * 
         * @return builder
         * 
         */
        public Builder steps(List<CycleStepResponse> steps) {
            $.steps = steps;
            return this;
        }

        /**
         * @param steps The cycle&#39;s steps list reflecting its progress.
         * 
         * @return builder
         * 
         */
        public Builder steps(CycleStepResponse... steps) {
            return steps(List.of(steps));
        }

        /**
         * @param totalPauseDuration The accumulated duration the replication cycle was paused.
         * 
         * @return builder
         * 
         */
        public Builder totalPauseDuration(String totalPauseDuration) {
            $.totalPauseDuration = totalPauseDuration;
            return this;
        }

        public ReplicationCycleResponse build() {
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.progress = Objects.requireNonNull($.progress, "expected parameter 'progress' to be non-null");
            $.progressPercent = Objects.requireNonNull($.progressPercent, "expected parameter 'progressPercent' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.steps = Objects.requireNonNull($.steps, "expected parameter 'steps' to be non-null");
            $.totalPauseDuration = Objects.requireNonNull($.totalPauseDuration, "expected parameter 'totalPauseDuration' to be non-null");
            return $;
        }
    }

}
