// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.toolresults_v1beta3.enums.ExecutionState;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.MatrixDimensionDefinitionArgs;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.OutcomeArgs;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.SpecificationArgs;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.TimestampArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExecutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecutionArgs Empty = new ExecutionArgs();

    /**
     * The time when the Execution status transitioned to COMPLETE. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
     * 
     */
    @Import(name="completionTime")
      private final @Nullable Output<TimestampArgs> completionTime;

    public Output<TimestampArgs> completionTime() {
        return this.completionTime == null ? Codegen.empty() : this.completionTime;
    }

    /**
     * The time when the Execution was created. This value will be set automatically when CreateExecution is called. - In response: always set - In create/update request: never set
     * 
     */
    @Import(name="creationTime")
      private final @Nullable Output<TimestampArgs> creationTime;

    public Output<TimestampArgs> creationTime() {
        return this.creationTime == null ? Codegen.empty() : this.creationTime;
    }

    /**
     * The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
     * 
     */
    @Import(name="dimensionDefinitions")
      private final @Nullable Output<List<MatrixDimensionDefinitionArgs>> dimensionDefinitions;

    public Output<List<MatrixDimensionDefinitionArgs>> dimensionDefinitions() {
        return this.dimensionDefinitions == null ? Codegen.empty() : this.dimensionDefinitions;
    }

    /**
     * A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
     * 
     */
    @Import(name="executionId")
      private final @Nullable Output<String> executionId;

    public Output<String> executionId() {
        return this.executionId == null ? Codegen.empty() : this.executionId;
    }

    @Import(name="historyId", required=true)
      private final Output<String> historyId;

    public Output<String> historyId() {
        return this.historyId;
    }

    /**
     * Classify the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
     * 
     */
    @Import(name="outcome")
      private final @Nullable Output<OutcomeArgs> outcome;

    public Output<OutcomeArgs> outcome() {
        return this.outcome == null ? Codegen.empty() : this.outcome;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    /**
     * Lightweight information about execution request. - In response: present if set by create - In create: optional - In update: optional
     * 
     */
    @Import(name="specification")
      private final @Nullable Output<SpecificationArgs> specification;

    public Output<SpecificationArgs> specification() {
        return this.specification == null ? Codegen.empty() : this.specification;
    }

    /**
     * The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
     * 
     */
    @Import(name="state")
      private final @Nullable Output<ExecutionState> state;

    public Output<ExecutionState> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
     * 
     */
    @Import(name="testExecutionMatrixId")
      private final @Nullable Output<String> testExecutionMatrixId;

    public Output<String> testExecutionMatrixId() {
        return this.testExecutionMatrixId == null ? Codegen.empty() : this.testExecutionMatrixId;
    }

    public ExecutionArgs(
        @Nullable Output<TimestampArgs> completionTime,
        @Nullable Output<TimestampArgs> creationTime,
        @Nullable Output<List<MatrixDimensionDefinitionArgs>> dimensionDefinitions,
        @Nullable Output<String> executionId,
        Output<String> historyId,
        @Nullable Output<OutcomeArgs> outcome,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        @Nullable Output<SpecificationArgs> specification,
        @Nullable Output<ExecutionState> state,
        @Nullable Output<String> testExecutionMatrixId) {
        this.completionTime = completionTime;
        this.creationTime = creationTime;
        this.dimensionDefinitions = dimensionDefinitions;
        this.executionId = executionId;
        this.historyId = Objects.requireNonNull(historyId, "expected parameter 'historyId' to be non-null");
        this.outcome = outcome;
        this.project = project;
        this.requestId = requestId;
        this.specification = specification;
        this.state = state;
        this.testExecutionMatrixId = testExecutionMatrixId;
    }

    private ExecutionArgs() {
        this.completionTime = Codegen.empty();
        this.creationTime = Codegen.empty();
        this.dimensionDefinitions = Codegen.empty();
        this.executionId = Codegen.empty();
        this.historyId = Codegen.empty();
        this.outcome = Codegen.empty();
        this.project = Codegen.empty();
        this.requestId = Codegen.empty();
        this.specification = Codegen.empty();
        this.state = Codegen.empty();
        this.testExecutionMatrixId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<TimestampArgs> completionTime;
        private @Nullable Output<TimestampArgs> creationTime;
        private @Nullable Output<List<MatrixDimensionDefinitionArgs>> dimensionDefinitions;
        private @Nullable Output<String> executionId;
        private Output<String> historyId;
        private @Nullable Output<OutcomeArgs> outcome;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private @Nullable Output<SpecificationArgs> specification;
        private @Nullable Output<ExecutionState> state;
        private @Nullable Output<String> testExecutionMatrixId;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecutionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completionTime = defaults.completionTime;
    	      this.creationTime = defaults.creationTime;
    	      this.dimensionDefinitions = defaults.dimensionDefinitions;
    	      this.executionId = defaults.executionId;
    	      this.historyId = defaults.historyId;
    	      this.outcome = defaults.outcome;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.specification = defaults.specification;
    	      this.state = defaults.state;
    	      this.testExecutionMatrixId = defaults.testExecutionMatrixId;
        }

        public Builder completionTime(@Nullable Output<TimestampArgs> completionTime) {
            this.completionTime = completionTime;
            return this;
        }
        public Builder completionTime(@Nullable TimestampArgs completionTime) {
            this.completionTime = Codegen.ofNullable(completionTime);
            return this;
        }
        public Builder creationTime(@Nullable Output<TimestampArgs> creationTime) {
            this.creationTime = creationTime;
            return this;
        }
        public Builder creationTime(@Nullable TimestampArgs creationTime) {
            this.creationTime = Codegen.ofNullable(creationTime);
            return this;
        }
        public Builder dimensionDefinitions(@Nullable Output<List<MatrixDimensionDefinitionArgs>> dimensionDefinitions) {
            this.dimensionDefinitions = dimensionDefinitions;
            return this;
        }
        public Builder dimensionDefinitions(@Nullable List<MatrixDimensionDefinitionArgs> dimensionDefinitions) {
            this.dimensionDefinitions = Codegen.ofNullable(dimensionDefinitions);
            return this;
        }
        public Builder dimensionDefinitions(MatrixDimensionDefinitionArgs... dimensionDefinitions) {
            return dimensionDefinitions(List.of(dimensionDefinitions));
        }
        public Builder executionId(@Nullable Output<String> executionId) {
            this.executionId = executionId;
            return this;
        }
        public Builder executionId(@Nullable String executionId) {
            this.executionId = Codegen.ofNullable(executionId);
            return this;
        }
        public Builder historyId(Output<String> historyId) {
            this.historyId = Objects.requireNonNull(historyId);
            return this;
        }
        public Builder historyId(String historyId) {
            this.historyId = Output.of(Objects.requireNonNull(historyId));
            return this;
        }
        public Builder outcome(@Nullable Output<OutcomeArgs> outcome) {
            this.outcome = outcome;
            return this;
        }
        public Builder outcome(@Nullable OutcomeArgs outcome) {
            this.outcome = Codegen.ofNullable(outcome);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }
        public Builder specification(@Nullable Output<SpecificationArgs> specification) {
            this.specification = specification;
            return this;
        }
        public Builder specification(@Nullable SpecificationArgs specification) {
            this.specification = Codegen.ofNullable(specification);
            return this;
        }
        public Builder state(@Nullable Output<ExecutionState> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable ExecutionState state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder testExecutionMatrixId(@Nullable Output<String> testExecutionMatrixId) {
            this.testExecutionMatrixId = testExecutionMatrixId;
            return this;
        }
        public Builder testExecutionMatrixId(@Nullable String testExecutionMatrixId) {
            this.testExecutionMatrixId = Codegen.ofNullable(testExecutionMatrixId);
            return this;
        }        public ExecutionArgs build() {
            return new ExecutionArgs(completionTime, creationTime, dimensionDefinitions, executionId, historyId, outcome, project, requestId, specification, state, testExecutionMatrixId);
        }
    }
}
