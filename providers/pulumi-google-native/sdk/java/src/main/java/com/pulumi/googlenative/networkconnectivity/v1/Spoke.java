// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkconnectivity.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.Utilities;
import com.pulumi.googlenative.networkconnectivity.v1.SpokeArgs;
import com.pulumi.googlenative.networkconnectivity.v1.outputs.LinkedInterconnectAttachmentsResponse;
import com.pulumi.googlenative.networkconnectivity.v1.outputs.LinkedRouterApplianceInstancesResponse;
import com.pulumi.googlenative.networkconnectivity.v1.outputs.LinkedVpnTunnelsResponse;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a spoke in the specified project and location.
 * 
 */
@ResourceType(type="google-native:networkconnectivity/v1:Spoke")
public class Spoke extends com.pulumi.resources.CustomResource {
    /**
     * The time the spoke was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time the spoke was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * An optional description of the spoke.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return An optional description of the spoke.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Immutable. The name of the hub that this spoke is attached to.
     * 
     */
    @Export(name="hub", type=String.class, parameters={})
    private Output<String> hub;

    /**
     * @return Immutable. The name of the hub that this spoke is attached to.
     * 
     */
    public Output<String> hub() {
        return this.hub;
    }
    /**
     * Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    /**
     * @return Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * VLAN attachments that are associated with the spoke.
     * 
     */
    @Export(name="linkedInterconnectAttachments", type=LinkedInterconnectAttachmentsResponse.class, parameters={})
    private Output<LinkedInterconnectAttachmentsResponse> linkedInterconnectAttachments;

    /**
     * @return VLAN attachments that are associated with the spoke.
     * 
     */
    public Output<LinkedInterconnectAttachmentsResponse> linkedInterconnectAttachments() {
        return this.linkedInterconnectAttachments;
    }
    /**
     * Router appliance instances that are associated with the spoke.
     * 
     */
    @Export(name="linkedRouterApplianceInstances", type=LinkedRouterApplianceInstancesResponse.class, parameters={})
    private Output<LinkedRouterApplianceInstancesResponse> linkedRouterApplianceInstances;

    /**
     * @return Router appliance instances that are associated with the spoke.
     * 
     */
    public Output<LinkedRouterApplianceInstancesResponse> linkedRouterApplianceInstances() {
        return this.linkedRouterApplianceInstances;
    }
    /**
     * VPN tunnels that are associated with the spoke.
     * 
     */
    @Export(name="linkedVpnTunnels", type=LinkedVpnTunnelsResponse.class, parameters={})
    private Output<LinkedVpnTunnelsResponse> linkedVpnTunnels;

    /**
     * @return VPN tunnels that are associated with the spoke.
     * 
     */
    public Output<LinkedVpnTunnelsResponse> linkedVpnTunnels() {
        return this.linkedVpnTunnels;
    }
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }
    /**
     * Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * Optional. A unique request ID (optional). If you specify this ID, you can use it in cases when you need to retry your request. When you need to retry, this ID lets the server know that it can ignore the request if it has already been completed. The server guarantees that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check to see whether the original operation was received. If it was, the server ignores the second request. This behavior prevents clients from mistakenly creating duplicate commitments. The request ID must be a valid UUID, with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    @Export(name="requestId", type=String.class, parameters={})
    private Output</* @Nullable */ String> requestId;

    /**
     * @return Optional. A unique request ID (optional). If you specify this ID, you can use it in cases when you need to retry your request. When you need to retry, this ID lets the server know that it can ignore the request if it has already been completed. The server guarantees that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check to see whether the original operation was received. If it was, the server ignores the second request. This behavior prevents clients from mistakenly creating duplicate commitments. The request ID must be a valid UUID, with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     * 
     */
    public Output<Optional<String>> requestId() {
        return Codegen.optional(this.requestId);
    }
    /**
     * Required. Unique id for the spoke to create.
     * 
     */
    @Export(name="spokeId", type=String.class, parameters={})
    private Output<String> spokeId;

    /**
     * @return Required. Unique id for the spoke to create.
     * 
     */
    public Output<String> spokeId() {
        return this.spokeId;
    }
    /**
     * The current lifecycle state of this spoke.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current lifecycle state of this spoke.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    @Export(name="uniqueId", type=String.class, parameters={})
    private Output<String> uniqueId;

    /**
     * @return The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    public Output<String> uniqueId() {
        return this.uniqueId;
    }
    /**
     * The time the spoke was last updated.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The time the spoke was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Spoke(String name) {
        this(name, SpokeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Spoke(String name, SpokeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Spoke(String name, SpokeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:networkconnectivity/v1:Spoke", name, args == null ? SpokeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Spoke(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("google-native:networkconnectivity/v1:Spoke", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Spoke get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Spoke(name, id, options);
    }
}
