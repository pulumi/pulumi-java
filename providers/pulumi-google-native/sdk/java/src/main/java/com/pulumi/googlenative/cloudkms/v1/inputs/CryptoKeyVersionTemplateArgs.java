// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudkms.v1.enums.CryptoKeyVersionTemplateAlgorithm;
import com.pulumi.googlenative.cloudkms.v1.enums.CryptoKeyVersionTemplateProtectionLevel;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
 * 
 */
public final class CryptoKeyVersionTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyVersionTemplateArgs Empty = new CryptoKeyVersionTemplateArgs();

    /**
     * Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<CryptoKeyVersionTemplateAlgorithm> algorithm;

    /**
     * @return Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
     * 
     */
    public Output<CryptoKeyVersionTemplateAlgorithm> algorithm() {
        return this.algorithm;
    }

    /**
     * ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
     * 
     */
    @Import(name="protectionLevel")
    private @Nullable Output<CryptoKeyVersionTemplateProtectionLevel> protectionLevel;

    /**
     * @return ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
     * 
     */
    public Optional<Output<CryptoKeyVersionTemplateProtectionLevel>> protectionLevel() {
        return Optional.ofNullable(this.protectionLevel);
    }

    private CryptoKeyVersionTemplateArgs() {}

    private CryptoKeyVersionTemplateArgs(CryptoKeyVersionTemplateArgs $) {
        this.algorithm = $.algorithm;
        this.protectionLevel = $.protectionLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoKeyVersionTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoKeyVersionTemplateArgs $;

        public Builder() {
            $ = new CryptoKeyVersionTemplateArgs();
        }

        public Builder(CryptoKeyVersionTemplateArgs defaults) {
            $ = new CryptoKeyVersionTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<CryptoKeyVersionTemplateAlgorithm> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(CryptoKeyVersionTemplateAlgorithm algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param protectionLevel ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevel(@Nullable Output<CryptoKeyVersionTemplateProtectionLevel> protectionLevel) {
            $.protectionLevel = protectionLevel;
            return this;
        }

        /**
         * @param protectionLevel ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevel(CryptoKeyVersionTemplateProtectionLevel protectionLevel) {
            return protectionLevel(Output.of(protectionLevel));
        }

        public CryptoKeyVersionTemplateArgs build() {
            $.algorithm = Objects.requireNonNull($.algorithm, "expected parameter 'algorithm' to be non-null");
            return $;
        }
    }

}
