// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.remotebuildexecution_v1alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.remotebuildexecution_v1alpha.inputs.GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse;
import java.lang.String;
import java.util.Objects;


/**
 * FeaturePolicy defines features allowed to be used on RBE instances, as well as instance-wide behavior changes that take effect without opt-in or opt-out at usage time.
 * 
 */
public final class GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse Empty = new GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse();

    /**
     * Which container image sources are allowed. Currently only RBE-supported registry (gcr.io) is allowed. One can allow all repositories under a project or one specific repository only. E.g. container_image_sources { policy: RESTRICTED allowed_values: [ &#34;gcr.io/project-foo&#34;, &#34;gcr.io/project-bar/repo-baz&#34;, ] } will allow any repositories under &#34;gcr.io/project-foo&#34; plus the repository &#34;gcr.io/project-bar/repo-baz&#34;. Default (UNSPECIFIED) is equivalent to any source is allowed.
     * 
     */
    @Import(name="containerImageSources", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse containerImageSources;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse containerImageSources() {
        return this.containerImageSources;
    }

    /**
     * Whether dockerAddCapabilities can be used or what capabilities are allowed.
     * 
     */
    @Import(name="dockerAddCapabilities", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerAddCapabilities;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerAddCapabilities() {
        return this.dockerAddCapabilities;
    }

    /**
     * Whether dockerChrootPath can be used.
     * 
     */
    @Import(name="dockerChrootPath", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerChrootPath;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerChrootPath() {
        return this.dockerChrootPath;
    }

    /**
     * Whether dockerNetwork can be used or what network modes are allowed. E.g. one may allow `off` value only via `allowed_values`.
     * 
     */
    @Import(name="dockerNetwork", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerNetwork;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerNetwork() {
        return this.dockerNetwork;
    }

    /**
     * Whether dockerPrivileged can be used.
     * 
     */
    @Import(name="dockerPrivileged", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerPrivileged;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerPrivileged() {
        return this.dockerPrivileged;
    }

    /**
     * Whether dockerRunAsRoot can be used.
     * 
     */
    @Import(name="dockerRunAsRoot", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerRunAsRoot;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerRunAsRoot() {
        return this.dockerRunAsRoot;
    }

    /**
     * Whether dockerRuntime is allowed to be set or what runtimes are allowed. Note linux_isolation takes precedence, and if set, docker_runtime values may be rejected if they are incompatible with the selected isolation.
     * 
     */
    @Import(name="dockerRuntime", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerRuntime;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerRuntime() {
        return this.dockerRuntime;
    }

    /**
     * Whether dockerSiblingContainers can be used.
     * 
     */
    @Import(name="dockerSiblingContainers", required=true)
    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerSiblingContainers;

    public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerSiblingContainers() {
        return this.dockerSiblingContainers;
    }

    /**
     * linux_isolation allows overriding the docker runtime used for containers started on Linux.
     * 
     */
    @Import(name="linuxIsolation", required=true)
    private String linuxIsolation;

    public String linuxIsolation() {
        return this.linuxIsolation;
    }

    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse() {}

    private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse $) {
        this.containerImageSources = $.containerImageSources;
        this.dockerAddCapabilities = $.dockerAddCapabilities;
        this.dockerChrootPath = $.dockerChrootPath;
        this.dockerNetwork = $.dockerNetwork;
        this.dockerPrivileged = $.dockerPrivileged;
        this.dockerRunAsRoot = $.dockerRunAsRoot;
        this.dockerRuntime = $.dockerRuntime;
        this.dockerSiblingContainers = $.dockerSiblingContainers;
        this.linuxIsolation = $.linuxIsolation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse $;

        public Builder() {
            $ = new GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse();
        }

        public Builder(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse defaults) {
            $ = new GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse(Objects.requireNonNull(defaults));
        }

        public Builder containerImageSources(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse containerImageSources) {
            $.containerImageSources = containerImageSources;
            return this;
        }

        public Builder dockerAddCapabilities(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerAddCapabilities) {
            $.dockerAddCapabilities = dockerAddCapabilities;
            return this;
        }

        public Builder dockerChrootPath(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerChrootPath) {
            $.dockerChrootPath = dockerChrootPath;
            return this;
        }

        public Builder dockerNetwork(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerNetwork) {
            $.dockerNetwork = dockerNetwork;
            return this;
        }

        public Builder dockerPrivileged(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerPrivileged) {
            $.dockerPrivileged = dockerPrivileged;
            return this;
        }

        public Builder dockerRunAsRoot(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerRunAsRoot) {
            $.dockerRunAsRoot = dockerRunAsRoot;
            return this;
        }

        public Builder dockerRuntime(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerRuntime) {
            $.dockerRuntime = dockerRuntime;
            return this;
        }

        public Builder dockerSiblingContainers(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeatureResponse dockerSiblingContainers) {
            $.dockerSiblingContainers = dockerSiblingContainers;
            return this;
        }

        public Builder linuxIsolation(String linuxIsolation) {
            $.linuxIsolation = linuxIsolation;
            return this;
        }

        public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyResponse build() {
            $.containerImageSources = Objects.requireNonNull($.containerImageSources, "expected parameter 'containerImageSources' to be non-null");
            $.dockerAddCapabilities = Objects.requireNonNull($.dockerAddCapabilities, "expected parameter 'dockerAddCapabilities' to be non-null");
            $.dockerChrootPath = Objects.requireNonNull($.dockerChrootPath, "expected parameter 'dockerChrootPath' to be non-null");
            $.dockerNetwork = Objects.requireNonNull($.dockerNetwork, "expected parameter 'dockerNetwork' to be non-null");
            $.dockerPrivileged = Objects.requireNonNull($.dockerPrivileged, "expected parameter 'dockerPrivileged' to be non-null");
            $.dockerRunAsRoot = Objects.requireNonNull($.dockerRunAsRoot, "expected parameter 'dockerRunAsRoot' to be non-null");
            $.dockerRuntime = Objects.requireNonNull($.dockerRuntime, "expected parameter 'dockerRuntime' to be non-null");
            $.dockerSiblingContainers = Objects.requireNonNull($.dockerSiblingContainers, "expected parameter 'dockerSiblingContainers' to be non-null");
            $.linuxIsolation = Objects.requireNonNull($.linuxIsolation, "expected parameter 'linuxIsolation' to be non-null");
            return $;
        }
    }

}
