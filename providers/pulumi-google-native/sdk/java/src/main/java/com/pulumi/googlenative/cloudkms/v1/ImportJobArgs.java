// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudkms.v1.enums.ImportJobImportMethod;
import com.pulumi.googlenative.cloudkms.v1.enums.ImportJobProtectionLevel;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImportJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImportJobArgs Empty = new ImportJobArgs();

    /**
     * Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    @Import(name="importJobId")
    private @Nullable Output<String> importJobId;

    /**
     * @return Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     * 
     */
    public Optional<Output<String>> importJobId() {
        return Optional.ofNullable(this.importJobId);
    }

    /**
     * Immutable. The wrapping method to be used for incoming key material.
     * 
     */
    @Import(name="importMethod", required=true)
    private Output<ImportJobImportMethod> importMethod;

    /**
     * @return Immutable. The wrapping method to be used for incoming key material.
     * 
     */
    public Output<ImportJobImportMethod> importMethod() {
        return this.importMethod;
    }

    @Import(name="keyRingId", required=true)
    private Output<String> keyRingId;

    public Output<String> keyRingId() {
        return this.keyRingId;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
     * 
     */
    @Import(name="protectionLevel", required=true)
    private Output<ImportJobProtectionLevel> protectionLevel;

    /**
     * @return Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
     * 
     */
    public Output<ImportJobProtectionLevel> protectionLevel() {
        return this.protectionLevel;
    }

    private ImportJobArgs() {}

    private ImportJobArgs(ImportJobArgs $) {
        this.importJobId = $.importJobId;
        this.importMethod = $.importMethod;
        this.keyRingId = $.keyRingId;
        this.location = $.location;
        this.project = $.project;
        this.protectionLevel = $.protectionLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImportJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImportJobArgs $;

        public Builder() {
            $ = new ImportJobArgs();
        }

        public Builder(ImportJobArgs defaults) {
            $ = new ImportJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param importJobId Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder importJobId(@Nullable Output<String> importJobId) {
            $.importJobId = importJobId;
            return this;
        }

        /**
         * @param importJobId Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
         * 
         * @return builder
         * 
         */
        public Builder importJobId(String importJobId) {
            return importJobId(Output.of(importJobId));
        }

        /**
         * @param importMethod Immutable. The wrapping method to be used for incoming key material.
         * 
         * @return builder
         * 
         */
        public Builder importMethod(Output<ImportJobImportMethod> importMethod) {
            $.importMethod = importMethod;
            return this;
        }

        /**
         * @param importMethod Immutable. The wrapping method to be used for incoming key material.
         * 
         * @return builder
         * 
         */
        public Builder importMethod(ImportJobImportMethod importMethod) {
            return importMethod(Output.of(importMethod));
        }

        public Builder keyRingId(Output<String> keyRingId) {
            $.keyRingId = keyRingId;
            return this;
        }

        public Builder keyRingId(String keyRingId) {
            return keyRingId(Output.of(keyRingId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protectionLevel Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevel(Output<ImportJobProtectionLevel> protectionLevel) {
            $.protectionLevel = protectionLevel;
            return this;
        }

        /**
         * @param protectionLevel Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevel(ImportJobProtectionLevel protectionLevel) {
            return protectionLevel(Output.of(protectionLevel));
        }

        public ImportJobArgs build() {
            $.importMethod = Objects.requireNonNull($.importMethod, "expected parameter 'importMethod' to be non-null");
            $.keyRingId = Objects.requireNonNull($.keyRingId, "expected parameter 'keyRingId' to be non-null");
            $.protectionLevel = Objects.requireNonNull($.protectionLevel, "expected parameter 'protectionLevel' to be non-null");
            return $;
        }
    }

}
