// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class KeyUsageOptionsResponse {
    /**
     * @return The key may be used to sign certificates.
     * 
     */
    private final Boolean certSign;
    /**
     * @return The key may be used for cryptographic commitments. Note that this may also be referred to as &#34;non-repudiation&#34;.
     * 
     */
    private final Boolean contentCommitment;
    /**
     * @return The key may be used sign certificate revocation lists.
     * 
     */
    private final Boolean crlSign;
    /**
     * @return The key may be used to encipher data.
     * 
     */
    private final Boolean dataEncipherment;
    /**
     * @return The key may be used to decipher only.
     * 
     */
    private final Boolean decipherOnly;
    /**
     * @return The key may be used for digital signatures.
     * 
     */
    private final Boolean digitalSignature;
    /**
     * @return The key may be used to encipher only.
     * 
     */
    private final Boolean encipherOnly;
    /**
     * @return The key may be used in a key agreement protocol.
     * 
     */
    private final Boolean keyAgreement;
    /**
     * @return The key may be used to encipher other keys.
     * 
     */
    private final Boolean keyEncipherment;

    @CustomType.Constructor
    private KeyUsageOptionsResponse(
        @CustomType.Parameter("certSign") Boolean certSign,
        @CustomType.Parameter("contentCommitment") Boolean contentCommitment,
        @CustomType.Parameter("crlSign") Boolean crlSign,
        @CustomType.Parameter("dataEncipherment") Boolean dataEncipherment,
        @CustomType.Parameter("decipherOnly") Boolean decipherOnly,
        @CustomType.Parameter("digitalSignature") Boolean digitalSignature,
        @CustomType.Parameter("encipherOnly") Boolean encipherOnly,
        @CustomType.Parameter("keyAgreement") Boolean keyAgreement,
        @CustomType.Parameter("keyEncipherment") Boolean keyEncipherment) {
        this.certSign = certSign;
        this.contentCommitment = contentCommitment;
        this.crlSign = crlSign;
        this.dataEncipherment = dataEncipherment;
        this.decipherOnly = decipherOnly;
        this.digitalSignature = digitalSignature;
        this.encipherOnly = encipherOnly;
        this.keyAgreement = keyAgreement;
        this.keyEncipherment = keyEncipherment;
    }

    /**
     * @return The key may be used to sign certificates.
     * 
     */
    public Boolean certSign() {
        return this.certSign;
    }
    /**
     * @return The key may be used for cryptographic commitments. Note that this may also be referred to as &#34;non-repudiation&#34;.
     * 
     */
    public Boolean contentCommitment() {
        return this.contentCommitment;
    }
    /**
     * @return The key may be used sign certificate revocation lists.
     * 
     */
    public Boolean crlSign() {
        return this.crlSign;
    }
    /**
     * @return The key may be used to encipher data.
     * 
     */
    public Boolean dataEncipherment() {
        return this.dataEncipherment;
    }
    /**
     * @return The key may be used to decipher only.
     * 
     */
    public Boolean decipherOnly() {
        return this.decipherOnly;
    }
    /**
     * @return The key may be used for digital signatures.
     * 
     */
    public Boolean digitalSignature() {
        return this.digitalSignature;
    }
    /**
     * @return The key may be used to encipher only.
     * 
     */
    public Boolean encipherOnly() {
        return this.encipherOnly;
    }
    /**
     * @return The key may be used in a key agreement protocol.
     * 
     */
    public Boolean keyAgreement() {
        return this.keyAgreement;
    }
    /**
     * @return The key may be used to encipher other keys.
     * 
     */
    public Boolean keyEncipherment() {
        return this.keyEncipherment;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyUsageOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean certSign;
        private Boolean contentCommitment;
        private Boolean crlSign;
        private Boolean dataEncipherment;
        private Boolean decipherOnly;
        private Boolean digitalSignature;
        private Boolean encipherOnly;
        private Boolean keyAgreement;
        private Boolean keyEncipherment;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyUsageOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certSign = defaults.certSign;
    	      this.contentCommitment = defaults.contentCommitment;
    	      this.crlSign = defaults.crlSign;
    	      this.dataEncipherment = defaults.dataEncipherment;
    	      this.decipherOnly = defaults.decipherOnly;
    	      this.digitalSignature = defaults.digitalSignature;
    	      this.encipherOnly = defaults.encipherOnly;
    	      this.keyAgreement = defaults.keyAgreement;
    	      this.keyEncipherment = defaults.keyEncipherment;
        }

        public Builder certSign(Boolean certSign) {
            this.certSign = Objects.requireNonNull(certSign);
            return this;
        }
        public Builder contentCommitment(Boolean contentCommitment) {
            this.contentCommitment = Objects.requireNonNull(contentCommitment);
            return this;
        }
        public Builder crlSign(Boolean crlSign) {
            this.crlSign = Objects.requireNonNull(crlSign);
            return this;
        }
        public Builder dataEncipherment(Boolean dataEncipherment) {
            this.dataEncipherment = Objects.requireNonNull(dataEncipherment);
            return this;
        }
        public Builder decipherOnly(Boolean decipherOnly) {
            this.decipherOnly = Objects.requireNonNull(decipherOnly);
            return this;
        }
        public Builder digitalSignature(Boolean digitalSignature) {
            this.digitalSignature = Objects.requireNonNull(digitalSignature);
            return this;
        }
        public Builder encipherOnly(Boolean encipherOnly) {
            this.encipherOnly = Objects.requireNonNull(encipherOnly);
            return this;
        }
        public Builder keyAgreement(Boolean keyAgreement) {
            this.keyAgreement = Objects.requireNonNull(keyAgreement);
            return this;
        }
        public Builder keyEncipherment(Boolean keyEncipherment) {
            this.keyEncipherment = Objects.requireNonNull(keyEncipherment);
            return this;
        }        public KeyUsageOptionsResponse build() {
            return new KeyUsageOptionsResponse(certSign, contentCommitment, crlSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyEncipherment);
        }
    }
}
