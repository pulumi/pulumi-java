// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Database instance local user password validation policy
 * 
 */
public final class PasswordValidationPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final PasswordValidationPolicyResponse Empty = new PasswordValidationPolicyResponse();

    /**
     * The complexity of the password.
     * 
     */
    @Import(name="complexity", required=true)
    private String complexity;

    /**
     * @return The complexity of the password.
     * 
     */
    public String complexity() {
        return this.complexity;
    }

    /**
     * Disallow username as a part of the password.
     * 
     */
    @Import(name="disallowUsernameSubstring", required=true)
    private Boolean disallowUsernameSubstring;

    /**
     * @return Disallow username as a part of the password.
     * 
     */
    public Boolean disallowUsernameSubstring() {
        return this.disallowUsernameSubstring;
    }

    /**
     * Minimum number of characters allowed.
     * 
     */
    @Import(name="minLength", required=true)
    private Integer minLength;

    /**
     * @return Minimum number of characters allowed.
     * 
     */
    public Integer minLength() {
        return this.minLength;
    }

    /**
     * Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
     * 
     */
    @Import(name="passwordChangeInterval", required=true)
    private String passwordChangeInterval;

    /**
     * @return Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
     * 
     */
    public String passwordChangeInterval() {
        return this.passwordChangeInterval;
    }

    /**
     * Number of previous passwords that cannot be reused.
     * 
     */
    @Import(name="reuseInterval", required=true)
    private Integer reuseInterval;

    /**
     * @return Number of previous passwords that cannot be reused.
     * 
     */
    public Integer reuseInterval() {
        return this.reuseInterval;
    }

    private PasswordValidationPolicyResponse() {}

    private PasswordValidationPolicyResponse(PasswordValidationPolicyResponse $) {
        this.complexity = $.complexity;
        this.disallowUsernameSubstring = $.disallowUsernameSubstring;
        this.minLength = $.minLength;
        this.passwordChangeInterval = $.passwordChangeInterval;
        this.reuseInterval = $.reuseInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PasswordValidationPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PasswordValidationPolicyResponse $;

        public Builder() {
            $ = new PasswordValidationPolicyResponse();
        }

        public Builder(PasswordValidationPolicyResponse defaults) {
            $ = new PasswordValidationPolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param complexity The complexity of the password.
         * 
         * @return builder
         * 
         */
        public Builder complexity(String complexity) {
            $.complexity = complexity;
            return this;
        }

        /**
         * @param disallowUsernameSubstring Disallow username as a part of the password.
         * 
         * @return builder
         * 
         */
        public Builder disallowUsernameSubstring(Boolean disallowUsernameSubstring) {
            $.disallowUsernameSubstring = disallowUsernameSubstring;
            return this;
        }

        /**
         * @param minLength Minimum number of characters allowed.
         * 
         * @return builder
         * 
         */
        public Builder minLength(Integer minLength) {
            $.minLength = minLength;
            return this;
        }

        /**
         * @param passwordChangeInterval Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
         * 
         * @return builder
         * 
         */
        public Builder passwordChangeInterval(String passwordChangeInterval) {
            $.passwordChangeInterval = passwordChangeInterval;
            return this;
        }

        /**
         * @param reuseInterval Number of previous passwords that cannot be reused.
         * 
         * @return builder
         * 
         */
        public Builder reuseInterval(Integer reuseInterval) {
            $.reuseInterval = reuseInterval;
            return this;
        }

        public PasswordValidationPolicyResponse build() {
            $.complexity = Objects.requireNonNull($.complexity, "expected parameter 'complexity' to be non-null");
            $.disallowUsernameSubstring = Objects.requireNonNull($.disallowUsernameSubstring, "expected parameter 'disallowUsernameSubstring' to be non-null");
            $.minLength = Objects.requireNonNull($.minLength, "expected parameter 'minLength' to be non-null");
            $.passwordChangeInterval = Objects.requireNonNull($.passwordChangeInterval, "expected parameter 'passwordChangeInterval' to be non-null");
            $.reuseInterval = Objects.requireNonNull($.reuseInterval, "expected parameter 'reuseInterval' to be non-null");
            return $;
        }
    }

}
