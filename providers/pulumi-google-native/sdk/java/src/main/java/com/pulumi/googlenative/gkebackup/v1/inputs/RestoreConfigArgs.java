// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gkebackup.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.gkebackup.v1.enums.RestoreConfigClusterResourceConflictPolicy;
import com.pulumi.googlenative.gkebackup.v1.enums.RestoreConfigNamespacedResourceRestoreMode;
import com.pulumi.googlenative.gkebackup.v1.enums.RestoreConfigVolumeDataRestorePolicy;
import com.pulumi.googlenative.gkebackup.v1.inputs.ClusterResourceRestoreScopeArgs;
import com.pulumi.googlenative.gkebackup.v1.inputs.NamespacedNamesArgs;
import com.pulumi.googlenative.gkebackup.v1.inputs.NamespacesArgs;
import com.pulumi.googlenative.gkebackup.v1.inputs.SubstitutionRuleArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration of a restore. Next id: 9
 * 
 */
public final class RestoreConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestoreConfigArgs Empty = new RestoreConfigArgs();

    /**
     * Restore all namespaced resources in the Backup if set to &#34;True&#34;. Specifying this field to &#34;False&#34; is an error.
     * 
     */
    @Import(name="allNamespaces")
    private @Nullable Output<Boolean> allNamespaces;

    /**
     * @return Restore all namespaced resources in the Backup if set to &#34;True&#34;. Specifying this field to &#34;False&#34; is an error.
     * 
     */
    public Optional<Output<Boolean>> allNamespaces() {
        return Optional.ofNullable(this.allNamespaces);
    }

    /**
     * Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
     * 
     */
    @Import(name="clusterResourceConflictPolicy")
    private @Nullable Output<RestoreConfigClusterResourceConflictPolicy> clusterResourceConflictPolicy;

    /**
     * @return Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
     * 
     */
    public Optional<Output<RestoreConfigClusterResourceConflictPolicy>> clusterResourceConflictPolicy() {
        return Optional.ofNullable(this.clusterResourceConflictPolicy);
    }

    /**
     * Identifies the cluster-scoped resources to restore from the Backup. Not specifying it means NO cluster resource will be restored.
     * 
     */
    @Import(name="clusterResourceRestoreScope")
    private @Nullable Output<ClusterResourceRestoreScopeArgs> clusterResourceRestoreScope;

    /**
     * @return Identifies the cluster-scoped resources to restore from the Backup. Not specifying it means NO cluster resource will be restored.
     * 
     */
    public Optional<Output<ClusterResourceRestoreScopeArgs>> clusterResourceRestoreScope() {
        return Optional.ofNullable(this.clusterResourceRestoreScope);
    }

    /**
     * Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
     * 
     */
    @Import(name="namespacedResourceRestoreMode")
    private @Nullable Output<RestoreConfigNamespacedResourceRestoreMode> namespacedResourceRestoreMode;

    /**
     * @return Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
     * 
     */
    public Optional<Output<RestoreConfigNamespacedResourceRestoreMode>> namespacedResourceRestoreMode() {
        return Optional.ofNullable(this.namespacedResourceRestoreMode);
    }

    /**
     * A list of selected ProtectedApplications to restore. The listed ProtectedApplications and all the resources to which they refer will be restored.
     * 
     */
    @Import(name="selectedApplications")
    private @Nullable Output<NamespacedNamesArgs> selectedApplications;

    /**
     * @return A list of selected ProtectedApplications to restore. The listed ProtectedApplications and all the resources to which they refer will be restored.
     * 
     */
    public Optional<Output<NamespacedNamesArgs>> selectedApplications() {
        return Optional.ofNullable(this.selectedApplications);
    }

    /**
     * A list of selected Namespaces to restore from the Backup. The listed Namespaces and all resources contained in them will be restored.
     * 
     */
    @Import(name="selectedNamespaces")
    private @Nullable Output<NamespacesArgs> selectedNamespaces;

    /**
     * @return A list of selected Namespaces to restore from the Backup. The listed Namespaces and all resources contained in them will be restored.
     * 
     */
    public Optional<Output<NamespacesArgs>> selectedNamespaces() {
        return Optional.ofNullable(this.selectedNamespaces);
    }

    /**
     * A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
     * 
     */
    @Import(name="substitutionRules")
    private @Nullable Output<List<SubstitutionRuleArgs>> substitutionRules;

    /**
     * @return A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
     * 
     */
    public Optional<Output<List<SubstitutionRuleArgs>>> substitutionRules() {
        return Optional.ofNullable(this.substitutionRules);
    }

    /**
     * Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
     * 
     */
    @Import(name="volumeDataRestorePolicy")
    private @Nullable Output<RestoreConfigVolumeDataRestorePolicy> volumeDataRestorePolicy;

    /**
     * @return Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
     * 
     */
    public Optional<Output<RestoreConfigVolumeDataRestorePolicy>> volumeDataRestorePolicy() {
        return Optional.ofNullable(this.volumeDataRestorePolicy);
    }

    private RestoreConfigArgs() {}

    private RestoreConfigArgs(RestoreConfigArgs $) {
        this.allNamespaces = $.allNamespaces;
        this.clusterResourceConflictPolicy = $.clusterResourceConflictPolicy;
        this.clusterResourceRestoreScope = $.clusterResourceRestoreScope;
        this.namespacedResourceRestoreMode = $.namespacedResourceRestoreMode;
        this.selectedApplications = $.selectedApplications;
        this.selectedNamespaces = $.selectedNamespaces;
        this.substitutionRules = $.substitutionRules;
        this.volumeDataRestorePolicy = $.volumeDataRestorePolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestoreConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestoreConfigArgs $;

        public Builder() {
            $ = new RestoreConfigArgs();
        }

        public Builder(RestoreConfigArgs defaults) {
            $ = new RestoreConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allNamespaces Restore all namespaced resources in the Backup if set to &#34;True&#34;. Specifying this field to &#34;False&#34; is an error.
         * 
         * @return builder
         * 
         */
        public Builder allNamespaces(@Nullable Output<Boolean> allNamespaces) {
            $.allNamespaces = allNamespaces;
            return this;
        }

        /**
         * @param allNamespaces Restore all namespaced resources in the Backup if set to &#34;True&#34;. Specifying this field to &#34;False&#34; is an error.
         * 
         * @return builder
         * 
         */
        public Builder allNamespaces(Boolean allNamespaces) {
            return allNamespaces(Output.of(allNamespaces));
        }

        /**
         * @param clusterResourceConflictPolicy Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceConflictPolicy(@Nullable Output<RestoreConfigClusterResourceConflictPolicy> clusterResourceConflictPolicy) {
            $.clusterResourceConflictPolicy = clusterResourceConflictPolicy;
            return this;
        }

        /**
         * @param clusterResourceConflictPolicy Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceConflictPolicy(RestoreConfigClusterResourceConflictPolicy clusterResourceConflictPolicy) {
            return clusterResourceConflictPolicy(Output.of(clusterResourceConflictPolicy));
        }

        /**
         * @param clusterResourceRestoreScope Identifies the cluster-scoped resources to restore from the Backup. Not specifying it means NO cluster resource will be restored.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceRestoreScope(@Nullable Output<ClusterResourceRestoreScopeArgs> clusterResourceRestoreScope) {
            $.clusterResourceRestoreScope = clusterResourceRestoreScope;
            return this;
        }

        /**
         * @param clusterResourceRestoreScope Identifies the cluster-scoped resources to restore from the Backup. Not specifying it means NO cluster resource will be restored.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceRestoreScope(ClusterResourceRestoreScopeArgs clusterResourceRestoreScope) {
            return clusterResourceRestoreScope(Output.of(clusterResourceRestoreScope));
        }

        /**
         * @param namespacedResourceRestoreMode Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
         * 
         * @return builder
         * 
         */
        public Builder namespacedResourceRestoreMode(@Nullable Output<RestoreConfigNamespacedResourceRestoreMode> namespacedResourceRestoreMode) {
            $.namespacedResourceRestoreMode = namespacedResourceRestoreMode;
            return this;
        }

        /**
         * @param namespacedResourceRestoreMode Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
         * 
         * @return builder
         * 
         */
        public Builder namespacedResourceRestoreMode(RestoreConfigNamespacedResourceRestoreMode namespacedResourceRestoreMode) {
            return namespacedResourceRestoreMode(Output.of(namespacedResourceRestoreMode));
        }

        /**
         * @param selectedApplications A list of selected ProtectedApplications to restore. The listed ProtectedApplications and all the resources to which they refer will be restored.
         * 
         * @return builder
         * 
         */
        public Builder selectedApplications(@Nullable Output<NamespacedNamesArgs> selectedApplications) {
            $.selectedApplications = selectedApplications;
            return this;
        }

        /**
         * @param selectedApplications A list of selected ProtectedApplications to restore. The listed ProtectedApplications and all the resources to which they refer will be restored.
         * 
         * @return builder
         * 
         */
        public Builder selectedApplications(NamespacedNamesArgs selectedApplications) {
            return selectedApplications(Output.of(selectedApplications));
        }

        /**
         * @param selectedNamespaces A list of selected Namespaces to restore from the Backup. The listed Namespaces and all resources contained in them will be restored.
         * 
         * @return builder
         * 
         */
        public Builder selectedNamespaces(@Nullable Output<NamespacesArgs> selectedNamespaces) {
            $.selectedNamespaces = selectedNamespaces;
            return this;
        }

        /**
         * @param selectedNamespaces A list of selected Namespaces to restore from the Backup. The listed Namespaces and all resources contained in them will be restored.
         * 
         * @return builder
         * 
         */
        public Builder selectedNamespaces(NamespacesArgs selectedNamespaces) {
            return selectedNamespaces(Output.of(selectedNamespaces));
        }

        /**
         * @param substitutionRules A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
         * 
         * @return builder
         * 
         */
        public Builder substitutionRules(@Nullable Output<List<SubstitutionRuleArgs>> substitutionRules) {
            $.substitutionRules = substitutionRules;
            return this;
        }

        /**
         * @param substitutionRules A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
         * 
         * @return builder
         * 
         */
        public Builder substitutionRules(List<SubstitutionRuleArgs> substitutionRules) {
            return substitutionRules(Output.of(substitutionRules));
        }

        /**
         * @param substitutionRules A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
         * 
         * @return builder
         * 
         */
        public Builder substitutionRules(SubstitutionRuleArgs... substitutionRules) {
            return substitutionRules(List.of(substitutionRules));
        }

        /**
         * @param volumeDataRestorePolicy Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
         * 
         * @return builder
         * 
         */
        public Builder volumeDataRestorePolicy(@Nullable Output<RestoreConfigVolumeDataRestorePolicy> volumeDataRestorePolicy) {
            $.volumeDataRestorePolicy = volumeDataRestorePolicy;
            return this;
        }

        /**
         * @param volumeDataRestorePolicy Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
         * 
         * @return builder
         * 
         */
        public Builder volumeDataRestorePolicy(RestoreConfigVolumeDataRestorePolicy volumeDataRestorePolicy) {
            return volumeDataRestorePolicy(Output.of(volumeDataRestorePolicy));
        }

        public RestoreConfigArgs build() {
            return $;
        }
    }

}
