// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.iam.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.iam.v1.outputs.AwsResponse;
import com.pulumi.googlenative.iam.v1.outputs.OidcResponse;
import com.pulumi.googlenative.iam.v1.outputs.SamlResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProviderResult {
    /**
     * @return [A Common Expression Language](https://opensource.google/projects/cel) expression, in plain text, to restrict what otherwise valid authentication credentials issued by the provider should not be accepted. The expression must output a boolean representing whether to allow the federation. The following keywords may be referenced in the expressions: * `assertion`: JSON representing the authentication credential issued by the provider. * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`. * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`. The maximum length of the attribute condition expression is 4096 characters. If unspecified, all valid authentication credential are accepted. The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`: ```&#34;&#39;admins&#39; in google.groups&#34;```
     * 
     */
    private final String attributeCondition;
    /**
     * @return Maps attributes from authentication credentials issued by an external identity provider to Google Cloud attributes, such as `subject` and `segment`. Each key must be a string specifying the Google Cloud IAM attribute to map to. The following keys are supported: * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings. This is also the subject that appears in Cloud Logging logs. Cannot exceed 127 bytes. * `google.groups`: Groups the external identity belongs to. You can grant groups access to resources using an IAM `principalSet` binding; access applies to all members of the group. You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes. The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_]. You can reference these attributes in IAM policies to define fine-grained access for a workload to Google Cloud resources. For example: * `google.subject`: `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}` * `google.groups`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}` * `attribute.{custom_attribute}`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}` Each value must be a [Common Expression Language] (https://opensource.google/projects/cel) function that maps an identity provider credential to the normalized attribute specified by the corresponding map key. You can use the `assertion` keyword in the expression to access a JSON representation of the authentication credential issued by the provider. The maximum length of an attribute mapping expression is 2048 characters. When evaluated, the total size of all mapped attributes must not exceed 8KB. For AWS providers, if no attribute mapping is defined, the following default mapping applies: ```{ &#34;google.subject&#34;:&#34;assertion.arn&#34;, &#34;attribute.aws_role&#34;: &#34;assertion.arn.contains(&#39;assumed-role&#39;)&#34; &#34; ? assertion.arn.extract(&#39;{account_arn}assumed-role/&#39;)&#34; &#34; + &#39;assumed-role/&#39;&#34; &#34; + assertion.arn.extract(&#39;assumed-role/{role_name}/&#39;)&#34; &#34; : assertion.arn&#34;, }``` If any custom attribute mappings are defined, they must include a mapping to the `google.subject` attribute. For OIDC providers, you must supply a custom mapping, which must include the `google.subject` attribute. For example, the following maps the `sub` claim of the incoming credential to the `subject` attribute on a Google token: ```{&#34;google.subject&#34;: &#34;assertion.sub&#34;}```
     * 
     */
    private final Map<String,String> attributeMapping;
    /**
     * @return An Amazon Web Services identity provider.
     * 
     */
    private final AwsResponse aws;
    /**
     * @return A description for the provider. Cannot exceed 256 characters.
     * 
     */
    private final String description;
    /**
     * @return Whether the provider is disabled. You cannot use a disabled provider to exchange tokens. However, existing tokens still grant access.
     * 
     */
    private final Boolean disabled;
    /**
     * @return A display name for the provider. Cannot exceed 32 characters.
     * 
     */
    private final String displayName;
    /**
     * @return The resource name of the provider.
     * 
     */
    private final String name;
    /**
     * @return An OpenId Connect 1.0 identity provider.
     * 
     */
    private final OidcResponse oidc;
    /**
     * @return An SAML 2.0 identity provider.
     * 
     */
    private final SamlResponse saml;
    /**
     * @return The state of the provider.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private GetProviderResult(
        @CustomType.Parameter("attributeCondition") String attributeCondition,
        @CustomType.Parameter("attributeMapping") Map<String,String> attributeMapping,
        @CustomType.Parameter("aws") AwsResponse aws,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("disabled") Boolean disabled,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("oidc") OidcResponse oidc,
        @CustomType.Parameter("saml") SamlResponse saml,
        @CustomType.Parameter("state") String state) {
        this.attributeCondition = attributeCondition;
        this.attributeMapping = attributeMapping;
        this.aws = aws;
        this.description = description;
        this.disabled = disabled;
        this.displayName = displayName;
        this.name = name;
        this.oidc = oidc;
        this.saml = saml;
        this.state = state;
    }

    /**
     * @return [A Common Expression Language](https://opensource.google/projects/cel) expression, in plain text, to restrict what otherwise valid authentication credentials issued by the provider should not be accepted. The expression must output a boolean representing whether to allow the federation. The following keywords may be referenced in the expressions: * `assertion`: JSON representing the authentication credential issued by the provider. * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`. * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`. The maximum length of the attribute condition expression is 4096 characters. If unspecified, all valid authentication credential are accepted. The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`: ```&#34;&#39;admins&#39; in google.groups&#34;```
     * 
     */
    public String attributeCondition() {
        return this.attributeCondition;
    }
    /**
     * @return Maps attributes from authentication credentials issued by an external identity provider to Google Cloud attributes, such as `subject` and `segment`. Each key must be a string specifying the Google Cloud IAM attribute to map to. The following keys are supported: * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings. This is also the subject that appears in Cloud Logging logs. Cannot exceed 127 bytes. * `google.groups`: Groups the external identity belongs to. You can grant groups access to resources using an IAM `principalSet` binding; access applies to all members of the group. You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes. The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_]. You can reference these attributes in IAM policies to define fine-grained access for a workload to Google Cloud resources. For example: * `google.subject`: `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}` * `google.groups`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}` * `attribute.{custom_attribute}`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}` Each value must be a [Common Expression Language] (https://opensource.google/projects/cel) function that maps an identity provider credential to the normalized attribute specified by the corresponding map key. You can use the `assertion` keyword in the expression to access a JSON representation of the authentication credential issued by the provider. The maximum length of an attribute mapping expression is 2048 characters. When evaluated, the total size of all mapped attributes must not exceed 8KB. For AWS providers, if no attribute mapping is defined, the following default mapping applies: ```{ &#34;google.subject&#34;:&#34;assertion.arn&#34;, &#34;attribute.aws_role&#34;: &#34;assertion.arn.contains(&#39;assumed-role&#39;)&#34; &#34; ? assertion.arn.extract(&#39;{account_arn}assumed-role/&#39;)&#34; &#34; + &#39;assumed-role/&#39;&#34; &#34; + assertion.arn.extract(&#39;assumed-role/{role_name}/&#39;)&#34; &#34; : assertion.arn&#34;, }``` If any custom attribute mappings are defined, they must include a mapping to the `google.subject` attribute. For OIDC providers, you must supply a custom mapping, which must include the `google.subject` attribute. For example, the following maps the `sub` claim of the incoming credential to the `subject` attribute on a Google token: ```{&#34;google.subject&#34;: &#34;assertion.sub&#34;}```
     * 
     */
    public Map<String,String> attributeMapping() {
        return this.attributeMapping;
    }
    /**
     * @return An Amazon Web Services identity provider.
     * 
     */
    public AwsResponse aws() {
        return this.aws;
    }
    /**
     * @return A description for the provider. Cannot exceed 256 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the provider is disabled. You cannot use a disabled provider to exchange tokens. However, existing tokens still grant access.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return A display name for the provider. Cannot exceed 32 characters.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The resource name of the provider.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An OpenId Connect 1.0 identity provider.
     * 
     */
    public OidcResponse oidc() {
        return this.oidc;
    }
    /**
     * @return An SAML 2.0 identity provider.
     * 
     */
    public SamlResponse saml() {
        return this.saml;
    }
    /**
     * @return The state of the provider.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProviderResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String attributeCondition;
        private Map<String,String> attributeMapping;
        private AwsResponse aws;
        private String description;
        private Boolean disabled;
        private String displayName;
        private String name;
        private OidcResponse oidc;
        private SamlResponse saml;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProviderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeCondition = defaults.attributeCondition;
    	      this.attributeMapping = defaults.attributeMapping;
    	      this.aws = defaults.aws;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.oidc = defaults.oidc;
    	      this.saml = defaults.saml;
    	      this.state = defaults.state;
        }

        public Builder attributeCondition(String attributeCondition) {
            this.attributeCondition = Objects.requireNonNull(attributeCondition);
            return this;
        }
        public Builder attributeMapping(Map<String,String> attributeMapping) {
            this.attributeMapping = Objects.requireNonNull(attributeMapping);
            return this;
        }
        public Builder aws(AwsResponse aws) {
            this.aws = Objects.requireNonNull(aws);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder oidc(OidcResponse oidc) {
            this.oidc = Objects.requireNonNull(oidc);
            return this;
        }
        public Builder saml(SamlResponse saml) {
            this.saml = Objects.requireNonNull(saml);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetProviderResult build() {
            return new GetProviderResult(attributeCondition, attributeMapping, aws, description, disabled, displayName, name, oidc, saml, state);
        }
    }
}
