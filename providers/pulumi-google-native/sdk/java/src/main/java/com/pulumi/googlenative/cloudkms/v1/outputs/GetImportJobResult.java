// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudkms.v1.outputs.KeyOperationAttestationResponse;
import com.pulumi.googlenative.cloudkms.v1.outputs.WrappingPublicKeyResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetImportJobResult {
    /**
     * @return Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
     * 
     */
    private final KeyOperationAttestationResponse attestation;
    /**
     * @return The time at which this ImportJob was created.
     * 
     */
    private final String createTime;
    /**
     * @return The time this ImportJob expired. Only present if state is EXPIRED.
     * 
     */
    private final String expireEventTime;
    /**
     * @return The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
     * 
     */
    private final String expireTime;
    /**
     * @return The time this ImportJob&#39;s key material was generated.
     * 
     */
    private final String generateTime;
    /**
     * @return Immutable. The wrapping method to be used for incoming key material.
     * 
     */
    private final String importMethod;
    /**
     * @return The resource name for this ImportJob in the format `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}importJobs/*`.
     * 
     */
    private final String name;
    /**
     * @return Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
     * 
     */
    private final String protectionLevel;
    /**
     * @return The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
     * 
     */
    private final WrappingPublicKeyResponse publicKey;
    /**
     * @return The current state of the ImportJob, indicating if it can be used.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private GetImportJobResult(
        @CustomType.Parameter("attestation") KeyOperationAttestationResponse attestation,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("expireEventTime") String expireEventTime,
        @CustomType.Parameter("expireTime") String expireTime,
        @CustomType.Parameter("generateTime") String generateTime,
        @CustomType.Parameter("importMethod") String importMethod,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("protectionLevel") String protectionLevel,
        @CustomType.Parameter("publicKey") WrappingPublicKeyResponse publicKey,
        @CustomType.Parameter("state") String state) {
        this.attestation = attestation;
        this.createTime = createTime;
        this.expireEventTime = expireEventTime;
        this.expireTime = expireTime;
        this.generateTime = generateTime;
        this.importMethod = importMethod;
        this.name = name;
        this.protectionLevel = protectionLevel;
        this.publicKey = publicKey;
        this.state = state;
    }

    /**
     * @return Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
     * 
     */
    public KeyOperationAttestationResponse attestation() {
        return this.attestation;
    }
    /**
     * @return The time at which this ImportJob was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The time this ImportJob expired. Only present if state is EXPIRED.
     * 
     */
    public String expireEventTime() {
        return this.expireEventTime;
    }
    /**
     * @return The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The time this ImportJob&#39;s key material was generated.
     * 
     */
    public String generateTime() {
        return this.generateTime;
    }
    /**
     * @return Immutable. The wrapping method to be used for incoming key material.
     * 
     */
    public String importMethod() {
        return this.importMethod;
    }
    /**
     * @return The resource name for this ImportJob in the format `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}importJobs/*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
     * 
     */
    public String protectionLevel() {
        return this.protectionLevel;
    }
    /**
     * @return The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
     * 
     */
    public WrappingPublicKeyResponse publicKey() {
        return this.publicKey;
    }
    /**
     * @return The current state of the ImportJob, indicating if it can be used.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImportJobResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyOperationAttestationResponse attestation;
        private String createTime;
        private String expireEventTime;
        private String expireTime;
        private String generateTime;
        private String importMethod;
        private String name;
        private String protectionLevel;
        private WrappingPublicKeyResponse publicKey;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImportJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestation = defaults.attestation;
    	      this.createTime = defaults.createTime;
    	      this.expireEventTime = defaults.expireEventTime;
    	      this.expireTime = defaults.expireTime;
    	      this.generateTime = defaults.generateTime;
    	      this.importMethod = defaults.importMethod;
    	      this.name = defaults.name;
    	      this.protectionLevel = defaults.protectionLevel;
    	      this.publicKey = defaults.publicKey;
    	      this.state = defaults.state;
        }

        public Builder attestation(KeyOperationAttestationResponse attestation) {
            this.attestation = Objects.requireNonNull(attestation);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder expireEventTime(String expireEventTime) {
            this.expireEventTime = Objects.requireNonNull(expireEventTime);
            return this;
        }
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        public Builder generateTime(String generateTime) {
            this.generateTime = Objects.requireNonNull(generateTime);
            return this;
        }
        public Builder importMethod(String importMethod) {
            this.importMethod = Objects.requireNonNull(importMethod);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder protectionLevel(String protectionLevel) {
            this.protectionLevel = Objects.requireNonNull(protectionLevel);
            return this;
        }
        public Builder publicKey(WrappingPublicKeyResponse publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetImportJobResult build() {
            return new GetImportJobResult(attestation, createTime, expireEventTime, expireTime, generateTime, importMethod, name, protectionLevel, publicKey, state);
        }
    }
}
