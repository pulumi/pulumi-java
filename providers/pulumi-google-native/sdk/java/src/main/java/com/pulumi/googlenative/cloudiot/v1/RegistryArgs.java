// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudiot.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudiot.v1.enums.RegistryLogLevel;
import com.pulumi.googlenative.cloudiot.v1.inputs.EventNotificationConfigArgs;
import com.pulumi.googlenative.cloudiot.v1.inputs.HttpConfigArgs;
import com.pulumi.googlenative.cloudiot.v1.inputs.MqttConfigArgs;
import com.pulumi.googlenative.cloudiot.v1.inputs.RegistryCredentialArgs;
import com.pulumi.googlenative.cloudiot.v1.inputs.StateNotificationConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryArgs Empty = new RegistryArgs();

    /**
     * The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<List<RegistryCredentialArgs>> credentials;

    /**
     * @return The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
     * 
     */
    public Optional<Output<List<RegistryCredentialArgs>>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device&#39;s registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
     * 
     */
    @Import(name="eventNotificationConfigs")
    private @Nullable Output<List<EventNotificationConfigArgs>> eventNotificationConfigs;

    /**
     * @return The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device&#39;s registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
     * 
     */
    public Optional<Output<List<EventNotificationConfigArgs>>> eventNotificationConfigs() {
        return Optional.ofNullable(this.eventNotificationConfigs);
    }

    /**
     * The DeviceService (HTTP) configuration for this device registry.
     * 
     */
    @Import(name="httpConfig")
    private @Nullable Output<HttpConfigArgs> httpConfig;

    /**
     * @return The DeviceService (HTTP) configuration for this device registry.
     * 
     */
    public Optional<Output<HttpConfigArgs>> httpConfig() {
        return Optional.ofNullable(this.httpConfig);
    }

    /**
     * The identifier of this device registry. For example, `myRegistry`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The identifier of this device registry. For example, `myRegistry`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<RegistryLogLevel> logLevel;

    /**
     * @return **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
     * 
     */
    public Optional<Output<RegistryLogLevel>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * The MQTT configuration for this device registry.
     * 
     */
    @Import(name="mqttConfig")
    private @Nullable Output<MqttConfigArgs> mqttConfig;

    /**
     * @return The MQTT configuration for this device registry.
     * 
     */
    public Optional<Output<MqttConfigArgs>> mqttConfig() {
        return Optional.ofNullable(this.mqttConfig);
    }

    /**
     * The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn&#39;t exist, no notification will be published but the state will still be stored in Cloud IoT Core.
     * 
     */
    @Import(name="stateNotificationConfig")
    private @Nullable Output<StateNotificationConfigArgs> stateNotificationConfig;

    /**
     * @return The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn&#39;t exist, no notification will be published but the state will still be stored in Cloud IoT Core.
     * 
     */
    public Optional<Output<StateNotificationConfigArgs>> stateNotificationConfig() {
        return Optional.ofNullable(this.stateNotificationConfig);
    }

    private RegistryArgs() {}

    private RegistryArgs(RegistryArgs $) {
        this.credentials = $.credentials;
        this.eventNotificationConfigs = $.eventNotificationConfigs;
        this.httpConfig = $.httpConfig;
        this.id = $.id;
        this.location = $.location;
        this.logLevel = $.logLevel;
        this.mqttConfig = $.mqttConfig;
        this.name = $.name;
        this.project = $.project;
        this.stateNotificationConfig = $.stateNotificationConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryArgs $;

        public Builder() {
            $ = new RegistryArgs();
        }

        public Builder(RegistryArgs defaults) {
            $ = new RegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentials The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<List<RegistryCredentialArgs>> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
         * 
         * @return builder
         * 
         */
        public Builder credentials(List<RegistryCredentialArgs> credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param credentials The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
         * 
         * @return builder
         * 
         */
        public Builder credentials(RegistryCredentialArgs... credentials) {
            return credentials(List.of(credentials));
        }

        /**
         * @param eventNotificationConfigs The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device&#39;s registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
         * 
         * @return builder
         * 
         */
        public Builder eventNotificationConfigs(@Nullable Output<List<EventNotificationConfigArgs>> eventNotificationConfigs) {
            $.eventNotificationConfigs = eventNotificationConfigs;
            return this;
        }

        /**
         * @param eventNotificationConfigs The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device&#39;s registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
         * 
         * @return builder
         * 
         */
        public Builder eventNotificationConfigs(List<EventNotificationConfigArgs> eventNotificationConfigs) {
            return eventNotificationConfigs(Output.of(eventNotificationConfigs));
        }

        /**
         * @param eventNotificationConfigs The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device&#39;s registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
         * 
         * @return builder
         * 
         */
        public Builder eventNotificationConfigs(EventNotificationConfigArgs... eventNotificationConfigs) {
            return eventNotificationConfigs(List.of(eventNotificationConfigs));
        }

        /**
         * @param httpConfig The DeviceService (HTTP) configuration for this device registry.
         * 
         * @return builder
         * 
         */
        public Builder httpConfig(@Nullable Output<HttpConfigArgs> httpConfig) {
            $.httpConfig = httpConfig;
            return this;
        }

        /**
         * @param httpConfig The DeviceService (HTTP) configuration for this device registry.
         * 
         * @return builder
         * 
         */
        public Builder httpConfig(HttpConfigArgs httpConfig) {
            return httpConfig(Output.of(httpConfig));
        }

        /**
         * @param id The identifier of this device registry. For example, `myRegistry`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The identifier of this device registry. For example, `myRegistry`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logLevel **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<RegistryLogLevel> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(RegistryLogLevel logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param mqttConfig The MQTT configuration for this device registry.
         * 
         * @return builder
         * 
         */
        public Builder mqttConfig(@Nullable Output<MqttConfigArgs> mqttConfig) {
            $.mqttConfig = mqttConfig;
            return this;
        }

        /**
         * @param mqttConfig The MQTT configuration for this device registry.
         * 
         * @return builder
         * 
         */
        public Builder mqttConfig(MqttConfigArgs mqttConfig) {
            return mqttConfig(Output.of(mqttConfig));
        }

        /**
         * @param name The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param stateNotificationConfig The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn&#39;t exist, no notification will be published but the state will still be stored in Cloud IoT Core.
         * 
         * @return builder
         * 
         */
        public Builder stateNotificationConfig(@Nullable Output<StateNotificationConfigArgs> stateNotificationConfig) {
            $.stateNotificationConfig = stateNotificationConfig;
            return this;
        }

        /**
         * @param stateNotificationConfig The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn&#39;t exist, no notification will be published but the state will still be stored in Cloud IoT Core.
         * 
         * @return builder
         * 
         */
        public Builder stateNotificationConfig(StateNotificationConfigArgs stateNotificationConfig) {
            return stateNotificationConfig(Output.of(stateNotificationConfig));
        }

        public RegistryArgs build() {
            return $;
        }
    }

}
