// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataflow_v1b3.inputs.DebugOptionsResponse;
import com.pulumi.googlenative.dataflow_v1b3.inputs.WorkerPoolResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Describes the environment in which a Dataflow Job runs.
 * 
 */
public final class EnvironmentResponse extends com.pulumi.resources.InvokeArgs {

    public static final EnvironmentResponse Empty = new EnvironmentResponse();

    /**
     * The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. &#34;compute.googleapis.com&#34;.
     * 
     */
    @Import(name="clusterManagerApiService", required=true)
      private final String clusterManagerApiService;

    public String clusterManagerApiService() {
        return this.clusterManagerApiService;
    }

    /**
     * The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
     * 
     */
    @Import(name="dataset", required=true)
      private final String dataset;

    public String dataset() {
        return this.dataset;
    }

    /**
     * Any debugging options to be supplied to the job.
     * 
     */
    @Import(name="debugOptions", required=true)
      private final DebugOptionsResponse debugOptions;

    public DebugOptionsResponse debugOptions() {
        return this.debugOptions;
    }

    /**
     * The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
     * 
     */
    @Import(name="experiments", required=true)
      private final List<String> experiments;

    public List<String> experiments() {
        return this.experiments;
    }

    /**
     * Which Flexible Resource Scheduling mode to run in.
     * 
     */
    @Import(name="flexResourceSchedulingGoal", required=true)
      private final String flexResourceSchedulingGoal;

    public String flexResourceSchedulingGoal() {
        return this.flexResourceSchedulingGoal;
    }

    /**
     * Experimental settings.
     * 
     */
    @Import(name="internalExperiments", required=true)
      private final Map<String,String> internalExperiments;

    public Map<String,String> internalExperiments() {
        return this.internalExperiments;
    }

    /**
     * The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
     * 
     */
    @Import(name="sdkPipelineOptions", required=true)
      private final Map<String,String> sdkPipelineOptions;

    public Map<String,String> sdkPipelineOptions() {
        return this.sdkPipelineOptions;
    }

    /**
     * Identity to run virtual machines as. Defaults to the default account.
     * 
     */
    @Import(name="serviceAccountEmail", required=true)
      private final String serviceAccountEmail;

    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    /**
     * If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
     * 
     */
    @Import(name="serviceKmsKeyName", required=true)
      private final String serviceKmsKeyName;

    public String serviceKmsKeyName() {
        return this.serviceKmsKeyName;
    }

    /**
     * The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
     * 
     */
    @Import(name="serviceOptions", required=true)
      private final List<String> serviceOptions;

    public List<String> serviceOptions() {
        return this.serviceOptions;
    }

    /**
     * The shuffle mode used for the job.
     * 
     */
    @Import(name="shuffleMode", required=true)
      private final String shuffleMode;

    public String shuffleMode() {
        return this.shuffleMode;
    }

    /**
     * The prefix of the resources the system should use for temporary storage. The system will append the suffix &#34;/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    @Import(name="tempStoragePrefix", required=true)
      private final String tempStoragePrefix;

    public String tempStoragePrefix() {
        return this.tempStoragePrefix;
    }

    /**
     * A description of the process that generated the request.
     * 
     */
    @Import(name="userAgent", required=true)
      private final Map<String,String> userAgent;

    public Map<String,String> userAgent() {
        return this.userAgent;
    }

    /**
     * A structure describing which components and their versions of the service are required in order to run the job.
     * 
     */
    @Import(name="version", required=true)
      private final Map<String,String> version;

    public Map<String,String> version() {
        return this.version;
    }

    /**
     * The worker pools. At least one &#34;harness&#34; worker pool must be specified in order for the job to have workers.
     * 
     */
    @Import(name="workerPools", required=true)
      private final List<WorkerPoolResponse> workerPools;

    public List<WorkerPoolResponse> workerPools() {
        return this.workerPools;
    }

    /**
     * The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. &#34;us-west1&#34;. Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane&#39;s region.
     * 
     */
    @Import(name="workerRegion", required=true)
      private final String workerRegion;

    public String workerRegion() {
        return this.workerRegion;
    }

    /**
     * The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. &#34;us-west1-a&#34;. Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane&#39;s region is chosen based on available capacity.
     * 
     */
    @Import(name="workerZone", required=true)
      private final String workerZone;

    public String workerZone() {
        return this.workerZone;
    }

    public EnvironmentResponse(
        String clusterManagerApiService,
        String dataset,
        DebugOptionsResponse debugOptions,
        List<String> experiments,
        String flexResourceSchedulingGoal,
        Map<String,String> internalExperiments,
        Map<String,String> sdkPipelineOptions,
        String serviceAccountEmail,
        String serviceKmsKeyName,
        List<String> serviceOptions,
        String shuffleMode,
        String tempStoragePrefix,
        Map<String,String> userAgent,
        Map<String,String> version,
        List<WorkerPoolResponse> workerPools,
        String workerRegion,
        String workerZone) {
        this.clusterManagerApiService = Objects.requireNonNull(clusterManagerApiService, "expected parameter 'clusterManagerApiService' to be non-null");
        this.dataset = Objects.requireNonNull(dataset, "expected parameter 'dataset' to be non-null");
        this.debugOptions = Objects.requireNonNull(debugOptions, "expected parameter 'debugOptions' to be non-null");
        this.experiments = Objects.requireNonNull(experiments, "expected parameter 'experiments' to be non-null");
        this.flexResourceSchedulingGoal = Objects.requireNonNull(flexResourceSchedulingGoal, "expected parameter 'flexResourceSchedulingGoal' to be non-null");
        this.internalExperiments = Objects.requireNonNull(internalExperiments, "expected parameter 'internalExperiments' to be non-null");
        this.sdkPipelineOptions = Objects.requireNonNull(sdkPipelineOptions, "expected parameter 'sdkPipelineOptions' to be non-null");
        this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail, "expected parameter 'serviceAccountEmail' to be non-null");
        this.serviceKmsKeyName = Objects.requireNonNull(serviceKmsKeyName, "expected parameter 'serviceKmsKeyName' to be non-null");
        this.serviceOptions = Objects.requireNonNull(serviceOptions, "expected parameter 'serviceOptions' to be non-null");
        this.shuffleMode = Objects.requireNonNull(shuffleMode, "expected parameter 'shuffleMode' to be non-null");
        this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix, "expected parameter 'tempStoragePrefix' to be non-null");
        this.userAgent = Objects.requireNonNull(userAgent, "expected parameter 'userAgent' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.workerPools = Objects.requireNonNull(workerPools, "expected parameter 'workerPools' to be non-null");
        this.workerRegion = Objects.requireNonNull(workerRegion, "expected parameter 'workerRegion' to be non-null");
        this.workerZone = Objects.requireNonNull(workerZone, "expected parameter 'workerZone' to be non-null");
    }

    private EnvironmentResponse() {
        this.clusterManagerApiService = null;
        this.dataset = null;
        this.debugOptions = null;
        this.experiments = List.of();
        this.flexResourceSchedulingGoal = null;
        this.internalExperiments = Map.of();
        this.sdkPipelineOptions = Map.of();
        this.serviceAccountEmail = null;
        this.serviceKmsKeyName = null;
        this.serviceOptions = List.of();
        this.shuffleMode = null;
        this.tempStoragePrefix = null;
        this.userAgent = Map.of();
        this.version = Map.of();
        this.workerPools = List.of();
        this.workerRegion = null;
        this.workerZone = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clusterManagerApiService;
        private String dataset;
        private DebugOptionsResponse debugOptions;
        private List<String> experiments;
        private String flexResourceSchedulingGoal;
        private Map<String,String> internalExperiments;
        private Map<String,String> sdkPipelineOptions;
        private String serviceAccountEmail;
        private String serviceKmsKeyName;
        private List<String> serviceOptions;
        private String shuffleMode;
        private String tempStoragePrefix;
        private Map<String,String> userAgent;
        private Map<String,String> version;
        private List<WorkerPoolResponse> workerPools;
        private String workerRegion;
        private String workerZone;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterManagerApiService = defaults.clusterManagerApiService;
    	      this.dataset = defaults.dataset;
    	      this.debugOptions = defaults.debugOptions;
    	      this.experiments = defaults.experiments;
    	      this.flexResourceSchedulingGoal = defaults.flexResourceSchedulingGoal;
    	      this.internalExperiments = defaults.internalExperiments;
    	      this.sdkPipelineOptions = defaults.sdkPipelineOptions;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.serviceKmsKeyName = defaults.serviceKmsKeyName;
    	      this.serviceOptions = defaults.serviceOptions;
    	      this.shuffleMode = defaults.shuffleMode;
    	      this.tempStoragePrefix = defaults.tempStoragePrefix;
    	      this.userAgent = defaults.userAgent;
    	      this.version = defaults.version;
    	      this.workerPools = defaults.workerPools;
    	      this.workerRegion = defaults.workerRegion;
    	      this.workerZone = defaults.workerZone;
        }

        public Builder clusterManagerApiService(String clusterManagerApiService) {
            this.clusterManagerApiService = Objects.requireNonNull(clusterManagerApiService);
            return this;
        }
        public Builder dataset(String dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }
        public Builder debugOptions(DebugOptionsResponse debugOptions) {
            this.debugOptions = Objects.requireNonNull(debugOptions);
            return this;
        }
        public Builder experiments(List<String> experiments) {
            this.experiments = Objects.requireNonNull(experiments);
            return this;
        }
        public Builder experiments(String... experiments) {
            return experiments(List.of(experiments));
        }
        public Builder flexResourceSchedulingGoal(String flexResourceSchedulingGoal) {
            this.flexResourceSchedulingGoal = Objects.requireNonNull(flexResourceSchedulingGoal);
            return this;
        }
        public Builder internalExperiments(Map<String,String> internalExperiments) {
            this.internalExperiments = Objects.requireNonNull(internalExperiments);
            return this;
        }
        public Builder sdkPipelineOptions(Map<String,String> sdkPipelineOptions) {
            this.sdkPipelineOptions = Objects.requireNonNull(sdkPipelineOptions);
            return this;
        }
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }
        public Builder serviceKmsKeyName(String serviceKmsKeyName) {
            this.serviceKmsKeyName = Objects.requireNonNull(serviceKmsKeyName);
            return this;
        }
        public Builder serviceOptions(List<String> serviceOptions) {
            this.serviceOptions = Objects.requireNonNull(serviceOptions);
            return this;
        }
        public Builder serviceOptions(String... serviceOptions) {
            return serviceOptions(List.of(serviceOptions));
        }
        public Builder shuffleMode(String shuffleMode) {
            this.shuffleMode = Objects.requireNonNull(shuffleMode);
            return this;
        }
        public Builder tempStoragePrefix(String tempStoragePrefix) {
            this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix);
            return this;
        }
        public Builder userAgent(Map<String,String> userAgent) {
            this.userAgent = Objects.requireNonNull(userAgent);
            return this;
        }
        public Builder version(Map<String,String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder workerPools(List<WorkerPoolResponse> workerPools) {
            this.workerPools = Objects.requireNonNull(workerPools);
            return this;
        }
        public Builder workerPools(WorkerPoolResponse... workerPools) {
            return workerPools(List.of(workerPools));
        }
        public Builder workerRegion(String workerRegion) {
            this.workerRegion = Objects.requireNonNull(workerRegion);
            return this;
        }
        public Builder workerZone(String workerZone) {
            this.workerZone = Objects.requireNonNull(workerZone);
            return this;
        }        public EnvironmentResponse build() {
            return new EnvironmentResponse(clusterManagerApiService, dataset, debugOptions, experiments, flexResourceSchedulingGoal, internalExperiments, sdkPipelineOptions, serviceAccountEmail, serviceKmsKeyName, serviceOptions, shuffleMode, tempStoragePrefix, userAgent, version, workerPools, workerRegion, workerZone);
        }
    }
}
