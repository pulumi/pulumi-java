// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v3.inputs.BasicSliArgs;
import com.pulumi.googlenative.monitoring.v3.inputs.RequestBasedSliArgs;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance.
 * 
 */
public final class PerformanceThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final PerformanceThresholdArgs Empty = new PerformanceThresholdArgs();

    /**
     * BasicSli to evaluate to judge window quality.
     * 
     */
    @Import(name="basicSliPerformance")
    private @Nullable Output<BasicSliArgs> basicSliPerformance;

    /**
     * @return BasicSli to evaluate to judge window quality.
     * 
     */
    public Optional<Output<BasicSliArgs>> basicSliPerformance() {
        return Optional.ofNullable(this.basicSliPerformance);
    }

    /**
     * RequestBasedSli to evaluate to judge window quality.
     * 
     */
    @Import(name="performance")
    private @Nullable Output<RequestBasedSliArgs> performance;

    /**
     * @return RequestBasedSli to evaluate to judge window quality.
     * 
     */
    public Optional<Output<RequestBasedSliArgs>> performance() {
        return Optional.ofNullable(this.performance);
    }

    /**
     * If window performance &gt;= threshold, the window is counted as good.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    /**
     * @return If window performance &gt;= threshold, the window is counted as good.
     * 
     */
    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private PerformanceThresholdArgs() {}

    private PerformanceThresholdArgs(PerformanceThresholdArgs $) {
        this.basicSliPerformance = $.basicSliPerformance;
        this.performance = $.performance;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PerformanceThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PerformanceThresholdArgs $;

        public Builder() {
            $ = new PerformanceThresholdArgs();
        }

        public Builder(PerformanceThresholdArgs defaults) {
            $ = new PerformanceThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param basicSliPerformance BasicSli to evaluate to judge window quality.
         * 
         * @return builder
         * 
         */
        public Builder basicSliPerformance(@Nullable Output<BasicSliArgs> basicSliPerformance) {
            $.basicSliPerformance = basicSliPerformance;
            return this;
        }

        /**
         * @param basicSliPerformance BasicSli to evaluate to judge window quality.
         * 
         * @return builder
         * 
         */
        public Builder basicSliPerformance(BasicSliArgs basicSliPerformance) {
            return basicSliPerformance(Output.of(basicSliPerformance));
        }

        /**
         * @param performance RequestBasedSli to evaluate to judge window quality.
         * 
         * @return builder
         * 
         */
        public Builder performance(@Nullable Output<RequestBasedSliArgs> performance) {
            $.performance = performance;
            return this;
        }

        /**
         * @param performance RequestBasedSli to evaluate to judge window quality.
         * 
         * @return builder
         * 
         */
        public Builder performance(RequestBasedSliArgs performance) {
            return performance(Output.of(performance));
        }

        /**
         * @param threshold If window performance &gt;= threshold, the window is counted as good.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold If window performance &gt;= threshold, the window is counted as good.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public PerformanceThresholdArgs build() {
            return $;
        }
    }

}
