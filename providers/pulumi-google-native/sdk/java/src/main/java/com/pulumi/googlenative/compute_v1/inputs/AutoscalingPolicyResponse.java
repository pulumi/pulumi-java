// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.inputs.AutoscalingPolicyCpuUtilizationResponse;
import com.pulumi.googlenative.compute_v1.inputs.AutoscalingPolicyCustomMetricUtilizationResponse;
import com.pulumi.googlenative.compute_v1.inputs.AutoscalingPolicyLoadBalancingUtilizationResponse;
import com.pulumi.googlenative.compute_v1.inputs.AutoscalingPolicyScaleInControlResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Cloud Autoscaler policy.
 * 
 */
public final class AutoscalingPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutoscalingPolicyResponse Empty = new AutoscalingPolicyResponse();

    /**
     * The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
     * 
     */
    @Import(name="coolDownPeriodSec", required=true)
    private Integer coolDownPeriodSec;

    public Integer coolDownPeriodSec() {
        return this.coolDownPeriodSec;
    }

    /**
     * Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
     * 
     */
    @Import(name="cpuUtilization", required=true)
    private AutoscalingPolicyCpuUtilizationResponse cpuUtilization;

    public AutoscalingPolicyCpuUtilizationResponse cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Configuration parameters of autoscaling based on a custom metric.
     * 
     */
    @Import(name="customMetricUtilizations", required=true)
    private List<AutoscalingPolicyCustomMetricUtilizationResponse> customMetricUtilizations;

    public List<AutoscalingPolicyCustomMetricUtilizationResponse> customMetricUtilizations() {
        return this.customMetricUtilizations;
    }

    /**
     * Configuration parameters of autoscaling based on load balancer.
     * 
     */
    @Import(name="loadBalancingUtilization", required=true)
    private AutoscalingPolicyLoadBalancingUtilizationResponse loadBalancingUtilization;

    public AutoscalingPolicyLoadBalancingUtilizationResponse loadBalancingUtilization() {
        return this.loadBalancingUtilization;
    }

    /**
     * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
     * 
     */
    @Import(name="maxNumReplicas", required=true)
    private Integer maxNumReplicas;

    public Integer maxNumReplicas() {
        return this.maxNumReplicas;
    }

    /**
     * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
     * 
     */
    @Import(name="minNumReplicas", required=true)
    private Integer minNumReplicas;

    public Integer minNumReplicas() {
        return this.minNumReplicas;
    }

    /**
     * Defines operating mode for this policy.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    public String mode() {
        return this.mode;
    }

    @Import(name="scaleInControl", required=true)
    private AutoscalingPolicyScaleInControlResponse scaleInControl;

    public AutoscalingPolicyScaleInControlResponse scaleInControl() {
        return this.scaleInControl;
    }

    /**
     * Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
     * 
     */
    @Import(name="scalingSchedules", required=true)
    private Map<String,String> scalingSchedules;

    public Map<String,String> scalingSchedules() {
        return this.scalingSchedules;
    }

    private AutoscalingPolicyResponse() {}

    private AutoscalingPolicyResponse(AutoscalingPolicyResponse $) {
        this.coolDownPeriodSec = $.coolDownPeriodSec;
        this.cpuUtilization = $.cpuUtilization;
        this.customMetricUtilizations = $.customMetricUtilizations;
        this.loadBalancingUtilization = $.loadBalancingUtilization;
        this.maxNumReplicas = $.maxNumReplicas;
        this.minNumReplicas = $.minNumReplicas;
        this.mode = $.mode;
        this.scaleInControl = $.scaleInControl;
        this.scalingSchedules = $.scalingSchedules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscalingPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscalingPolicyResponse $;

        public Builder() {
            $ = new AutoscalingPolicyResponse();
        }

        public Builder(AutoscalingPolicyResponse defaults) {
            $ = new AutoscalingPolicyResponse(Objects.requireNonNull(defaults));
        }

        public Builder coolDownPeriodSec(Integer coolDownPeriodSec) {
            $.coolDownPeriodSec = coolDownPeriodSec;
            return this;
        }

        public Builder cpuUtilization(AutoscalingPolicyCpuUtilizationResponse cpuUtilization) {
            $.cpuUtilization = cpuUtilization;
            return this;
        }

        public Builder customMetricUtilizations(List<AutoscalingPolicyCustomMetricUtilizationResponse> customMetricUtilizations) {
            $.customMetricUtilizations = customMetricUtilizations;
            return this;
        }

        public Builder customMetricUtilizations(AutoscalingPolicyCustomMetricUtilizationResponse... customMetricUtilizations) {
            return customMetricUtilizations(List.of(customMetricUtilizations));
        }

        public Builder loadBalancingUtilization(AutoscalingPolicyLoadBalancingUtilizationResponse loadBalancingUtilization) {
            $.loadBalancingUtilization = loadBalancingUtilization;
            return this;
        }

        public Builder maxNumReplicas(Integer maxNumReplicas) {
            $.maxNumReplicas = maxNumReplicas;
            return this;
        }

        public Builder minNumReplicas(Integer minNumReplicas) {
            $.minNumReplicas = minNumReplicas;
            return this;
        }

        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        public Builder scaleInControl(AutoscalingPolicyScaleInControlResponse scaleInControl) {
            $.scaleInControl = scaleInControl;
            return this;
        }

        public Builder scalingSchedules(Map<String,String> scalingSchedules) {
            $.scalingSchedules = scalingSchedules;
            return this;
        }

        public AutoscalingPolicyResponse build() {
            $.coolDownPeriodSec = Objects.requireNonNull($.coolDownPeriodSec, "expected parameter 'coolDownPeriodSec' to be non-null");
            $.cpuUtilization = Objects.requireNonNull($.cpuUtilization, "expected parameter 'cpuUtilization' to be non-null");
            $.customMetricUtilizations = Objects.requireNonNull($.customMetricUtilizations, "expected parameter 'customMetricUtilizations' to be non-null");
            $.loadBalancingUtilization = Objects.requireNonNull($.loadBalancingUtilization, "expected parameter 'loadBalancingUtilization' to be non-null");
            $.maxNumReplicas = Objects.requireNonNull($.maxNumReplicas, "expected parameter 'maxNumReplicas' to be non-null");
            $.minNumReplicas = Objects.requireNonNull($.minNumReplicas, "expected parameter 'minNumReplicas' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.scaleInControl = Objects.requireNonNull($.scaleInControl, "expected parameter 'scaleInControl' to be non-null");
            $.scalingSchedules = Objects.requireNonNull($.scalingSchedules, "expected parameter 'scalingSchedules' to be non-null");
            return $;
        }
    }

}
