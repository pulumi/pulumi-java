// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.healthcare_v1.enums.SchemaPackageSchematizedParsingType;
import com.pulumi.googlenative.healthcare_v1.enums.SchemaPackageUnexpectedSegmentHandling;
import com.pulumi.googlenative.healthcare_v1.inputs.Hl7SchemaConfigArgs;
import com.pulumi.googlenative.healthcare_v1.inputs.Hl7TypesConfigArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A schema package contains a set of schemas and type definitions.
 * 
 */
public final class SchemaPackageArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaPackageArgs Empty = new SchemaPackageArgs();

    /**
     * Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
     * 
     */
    @Import(name="ignoreMinOccurs")
      private final @Nullable Output<Boolean> ignoreMinOccurs;

    public Output<Boolean> ignoreMinOccurs() {
        return this.ignoreMinOccurs == null ? Codegen.empty() : this.ignoreMinOccurs;
    }

    /**
     * Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
     * 
     */
    @Import(name="schemas")
      private final @Nullable Output<List<Hl7SchemaConfigArgs>> schemas;

    public Output<List<Hl7SchemaConfigArgs>> schemas() {
        return this.schemas == null ? Codegen.empty() : this.schemas;
    }

    /**
     * Determines how messages that fail to parse are handled.
     * 
     */
    @Import(name="schematizedParsingType")
      private final @Nullable Output<SchemaPackageSchematizedParsingType> schematizedParsingType;

    public Output<SchemaPackageSchematizedParsingType> schematizedParsingType() {
        return this.schematizedParsingType == null ? Codegen.empty() : this.schematizedParsingType;
    }

    /**
     * Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
     * 
     */
    @Import(name="types")
      private final @Nullable Output<List<Hl7TypesConfigArgs>> types;

    public Output<List<Hl7TypesConfigArgs>> types() {
        return this.types == null ? Codegen.empty() : this.types;
    }

    /**
     * Determines how unexpected segments (segments not matched to the schema) are handled.
     * 
     */
    @Import(name="unexpectedSegmentHandling")
      private final @Nullable Output<SchemaPackageUnexpectedSegmentHandling> unexpectedSegmentHandling;

    public Output<SchemaPackageUnexpectedSegmentHandling> unexpectedSegmentHandling() {
        return this.unexpectedSegmentHandling == null ? Codegen.empty() : this.unexpectedSegmentHandling;
    }

    public SchemaPackageArgs(
        @Nullable Output<Boolean> ignoreMinOccurs,
        @Nullable Output<List<Hl7SchemaConfigArgs>> schemas,
        @Nullable Output<SchemaPackageSchematizedParsingType> schematizedParsingType,
        @Nullable Output<List<Hl7TypesConfigArgs>> types,
        @Nullable Output<SchemaPackageUnexpectedSegmentHandling> unexpectedSegmentHandling) {
        this.ignoreMinOccurs = ignoreMinOccurs;
        this.schemas = schemas;
        this.schematizedParsingType = schematizedParsingType;
        this.types = types;
        this.unexpectedSegmentHandling = unexpectedSegmentHandling;
    }

    private SchemaPackageArgs() {
        this.ignoreMinOccurs = Codegen.empty();
        this.schemas = Codegen.empty();
        this.schematizedParsingType = Codegen.empty();
        this.types = Codegen.empty();
        this.unexpectedSegmentHandling = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaPackageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> ignoreMinOccurs;
        private @Nullable Output<List<Hl7SchemaConfigArgs>> schemas;
        private @Nullable Output<SchemaPackageSchematizedParsingType> schematizedParsingType;
        private @Nullable Output<List<Hl7TypesConfigArgs>> types;
        private @Nullable Output<SchemaPackageUnexpectedSegmentHandling> unexpectedSegmentHandling;

        public Builder() {
    	      // Empty
        }

        public Builder(SchemaPackageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreMinOccurs = defaults.ignoreMinOccurs;
    	      this.schemas = defaults.schemas;
    	      this.schematizedParsingType = defaults.schematizedParsingType;
    	      this.types = defaults.types;
    	      this.unexpectedSegmentHandling = defaults.unexpectedSegmentHandling;
        }

        public Builder ignoreMinOccurs(@Nullable Output<Boolean> ignoreMinOccurs) {
            this.ignoreMinOccurs = ignoreMinOccurs;
            return this;
        }
        public Builder ignoreMinOccurs(@Nullable Boolean ignoreMinOccurs) {
            this.ignoreMinOccurs = Codegen.ofNullable(ignoreMinOccurs);
            return this;
        }
        public Builder schemas(@Nullable Output<List<Hl7SchemaConfigArgs>> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(@Nullable List<Hl7SchemaConfigArgs> schemas) {
            this.schemas = Codegen.ofNullable(schemas);
            return this;
        }
        public Builder schemas(Hl7SchemaConfigArgs... schemas) {
            return schemas(List.of(schemas));
        }
        public Builder schematizedParsingType(@Nullable Output<SchemaPackageSchematizedParsingType> schematizedParsingType) {
            this.schematizedParsingType = schematizedParsingType;
            return this;
        }
        public Builder schematizedParsingType(@Nullable SchemaPackageSchematizedParsingType schematizedParsingType) {
            this.schematizedParsingType = Codegen.ofNullable(schematizedParsingType);
            return this;
        }
        public Builder types(@Nullable Output<List<Hl7TypesConfigArgs>> types) {
            this.types = types;
            return this;
        }
        public Builder types(@Nullable List<Hl7TypesConfigArgs> types) {
            this.types = Codegen.ofNullable(types);
            return this;
        }
        public Builder types(Hl7TypesConfigArgs... types) {
            return types(List.of(types));
        }
        public Builder unexpectedSegmentHandling(@Nullable Output<SchemaPackageUnexpectedSegmentHandling> unexpectedSegmentHandling) {
            this.unexpectedSegmentHandling = unexpectedSegmentHandling;
            return this;
        }
        public Builder unexpectedSegmentHandling(@Nullable SchemaPackageUnexpectedSegmentHandling unexpectedSegmentHandling) {
            this.unexpectedSegmentHandling = Codegen.ofNullable(unexpectedSegmentHandling);
            return this;
        }        public SchemaPackageArgs build() {
            return new SchemaPackageArgs(ignoreMinOccurs, schemas, schematizedParsingType, types, unexpectedSegmentHandling);
        }
    }
}
