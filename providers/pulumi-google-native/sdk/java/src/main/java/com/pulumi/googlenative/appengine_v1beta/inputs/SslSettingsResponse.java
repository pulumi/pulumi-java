// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * SSL configuration for a DomainMapping resource.
 * 
 */
public final class SslSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SslSettingsResponse Empty = new SslSettingsResponse();

    /**
     * ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
     * 
     */
    @Import(name="certificateId", required=true)
    private String certificateId;

    /**
     * @return ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }

    /**
     * ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.
     * 
     */
    @Import(name="pendingManagedCertificateId", required=true)
    private String pendingManagedCertificateId;

    /**
     * @return ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.
     * 
     */
    public String pendingManagedCertificateId() {
        return this.pendingManagedCertificateId;
    }

    /**
     * SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
     * 
     */
    @Import(name="sslManagementType", required=true)
    private String sslManagementType;

    /**
     * @return SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
     * 
     */
    public String sslManagementType() {
        return this.sslManagementType;
    }

    private SslSettingsResponse() {}

    private SslSettingsResponse(SslSettingsResponse $) {
        this.certificateId = $.certificateId;
        this.pendingManagedCertificateId = $.pendingManagedCertificateId;
        this.sslManagementType = $.sslManagementType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslSettingsResponse $;

        public Builder() {
            $ = new SslSettingsResponse();
        }

        public Builder(SslSettingsResponse defaults) {
            $ = new SslSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param pendingManagedCertificateId ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.
         * 
         * @return builder
         * 
         */
        public Builder pendingManagedCertificateId(String pendingManagedCertificateId) {
            $.pendingManagedCertificateId = pendingManagedCertificateId;
            return this;
        }

        /**
         * @param sslManagementType SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
         * 
         * @return builder
         * 
         */
        public Builder sslManagementType(String sslManagementType) {
            $.sslManagementType = sslManagementType;
            return this;
        }

        public SslSettingsResponse build() {
            $.certificateId = Objects.requireNonNull($.certificateId, "expected parameter 'certificateId' to be non-null");
            $.pendingManagedCertificateId = Objects.requireNonNull($.pendingManagedCertificateId, "expected parameter 'pendingManagedCertificateId' to be non-null");
            $.sslManagementType = Objects.requireNonNull($.sslManagementType, "expected parameter 'sslManagementType' to be non-null");
            return $;
        }
    }

}
