// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Represents an HTTP certificate challenge.
 * 
 */
public final class CertHttpChallengeResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertHttpChallengeResponse Empty = new CertHttpChallengeResponse();

    /**
     * The URL path on which to serve the specified token to satisfy the certificate challenge.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    /**
     * The token to serve at the specified URL path to satisfy the certificate challenge.
     * 
     */
    @Import(name="token", required=true)
    private String token;

    public String token() {
        return this.token;
    }

    private CertHttpChallengeResponse() {}

    private CertHttpChallengeResponse(CertHttpChallengeResponse $) {
        this.path = $.path;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertHttpChallengeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertHttpChallengeResponse $;

        public Builder() {
            $ = new CertHttpChallengeResponse();
        }

        public Builder(CertHttpChallengeResponse defaults) {
            $ = new CertHttpChallengeResponse(Objects.requireNonNull(defaults));
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder token(String token) {
            $.token = token;
            return this;
        }

        public CertHttpChallengeResponse build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.token = Objects.requireNonNull($.token, "expected parameter 'token' to be non-null");
            return $;
        }
    }

}
