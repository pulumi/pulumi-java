// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.inputs.RouterNatRuleActionResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class RouterNatRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RouterNatRuleResponse Empty = new RouterNatRuleResponse();

    /**
     * The action to be enforced for traffic that matches this rule.
     * 
     */
    @Import(name="action", required=true)
    private RouterNatRuleActionResponse action;

    /**
     * @return The action to be enforced for traffic that matches this rule.
     * 
     */
    public RouterNatRuleActionResponse action() {
        return this.action;
    }

    /**
     * An optional description of this rule.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return An optional description of this rule.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: &#34;inIpRange(destination.ip, &#39;1.1.0.0/16&#39;) || inIpRange(destination.ip, &#39;2.2.0.0/16&#39;)&#34; &#34;destination.ip == &#39;1.1.0.1&#39; || destination.ip == &#39;8.8.8.8&#39;&#34; The following example is a valid match expression for private NAT: &#34;nexthop.hub == &#39;https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1&#39;&#34;
     * 
     */
    @Import(name="match", required=true)
    private String match;

    /**
     * @return CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: &#34;inIpRange(destination.ip, &#39;1.1.0.0/16&#39;) || inIpRange(destination.ip, &#39;2.2.0.0/16&#39;)&#34; &#34;destination.ip == &#39;1.1.0.1&#39; || destination.ip == &#39;8.8.8.8&#39;&#34; The following example is a valid match expression for private NAT: &#34;nexthop.hub == &#39;https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1&#39;&#34;
     * 
     */
    public String match() {
        return this.match;
    }

    /**
     * An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
     * 
     */
    @Import(name="ruleNumber", required=true)
    private Integer ruleNumber;

    /**
     * @return An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
     * 
     */
    public Integer ruleNumber() {
        return this.ruleNumber;
    }

    private RouterNatRuleResponse() {}

    private RouterNatRuleResponse(RouterNatRuleResponse $) {
        this.action = $.action;
        this.description = $.description;
        this.match = $.match;
        this.ruleNumber = $.ruleNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatRuleResponse $;

        public Builder() {
            $ = new RouterNatRuleResponse();
        }

        public Builder(RouterNatRuleResponse defaults) {
            $ = new RouterNatRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to be enforced for traffic that matches this rule.
         * 
         * @return builder
         * 
         */
        public Builder action(RouterNatRuleActionResponse action) {
            $.action = action;
            return this;
        }

        /**
         * @param description An optional description of this rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param match CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: &#34;inIpRange(destination.ip, &#39;1.1.0.0/16&#39;) || inIpRange(destination.ip, &#39;2.2.0.0/16&#39;)&#34; &#34;destination.ip == &#39;1.1.0.1&#39; || destination.ip == &#39;8.8.8.8&#39;&#34; The following example is a valid match expression for private NAT: &#34;nexthop.hub == &#39;https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1&#39;&#34;
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            $.match = match;
            return this;
        }

        /**
         * @param ruleNumber An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
         * 
         * @return builder
         * 
         */
        public Builder ruleNumber(Integer ruleNumber) {
            $.ruleNumber = ruleNumber;
            return this;
        }

        public RouterNatRuleResponse build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.match = Objects.requireNonNull($.match, "expected parameter 'match' to be non-null");
            $.ruleNumber = Objects.requireNonNull($.ruleNumber, "expected parameter 'ruleNumber' to be non-null");
            return $;
        }
    }

}
