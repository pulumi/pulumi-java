// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeArtifactResponse;
import com.pulumi.googlenative.osconfig_v1beta.inputs.SoftwareRecipeStepResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is `UPDATED`, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
 * 
 */
public final class SoftwareRecipeResponse extends com.pulumi.resources.InvokeArgs {

    public static final SoftwareRecipeResponse Empty = new SoftwareRecipeResponse();

    /**
     * Resources available to be used in the steps in the recipe.
     * 
     */
    @Import(name="artifacts", required=true)
    private List<SoftwareRecipeArtifactResponse> artifacts;

    /**
     * @return Resources available to be used in the steps in the recipe.
     * 
     */
    public List<SoftwareRecipeArtifactResponse> artifacts() {
        return this.artifacts;
    }

    /**
     * Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won&#39;t be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     * 
     */
    @Import(name="desiredState", required=true)
    private String desiredState;

    /**
     * @return Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won&#39;t be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     * 
     */
    public String desiredState() {
        return this.desiredState;
    }

    /**
     * Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
     * 
     */
    @Import(name="installSteps", required=true)
    private List<SoftwareRecipeStepResponse> installSteps;

    /**
     * @return Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
     * 
     */
    public List<SoftwareRecipeStepResponse> installSteps() {
        return this.installSteps;
    }

    /**
     * Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
     * 
     */
    @Import(name="updateSteps", required=true)
    private List<SoftwareRecipeStepResponse> updateSteps;

    /**
     * @return Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
     * 
     */
    public List<SoftwareRecipeStepResponse> updateSteps() {
        return this.updateSteps;
    }

    /**
     * The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     * 
     */
    @Import(name="version", required=true)
    private String version;

    /**
     * @return The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     * 
     */
    public String version() {
        return this.version;
    }

    private SoftwareRecipeResponse() {}

    private SoftwareRecipeResponse(SoftwareRecipeResponse $) {
        this.artifacts = $.artifacts;
        this.desiredState = $.desiredState;
        this.installSteps = $.installSteps;
        this.name = $.name;
        this.updateSteps = $.updateSteps;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareRecipeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareRecipeResponse $;

        public Builder() {
            $ = new SoftwareRecipeResponse();
        }

        public Builder(SoftwareRecipeResponse defaults) {
            $ = new SoftwareRecipeResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifacts Resources available to be used in the steps in the recipe.
         * 
         * @return builder
         * 
         */
        public Builder artifacts(List<SoftwareRecipeArtifactResponse> artifacts) {
            $.artifacts = artifacts;
            return this;
        }

        /**
         * @param artifacts Resources available to be used in the steps in the recipe.
         * 
         * @return builder
         * 
         */
        public Builder artifacts(SoftwareRecipeArtifactResponse... artifacts) {
            return artifacts(List.of(artifacts));
        }

        /**
         * @param desiredState Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won&#39;t be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param installSteps Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
         * 
         * @return builder
         * 
         */
        public Builder installSteps(List<SoftwareRecipeStepResponse> installSteps) {
            $.installSteps = installSteps;
            return this;
        }

        /**
         * @param installSteps Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
         * 
         * @return builder
         * 
         */
        public Builder installSteps(SoftwareRecipeStepResponse... installSteps) {
            return installSteps(List.of(installSteps));
        }

        /**
         * @param name Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param updateSteps Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
         * 
         * @return builder
         * 
         */
        public Builder updateSteps(List<SoftwareRecipeStepResponse> updateSteps) {
            $.updateSteps = updateSteps;
            return this;
        }

        /**
         * @param updateSteps Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
         * 
         * @return builder
         * 
         */
        public Builder updateSteps(SoftwareRecipeStepResponse... updateSteps) {
            return updateSteps(List.of(updateSteps));
        }

        /**
         * @param version The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public SoftwareRecipeResponse build() {
            $.artifacts = Objects.requireNonNull($.artifacts, "expected parameter 'artifacts' to be non-null");
            $.desiredState = Objects.requireNonNull($.desiredState, "expected parameter 'desiredState' to be non-null");
            $.installSteps = Objects.requireNonNull($.installSteps, "expected parameter 'installSteps' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.updateSteps = Objects.requireNonNull($.updateSteps, "expected parameter 'updateSteps' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
