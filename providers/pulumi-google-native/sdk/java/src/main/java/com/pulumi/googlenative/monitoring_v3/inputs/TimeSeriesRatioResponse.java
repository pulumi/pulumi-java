// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A TimeSeriesRatio specifies two TimeSeries to use for computing the good_service / total_service ratio. The specified TimeSeries must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE. The TimeSeriesRatio must specify exactly two of good, bad, and total, and the relationship good_service + bad_service = total_service will be assumed.
 * 
 */
public final class TimeSeriesRatioResponse extends com.pulumi.resources.InvokeArgs {

    public static final TimeSeriesRatioResponse Empty = new TimeSeriesRatioResponse();

    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
     * 
     */
    @Import(name="badServiceFilter", required=true)
      private final String badServiceFilter;

    public String badServiceFilter() {
        return this.badServiceFilter;
    }

    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying good service provided. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
     * 
     */
    @Import(name="goodServiceFilter", required=true)
      private final String goodServiceFilter;

    public String goodServiceFilter() {
        return this.goodServiceFilter;
    }

    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying total demanded service. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
     * 
     */
    @Import(name="totalServiceFilter", required=true)
      private final String totalServiceFilter;

    public String totalServiceFilter() {
        return this.totalServiceFilter;
    }

    public TimeSeriesRatioResponse(
        String badServiceFilter,
        String goodServiceFilter,
        String totalServiceFilter) {
        this.badServiceFilter = Objects.requireNonNull(badServiceFilter, "expected parameter 'badServiceFilter' to be non-null");
        this.goodServiceFilter = Objects.requireNonNull(goodServiceFilter, "expected parameter 'goodServiceFilter' to be non-null");
        this.totalServiceFilter = Objects.requireNonNull(totalServiceFilter, "expected parameter 'totalServiceFilter' to be non-null");
    }

    private TimeSeriesRatioResponse() {
        this.badServiceFilter = null;
        this.goodServiceFilter = null;
        this.totalServiceFilter = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeSeriesRatioResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String badServiceFilter;
        private String goodServiceFilter;
        private String totalServiceFilter;

        public Builder() {
    	      // Empty
        }

        public Builder(TimeSeriesRatioResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.badServiceFilter = defaults.badServiceFilter;
    	      this.goodServiceFilter = defaults.goodServiceFilter;
    	      this.totalServiceFilter = defaults.totalServiceFilter;
        }

        public Builder badServiceFilter(String badServiceFilter) {
            this.badServiceFilter = Objects.requireNonNull(badServiceFilter);
            return this;
        }
        public Builder goodServiceFilter(String goodServiceFilter) {
            this.goodServiceFilter = Objects.requireNonNull(goodServiceFilter);
            return this;
        }
        public Builder totalServiceFilter(String totalServiceFilter) {
            this.totalServiceFilter = Objects.requireNonNull(totalServiceFilter);
            return this;
        }        public TimeSeriesRatioResponse build() {
            return new TimeSeriesRatioResponse(badServiceFilter, goodServiceFilter, totalServiceFilter);
        }
    }
}
