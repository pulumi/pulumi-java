// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Settings for Binary Authorization feature.
 * 
 */
public final class GoogleCloudRunOpV2BinaryAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudRunOpV2BinaryAuthorizationArgs Empty = new GoogleCloudRunOpV2BinaryAuthorizationArgs();

    /**
     * If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     * 
     */
    @Import(name="breakglassJustification")
    private @Nullable Output<String> breakglassJustification;

    /**
     * @return If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     * 
     */
    public Optional<Output<String>> breakglassJustification() {
        return Optional.ofNullable(this.breakglassJustification);
    }

    /**
     * If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
     * 
     */
    @Import(name="useDefault")
    private @Nullable Output<Boolean> useDefault;

    /**
     * @return If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
     * 
     */
    public Optional<Output<Boolean>> useDefault() {
        return Optional.ofNullable(this.useDefault);
    }

    private GoogleCloudRunOpV2BinaryAuthorizationArgs() {}

    private GoogleCloudRunOpV2BinaryAuthorizationArgs(GoogleCloudRunOpV2BinaryAuthorizationArgs $) {
        this.breakglassJustification = $.breakglassJustification;
        this.useDefault = $.useDefault;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudRunOpV2BinaryAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudRunOpV2BinaryAuthorizationArgs $;

        public Builder() {
            $ = new GoogleCloudRunOpV2BinaryAuthorizationArgs();
        }

        public Builder(GoogleCloudRunOpV2BinaryAuthorizationArgs defaults) {
            $ = new GoogleCloudRunOpV2BinaryAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param breakglassJustification If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
         * 
         * @return builder
         * 
         */
        public Builder breakglassJustification(@Nullable Output<String> breakglassJustification) {
            $.breakglassJustification = breakglassJustification;
            return this;
        }

        /**
         * @param breakglassJustification If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
         * 
         * @return builder
         * 
         */
        public Builder breakglassJustification(String breakglassJustification) {
            return breakglassJustification(Output.of(breakglassJustification));
        }

        /**
         * @param useDefault If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder useDefault(@Nullable Output<Boolean> useDefault) {
            $.useDefault = useDefault;
            return this;
        }

        /**
         * @param useDefault If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder useDefault(Boolean useDefault) {
            return useDefault(Output.of(useDefault));
        }

        public GoogleCloudRunOpV2BinaryAuthorizationArgs build() {
            return $;
        }
    }

}
