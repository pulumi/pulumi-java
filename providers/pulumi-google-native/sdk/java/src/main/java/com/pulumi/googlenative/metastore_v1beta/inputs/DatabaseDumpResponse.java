// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.metastore_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A specification of the location of and metadata about a database dump from a relational database management system.
 * 
 */
public final class DatabaseDumpResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatabaseDumpResponse Empty = new DatabaseDumpResponse();

    /**
     * The type of the database.
     * 
     */
    @Import(name="databaseType", required=true)
    private String databaseType;

    public String databaseType() {
        return this.databaseType;
    }

    /**
     * A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
     * 
     */
    @Import(name="gcsUri", required=true)
    private String gcsUri;

    public String gcsUri() {
        return this.gcsUri;
    }

    /**
     * The name of the source database.
     * 
     */
    @Import(name="sourceDatabase", required=true)
    private String sourceDatabase;

    public String sourceDatabase() {
        return this.sourceDatabase;
    }

    /**
     * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private DatabaseDumpResponse() {}

    private DatabaseDumpResponse(DatabaseDumpResponse $) {
        this.databaseType = $.databaseType;
        this.gcsUri = $.gcsUri;
        this.sourceDatabase = $.sourceDatabase;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseDumpResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseDumpResponse $;

        public Builder() {
            $ = new DatabaseDumpResponse();
        }

        public Builder(DatabaseDumpResponse defaults) {
            $ = new DatabaseDumpResponse(Objects.requireNonNull(defaults));
        }

        public Builder databaseType(String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        public Builder gcsUri(String gcsUri) {
            $.gcsUri = gcsUri;
            return this;
        }

        public Builder sourceDatabase(String sourceDatabase) {
            $.sourceDatabase = sourceDatabase;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public DatabaseDumpResponse build() {
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            $.gcsUri = Objects.requireNonNull($.gcsUri, "expected parameter 'gcsUri' to be non-null");
            $.sourceDatabase = Objects.requireNonNull($.sourceDatabase, "expected parameter 'sourceDatabase' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
