// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Target scaling by CPU usage.
 * 
 */
public final class CpuUtilizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CpuUtilizationArgs Empty = new CpuUtilizationArgs();

    /**
     * Period of time over which CPU utilization is calculated.
     * 
     */
    @Import(name="aggregationWindowLength")
    private @Nullable Output<String> aggregationWindowLength;

    public Optional<Output<String>> aggregationWindowLength() {
        return Optional.ofNullable(this.aggregationWindowLength);
    }

    /**
     * Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
     * 
     */
    @Import(name="targetUtilization")
    private @Nullable Output<Double> targetUtilization;

    public Optional<Output<Double>> targetUtilization() {
        return Optional.ofNullable(this.targetUtilization);
    }

    private CpuUtilizationArgs() {}

    private CpuUtilizationArgs(CpuUtilizationArgs $) {
        this.aggregationWindowLength = $.aggregationWindowLength;
        this.targetUtilization = $.targetUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpuUtilizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpuUtilizationArgs $;

        public Builder() {
            $ = new CpuUtilizationArgs();
        }

        public Builder(CpuUtilizationArgs defaults) {
            $ = new CpuUtilizationArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregationWindowLength(@Nullable Output<String> aggregationWindowLength) {
            $.aggregationWindowLength = aggregationWindowLength;
            return this;
        }

        public Builder aggregationWindowLength(String aggregationWindowLength) {
            return aggregationWindowLength(Output.of(aggregationWindowLength));
        }

        public Builder targetUtilization(@Nullable Output<Double> targetUtilization) {
            $.targetUtilization = targetUtilization;
            return this;
        }

        public Builder targetUtilization(Double targetUtilization) {
            return targetUtilization(Output.of(targetUtilization));
        }

        public CpuUtilizationArgs build() {
            return $;
        }
    }

}
