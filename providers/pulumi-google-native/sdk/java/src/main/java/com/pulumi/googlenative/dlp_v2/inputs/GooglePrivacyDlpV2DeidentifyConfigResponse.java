// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2InfoTypeTransformationsResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2RecordTransformationsResponse;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2TransformationErrorHandlingResponse;
import java.util.Objects;


/**
 * The configuration that controls how the data will change.
 * 
 */
public final class GooglePrivacyDlpV2DeidentifyConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2DeidentifyConfigResponse Empty = new GooglePrivacyDlpV2DeidentifyConfigResponse();

    /**
     * Treat the dataset as free-form text and apply the same free text transformation everywhere.
     * 
     */
    @Import(name="infoTypeTransformations", required=true)
    private GooglePrivacyDlpV2InfoTypeTransformationsResponse infoTypeTransformations;

    /**
     * @return Treat the dataset as free-form text and apply the same free text transformation everywhere.
     * 
     */
    public GooglePrivacyDlpV2InfoTypeTransformationsResponse infoTypeTransformations() {
        return this.infoTypeTransformations;
    }

    /**
     * Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
     * 
     */
    @Import(name="recordTransformations", required=true)
    private GooglePrivacyDlpV2RecordTransformationsResponse recordTransformations;

    /**
     * @return Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
     * 
     */
    public GooglePrivacyDlpV2RecordTransformationsResponse recordTransformations() {
        return this.recordTransformations;
    }

    /**
     * Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
     * 
     */
    @Import(name="transformationErrorHandling", required=true)
    private GooglePrivacyDlpV2TransformationErrorHandlingResponse transformationErrorHandling;

    /**
     * @return Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
     * 
     */
    public GooglePrivacyDlpV2TransformationErrorHandlingResponse transformationErrorHandling() {
        return this.transformationErrorHandling;
    }

    private GooglePrivacyDlpV2DeidentifyConfigResponse() {}

    private GooglePrivacyDlpV2DeidentifyConfigResponse(GooglePrivacyDlpV2DeidentifyConfigResponse $) {
        this.infoTypeTransformations = $.infoTypeTransformations;
        this.recordTransformations = $.recordTransformations;
        this.transformationErrorHandling = $.transformationErrorHandling;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2DeidentifyConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2DeidentifyConfigResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2DeidentifyConfigResponse();
        }

        public Builder(GooglePrivacyDlpV2DeidentifyConfigResponse defaults) {
            $ = new GooglePrivacyDlpV2DeidentifyConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param infoTypeTransformations Treat the dataset as free-form text and apply the same free text transformation everywhere.
         * 
         * @return builder
         * 
         */
        public Builder infoTypeTransformations(GooglePrivacyDlpV2InfoTypeTransformationsResponse infoTypeTransformations) {
            $.infoTypeTransformations = infoTypeTransformations;
            return this;
        }

        /**
         * @param recordTransformations Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
         * 
         * @return builder
         * 
         */
        public Builder recordTransformations(GooglePrivacyDlpV2RecordTransformationsResponse recordTransformations) {
            $.recordTransformations = recordTransformations;
            return this;
        }

        /**
         * @param transformationErrorHandling Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
         * 
         * @return builder
         * 
         */
        public Builder transformationErrorHandling(GooglePrivacyDlpV2TransformationErrorHandlingResponse transformationErrorHandling) {
            $.transformationErrorHandling = transformationErrorHandling;
            return this;
        }

        public GooglePrivacyDlpV2DeidentifyConfigResponse build() {
            $.infoTypeTransformations = Objects.requireNonNull($.infoTypeTransformations, "expected parameter 'infoTypeTransformations' to be non-null");
            $.recordTransformations = Objects.requireNonNull($.recordTransformations, "expected parameter 'recordTransformations' to be non-null");
            $.transformationErrorHandling = Objects.requireNonNull($.transformationErrorHandling, "expected parameter 'transformationErrorHandling' to be non-null");
            return $;
        }
    }

}
