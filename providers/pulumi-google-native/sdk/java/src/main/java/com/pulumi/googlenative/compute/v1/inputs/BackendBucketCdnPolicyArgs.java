// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.v1.enums.BackendBucketCdnPolicyCacheMode;
import com.pulumi.googlenative.compute.v1.inputs.BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs;
import com.pulumi.googlenative.compute.v1.inputs.BackendBucketCdnPolicyCacheKeyPolicyArgs;
import com.pulumi.googlenative.compute.v1.inputs.BackendBucketCdnPolicyNegativeCachingPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Message containing Cloud CDN configuration for a backend bucket.
 * 
 */
public final class BackendBucketCdnPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendBucketCdnPolicyArgs Empty = new BackendBucketCdnPolicyArgs();

    /**
     * Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
     * 
     */
    @Import(name="bypassCacheOnRequestHeaders")
    private @Nullable Output<List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs>> bypassCacheOnRequestHeaders;

    /**
     * @return Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
     * 
     */
    public Optional<Output<List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs>>> bypassCacheOnRequestHeaders() {
        return Optional.ofNullable(this.bypassCacheOnRequestHeaders);
    }

    /**
     * The CacheKeyPolicy for this CdnPolicy.
     * 
     */
    @Import(name="cacheKeyPolicy")
    private @Nullable Output<BackendBucketCdnPolicyCacheKeyPolicyArgs> cacheKeyPolicy;

    /**
     * @return The CacheKeyPolicy for this CdnPolicy.
     * 
     */
    public Optional<Output<BackendBucketCdnPolicyCacheKeyPolicyArgs>> cacheKeyPolicy() {
        return Optional.ofNullable(this.cacheKeyPolicy);
    }

    /**
     * Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google&#39;s edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any &#34;private&#34;, &#34;no-store&#34; or &#34;no-cache&#34; directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * 
     */
    @Import(name="cacheMode")
    private @Nullable Output<BackendBucketCdnPolicyCacheMode> cacheMode;

    /**
     * @return Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google&#39;s edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any &#34;private&#34;, &#34;no-store&#34; or &#34;no-cache&#34; directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * 
     */
    public Optional<Output<BackendBucketCdnPolicyCacheMode>> cacheMode() {
        return Optional.ofNullable(this.cacheMode);
    }

    /**
     * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a &#34;public&#34; directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a &#34;public&#34; cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
     * 
     */
    @Import(name="clientTtl")
    private @Nullable Output<Integer> clientTtl;

    /**
     * @return Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a &#34;public&#34; directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a &#34;public&#34; cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
     * 
     */
    public Optional<Output<Integer>> clientTtl() {
        return Optional.ofNullable(this.clientTtl);
    }

    /**
     * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * 
     */
    @Import(name="defaultTtl")
    private @Nullable Output<Integer> defaultTtl;

    /**
     * @return Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * 
     */
    public Optional<Output<Integer>> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }

    /**
     * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<Integer> maxTtl;

    /**
     * @return Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * 
     */
    public Optional<Output<Integer>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
     * 
     */
    @Import(name="negativeCaching")
    private @Nullable Output<Boolean> negativeCaching;

    /**
     * @return Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
     * 
     */
    public Optional<Output<Boolean>> negativeCaching() {
        return Optional.ofNullable(this.negativeCaching);
    }

    /**
     * Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN&#39;s default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
     * 
     */
    @Import(name="negativeCachingPolicy")
    private @Nullable Output<List<BackendBucketCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicy;

    /**
     * @return Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN&#39;s default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
     * 
     */
    public Optional<Output<List<BackendBucketCdnPolicyNegativeCachingPolicyArgs>>> negativeCachingPolicy() {
        return Optional.ofNullable(this.negativeCachingPolicy);
    }

    /**
     * If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
     * 
     */
    @Import(name="requestCoalescing")
    private @Nullable Output<Boolean> requestCoalescing;

    /**
     * @return If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
     * 
     */
    public Optional<Output<Boolean>> requestCoalescing() {
        return Optional.ofNullable(this.requestCoalescing);
    }

    /**
     * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default &#34;max-stale&#34; duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
     * 
     */
    @Import(name="serveWhileStale")
    private @Nullable Output<Integer> serveWhileStale;

    /**
     * @return Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default &#34;max-stale&#34; duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
     * 
     */
    public Optional<Output<Integer>> serveWhileStale() {
        return Optional.ofNullable(this.serveWhileStale);
    }

    /**
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a &#34;Cache-Control: public, max-age=[TTL]&#34; header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * 
     */
    @Import(name="signedUrlCacheMaxAgeSec")
    private @Nullable Output<String> signedUrlCacheMaxAgeSec;

    /**
     * @return Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a &#34;Cache-Control: public, max-age=[TTL]&#34; header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * 
     */
    public Optional<Output<String>> signedUrlCacheMaxAgeSec() {
        return Optional.ofNullable(this.signedUrlCacheMaxAgeSec);
    }

    private BackendBucketCdnPolicyArgs() {}

    private BackendBucketCdnPolicyArgs(BackendBucketCdnPolicyArgs $) {
        this.bypassCacheOnRequestHeaders = $.bypassCacheOnRequestHeaders;
        this.cacheKeyPolicy = $.cacheKeyPolicy;
        this.cacheMode = $.cacheMode;
        this.clientTtl = $.clientTtl;
        this.defaultTtl = $.defaultTtl;
        this.maxTtl = $.maxTtl;
        this.negativeCaching = $.negativeCaching;
        this.negativeCachingPolicy = $.negativeCachingPolicy;
        this.requestCoalescing = $.requestCoalescing;
        this.serveWhileStale = $.serveWhileStale;
        this.signedUrlCacheMaxAgeSec = $.signedUrlCacheMaxAgeSec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendBucketCdnPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendBucketCdnPolicyArgs $;

        public Builder() {
            $ = new BackendBucketCdnPolicyArgs();
        }

        public Builder(BackendBucketCdnPolicyArgs defaults) {
            $ = new BackendBucketCdnPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassCacheOnRequestHeaders Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
         * 
         * @return builder
         * 
         */
        public Builder bypassCacheOnRequestHeaders(@Nullable Output<List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs>> bypassCacheOnRequestHeaders) {
            $.bypassCacheOnRequestHeaders = bypassCacheOnRequestHeaders;
            return this;
        }

        /**
         * @param bypassCacheOnRequestHeaders Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
         * 
         * @return builder
         * 
         */
        public Builder bypassCacheOnRequestHeaders(List<BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs> bypassCacheOnRequestHeaders) {
            return bypassCacheOnRequestHeaders(Output.of(bypassCacheOnRequestHeaders));
        }

        /**
         * @param bypassCacheOnRequestHeaders Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
         * 
         * @return builder
         * 
         */
        public Builder bypassCacheOnRequestHeaders(BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs... bypassCacheOnRequestHeaders) {
            return bypassCacheOnRequestHeaders(List.of(bypassCacheOnRequestHeaders));
        }

        /**
         * @param cacheKeyPolicy The CacheKeyPolicy for this CdnPolicy.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyPolicy(@Nullable Output<BackendBucketCdnPolicyCacheKeyPolicyArgs> cacheKeyPolicy) {
            $.cacheKeyPolicy = cacheKeyPolicy;
            return this;
        }

        /**
         * @param cacheKeyPolicy The CacheKeyPolicy for this CdnPolicy.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyPolicy(BackendBucketCdnPolicyCacheKeyPolicyArgs cacheKeyPolicy) {
            return cacheKeyPolicy(Output.of(cacheKeyPolicy));
        }

        /**
         * @param cacheMode Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google&#39;s edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any &#34;private&#34;, &#34;no-store&#34; or &#34;no-cache&#34; directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
         * 
         * @return builder
         * 
         */
        public Builder cacheMode(@Nullable Output<BackendBucketCdnPolicyCacheMode> cacheMode) {
            $.cacheMode = cacheMode;
            return this;
        }

        /**
         * @param cacheMode Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google&#39;s edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any &#34;private&#34;, &#34;no-store&#34; or &#34;no-cache&#34; directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
         * 
         * @return builder
         * 
         */
        public Builder cacheMode(BackendBucketCdnPolicyCacheMode cacheMode) {
            return cacheMode(Output.of(cacheMode));
        }

        /**
         * @param clientTtl Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a &#34;public&#34; directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a &#34;public&#34; cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
         * 
         * @return builder
         * 
         */
        public Builder clientTtl(@Nullable Output<Integer> clientTtl) {
            $.clientTtl = clientTtl;
            return this;
        }

        /**
         * @param clientTtl Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a &#34;public&#34; directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a &#34;public&#34; cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
         * 
         * @return builder
         * 
         */
        public Builder clientTtl(Integer clientTtl) {
            return clientTtl(Output.of(clientTtl));
        }

        /**
         * @param defaultTtl Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            $.defaultTtl = defaultTtl;
            return this;
        }

        /**
         * @param defaultTtl Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(Integer defaultTtl) {
            return defaultTtl(Output.of(defaultTtl));
        }

        /**
         * @param maxTtl Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(@Nullable Output<Integer> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        /**
         * @param maxTtl Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of &#34;0&#34; means &#34;always revalidate&#34;. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(Integer maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        /**
         * @param negativeCaching Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
         * 
         * @return builder
         * 
         */
        public Builder negativeCaching(@Nullable Output<Boolean> negativeCaching) {
            $.negativeCaching = negativeCaching;
            return this;
        }

        /**
         * @param negativeCaching Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
         * 
         * @return builder
         * 
         */
        public Builder negativeCaching(Boolean negativeCaching) {
            return negativeCaching(Output.of(negativeCaching));
        }

        /**
         * @param negativeCachingPolicy Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN&#39;s default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
         * 
         * @return builder
         * 
         */
        public Builder negativeCachingPolicy(@Nullable Output<List<BackendBucketCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicy) {
            $.negativeCachingPolicy = negativeCachingPolicy;
            return this;
        }

        /**
         * @param negativeCachingPolicy Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN&#39;s default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
         * 
         * @return builder
         * 
         */
        public Builder negativeCachingPolicy(List<BackendBucketCdnPolicyNegativeCachingPolicyArgs> negativeCachingPolicy) {
            return negativeCachingPolicy(Output.of(negativeCachingPolicy));
        }

        /**
         * @param negativeCachingPolicy Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN&#39;s default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
         * 
         * @return builder
         * 
         */
        public Builder negativeCachingPolicy(BackendBucketCdnPolicyNegativeCachingPolicyArgs... negativeCachingPolicy) {
            return negativeCachingPolicy(List.of(negativeCachingPolicy));
        }

        /**
         * @param requestCoalescing If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
         * 
         * @return builder
         * 
         */
        public Builder requestCoalescing(@Nullable Output<Boolean> requestCoalescing) {
            $.requestCoalescing = requestCoalescing;
            return this;
        }

        /**
         * @param requestCoalescing If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
         * 
         * @return builder
         * 
         */
        public Builder requestCoalescing(Boolean requestCoalescing) {
            return requestCoalescing(Output.of(requestCoalescing));
        }

        /**
         * @param serveWhileStale Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default &#34;max-stale&#34; duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
         * 
         * @return builder
         * 
         */
        public Builder serveWhileStale(@Nullable Output<Integer> serveWhileStale) {
            $.serveWhileStale = serveWhileStale;
            return this;
        }

        /**
         * @param serveWhileStale Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default &#34;max-stale&#34; duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
         * 
         * @return builder
         * 
         */
        public Builder serveWhileStale(Integer serveWhileStale) {
            return serveWhileStale(Output.of(serveWhileStale));
        }

        /**
         * @param signedUrlCacheMaxAgeSec Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a &#34;Cache-Control: public, max-age=[TTL]&#34; header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
         * 
         * @return builder
         * 
         */
        public Builder signedUrlCacheMaxAgeSec(@Nullable Output<String> signedUrlCacheMaxAgeSec) {
            $.signedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
            return this;
        }

        /**
         * @param signedUrlCacheMaxAgeSec Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a &#34;Cache-Control: public, max-age=[TTL]&#34; header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
         * 
         * @return builder
         * 
         */
        public Builder signedUrlCacheMaxAgeSec(String signedUrlCacheMaxAgeSec) {
            return signedUrlCacheMaxAgeSec(Output.of(signedUrlCacheMaxAgeSec));
        }

        public BackendBucketCdnPolicyArgs build() {
            return $;
        }
    }

}
