// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.enums.TlsValidationContextValidationSource;
import com.pulumi.googlenative.compute.alpha.inputs.SdsConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.
 * 
 */
public final class TlsValidationContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsValidationContextArgs Empty = new TlsValidationContextArgs();

    /**
     * The path to the file holding the CA certificate to validate the client or server certificate.
     * 
     */
    @Import(name="certificatePath")
    private @Nullable Output<String> certificatePath;

    /**
     * @return The path to the file holding the CA certificate to validate the client or server certificate.
     * 
     */
    public Optional<Output<String>> certificatePath() {
        return Optional.ofNullable(this.certificatePath);
    }

    /**
     * Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
     * 
     */
    @Import(name="sdsConfig")
    private @Nullable Output<SdsConfigArgs> sdsConfig;

    /**
     * @return Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
     * 
     */
    public Optional<Output<SdsConfigArgs>> sdsConfig() {
        return Optional.ofNullable(this.sdsConfig);
    }

    /**
     * Defines how TLS certificates are obtained.
     * 
     */
    @Import(name="validationSource")
    private @Nullable Output<TlsValidationContextValidationSource> validationSource;

    /**
     * @return Defines how TLS certificates are obtained.
     * 
     */
    public Optional<Output<TlsValidationContextValidationSource>> validationSource() {
        return Optional.ofNullable(this.validationSource);
    }

    private TlsValidationContextArgs() {}

    private TlsValidationContextArgs(TlsValidationContextArgs $) {
        this.certificatePath = $.certificatePath;
        this.sdsConfig = $.sdsConfig;
        this.validationSource = $.validationSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsValidationContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsValidationContextArgs $;

        public Builder() {
            $ = new TlsValidationContextArgs();
        }

        public Builder(TlsValidationContextArgs defaults) {
            $ = new TlsValidationContextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificatePath The path to the file holding the CA certificate to validate the client or server certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificatePath(@Nullable Output<String> certificatePath) {
            $.certificatePath = certificatePath;
            return this;
        }

        /**
         * @param certificatePath The path to the file holding the CA certificate to validate the client or server certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificatePath(String certificatePath) {
            return certificatePath(Output.of(certificatePath));
        }

        /**
         * @param sdsConfig Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         * 
         * @return builder
         * 
         */
        public Builder sdsConfig(@Nullable Output<SdsConfigArgs> sdsConfig) {
            $.sdsConfig = sdsConfig;
            return this;
        }

        /**
         * @param sdsConfig Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         * 
         * @return builder
         * 
         */
        public Builder sdsConfig(SdsConfigArgs sdsConfig) {
            return sdsConfig(Output.of(sdsConfig));
        }

        /**
         * @param validationSource Defines how TLS certificates are obtained.
         * 
         * @return builder
         * 
         */
        public Builder validationSource(@Nullable Output<TlsValidationContextValidationSource> validationSource) {
            $.validationSource = validationSource;
            return this;
        }

        /**
         * @param validationSource Defines how TLS certificates are obtained.
         * 
         * @return builder
         * 
         */
        public Builder validationSource(TlsValidationContextValidationSource validationSource) {
            return validationSource(Output.of(validationSource));
        }

        public TlsValidationContextArgs build() {
            return $;
        }
    }

}
