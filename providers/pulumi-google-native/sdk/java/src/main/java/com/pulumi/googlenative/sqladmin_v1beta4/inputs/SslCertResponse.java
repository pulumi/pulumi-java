// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1beta4.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * SslCerts Resource
 * 
 */
public final class SslCertResponse extends com.pulumi.resources.InvokeArgs {

    public static final SslCertResponse Empty = new SslCertResponse();

    /**
     * PEM representation.
     * 
     */
    @Import(name="cert", required=true)
    private String cert;

    /**
     * @return PEM representation.
     * 
     */
    public String cert() {
        return this.cert;
    }

    /**
     * Serial number, as extracted from the certificate.
     * 
     */
    @Import(name="certSerialNumber", required=true)
    private String certSerialNumber;

    /**
     * @return Serial number, as extracted from the certificate.
     * 
     */
    public String certSerialNumber() {
        return this.certSerialNumber;
    }

    /**
     * User supplied name. Constrained to [a-zA-Z.-_ ]+.
     * 
     */
    @Import(name="commonName", required=true)
    private String commonName;

    /**
     * @return User supplied name. Constrained to [a-zA-Z.-_ ]+.
     * 
     */
    public String commonName() {
        return this.commonName;
    }

    /**
     * The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    @Import(name="expirationTime", required=true)
    private String expirationTime;

    /**
     * @return The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }

    /**
     * Name of the database instance.
     * 
     */
    @Import(name="instance", required=true)
    private String instance;

    /**
     * @return Name of the database instance.
     * 
     */
    public String instance() {
        return this.instance;
    }

    /**
     * This is always `sql#sslCert`.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    /**
     * @return This is always `sql#sslCert`.
     * 
     */
    public String kind() {
        return this.kind;
    }

    /**
     * The URI of this resource.
     * 
     */
    @Import(name="selfLink", required=true)
    private String selfLink;

    /**
     * @return The URI of this resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }

    /**
     * Sha1 Fingerprint.
     * 
     */
    @Import(name="sha1Fingerprint", required=true)
    private String sha1Fingerprint;

    /**
     * @return Sha1 Fingerprint.
     * 
     */
    public String sha1Fingerprint() {
        return this.sha1Fingerprint;
    }

    private SslCertResponse() {}

    private SslCertResponse(SslCertResponse $) {
        this.cert = $.cert;
        this.certSerialNumber = $.certSerialNumber;
        this.commonName = $.commonName;
        this.createTime = $.createTime;
        this.expirationTime = $.expirationTime;
        this.instance = $.instance;
        this.kind = $.kind;
        this.selfLink = $.selfLink;
        this.sha1Fingerprint = $.sha1Fingerprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslCertResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslCertResponse $;

        public Builder() {
            $ = new SslCertResponse();
        }

        public Builder(SslCertResponse defaults) {
            $ = new SslCertResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cert PEM representation.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param certSerialNumber Serial number, as extracted from the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certSerialNumber(String certSerialNumber) {
            $.certSerialNumber = certSerialNumber;
            return this;
        }

        /**
         * @param commonName User supplied name. Constrained to [a-zA-Z.-_ ]+.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param createTime The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param expirationTime The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param instance Name of the database instance.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param kind This is always `sql#sslCert`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param selfLink The URI of this resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param sha1Fingerprint Sha1 Fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder sha1Fingerprint(String sha1Fingerprint) {
            $.sha1Fingerprint = sha1Fingerprint;
            return this;
        }

        public SslCertResponse build() {
            $.cert = Objects.requireNonNull($.cert, "expected parameter 'cert' to be non-null");
            $.certSerialNumber = Objects.requireNonNull($.certSerialNumber, "expected parameter 'certSerialNumber' to be non-null");
            $.commonName = Objects.requireNonNull($.commonName, "expected parameter 'commonName' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.expirationTime = Objects.requireNonNull($.expirationTime, "expected parameter 'expirationTime' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.selfLink = Objects.requireNonNull($.selfLink, "expected parameter 'selfLink' to be non-null");
            $.sha1Fingerprint = Objects.requireNonNull($.sha1Fingerprint, "expected parameter 'sha1Fingerprint' to be non-null");
            return $;
        }
    }

}
