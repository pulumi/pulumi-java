// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.certificatemanager.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.certificatemanager.v1.inputs.ProvisioningIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it&#39;s authorized to do so.
 * 
 */
public final class ManagedCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedCertificateArgs Empty = new ManagedCertificateArgs();

    /**
     * Immutable. Authorizations that will be used for performing domain authorization.
     * 
     */
    @Import(name="dnsAuthorizations")
    private @Nullable Output<List<String>> dnsAuthorizations;

    /**
     * @return Immutable. Authorizations that will be used for performing domain authorization.
     * 
     */
    public Optional<Output<List<String>>> dnsAuthorizations() {
        return Optional.ofNullable(this.dnsAuthorizations);
    }

    /**
     * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @return Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
     * 
     */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * Information about issues with provisioning a Managed Certificate.
     * 
     */
    @Import(name="provisioningIssue")
    private @Nullable Output<ProvisioningIssueArgs> provisioningIssue;

    /**
     * @return Information about issues with provisioning a Managed Certificate.
     * 
     */
    public Optional<Output<ProvisioningIssueArgs>> provisioningIssue() {
        return Optional.ofNullable(this.provisioningIssue);
    }

    private ManagedCertificateArgs() {}

    private ManagedCertificateArgs(ManagedCertificateArgs $) {
        this.dnsAuthorizations = $.dnsAuthorizations;
        this.domains = $.domains;
        this.provisioningIssue = $.provisioningIssue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedCertificateArgs $;

        public Builder() {
            $ = new ManagedCertificateArgs();
        }

        public Builder(ManagedCertificateArgs defaults) {
            $ = new ManagedCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsAuthorizations Immutable. Authorizations that will be used for performing domain authorization.
         * 
         * @return builder
         * 
         */
        public Builder dnsAuthorizations(@Nullable Output<List<String>> dnsAuthorizations) {
            $.dnsAuthorizations = dnsAuthorizations;
            return this;
        }

        /**
         * @param dnsAuthorizations Immutable. Authorizations that will be used for performing domain authorization.
         * 
         * @return builder
         * 
         */
        public Builder dnsAuthorizations(List<String> dnsAuthorizations) {
            return dnsAuthorizations(Output.of(dnsAuthorizations));
        }

        /**
         * @param dnsAuthorizations Immutable. Authorizations that will be used for performing domain authorization.
         * 
         * @return builder
         * 
         */
        public Builder dnsAuthorizations(String... dnsAuthorizations) {
            return dnsAuthorizations(List.of(dnsAuthorizations));
        }

        /**
         * @param domains Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param provisioningIssue Information about issues with provisioning a Managed Certificate.
         * 
         * @return builder
         * 
         */
        public Builder provisioningIssue(@Nullable Output<ProvisioningIssueArgs> provisioningIssue) {
            $.provisioningIssue = provisioningIssue;
            return this;
        }

        /**
         * @param provisioningIssue Information about issues with provisioning a Managed Certificate.
         * 
         * @return builder
         * 
         */
        public Builder provisioningIssue(ProvisioningIssueArgs provisioningIssue) {
            return provisioningIssue(Output.of(provisioningIssue));
        }

        public ManagedCertificateArgs build() {
            return $;
        }
    }

}
