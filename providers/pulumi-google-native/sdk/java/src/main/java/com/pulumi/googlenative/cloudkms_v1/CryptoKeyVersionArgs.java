// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.cloudkms_v1.enums.CryptoKeyVersionState;
import com.pulumi.googlenative.cloudkms_v1.inputs.ExternalProtectionLevelOptionsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CryptoKeyVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyVersionArgs Empty = new CryptoKeyVersionArgs();

    @Import(name="cryptoKeyId", required=true)
      private final Output<String> cryptoKeyId;

    public Output<String> cryptoKeyId() {
        return this.cryptoKeyId;
    }

    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     * 
     */
    @Import(name="externalProtectionLevelOptions")
      private final @Nullable Output<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions;

    public Output<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions() {
        return this.externalProtectionLevelOptions == null ? Codegen.empty() : this.externalProtectionLevelOptions;
    }

    @Import(name="keyRingId", required=true)
      private final Output<String> keyRingId;

    public Output<String> keyRingId() {
        return this.keyRingId;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The current state of the CryptoKeyVersion.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<CryptoKeyVersionState> state;

    public Output<CryptoKeyVersionState> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    public CryptoKeyVersionArgs(
        Output<String> cryptoKeyId,
        @Nullable Output<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions,
        Output<String> keyRingId,
        @Nullable Output<String> location,
        @Nullable Output<String> project,
        @Nullable Output<CryptoKeyVersionState> state) {
        this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
        this.externalProtectionLevelOptions = externalProtectionLevelOptions;
        this.keyRingId = Objects.requireNonNull(keyRingId, "expected parameter 'keyRingId' to be non-null");
        this.location = location;
        this.project = project;
        this.state = state;
    }

    private CryptoKeyVersionArgs() {
        this.cryptoKeyId = Codegen.empty();
        this.externalProtectionLevelOptions = Codegen.empty();
        this.keyRingId = Codegen.empty();
        this.location = Codegen.empty();
        this.project = Codegen.empty();
        this.state = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> cryptoKeyId;
        private @Nullable Output<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions;
        private Output<String> keyRingId;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;
        private @Nullable Output<CryptoKeyVersionState> state;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyId = defaults.cryptoKeyId;
    	      this.externalProtectionLevelOptions = defaults.externalProtectionLevelOptions;
    	      this.keyRingId = defaults.keyRingId;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
        }

        public Builder cryptoKeyId(Output<String> cryptoKeyId) {
            this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId);
            return this;
        }
        public Builder cryptoKeyId(String cryptoKeyId) {
            this.cryptoKeyId = Output.of(Objects.requireNonNull(cryptoKeyId));
            return this;
        }
        public Builder externalProtectionLevelOptions(@Nullable Output<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions) {
            this.externalProtectionLevelOptions = externalProtectionLevelOptions;
            return this;
        }
        public Builder externalProtectionLevelOptions(@Nullable ExternalProtectionLevelOptionsArgs externalProtectionLevelOptions) {
            this.externalProtectionLevelOptions = Codegen.ofNullable(externalProtectionLevelOptions);
            return this;
        }
        public Builder keyRingId(Output<String> keyRingId) {
            this.keyRingId = Objects.requireNonNull(keyRingId);
            return this;
        }
        public Builder keyRingId(String keyRingId) {
            this.keyRingId = Output.of(Objects.requireNonNull(keyRingId));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder state(@Nullable Output<CryptoKeyVersionState> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable CryptoKeyVersionState state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }        public CryptoKeyVersionArgs build() {
            return new CryptoKeyVersionArgs(cryptoKeyId, externalProtectionLevelOptions, keyRingId, location, project, state);
        }
    }
}
