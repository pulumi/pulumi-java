// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dns.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dns.v2.outputs.PolicyAlternativeNameServerConfigTargetNameServerResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class PolicyAlternativeNameServerConfigResponse {
    private final String kind;
    /**
     * @return Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
     * 
     */
    private final List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers;

    @CustomType.Constructor
    private PolicyAlternativeNameServerConfigResponse(
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("targetNameServers") List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers) {
        this.kind = kind;
        this.targetNameServers = targetNameServers;
    }

    public String kind() {
        return this.kind;
    }
    /**
     * @return Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
     * 
     */
    public List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers() {
        return this.targetNameServers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyAlternativeNameServerConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String kind;
        private List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyAlternativeNameServerConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kind = defaults.kind;
    	      this.targetNameServers = defaults.targetNameServers;
        }

        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder targetNameServers(List<PolicyAlternativeNameServerConfigTargetNameServerResponse> targetNameServers) {
            this.targetNameServers = Objects.requireNonNull(targetNameServers);
            return this;
        }
        public Builder targetNameServers(PolicyAlternativeNameServerConfigTargetNameServerResponse... targetNameServers) {
            return targetNameServers(List.of(targetNameServers));
        }        public PolicyAlternativeNameServerConfigResponse build() {
            return new PolicyAlternativeNameServerConfigResponse(kind, targetNameServers);
        }
    }
}
