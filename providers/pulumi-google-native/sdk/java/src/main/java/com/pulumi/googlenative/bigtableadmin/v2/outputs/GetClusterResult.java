// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigtableadmin.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.bigtableadmin.v2.outputs.ClusterConfigResponse;
import com.pulumi.googlenative.bigtableadmin.v2.outputs.EncryptionConfigResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetClusterResult {
    /**
     * @return Configuration for this cluster.
     * 
     */
    private final ClusterConfigResponse clusterConfig;
    /**
     * @return Immutable. The type of storage used by this cluster to serve its parent instance&#39;s tables, unless explicitly overridden.
     * 
     */
    private final String defaultStorageType;
    /**
     * @return Immutable. The encryption configuration for CMEK-protected clusters.
     * 
     */
    private final EncryptionConfigResponse encryptionConfig;
    /**
     * @return Immutable. The location where this cluster&#39;s nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
     * 
     */
    private final String location;
    /**
     * @return The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
     * 
     */
    private final String name;
    /**
     * @return The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
     * 
     */
    private final Integer serveNodes;
    /**
     * @return The current state of the cluster.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private GetClusterResult(
        @CustomType.Parameter("clusterConfig") ClusterConfigResponse clusterConfig,
        @CustomType.Parameter("defaultStorageType") String defaultStorageType,
        @CustomType.Parameter("encryptionConfig") EncryptionConfigResponse encryptionConfig,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("serveNodes") Integer serveNodes,
        @CustomType.Parameter("state") String state) {
        this.clusterConfig = clusterConfig;
        this.defaultStorageType = defaultStorageType;
        this.encryptionConfig = encryptionConfig;
        this.location = location;
        this.name = name;
        this.serveNodes = serveNodes;
        this.state = state;
    }

    /**
     * @return Configuration for this cluster.
     * 
     */
    public ClusterConfigResponse clusterConfig() {
        return this.clusterConfig;
    }
    /**
     * @return Immutable. The type of storage used by this cluster to serve its parent instance&#39;s tables, unless explicitly overridden.
     * 
     */
    public String defaultStorageType() {
        return this.defaultStorageType;
    }
    /**
     * @return Immutable. The encryption configuration for CMEK-protected clusters.
     * 
     */
    public EncryptionConfigResponse encryptionConfig() {
        return this.encryptionConfig;
    }
    /**
     * @return Immutable. The location where this cluster&#39;s nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
     * 
     */
    public Integer serveNodes() {
        return this.serveNodes;
    }
    /**
     * @return The current state of the cluster.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterConfigResponse clusterConfig;
        private String defaultStorageType;
        private EncryptionConfigResponse encryptionConfig;
        private String location;
        private String name;
        private Integer serveNodes;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterConfig = defaults.clusterConfig;
    	      this.defaultStorageType = defaults.defaultStorageType;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.serveNodes = defaults.serveNodes;
    	      this.state = defaults.state;
        }

        public Builder clusterConfig(ClusterConfigResponse clusterConfig) {
            this.clusterConfig = Objects.requireNonNull(clusterConfig);
            return this;
        }
        public Builder defaultStorageType(String defaultStorageType) {
            this.defaultStorageType = Objects.requireNonNull(defaultStorageType);
            return this;
        }
        public Builder encryptionConfig(EncryptionConfigResponse encryptionConfig) {
            this.encryptionConfig = Objects.requireNonNull(encryptionConfig);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder serveNodes(Integer serveNodes) {
            this.serveNodes = Objects.requireNonNull(serveNodes);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetClusterResult build() {
            return new GetClusterResult(clusterConfig, defaultStorageType, encryptionConfig, location, name, serveNodes, state);
        }
    }
}
