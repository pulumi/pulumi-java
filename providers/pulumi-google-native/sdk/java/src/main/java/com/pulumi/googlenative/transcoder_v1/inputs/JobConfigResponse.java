// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder_v1.inputs.AdBreakResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.EditAtomResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.ElementaryStreamResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.InputResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.ManifestResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.MuxStreamResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.OutputResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.OverlayResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.PubsubDestinationResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.SpriteSheetResponse;
import java.util.List;
import java.util.Objects;


/**
 * Job configuration
 * 
 */
public final class JobConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobConfigResponse Empty = new JobConfigResponse();

    /**
     * List of ad breaks. Specifies where to insert ad break tags in the output manifests.
     * 
     */
    @Import(name="adBreaks", required=true)
    private List<AdBreakResponse> adBreaks;

    /**
     * @return List of ad breaks. Specifies where to insert ad break tags in the output manifests.
     * 
     */
    public List<AdBreakResponse> adBreaks() {
        return this.adBreaks;
    }

    /**
     * List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
     * 
     */
    @Import(name="editList", required=true)
    private List<EditAtomResponse> editList;

    /**
     * @return List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
     * 
     */
    public List<EditAtomResponse> editList() {
        return this.editList;
    }

    /**
     * List of elementary streams.
     * 
     */
    @Import(name="elementaryStreams", required=true)
    private List<ElementaryStreamResponse> elementaryStreams;

    /**
     * @return List of elementary streams.
     * 
     */
    public List<ElementaryStreamResponse> elementaryStreams() {
        return this.elementaryStreams;
    }

    /**
     * List of input assets stored in Cloud Storage.
     * 
     */
    @Import(name="inputs", required=true)
    private List<InputResponse> inputs;

    /**
     * @return List of input assets stored in Cloud Storage.
     * 
     */
    public List<InputResponse> inputs() {
        return this.inputs;
    }

    /**
     * List of output manifests.
     * 
     */
    @Import(name="manifests", required=true)
    private List<ManifestResponse> manifests;

    /**
     * @return List of output manifests.
     * 
     */
    public List<ManifestResponse> manifests() {
        return this.manifests;
    }

    /**
     * List of multiplexing settings for output streams.
     * 
     */
    @Import(name="muxStreams", required=true)
    private List<MuxStreamResponse> muxStreams;

    /**
     * @return List of multiplexing settings for output streams.
     * 
     */
    public List<MuxStreamResponse> muxStreams() {
        return this.muxStreams;
    }

    /**
     * Output configuration.
     * 
     */
    @Import(name="output", required=true)
    private OutputResponse output;

    /**
     * @return Output configuration.
     * 
     */
    public OutputResponse output() {
        return this.output;
    }

    /**
     * List of overlays on the output video, in descending Z-order.
     * 
     */
    @Import(name="overlays", required=true)
    private List<OverlayResponse> overlays;

    /**
     * @return List of overlays on the output video, in descending Z-order.
     * 
     */
    public List<OverlayResponse> overlays() {
        return this.overlays;
    }

    /**
     * Destination on Pub/Sub.
     * 
     */
    @Import(name="pubsubDestination", required=true)
    private PubsubDestinationResponse pubsubDestination;

    /**
     * @return Destination on Pub/Sub.
     * 
     */
    public PubsubDestinationResponse pubsubDestination() {
        return this.pubsubDestination;
    }

    /**
     * List of output sprite sheets.
     * 
     */
    @Import(name="spriteSheets", required=true)
    private List<SpriteSheetResponse> spriteSheets;

    /**
     * @return List of output sprite sheets.
     * 
     */
    public List<SpriteSheetResponse> spriteSheets() {
        return this.spriteSheets;
    }

    private JobConfigResponse() {}

    private JobConfigResponse(JobConfigResponse $) {
        this.adBreaks = $.adBreaks;
        this.editList = $.editList;
        this.elementaryStreams = $.elementaryStreams;
        this.inputs = $.inputs;
        this.manifests = $.manifests;
        this.muxStreams = $.muxStreams;
        this.output = $.output;
        this.overlays = $.overlays;
        this.pubsubDestination = $.pubsubDestination;
        this.spriteSheets = $.spriteSheets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobConfigResponse $;

        public Builder() {
            $ = new JobConfigResponse();
        }

        public Builder(JobConfigResponse defaults) {
            $ = new JobConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param adBreaks List of ad breaks. Specifies where to insert ad break tags in the output manifests.
         * 
         * @return builder
         * 
         */
        public Builder adBreaks(List<AdBreakResponse> adBreaks) {
            $.adBreaks = adBreaks;
            return this;
        }

        /**
         * @param adBreaks List of ad breaks. Specifies where to insert ad break tags in the output manifests.
         * 
         * @return builder
         * 
         */
        public Builder adBreaks(AdBreakResponse... adBreaks) {
            return adBreaks(List.of(adBreaks));
        }

        /**
         * @param editList List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
         * 
         * @return builder
         * 
         */
        public Builder editList(List<EditAtomResponse> editList) {
            $.editList = editList;
            return this;
        }

        /**
         * @param editList List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
         * 
         * @return builder
         * 
         */
        public Builder editList(EditAtomResponse... editList) {
            return editList(List.of(editList));
        }

        /**
         * @param elementaryStreams List of elementary streams.
         * 
         * @return builder
         * 
         */
        public Builder elementaryStreams(List<ElementaryStreamResponse> elementaryStreams) {
            $.elementaryStreams = elementaryStreams;
            return this;
        }

        /**
         * @param elementaryStreams List of elementary streams.
         * 
         * @return builder
         * 
         */
        public Builder elementaryStreams(ElementaryStreamResponse... elementaryStreams) {
            return elementaryStreams(List.of(elementaryStreams));
        }

        /**
         * @param inputs List of input assets stored in Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<InputResponse> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs List of input assets stored in Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder inputs(InputResponse... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param manifests List of output manifests.
         * 
         * @return builder
         * 
         */
        public Builder manifests(List<ManifestResponse> manifests) {
            $.manifests = manifests;
            return this;
        }

        /**
         * @param manifests List of output manifests.
         * 
         * @return builder
         * 
         */
        public Builder manifests(ManifestResponse... manifests) {
            return manifests(List.of(manifests));
        }

        /**
         * @param muxStreams List of multiplexing settings for output streams.
         * 
         * @return builder
         * 
         */
        public Builder muxStreams(List<MuxStreamResponse> muxStreams) {
            $.muxStreams = muxStreams;
            return this;
        }

        /**
         * @param muxStreams List of multiplexing settings for output streams.
         * 
         * @return builder
         * 
         */
        public Builder muxStreams(MuxStreamResponse... muxStreams) {
            return muxStreams(List.of(muxStreams));
        }

        /**
         * @param output Output configuration.
         * 
         * @return builder
         * 
         */
        public Builder output(OutputResponse output) {
            $.output = output;
            return this;
        }

        /**
         * @param overlays List of overlays on the output video, in descending Z-order.
         * 
         * @return builder
         * 
         */
        public Builder overlays(List<OverlayResponse> overlays) {
            $.overlays = overlays;
            return this;
        }

        /**
         * @param overlays List of overlays on the output video, in descending Z-order.
         * 
         * @return builder
         * 
         */
        public Builder overlays(OverlayResponse... overlays) {
            return overlays(List.of(overlays));
        }

        /**
         * @param pubsubDestination Destination on Pub/Sub.
         * 
         * @return builder
         * 
         */
        public Builder pubsubDestination(PubsubDestinationResponse pubsubDestination) {
            $.pubsubDestination = pubsubDestination;
            return this;
        }

        /**
         * @param spriteSheets List of output sprite sheets.
         * 
         * @return builder
         * 
         */
        public Builder spriteSheets(List<SpriteSheetResponse> spriteSheets) {
            $.spriteSheets = spriteSheets;
            return this;
        }

        /**
         * @param spriteSheets List of output sprite sheets.
         * 
         * @return builder
         * 
         */
        public Builder spriteSheets(SpriteSheetResponse... spriteSheets) {
            return spriteSheets(List.of(spriteSheets));
        }

        public JobConfigResponse build() {
            $.adBreaks = Objects.requireNonNull($.adBreaks, "expected parameter 'adBreaks' to be non-null");
            $.editList = Objects.requireNonNull($.editList, "expected parameter 'editList' to be non-null");
            $.elementaryStreams = Objects.requireNonNull($.elementaryStreams, "expected parameter 'elementaryStreams' to be non-null");
            $.inputs = Objects.requireNonNull($.inputs, "expected parameter 'inputs' to be non-null");
            $.manifests = Objects.requireNonNull($.manifests, "expected parameter 'manifests' to be non-null");
            $.muxStreams = Objects.requireNonNull($.muxStreams, "expected parameter 'muxStreams' to be non-null");
            $.output = Objects.requireNonNull($.output, "expected parameter 'output' to be non-null");
            $.overlays = Objects.requireNonNull($.overlays, "expected parameter 'overlays' to be non-null");
            $.pubsubDestination = Objects.requireNonNull($.pubsubDestination, "expected parameter 'pubsubDestination' to be non-null");
            $.spriteSheets = Objects.requireNonNull($.spriteSheets, "expected parameter 'spriteSheets' to be non-null");
            return $;
        }
    }

}
