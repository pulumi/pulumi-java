// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.transcoder_v1.inputs.AdBreakResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.EditAtomResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.ElementaryStreamResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.InputResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.ManifestResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.MuxStreamResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.OutputResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.OverlayResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.PubsubDestinationResponse;
import com.pulumi.googlenative.transcoder_v1.inputs.SpriteSheetResponse;
import java.util.List;
import java.util.Objects;


/**
 * Job configuration
 * 
 */
public final class JobConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobConfigResponse Empty = new JobConfigResponse();

    /**
     * List of ad breaks. Specifies where to insert ad break tags in the output manifests.
     * 
     */
    @Import(name="adBreaks", required=true)
      private final List<AdBreakResponse> adBreaks;

    public List<AdBreakResponse> adBreaks() {
        return this.adBreaks;
    }

    /**
     * List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
     * 
     */
    @Import(name="editList", required=true)
      private final List<EditAtomResponse> editList;

    public List<EditAtomResponse> editList() {
        return this.editList;
    }

    /**
     * List of elementary streams.
     * 
     */
    @Import(name="elementaryStreams", required=true)
      private final List<ElementaryStreamResponse> elementaryStreams;

    public List<ElementaryStreamResponse> elementaryStreams() {
        return this.elementaryStreams;
    }

    /**
     * List of input assets stored in Cloud Storage.
     * 
     */
    @Import(name="inputs", required=true)
      private final List<InputResponse> inputs;

    public List<InputResponse> inputs() {
        return this.inputs;
    }

    /**
     * List of output manifests.
     * 
     */
    @Import(name="manifests", required=true)
      private final List<ManifestResponse> manifests;

    public List<ManifestResponse> manifests() {
        return this.manifests;
    }

    /**
     * List of multiplexing settings for output streams.
     * 
     */
    @Import(name="muxStreams", required=true)
      private final List<MuxStreamResponse> muxStreams;

    public List<MuxStreamResponse> muxStreams() {
        return this.muxStreams;
    }

    /**
     * Output configuration.
     * 
     */
    @Import(name="output", required=true)
      private final OutputResponse output;

    public OutputResponse output() {
        return this.output;
    }

    /**
     * List of overlays on the output video, in descending Z-order.
     * 
     */
    @Import(name="overlays", required=true)
      private final List<OverlayResponse> overlays;

    public List<OverlayResponse> overlays() {
        return this.overlays;
    }

    /**
     * Destination on Pub/Sub.
     * 
     */
    @Import(name="pubsubDestination", required=true)
      private final PubsubDestinationResponse pubsubDestination;

    public PubsubDestinationResponse pubsubDestination() {
        return this.pubsubDestination;
    }

    /**
     * List of output sprite sheets.
     * 
     */
    @Import(name="spriteSheets", required=true)
      private final List<SpriteSheetResponse> spriteSheets;

    public List<SpriteSheetResponse> spriteSheets() {
        return this.spriteSheets;
    }

    public JobConfigResponse(
        List<AdBreakResponse> adBreaks,
        List<EditAtomResponse> editList,
        List<ElementaryStreamResponse> elementaryStreams,
        List<InputResponse> inputs,
        List<ManifestResponse> manifests,
        List<MuxStreamResponse> muxStreams,
        OutputResponse output,
        List<OverlayResponse> overlays,
        PubsubDestinationResponse pubsubDestination,
        List<SpriteSheetResponse> spriteSheets) {
        this.adBreaks = Objects.requireNonNull(adBreaks, "expected parameter 'adBreaks' to be non-null");
        this.editList = Objects.requireNonNull(editList, "expected parameter 'editList' to be non-null");
        this.elementaryStreams = Objects.requireNonNull(elementaryStreams, "expected parameter 'elementaryStreams' to be non-null");
        this.inputs = Objects.requireNonNull(inputs, "expected parameter 'inputs' to be non-null");
        this.manifests = Objects.requireNonNull(manifests, "expected parameter 'manifests' to be non-null");
        this.muxStreams = Objects.requireNonNull(muxStreams, "expected parameter 'muxStreams' to be non-null");
        this.output = Objects.requireNonNull(output, "expected parameter 'output' to be non-null");
        this.overlays = Objects.requireNonNull(overlays, "expected parameter 'overlays' to be non-null");
        this.pubsubDestination = Objects.requireNonNull(pubsubDestination, "expected parameter 'pubsubDestination' to be non-null");
        this.spriteSheets = Objects.requireNonNull(spriteSheets, "expected parameter 'spriteSheets' to be non-null");
    }

    private JobConfigResponse() {
        this.adBreaks = List.of();
        this.editList = List.of();
        this.elementaryStreams = List.of();
        this.inputs = List.of();
        this.manifests = List.of();
        this.muxStreams = List.of();
        this.output = null;
        this.overlays = List.of();
        this.pubsubDestination = null;
        this.spriteSheets = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AdBreakResponse> adBreaks;
        private List<EditAtomResponse> editList;
        private List<ElementaryStreamResponse> elementaryStreams;
        private List<InputResponse> inputs;
        private List<ManifestResponse> manifests;
        private List<MuxStreamResponse> muxStreams;
        private OutputResponse output;
        private List<OverlayResponse> overlays;
        private PubsubDestinationResponse pubsubDestination;
        private List<SpriteSheetResponse> spriteSheets;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adBreaks = defaults.adBreaks;
    	      this.editList = defaults.editList;
    	      this.elementaryStreams = defaults.elementaryStreams;
    	      this.inputs = defaults.inputs;
    	      this.manifests = defaults.manifests;
    	      this.muxStreams = defaults.muxStreams;
    	      this.output = defaults.output;
    	      this.overlays = defaults.overlays;
    	      this.pubsubDestination = defaults.pubsubDestination;
    	      this.spriteSheets = defaults.spriteSheets;
        }

        public Builder adBreaks(List<AdBreakResponse> adBreaks) {
            this.adBreaks = Objects.requireNonNull(adBreaks);
            return this;
        }
        public Builder adBreaks(AdBreakResponse... adBreaks) {
            return adBreaks(List.of(adBreaks));
        }
        public Builder editList(List<EditAtomResponse> editList) {
            this.editList = Objects.requireNonNull(editList);
            return this;
        }
        public Builder editList(EditAtomResponse... editList) {
            return editList(List.of(editList));
        }
        public Builder elementaryStreams(List<ElementaryStreamResponse> elementaryStreams) {
            this.elementaryStreams = Objects.requireNonNull(elementaryStreams);
            return this;
        }
        public Builder elementaryStreams(ElementaryStreamResponse... elementaryStreams) {
            return elementaryStreams(List.of(elementaryStreams));
        }
        public Builder inputs(List<InputResponse> inputs) {
            this.inputs = Objects.requireNonNull(inputs);
            return this;
        }
        public Builder inputs(InputResponse... inputs) {
            return inputs(List.of(inputs));
        }
        public Builder manifests(List<ManifestResponse> manifests) {
            this.manifests = Objects.requireNonNull(manifests);
            return this;
        }
        public Builder manifests(ManifestResponse... manifests) {
            return manifests(List.of(manifests));
        }
        public Builder muxStreams(List<MuxStreamResponse> muxStreams) {
            this.muxStreams = Objects.requireNonNull(muxStreams);
            return this;
        }
        public Builder muxStreams(MuxStreamResponse... muxStreams) {
            return muxStreams(List.of(muxStreams));
        }
        public Builder output(OutputResponse output) {
            this.output = Objects.requireNonNull(output);
            return this;
        }
        public Builder overlays(List<OverlayResponse> overlays) {
            this.overlays = Objects.requireNonNull(overlays);
            return this;
        }
        public Builder overlays(OverlayResponse... overlays) {
            return overlays(List.of(overlays));
        }
        public Builder pubsubDestination(PubsubDestinationResponse pubsubDestination) {
            this.pubsubDestination = Objects.requireNonNull(pubsubDestination);
            return this;
        }
        public Builder spriteSheets(List<SpriteSheetResponse> spriteSheets) {
            this.spriteSheets = Objects.requireNonNull(spriteSheets);
            return this;
        }
        public Builder spriteSheets(SpriteSheetResponse... spriteSheets) {
            return spriteSheets(List.of(spriteSheets));
        }        public JobConfigResponse build() {
            return new JobConfigResponse(adBreaks, editList, elementaryStreams, inputs, manifests, muxStreams, output, overlays, pubsubDestination, spriteSheets);
        }
    }
}
