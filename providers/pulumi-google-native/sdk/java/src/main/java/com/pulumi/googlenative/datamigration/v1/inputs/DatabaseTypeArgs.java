// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datamigration.v1.enums.DatabaseTypeEngine;
import com.pulumi.googlenative.datamigration.v1.enums.DatabaseTypeProvider;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A message defining the database engine and provider.
 * 
 */
public final class DatabaseTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseTypeArgs Empty = new DatabaseTypeArgs();

    /**
     * The database engine.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<DatabaseTypeEngine> engine;

    /**
     * @return The database engine.
     * 
     */
    public Optional<Output<DatabaseTypeEngine>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The database provider.
     * 
     */
    @Import(name="provider")
    private @Nullable Output<DatabaseTypeProvider> provider;

    /**
     * @return The database provider.
     * 
     */
    public Optional<Output<DatabaseTypeProvider>> provider() {
        return Optional.ofNullable(this.provider);
    }

    private DatabaseTypeArgs() {}

    private DatabaseTypeArgs(DatabaseTypeArgs $) {
        this.engine = $.engine;
        this.provider = $.provider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseTypeArgs $;

        public Builder() {
            $ = new DatabaseTypeArgs();
        }

        public Builder(DatabaseTypeArgs defaults) {
            $ = new DatabaseTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param engine The database engine.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<DatabaseTypeEngine> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The database engine.
         * 
         * @return builder
         * 
         */
        public Builder engine(DatabaseTypeEngine engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param provider The database provider.
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<DatabaseTypeProvider> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider The database provider.
         * 
         * @return builder
         * 
         */
        public Builder provider(DatabaseTypeProvider provider) {
            return provider(Output.of(provider));
        }

        public DatabaseTypeArgs build() {
            return $;
        }
    }

}
