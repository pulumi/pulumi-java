// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class DestinationTablePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final DestinationTablePropertiesResponse Empty = new DestinationTablePropertiesResponse();

    /**
     * [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * [Internal] This field is for Google internal use only.
     * 
     */
    @Import(name="expirationTime", required=true)
    private String expirationTime;

    /**
     * @return [Internal] This field is for Google internal use only.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }

    /**
     * [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
     * 
     */
    @Import(name="friendlyName", required=true)
    private String friendlyName;

    /**
     * @return [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
     * 
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    private DestinationTablePropertiesResponse() {}

    private DestinationTablePropertiesResponse(DestinationTablePropertiesResponse $) {
        this.description = $.description;
        this.expirationTime = $.expirationTime;
        this.friendlyName = $.friendlyName;
        this.labels = $.labels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DestinationTablePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DestinationTablePropertiesResponse $;

        public Builder() {
            $ = new DestinationTablePropertiesResponse();
        }

        public Builder(DestinationTablePropertiesResponse defaults) {
            $ = new DestinationTablePropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param expirationTime [Internal] This field is for Google internal use only.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param friendlyName [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(String friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param labels [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        public DestinationTablePropertiesResponse build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.expirationTime = Objects.requireNonNull($.expirationTime, "expected parameter 'expirationTime' to be non-null");
            $.friendlyName = Objects.requireNonNull($.friendlyName, "expected parameter 'friendlyName' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            return $;
        }
    }

}
