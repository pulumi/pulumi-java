// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement.v1.inputs.LoggingDestinationArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
 * 
 */
public final class LoggingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingArgs Empty = new LoggingArgs();

    /**
     * Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
     * 
     */
    @Import(name="consumerDestinations")
    private @Nullable Output<List<LoggingDestinationArgs>> consumerDestinations;

    /**
     * @return Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
     * 
     */
    public Optional<Output<List<LoggingDestinationArgs>>> consumerDestinations() {
        return Optional.ofNullable(this.consumerDestinations);
    }

    /**
     * Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
     * 
     */
    @Import(name="producerDestinations")
    private @Nullable Output<List<LoggingDestinationArgs>> producerDestinations;

    /**
     * @return Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
     * 
     */
    public Optional<Output<List<LoggingDestinationArgs>>> producerDestinations() {
        return Optional.ofNullable(this.producerDestinations);
    }

    private LoggingArgs() {}

    private LoggingArgs(LoggingArgs $) {
        this.consumerDestinations = $.consumerDestinations;
        this.producerDestinations = $.producerDestinations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingArgs $;

        public Builder() {
            $ = new LoggingArgs();
        }

        public Builder(LoggingArgs defaults) {
            $ = new LoggingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerDestinations Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
         * 
         * @return builder
         * 
         */
        public Builder consumerDestinations(@Nullable Output<List<LoggingDestinationArgs>> consumerDestinations) {
            $.consumerDestinations = consumerDestinations;
            return this;
        }

        /**
         * @param consumerDestinations Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
         * 
         * @return builder
         * 
         */
        public Builder consumerDestinations(List<LoggingDestinationArgs> consumerDestinations) {
            return consumerDestinations(Output.of(consumerDestinations));
        }

        /**
         * @param consumerDestinations Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
         * 
         * @return builder
         * 
         */
        public Builder consumerDestinations(LoggingDestinationArgs... consumerDestinations) {
            return consumerDestinations(List.of(consumerDestinations));
        }

        /**
         * @param producerDestinations Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
         * 
         * @return builder
         * 
         */
        public Builder producerDestinations(@Nullable Output<List<LoggingDestinationArgs>> producerDestinations) {
            $.producerDestinations = producerDestinations;
            return this;
        }

        /**
         * @param producerDestinations Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
         * 
         * @return builder
         * 
         */
        public Builder producerDestinations(List<LoggingDestinationArgs> producerDestinations) {
            return producerDestinations(Output.of(producerDestinations));
        }

        /**
         * @param producerDestinations Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
         * 
         * @return builder
         * 
         */
        public Builder producerDestinations(LoggingDestinationArgs... producerDestinations) {
            return producerDestinations(List.of(producerDestinations));
        }

        public LoggingArgs build() {
            return $;
        }
    }

}
