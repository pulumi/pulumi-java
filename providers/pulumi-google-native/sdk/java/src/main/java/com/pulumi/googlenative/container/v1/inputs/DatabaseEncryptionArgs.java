// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container.v1.enums.DatabaseEncryptionState;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration of etcd encryption.
 * 
 */
public final class DatabaseEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseEncryptionArgs Empty = new DatabaseEncryptionArgs();

    /**
     * Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * Denotes the state of etcd encryption.
     * 
     */
    @Import(name="state")
    private @Nullable Output<DatabaseEncryptionState> state;

    /**
     * @return Denotes the state of etcd encryption.
     * 
     */
    public Optional<Output<DatabaseEncryptionState>> state() {
        return Optional.ofNullable(this.state);
    }

    private DatabaseEncryptionArgs() {}

    private DatabaseEncryptionArgs(DatabaseEncryptionArgs $) {
        this.keyName = $.keyName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseEncryptionArgs $;

        public Builder() {
            $ = new DatabaseEncryptionArgs();
        }

        public Builder(DatabaseEncryptionArgs defaults) {
            $ = new DatabaseEncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param state Denotes the state of etcd encryption.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<DatabaseEncryptionState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Denotes the state of etcd encryption.
         * 
         * @return builder
         * 
         */
        public Builder state(DatabaseEncryptionState state) {
            return state(Output.of(state));
        }

        public DatabaseEncryptionArgs build() {
            return $;
        }
    }

}
