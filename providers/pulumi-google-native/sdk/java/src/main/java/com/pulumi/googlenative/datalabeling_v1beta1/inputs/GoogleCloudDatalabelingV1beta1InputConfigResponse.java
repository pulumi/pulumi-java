// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datalabeling_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datalabeling_v1beta1.inputs.GoogleCloudDatalabelingV1beta1BigQuerySourceResponse;
import com.pulumi.googlenative.datalabeling_v1beta1.inputs.GoogleCloudDatalabelingV1beta1ClassificationMetadataResponse;
import com.pulumi.googlenative.datalabeling_v1beta1.inputs.GoogleCloudDatalabelingV1beta1GcsSourceResponse;
import com.pulumi.googlenative.datalabeling_v1beta1.inputs.GoogleCloudDatalabelingV1beta1TextMetadataResponse;
import java.lang.String;
import java.util.Objects;


/**
 * The configuration of input data, including data type, location, etc.
 * 
 */
public final class GoogleCloudDatalabelingV1beta1InputConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudDatalabelingV1beta1InputConfigResponse Empty = new GoogleCloudDatalabelingV1beta1InputConfigResponse();

    /**
     * Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.
     * 
     */
    @Import(name="annotationType", required=true)
    private String annotationType;

    /**
     * @return Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.
     * 
     */
    public String annotationType() {
        return this.annotationType;
    }

    /**
     * Source located in BigQuery. You must specify this field if you are using this InputConfig in an EvaluationJob.
     * 
     */
    @Import(name="bigquerySource", required=true)
    private GoogleCloudDatalabelingV1beta1BigQuerySourceResponse bigquerySource;

    /**
     * @return Source located in BigQuery. You must specify this field if you are using this InputConfig in an EvaluationJob.
     * 
     */
    public GoogleCloudDatalabelingV1beta1BigQuerySourceResponse bigquerySource() {
        return this.bigquerySource;
    }

    /**
     * Optional. Metadata about annotations for the input. You must specify this field if you are using this InputConfig in an EvaluationJob for a model version that performs classification.
     * 
     */
    @Import(name="classificationMetadata", required=true)
    private GoogleCloudDatalabelingV1beta1ClassificationMetadataResponse classificationMetadata;

    /**
     * @return Optional. Metadata about annotations for the input. You must specify this field if you are using this InputConfig in an EvaluationJob for a model version that performs classification.
     * 
     */
    public GoogleCloudDatalabelingV1beta1ClassificationMetadataResponse classificationMetadata() {
        return this.classificationMetadata;
    }

    /**
     * Data type must be specifed when user tries to import data.
     * 
     */
    @Import(name="dataType", required=true)
    private String dataType;

    /**
     * @return Data type must be specifed when user tries to import data.
     * 
     */
    public String dataType() {
        return this.dataType;
    }

    /**
     * Source located in Cloud Storage.
     * 
     */
    @Import(name="gcsSource", required=true)
    private GoogleCloudDatalabelingV1beta1GcsSourceResponse gcsSource;

    /**
     * @return Source located in Cloud Storage.
     * 
     */
    public GoogleCloudDatalabelingV1beta1GcsSourceResponse gcsSource() {
        return this.gcsSource;
    }

    /**
     * Required for text import, as language code must be specified.
     * 
     */
    @Import(name="textMetadata", required=true)
    private GoogleCloudDatalabelingV1beta1TextMetadataResponse textMetadata;

    /**
     * @return Required for text import, as language code must be specified.
     * 
     */
    public GoogleCloudDatalabelingV1beta1TextMetadataResponse textMetadata() {
        return this.textMetadata;
    }

    private GoogleCloudDatalabelingV1beta1InputConfigResponse() {}

    private GoogleCloudDatalabelingV1beta1InputConfigResponse(GoogleCloudDatalabelingV1beta1InputConfigResponse $) {
        this.annotationType = $.annotationType;
        this.bigquerySource = $.bigquerySource;
        this.classificationMetadata = $.classificationMetadata;
        this.dataType = $.dataType;
        this.gcsSource = $.gcsSource;
        this.textMetadata = $.textMetadata;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDatalabelingV1beta1InputConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDatalabelingV1beta1InputConfigResponse $;

        public Builder() {
            $ = new GoogleCloudDatalabelingV1beta1InputConfigResponse();
        }

        public Builder(GoogleCloudDatalabelingV1beta1InputConfigResponse defaults) {
            $ = new GoogleCloudDatalabelingV1beta1InputConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotationType Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.
         * 
         * @return builder
         * 
         */
        public Builder annotationType(String annotationType) {
            $.annotationType = annotationType;
            return this;
        }

        /**
         * @param bigquerySource Source located in BigQuery. You must specify this field if you are using this InputConfig in an EvaluationJob.
         * 
         * @return builder
         * 
         */
        public Builder bigquerySource(GoogleCloudDatalabelingV1beta1BigQuerySourceResponse bigquerySource) {
            $.bigquerySource = bigquerySource;
            return this;
        }

        /**
         * @param classificationMetadata Optional. Metadata about annotations for the input. You must specify this field if you are using this InputConfig in an EvaluationJob for a model version that performs classification.
         * 
         * @return builder
         * 
         */
        public Builder classificationMetadata(GoogleCloudDatalabelingV1beta1ClassificationMetadataResponse classificationMetadata) {
            $.classificationMetadata = classificationMetadata;
            return this;
        }

        /**
         * @param dataType Data type must be specifed when user tries to import data.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param gcsSource Source located in Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder gcsSource(GoogleCloudDatalabelingV1beta1GcsSourceResponse gcsSource) {
            $.gcsSource = gcsSource;
            return this;
        }

        /**
         * @param textMetadata Required for text import, as language code must be specified.
         * 
         * @return builder
         * 
         */
        public Builder textMetadata(GoogleCloudDatalabelingV1beta1TextMetadataResponse textMetadata) {
            $.textMetadata = textMetadata;
            return this;
        }

        public GoogleCloudDatalabelingV1beta1InputConfigResponse build() {
            $.annotationType = Objects.requireNonNull($.annotationType, "expected parameter 'annotationType' to be non-null");
            $.bigquerySource = Objects.requireNonNull($.bigquerySource, "expected parameter 'bigquerySource' to be non-null");
            $.classificationMetadata = Objects.requireNonNull($.classificationMetadata, "expected parameter 'classificationMetadata' to be non-null");
            $.dataType = Objects.requireNonNull($.dataType, "expected parameter 'dataType' to be non-null");
            $.gcsSource = Objects.requireNonNull($.gcsSource, "expected parameter 'gcsSource' to be non-null");
            $.textMetadata = Objects.requireNonNull($.textMetadata, "expected parameter 'textMetadata' to be non-null");
            return $;
        }
    }

}
