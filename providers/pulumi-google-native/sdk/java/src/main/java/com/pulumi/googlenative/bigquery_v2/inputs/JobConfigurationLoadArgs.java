// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.bigquery_v2.inputs.ClusteringArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.DestinationTablePropertiesArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.EncryptionConfigurationArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.HivePartitioningOptionsArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.ParquetOptionsArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.RangePartitioningArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.TableReferenceArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.TableSchemaArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.TimePartitioningArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobConfigurationLoadArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobConfigurationLoadArgs Empty = new JobConfigurationLoadArgs();

    /**
     * [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
     * 
     */
    @Import(name="allowJaggedRows")
      private final @Nullable Output<Boolean> allowJaggedRows;

    public Output<Boolean> allowJaggedRows() {
        return this.allowJaggedRows == null ? Codegen.empty() : this.allowJaggedRows;
    }

    /**
     * Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
     * 
     */
    @Import(name="allowQuotedNewlines")
      private final @Nullable Output<Boolean> allowQuotedNewlines;

    public Output<Boolean> allowQuotedNewlines() {
        return this.allowQuotedNewlines == null ? Codegen.empty() : this.allowQuotedNewlines;
    }

    /**
     * [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
     * 
     */
    @Import(name="autodetect")
      private final @Nullable Output<Boolean> autodetect;

    public Output<Boolean> autodetect() {
        return this.autodetect == null ? Codegen.empty() : this.autodetect;
    }

    /**
     * [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
     * 
     */
    @Import(name="clustering")
      private final @Nullable Output<ClusteringArgs> clustering;

    public Output<ClusteringArgs> clustering() {
        return this.clustering == null ? Codegen.empty() : this.clustering;
    }

    /**
     * [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    @Import(name="createDisposition")
      private final @Nullable Output<String> createDisposition;

    public Output<String> createDisposition() {
        return this.createDisposition == null ? Codegen.empty() : this.createDisposition;
    }

    /**
     * [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
     * 
     */
    @Import(name="decimalTargetTypes")
      private final @Nullable Output<List<String>> decimalTargetTypes;

    public Output<List<String>> decimalTargetTypes() {
        return this.decimalTargetTypes == null ? Codegen.empty() : this.decimalTargetTypes;
    }

    /**
     * Custom encryption configuration (e.g., Cloud KMS keys).
     * 
     */
    @Import(name="destinationEncryptionConfiguration")
      private final @Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration;

    public Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration == null ? Codegen.empty() : this.destinationEncryptionConfiguration;
    }

    /**
     * [Required] The destination table to load the data into.
     * 
     */
    @Import(name="destinationTable")
      private final @Nullable Output<TableReferenceArgs> destinationTable;

    public Output<TableReferenceArgs> destinationTable() {
        return this.destinationTable == null ? Codegen.empty() : this.destinationTable;
    }

    /**
     * [Beta] [Optional] Properties with which to create the destination table if it is new.
     * 
     */
    @Import(name="destinationTableProperties")
      private final @Nullable Output<DestinationTablePropertiesArgs> destinationTableProperties;

    public Output<DestinationTablePropertiesArgs> destinationTableProperties() {
        return this.destinationTableProperties == null ? Codegen.empty() : this.destinationTableProperties;
    }

    /**
     * [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
     * 
     */
    @Import(name="encoding")
      private final @Nullable Output<String> encoding;

    public Output<String> encoding() {
        return this.encoding == null ? Codegen.empty() : this.encoding;
    }

    /**
     * [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
     * 
     */
    @Import(name="fieldDelimiter")
      private final @Nullable Output<String> fieldDelimiter;

    public Output<String> fieldDelimiter() {
        return this.fieldDelimiter == null ? Codegen.empty() : this.fieldDelimiter;
    }

    /**
     * [Optional] Options to configure hive partitioning support.
     * 
     */
    @Import(name="hivePartitioningOptions")
      private final @Nullable Output<HivePartitioningOptionsArgs> hivePartitioningOptions;

    public Output<HivePartitioningOptionsArgs> hivePartitioningOptions() {
        return this.hivePartitioningOptions == null ? Codegen.empty() : this.hivePartitioningOptions;
    }

    /**
     * [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
     * 
     */
    @Import(name="ignoreUnknownValues")
      private final @Nullable Output<Boolean> ignoreUnknownValues;

    public Output<Boolean> ignoreUnknownValues() {
        return this.ignoreUnknownValues == null ? Codegen.empty() : this.ignoreUnknownValues;
    }

    /**
     * [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
     * 
     */
    @Import(name="jsonExtension")
      private final @Nullable Output<String> jsonExtension;

    public Output<String> jsonExtension() {
        return this.jsonExtension == null ? Codegen.empty() : this.jsonExtension;
    }

    /**
     * [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
     * 
     */
    @Import(name="maxBadRecords")
      private final @Nullable Output<Integer> maxBadRecords;

    public Output<Integer> maxBadRecords() {
        return this.maxBadRecords == null ? Codegen.empty() : this.maxBadRecords;
    }

    /**
     * [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
     * 
     */
    @Import(name="nullMarker")
      private final @Nullable Output<String> nullMarker;

    public Output<String> nullMarker() {
        return this.nullMarker == null ? Codegen.empty() : this.nullMarker;
    }

    /**
     * [Optional] Options to configure parquet support.
     * 
     */
    @Import(name="parquetOptions")
      private final @Nullable Output<ParquetOptionsArgs> parquetOptions;

    public Output<ParquetOptionsArgs> parquetOptions() {
        return this.parquetOptions == null ? Codegen.empty() : this.parquetOptions;
    }

    /**
     * If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
     * 
     */
    @Import(name="projectionFields")
      private final @Nullable Output<List<String>> projectionFields;

    public Output<List<String>> projectionFields() {
        return this.projectionFields == null ? Codegen.empty() : this.projectionFields;
    }

    /**
     * [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
     * 
     */
    @Import(name="quote")
      private final @Nullable Output<String> quote;

    public Output<String> quote() {
        return this.quote == null ? Codegen.empty() : this.quote;
    }

    /**
     * [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
     * 
     */
    @Import(name="rangePartitioning")
      private final @Nullable Output<RangePartitioningArgs> rangePartitioning;

    public Output<RangePartitioningArgs> rangePartitioning() {
        return this.rangePartitioning == null ? Codegen.empty() : this.rangePartitioning;
    }

    /**
     * [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
     * 
     */
    @Import(name="schema")
      private final @Nullable Output<TableSchemaArgs> schema;

    public Output<TableSchemaArgs> schema() {
        return this.schema == null ? Codegen.empty() : this.schema;
    }

    /**
     * Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
     * 
     */
    @Import(name="schemaUpdateOptions")
      private final @Nullable Output<List<String>> schemaUpdateOptions;

    public Output<List<String>> schemaUpdateOptions() {
        return this.schemaUpdateOptions == null ? Codegen.empty() : this.schemaUpdateOptions;
    }

    /**
     * [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
     * 
     */
    @Import(name="skipLeadingRows")
      private final @Nullable Output<Integer> skipLeadingRows;

    public Output<Integer> skipLeadingRows() {
        return this.skipLeadingRows == null ? Codegen.empty() : this.skipLeadingRows;
    }

    /**
     * [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
     * 
     */
    @Import(name="sourceFormat")
      private final @Nullable Output<String> sourceFormat;

    public Output<String> sourceFormat() {
        return this.sourceFormat == null ? Codegen.empty() : this.sourceFormat;
    }

    /**
     * [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
     * 
     */
    @Import(name="sourceUris")
      private final @Nullable Output<List<String>> sourceUris;

    public Output<List<String>> sourceUris() {
        return this.sourceUris == null ? Codegen.empty() : this.sourceUris;
    }

    /**
     * Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
     * 
     */
    @Import(name="timePartitioning")
      private final @Nullable Output<TimePartitioningArgs> timePartitioning;

    public Output<TimePartitioningArgs> timePartitioning() {
        return this.timePartitioning == null ? Codegen.empty() : this.timePartitioning;
    }

    /**
     * [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
     * 
     */
    @Import(name="useAvroLogicalTypes")
      private final @Nullable Output<Boolean> useAvroLogicalTypes;

    public Output<Boolean> useAvroLogicalTypes() {
        return this.useAvroLogicalTypes == null ? Codegen.empty() : this.useAvroLogicalTypes;
    }

    /**
     * [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    @Import(name="writeDisposition")
      private final @Nullable Output<String> writeDisposition;

    public Output<String> writeDisposition() {
        return this.writeDisposition == null ? Codegen.empty() : this.writeDisposition;
    }

    public JobConfigurationLoadArgs(
        @Nullable Output<Boolean> allowJaggedRows,
        @Nullable Output<Boolean> allowQuotedNewlines,
        @Nullable Output<Boolean> autodetect,
        @Nullable Output<ClusteringArgs> clustering,
        @Nullable Output<String> createDisposition,
        @Nullable Output<List<String>> decimalTargetTypes,
        @Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration,
        @Nullable Output<TableReferenceArgs> destinationTable,
        @Nullable Output<DestinationTablePropertiesArgs> destinationTableProperties,
        @Nullable Output<String> encoding,
        @Nullable Output<String> fieldDelimiter,
        @Nullable Output<HivePartitioningOptionsArgs> hivePartitioningOptions,
        @Nullable Output<Boolean> ignoreUnknownValues,
        @Nullable Output<String> jsonExtension,
        @Nullable Output<Integer> maxBadRecords,
        @Nullable Output<String> nullMarker,
        @Nullable Output<ParquetOptionsArgs> parquetOptions,
        @Nullable Output<List<String>> projectionFields,
        @Nullable Output<String> quote,
        @Nullable Output<RangePartitioningArgs> rangePartitioning,
        @Nullable Output<TableSchemaArgs> schema,
        @Nullable Output<List<String>> schemaUpdateOptions,
        @Nullable Output<Integer> skipLeadingRows,
        @Nullable Output<String> sourceFormat,
        @Nullable Output<List<String>> sourceUris,
        @Nullable Output<TimePartitioningArgs> timePartitioning,
        @Nullable Output<Boolean> useAvroLogicalTypes,
        @Nullable Output<String> writeDisposition) {
        this.allowJaggedRows = allowJaggedRows;
        this.allowQuotedNewlines = allowQuotedNewlines;
        this.autodetect = autodetect;
        this.clustering = clustering;
        this.createDisposition = createDisposition;
        this.decimalTargetTypes = decimalTargetTypes;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationTable = destinationTable;
        this.destinationTableProperties = destinationTableProperties;
        this.encoding = encoding;
        this.fieldDelimiter = fieldDelimiter;
        this.hivePartitioningOptions = hivePartitioningOptions;
        this.ignoreUnknownValues = ignoreUnknownValues;
        this.jsonExtension = jsonExtension;
        this.maxBadRecords = maxBadRecords;
        this.nullMarker = nullMarker;
        this.parquetOptions = parquetOptions;
        this.projectionFields = projectionFields;
        this.quote = quote;
        this.rangePartitioning = rangePartitioning;
        this.schema = schema;
        this.schemaUpdateOptions = schemaUpdateOptions;
        this.skipLeadingRows = skipLeadingRows;
        this.sourceFormat = sourceFormat;
        this.sourceUris = sourceUris;
        this.timePartitioning = timePartitioning;
        this.useAvroLogicalTypes = useAvroLogicalTypes;
        this.writeDisposition = writeDisposition;
    }

    private JobConfigurationLoadArgs() {
        this.allowJaggedRows = Codegen.empty();
        this.allowQuotedNewlines = Codegen.empty();
        this.autodetect = Codegen.empty();
        this.clustering = Codegen.empty();
        this.createDisposition = Codegen.empty();
        this.decimalTargetTypes = Codegen.empty();
        this.destinationEncryptionConfiguration = Codegen.empty();
        this.destinationTable = Codegen.empty();
        this.destinationTableProperties = Codegen.empty();
        this.encoding = Codegen.empty();
        this.fieldDelimiter = Codegen.empty();
        this.hivePartitioningOptions = Codegen.empty();
        this.ignoreUnknownValues = Codegen.empty();
        this.jsonExtension = Codegen.empty();
        this.maxBadRecords = Codegen.empty();
        this.nullMarker = Codegen.empty();
        this.parquetOptions = Codegen.empty();
        this.projectionFields = Codegen.empty();
        this.quote = Codegen.empty();
        this.rangePartitioning = Codegen.empty();
        this.schema = Codegen.empty();
        this.schemaUpdateOptions = Codegen.empty();
        this.skipLeadingRows = Codegen.empty();
        this.sourceFormat = Codegen.empty();
        this.sourceUris = Codegen.empty();
        this.timePartitioning = Codegen.empty();
        this.useAvroLogicalTypes = Codegen.empty();
        this.writeDisposition = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigurationLoadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowJaggedRows;
        private @Nullable Output<Boolean> allowQuotedNewlines;
        private @Nullable Output<Boolean> autodetect;
        private @Nullable Output<ClusteringArgs> clustering;
        private @Nullable Output<String> createDisposition;
        private @Nullable Output<List<String>> decimalTargetTypes;
        private @Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration;
        private @Nullable Output<TableReferenceArgs> destinationTable;
        private @Nullable Output<DestinationTablePropertiesArgs> destinationTableProperties;
        private @Nullable Output<String> encoding;
        private @Nullable Output<String> fieldDelimiter;
        private @Nullable Output<HivePartitioningOptionsArgs> hivePartitioningOptions;
        private @Nullable Output<Boolean> ignoreUnknownValues;
        private @Nullable Output<String> jsonExtension;
        private @Nullable Output<Integer> maxBadRecords;
        private @Nullable Output<String> nullMarker;
        private @Nullable Output<ParquetOptionsArgs> parquetOptions;
        private @Nullable Output<List<String>> projectionFields;
        private @Nullable Output<String> quote;
        private @Nullable Output<RangePartitioningArgs> rangePartitioning;
        private @Nullable Output<TableSchemaArgs> schema;
        private @Nullable Output<List<String>> schemaUpdateOptions;
        private @Nullable Output<Integer> skipLeadingRows;
        private @Nullable Output<String> sourceFormat;
        private @Nullable Output<List<String>> sourceUris;
        private @Nullable Output<TimePartitioningArgs> timePartitioning;
        private @Nullable Output<Boolean> useAvroLogicalTypes;
        private @Nullable Output<String> writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigurationLoadArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowJaggedRows = defaults.allowJaggedRows;
    	      this.allowQuotedNewlines = defaults.allowQuotedNewlines;
    	      this.autodetect = defaults.autodetect;
    	      this.clustering = defaults.clustering;
    	      this.createDisposition = defaults.createDisposition;
    	      this.decimalTargetTypes = defaults.decimalTargetTypes;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.destinationTableProperties = defaults.destinationTableProperties;
    	      this.encoding = defaults.encoding;
    	      this.fieldDelimiter = defaults.fieldDelimiter;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.jsonExtension = defaults.jsonExtension;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.nullMarker = defaults.nullMarker;
    	      this.parquetOptions = defaults.parquetOptions;
    	      this.projectionFields = defaults.projectionFields;
    	      this.quote = defaults.quote;
    	      this.rangePartitioning = defaults.rangePartitioning;
    	      this.schema = defaults.schema;
    	      this.schemaUpdateOptions = defaults.schemaUpdateOptions;
    	      this.skipLeadingRows = defaults.skipLeadingRows;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.useAvroLogicalTypes = defaults.useAvroLogicalTypes;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder allowJaggedRows(@Nullable Output<Boolean> allowJaggedRows) {
            this.allowJaggedRows = allowJaggedRows;
            return this;
        }
        public Builder allowJaggedRows(@Nullable Boolean allowJaggedRows) {
            this.allowJaggedRows = Codegen.ofNullable(allowJaggedRows);
            return this;
        }
        public Builder allowQuotedNewlines(@Nullable Output<Boolean> allowQuotedNewlines) {
            this.allowQuotedNewlines = allowQuotedNewlines;
            return this;
        }
        public Builder allowQuotedNewlines(@Nullable Boolean allowQuotedNewlines) {
            this.allowQuotedNewlines = Codegen.ofNullable(allowQuotedNewlines);
            return this;
        }
        public Builder autodetect(@Nullable Output<Boolean> autodetect) {
            this.autodetect = autodetect;
            return this;
        }
        public Builder autodetect(@Nullable Boolean autodetect) {
            this.autodetect = Codegen.ofNullable(autodetect);
            return this;
        }
        public Builder clustering(@Nullable Output<ClusteringArgs> clustering) {
            this.clustering = clustering;
            return this;
        }
        public Builder clustering(@Nullable ClusteringArgs clustering) {
            this.clustering = Codegen.ofNullable(clustering);
            return this;
        }
        public Builder createDisposition(@Nullable Output<String> createDisposition) {
            this.createDisposition = createDisposition;
            return this;
        }
        public Builder createDisposition(@Nullable String createDisposition) {
            this.createDisposition = Codegen.ofNullable(createDisposition);
            return this;
        }
        public Builder decimalTargetTypes(@Nullable Output<List<String>> decimalTargetTypes) {
            this.decimalTargetTypes = decimalTargetTypes;
            return this;
        }
        public Builder decimalTargetTypes(@Nullable List<String> decimalTargetTypes) {
            this.decimalTargetTypes = Codegen.ofNullable(decimalTargetTypes);
            return this;
        }
        public Builder decimalTargetTypes(String... decimalTargetTypes) {
            return decimalTargetTypes(List.of(decimalTargetTypes));
        }
        public Builder destinationEncryptionConfiguration(@Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }
        public Builder destinationEncryptionConfiguration(@Nullable EncryptionConfigurationArgs destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Codegen.ofNullable(destinationEncryptionConfiguration);
            return this;
        }
        public Builder destinationTable(@Nullable Output<TableReferenceArgs> destinationTable) {
            this.destinationTable = destinationTable;
            return this;
        }
        public Builder destinationTable(@Nullable TableReferenceArgs destinationTable) {
            this.destinationTable = Codegen.ofNullable(destinationTable);
            return this;
        }
        public Builder destinationTableProperties(@Nullable Output<DestinationTablePropertiesArgs> destinationTableProperties) {
            this.destinationTableProperties = destinationTableProperties;
            return this;
        }
        public Builder destinationTableProperties(@Nullable DestinationTablePropertiesArgs destinationTableProperties) {
            this.destinationTableProperties = Codegen.ofNullable(destinationTableProperties);
            return this;
        }
        public Builder encoding(@Nullable Output<String> encoding) {
            this.encoding = encoding;
            return this;
        }
        public Builder encoding(@Nullable String encoding) {
            this.encoding = Codegen.ofNullable(encoding);
            return this;
        }
        public Builder fieldDelimiter(@Nullable Output<String> fieldDelimiter) {
            this.fieldDelimiter = fieldDelimiter;
            return this;
        }
        public Builder fieldDelimiter(@Nullable String fieldDelimiter) {
            this.fieldDelimiter = Codegen.ofNullable(fieldDelimiter);
            return this;
        }
        public Builder hivePartitioningOptions(@Nullable Output<HivePartitioningOptionsArgs> hivePartitioningOptions) {
            this.hivePartitioningOptions = hivePartitioningOptions;
            return this;
        }
        public Builder hivePartitioningOptions(@Nullable HivePartitioningOptionsArgs hivePartitioningOptions) {
            this.hivePartitioningOptions = Codegen.ofNullable(hivePartitioningOptions);
            return this;
        }
        public Builder ignoreUnknownValues(@Nullable Output<Boolean> ignoreUnknownValues) {
            this.ignoreUnknownValues = ignoreUnknownValues;
            return this;
        }
        public Builder ignoreUnknownValues(@Nullable Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Codegen.ofNullable(ignoreUnknownValues);
            return this;
        }
        public Builder jsonExtension(@Nullable Output<String> jsonExtension) {
            this.jsonExtension = jsonExtension;
            return this;
        }
        public Builder jsonExtension(@Nullable String jsonExtension) {
            this.jsonExtension = Codegen.ofNullable(jsonExtension);
            return this;
        }
        public Builder maxBadRecords(@Nullable Output<Integer> maxBadRecords) {
            this.maxBadRecords = maxBadRecords;
            return this;
        }
        public Builder maxBadRecords(@Nullable Integer maxBadRecords) {
            this.maxBadRecords = Codegen.ofNullable(maxBadRecords);
            return this;
        }
        public Builder nullMarker(@Nullable Output<String> nullMarker) {
            this.nullMarker = nullMarker;
            return this;
        }
        public Builder nullMarker(@Nullable String nullMarker) {
            this.nullMarker = Codegen.ofNullable(nullMarker);
            return this;
        }
        public Builder parquetOptions(@Nullable Output<ParquetOptionsArgs> parquetOptions) {
            this.parquetOptions = parquetOptions;
            return this;
        }
        public Builder parquetOptions(@Nullable ParquetOptionsArgs parquetOptions) {
            this.parquetOptions = Codegen.ofNullable(parquetOptions);
            return this;
        }
        public Builder projectionFields(@Nullable Output<List<String>> projectionFields) {
            this.projectionFields = projectionFields;
            return this;
        }
        public Builder projectionFields(@Nullable List<String> projectionFields) {
            this.projectionFields = Codegen.ofNullable(projectionFields);
            return this;
        }
        public Builder projectionFields(String... projectionFields) {
            return projectionFields(List.of(projectionFields));
        }
        public Builder quote(@Nullable Output<String> quote) {
            this.quote = quote;
            return this;
        }
        public Builder quote(@Nullable String quote) {
            this.quote = Codegen.ofNullable(quote);
            return this;
        }
        public Builder rangePartitioning(@Nullable Output<RangePartitioningArgs> rangePartitioning) {
            this.rangePartitioning = rangePartitioning;
            return this;
        }
        public Builder rangePartitioning(@Nullable RangePartitioningArgs rangePartitioning) {
            this.rangePartitioning = Codegen.ofNullable(rangePartitioning);
            return this;
        }
        public Builder schema(@Nullable Output<TableSchemaArgs> schema) {
            this.schema = schema;
            return this;
        }
        public Builder schema(@Nullable TableSchemaArgs schema) {
            this.schema = Codegen.ofNullable(schema);
            return this;
        }
        public Builder schemaUpdateOptions(@Nullable Output<List<String>> schemaUpdateOptions) {
            this.schemaUpdateOptions = schemaUpdateOptions;
            return this;
        }
        public Builder schemaUpdateOptions(@Nullable List<String> schemaUpdateOptions) {
            this.schemaUpdateOptions = Codegen.ofNullable(schemaUpdateOptions);
            return this;
        }
        public Builder schemaUpdateOptions(String... schemaUpdateOptions) {
            return schemaUpdateOptions(List.of(schemaUpdateOptions));
        }
        public Builder skipLeadingRows(@Nullable Output<Integer> skipLeadingRows) {
            this.skipLeadingRows = skipLeadingRows;
            return this;
        }
        public Builder skipLeadingRows(@Nullable Integer skipLeadingRows) {
            this.skipLeadingRows = Codegen.ofNullable(skipLeadingRows);
            return this;
        }
        public Builder sourceFormat(@Nullable Output<String> sourceFormat) {
            this.sourceFormat = sourceFormat;
            return this;
        }
        public Builder sourceFormat(@Nullable String sourceFormat) {
            this.sourceFormat = Codegen.ofNullable(sourceFormat);
            return this;
        }
        public Builder sourceUris(@Nullable Output<List<String>> sourceUris) {
            this.sourceUris = sourceUris;
            return this;
        }
        public Builder sourceUris(@Nullable List<String> sourceUris) {
            this.sourceUris = Codegen.ofNullable(sourceUris);
            return this;
        }
        public Builder sourceUris(String... sourceUris) {
            return sourceUris(List.of(sourceUris));
        }
        public Builder timePartitioning(@Nullable Output<TimePartitioningArgs> timePartitioning) {
            this.timePartitioning = timePartitioning;
            return this;
        }
        public Builder timePartitioning(@Nullable TimePartitioningArgs timePartitioning) {
            this.timePartitioning = Codegen.ofNullable(timePartitioning);
            return this;
        }
        public Builder useAvroLogicalTypes(@Nullable Output<Boolean> useAvroLogicalTypes) {
            this.useAvroLogicalTypes = useAvroLogicalTypes;
            return this;
        }
        public Builder useAvroLogicalTypes(@Nullable Boolean useAvroLogicalTypes) {
            this.useAvroLogicalTypes = Codegen.ofNullable(useAvroLogicalTypes);
            return this;
        }
        public Builder writeDisposition(@Nullable Output<String> writeDisposition) {
            this.writeDisposition = writeDisposition;
            return this;
        }
        public Builder writeDisposition(@Nullable String writeDisposition) {
            this.writeDisposition = Codegen.ofNullable(writeDisposition);
            return this;
        }        public JobConfigurationLoadArgs build() {
            return new JobConfigurationLoadArgs(allowJaggedRows, allowQuotedNewlines, autodetect, clustering, createDisposition, decimalTargetTypes, destinationEncryptionConfiguration, destinationTable, destinationTableProperties, encoding, fieldDelimiter, hivePartitioningOptions, ignoreUnknownValues, jsonExtension, maxBadRecords, nullMarker, parquetOptions, projectionFields, quote, rangePartitioning, schema, schemaUpdateOptions, skipLeadingRows, sourceFormat, sourceUris, timePartitioning, useAvroLogicalTypes, writeDisposition);
        }
    }
}
