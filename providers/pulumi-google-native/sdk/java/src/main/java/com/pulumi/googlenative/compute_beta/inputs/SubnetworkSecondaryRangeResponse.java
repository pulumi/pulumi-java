// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Represents a secondary IP range of a subnetwork.
 * 
 */
public final class SubnetworkSecondaryRangeResponse extends com.pulumi.resources.InvokeArgs {

    public static final SubnetworkSecondaryRangeResponse Empty = new SubnetworkSecondaryRangeResponse();

    /**
     * The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
     * 
     */
    @Import(name="ipCidrRange", required=true)
    private String ipCidrRange;

    /**
     * @return The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
     * 
     */
    public String ipCidrRange() {
        return this.ipCidrRange;
    }

    /**
     * The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
     * 
     */
    @Import(name="rangeName", required=true)
    private String rangeName;

    /**
     * @return The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
     * 
     */
    public String rangeName() {
        return this.rangeName;
    }

    private SubnetworkSecondaryRangeResponse() {}

    private SubnetworkSecondaryRangeResponse(SubnetworkSecondaryRangeResponse $) {
        this.ipCidrRange = $.ipCidrRange;
        this.rangeName = $.rangeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetworkSecondaryRangeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetworkSecondaryRangeResponse $;

        public Builder() {
            $ = new SubnetworkSecondaryRangeResponse();
        }

        public Builder(SubnetworkSecondaryRangeResponse defaults) {
            $ = new SubnetworkSecondaryRangeResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipCidrRange The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(String ipCidrRange) {
            $.ipCidrRange = ipCidrRange;
            return this;
        }

        /**
         * @param rangeName The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder rangeName(String rangeName) {
            $.rangeName = rangeName;
            return this;
        }

        public SubnetworkSecondaryRangeResponse build() {
            $.ipCidrRange = Objects.requireNonNull($.ipCidrRange, "expected parameter 'ipCidrRange' to be non-null");
            $.rangeName = Objects.requireNonNull($.rangeName, "expected parameter 'rangeName' to be non-null");
            return $;
        }
    }

}
