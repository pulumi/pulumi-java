// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.enums.SchedulingInstanceTerminationAction;
import com.pulumi.googlenative.compute_beta.enums.SchedulingMaintenanceInterval;
import com.pulumi.googlenative.compute_beta.enums.SchedulingOnHostMaintenance;
import com.pulumi.googlenative.compute_beta.enums.SchedulingProvisioningModel;
import com.pulumi.googlenative.compute_beta.inputs.SchedulingNodeAffinityArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sets the scheduling options for an Instance. NextID: 21
 * 
 */
public final class SchedulingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchedulingArgs Empty = new SchedulingArgs();

    /**
     * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
     * 
     */
    @Import(name="automaticRestart")
    private @Nullable Output<Boolean> automaticRestart;

    public Optional<Output<Boolean>> automaticRestart() {
        return Optional.ofNullable(this.automaticRestart);
    }

    /**
     * Specify the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     * 
     */
    @Import(name="hostErrorTimeoutSeconds")
    private @Nullable Output<Integer> hostErrorTimeoutSeconds;

    public Optional<Output<Integer>> hostErrorTimeoutSeconds() {
        return Optional.ofNullable(this.hostErrorTimeoutSeconds);
    }

    /**
     * Specifies the termination action for the instance.
     * 
     */
    @Import(name="instanceTerminationAction")
    private @Nullable Output<SchedulingInstanceTerminationAction> instanceTerminationAction;

    public Optional<Output<SchedulingInstanceTerminationAction>> instanceTerminationAction() {
        return Optional.ofNullable(this.instanceTerminationAction);
    }

    /**
     * An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
     * 
     */
    @Import(name="locationHint")
    private @Nullable Output<String> locationHint;

    public Optional<Output<String>> locationHint() {
        return Optional.ofNullable(this.locationHint);
    }

    /**
     * Specifies the number of hours after VM instance creation where the VM won&#39;t be scheduled for maintenance.
     * 
     */
    @Import(name="maintenanceFreezeDurationHours")
    private @Nullable Output<Integer> maintenanceFreezeDurationHours;

    public Optional<Output<Integer>> maintenanceFreezeDurationHours() {
        return Optional.ofNullable(this.maintenanceFreezeDurationHours);
    }

    /**
     * For more information about maintenance intervals, see Setting maintenance intervals.
     * 
     */
    @Import(name="maintenanceInterval")
    private @Nullable Output<SchedulingMaintenanceInterval> maintenanceInterval;

    public Optional<Output<SchedulingMaintenanceInterval>> maintenanceInterval() {
        return Optional.ofNullable(this.maintenanceInterval);
    }

    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
     * 
     */
    @Import(name="minNodeCpus")
    private @Nullable Output<Integer> minNodeCpus;

    public Optional<Output<Integer>> minNodeCpus() {
        return Optional.ofNullable(this.minNodeCpus);
    }

    /**
     * A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
     * 
     */
    @Import(name="nodeAffinities")
    private @Nullable Output<List<SchedulingNodeAffinityArgs>> nodeAffinities;

    public Optional<Output<List<SchedulingNodeAffinityArgs>>> nodeAffinities() {
        return Optional.ofNullable(this.nodeAffinities);
    }

    /**
     * Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM availability policies.
     * 
     */
    @Import(name="onHostMaintenance")
    private @Nullable Output<SchedulingOnHostMaintenance> onHostMaintenance;

    public Optional<Output<SchedulingOnHostMaintenance>> onHostMaintenance() {
        return Optional.ofNullable(this.onHostMaintenance);
    }

    /**
     * Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
     * 
     */
    @Import(name="preemptible")
    private @Nullable Output<Boolean> preemptible;

    public Optional<Output<Boolean>> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }

    /**
     * Specifies the provisioning model of the instance.
     * 
     */
    @Import(name="provisioningModel")
    private @Nullable Output<SchedulingProvisioningModel> provisioningModel;

    public Optional<Output<SchedulingProvisioningModel>> provisioningModel() {
        return Optional.ofNullable(this.provisioningModel);
    }

    private SchedulingArgs() {}

    private SchedulingArgs(SchedulingArgs $) {
        this.automaticRestart = $.automaticRestart;
        this.hostErrorTimeoutSeconds = $.hostErrorTimeoutSeconds;
        this.instanceTerminationAction = $.instanceTerminationAction;
        this.locationHint = $.locationHint;
        this.maintenanceFreezeDurationHours = $.maintenanceFreezeDurationHours;
        this.maintenanceInterval = $.maintenanceInterval;
        this.minNodeCpus = $.minNodeCpus;
        this.nodeAffinities = $.nodeAffinities;
        this.onHostMaintenance = $.onHostMaintenance;
        this.preemptible = $.preemptible;
        this.provisioningModel = $.provisioningModel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchedulingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchedulingArgs $;

        public Builder() {
            $ = new SchedulingArgs();
        }

        public Builder(SchedulingArgs defaults) {
            $ = new SchedulingArgs(Objects.requireNonNull(defaults));
        }

        public Builder automaticRestart(@Nullable Output<Boolean> automaticRestart) {
            $.automaticRestart = automaticRestart;
            return this;
        }

        public Builder automaticRestart(Boolean automaticRestart) {
            return automaticRestart(Output.of(automaticRestart));
        }

        public Builder hostErrorTimeoutSeconds(@Nullable Output<Integer> hostErrorTimeoutSeconds) {
            $.hostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
            return this;
        }

        public Builder hostErrorTimeoutSeconds(Integer hostErrorTimeoutSeconds) {
            return hostErrorTimeoutSeconds(Output.of(hostErrorTimeoutSeconds));
        }

        public Builder instanceTerminationAction(@Nullable Output<SchedulingInstanceTerminationAction> instanceTerminationAction) {
            $.instanceTerminationAction = instanceTerminationAction;
            return this;
        }

        public Builder instanceTerminationAction(SchedulingInstanceTerminationAction instanceTerminationAction) {
            return instanceTerminationAction(Output.of(instanceTerminationAction));
        }

        public Builder locationHint(@Nullable Output<String> locationHint) {
            $.locationHint = locationHint;
            return this;
        }

        public Builder locationHint(String locationHint) {
            return locationHint(Output.of(locationHint));
        }

        public Builder maintenanceFreezeDurationHours(@Nullable Output<Integer> maintenanceFreezeDurationHours) {
            $.maintenanceFreezeDurationHours = maintenanceFreezeDurationHours;
            return this;
        }

        public Builder maintenanceFreezeDurationHours(Integer maintenanceFreezeDurationHours) {
            return maintenanceFreezeDurationHours(Output.of(maintenanceFreezeDurationHours));
        }

        public Builder maintenanceInterval(@Nullable Output<SchedulingMaintenanceInterval> maintenanceInterval) {
            $.maintenanceInterval = maintenanceInterval;
            return this;
        }

        public Builder maintenanceInterval(SchedulingMaintenanceInterval maintenanceInterval) {
            return maintenanceInterval(Output.of(maintenanceInterval));
        }

        public Builder minNodeCpus(@Nullable Output<Integer> minNodeCpus) {
            $.minNodeCpus = minNodeCpus;
            return this;
        }

        public Builder minNodeCpus(Integer minNodeCpus) {
            return minNodeCpus(Output.of(minNodeCpus));
        }

        public Builder nodeAffinities(@Nullable Output<List<SchedulingNodeAffinityArgs>> nodeAffinities) {
            $.nodeAffinities = nodeAffinities;
            return this;
        }

        public Builder nodeAffinities(List<SchedulingNodeAffinityArgs> nodeAffinities) {
            return nodeAffinities(Output.of(nodeAffinities));
        }

        public Builder nodeAffinities(SchedulingNodeAffinityArgs... nodeAffinities) {
            return nodeAffinities(List.of(nodeAffinities));
        }

        public Builder onHostMaintenance(@Nullable Output<SchedulingOnHostMaintenance> onHostMaintenance) {
            $.onHostMaintenance = onHostMaintenance;
            return this;
        }

        public Builder onHostMaintenance(SchedulingOnHostMaintenance onHostMaintenance) {
            return onHostMaintenance(Output.of(onHostMaintenance));
        }

        public Builder preemptible(@Nullable Output<Boolean> preemptible) {
            $.preemptible = preemptible;
            return this;
        }

        public Builder preemptible(Boolean preemptible) {
            return preemptible(Output.of(preemptible));
        }

        public Builder provisioningModel(@Nullable Output<SchedulingProvisioningModel> provisioningModel) {
            $.provisioningModel = provisioningModel;
            return this;
        }

        public Builder provisioningModel(SchedulingProvisioningModel provisioningModel) {
            return provisioningModel(Output.of(provisioningModel));
        }

        public SchedulingArgs build() {
            return $;
        }
    }

}
