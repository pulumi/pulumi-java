// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Edit atom.
 * 
 */
public final class EditAtomArgs extends com.pulumi.resources.ResourceArgs {

    public static final EditAtomArgs Empty = new EditAtomArgs();

    /**
     * End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
     * 
     */
    @Import(name="endTimeOffset")
    private @Nullable Output<String> endTimeOffset;

    /**
     * @return End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
     * 
     */
    public Optional<Output<String>> endTimeOffset() {
        return Optional.ofNullable(this.endTimeOffset);
    }

    /**
     * List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
     * 
     */
    @Import(name="inputs")
    private @Nullable Output<List<String>> inputs;

    /**
     * @return List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
     * 
     */
    public Optional<Output<List<String>>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    /**
     * A unique key for this atom. Must be specified when using advanced mapping.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return A unique key for this atom. Must be specified when using advanced mapping.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
     * 
     */
    @Import(name="startTimeOffset")
    private @Nullable Output<String> startTimeOffset;

    /**
     * @return Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
     * 
     */
    public Optional<Output<String>> startTimeOffset() {
        return Optional.ofNullable(this.startTimeOffset);
    }

    private EditAtomArgs() {}

    private EditAtomArgs(EditAtomArgs $) {
        this.endTimeOffset = $.endTimeOffset;
        this.inputs = $.inputs;
        this.key = $.key;
        this.startTimeOffset = $.startTimeOffset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EditAtomArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EditAtomArgs $;

        public Builder() {
            $ = new EditAtomArgs();
        }

        public Builder(EditAtomArgs defaults) {
            $ = new EditAtomArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTimeOffset End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
         * 
         * @return builder
         * 
         */
        public Builder endTimeOffset(@Nullable Output<String> endTimeOffset) {
            $.endTimeOffset = endTimeOffset;
            return this;
        }

        /**
         * @param endTimeOffset End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
         * 
         * @return builder
         * 
         */
        public Builder endTimeOffset(String endTimeOffset) {
            return endTimeOffset(Output.of(endTimeOffset));
        }

        /**
         * @param inputs List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
         * 
         * @return builder
         * 
         */
        public Builder inputs(@Nullable Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param key A unique key for this atom. Must be specified when using advanced mapping.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key A unique key for this atom. Must be specified when using advanced mapping.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param startTimeOffset Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
         * 
         * @return builder
         * 
         */
        public Builder startTimeOffset(@Nullable Output<String> startTimeOffset) {
            $.startTimeOffset = startTimeOffset;
            return this;
        }

        /**
         * @param startTimeOffset Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
         * 
         * @return builder
         * 
         */
        public Builder startTimeOffset(String startTimeOffset) {
            return startTimeOffset(Output.of(startTimeOffset));
        }

        public EditAtomArgs build() {
            return $;
        }
    }

}
