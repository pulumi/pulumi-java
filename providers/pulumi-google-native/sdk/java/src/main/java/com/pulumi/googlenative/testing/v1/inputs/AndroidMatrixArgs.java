// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
 * 
 */
public final class AndroidMatrixArgs extends com.pulumi.resources.ResourceArgs {

    public static final AndroidMatrixArgs Empty = new AndroidMatrixArgs();

    /**
     * The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="androidModelIds", required=true)
    private Output<List<String>> androidModelIds;

    /**
     * @return The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<List<String>> androidModelIds() {
        return this.androidModelIds;
    }

    /**
     * The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="androidVersionIds", required=true)
    private Output<List<String>> androidVersionIds;

    /**
     * @return The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<List<String>> androidVersionIds() {
        return this.androidVersionIds;
    }

    /**
     * The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="locales", required=true)
    private Output<List<String>> locales;

    /**
     * @return The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<List<String>> locales() {
        return this.locales;
    }

    /**
     * The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    @Import(name="orientations", required=true)
    private Output<List<String>> orientations;

    /**
     * @return The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
     * 
     */
    public Output<List<String>> orientations() {
        return this.orientations;
    }

    private AndroidMatrixArgs() {}

    private AndroidMatrixArgs(AndroidMatrixArgs $) {
        this.androidModelIds = $.androidModelIds;
        this.androidVersionIds = $.androidVersionIds;
        this.locales = $.locales;
        this.orientations = $.orientations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidMatrixArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidMatrixArgs $;

        public Builder() {
            $ = new AndroidMatrixArgs();
        }

        public Builder(AndroidMatrixArgs defaults) {
            $ = new AndroidMatrixArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param androidModelIds The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder androidModelIds(Output<List<String>> androidModelIds) {
            $.androidModelIds = androidModelIds;
            return this;
        }

        /**
         * @param androidModelIds The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder androidModelIds(List<String> androidModelIds) {
            return androidModelIds(Output.of(androidModelIds));
        }

        /**
         * @param androidModelIds The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder androidModelIds(String... androidModelIds) {
            return androidModelIds(List.of(androidModelIds));
        }

        /**
         * @param androidVersionIds The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder androidVersionIds(Output<List<String>> androidVersionIds) {
            $.androidVersionIds = androidVersionIds;
            return this;
        }

        /**
         * @param androidVersionIds The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder androidVersionIds(List<String> androidVersionIds) {
            return androidVersionIds(Output.of(androidVersionIds));
        }

        /**
         * @param androidVersionIds The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder androidVersionIds(String... androidVersionIds) {
            return androidVersionIds(List.of(androidVersionIds));
        }

        /**
         * @param locales The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder locales(Output<List<String>> locales) {
            $.locales = locales;
            return this;
        }

        /**
         * @param locales The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder locales(List<String> locales) {
            return locales(Output.of(locales));
        }

        /**
         * @param locales The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder locales(String... locales) {
            return locales(List.of(locales));
        }

        /**
         * @param orientations The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder orientations(Output<List<String>> orientations) {
            $.orientations = orientations;
            return this;
        }

        /**
         * @param orientations The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder orientations(List<String> orientations) {
            return orientations(Output.of(orientations));
        }

        /**
         * @param orientations The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
         * 
         * @return builder
         * 
         */
        public Builder orientations(String... orientations) {
            return orientations(List.of(orientations));
        }

        public AndroidMatrixArgs build() {
            $.androidModelIds = Objects.requireNonNull($.androidModelIds, "expected parameter 'androidModelIds' to be non-null");
            $.androidVersionIds = Objects.requireNonNull($.androidVersionIds, "expected parameter 'androidVersionIds' to be non-null");
            $.locales = Objects.requireNonNull($.locales, "expected parameter 'locales' to be non-null");
            $.orientations = Objects.requireNonNull($.orientations, "expected parameter 'orientations' to be non-null");
            return $;
        }
    }

}
