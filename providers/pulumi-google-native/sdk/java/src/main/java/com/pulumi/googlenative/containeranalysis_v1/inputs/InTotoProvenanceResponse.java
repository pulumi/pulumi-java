// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.BuilderConfigResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.MetadataResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.RecipeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class InTotoProvenanceResponse extends com.pulumi.resources.InvokeArgs {

    public static final InTotoProvenanceResponse Empty = new InTotoProvenanceResponse();

    /**
     * required
     * 
     */
    @Import(name="builderConfig", required=true)
    private BuilderConfigResponse builderConfig;

    /**
     * @return required
     * 
     */
    public BuilderConfigResponse builderConfig() {
        return this.builderConfig;
    }

    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    @Import(name="materials", required=true)
    private List<String> materials;

    /**
     * @return The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    public List<String> materials() {
        return this.materials;
    }

    @Import(name="metadata", required=true)
    private MetadataResponse metadata;

    public MetadataResponse metadata() {
        return this.metadata;
    }

    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
     */
    @Import(name="recipe", required=true)
    private RecipeResponse recipe;

    /**
     * @return Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
     */
    public RecipeResponse recipe() {
        return this.recipe;
    }

    private InTotoProvenanceResponse() {}

    private InTotoProvenanceResponse(InTotoProvenanceResponse $) {
        this.builderConfig = $.builderConfig;
        this.materials = $.materials;
        this.metadata = $.metadata;
        this.recipe = $.recipe;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InTotoProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InTotoProvenanceResponse $;

        public Builder() {
            $ = new InTotoProvenanceResponse();
        }

        public Builder(InTotoProvenanceResponse defaults) {
            $ = new InTotoProvenanceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param builderConfig required
         * 
         * @return builder
         * 
         */
        public Builder builderConfig(BuilderConfigResponse builderConfig) {
            $.builderConfig = builderConfig;
            return this;
        }

        /**
         * @param materials The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
         * 
         * @return builder
         * 
         */
        public Builder materials(List<String> materials) {
            $.materials = materials;
            return this;
        }

        /**
         * @param materials The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
         * 
         * @return builder
         * 
         */
        public Builder materials(String... materials) {
            return materials(List.of(materials));
        }

        public Builder metadata(MetadataResponse metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param recipe Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
         * 
         * @return builder
         * 
         */
        public Builder recipe(RecipeResponse recipe) {
            $.recipe = recipe;
            return this;
        }

        public InTotoProvenanceResponse build() {
            $.builderConfig = Objects.requireNonNull($.builderConfig, "expected parameter 'builderConfig' to be non-null");
            $.materials = Objects.requireNonNull($.materials, "expected parameter 'materials' to be non-null");
            $.metadata = Objects.requireNonNull($.metadata, "expected parameter 'metadata' to be non-null");
            $.recipe = Objects.requireNonNull($.recipe, "expected parameter 'recipe' to be non-null");
            return $;
        }
    }

}
