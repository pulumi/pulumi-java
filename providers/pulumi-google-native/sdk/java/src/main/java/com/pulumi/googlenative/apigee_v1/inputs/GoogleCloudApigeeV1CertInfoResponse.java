// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * X.509 certificate as defined in RFC 5280.
 * 
 */
public final class GoogleCloudApigeeV1CertInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudApigeeV1CertInfoResponse Empty = new GoogleCloudApigeeV1CertInfoResponse();

    /**
     * X.509 basic constraints extension.
     * 
     */
    @Import(name="basicConstraints", required=true)
    private String basicConstraints;

    /**
     * @return X.509 basic constraints extension.
     * 
     */
    public String basicConstraints() {
        return this.basicConstraints;
    }

    /**
     * X.509 `notAfter` validity period in milliseconds since epoch.
     * 
     */
    @Import(name="expiryDate", required=true)
    private String expiryDate;

    /**
     * @return X.509 `notAfter` validity period in milliseconds since epoch.
     * 
     */
    public String expiryDate() {
        return this.expiryDate;
    }

    /**
     * Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.
     * 
     */
    @Import(name="isValid", required=true)
    private String isValid;

    /**
     * @return Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.
     * 
     */
    public String isValid() {
        return this.isValid;
    }

    /**
     * X.509 issuer.
     * 
     */
    @Import(name="issuer", required=true)
    private String issuer;

    /**
     * @return X.509 issuer.
     * 
     */
    public String issuer() {
        return this.issuer;
    }

    /**
     * Public key component of the X.509 subject public key info.
     * 
     */
    @Import(name="publicKey", required=true)
    private String publicKey;

    /**
     * @return Public key component of the X.509 subject public key info.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * X.509 serial number.
     * 
     */
    @Import(name="serialNumber", required=true)
    private String serialNumber;

    /**
     * @return X.509 serial number.
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * X.509 signatureAlgorithm.
     * 
     */
    @Import(name="sigAlgName", required=true)
    private String sigAlgName;

    /**
     * @return X.509 signatureAlgorithm.
     * 
     */
    public String sigAlgName() {
        return this.sigAlgName;
    }

    /**
     * X.509 subject.
     * 
     */
    @Import(name="subject", required=true)
    private String subject;

    /**
     * @return X.509 subject.
     * 
     */
    public String subject() {
        return this.subject;
    }

    /**
     * X.509 subject alternative names (SANs) extension.
     * 
     */
    @Import(name="subjectAlternativeNames", required=true)
    private List<String> subjectAlternativeNames;

    /**
     * @return X.509 subject alternative names (SANs) extension.
     * 
     */
    public List<String> subjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }

    /**
     * X.509 `notBefore` validity period in milliseconds since epoch.
     * 
     */
    @Import(name="validFrom", required=true)
    private String validFrom;

    /**
     * @return X.509 `notBefore` validity period in milliseconds since epoch.
     * 
     */
    public String validFrom() {
        return this.validFrom;
    }

    /**
     * X.509 version.
     * 
     */
    @Import(name="version", required=true)
    private Integer version;

    /**
     * @return X.509 version.
     * 
     */
    public Integer version() {
        return this.version;
    }

    private GoogleCloudApigeeV1CertInfoResponse() {}

    private GoogleCloudApigeeV1CertInfoResponse(GoogleCloudApigeeV1CertInfoResponse $) {
        this.basicConstraints = $.basicConstraints;
        this.expiryDate = $.expiryDate;
        this.isValid = $.isValid;
        this.issuer = $.issuer;
        this.publicKey = $.publicKey;
        this.serialNumber = $.serialNumber;
        this.sigAlgName = $.sigAlgName;
        this.subject = $.subject;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.validFrom = $.validFrom;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudApigeeV1CertInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudApigeeV1CertInfoResponse $;

        public Builder() {
            $ = new GoogleCloudApigeeV1CertInfoResponse();
        }

        public Builder(GoogleCloudApigeeV1CertInfoResponse defaults) {
            $ = new GoogleCloudApigeeV1CertInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param basicConstraints X.509 basic constraints extension.
         * 
         * @return builder
         * 
         */
        public Builder basicConstraints(String basicConstraints) {
            $.basicConstraints = basicConstraints;
            return this;
        }

        /**
         * @param expiryDate X.509 `notAfter` validity period in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder expiryDate(String expiryDate) {
            $.expiryDate = expiryDate;
            return this;
        }

        /**
         * @param isValid Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.
         * 
         * @return builder
         * 
         */
        public Builder isValid(String isValid) {
            $.isValid = isValid;
            return this;
        }

        /**
         * @param issuer X.509 issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param publicKey Public key component of the X.509 subject public key info.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param serialNumber X.509 serial number.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param sigAlgName X.509 signatureAlgorithm.
         * 
         * @return builder
         * 
         */
        public Builder sigAlgName(String sigAlgName) {
            $.sigAlgName = sigAlgName;
            return this;
        }

        /**
         * @param subject X.509 subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subjectAlternativeNames X.509 subject alternative names (SANs) extension.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames X.509 subject alternative names (SANs) extension.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        /**
         * @param validFrom X.509 `notBefore` validity period in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder validFrom(String validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        /**
         * @param version X.509 version.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            $.version = version;
            return this;
        }

        public GoogleCloudApigeeV1CertInfoResponse build() {
            $.basicConstraints = Objects.requireNonNull($.basicConstraints, "expected parameter 'basicConstraints' to be non-null");
            $.expiryDate = Objects.requireNonNull($.expiryDate, "expected parameter 'expiryDate' to be non-null");
            $.isValid = Objects.requireNonNull($.isValid, "expected parameter 'isValid' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            $.serialNumber = Objects.requireNonNull($.serialNumber, "expected parameter 'serialNumber' to be non-null");
            $.sigAlgName = Objects.requireNonNull($.sigAlgName, "expected parameter 'sigAlgName' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.subjectAlternativeNames = Objects.requireNonNull($.subjectAlternativeNames, "expected parameter 'subjectAlternativeNames' to be non-null");
            $.validFrom = Objects.requireNonNull($.validFrom, "expected parameter 'validFrom' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
