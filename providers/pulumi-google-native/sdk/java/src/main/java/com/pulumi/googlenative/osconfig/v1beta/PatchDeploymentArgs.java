// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.osconfig.v1beta.inputs.OneTimeScheduleArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.PatchConfigArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.PatchInstanceFilterArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.PatchRolloutArgs;
import com.pulumi.googlenative.osconfig.v1beta.inputs.RecurringScheduleArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PatchDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final PatchDeploymentArgs Empty = new PatchDeploymentArgs();

    /**
     * Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Duration of the patch. After the duration ends, the patch times out.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return Optional. Duration of the patch. After the duration ends, the patch times out.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * VM instances to patch.
     * 
     */
    @Import(name="instanceFilter", required=true)
    private Output<PatchInstanceFilterArgs> instanceFilter;

    /**
     * @return VM instances to patch.
     * 
     */
    public Output<PatchInstanceFilterArgs> instanceFilter() {
        return this.instanceFilter;
    }

    /**
     * Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Schedule a one-time execution.
     * 
     */
    @Import(name="oneTimeSchedule", required=true)
    private Output<OneTimeScheduleArgs> oneTimeSchedule;

    /**
     * @return Schedule a one-time execution.
     * 
     */
    public Output<OneTimeScheduleArgs> oneTimeSchedule() {
        return this.oneTimeSchedule;
    }

    /**
     * Optional. Patch configuration that is applied.
     * 
     */
    @Import(name="patchConfig")
    private @Nullable Output<PatchConfigArgs> patchConfig;

    /**
     * @return Optional. Patch configuration that is applied.
     * 
     */
    public Optional<Output<PatchConfigArgs>> patchConfig() {
        return Optional.ofNullable(this.patchConfig);
    }

    /**
     * Required. A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
     * 
     */
    @Import(name="patchDeploymentId", required=true)
    private Output<String> patchDeploymentId;

    /**
     * @return Required. A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
     * 
     */
    public Output<String> patchDeploymentId() {
        return this.patchDeploymentId;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Schedule recurring executions.
     * 
     */
    @Import(name="recurringSchedule", required=true)
    private Output<RecurringScheduleArgs> recurringSchedule;

    /**
     * @return Schedule recurring executions.
     * 
     */
    public Output<RecurringScheduleArgs> recurringSchedule() {
        return this.recurringSchedule;
    }

    /**
     * Optional. Rollout strategy of the patch job.
     * 
     */
    @Import(name="rollout")
    private @Nullable Output<PatchRolloutArgs> rollout;

    /**
     * @return Optional. Rollout strategy of the patch job.
     * 
     */
    public Optional<Output<PatchRolloutArgs>> rollout() {
        return Optional.ofNullable(this.rollout);
    }

    private PatchDeploymentArgs() {}

    private PatchDeploymentArgs(PatchDeploymentArgs $) {
        this.description = $.description;
        this.duration = $.duration;
        this.instanceFilter = $.instanceFilter;
        this.name = $.name;
        this.oneTimeSchedule = $.oneTimeSchedule;
        this.patchConfig = $.patchConfig;
        this.patchDeploymentId = $.patchDeploymentId;
        this.project = $.project;
        this.recurringSchedule = $.recurringSchedule;
        this.rollout = $.rollout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PatchDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PatchDeploymentArgs $;

        public Builder() {
            $ = new PatchDeploymentArgs();
        }

        public Builder(PatchDeploymentArgs defaults) {
            $ = new PatchDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param duration Optional. Duration of the patch. After the duration ends, the patch times out.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Optional. Duration of the patch. After the duration ends, the patch times out.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param instanceFilter VM instances to patch.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(Output<PatchInstanceFilterArgs> instanceFilter) {
            $.instanceFilter = instanceFilter;
            return this;
        }

        /**
         * @param instanceFilter VM instances to patch.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(PatchInstanceFilterArgs instanceFilter) {
            return instanceFilter(Output.of(instanceFilter));
        }

        /**
         * @param name Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oneTimeSchedule Schedule a one-time execution.
         * 
         * @return builder
         * 
         */
        public Builder oneTimeSchedule(Output<OneTimeScheduleArgs> oneTimeSchedule) {
            $.oneTimeSchedule = oneTimeSchedule;
            return this;
        }

        /**
         * @param oneTimeSchedule Schedule a one-time execution.
         * 
         * @return builder
         * 
         */
        public Builder oneTimeSchedule(OneTimeScheduleArgs oneTimeSchedule) {
            return oneTimeSchedule(Output.of(oneTimeSchedule));
        }

        /**
         * @param patchConfig Optional. Patch configuration that is applied.
         * 
         * @return builder
         * 
         */
        public Builder patchConfig(@Nullable Output<PatchConfigArgs> patchConfig) {
            $.patchConfig = patchConfig;
            return this;
        }

        /**
         * @param patchConfig Optional. Patch configuration that is applied.
         * 
         * @return builder
         * 
         */
        public Builder patchConfig(PatchConfigArgs patchConfig) {
            return patchConfig(Output.of(patchConfig));
        }

        /**
         * @param patchDeploymentId Required. A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
         * 
         * @return builder
         * 
         */
        public Builder patchDeploymentId(Output<String> patchDeploymentId) {
            $.patchDeploymentId = patchDeploymentId;
            return this;
        }

        /**
         * @param patchDeploymentId Required. A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
         * 
         * @return builder
         * 
         */
        public Builder patchDeploymentId(String patchDeploymentId) {
            return patchDeploymentId(Output.of(patchDeploymentId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param recurringSchedule Schedule recurring executions.
         * 
         * @return builder
         * 
         */
        public Builder recurringSchedule(Output<RecurringScheduleArgs> recurringSchedule) {
            $.recurringSchedule = recurringSchedule;
            return this;
        }

        /**
         * @param recurringSchedule Schedule recurring executions.
         * 
         * @return builder
         * 
         */
        public Builder recurringSchedule(RecurringScheduleArgs recurringSchedule) {
            return recurringSchedule(Output.of(recurringSchedule));
        }

        /**
         * @param rollout Optional. Rollout strategy of the patch job.
         * 
         * @return builder
         * 
         */
        public Builder rollout(@Nullable Output<PatchRolloutArgs> rollout) {
            $.rollout = rollout;
            return this;
        }

        /**
         * @param rollout Optional. Rollout strategy of the patch job.
         * 
         * @return builder
         * 
         */
        public Builder rollout(PatchRolloutArgs rollout) {
            return rollout(Output.of(rollout));
        }

        public PatchDeploymentArgs build() {
            $.instanceFilter = Objects.requireNonNull($.instanceFilter, "expected parameter 'instanceFilter' to be non-null");
            $.oneTimeSchedule = Objects.requireNonNull($.oneTimeSchedule, "expected parameter 'oneTimeSchedule' to be non-null");
            $.patchDeploymentId = Objects.requireNonNull($.patchDeploymentId, "expected parameter 'patchDeploymentId' to be non-null");
            $.recurringSchedule = Objects.requireNonNull($.recurringSchedule, "expected parameter 'recurringSchedule' to be non-null");
            return $;
        }
    }

}
