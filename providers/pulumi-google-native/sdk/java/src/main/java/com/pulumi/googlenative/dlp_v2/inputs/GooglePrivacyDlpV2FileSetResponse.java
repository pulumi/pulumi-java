// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2CloudStorageRegexFileSetResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Set of files to scan.
 * 
 */
public final class GooglePrivacyDlpV2FileSetResponse extends com.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2FileSetResponse Empty = new GooglePrivacyDlpV2FileSetResponse();

    /**
     * The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
     * 
     */
    @Import(name="regexFileSet", required=true)
    private GooglePrivacyDlpV2CloudStorageRegexFileSetResponse regexFileSet;

    public GooglePrivacyDlpV2CloudStorageRegexFileSetResponse regexFileSet() {
        return this.regexFileSet;
    }

    /**
     * The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private GooglePrivacyDlpV2FileSetResponse() {}

    private GooglePrivacyDlpV2FileSetResponse(GooglePrivacyDlpV2FileSetResponse $) {
        this.regexFileSet = $.regexFileSet;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GooglePrivacyDlpV2FileSetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GooglePrivacyDlpV2FileSetResponse $;

        public Builder() {
            $ = new GooglePrivacyDlpV2FileSetResponse();
        }

        public Builder(GooglePrivacyDlpV2FileSetResponse defaults) {
            $ = new GooglePrivacyDlpV2FileSetResponse(Objects.requireNonNull(defaults));
        }

        public Builder regexFileSet(GooglePrivacyDlpV2CloudStorageRegexFileSetResponse regexFileSet) {
            $.regexFileSet = regexFileSet;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public GooglePrivacyDlpV2FileSetResponse build() {
            $.regexFileSet = Objects.requireNonNull($.regexFileSet, "expected parameter 'regexFileSet' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
