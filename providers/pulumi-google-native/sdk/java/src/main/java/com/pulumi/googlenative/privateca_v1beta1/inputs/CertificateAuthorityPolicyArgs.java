// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.privateca_v1beta1.inputs.AllowedConfigListArgs;
import com.pulumi.googlenative.privateca_v1beta1.inputs.AllowedSubjectAltNamesArgs;
import com.pulumi.googlenative.privateca_v1beta1.inputs.IssuanceModesArgs;
import com.pulumi.googlenative.privateca_v1beta1.inputs.ReusableConfigWrapperArgs;
import com.pulumi.googlenative.privateca_v1beta1.inputs.SubjectArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.
 * 
 */
public final class CertificateAuthorityPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityPolicyArgs Empty = new CertificateAuthorityPolicyArgs();

    /**
     * Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
     * 
     */
    @Import(name="allowedCommonNames")
      private final @Nullable Output<List<String>> allowedCommonNames;

    public Output<List<String>> allowedCommonNames() {
        return this.allowedCommonNames == null ? Codegen.empty() : this.allowedCommonNames;
    }

    /**
     * Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
     * 
     */
    @Import(name="allowedConfigList")
      private final @Nullable Output<AllowedConfigListArgs> allowedConfigList;

    public Output<AllowedConfigListArgs> allowedConfigList() {
        return this.allowedConfigList == null ? Codegen.empty() : this.allowedConfigList;
    }

    /**
     * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    @Import(name="allowedIssuanceModes")
      private final @Nullable Output<IssuanceModesArgs> allowedIssuanceModes;

    public Output<IssuanceModesArgs> allowedIssuanceModes() {
        return this.allowedIssuanceModes == null ? Codegen.empty() : this.allowedIssuanceModes;
    }

    /**
     * Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
     * 
     */
    @Import(name="allowedLocationsAndOrganizations")
      private final @Nullable Output<List<SubjectArgs>> allowedLocationsAndOrganizations;

    public Output<List<SubjectArgs>> allowedLocationsAndOrganizations() {
        return this.allowedLocationsAndOrganizations == null ? Codegen.empty() : this.allowedLocationsAndOrganizations;
    }

    /**
     * Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
     * 
     */
    @Import(name="allowedSans")
      private final @Nullable Output<AllowedSubjectAltNamesArgs> allowedSans;

    public Output<AllowedSubjectAltNamesArgs> allowedSans() {
        return this.allowedSans == null ? Codegen.empty() : this.allowedSans;
    }

    /**
     * Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated.
     * 
     */
    @Import(name="maximumLifetime")
      private final @Nullable Output<String> maximumLifetime;

    public Output<String> maximumLifetime() {
        return this.maximumLifetime == null ? Codegen.empty() : this.maximumLifetime;
    }

    /**
     * Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
     * 
     */
    @Import(name="overwriteConfigValues")
      private final @Nullable Output<ReusableConfigWrapperArgs> overwriteConfigValues;

    public Output<ReusableConfigWrapperArgs> overwriteConfigValues() {
        return this.overwriteConfigValues == null ? Codegen.empty() : this.overwriteConfigValues;
    }

    public CertificateAuthorityPolicyArgs(
        @Nullable Output<List<String>> allowedCommonNames,
        @Nullable Output<AllowedConfigListArgs> allowedConfigList,
        @Nullable Output<IssuanceModesArgs> allowedIssuanceModes,
        @Nullable Output<List<SubjectArgs>> allowedLocationsAndOrganizations,
        @Nullable Output<AllowedSubjectAltNamesArgs> allowedSans,
        @Nullable Output<String> maximumLifetime,
        @Nullable Output<ReusableConfigWrapperArgs> overwriteConfigValues) {
        this.allowedCommonNames = allowedCommonNames;
        this.allowedConfigList = allowedConfigList;
        this.allowedIssuanceModes = allowedIssuanceModes;
        this.allowedLocationsAndOrganizations = allowedLocationsAndOrganizations;
        this.allowedSans = allowedSans;
        this.maximumLifetime = maximumLifetime;
        this.overwriteConfigValues = overwriteConfigValues;
    }

    private CertificateAuthorityPolicyArgs() {
        this.allowedCommonNames = Codegen.empty();
        this.allowedConfigList = Codegen.empty();
        this.allowedIssuanceModes = Codegen.empty();
        this.allowedLocationsAndOrganizations = Codegen.empty();
        this.allowedSans = Codegen.empty();
        this.maximumLifetime = Codegen.empty();
        this.overwriteConfigValues = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> allowedCommonNames;
        private @Nullable Output<AllowedConfigListArgs> allowedConfigList;
        private @Nullable Output<IssuanceModesArgs> allowedIssuanceModes;
        private @Nullable Output<List<SubjectArgs>> allowedLocationsAndOrganizations;
        private @Nullable Output<AllowedSubjectAltNamesArgs> allowedSans;
        private @Nullable Output<String> maximumLifetime;
        private @Nullable Output<ReusableConfigWrapperArgs> overwriteConfigValues;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateAuthorityPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedCommonNames = defaults.allowedCommonNames;
    	      this.allowedConfigList = defaults.allowedConfigList;
    	      this.allowedIssuanceModes = defaults.allowedIssuanceModes;
    	      this.allowedLocationsAndOrganizations = defaults.allowedLocationsAndOrganizations;
    	      this.allowedSans = defaults.allowedSans;
    	      this.maximumLifetime = defaults.maximumLifetime;
    	      this.overwriteConfigValues = defaults.overwriteConfigValues;
        }

        public Builder allowedCommonNames(@Nullable Output<List<String>> allowedCommonNames) {
            this.allowedCommonNames = allowedCommonNames;
            return this;
        }
        public Builder allowedCommonNames(@Nullable List<String> allowedCommonNames) {
            this.allowedCommonNames = Codegen.ofNullable(allowedCommonNames);
            return this;
        }
        public Builder allowedCommonNames(String... allowedCommonNames) {
            return allowedCommonNames(List.of(allowedCommonNames));
        }
        public Builder allowedConfigList(@Nullable Output<AllowedConfigListArgs> allowedConfigList) {
            this.allowedConfigList = allowedConfigList;
            return this;
        }
        public Builder allowedConfigList(@Nullable AllowedConfigListArgs allowedConfigList) {
            this.allowedConfigList = Codegen.ofNullable(allowedConfigList);
            return this;
        }
        public Builder allowedIssuanceModes(@Nullable Output<IssuanceModesArgs> allowedIssuanceModes) {
            this.allowedIssuanceModes = allowedIssuanceModes;
            return this;
        }
        public Builder allowedIssuanceModes(@Nullable IssuanceModesArgs allowedIssuanceModes) {
            this.allowedIssuanceModes = Codegen.ofNullable(allowedIssuanceModes);
            return this;
        }
        public Builder allowedLocationsAndOrganizations(@Nullable Output<List<SubjectArgs>> allowedLocationsAndOrganizations) {
            this.allowedLocationsAndOrganizations = allowedLocationsAndOrganizations;
            return this;
        }
        public Builder allowedLocationsAndOrganizations(@Nullable List<SubjectArgs> allowedLocationsAndOrganizations) {
            this.allowedLocationsAndOrganizations = Codegen.ofNullable(allowedLocationsAndOrganizations);
            return this;
        }
        public Builder allowedLocationsAndOrganizations(SubjectArgs... allowedLocationsAndOrganizations) {
            return allowedLocationsAndOrganizations(List.of(allowedLocationsAndOrganizations));
        }
        public Builder allowedSans(@Nullable Output<AllowedSubjectAltNamesArgs> allowedSans) {
            this.allowedSans = allowedSans;
            return this;
        }
        public Builder allowedSans(@Nullable AllowedSubjectAltNamesArgs allowedSans) {
            this.allowedSans = Codegen.ofNullable(allowedSans);
            return this;
        }
        public Builder maximumLifetime(@Nullable Output<String> maximumLifetime) {
            this.maximumLifetime = maximumLifetime;
            return this;
        }
        public Builder maximumLifetime(@Nullable String maximumLifetime) {
            this.maximumLifetime = Codegen.ofNullable(maximumLifetime);
            return this;
        }
        public Builder overwriteConfigValues(@Nullable Output<ReusableConfigWrapperArgs> overwriteConfigValues) {
            this.overwriteConfigValues = overwriteConfigValues;
            return this;
        }
        public Builder overwriteConfigValues(@Nullable ReusableConfigWrapperArgs overwriteConfigValues) {
            this.overwriteConfigValues = Codegen.ofNullable(overwriteConfigValues);
            return this;
        }        public CertificateAuthorityPolicyArgs build() {
            return new CertificateAuthorityPolicyArgs(allowedCommonNames, allowedConfigList, allowedIssuanceModes, allowedLocationsAndOrganizations, allowedSans, maximumLifetime, overwriteConfigValues);
        }
    }
}
