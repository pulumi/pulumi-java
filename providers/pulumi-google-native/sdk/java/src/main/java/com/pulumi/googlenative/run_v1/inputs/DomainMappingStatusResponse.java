// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.run_v1.inputs.GoogleCloudRunV1ConditionResponse;
import com.pulumi.googlenative.run_v1.inputs.ResourceRecordResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The current state of the Domain Mapping.
 * 
 */
public final class DomainMappingStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final DomainMappingStatusResponse Empty = new DomainMappingStatusResponse();

    /**
     * Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
     * 
     */
    @Import(name="conditions", required=true)
    private List<GoogleCloudRunV1ConditionResponse> conditions;

    public List<GoogleCloudRunV1ConditionResponse> conditions() {
        return this.conditions;
    }

    /**
     * The name of the route that the mapping currently points to.
     * 
     */
    @Import(name="mappedRouteName", required=true)
    private String mappedRouteName;

    public String mappedRouteName() {
        return this.mappedRouteName;
    }

    /**
     * ObservedGeneration is the &#39;Generation&#39; of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition&#39;s status is True or False.
     * 
     */
    @Import(name="observedGeneration", required=true)
    private Integer observedGeneration;

    public Integer observedGeneration() {
        return this.observedGeneration;
    }

    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS configuration in order to serve the application via this domain mapping.
     * 
     */
    @Import(name="resourceRecords", required=true)
    private List<ResourceRecordResponse> resourceRecords;

    public List<ResourceRecordResponse> resourceRecords() {
        return this.resourceRecords;
    }

    /**
     * Optional. Cloud Run fully managed: not supported Cloud Run on GKE: supported Holds the URL that will serve the traffic of the DomainMapping.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private DomainMappingStatusResponse() {}

    private DomainMappingStatusResponse(DomainMappingStatusResponse $) {
        this.conditions = $.conditions;
        this.mappedRouteName = $.mappedRouteName;
        this.observedGeneration = $.observedGeneration;
        this.resourceRecords = $.resourceRecords;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainMappingStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainMappingStatusResponse $;

        public Builder() {
            $ = new DomainMappingStatusResponse();
        }

        public Builder(DomainMappingStatusResponse defaults) {
            $ = new DomainMappingStatusResponse(Objects.requireNonNull(defaults));
        }

        public Builder conditions(List<GoogleCloudRunV1ConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(GoogleCloudRunV1ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder mappedRouteName(String mappedRouteName) {
            $.mappedRouteName = mappedRouteName;
            return this;
        }

        public Builder observedGeneration(Integer observedGeneration) {
            $.observedGeneration = observedGeneration;
            return this;
        }

        public Builder resourceRecords(List<ResourceRecordResponse> resourceRecords) {
            $.resourceRecords = resourceRecords;
            return this;
        }

        public Builder resourceRecords(ResourceRecordResponse... resourceRecords) {
            return resourceRecords(List.of(resourceRecords));
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public DomainMappingStatusResponse build() {
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.mappedRouteName = Objects.requireNonNull($.mappedRouteName, "expected parameter 'mappedRouteName' to be non-null");
            $.observedGeneration = Objects.requireNonNull($.observedGeneration, "expected parameter 'observedGeneration' to be non-null");
            $.resourceRecords = Objects.requireNonNull($.resourceRecords, "expected parameter 'resourceRecords' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
