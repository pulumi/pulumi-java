// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.EnvelopeSignatureResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
 * 
 */
public final class EnvelopeResponse extends com.pulumi.resources.InvokeArgs {

    public static final EnvelopeResponse Empty = new EnvelopeResponse();

    /**
     * The bytes being signed
     * 
     */
    @Import(name="payload", required=true)
    private String payload;

    public String payload() {
        return this.payload;
    }

    /**
     * The type of payload being signed
     * 
     */
    @Import(name="payloadType", required=true)
    private String payloadType;

    public String payloadType() {
        return this.payloadType;
    }

    /**
     * The signatures over the payload
     * 
     */
    @Import(name="signatures", required=true)
    private List<EnvelopeSignatureResponse> signatures;

    public List<EnvelopeSignatureResponse> signatures() {
        return this.signatures;
    }

    private EnvelopeResponse() {}

    private EnvelopeResponse(EnvelopeResponse $) {
        this.payload = $.payload;
        this.payloadType = $.payloadType;
        this.signatures = $.signatures;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvelopeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvelopeResponse $;

        public Builder() {
            $ = new EnvelopeResponse();
        }

        public Builder(EnvelopeResponse defaults) {
            $ = new EnvelopeResponse(Objects.requireNonNull(defaults));
        }

        public Builder payload(String payload) {
            $.payload = payload;
            return this;
        }

        public Builder payloadType(String payloadType) {
            $.payloadType = payloadType;
            return this;
        }

        public Builder signatures(List<EnvelopeSignatureResponse> signatures) {
            $.signatures = signatures;
            return this;
        }

        public Builder signatures(EnvelopeSignatureResponse... signatures) {
            return signatures(List.of(signatures));
        }

        public EnvelopeResponse build() {
            $.payload = Objects.requireNonNull($.payload, "expected parameter 'payload' to be non-null");
            $.payloadType = Objects.requireNonNull($.payloadType, "expected parameter 'payloadType' to be non-null");
            $.signatures = Objects.requireNonNull($.signatures, "expected parameter 'signatures' to be non-null");
            return $;
        }
    }

}
