// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.contactcenterinsights_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.contactcenterinsights_v1.inputs.GoogleCloudContactcenterinsightsV1CallAnnotationResponse;
import com.pulumi.googlenative.contactcenterinsights_v1.inputs.GoogleCloudContactcenterinsightsV1ConversationLevelSentimentResponse;
import com.pulumi.googlenative.contactcenterinsights_v1.inputs.GoogleCloudContactcenterinsightsV1IssueModelResultResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Call-specific metadata created during analysis.
 * 
 */
public final class GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse Empty = new GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse();

    /**
     * A list of call annotations that apply to this call.
     * 
     */
    @Import(name="annotations", required=true)
    private List<GoogleCloudContactcenterinsightsV1CallAnnotationResponse> annotations;

    /**
     * @return A list of call annotations that apply to this call.
     * 
     */
    public List<GoogleCloudContactcenterinsightsV1CallAnnotationResponse> annotations() {
        return this.annotations;
    }

    /**
     * All the entities in the call.
     * 
     */
    @Import(name="entities", required=true)
    private Map<String,String> entities;

    /**
     * @return All the entities in the call.
     * 
     */
    public Map<String,String> entities() {
        return this.entities;
    }

    /**
     * All the matched intents in the call.
     * 
     */
    @Import(name="intents", required=true)
    private Map<String,String> intents;

    /**
     * @return All the matched intents in the call.
     * 
     */
    public Map<String,String> intents() {
        return this.intents;
    }

    /**
     * Overall conversation-level issue modeling result.
     * 
     */
    @Import(name="issueModelResult", required=true)
    private GoogleCloudContactcenterinsightsV1IssueModelResultResponse issueModelResult;

    /**
     * @return Overall conversation-level issue modeling result.
     * 
     */
    public GoogleCloudContactcenterinsightsV1IssueModelResultResponse issueModelResult() {
        return this.issueModelResult;
    }

    /**
     * All the matched phrase matchers in the call.
     * 
     */
    @Import(name="phraseMatchers", required=true)
    private Map<String,String> phraseMatchers;

    /**
     * @return All the matched phrase matchers in the call.
     * 
     */
    public Map<String,String> phraseMatchers() {
        return this.phraseMatchers;
    }

    /**
     * Overall conversation-level sentiment for each channel of the call.
     * 
     */
    @Import(name="sentiments", required=true)
    private List<GoogleCloudContactcenterinsightsV1ConversationLevelSentimentResponse> sentiments;

    /**
     * @return Overall conversation-level sentiment for each channel of the call.
     * 
     */
    public List<GoogleCloudContactcenterinsightsV1ConversationLevelSentimentResponse> sentiments() {
        return this.sentiments;
    }

    private GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse() {}

    private GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse(GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse $) {
        this.annotations = $.annotations;
        this.entities = $.entities;
        this.intents = $.intents;
        this.issueModelResult = $.issueModelResult;
        this.phraseMatchers = $.phraseMatchers;
        this.sentiments = $.sentiments;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse $;

        public Builder() {
            $ = new GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse();
        }

        public Builder(GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse defaults) {
            $ = new GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations A list of call annotations that apply to this call.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<GoogleCloudContactcenterinsightsV1CallAnnotationResponse> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations A list of call annotations that apply to this call.
         * 
         * @return builder
         * 
         */
        public Builder annotations(GoogleCloudContactcenterinsightsV1CallAnnotationResponse... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param entities All the entities in the call.
         * 
         * @return builder
         * 
         */
        public Builder entities(Map<String,String> entities) {
            $.entities = entities;
            return this;
        }

        /**
         * @param intents All the matched intents in the call.
         * 
         * @return builder
         * 
         */
        public Builder intents(Map<String,String> intents) {
            $.intents = intents;
            return this;
        }

        /**
         * @param issueModelResult Overall conversation-level issue modeling result.
         * 
         * @return builder
         * 
         */
        public Builder issueModelResult(GoogleCloudContactcenterinsightsV1IssueModelResultResponse issueModelResult) {
            $.issueModelResult = issueModelResult;
            return this;
        }

        /**
         * @param phraseMatchers All the matched phrase matchers in the call.
         * 
         * @return builder
         * 
         */
        public Builder phraseMatchers(Map<String,String> phraseMatchers) {
            $.phraseMatchers = phraseMatchers;
            return this;
        }

        /**
         * @param sentiments Overall conversation-level sentiment for each channel of the call.
         * 
         * @return builder
         * 
         */
        public Builder sentiments(List<GoogleCloudContactcenterinsightsV1ConversationLevelSentimentResponse> sentiments) {
            $.sentiments = sentiments;
            return this;
        }

        /**
         * @param sentiments Overall conversation-level sentiment for each channel of the call.
         * 
         * @return builder
         * 
         */
        public Builder sentiments(GoogleCloudContactcenterinsightsV1ConversationLevelSentimentResponse... sentiments) {
            return sentiments(List.of(sentiments));
        }

        public GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadataResponse build() {
            $.annotations = Objects.requireNonNull($.annotations, "expected parameter 'annotations' to be non-null");
            $.entities = Objects.requireNonNull($.entities, "expected parameter 'entities' to be non-null");
            $.intents = Objects.requireNonNull($.intents, "expected parameter 'intents' to be non-null");
            $.issueModelResult = Objects.requireNonNull($.issueModelResult, "expected parameter 'issueModelResult' to be non-null");
            $.phraseMatchers = Objects.requireNonNull($.phraseMatchers, "expected parameter 'phraseMatchers' to be non-null");
            $.sentiments = Objects.requireNonNull($.sentiments, "expected parameter 'sentiments' to be non-null");
            return $;
        }
    }

}
