// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.bigquery_v2.inputs.EncryptionConfigurationArgs;
import com.pulumi.googlenative.bigquery_v2.inputs.TableReferenceArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobConfigurationTableCopyArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobConfigurationTableCopyArgs Empty = new JobConfigurationTableCopyArgs();

    /**
     * [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    @Import(name="createDisposition")
      private final @Nullable Output<String> createDisposition;

    public Output<String> createDisposition() {
        return this.createDisposition == null ? Codegen.empty() : this.createDisposition;
    }

    /**
     * Custom encryption configuration (e.g., Cloud KMS keys).
     * 
     */
    @Import(name="destinationEncryptionConfiguration")
      private final @Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration;

    public Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration == null ? Codegen.empty() : this.destinationEncryptionConfiguration;
    }

    /**
     * [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
     * 
     */
    @Import(name="destinationExpirationTime")
      private final @Nullable Output<Object> destinationExpirationTime;

    public Output<Object> destinationExpirationTime() {
        return this.destinationExpirationTime == null ? Codegen.empty() : this.destinationExpirationTime;
    }

    /**
     * [Required] The destination table
     * 
     */
    @Import(name="destinationTable")
      private final @Nullable Output<TableReferenceArgs> destinationTable;

    public Output<TableReferenceArgs> destinationTable() {
        return this.destinationTable == null ? Codegen.empty() : this.destinationTable;
    }

    /**
     * [Optional] Supported operation types in table copy job.
     * 
     */
    @Import(name="operationType")
      private final @Nullable Output<String> operationType;

    public Output<String> operationType() {
        return this.operationType == null ? Codegen.empty() : this.operationType;
    }

    /**
     * [Pick one] Source table to copy.
     * 
     */
    @Import(name="sourceTable")
      private final @Nullable Output<TableReferenceArgs> sourceTable;

    public Output<TableReferenceArgs> sourceTable() {
        return this.sourceTable == null ? Codegen.empty() : this.sourceTable;
    }

    /**
     * [Pick one] Source tables to copy.
     * 
     */
    @Import(name="sourceTables")
      private final @Nullable Output<List<TableReferenceArgs>> sourceTables;

    public Output<List<TableReferenceArgs>> sourceTables() {
        return this.sourceTables == null ? Codegen.empty() : this.sourceTables;
    }

    /**
     * [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
     * 
     */
    @Import(name="writeDisposition")
      private final @Nullable Output<String> writeDisposition;

    public Output<String> writeDisposition() {
        return this.writeDisposition == null ? Codegen.empty() : this.writeDisposition;
    }

    public JobConfigurationTableCopyArgs(
        @Nullable Output<String> createDisposition,
        @Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration,
        @Nullable Output<Object> destinationExpirationTime,
        @Nullable Output<TableReferenceArgs> destinationTable,
        @Nullable Output<String> operationType,
        @Nullable Output<TableReferenceArgs> sourceTable,
        @Nullable Output<List<TableReferenceArgs>> sourceTables,
        @Nullable Output<String> writeDisposition) {
        this.createDisposition = createDisposition;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationExpirationTime = destinationExpirationTime;
        this.destinationTable = destinationTable;
        this.operationType = operationType;
        this.sourceTable = sourceTable;
        this.sourceTables = sourceTables;
        this.writeDisposition = writeDisposition;
    }

    private JobConfigurationTableCopyArgs() {
        this.createDisposition = Codegen.empty();
        this.destinationEncryptionConfiguration = Codegen.empty();
        this.destinationExpirationTime = Codegen.empty();
        this.destinationTable = Codegen.empty();
        this.operationType = Codegen.empty();
        this.sourceTable = Codegen.empty();
        this.sourceTables = Codegen.empty();
        this.writeDisposition = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigurationTableCopyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createDisposition;
        private @Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration;
        private @Nullable Output<Object> destinationExpirationTime;
        private @Nullable Output<TableReferenceArgs> destinationTable;
        private @Nullable Output<String> operationType;
        private @Nullable Output<TableReferenceArgs> sourceTable;
        private @Nullable Output<List<TableReferenceArgs>> sourceTables;
        private @Nullable Output<String> writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigurationTableCopyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDisposition = defaults.createDisposition;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationExpirationTime = defaults.destinationExpirationTime;
    	      this.destinationTable = defaults.destinationTable;
    	      this.operationType = defaults.operationType;
    	      this.sourceTable = defaults.sourceTable;
    	      this.sourceTables = defaults.sourceTables;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder createDisposition(@Nullable Output<String> createDisposition) {
            this.createDisposition = createDisposition;
            return this;
        }
        public Builder createDisposition(@Nullable String createDisposition) {
            this.createDisposition = Codegen.ofNullable(createDisposition);
            return this;
        }
        public Builder destinationEncryptionConfiguration(@Nullable Output<EncryptionConfigurationArgs> destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }
        public Builder destinationEncryptionConfiguration(@Nullable EncryptionConfigurationArgs destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Codegen.ofNullable(destinationEncryptionConfiguration);
            return this;
        }
        public Builder destinationExpirationTime(@Nullable Output<Object> destinationExpirationTime) {
            this.destinationExpirationTime = destinationExpirationTime;
            return this;
        }
        public Builder destinationExpirationTime(@Nullable Object destinationExpirationTime) {
            this.destinationExpirationTime = Codegen.ofNullable(destinationExpirationTime);
            return this;
        }
        public Builder destinationTable(@Nullable Output<TableReferenceArgs> destinationTable) {
            this.destinationTable = destinationTable;
            return this;
        }
        public Builder destinationTable(@Nullable TableReferenceArgs destinationTable) {
            this.destinationTable = Codegen.ofNullable(destinationTable);
            return this;
        }
        public Builder operationType(@Nullable Output<String> operationType) {
            this.operationType = operationType;
            return this;
        }
        public Builder operationType(@Nullable String operationType) {
            this.operationType = Codegen.ofNullable(operationType);
            return this;
        }
        public Builder sourceTable(@Nullable Output<TableReferenceArgs> sourceTable) {
            this.sourceTable = sourceTable;
            return this;
        }
        public Builder sourceTable(@Nullable TableReferenceArgs sourceTable) {
            this.sourceTable = Codegen.ofNullable(sourceTable);
            return this;
        }
        public Builder sourceTables(@Nullable Output<List<TableReferenceArgs>> sourceTables) {
            this.sourceTables = sourceTables;
            return this;
        }
        public Builder sourceTables(@Nullable List<TableReferenceArgs> sourceTables) {
            this.sourceTables = Codegen.ofNullable(sourceTables);
            return this;
        }
        public Builder sourceTables(TableReferenceArgs... sourceTables) {
            return sourceTables(List.of(sourceTables));
        }
        public Builder writeDisposition(@Nullable Output<String> writeDisposition) {
            this.writeDisposition = writeDisposition;
            return this;
        }
        public Builder writeDisposition(@Nullable String writeDisposition) {
            this.writeDisposition = Codegen.ofNullable(writeDisposition);
            return this;
        }        public JobConfigurationTableCopyArgs build() {
            return new JobConfigurationTableCopyArgs(createDisposition, destinationEncryptionConfiguration, destinationExpirationTime, destinationTable, operationType, sourceTable, sourceTables, writeDisposition);
        }
    }
}
