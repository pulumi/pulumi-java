// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.LoggingConfigResponse;
import com.pulumi.googlenative.dataproc_v1beta2.inputs.QueryListResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
 * 
 */
public final class PigJobResponse extends com.pulumi.resources.InvokeArgs {

    public static final PigJobResponse Empty = new PigJobResponse();

    /**
     * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
     * 
     */
    @Import(name="continueOnFailure", required=true)
    private Boolean continueOnFailure;

    /**
     * @return Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
     * 
     */
    public Boolean continueOnFailure() {
        return this.continueOnFailure;
    }

    /**
     * Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
     * 
     */
    @Import(name="jarFileUris", required=true)
    private List<String> jarFileUris;

    /**
     * @return Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
     * 
     */
    public List<String> jarFileUris() {
        return this.jarFileUris;
    }

    /**
     * Optional. The runtime log config for job execution.
     * 
     */
    @Import(name="loggingConfig", required=true)
    private LoggingConfigResponse loggingConfig;

    /**
     * @return Optional. The runtime log config for job execution.
     * 
     */
    public LoggingConfigResponse loggingConfig() {
        return this.loggingConfig;
    }

    /**
     * Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
     * 
     */
    @Import(name="properties", required=true)
    private Map<String,String> properties;

    /**
     * @return Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
     * 
     */
    public Map<String,String> properties() {
        return this.properties;
    }

    /**
     * The HCFS URI of the script that contains the Pig queries.
     * 
     */
    @Import(name="queryFileUri", required=true)
    private String queryFileUri;

    /**
     * @return The HCFS URI of the script that contains the Pig queries.
     * 
     */
    public String queryFileUri() {
        return this.queryFileUri;
    }

    /**
     * A list of queries.
     * 
     */
    @Import(name="queryList", required=true)
    private QueryListResponse queryList;

    /**
     * @return A list of queries.
     * 
     */
    public QueryListResponse queryList() {
        return this.queryList;
    }

    /**
     * Optional. Mapping of query variable names to values (equivalent to the Pig command: name=[value]).
     * 
     */
    @Import(name="scriptVariables", required=true)
    private Map<String,String> scriptVariables;

    /**
     * @return Optional. Mapping of query variable names to values (equivalent to the Pig command: name=[value]).
     * 
     */
    public Map<String,String> scriptVariables() {
        return this.scriptVariables;
    }

    private PigJobResponse() {}

    private PigJobResponse(PigJobResponse $) {
        this.continueOnFailure = $.continueOnFailure;
        this.jarFileUris = $.jarFileUris;
        this.loggingConfig = $.loggingConfig;
        this.properties = $.properties;
        this.queryFileUri = $.queryFileUri;
        this.queryList = $.queryList;
        this.scriptVariables = $.scriptVariables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PigJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PigJobResponse $;

        public Builder() {
            $ = new PigJobResponse();
        }

        public Builder(PigJobResponse defaults) {
            $ = new PigJobResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param continueOnFailure Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
         * 
         * @return builder
         * 
         */
        public Builder continueOnFailure(Boolean continueOnFailure) {
            $.continueOnFailure = continueOnFailure;
            return this;
        }

        /**
         * @param jarFileUris Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(List<String> jarFileUris) {
            $.jarFileUris = jarFileUris;
            return this;
        }

        /**
         * @param jarFileUris Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(String... jarFileUris) {
            return jarFileUris(List.of(jarFileUris));
        }

        /**
         * @param loggingConfig Optional. The runtime log config for job execution.
         * 
         * @return builder
         * 
         */
        public Builder loggingConfig(LoggingConfigResponse loggingConfig) {
            $.loggingConfig = loggingConfig;
            return this;
        }

        /**
         * @param properties Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param queryFileUri The HCFS URI of the script that contains the Pig queries.
         * 
         * @return builder
         * 
         */
        public Builder queryFileUri(String queryFileUri) {
            $.queryFileUri = queryFileUri;
            return this;
        }

        /**
         * @param queryList A list of queries.
         * 
         * @return builder
         * 
         */
        public Builder queryList(QueryListResponse queryList) {
            $.queryList = queryList;
            return this;
        }

        /**
         * @param scriptVariables Optional. Mapping of query variable names to values (equivalent to the Pig command: name=[value]).
         * 
         * @return builder
         * 
         */
        public Builder scriptVariables(Map<String,String> scriptVariables) {
            $.scriptVariables = scriptVariables;
            return this;
        }

        public PigJobResponse build() {
            $.continueOnFailure = Objects.requireNonNull($.continueOnFailure, "expected parameter 'continueOnFailure' to be non-null");
            $.jarFileUris = Objects.requireNonNull($.jarFileUris, "expected parameter 'jarFileUris' to be non-null");
            $.loggingConfig = Objects.requireNonNull($.loggingConfig, "expected parameter 'loggingConfig' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.queryFileUri = Objects.requireNonNull($.queryFileUri, "expected parameter 'queryFileUri' to be non-null");
            $.queryList = Objects.requireNonNull($.queryList, "expected parameter 'queryList' to be non-null");
            $.scriptVariables = Objects.requireNonNull($.scriptVariables, "expected parameter 'scriptVariables' to be non-null");
            return $;
        }
    }

}
