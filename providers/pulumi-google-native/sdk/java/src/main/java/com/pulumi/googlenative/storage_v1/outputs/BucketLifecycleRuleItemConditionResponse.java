// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class BucketLifecycleRuleItemConditionResponse {
    /**
     * Age of an object (in days). This condition is satisfied when an object reaches the specified age.
     * 
     */
    private final Integer age;
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
     * 
     */
    private final String createdBefore;
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC.
     * 
     */
    private final String customTimeBefore;
    /**
     * Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
     * 
     */
    private final Integer daysSinceCustomTime;
    /**
     * Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
     * 
     */
    private final Integer daysSinceNoncurrentTime;
    /**
     * Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
     * 
     */
    private final Boolean isLive;
    /**
     * A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
     * 
     */
    private final String matchesPattern;
    /**
     * Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
     * 
     */
    private final List<String> matchesStorageClass;
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
     * 
     */
    private final String noncurrentTimeBefore;
    /**
     * Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
     * 
     */
    private final Integer numNewerVersions;

    @CustomType.Constructor
    private BucketLifecycleRuleItemConditionResponse(
        @CustomType.Parameter("age") Integer age,
        @CustomType.Parameter("createdBefore") String createdBefore,
        @CustomType.Parameter("customTimeBefore") String customTimeBefore,
        @CustomType.Parameter("daysSinceCustomTime") Integer daysSinceCustomTime,
        @CustomType.Parameter("daysSinceNoncurrentTime") Integer daysSinceNoncurrentTime,
        @CustomType.Parameter("isLive") Boolean isLive,
        @CustomType.Parameter("matchesPattern") String matchesPattern,
        @CustomType.Parameter("matchesStorageClass") List<String> matchesStorageClass,
        @CustomType.Parameter("noncurrentTimeBefore") String noncurrentTimeBefore,
        @CustomType.Parameter("numNewerVersions") Integer numNewerVersions) {
        this.age = age;
        this.createdBefore = createdBefore;
        this.customTimeBefore = customTimeBefore;
        this.daysSinceCustomTime = daysSinceCustomTime;
        this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
        this.isLive = isLive;
        this.matchesPattern = matchesPattern;
        this.matchesStorageClass = matchesStorageClass;
        this.noncurrentTimeBefore = noncurrentTimeBefore;
        this.numNewerVersions = numNewerVersions;
    }

    /**
     * Age of an object (in days). This condition is satisfied when an object reaches the specified age.
     * 
    */
    public Integer age() {
        return this.age;
    }
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
     * 
    */
    public String createdBefore() {
        return this.createdBefore;
    }
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC.
     * 
    */
    public String customTimeBefore() {
        return this.customTimeBefore;
    }
    /**
     * Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
     * 
    */
    public Integer daysSinceCustomTime() {
        return this.daysSinceCustomTime;
    }
    /**
     * Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
     * 
    */
    public Integer daysSinceNoncurrentTime() {
        return this.daysSinceNoncurrentTime;
    }
    /**
     * Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
     * 
    */
    public Boolean isLive() {
        return this.isLive;
    }
    /**
     * A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
     * 
    */
    public String matchesPattern() {
        return this.matchesPattern;
    }
    /**
     * Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
     * 
    */
    public List<String> matchesStorageClass() {
        return this.matchesStorageClass;
    }
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
     * 
    */
    public String noncurrentTimeBefore() {
        return this.noncurrentTimeBefore;
    }
    /**
     * Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
     * 
    */
    public Integer numNewerVersions() {
        return this.numNewerVersions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleRuleItemConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer age;
        private String createdBefore;
        private String customTimeBefore;
        private Integer daysSinceCustomTime;
        private Integer daysSinceNoncurrentTime;
        private Boolean isLive;
        private String matchesPattern;
        private List<String> matchesStorageClass;
        private String noncurrentTimeBefore;
        private Integer numNewerVersions;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketLifecycleRuleItemConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.createdBefore = defaults.createdBefore;
    	      this.customTimeBefore = defaults.customTimeBefore;
    	      this.daysSinceCustomTime = defaults.daysSinceCustomTime;
    	      this.daysSinceNoncurrentTime = defaults.daysSinceNoncurrentTime;
    	      this.isLive = defaults.isLive;
    	      this.matchesPattern = defaults.matchesPattern;
    	      this.matchesStorageClass = defaults.matchesStorageClass;
    	      this.noncurrentTimeBefore = defaults.noncurrentTimeBefore;
    	      this.numNewerVersions = defaults.numNewerVersions;
        }

        public Builder age(Integer age) {
            this.age = Objects.requireNonNull(age);
            return this;
        }
        public Builder createdBefore(String createdBefore) {
            this.createdBefore = Objects.requireNonNull(createdBefore);
            return this;
        }
        public Builder customTimeBefore(String customTimeBefore) {
            this.customTimeBefore = Objects.requireNonNull(customTimeBefore);
            return this;
        }
        public Builder daysSinceCustomTime(Integer daysSinceCustomTime) {
            this.daysSinceCustomTime = Objects.requireNonNull(daysSinceCustomTime);
            return this;
        }
        public Builder daysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
            this.daysSinceNoncurrentTime = Objects.requireNonNull(daysSinceNoncurrentTime);
            return this;
        }
        public Builder isLive(Boolean isLive) {
            this.isLive = Objects.requireNonNull(isLive);
            return this;
        }
        public Builder matchesPattern(String matchesPattern) {
            this.matchesPattern = Objects.requireNonNull(matchesPattern);
            return this;
        }
        public Builder matchesStorageClass(List<String> matchesStorageClass) {
            this.matchesStorageClass = Objects.requireNonNull(matchesStorageClass);
            return this;
        }
        public Builder matchesStorageClass(String... matchesStorageClass) {
            return matchesStorageClass(List.of(matchesStorageClass));
        }
        public Builder noncurrentTimeBefore(String noncurrentTimeBefore) {
            this.noncurrentTimeBefore = Objects.requireNonNull(noncurrentTimeBefore);
            return this;
        }
        public Builder numNewerVersions(Integer numNewerVersions) {
            this.numNewerVersions = Objects.requireNonNull(numNewerVersions);
            return this;
        }        public BucketLifecycleRuleItemConditionResponse build() {
            return new BucketLifecycleRuleItemConditionResponse(age, createdBefore, customTimeBefore, daysSinceCustomTime, daysSinceNoncurrentTime, isLive, matchesPattern, matchesStorageClass, noncurrentTimeBefore, numNewerVersions);
        }
    }
}
