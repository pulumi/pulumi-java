// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudscheduler_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudscheduler_v1.inputs.OAuthTokenResponse;
import com.pulumi.googlenative.cloudscheduler_v1.inputs.OidcTokenResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
 * 
 */
public final class HttpTargetResponse extends com.pulumi.resources.InvokeArgs {

    public static final HttpTargetResponse Empty = new HttpTargetResponse();

    /**
     * HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
     * 
     */
    @Import(name="body", required=true)
    private String body;

    public String body() {
        return this.body;
    }

    /**
     * The user can specify HTTP request headers to send with the job&#39;s HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job&#39;s HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `&#34;Google-Cloud-Scheduler&#34;`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule time in RFC3339 UTC &#34;Zulu&#34; format. The total size of headers must be less than 80KB.
     * 
     */
    @Import(name="headers", required=true)
    private Map<String,String> headers;

    public Map<String,String> headers() {
        return this.headers;
    }

    /**
     * Which HTTP method to use for the request.
     * 
     */
    @Import(name="httpMethod", required=true)
    private String httpMethod;

    public String httpMethod() {
        return this.httpMethod;
    }

    /**
     * If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
     * 
     */
    @Import(name="oauthToken", required=true)
    private OAuthTokenResponse oauthToken;

    public OAuthTokenResponse oauthToken() {
        return this.oauthToken;
    }

    /**
     * If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
     * 
     */
    @Import(name="oidcToken", required=true)
    private OidcTokenResponse oidcToken;

    public OidcTokenResponse oidcToken() {
        return this.oidcToken;
    }

    /**
     * The full URI path that the request will be sent to. This string must begin with either &#34;http://&#34; or &#34;https://&#34;. Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    public String uri() {
        return this.uri;
    }

    private HttpTargetResponse() {}

    private HttpTargetResponse(HttpTargetResponse $) {
        this.body = $.body;
        this.headers = $.headers;
        this.httpMethod = $.httpMethod;
        this.oauthToken = $.oauthToken;
        this.oidcToken = $.oidcToken;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpTargetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpTargetResponse $;

        public Builder() {
            $ = new HttpTargetResponse();
        }

        public Builder(HttpTargetResponse defaults) {
            $ = new HttpTargetResponse(Objects.requireNonNull(defaults));
        }

        public Builder body(String body) {
            $.body = body;
            return this;
        }

        public Builder headers(Map<String,String> headers) {
            $.headers = headers;
            return this;
        }

        public Builder httpMethod(String httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder oauthToken(OAuthTokenResponse oauthToken) {
            $.oauthToken = oauthToken;
            return this;
        }

        public Builder oidcToken(OidcTokenResponse oidcToken) {
            $.oidcToken = oidcToken;
            return this;
        }

        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public HttpTargetResponse build() {
            $.body = Objects.requireNonNull($.body, "expected parameter 'body' to be non-null");
            $.headers = Objects.requireNonNull($.headers, "expected parameter 'headers' to be non-null");
            $.httpMethod = Objects.requireNonNull($.httpMethod, "expected parameter 'httpMethod' to be non-null");
            $.oauthToken = Objects.requireNonNull($.oauthToken, "expected parameter 'oauthToken' to be non-null");
            $.oidcToken = Objects.requireNonNull($.oidcToken, "expected parameter 'oidcToken' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
