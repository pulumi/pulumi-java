// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final AndroidInstrumentationTestArgs Empty = new AndroidInstrumentationTestArgs();

    /**
     * The java package for the test to be executed. Required
     * 
     */
    @Import(name="testPackageId")
      private final @Nullable Output<String> testPackageId;

    public Output<String> testPackageId() {
        return this.testPackageId == null ? Codegen.empty() : this.testPackageId;
    }

    /**
     * The InstrumentationTestRunner class. Required
     * 
     */
    @Import(name="testRunnerClass")
      private final @Nullable Output<String> testRunnerClass;

    public Output<String> testRunnerClass() {
        return this.testRunnerClass == null ? Codegen.empty() : this.testRunnerClass;
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     * 
     */
    @Import(name="testTargets")
      private final @Nullable Output<List<String>> testTargets;

    public Output<List<String>> testTargets() {
        return this.testTargets == null ? Codegen.empty() : this.testTargets;
    }

    /**
     * The flag indicates whether Android Test Orchestrator will be used to run test or not.
     * 
     */
    @Import(name="useOrchestrator")
      private final @Nullable Output<Boolean> useOrchestrator;

    public Output<Boolean> useOrchestrator() {
        return this.useOrchestrator == null ? Codegen.empty() : this.useOrchestrator;
    }

    public AndroidInstrumentationTestArgs(
        @Nullable Output<String> testPackageId,
        @Nullable Output<String> testRunnerClass,
        @Nullable Output<List<String>> testTargets,
        @Nullable Output<Boolean> useOrchestrator) {
        this.testPackageId = testPackageId;
        this.testRunnerClass = testRunnerClass;
        this.testTargets = testTargets;
        this.useOrchestrator = useOrchestrator;
    }

    private AndroidInstrumentationTestArgs() {
        this.testPackageId = Codegen.empty();
        this.testRunnerClass = Codegen.empty();
        this.testTargets = Codegen.empty();
        this.useOrchestrator = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidInstrumentationTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> testPackageId;
        private @Nullable Output<String> testRunnerClass;
        private @Nullable Output<List<String>> testTargets;
        private @Nullable Output<Boolean> useOrchestrator;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidInstrumentationTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.testPackageId = defaults.testPackageId;
    	      this.testRunnerClass = defaults.testRunnerClass;
    	      this.testTargets = defaults.testTargets;
    	      this.useOrchestrator = defaults.useOrchestrator;
        }

        public Builder testPackageId(@Nullable Output<String> testPackageId) {
            this.testPackageId = testPackageId;
            return this;
        }
        public Builder testPackageId(@Nullable String testPackageId) {
            this.testPackageId = Codegen.ofNullable(testPackageId);
            return this;
        }
        public Builder testRunnerClass(@Nullable Output<String> testRunnerClass) {
            this.testRunnerClass = testRunnerClass;
            return this;
        }
        public Builder testRunnerClass(@Nullable String testRunnerClass) {
            this.testRunnerClass = Codegen.ofNullable(testRunnerClass);
            return this;
        }
        public Builder testTargets(@Nullable Output<List<String>> testTargets) {
            this.testTargets = testTargets;
            return this;
        }
        public Builder testTargets(@Nullable List<String> testTargets) {
            this.testTargets = Codegen.ofNullable(testTargets);
            return this;
        }
        public Builder testTargets(String... testTargets) {
            return testTargets(List.of(testTargets));
        }
        public Builder useOrchestrator(@Nullable Output<Boolean> useOrchestrator) {
            this.useOrchestrator = useOrchestrator;
            return this;
        }
        public Builder useOrchestrator(@Nullable Boolean useOrchestrator) {
            this.useOrchestrator = Codegen.ofNullable(useOrchestrator);
            return this;
        }        public AndroidInstrumentationTestArgs build() {
            return new AndroidInstrumentationTestArgs(testPackageId, testRunnerClass, testTargets, useOrchestrator);
        }
    }
}
