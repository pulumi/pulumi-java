// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final AndroidInstrumentationTestArgs Empty = new AndroidInstrumentationTestArgs();

    /**
     * The java package for the test to be executed. Required
     * 
     */
    @Import(name="testPackageId")
    private @Nullable Output<String> testPackageId;

    public Optional<Output<String>> testPackageId() {
        return Optional.ofNullable(this.testPackageId);
    }

    /**
     * The InstrumentationTestRunner class. Required
     * 
     */
    @Import(name="testRunnerClass")
    private @Nullable Output<String> testRunnerClass;

    public Optional<Output<String>> testRunnerClass() {
        return Optional.ofNullable(this.testRunnerClass);
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
     * 
     */
    @Import(name="testTargets")
    private @Nullable Output<List<String>> testTargets;

    public Optional<Output<List<String>>> testTargets() {
        return Optional.ofNullable(this.testTargets);
    }

    /**
     * The flag indicates whether Android Test Orchestrator will be used to run test or not.
     * 
     */
    @Import(name="useOrchestrator")
    private @Nullable Output<Boolean> useOrchestrator;

    public Optional<Output<Boolean>> useOrchestrator() {
        return Optional.ofNullable(this.useOrchestrator);
    }

    private AndroidInstrumentationTestArgs() {}

    private AndroidInstrumentationTestArgs(AndroidInstrumentationTestArgs $) {
        this.testPackageId = $.testPackageId;
        this.testRunnerClass = $.testRunnerClass;
        this.testTargets = $.testTargets;
        this.useOrchestrator = $.useOrchestrator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidInstrumentationTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidInstrumentationTestArgs $;

        public Builder() {
            $ = new AndroidInstrumentationTestArgs();
        }

        public Builder(AndroidInstrumentationTestArgs defaults) {
            $ = new AndroidInstrumentationTestArgs(Objects.requireNonNull(defaults));
        }

        public Builder testPackageId(@Nullable Output<String> testPackageId) {
            $.testPackageId = testPackageId;
            return this;
        }

        public Builder testPackageId(String testPackageId) {
            return testPackageId(Output.of(testPackageId));
        }

        public Builder testRunnerClass(@Nullable Output<String> testRunnerClass) {
            $.testRunnerClass = testRunnerClass;
            return this;
        }

        public Builder testRunnerClass(String testRunnerClass) {
            return testRunnerClass(Output.of(testRunnerClass));
        }

        public Builder testTargets(@Nullable Output<List<String>> testTargets) {
            $.testTargets = testTargets;
            return this;
        }

        public Builder testTargets(List<String> testTargets) {
            return testTargets(Output.of(testTargets));
        }

        public Builder testTargets(String... testTargets) {
            return testTargets(List.of(testTargets));
        }

        public Builder useOrchestrator(@Nullable Output<Boolean> useOrchestrator) {
            $.useOrchestrator = useOrchestrator;
            return this;
        }

        public Builder useOrchestrator(Boolean useOrchestrator) {
            return useOrchestrator(Output.of(useOrchestrator));
        }

        public AndroidInstrumentationTestArgs build() {
            return $;
        }
    }

}
