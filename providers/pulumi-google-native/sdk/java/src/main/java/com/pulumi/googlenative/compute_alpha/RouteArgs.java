// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_alpha.enums.RouteIlbRouteBehaviorOnUnhealthy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteArgs Empty = new RouteArgs();

    /**
     * Whether this route can conflict with existing subnetworks. Setting this to true allows this route to conflict with subnetworks that have already been configured on the corresponding network.
     * 
     */
    @Import(name="allowConflictingSubnetworks")
    private @Nullable Output<Boolean> allowConflictingSubnetworks;

    public Optional<Output<Boolean>> allowConflictingSubnetworks() {
        return Optional.ofNullable(this.allowConflictingSubnetworks);
    }

    /**
     * An optional description of this resource. Provide this field when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported.
     * 
     */
    @Import(name="destRange")
    private @Nullable Output<String> destRange;

    public Optional<Output<String>> destRange() {
        return Optional.ofNullable(this.destRange);
    }

    /**
     * ILB route behavior when ILB is deemed unhealthy based on user specified threshold on the Backend Service of the internal load balancing.
     * 
     */
    @Import(name="ilbRouteBehaviorOnUnhealthy")
    private @Nullable Output<RouteIlbRouteBehaviorOnUnhealthy> ilbRouteBehaviorOnUnhealthy;

    public Optional<Output<RouteIlbRouteBehaviorOnUnhealthy>> ilbRouteBehaviorOnUnhealthy() {
        return Optional.ofNullable(this.ilbRouteBehaviorOnUnhealthy);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Fully-qualified URL of the network that this route applies to.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL: projects/ project/global/gateways/default-internet-gateway
     * 
     */
    @Import(name="nextHopGateway")
    private @Nullable Output<String> nextHopGateway;

    public Optional<Output<String>> nextHopGateway() {
        return Optional.ofNullable(this.nextHopGateway);
    }

    /**
     * The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all valid URLs: - 10.128.0.56 - https://www.googleapis.com/compute/v1/projects/project/regions/region /forwardingRules/forwardingRule - regions/region/forwardingRules/forwardingRule
     * 
     */
    @Import(name="nextHopIlb")
    private @Nullable Output<String> nextHopIlb;

    public Optional<Output<String>> nextHopIlb() {
        return Optional.ofNullable(this.nextHopIlb);
    }

    /**
     * The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/
     * 
     */
    @Import(name="nextHopInstance")
    private @Nullable Output<String> nextHopInstance;

    public Optional<Output<String>> nextHopInstance() {
        return Optional.ofNullable(this.nextHopInstance);
    }

    /**
     * The network IP address of an instance that should handle matching packets. Only IPv4 is supported.
     * 
     */
    @Import(name="nextHopIp")
    private @Nullable Output<String> nextHopIp;

    public Optional<Output<String>> nextHopIp() {
        return Optional.ofNullable(this.nextHopIp);
    }

    /**
     * The URL of the local network if it should handle matching packets.
     * 
     */
    @Import(name="nextHopNetwork")
    private @Nullable Output<String> nextHopNetwork;

    public Optional<Output<String>> nextHopNetwork() {
        return Optional.ofNullable(this.nextHopNetwork);
    }

    /**
     * The URL to a VpnTunnel that should handle matching packets.
     * 
     */
    @Import(name="nextHopVpnTunnel")
    private @Nullable Output<String> nextHopVpnTunnel;

    public Optional<Output<String>> nextHopVpnTunnel() {
        return Optional.ofNullable(this.nextHopVpnTunnel);
    }

    /**
     * The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * A list of instance tags to which this route applies.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RouteArgs() {}

    private RouteArgs(RouteArgs $) {
        this.allowConflictingSubnetworks = $.allowConflictingSubnetworks;
        this.description = $.description;
        this.destRange = $.destRange;
        this.ilbRouteBehaviorOnUnhealthy = $.ilbRouteBehaviorOnUnhealthy;
        this.name = $.name;
        this.network = $.network;
        this.nextHopGateway = $.nextHopGateway;
        this.nextHopIlb = $.nextHopIlb;
        this.nextHopInstance = $.nextHopInstance;
        this.nextHopIp = $.nextHopIp;
        this.nextHopNetwork = $.nextHopNetwork;
        this.nextHopVpnTunnel = $.nextHopVpnTunnel;
        this.priority = $.priority;
        this.project = $.project;
        this.requestId = $.requestId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteArgs $;

        public Builder() {
            $ = new RouteArgs();
        }

        public Builder(RouteArgs defaults) {
            $ = new RouteArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowConflictingSubnetworks(@Nullable Output<Boolean> allowConflictingSubnetworks) {
            $.allowConflictingSubnetworks = allowConflictingSubnetworks;
            return this;
        }

        public Builder allowConflictingSubnetworks(Boolean allowConflictingSubnetworks) {
            return allowConflictingSubnetworks(Output.of(allowConflictingSubnetworks));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destRange(@Nullable Output<String> destRange) {
            $.destRange = destRange;
            return this;
        }

        public Builder destRange(String destRange) {
            return destRange(Output.of(destRange));
        }

        public Builder ilbRouteBehaviorOnUnhealthy(@Nullable Output<RouteIlbRouteBehaviorOnUnhealthy> ilbRouteBehaviorOnUnhealthy) {
            $.ilbRouteBehaviorOnUnhealthy = ilbRouteBehaviorOnUnhealthy;
            return this;
        }

        public Builder ilbRouteBehaviorOnUnhealthy(RouteIlbRouteBehaviorOnUnhealthy ilbRouteBehaviorOnUnhealthy) {
            return ilbRouteBehaviorOnUnhealthy(Output.of(ilbRouteBehaviorOnUnhealthy));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        public Builder network(String network) {
            return network(Output.of(network));
        }

        public Builder nextHopGateway(@Nullable Output<String> nextHopGateway) {
            $.nextHopGateway = nextHopGateway;
            return this;
        }

        public Builder nextHopGateway(String nextHopGateway) {
            return nextHopGateway(Output.of(nextHopGateway));
        }

        public Builder nextHopIlb(@Nullable Output<String> nextHopIlb) {
            $.nextHopIlb = nextHopIlb;
            return this;
        }

        public Builder nextHopIlb(String nextHopIlb) {
            return nextHopIlb(Output.of(nextHopIlb));
        }

        public Builder nextHopInstance(@Nullable Output<String> nextHopInstance) {
            $.nextHopInstance = nextHopInstance;
            return this;
        }

        public Builder nextHopInstance(String nextHopInstance) {
            return nextHopInstance(Output.of(nextHopInstance));
        }

        public Builder nextHopIp(@Nullable Output<String> nextHopIp) {
            $.nextHopIp = nextHopIp;
            return this;
        }

        public Builder nextHopIp(String nextHopIp) {
            return nextHopIp(Output.of(nextHopIp));
        }

        public Builder nextHopNetwork(@Nullable Output<String> nextHopNetwork) {
            $.nextHopNetwork = nextHopNetwork;
            return this;
        }

        public Builder nextHopNetwork(String nextHopNetwork) {
            return nextHopNetwork(Output.of(nextHopNetwork));
        }

        public Builder nextHopVpnTunnel(@Nullable Output<String> nextHopVpnTunnel) {
            $.nextHopVpnTunnel = nextHopVpnTunnel;
            return this;
        }

        public Builder nextHopVpnTunnel(String nextHopVpnTunnel) {
            return nextHopVpnTunnel(Output.of(nextHopVpnTunnel));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public RouteArgs build() {
            return $;
        }
    }

}
