// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
 * 
 */
public final class IosTestLoopResponse extends com.pulumi.resources.InvokeArgs {

    public static final IosTestLoopResponse Empty = new IosTestLoopResponse();

    /**
     * The bundle id for the application under test.
     * 
     */
    @Import(name="appBundleId", required=true)
    private String appBundleId;

    public String appBundleId() {
        return this.appBundleId;
    }

    /**
     * The .ipa of the application to test.
     * 
     */
    @Import(name="appIpa", required=true)
    private FileReferenceResponse appIpa;

    public FileReferenceResponse appIpa() {
        return this.appIpa;
    }

    /**
     * The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
     * 
     */
    @Import(name="scenarios", required=true)
    private List<Integer> scenarios;

    public List<Integer> scenarios() {
        return this.scenarios;
    }

    private IosTestLoopResponse() {}

    private IosTestLoopResponse(IosTestLoopResponse $) {
        this.appBundleId = $.appBundleId;
        this.appIpa = $.appIpa;
        this.scenarios = $.scenarios;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IosTestLoopResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IosTestLoopResponse $;

        public Builder() {
            $ = new IosTestLoopResponse();
        }

        public Builder(IosTestLoopResponse defaults) {
            $ = new IosTestLoopResponse(Objects.requireNonNull(defaults));
        }

        public Builder appBundleId(String appBundleId) {
            $.appBundleId = appBundleId;
            return this;
        }

        public Builder appIpa(FileReferenceResponse appIpa) {
            $.appIpa = appIpa;
            return this;
        }

        public Builder scenarios(List<Integer> scenarios) {
            $.scenarios = scenarios;
            return this;
        }

        public Builder scenarios(Integer... scenarios) {
            return scenarios(List.of(scenarios));
        }

        public IosTestLoopResponse build() {
            $.appBundleId = Objects.requireNonNull($.appBundleId, "expected parameter 'appBundleId' to be non-null");
            $.appIpa = Objects.requireNonNull($.appIpa, "expected parameter 'appIpa' to be non-null");
            $.scenarios = Objects.requireNonNull($.scenarios, "expected parameter 'scenarios' to be non-null");
            return $;
        }
    }

}
