// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.gameservices.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.gameservices.v1.outputs.ConditionResponse;
import com.pulumi.googlenative.gameservices.v1.outputs.LogConfigResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class RuleResponse {
    /**
     * @return Required
     * 
     */
    private final String action;
    /**
     * @return Additional restrictions that must be met. All conditions must pass for the rule to match.
     * 
     */
    private final List<ConditionResponse> conditions;
    /**
     * @return Human-readable description of the rule.
     * 
     */
    private final String description;
    /**
     * @return If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
     * 
     */
    private final List<String> in;
    /**
     * @return The config returned to callers of CheckPolicy for any entries that match the LOG action.
     * 
     */
    private final List<LogConfigResponse> logConfig;
    /**
     * @return If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
     * 
     */
    private final List<String> notIn;
    /**
     * @return A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
     * 
     */
    private final List<String> permissions;

    @CustomType.Constructor
    private RuleResponse(
        @CustomType.Parameter("action") String action,
        @CustomType.Parameter("conditions") List<ConditionResponse> conditions,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("in") List<String> in,
        @CustomType.Parameter("logConfig") List<LogConfigResponse> logConfig,
        @CustomType.Parameter("notIn") List<String> notIn,
        @CustomType.Parameter("permissions") List<String> permissions) {
        this.action = action;
        this.conditions = conditions;
        this.description = description;
        this.in = in;
        this.logConfig = logConfig;
        this.notIn = notIn;
        this.permissions = permissions;
    }

    /**
     * @return Required
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Additional restrictions that must be met. All conditions must pass for the rule to match.
     * 
     */
    public List<ConditionResponse> conditions() {
        return this.conditions;
    }
    /**
     * @return Human-readable description of the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
     * 
     */
    public List<String> in() {
        return this.in;
    }
    /**
     * @return The config returned to callers of CheckPolicy for any entries that match the LOG action.
     * 
     */
    public List<LogConfigResponse> logConfig() {
        return this.logConfig;
    }
    /**
     * @return If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
     * 
     */
    public List<String> notIn() {
        return this.notIn;
    }
    /**
     * @return A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
     * 
     */
    public List<String> permissions() {
        return this.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private List<ConditionResponse> conditions;
        private String description;
        private List<String> in;
        private List<LogConfigResponse> logConfig;
        private List<String> notIn;
        private List<String> permissions;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.in = defaults.in;
    	      this.logConfig = defaults.logConfig;
    	      this.notIn = defaults.notIn;
    	      this.permissions = defaults.permissions;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder conditions(List<ConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder in(List<String> in) {
            this.in = Objects.requireNonNull(in);
            return this;
        }
        public Builder in(String... in) {
            return in(List.of(in));
        }
        public Builder logConfig(List<LogConfigResponse> logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }
        public Builder logConfig(LogConfigResponse... logConfig) {
            return logConfig(List.of(logConfig));
        }
        public Builder notIn(List<String> notIn) {
            this.notIn = Objects.requireNonNull(notIn);
            return this;
        }
        public Builder notIn(String... notIn) {
            return notIn(List.of(notIn));
        }
        public Builder permissions(List<String> permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }        public RuleResponse build() {
            return new RuleResponse(action, conditions, description, in, logConfig, notIn, permissions);
        }
    }
}
