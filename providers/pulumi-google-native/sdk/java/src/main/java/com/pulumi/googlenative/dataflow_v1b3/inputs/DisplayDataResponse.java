// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow_v1b3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Data provided with a pipeline or transform to provide descriptive info.
 * 
 */
public final class DisplayDataResponse extends com.pulumi.resources.InvokeArgs {

    public static final DisplayDataResponse Empty = new DisplayDataResponse();

    /**
     * Contains value if the data is of a boolean type.
     * 
     */
    @Import(name="boolValue", required=true)
    private Boolean boolValue;

    /**
     * @return Contains value if the data is of a boolean type.
     * 
     */
    public Boolean boolValue() {
        return this.boolValue;
    }

    /**
     * Contains value if the data is of duration type.
     * 
     */
    @Import(name="durationValue", required=true)
    private String durationValue;

    /**
     * @return Contains value if the data is of duration type.
     * 
     */
    public String durationValue() {
        return this.durationValue;
    }

    /**
     * Contains value if the data is of float type.
     * 
     */
    @Import(name="floatValue", required=true)
    private Double floatValue;

    /**
     * @return Contains value if the data is of float type.
     * 
     */
    public Double floatValue() {
        return this.floatValue;
    }

    /**
     * Contains value if the data is of int64 type.
     * 
     */
    @Import(name="int64Value", required=true)
    private String int64Value;

    /**
     * @return Contains value if the data is of int64 type.
     * 
     */
    public String int64Value() {
        return this.int64Value;
    }

    /**
     * Contains value if the data is of java class type.
     * 
     */
    @Import(name="javaClassValue", required=true)
    private String javaClassValue;

    /**
     * @return Contains value if the data is of java class type.
     * 
     */
    public String javaClassValue() {
        return this.javaClassValue;
    }

    /**
     * The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * An optional label to display in a dax UI for the element.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return An optional label to display in a dax UI for the element.
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
     * 
     */
    @Import(name="shortStrValue", required=true)
    private String shortStrValue;

    /**
     * @return A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
     * 
     */
    public String shortStrValue() {
        return this.shortStrValue;
    }

    /**
     * Contains value if the data is of string type.
     * 
     */
    @Import(name="strValue", required=true)
    private String strValue;

    /**
     * @return Contains value if the data is of string type.
     * 
     */
    public String strValue() {
        return this.strValue;
    }

    /**
     * Contains value if the data is of timestamp type.
     * 
     */
    @Import(name="timestampValue", required=true)
    private String timestampValue;

    /**
     * @return Contains value if the data is of timestamp type.
     * 
     */
    public String timestampValue() {
        return this.timestampValue;
    }

    /**
     * An optional full URL.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    /**
     * @return An optional full URL.
     * 
     */
    public String url() {
        return this.url;
    }

    private DisplayDataResponse() {}

    private DisplayDataResponse(DisplayDataResponse $) {
        this.boolValue = $.boolValue;
        this.durationValue = $.durationValue;
        this.floatValue = $.floatValue;
        this.int64Value = $.int64Value;
        this.javaClassValue = $.javaClassValue;
        this.key = $.key;
        this.label = $.label;
        this.namespace = $.namespace;
        this.shortStrValue = $.shortStrValue;
        this.strValue = $.strValue;
        this.timestampValue = $.timestampValue;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DisplayDataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DisplayDataResponse $;

        public Builder() {
            $ = new DisplayDataResponse();
        }

        public Builder(DisplayDataResponse defaults) {
            $ = new DisplayDataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param boolValue Contains value if the data is of a boolean type.
         * 
         * @return builder
         * 
         */
        public Builder boolValue(Boolean boolValue) {
            $.boolValue = boolValue;
            return this;
        }

        /**
         * @param durationValue Contains value if the data is of duration type.
         * 
         * @return builder
         * 
         */
        public Builder durationValue(String durationValue) {
            $.durationValue = durationValue;
            return this;
        }

        /**
         * @param floatValue Contains value if the data is of float type.
         * 
         * @return builder
         * 
         */
        public Builder floatValue(Double floatValue) {
            $.floatValue = floatValue;
            return this;
        }

        /**
         * @param int64Value Contains value if the data is of int64 type.
         * 
         * @return builder
         * 
         */
        public Builder int64Value(String int64Value) {
            $.int64Value = int64Value;
            return this;
        }

        /**
         * @param javaClassValue Contains value if the data is of java class type.
         * 
         * @return builder
         * 
         */
        public Builder javaClassValue(String javaClassValue) {
            $.javaClassValue = javaClassValue;
            return this;
        }

        /**
         * @param key The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param label An optional label to display in a dax UI for the element.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param namespace The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param shortStrValue A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
         * 
         * @return builder
         * 
         */
        public Builder shortStrValue(String shortStrValue) {
            $.shortStrValue = shortStrValue;
            return this;
        }

        /**
         * @param strValue Contains value if the data is of string type.
         * 
         * @return builder
         * 
         */
        public Builder strValue(String strValue) {
            $.strValue = strValue;
            return this;
        }

        /**
         * @param timestampValue Contains value if the data is of timestamp type.
         * 
         * @return builder
         * 
         */
        public Builder timestampValue(String timestampValue) {
            $.timestampValue = timestampValue;
            return this;
        }

        /**
         * @param url An optional full URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public DisplayDataResponse build() {
            $.boolValue = Objects.requireNonNull($.boolValue, "expected parameter 'boolValue' to be non-null");
            $.durationValue = Objects.requireNonNull($.durationValue, "expected parameter 'durationValue' to be non-null");
            $.floatValue = Objects.requireNonNull($.floatValue, "expected parameter 'floatValue' to be non-null");
            $.int64Value = Objects.requireNonNull($.int64Value, "expected parameter 'int64Value' to be non-null");
            $.javaClassValue = Objects.requireNonNull($.javaClassValue, "expected parameter 'javaClassValue' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.shortStrValue = Objects.requireNonNull($.shortStrValue, "expected parameter 'shortStrValue' to be non-null");
            $.strValue = Objects.requireNonNull($.strValue, "expected parameter 'strValue' to be non-null");
            $.timestampValue = Objects.requireNonNull($.timestampValue, "expected parameter 'timestampValue' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
