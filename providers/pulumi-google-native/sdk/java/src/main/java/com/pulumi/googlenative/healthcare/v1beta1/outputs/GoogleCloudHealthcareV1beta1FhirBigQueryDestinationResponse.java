// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.healthcare.v1beta1.outputs.SchemaConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse {
    /**
     * @return BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
     * 
     */
    private final String datasetUri;
    /**
     * @return Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    private final Boolean force;
    /**
     * @return The configuration for the exported BigQuery schema.
     * 
     */
    private final SchemaConfigResponse schemaConfig;
    /**
     * @return Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    private final String writeDisposition;

    @CustomType.Constructor
    private GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse(
        @CustomType.Parameter("datasetUri") String datasetUri,
        @CustomType.Parameter("force") Boolean force,
        @CustomType.Parameter("schemaConfig") SchemaConfigResponse schemaConfig,
        @CustomType.Parameter("writeDisposition") String writeDisposition) {
        this.datasetUri = datasetUri;
        this.force = force;
        this.schemaConfig = schemaConfig;
        this.writeDisposition = writeDisposition;
    }

    /**
     * @return BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
     * 
     */
    public String datasetUri() {
        return this.datasetUri;
    }
    /**
     * @return Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
     * 
     */
    public Boolean force() {
        return this.force;
    }
    /**
     * @return The configuration for the exported BigQuery schema.
     * 
     */
    public SchemaConfigResponse schemaConfig() {
        return this.schemaConfig;
    }
    /**
     * @return Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
     * 
     */
    public String writeDisposition() {
        return this.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String datasetUri;
        private Boolean force;
        private SchemaConfigResponse schemaConfig;
        private String writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetUri = defaults.datasetUri;
    	      this.force = defaults.force;
    	      this.schemaConfig = defaults.schemaConfig;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder datasetUri(String datasetUri) {
            this.datasetUri = Objects.requireNonNull(datasetUri);
            return this;
        }
        public Builder force(Boolean force) {
            this.force = Objects.requireNonNull(force);
            return this;
        }
        public Builder schemaConfig(SchemaConfigResponse schemaConfig) {
            this.schemaConfig = Objects.requireNonNull(schemaConfig);
            return this;
        }
        public Builder writeDisposition(String writeDisposition) {
            this.writeDisposition = Objects.requireNonNull(writeDisposition);
            return this;
        }        public GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse build() {
            return new GoogleCloudHealthcareV1beta1FhirBigQueryDestinationResponse(datasetUri, force, schemaConfig, writeDisposition);
        }
    }
}
