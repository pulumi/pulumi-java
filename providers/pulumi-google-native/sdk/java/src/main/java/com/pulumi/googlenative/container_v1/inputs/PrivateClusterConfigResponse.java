// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.PrivateClusterMasterGlobalAccessConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Configuration options for private clusters.
 * 
 */
public final class PrivateClusterConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PrivateClusterConfigResponse Empty = new PrivateClusterConfigResponse();

    /**
     * Whether the master&#39;s internal IP address is used as the cluster endpoint.
     * 
     */
    @Import(name="enablePrivateEndpoint", required=true)
    private Boolean enablePrivateEndpoint;

    public Boolean enablePrivateEndpoint() {
        return this.enablePrivateEndpoint;
    }

    /**
     * Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
     * 
     */
    @Import(name="enablePrivateNodes", required=true)
    private Boolean enablePrivateNodes;

    public Boolean enablePrivateNodes() {
        return this.enablePrivateNodes;
    }

    /**
     * Controls master global access settings.
     * 
     */
    @Import(name="masterGlobalAccessConfig", required=true)
    private PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig;

    public PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig() {
        return this.masterGlobalAccessConfig;
    }

    /**
     * The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
     * 
     */
    @Import(name="masterIpv4CidrBlock", required=true)
    private String masterIpv4CidrBlock;

    public String masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }

    /**
     * The peering name in the customer VPC used by this cluster.
     * 
     */
    @Import(name="peeringName", required=true)
    private String peeringName;

    public String peeringName() {
        return this.peeringName;
    }

    /**
     * The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    @Import(name="privateEndpoint", required=true)
    private String privateEndpoint;

    public String privateEndpoint() {
        return this.privateEndpoint;
    }

    /**
     * The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    @Import(name="publicEndpoint", required=true)
    private String publicEndpoint;

    public String publicEndpoint() {
        return this.publicEndpoint;
    }

    private PrivateClusterConfigResponse() {}

    private PrivateClusterConfigResponse(PrivateClusterConfigResponse $) {
        this.enablePrivateEndpoint = $.enablePrivateEndpoint;
        this.enablePrivateNodes = $.enablePrivateNodes;
        this.masterGlobalAccessConfig = $.masterGlobalAccessConfig;
        this.masterIpv4CidrBlock = $.masterIpv4CidrBlock;
        this.peeringName = $.peeringName;
        this.privateEndpoint = $.privateEndpoint;
        this.publicEndpoint = $.publicEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateClusterConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateClusterConfigResponse $;

        public Builder() {
            $ = new PrivateClusterConfigResponse();
        }

        public Builder(PrivateClusterConfigResponse defaults) {
            $ = new PrivateClusterConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
            $.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }

        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            $.enablePrivateNodes = enablePrivateNodes;
            return this;
        }

        public Builder masterGlobalAccessConfig(PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig) {
            $.masterGlobalAccessConfig = masterGlobalAccessConfig;
            return this;
        }

        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            $.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }

        public Builder peeringName(String peeringName) {
            $.peeringName = peeringName;
            return this;
        }

        public Builder privateEndpoint(String privateEndpoint) {
            $.privateEndpoint = privateEndpoint;
            return this;
        }

        public Builder publicEndpoint(String publicEndpoint) {
            $.publicEndpoint = publicEndpoint;
            return this;
        }

        public PrivateClusterConfigResponse build() {
            $.enablePrivateEndpoint = Objects.requireNonNull($.enablePrivateEndpoint, "expected parameter 'enablePrivateEndpoint' to be non-null");
            $.enablePrivateNodes = Objects.requireNonNull($.enablePrivateNodes, "expected parameter 'enablePrivateNodes' to be non-null");
            $.masterGlobalAccessConfig = Objects.requireNonNull($.masterGlobalAccessConfig, "expected parameter 'masterGlobalAccessConfig' to be non-null");
            $.masterIpv4CidrBlock = Objects.requireNonNull($.masterIpv4CidrBlock, "expected parameter 'masterIpv4CidrBlock' to be non-null");
            $.peeringName = Objects.requireNonNull($.peeringName, "expected parameter 'peeringName' to be non-null");
            $.privateEndpoint = Objects.requireNonNull($.privateEndpoint, "expected parameter 'privateEndpoint' to be non-null");
            $.publicEndpoint = Objects.requireNonNull($.publicEndpoint, "expected parameter 'publicEndpoint' to be non-null");
            return $;
        }
    }

}
