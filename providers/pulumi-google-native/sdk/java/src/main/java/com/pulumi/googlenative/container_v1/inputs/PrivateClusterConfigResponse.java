// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.PrivateClusterMasterGlobalAccessConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Configuration options for private clusters.
 * 
 */
public final class PrivateClusterConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final PrivateClusterConfigResponse Empty = new PrivateClusterConfigResponse();

    /**
     * Whether the master&#39;s internal IP address is used as the cluster endpoint.
     * 
     */
    @Import(name="enablePrivateEndpoint", required=true)
    private Boolean enablePrivateEndpoint;

    /**
     * @return Whether the master&#39;s internal IP address is used as the cluster endpoint.
     * 
     */
    public Boolean enablePrivateEndpoint() {
        return this.enablePrivateEndpoint;
    }

    /**
     * Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
     * 
     */
    @Import(name="enablePrivateNodes", required=true)
    private Boolean enablePrivateNodes;

    /**
     * @return Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
     * 
     */
    public Boolean enablePrivateNodes() {
        return this.enablePrivateNodes;
    }

    /**
     * Controls master global access settings.
     * 
     */
    @Import(name="masterGlobalAccessConfig", required=true)
    private PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig;

    /**
     * @return Controls master global access settings.
     * 
     */
    public PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig() {
        return this.masterGlobalAccessConfig;
    }

    /**
     * The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
     * 
     */
    @Import(name="masterIpv4CidrBlock", required=true)
    private String masterIpv4CidrBlock;

    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
     * 
     */
    public String masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }

    /**
     * The peering name in the customer VPC used by this cluster.
     * 
     */
    @Import(name="peeringName", required=true)
    private String peeringName;

    /**
     * @return The peering name in the customer VPC used by this cluster.
     * 
     */
    public String peeringName() {
        return this.peeringName;
    }

    /**
     * The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    @Import(name="privateEndpoint", required=true)
    private String privateEndpoint;

    /**
     * @return The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    public String privateEndpoint() {
        return this.privateEndpoint;
    }

    /**
     * The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    @Import(name="publicEndpoint", required=true)
    private String publicEndpoint;

    /**
     * @return The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    public String publicEndpoint() {
        return this.publicEndpoint;
    }

    private PrivateClusterConfigResponse() {}

    private PrivateClusterConfigResponse(PrivateClusterConfigResponse $) {
        this.enablePrivateEndpoint = $.enablePrivateEndpoint;
        this.enablePrivateNodes = $.enablePrivateNodes;
        this.masterGlobalAccessConfig = $.masterGlobalAccessConfig;
        this.masterIpv4CidrBlock = $.masterIpv4CidrBlock;
        this.peeringName = $.peeringName;
        this.privateEndpoint = $.privateEndpoint;
        this.publicEndpoint = $.publicEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateClusterConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateClusterConfigResponse $;

        public Builder() {
            $ = new PrivateClusterConfigResponse();
        }

        public Builder(PrivateClusterConfigResponse defaults) {
            $ = new PrivateClusterConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param enablePrivateEndpoint Whether the master&#39;s internal IP address is used as the cluster endpoint.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
            $.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }

        /**
         * @param enablePrivateNodes Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            $.enablePrivateNodes = enablePrivateNodes;
            return this;
        }

        /**
         * @param masterGlobalAccessConfig Controls master global access settings.
         * 
         * @return builder
         * 
         */
        public Builder masterGlobalAccessConfig(PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig) {
            $.masterGlobalAccessConfig = masterGlobalAccessConfig;
            return this;
        }

        /**
         * @param masterIpv4CidrBlock The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
         * 
         * @return builder
         * 
         */
        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            $.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }

        /**
         * @param peeringName The peering name in the customer VPC used by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(String peeringName) {
            $.peeringName = peeringName;
            return this;
        }

        /**
         * @param privateEndpoint The internal IP address of this cluster&#39;s master endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateEndpoint(String privateEndpoint) {
            $.privateEndpoint = privateEndpoint;
            return this;
        }

        /**
         * @param publicEndpoint The external IP address of this cluster&#39;s master endpoint.
         * 
         * @return builder
         * 
         */
        public Builder publicEndpoint(String publicEndpoint) {
            $.publicEndpoint = publicEndpoint;
            return this;
        }

        public PrivateClusterConfigResponse build() {
            $.enablePrivateEndpoint = Objects.requireNonNull($.enablePrivateEndpoint, "expected parameter 'enablePrivateEndpoint' to be non-null");
            $.enablePrivateNodes = Objects.requireNonNull($.enablePrivateNodes, "expected parameter 'enablePrivateNodes' to be non-null");
            $.masterGlobalAccessConfig = Objects.requireNonNull($.masterGlobalAccessConfig, "expected parameter 'masterGlobalAccessConfig' to be non-null");
            $.masterIpv4CidrBlock = Objects.requireNonNull($.masterIpv4CidrBlock, "expected parameter 'masterIpv4CidrBlock' to be non-null");
            $.peeringName = Objects.requireNonNull($.peeringName, "expected parameter 'peeringName' to be non-null");
            $.privateEndpoint = Objects.requireNonNull($.privateEndpoint, "expected parameter 'privateEndpoint' to be non-null");
            $.publicEndpoint = Objects.requireNonNull($.publicEndpoint, "expected parameter 'publicEndpoint' to be non-null");
            return $;
        }
    }

}
