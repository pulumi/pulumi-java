// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.logging.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetFolderBucketViewArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFolderBucketViewArgs Empty = new GetFolderBucketViewArgs();

    @Import(name="bucketId", required=true)
    private Output<String> bucketId;

    public Output<String> bucketId() {
        return this.bucketId;
    }

    @Import(name="folderId", required=true)
    private Output<String> folderId;

    public Output<String> folderId() {
        return this.folderId;
    }

    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    @Import(name="viewId", required=true)
    private Output<String> viewId;

    public Output<String> viewId() {
        return this.viewId;
    }

    private GetFolderBucketViewArgs() {}

    private GetFolderBucketViewArgs(GetFolderBucketViewArgs $) {
        this.bucketId = $.bucketId;
        this.folderId = $.folderId;
        this.location = $.location;
        this.viewId = $.viewId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFolderBucketViewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFolderBucketViewArgs $;

        public Builder() {
            $ = new GetFolderBucketViewArgs();
        }

        public Builder(GetFolderBucketViewArgs defaults) {
            $ = new GetFolderBucketViewArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucketId(Output<String> bucketId) {
            $.bucketId = bucketId;
            return this;
        }

        public Builder bucketId(String bucketId) {
            return bucketId(Output.of(bucketId));
        }

        public Builder folderId(Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder viewId(Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        public GetFolderBucketViewArgs build() {
            $.bucketId = Objects.requireNonNull($.bucketId, "expected parameter 'bucketId' to be non-null");
            $.folderId = Objects.requireNonNull($.folderId, "expected parameter 'folderId' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.viewId = Objects.requireNonNull($.viewId, "expected parameter 'viewId' to be non-null");
            return $;
        }
    }

}
