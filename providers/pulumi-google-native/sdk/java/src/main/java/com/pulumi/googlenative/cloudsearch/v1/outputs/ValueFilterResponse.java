// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudsearch.v1.outputs.ValueResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ValueFilterResponse {
    /**
     * @return The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     * 
     */
    private final String operatorName;
    /**
     * @return The value to be compared with.
     * 
     */
    private final ValueResponse value;

    @CustomType.Constructor
    private ValueFilterResponse(
        @CustomType.Parameter("operatorName") String operatorName,
        @CustomType.Parameter("value") ValueResponse value) {
        this.operatorName = operatorName;
        this.value = value;
    }

    /**
     * @return The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     * 
     */
    public String operatorName() {
        return this.operatorName;
    }
    /**
     * @return The value to be compared with.
     * 
     */
    public ValueResponse value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ValueFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String operatorName;
        private ValueResponse value;

        public Builder() {
    	      // Empty
        }

        public Builder(ValueFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operatorName = defaults.operatorName;
    	      this.value = defaults.value;
        }

        public Builder operatorName(String operatorName) {
            this.operatorName = Objects.requireNonNull(operatorName);
            return this;
        }
        public Builder value(ValueResponse value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public ValueFilterResponse build() {
            return new ValueFilterResponse(operatorName, value);
        }
    }
}
