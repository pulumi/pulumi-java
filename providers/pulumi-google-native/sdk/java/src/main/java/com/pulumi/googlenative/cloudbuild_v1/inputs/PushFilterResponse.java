// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Push contains filter properties for matching GitHub git pushes.
 * 
 */
public final class PushFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final PushFilterResponse Empty = new PushFilterResponse();

    /**
     * Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="branch", required=true)
    private String branch;

    /**
     * @return Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    public String branch() {
        return this.branch;
    }

    /**
     * When true, only trigger a build if the revision regex does NOT match the git_ref regex.
     * 
     */
    @Import(name="invertRegex", required=true)
    private Boolean invertRegex;

    /**
     * @return When true, only trigger a build if the revision regex does NOT match the git_ref regex.
     * 
     */
    public Boolean invertRegex() {
        return this.invertRegex;
    }

    /**
     * Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="tag", required=true)
    private String tag;

    /**
     * @return Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    public String tag() {
        return this.tag;
    }

    private PushFilterResponse() {}

    private PushFilterResponse(PushFilterResponse $) {
        this.branch = $.branch;
        this.invertRegex = $.invertRegex;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushFilterResponse $;

        public Builder() {
            $ = new PushFilterResponse();
        }

        public Builder(PushFilterResponse defaults) {
            $ = new PushFilterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param invertRegex When true, only trigger a build if the revision regex does NOT match the git_ref regex.
         * 
         * @return builder
         * 
         */
        public Builder invertRegex(Boolean invertRegex) {
            $.invertRegex = invertRegex;
            return this;
        }

        /**
         * @param tag Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            $.tag = tag;
            return this;
        }

        public PushFilterResponse build() {
            $.branch = Objects.requireNonNull($.branch, "expected parameter 'branch' to be non-null");
            $.invertRegex = Objects.requireNonNull($.invertRegex, "expected parameter 'invertRegex' to be non-null");
            $.tag = Objects.requireNonNull($.tag, "expected parameter 'tag' to be non-null");
            return $;
        }
    }

}
