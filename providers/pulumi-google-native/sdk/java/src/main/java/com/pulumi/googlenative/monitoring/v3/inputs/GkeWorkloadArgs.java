// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
 * 
 */
public final class GkeWorkloadArgs extends com.pulumi.resources.ResourceArgs {

    public static final GkeWorkloadArgs Empty = new GkeWorkloadArgs();

    /**
     * The name of the parent cluster.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return The name of the parent cluster.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The location of the parent cluster. This may be a zone or region.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the parent cluster. This may be a zone or region.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the parent namespace.
     * 
     */
    @Import(name="namespaceName")
    private @Nullable Output<String> namespaceName;

    /**
     * @return The name of the parent namespace.
     * 
     */
    public Optional<Output<String>> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }

    /**
     * The name of this workload.
     * 
     */
    @Import(name="topLevelControllerName")
    private @Nullable Output<String> topLevelControllerName;

    /**
     * @return The name of this workload.
     * 
     */
    public Optional<Output<String>> topLevelControllerName() {
        return Optional.ofNullable(this.topLevelControllerName);
    }

    /**
     * The type of this workload (for example, &#34;Deployment&#34; or &#34;DaemonSet&#34;)
     * 
     */
    @Import(name="topLevelControllerType")
    private @Nullable Output<String> topLevelControllerType;

    /**
     * @return The type of this workload (for example, &#34;Deployment&#34; or &#34;DaemonSet&#34;)
     * 
     */
    public Optional<Output<String>> topLevelControllerType() {
        return Optional.ofNullable(this.topLevelControllerType);
    }

    private GkeWorkloadArgs() {}

    private GkeWorkloadArgs(GkeWorkloadArgs $) {
        this.clusterName = $.clusterName;
        this.location = $.location;
        this.namespaceName = $.namespaceName;
        this.topLevelControllerName = $.topLevelControllerName;
        this.topLevelControllerType = $.topLevelControllerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GkeWorkloadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GkeWorkloadArgs $;

        public Builder() {
            $ = new GkeWorkloadArgs();
        }

        public Builder(GkeWorkloadArgs defaults) {
            $ = new GkeWorkloadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName The name of the parent cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the parent cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param location The location of the parent cluster. This may be a zone or region.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the parent cluster. This may be a zone or region.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param namespaceName The name of the parent namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The name of the parent namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param topLevelControllerName The name of this workload.
         * 
         * @return builder
         * 
         */
        public Builder topLevelControllerName(@Nullable Output<String> topLevelControllerName) {
            $.topLevelControllerName = topLevelControllerName;
            return this;
        }

        /**
         * @param topLevelControllerName The name of this workload.
         * 
         * @return builder
         * 
         */
        public Builder topLevelControllerName(String topLevelControllerName) {
            return topLevelControllerName(Output.of(topLevelControllerName));
        }

        /**
         * @param topLevelControllerType The type of this workload (for example, &#34;Deployment&#34; or &#34;DaemonSet&#34;)
         * 
         * @return builder
         * 
         */
        public Builder topLevelControllerType(@Nullable Output<String> topLevelControllerType) {
            $.topLevelControllerType = topLevelControllerType;
            return this;
        }

        /**
         * @param topLevelControllerType The type of this workload (for example, &#34;Deployment&#34; or &#34;DaemonSet&#34;)
         * 
         * @return builder
         * 
         */
        public Builder topLevelControllerType(String topLevelControllerType) {
            return topLevelControllerType(Output.of(topLevelControllerType));
        }

        public GkeWorkloadArgs build() {
            return $;
        }
    }

}
