// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkconnectivity.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * RouterAppliance represents a Router appliance which is specified by a VM URI and a NIC address.
 * 
 */
public final class RouterApplianceInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterApplianceInstanceArgs Empty = new RouterApplianceInstanceArgs();

    /**
     * The IP address of the network interface to use for peering.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address of the network interface to use for peering.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    @Import(name="networkInterface")
    private @Nullable Output<String> networkInterface;

    public Optional<Output<String>> networkInterface() {
        return Optional.ofNullable(this.networkInterface);
    }

    /**
     * The URI of the virtual machine resource
     * 
     */
    @Import(name="virtualMachine")
    private @Nullable Output<String> virtualMachine;

    /**
     * @return The URI of the virtual machine resource
     * 
     */
    public Optional<Output<String>> virtualMachine() {
        return Optional.ofNullable(this.virtualMachine);
    }

    private RouterApplianceInstanceArgs() {}

    private RouterApplianceInstanceArgs(RouterApplianceInstanceArgs $) {
        this.ipAddress = $.ipAddress;
        this.networkInterface = $.networkInterface;
        this.virtualMachine = $.virtualMachine;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterApplianceInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterApplianceInstanceArgs $;

        public Builder() {
            $ = new RouterApplianceInstanceArgs();
        }

        public Builder(RouterApplianceInstanceArgs defaults) {
            $ = new RouterApplianceInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress The IP address of the network interface to use for peering.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address of the network interface to use for peering.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public Builder networkInterface(@Nullable Output<String> networkInterface) {
            $.networkInterface = networkInterface;
            return this;
        }

        public Builder networkInterface(String networkInterface) {
            return networkInterface(Output.of(networkInterface));
        }

        /**
         * @param virtualMachine The URI of the virtual machine resource
         * 
         * @return builder
         * 
         */
        public Builder virtualMachine(@Nullable Output<String> virtualMachine) {
            $.virtualMachine = virtualMachine;
            return this;
        }

        /**
         * @param virtualMachine The URI of the virtual machine resource
         * 
         * @return builder
         * 
         */
        public Builder virtualMachine(String virtualMachine) {
            return virtualMachine(Output.of(virtualMachine));
        }

        public RouterApplianceInstanceArgs build() {
            return $;
        }
    }

}
