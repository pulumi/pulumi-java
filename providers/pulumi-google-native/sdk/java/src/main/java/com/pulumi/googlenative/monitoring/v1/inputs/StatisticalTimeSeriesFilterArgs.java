// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.enums.StatisticalTimeSeriesFilterRankingMethod;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A filter that ranks streams based on their statistical relation to other streams in a request. Note: This field is deprecated and completely ignored by the API.
 * 
 */
public final class StatisticalTimeSeriesFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final StatisticalTimeSeriesFilterArgs Empty = new StatisticalTimeSeriesFilterArgs();

    /**
     * How many time series to output.
     * 
     */
    @Import(name="numTimeSeries")
    private @Nullable Output<Integer> numTimeSeries;

    /**
     * @return How many time series to output.
     * 
     */
    public Optional<Output<Integer>> numTimeSeries() {
        return Optional.ofNullable(this.numTimeSeries);
    }

    /**
     * rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.
     * 
     */
    @Import(name="rankingMethod")
    private @Nullable Output<StatisticalTimeSeriesFilterRankingMethod> rankingMethod;

    /**
     * @return rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.
     * 
     */
    public Optional<Output<StatisticalTimeSeriesFilterRankingMethod>> rankingMethod() {
        return Optional.ofNullable(this.rankingMethod);
    }

    private StatisticalTimeSeriesFilterArgs() {}

    private StatisticalTimeSeriesFilterArgs(StatisticalTimeSeriesFilterArgs $) {
        this.numTimeSeries = $.numTimeSeries;
        this.rankingMethod = $.rankingMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StatisticalTimeSeriesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StatisticalTimeSeriesFilterArgs $;

        public Builder() {
            $ = new StatisticalTimeSeriesFilterArgs();
        }

        public Builder(StatisticalTimeSeriesFilterArgs defaults) {
            $ = new StatisticalTimeSeriesFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param numTimeSeries How many time series to output.
         * 
         * @return builder
         * 
         */
        public Builder numTimeSeries(@Nullable Output<Integer> numTimeSeries) {
            $.numTimeSeries = numTimeSeries;
            return this;
        }

        /**
         * @param numTimeSeries How many time series to output.
         * 
         * @return builder
         * 
         */
        public Builder numTimeSeries(Integer numTimeSeries) {
            return numTimeSeries(Output.of(numTimeSeries));
        }

        /**
         * @param rankingMethod rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.
         * 
         * @return builder
         * 
         */
        public Builder rankingMethod(@Nullable Output<StatisticalTimeSeriesFilterRankingMethod> rankingMethod) {
            $.rankingMethod = rankingMethod;
            return this;
        }

        /**
         * @param rankingMethod rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.
         * 
         * @return builder
         * 
         */
        public Builder rankingMethod(StatisticalTimeSeriesFilterRankingMethod rankingMethod) {
            return rankingMethod(Output.of(rankingMethod));
        }

        public StatisticalTimeSeriesFilterArgs build() {
            return $;
        }
    }

}
