// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudscheduler_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
 * 
 */
public final class RetryConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final RetryConfigResponse Empty = new RetryConfigResponse();

    /**
     * The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
     * 
     */
    @Import(name="maxBackoffDuration", required=true)
    private String maxBackoffDuration;

    /**
     * @return The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
     * 
     */
    public String maxBackoffDuration() {
        return this.maxBackoffDuration;
    }

    /**
     * The time between retries will double `max_doublings` times. A job&#39;s retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
     * 
     */
    @Import(name="maxDoublings", required=true)
    private Integer maxDoublings;

    /**
     * @return The time between retries will double `max_doublings` times. A job&#39;s retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
     * 
     */
    public Integer maxDoublings() {
        return this.maxDoublings;
    }

    /**
     * The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
     * 
     */
    @Import(name="maxRetryDuration", required=true)
    private String maxRetryDuration;

    /**
     * @return The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
     * 
     */
    public String maxRetryDuration() {
        return this.maxRetryDuration;
    }

    /**
     * The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
     * 
     */
    @Import(name="minBackoffDuration", required=true)
    private String minBackoffDuration;

    /**
     * @return The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
     * 
     */
    public String minBackoffDuration() {
        return this.minBackoffDuration;
    }

    /**
     * The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
     * 
     */
    @Import(name="retryCount", required=true)
    private Integer retryCount;

    /**
     * @return The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
     * 
     */
    public Integer retryCount() {
        return this.retryCount;
    }

    private RetryConfigResponse() {}

    private RetryConfigResponse(RetryConfigResponse $) {
        this.maxBackoffDuration = $.maxBackoffDuration;
        this.maxDoublings = $.maxDoublings;
        this.maxRetryDuration = $.maxRetryDuration;
        this.minBackoffDuration = $.minBackoffDuration;
        this.retryCount = $.retryCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetryConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetryConfigResponse $;

        public Builder() {
            $ = new RetryConfigResponse();
        }

        public Builder(RetryConfigResponse defaults) {
            $ = new RetryConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxBackoffDuration The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
         * 
         * @return builder
         * 
         */
        public Builder maxBackoffDuration(String maxBackoffDuration) {
            $.maxBackoffDuration = maxBackoffDuration;
            return this;
        }

        /**
         * @param maxDoublings The time between retries will double `max_doublings` times. A job&#39;s retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
         * 
         * @return builder
         * 
         */
        public Builder maxDoublings(Integer maxDoublings) {
            $.maxDoublings = maxDoublings;
            return this;
        }

        /**
         * @param maxRetryDuration The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder maxRetryDuration(String maxRetryDuration) {
            $.maxRetryDuration = maxRetryDuration;
            return this;
        }

        /**
         * @param minBackoffDuration The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
         * 
         * @return builder
         * 
         */
        public Builder minBackoffDuration(String minBackoffDuration) {
            $.minBackoffDuration = minBackoffDuration;
            return this;
        }

        /**
         * @param retryCount The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder retryCount(Integer retryCount) {
            $.retryCount = retryCount;
            return this;
        }

        public RetryConfigResponse build() {
            $.maxBackoffDuration = Objects.requireNonNull($.maxBackoffDuration, "expected parameter 'maxBackoffDuration' to be non-null");
            $.maxDoublings = Objects.requireNonNull($.maxDoublings, "expected parameter 'maxDoublings' to be non-null");
            $.maxRetryDuration = Objects.requireNonNull($.maxRetryDuration, "expected parameter 'maxRetryDuration' to be non-null");
            $.minBackoffDuration = Objects.requireNonNull($.minBackoffDuration, "expected parameter 'minBackoffDuration' to be non-null");
            $.retryCount = Objects.requireNonNull($.retryCount, "expected parameter 'retryCount' to be non-null");
            return $;
        }
    }

}
