// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.enums.GitRepoSourceRepoType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * GitRepoSource describes a repo and ref of a code repository.
 * 
 */
public final class GitRepoSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitRepoSourceArgs Empty = new GitRepoSourceArgs();

    /**
     * The branch or tag to use. Must start with &#34;refs/&#34; (required).
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * See RepoType below.
     * 
     */
    @Import(name="repoType")
    private @Nullable Output<GitRepoSourceRepoType> repoType;

    public Optional<Output<GitRepoSourceRepoType>> repoType() {
        return Optional.ofNullable(this.repoType);
    }

    /**
     * The URI of the repo (required).
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private GitRepoSourceArgs() {}

    private GitRepoSourceArgs(GitRepoSourceArgs $) {
        this.ref = $.ref;
        this.repoType = $.repoType;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepoSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepoSourceArgs $;

        public Builder() {
            $ = new GitRepoSourceArgs();
        }

        public Builder(GitRepoSourceArgs defaults) {
            $ = new GitRepoSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        public Builder repoType(@Nullable Output<GitRepoSourceRepoType> repoType) {
            $.repoType = repoType;
            return this;
        }

        public Builder repoType(GitRepoSourceRepoType repoType) {
            return repoType(Output.of(repoType));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public GitRepoSourceArgs build() {
            return $;
        }
    }

}
