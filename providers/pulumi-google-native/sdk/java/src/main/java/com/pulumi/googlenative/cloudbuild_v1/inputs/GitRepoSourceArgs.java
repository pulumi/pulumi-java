// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.cloudbuild_v1.enums.GitRepoSourceRepoType;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * GitRepoSource describes a repo and ref of a code repository.
 * 
 */
public final class GitRepoSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitRepoSourceArgs Empty = new GitRepoSourceArgs();

    /**
     * The branch or tag to use. Must start with &#34;refs/&#34; (required).
     * 
     */
    @Import(name="ref")
      private final @Nullable Output<String> ref;

    public Output<String> ref() {
        return this.ref == null ? Codegen.empty() : this.ref;
    }

    /**
     * See RepoType below.
     * 
     */
    @Import(name="repoType")
      private final @Nullable Output<GitRepoSourceRepoType> repoType;

    public Output<GitRepoSourceRepoType> repoType() {
        return this.repoType == null ? Codegen.empty() : this.repoType;
    }

    /**
     * The URI of the repo (required).
     * 
     */
    @Import(name="uri")
      private final @Nullable Output<String> uri;

    public Output<String> uri() {
        return this.uri == null ? Codegen.empty() : this.uri;
    }

    public GitRepoSourceArgs(
        @Nullable Output<String> ref,
        @Nullable Output<GitRepoSourceRepoType> repoType,
        @Nullable Output<String> uri) {
        this.ref = ref;
        this.repoType = repoType;
        this.uri = uri;
    }

    private GitRepoSourceArgs() {
        this.ref = Codegen.empty();
        this.repoType = Codegen.empty();
        this.uri = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitRepoSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> ref;
        private @Nullable Output<GitRepoSourceRepoType> repoType;
        private @Nullable Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(GitRepoSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ref = defaults.ref;
    	      this.repoType = defaults.repoType;
    	      this.uri = defaults.uri;
        }

        public Builder ref(@Nullable Output<String> ref) {
            this.ref = ref;
            return this;
        }
        public Builder ref(@Nullable String ref) {
            this.ref = Codegen.ofNullable(ref);
            return this;
        }
        public Builder repoType(@Nullable Output<GitRepoSourceRepoType> repoType) {
            this.repoType = repoType;
            return this;
        }
        public Builder repoType(@Nullable GitRepoSourceRepoType repoType) {
            this.repoType = Codegen.ofNullable(repoType);
            return this;
        }
        public Builder uri(@Nullable Output<String> uri) {
            this.uri = uri;
            return this;
        }
        public Builder uri(@Nullable String uri) {
            this.uri = Codegen.ofNullable(uri);
            return this;
        }        public GitRepoSourceArgs build() {
            return new GitRepoSourceArgs(ref, repoType, uri);
        }
    }
}
