// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.testing_v1.inputs.AppBundleResponse;
import com.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import com.pulumi.googlenative.testing_v1.inputs.ShardingOptionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestResponse extends com.pulumi.resources.InvokeArgs {

    public static final AndroidInstrumentationTestResponse Empty = new AndroidInstrumentationTestResponse();

    /**
     * The APK for the application under test.
     * 
     */
    @Import(name="appApk", required=true)
    private FileReferenceResponse appApk;

    /**
     * @return The APK for the application under test.
     * 
     */
    public FileReferenceResponse appApk() {
        return this.appApk;
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @Import(name="appBundle", required=true)
    private AppBundleResponse appBundle;

    /**
     * @return A multi-apk app bundle for the application under test.
     * 
     */
    public AppBundleResponse appBundle() {
        return this.appBundle;
    }

    /**
     * The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="appPackageId", required=true)
    private String appPackageId;

    /**
     * @return The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    public String appPackageId() {
        return this.appPackageId;
    }

    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    @Import(name="orchestratorOption", required=true)
    private String orchestratorOption;

    /**
     * @return The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    public String orchestratorOption() {
        return this.orchestratorOption;
    }

    /**
     * The option to run tests in multiple shards in parallel.
     * 
     */
    @Import(name="shardingOption", required=true)
    private ShardingOptionResponse shardingOption;

    /**
     * @return The option to run tests in multiple shards in parallel.
     * 
     */
    public ShardingOptionResponse shardingOption() {
        return this.shardingOption;
    }

    /**
     * The APK containing the test code to be executed.
     * 
     */
    @Import(name="testApk", required=true)
    private FileReferenceResponse testApk;

    /**
     * @return The APK containing the test code to be executed.
     * 
     */
    public FileReferenceResponse testApk() {
        return this.testApk;
    }

    /**
     * The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="testPackageId", required=true)
    private String testPackageId;

    /**
     * @return The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    public String testPackageId() {
        return this.testPackageId;
    }

    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    @Import(name="testRunnerClass", required=true)
    private String testRunnerClass;

    /**
     * @return The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
     * 
     */
    public String testRunnerClass() {
        return this.testRunnerClass;
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
     * 
     */
    @Import(name="testTargets", required=true)
    private List<String> testTargets;

    /**
     * @return Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
     * 
     */
    public List<String> testTargets() {
        return this.testTargets;
    }

    private AndroidInstrumentationTestResponse() {}

    private AndroidInstrumentationTestResponse(AndroidInstrumentationTestResponse $) {
        this.appApk = $.appApk;
        this.appBundle = $.appBundle;
        this.appPackageId = $.appPackageId;
        this.orchestratorOption = $.orchestratorOption;
        this.shardingOption = $.shardingOption;
        this.testApk = $.testApk;
        this.testPackageId = $.testPackageId;
        this.testRunnerClass = $.testRunnerClass;
        this.testTargets = $.testTargets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AndroidInstrumentationTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AndroidInstrumentationTestResponse $;

        public Builder() {
            $ = new AndroidInstrumentationTestResponse();
        }

        public Builder(AndroidInstrumentationTestResponse defaults) {
            $ = new AndroidInstrumentationTestResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param appApk The APK for the application under test.
         * 
         * @return builder
         * 
         */
        public Builder appApk(FileReferenceResponse appApk) {
            $.appApk = appApk;
            return this;
        }

        /**
         * @param appBundle A multi-apk app bundle for the application under test.
         * 
         * @return builder
         * 
         */
        public Builder appBundle(AppBundleResponse appBundle) {
            $.appBundle = appBundle;
            return this;
        }

        /**
         * @param appPackageId The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder appPackageId(String appPackageId) {
            $.appPackageId = appPackageId;
            return this;
        }

        /**
         * @param orchestratorOption The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder orchestratorOption(String orchestratorOption) {
            $.orchestratorOption = orchestratorOption;
            return this;
        }

        /**
         * @param shardingOption The option to run tests in multiple shards in parallel.
         * 
         * @return builder
         * 
         */
        public Builder shardingOption(ShardingOptionResponse shardingOption) {
            $.shardingOption = shardingOption;
            return this;
        }

        /**
         * @param testApk The APK containing the test code to be executed.
         * 
         * @return builder
         * 
         */
        public Builder testApk(FileReferenceResponse testApk) {
            $.testApk = testApk;
            return this;
        }

        /**
         * @param testPackageId The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder testPackageId(String testPackageId) {
            $.testPackageId = testPackageId;
            return this;
        }

        /**
         * @param testRunnerClass The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
         * 
         * @return builder
         * 
         */
        public Builder testRunnerClass(String testRunnerClass) {
            $.testRunnerClass = testRunnerClass;
            return this;
        }

        /**
         * @param testTargets Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
         * 
         * @return builder
         * 
         */
        public Builder testTargets(List<String> testTargets) {
            $.testTargets = testTargets;
            return this;
        }

        /**
         * @param testTargets Each target must be fully qualified with the package name or class name, in one of these formats: - &#34;package package_name&#34; - &#34;class package_name.class_name&#34; - &#34;class package_name.class_name#method_name&#34; If empty, all targets in the module will be run.
         * 
         * @return builder
         * 
         */
        public Builder testTargets(String... testTargets) {
            return testTargets(List.of(testTargets));
        }

        public AndroidInstrumentationTestResponse build() {
            $.appApk = Objects.requireNonNull($.appApk, "expected parameter 'appApk' to be non-null");
            $.appBundle = Objects.requireNonNull($.appBundle, "expected parameter 'appBundle' to be non-null");
            $.appPackageId = Objects.requireNonNull($.appPackageId, "expected parameter 'appPackageId' to be non-null");
            $.orchestratorOption = Objects.requireNonNull($.orchestratorOption, "expected parameter 'orchestratorOption' to be non-null");
            $.shardingOption = Objects.requireNonNull($.shardingOption, "expected parameter 'shardingOption' to be non-null");
            $.testApk = Objects.requireNonNull($.testApk, "expected parameter 'testApk' to be non-null");
            $.testPackageId = Objects.requireNonNull($.testPackageId, "expected parameter 'testPackageId' to be non-null");
            $.testRunnerClass = Objects.requireNonNull($.testRunnerClass, "expected parameter 'testRunnerClass' to be non-null");
            $.testTargets = Objects.requireNonNull($.testTargets, "expected parameter 'testTargets' to be non-null");
            return $;
        }
    }

}
