// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1beta1.inputs.BigQueryDestinationResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.ConsumptionMeteringConfigResponse;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Configuration for exporting cluster resource usages.
 * 
 */
public final class ResourceUsageExportConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResourceUsageExportConfigResponse Empty = new ResourceUsageExportConfigResponse();

    /**
     * Configuration to use BigQuery as usage export destination.
     * 
     */
    @Import(name="bigqueryDestination", required=true)
    private BigQueryDestinationResponse bigqueryDestination;

    /**
     * @return Configuration to use BigQuery as usage export destination.
     * 
     */
    public BigQueryDestinationResponse bigqueryDestination() {
        return this.bigqueryDestination;
    }

    /**
     * Configuration to enable resource consumption metering.
     * 
     */
    @Import(name="consumptionMeteringConfig", required=true)
    private ConsumptionMeteringConfigResponse consumptionMeteringConfig;

    /**
     * @return Configuration to enable resource consumption metering.
     * 
     */
    public ConsumptionMeteringConfigResponse consumptionMeteringConfig() {
        return this.consumptionMeteringConfig;
    }

    /**
     * Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
     * 
     */
    @Import(name="enableNetworkEgressMetering", required=true)
    private Boolean enableNetworkEgressMetering;

    /**
     * @return Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
     * 
     */
    public Boolean enableNetworkEgressMetering() {
        return this.enableNetworkEgressMetering;
    }

    private ResourceUsageExportConfigResponse() {}

    private ResourceUsageExportConfigResponse(ResourceUsageExportConfigResponse $) {
        this.bigqueryDestination = $.bigqueryDestination;
        this.consumptionMeteringConfig = $.consumptionMeteringConfig;
        this.enableNetworkEgressMetering = $.enableNetworkEgressMetering;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceUsageExportConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceUsageExportConfigResponse $;

        public Builder() {
            $ = new ResourceUsageExportConfigResponse();
        }

        public Builder(ResourceUsageExportConfigResponse defaults) {
            $ = new ResourceUsageExportConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bigqueryDestination Configuration to use BigQuery as usage export destination.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryDestination(BigQueryDestinationResponse bigqueryDestination) {
            $.bigqueryDestination = bigqueryDestination;
            return this;
        }

        /**
         * @param consumptionMeteringConfig Configuration to enable resource consumption metering.
         * 
         * @return builder
         * 
         */
        public Builder consumptionMeteringConfig(ConsumptionMeteringConfigResponse consumptionMeteringConfig) {
            $.consumptionMeteringConfig = consumptionMeteringConfig;
            return this;
        }

        /**
         * @param enableNetworkEgressMetering Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
         * 
         * @return builder
         * 
         */
        public Builder enableNetworkEgressMetering(Boolean enableNetworkEgressMetering) {
            $.enableNetworkEgressMetering = enableNetworkEgressMetering;
            return this;
        }

        public ResourceUsageExportConfigResponse build() {
            $.bigqueryDestination = Objects.requireNonNull($.bigqueryDestination, "expected parameter 'bigqueryDestination' to be non-null");
            $.consumptionMeteringConfig = Objects.requireNonNull($.consumptionMeteringConfig, "expected parameter 'consumptionMeteringConfig' to be non-null");
            $.enableNetworkEgressMetering = Objects.requireNonNull($.enableNetworkEgressMetering, "expected parameter 'enableNetworkEgressMetering' to be non-null");
            return $;
        }
    }

}
