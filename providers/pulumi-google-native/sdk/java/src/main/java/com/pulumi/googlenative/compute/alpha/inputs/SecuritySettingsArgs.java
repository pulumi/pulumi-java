// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.inputs.AuthenticationPolicyArgs;
import com.pulumi.googlenative.compute.alpha.inputs.AuthorizationConfigArgs;
import com.pulumi.googlenative.compute.alpha.inputs.ClientTlsSettingsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The authentication and authorization settings for a BackendService.
 * 
 */
public final class SecuritySettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecuritySettingsArgs Empty = new SecuritySettingsArgs();

    /**
     * [Deprecated] Use clientTlsPolicy instead.
     * 
     * @deprecated
     * [Deprecated] Use clientTlsPolicy instead.
     * 
     */
    @Deprecated /* [Deprecated] Use clientTlsPolicy instead. */
    @Import(name="authentication")
    private @Nullable Output<String> authentication;

    /**
     * @return [Deprecated] Use clientTlsPolicy instead.
     * 
     * @deprecated
     * [Deprecated] Use clientTlsPolicy instead.
     * 
     */
    @Deprecated /* [Deprecated] Use clientTlsPolicy instead. */
    public Optional<Output<String>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
     * 
     * @deprecated
     * [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
     * 
     */
    @Deprecated /* [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal. */
    @Import(name="authenticationPolicy")
    private @Nullable Output<AuthenticationPolicyArgs> authenticationPolicy;

    /**
     * @return [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
     * 
     * @deprecated
     * [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
     * 
     */
    @Deprecated /* [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal. */
    public Optional<Output<AuthenticationPolicyArgs>> authenticationPolicy() {
        return Optional.ofNullable(this.authenticationPolicy);
    }

    /**
     * [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
     * 
     * @deprecated
     * [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
     * 
     */
    @Deprecated /* [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config. */
    @Import(name="authorizationConfig")
    private @Nullable Output<AuthorizationConfigArgs> authorizationConfig;

    /**
     * @return [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
     * 
     * @deprecated
     * [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
     * 
     */
    @Deprecated /* [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config. */
    public Optional<Output<AuthorizationConfigArgs>> authorizationConfig() {
        return Optional.ofNullable(this.authorizationConfig);
    }

    /**
     * Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service&#39;s backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
     * 
     */
    @Import(name="clientTlsPolicy")
    private @Nullable Output<String> clientTlsPolicy;

    /**
     * @return Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service&#39;s backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
     * 
     */
    public Optional<Output<String>> clientTlsPolicy() {
        return Optional.ofNullable(this.clientTlsPolicy);
    }

    /**
     * [Deprecated] TLS Settings for the backend service.
     * 
     * @deprecated
     * [Deprecated] TLS Settings for the backend service.
     * 
     */
    @Deprecated /* [Deprecated] TLS Settings for the backend service. */
    @Import(name="clientTlsSettings")
    private @Nullable Output<ClientTlsSettingsArgs> clientTlsSettings;

    /**
     * @return [Deprecated] TLS Settings for the backend service.
     * 
     * @deprecated
     * [Deprecated] TLS Settings for the backend service.
     * 
     */
    @Deprecated /* [Deprecated] TLS Settings for the backend service. */
    public Optional<Output<ClientTlsSettingsArgs>> clientTlsSettings() {
        return Optional.ofNullable(this.clientTlsSettings);
    }

    /**
     * Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate&#39;s subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate&#39;s subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
     * 
     */
    @Import(name="subjectAltNames")
    private @Nullable Output<List<String>> subjectAltNames;

    /**
     * @return Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate&#39;s subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate&#39;s subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
     * 
     */
    public Optional<Output<List<String>>> subjectAltNames() {
        return Optional.ofNullable(this.subjectAltNames);
    }

    private SecuritySettingsArgs() {}

    private SecuritySettingsArgs(SecuritySettingsArgs $) {
        this.authentication = $.authentication;
        this.authenticationPolicy = $.authenticationPolicy;
        this.authorizationConfig = $.authorizationConfig;
        this.clientTlsPolicy = $.clientTlsPolicy;
        this.clientTlsSettings = $.clientTlsSettings;
        this.subjectAltNames = $.subjectAltNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecuritySettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecuritySettingsArgs $;

        public Builder() {
            $ = new SecuritySettingsArgs();
        }

        public Builder(SecuritySettingsArgs defaults) {
            $ = new SecuritySettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication [Deprecated] Use clientTlsPolicy instead.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] Use clientTlsPolicy instead.
         * 
         */
        @Deprecated /* [Deprecated] Use clientTlsPolicy instead. */
        public Builder authentication(@Nullable Output<String> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication [Deprecated] Use clientTlsPolicy instead.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] Use clientTlsPolicy instead.
         * 
         */
        @Deprecated /* [Deprecated] Use clientTlsPolicy instead. */
        public Builder authentication(String authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param authenticationPolicy [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
         * 
         */
        @Deprecated /* [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal. */
        public Builder authenticationPolicy(@Nullable Output<AuthenticationPolicyArgs> authenticationPolicy) {
            $.authenticationPolicy = authenticationPolicy;
            return this;
        }

        /**
         * @param authenticationPolicy [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
         * 
         */
        @Deprecated /* [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal. */
        public Builder authenticationPolicy(AuthenticationPolicyArgs authenticationPolicy) {
            return authenticationPolicy(Output.of(authenticationPolicy));
        }

        /**
         * @param authorizationConfig [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
         * 
         */
        @Deprecated /* [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config. */
        public Builder authorizationConfig(@Nullable Output<AuthorizationConfigArgs> authorizationConfig) {
            $.authorizationConfig = authorizationConfig;
            return this;
        }

        /**
         * @param authorizationConfig [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
         * 
         */
        @Deprecated /* [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config. */
        public Builder authorizationConfig(AuthorizationConfigArgs authorizationConfig) {
            return authorizationConfig(Output.of(authorizationConfig));
        }

        /**
         * @param clientTlsPolicy Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service&#39;s backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsPolicy(@Nullable Output<String> clientTlsPolicy) {
            $.clientTlsPolicy = clientTlsPolicy;
            return this;
        }

        /**
         * @param clientTlsPolicy Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service&#39;s backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsPolicy(String clientTlsPolicy) {
            return clientTlsPolicy(Output.of(clientTlsPolicy));
        }

        /**
         * @param clientTlsSettings [Deprecated] TLS Settings for the backend service.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] TLS Settings for the backend service.
         * 
         */
        @Deprecated /* [Deprecated] TLS Settings for the backend service. */
        public Builder clientTlsSettings(@Nullable Output<ClientTlsSettingsArgs> clientTlsSettings) {
            $.clientTlsSettings = clientTlsSettings;
            return this;
        }

        /**
         * @param clientTlsSettings [Deprecated] TLS Settings for the backend service.
         * 
         * @return builder
         * 
         * @deprecated
         * [Deprecated] TLS Settings for the backend service.
         * 
         */
        @Deprecated /* [Deprecated] TLS Settings for the backend service. */
        public Builder clientTlsSettings(ClientTlsSettingsArgs clientTlsSettings) {
            return clientTlsSettings(Output.of(clientTlsSettings));
        }

        /**
         * @param subjectAltNames Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate&#39;s subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate&#39;s subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(@Nullable Output<List<String>> subjectAltNames) {
            $.subjectAltNames = subjectAltNames;
            return this;
        }

        /**
         * @param subjectAltNames Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate&#39;s subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate&#39;s subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(List<String> subjectAltNames) {
            return subjectAltNames(Output.of(subjectAltNames));
        }

        /**
         * @param subjectAltNames Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate&#39;s subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate&#39;s subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(String... subjectAltNames) {
            return subjectAltNames(List.of(subjectAltNames));
        }

        public SecuritySettingsArgs build() {
            return $;
        }
    }

}
