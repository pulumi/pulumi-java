// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A gauge chart shows where the current value sits within a pre-defined range. The upper and lower bounds should define the possible range of values for the scorecard&#39;s query (inclusive).
 * 
 */
public final class GaugeViewArgs extends com.pulumi.resources.ResourceArgs {

    public static final GaugeViewArgs Empty = new GaugeViewArgs();

    /**
     * The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
     * 
     */
    @Import(name="lowerBound")
    private @Nullable Output<Double> lowerBound;

    /**
     * @return The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
     * 
     */
    public Optional<Output<Double>> lowerBound() {
        return Optional.ofNullable(this.lowerBound);
    }

    /**
     * The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
     * 
     */
    @Import(name="upperBound")
    private @Nullable Output<Double> upperBound;

    /**
     * @return The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
     * 
     */
    public Optional<Output<Double>> upperBound() {
        return Optional.ofNullable(this.upperBound);
    }

    private GaugeViewArgs() {}

    private GaugeViewArgs(GaugeViewArgs $) {
        this.lowerBound = $.lowerBound;
        this.upperBound = $.upperBound;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GaugeViewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GaugeViewArgs $;

        public Builder() {
            $ = new GaugeViewArgs();
        }

        public Builder(GaugeViewArgs defaults) {
            $ = new GaugeViewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lowerBound The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
         * 
         * @return builder
         * 
         */
        public Builder lowerBound(@Nullable Output<Double> lowerBound) {
            $.lowerBound = lowerBound;
            return this;
        }

        /**
         * @param lowerBound The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
         * 
         * @return builder
         * 
         */
        public Builder lowerBound(Double lowerBound) {
            return lowerBound(Output.of(lowerBound));
        }

        /**
         * @param upperBound The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
         * 
         * @return builder
         * 
         */
        public Builder upperBound(@Nullable Output<Double> upperBound) {
            $.upperBound = upperBound;
            return this;
        }

        /**
         * @param upperBound The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
         * 
         * @return builder
         * 
         */
        public Builder upperBound(Double upperBound) {
            return upperBound(Output.of(upperBound));
        }

        public GaugeViewArgs build() {
            return $;
        }
    }

}
