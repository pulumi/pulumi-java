// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_v1.enums.PacketMirroringFilterDirection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PacketMirroringFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final PacketMirroringFilterArgs Empty = new PacketMirroringFilterArgs();

    /**
     * IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
     * 
     */
    @Import(name="cidrRanges")
    private @Nullable Output<List<String>> cidrRanges;

    public Optional<Output<List<String>>> cidrRanges() {
        return Optional.ofNullable(this.cidrRanges);
    }

    /**
     * Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<PacketMirroringFilterDirection> direction;

    public Optional<Output<PacketMirroringFilterDirection>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
     * 
     */
    @Import(name="ipProtocols")
    private @Nullable Output<List<String>> ipProtocols;

    public Optional<Output<List<String>>> ipProtocols() {
        return Optional.ofNullable(this.ipProtocols);
    }

    private PacketMirroringFilterArgs() {}

    private PacketMirroringFilterArgs(PacketMirroringFilterArgs $) {
        this.cidrRanges = $.cidrRanges;
        this.direction = $.direction;
        this.ipProtocols = $.ipProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PacketMirroringFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PacketMirroringFilterArgs $;

        public Builder() {
            $ = new PacketMirroringFilterArgs();
        }

        public Builder(PacketMirroringFilterArgs defaults) {
            $ = new PacketMirroringFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder cidrRanges(@Nullable Output<List<String>> cidrRanges) {
            $.cidrRanges = cidrRanges;
            return this;
        }

        public Builder cidrRanges(List<String> cidrRanges) {
            return cidrRanges(Output.of(cidrRanges));
        }

        public Builder cidrRanges(String... cidrRanges) {
            return cidrRanges(List.of(cidrRanges));
        }

        public Builder direction(@Nullable Output<PacketMirroringFilterDirection> direction) {
            $.direction = direction;
            return this;
        }

        public Builder direction(PacketMirroringFilterDirection direction) {
            return direction(Output.of(direction));
        }

        public Builder ipProtocols(@Nullable Output<List<String>> ipProtocols) {
            $.ipProtocols = ipProtocols;
            return this;
        }

        public Builder ipProtocols(List<String> ipProtocols) {
            return ipProtocols(Output.of(ipProtocols));
        }

        public Builder ipProtocols(String... ipProtocols) {
            return ipProtocols(List.of(ipProtocols));
        }

        public PacketMirroringFilterArgs build() {
            return $;
        }
    }

}
