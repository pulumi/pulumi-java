// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
 * 
 */
public final class SourceRepositoryResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceRepositoryResponse Empty = new SourceRepositoryResponse();

    /**
     * The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
     * 
     */
    @Import(name="deployedUrl", required=true)
    private String deployedUrl;

    public String deployedUrl() {
        return this.deployedUrl;
    }

    /**
     * The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*{@literal /}repos/*{@literal /}revisions/*{@literal /}paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*{@literal /}repos/*{@literal /}moveable-aliases/*{@literal /}paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*{@literal /}repos/*{@literal /}fixed-aliases/*{@literal /}paths/*` You may omit `paths/*` if you want to use the main directory.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private SourceRepositoryResponse() {}

    private SourceRepositoryResponse(SourceRepositoryResponse $) {
        this.deployedUrl = $.deployedUrl;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceRepositoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceRepositoryResponse $;

        public Builder() {
            $ = new SourceRepositoryResponse();
        }

        public Builder(SourceRepositoryResponse defaults) {
            $ = new SourceRepositoryResponse(Objects.requireNonNull(defaults));
        }

        public Builder deployedUrl(String deployedUrl) {
            $.deployedUrl = deployedUrl;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public SourceRepositoryResponse build() {
            $.deployedUrl = Objects.requireNonNull($.deployedUrl, "expected parameter 'deployedUrl' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
