// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vision.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vision.v1.inputs.BoundingPolyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReferenceImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReferenceImageArgs Empty = new ReferenceImageArgs();

    /**
     * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
     * 
     */
    @Import(name="boundingPolys")
    private @Nullable Output<List<BoundingPolyArgs>> boundingPolys;

    /**
     * @return Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
     * 
     */
    public Optional<Output<List<BoundingPolyArgs>>> boundingPolys() {
        return Optional.ofNullable(this.boundingPolys);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="productId", required=true)
    private Output<String> productId;

    public Output<String> productId() {
        return this.productId;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
     * 
     */
    @Import(name="referenceImageId")
    private @Nullable Output<String> referenceImageId;

    /**
     * @return A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
     * 
     */
    public Optional<Output<String>> referenceImageId() {
        return Optional.ofNullable(this.referenceImageId);
    }

    /**
     * The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private ReferenceImageArgs() {}

    private ReferenceImageArgs(ReferenceImageArgs $) {
        this.boundingPolys = $.boundingPolys;
        this.location = $.location;
        this.name = $.name;
        this.productId = $.productId;
        this.project = $.project;
        this.referenceImageId = $.referenceImageId;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReferenceImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReferenceImageArgs $;

        public Builder() {
            $ = new ReferenceImageArgs();
        }

        public Builder(ReferenceImageArgs defaults) {
            $ = new ReferenceImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boundingPolys Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
         * 
         * @return builder
         * 
         */
        public Builder boundingPolys(@Nullable Output<List<BoundingPolyArgs>> boundingPolys) {
            $.boundingPolys = boundingPolys;
            return this;
        }

        /**
         * @param boundingPolys Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
         * 
         * @return builder
         * 
         */
        public Builder boundingPolys(List<BoundingPolyArgs> boundingPolys) {
            return boundingPolys(Output.of(boundingPolys));
        }

        /**
         * @param boundingPolys Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
         * 
         * @return builder
         * 
         */
        public Builder boundingPolys(BoundingPolyArgs... boundingPolys) {
            return boundingPolys(List.of(boundingPolys));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder productId(Output<String> productId) {
            $.productId = productId;
            return this;
        }

        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param referenceImageId A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
         * 
         * @return builder
         * 
         */
        public Builder referenceImageId(@Nullable Output<String> referenceImageId) {
            $.referenceImageId = referenceImageId;
            return this;
        }

        /**
         * @param referenceImageId A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
         * 
         * @return builder
         * 
         */
        public Builder referenceImageId(String referenceImageId) {
            return referenceImageId(Output.of(referenceImageId));
        }

        /**
         * @param uri The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public ReferenceImageArgs build() {
            $.productId = Objects.requireNonNull($.productId, "expected parameter 'productId' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
