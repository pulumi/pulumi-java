// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.servicemanagement_v1.inputs.JwtLocationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 * 
 */
public final class AuthProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthProviderArgs Empty = new AuthProviderArgs();

    /**
     * The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - &#34;https://[service.name]/[google.protobuf.Api.name]&#34; - &#34;https://[service.name]/&#34; will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
     * 
     */
    @Import(name="audiences")
    private @Nullable Output<String> audiences;

    public Optional<Output<String>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
     * 
     */
    @Import(name="authorizationUrl")
    private @Nullable Output<String> authorizationUrl;

    public Optional<Output<String>> authorizationUrl() {
        return Optional.ofNullable(this.authorizationUrl);
    }

    /**
     * The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: &#34;bookstore_auth&#34;.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * URL of the provider&#39;s public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
     * 
     */
    @Import(name="jwksUri")
    private @Nullable Output<String> jwksUri;

    public Optional<Output<String>> jwksUri() {
        return Optional.ofNullable(this.jwksUri);
    }

    /**
     * Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: &#34;Bearer &#34; - header: x-goog-iap-jwt-assertion - query: access_token
     * 
     */
    @Import(name="jwtLocations")
    private @Nullable Output<List<JwtLocationArgs>> jwtLocations;

    public Optional<Output<List<JwtLocationArgs>>> jwtLocations() {
        return Optional.ofNullable(this.jwtLocations);
    }

    private AuthProviderArgs() {}

    private AuthProviderArgs(AuthProviderArgs $) {
        this.audiences = $.audiences;
        this.authorizationUrl = $.authorizationUrl;
        this.id = $.id;
        this.issuer = $.issuer;
        this.jwksUri = $.jwksUri;
        this.jwtLocations = $.jwtLocations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthProviderArgs $;

        public Builder() {
            $ = new AuthProviderArgs();
        }

        public Builder(AuthProviderArgs defaults) {
            $ = new AuthProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder audiences(@Nullable Output<String> audiences) {
            $.audiences = audiences;
            return this;
        }

        public Builder audiences(String audiences) {
            return audiences(Output.of(audiences));
        }

        public Builder authorizationUrl(@Nullable Output<String> authorizationUrl) {
            $.authorizationUrl = authorizationUrl;
            return this;
        }

        public Builder authorizationUrl(String authorizationUrl) {
            return authorizationUrl(Output.of(authorizationUrl));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        public Builder jwksUri(@Nullable Output<String> jwksUri) {
            $.jwksUri = jwksUri;
            return this;
        }

        public Builder jwksUri(String jwksUri) {
            return jwksUri(Output.of(jwksUri));
        }

        public Builder jwtLocations(@Nullable Output<List<JwtLocationArgs>> jwtLocations) {
            $.jwtLocations = jwtLocations;
            return this;
        }

        public Builder jwtLocations(List<JwtLocationArgs> jwtLocations) {
            return jwtLocations(Output.of(jwtLocations));
        }

        public Builder jwtLocations(JwtLocationArgs... jwtLocations) {
            return jwtLocations(List.of(jwtLocations));
        }

        public AuthProviderArgs build() {
            return $;
        }
    }

}
