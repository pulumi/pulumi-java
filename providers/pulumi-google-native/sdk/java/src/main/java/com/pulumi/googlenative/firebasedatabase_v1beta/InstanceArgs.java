// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasedatabase_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.firebasedatabase_v1beta.enums.InstanceState;
import com.pulumi.googlenative.firebasedatabase_v1beta.enums.InstanceType;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    @Import(name="databaseId")
      private final @Nullable Output<String> databaseId;

    public Output<String> databaseId() {
        return this.databaseId == null ? Codegen.empty() : this.databaseId;
    }

    /**
     * Immutable. The globally unique hostname of the database.
     * 
     */
    @Import(name="databaseUrl")
      private final @Nullable Output<String> databaseUrl;

    public Output<String> databaseUrl() {
        return this.databaseUrl == null ? Codegen.empty() : this.databaseUrl;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The database&#39;s lifecycle state. Read-only.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<InstanceState> state;

    public Output<InstanceState> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<InstanceType> type;

    public Output<InstanceType> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    @Import(name="validateOnly")
      private final @Nullable Output<String> validateOnly;

    public Output<String> validateOnly() {
        return this.validateOnly == null ? Codegen.empty() : this.validateOnly;
    }

    public InstanceArgs(
        @Nullable Output<String> databaseId,
        @Nullable Output<String> databaseUrl,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<InstanceState> state,
        @Nullable Output<InstanceType> type,
        @Nullable Output<String> validateOnly) {
        this.databaseId = databaseId;
        this.databaseUrl = databaseUrl;
        this.location = location;
        this.name = name;
        this.project = project;
        this.state = state;
        this.type = type;
        this.validateOnly = validateOnly;
    }

    private InstanceArgs() {
        this.databaseId = Codegen.empty();
        this.databaseUrl = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.state = Codegen.empty();
        this.type = Codegen.empty();
        this.validateOnly = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> databaseId;
        private @Nullable Output<String> databaseUrl;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<InstanceState> state;
        private @Nullable Output<InstanceType> type;
        private @Nullable Output<String> validateOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseId = defaults.databaseId;
    	      this.databaseUrl = defaults.databaseUrl;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.validateOnly = defaults.validateOnly;
        }

        public Builder databaseId(@Nullable Output<String> databaseId) {
            this.databaseId = databaseId;
            return this;
        }
        public Builder databaseId(@Nullable String databaseId) {
            this.databaseId = Codegen.ofNullable(databaseId);
            return this;
        }
        public Builder databaseUrl(@Nullable Output<String> databaseUrl) {
            this.databaseUrl = databaseUrl;
            return this;
        }
        public Builder databaseUrl(@Nullable String databaseUrl) {
            this.databaseUrl = Codegen.ofNullable(databaseUrl);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder state(@Nullable Output<InstanceState> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable InstanceState state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder type(@Nullable Output<InstanceType> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable InstanceType type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            this.validateOnly = validateOnly;
            return this;
        }
        public Builder validateOnly(@Nullable String validateOnly) {
            this.validateOnly = Codegen.ofNullable(validateOnly);
            return this;
        }        public InstanceArgs build() {
            return new InstanceArgs(databaseId, databaseUrl, location, name, project, state, type, validateOnly);
        }
    }
}
