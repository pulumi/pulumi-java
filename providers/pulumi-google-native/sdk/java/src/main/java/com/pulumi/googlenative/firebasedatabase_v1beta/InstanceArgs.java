// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasedatabase_v1beta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasedatabase_v1beta.enums.InstanceState;
import com.pulumi.googlenative.firebasedatabase_v1beta.enums.InstanceType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * Immutable. The globally unique hostname of the database.
     * 
     */
    @Import(name="databaseUrl")
    private @Nullable Output<String> databaseUrl;

    public Optional<Output<String>> databaseUrl() {
        return Optional.ofNullable(this.databaseUrl);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The database&#39;s lifecycle state. Read-only.
     * 
     */
    @Import(name="state")
    private @Nullable Output<InstanceState> state;

    public Optional<Output<InstanceState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
     * 
     */
    @Import(name="type")
    private @Nullable Output<InstanceType> type;

    public Optional<Output<InstanceType>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.databaseId = $.databaseId;
        this.databaseUrl = $.databaseUrl;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.state = $.state;
        this.type = $.type;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        public Builder databaseUrl(@Nullable Output<String> databaseUrl) {
            $.databaseUrl = databaseUrl;
            return this;
        }

        public Builder databaseUrl(String databaseUrl) {
            return databaseUrl(Output.of(databaseUrl));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder state(@Nullable Output<InstanceState> state) {
            $.state = state;
            return this;
        }

        public Builder state(InstanceState state) {
            return state(Output.of(state));
        }

        public Builder type(@Nullable Output<InstanceType> type) {
            $.type = type;
            return this;
        }

        public Builder type(InstanceType type) {
            return type(Output.of(type));
        }

        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public InstanceArgs build() {
            return $;
        }
    }

}
