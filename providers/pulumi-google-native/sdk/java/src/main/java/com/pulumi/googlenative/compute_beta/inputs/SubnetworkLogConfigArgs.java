// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.compute_beta.enums.SubnetworkLogConfigAggregationInterval;
import com.pulumi.googlenative.compute_beta.enums.SubnetworkLogConfigMetadata;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The available logging options for this subnetwork.
 * 
 */
public final class SubnetworkLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubnetworkLogConfigArgs Empty = new SubnetworkLogConfigArgs();

    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
     * 
     */
    @Import(name="aggregationInterval")
      private final @Nullable Output<SubnetworkLogConfigAggregationInterval> aggregationInterval;

    public Output<SubnetworkLogConfigAggregationInterval> aggregationInterval() {
        return this.aggregationInterval == null ? Codegen.empty() : this.aggregationInterval;
    }

    /**
     * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
     * 
     */
    @Import(name="enable")
      private final @Nullable Output<Boolean> enable;

    public Output<Boolean> enable() {
        return this.enable == null ? Codegen.empty() : this.enable;
    }

    /**
     * Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
     * 
     */
    @Import(name="filterExpr")
      private final @Nullable Output<String> filterExpr;

    public Output<String> filterExpr() {
        return this.filterExpr == null ? Codegen.empty() : this.filterExpr;
    }

    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
     * 
     */
    @Import(name="flowSampling")
      private final @Nullable Output<Double> flowSampling;

    public Output<Double> flowSampling() {
        return this.flowSampling == null ? Codegen.empty() : this.flowSampling;
    }

    /**
     * Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<SubnetworkLogConfigMetadata> metadata;

    public Output<SubnetworkLogConfigMetadata> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * Can only be specified if VPC flow logs for this subnetwork is enabled and &#34;metadata&#34; was set to CUSTOM_METADATA.
     * 
     */
    @Import(name="metadataFields")
      private final @Nullable Output<List<String>> metadataFields;

    public Output<List<String>> metadataFields() {
        return this.metadataFields == null ? Codegen.empty() : this.metadataFields;
    }

    public SubnetworkLogConfigArgs(
        @Nullable Output<SubnetworkLogConfigAggregationInterval> aggregationInterval,
        @Nullable Output<Boolean> enable,
        @Nullable Output<String> filterExpr,
        @Nullable Output<Double> flowSampling,
        @Nullable Output<SubnetworkLogConfigMetadata> metadata,
        @Nullable Output<List<String>> metadataFields) {
        this.aggregationInterval = aggregationInterval;
        this.enable = enable;
        this.filterExpr = filterExpr;
        this.flowSampling = flowSampling;
        this.metadata = metadata;
        this.metadataFields = metadataFields;
    }

    private SubnetworkLogConfigArgs() {
        this.aggregationInterval = Codegen.empty();
        this.enable = Codegen.empty();
        this.filterExpr = Codegen.empty();
        this.flowSampling = Codegen.empty();
        this.metadata = Codegen.empty();
        this.metadataFields = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubnetworkLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SubnetworkLogConfigAggregationInterval> aggregationInterval;
        private @Nullable Output<Boolean> enable;
        private @Nullable Output<String> filterExpr;
        private @Nullable Output<Double> flowSampling;
        private @Nullable Output<SubnetworkLogConfigMetadata> metadata;
        private @Nullable Output<List<String>> metadataFields;

        public Builder() {
    	      // Empty
        }

        public Builder(SubnetworkLogConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationInterval = defaults.aggregationInterval;
    	      this.enable = defaults.enable;
    	      this.filterExpr = defaults.filterExpr;
    	      this.flowSampling = defaults.flowSampling;
    	      this.metadata = defaults.metadata;
    	      this.metadataFields = defaults.metadataFields;
        }

        public Builder aggregationInterval(@Nullable Output<SubnetworkLogConfigAggregationInterval> aggregationInterval) {
            this.aggregationInterval = aggregationInterval;
            return this;
        }
        public Builder aggregationInterval(@Nullable SubnetworkLogConfigAggregationInterval aggregationInterval) {
            this.aggregationInterval = Codegen.ofNullable(aggregationInterval);
            return this;
        }
        public Builder enable(@Nullable Output<Boolean> enable) {
            this.enable = enable;
            return this;
        }
        public Builder enable(@Nullable Boolean enable) {
            this.enable = Codegen.ofNullable(enable);
            return this;
        }
        public Builder filterExpr(@Nullable Output<String> filterExpr) {
            this.filterExpr = filterExpr;
            return this;
        }
        public Builder filterExpr(@Nullable String filterExpr) {
            this.filterExpr = Codegen.ofNullable(filterExpr);
            return this;
        }
        public Builder flowSampling(@Nullable Output<Double> flowSampling) {
            this.flowSampling = flowSampling;
            return this;
        }
        public Builder flowSampling(@Nullable Double flowSampling) {
            this.flowSampling = Codegen.ofNullable(flowSampling);
            return this;
        }
        public Builder metadata(@Nullable Output<SubnetworkLogConfigMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable SubnetworkLogConfigMetadata metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder metadataFields(@Nullable Output<List<String>> metadataFields) {
            this.metadataFields = metadataFields;
            return this;
        }
        public Builder metadataFields(@Nullable List<String> metadataFields) {
            this.metadataFields = Codegen.ofNullable(metadataFields);
            return this;
        }
        public Builder metadataFields(String... metadataFields) {
            return metadataFields(List.of(metadataFields));
        }        public SubnetworkLogConfigArgs build() {
            return new SubnetworkLogConfigArgs(aggregationInterval, enable, filterExpr, flowSampling, metadata, metadataFields);
        }
    }
}
