// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * GkeNodePoolAutoscaling contains information the cluster autoscaler needs to adjust the size of the node pool to the current cluster usage.
 * 
 */
public final class GkeNodePoolAutoscalingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GkeNodePoolAutoscalingConfigArgs Empty = new GkeNodePoolAutoscalingConfigArgs();

    /**
     * The maximum number of nodes in the node pool. Must be &gt;= min_node_count, and must be &gt; 0. Note: Quota must be sufficient to scale up the cluster.
     * 
     */
    @Import(name="maxNodeCount")
    private @Nullable Output<Integer> maxNodeCount;

    /**
     * @return The maximum number of nodes in the node pool. Must be &gt;= min_node_count, and must be &gt; 0. Note: Quota must be sufficient to scale up the cluster.
     * 
     */
    public Optional<Output<Integer>> maxNodeCount() {
        return Optional.ofNullable(this.maxNodeCount);
    }

    /**
     * The minimum number of nodes in the node pool. Must be &gt;= 0 and &lt;= max_node_count.
     * 
     */
    @Import(name="minNodeCount")
    private @Nullable Output<Integer> minNodeCount;

    /**
     * @return The minimum number of nodes in the node pool. Must be &gt;= 0 and &lt;= max_node_count.
     * 
     */
    public Optional<Output<Integer>> minNodeCount() {
        return Optional.ofNullable(this.minNodeCount);
    }

    private GkeNodePoolAutoscalingConfigArgs() {}

    private GkeNodePoolAutoscalingConfigArgs(GkeNodePoolAutoscalingConfigArgs $) {
        this.maxNodeCount = $.maxNodeCount;
        this.minNodeCount = $.minNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GkeNodePoolAutoscalingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GkeNodePoolAutoscalingConfigArgs $;

        public Builder() {
            $ = new GkeNodePoolAutoscalingConfigArgs();
        }

        public Builder(GkeNodePoolAutoscalingConfigArgs defaults) {
            $ = new GkeNodePoolAutoscalingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxNodeCount The maximum number of nodes in the node pool. Must be &gt;= min_node_count, and must be &gt; 0. Note: Quota must be sufficient to scale up the cluster.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(@Nullable Output<Integer> maxNodeCount) {
            $.maxNodeCount = maxNodeCount;
            return this;
        }

        /**
         * @param maxNodeCount The maximum number of nodes in the node pool. Must be &gt;= min_node_count, and must be &gt; 0. Note: Quota must be sufficient to scale up the cluster.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(Integer maxNodeCount) {
            return maxNodeCount(Output.of(maxNodeCount));
        }

        /**
         * @param minNodeCount The minimum number of nodes in the node pool. Must be &gt;= 0 and &lt;= max_node_count.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(@Nullable Output<Integer> minNodeCount) {
            $.minNodeCount = minNodeCount;
            return this;
        }

        /**
         * @param minNodeCount The minimum number of nodes in the node pool. Must be &gt;= 0 and &lt;= max_node_count.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(Integer minNodeCount) {
            return minNodeCount(Output.of(minNodeCount));
        }

        public GkeNodePoolAutoscalingConfigArgs build() {
            return $;
        }
    }

}
