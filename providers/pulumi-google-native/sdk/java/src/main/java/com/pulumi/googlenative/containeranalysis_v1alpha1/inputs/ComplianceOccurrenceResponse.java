// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.NonCompliantFileResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
 * 
 */
public final class ComplianceOccurrenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComplianceOccurrenceResponse Empty = new ComplianceOccurrenceResponse();

    /**
     * The reason for non compliance of these files.
     * 
     */
    @Import(name="nonComplianceReason", required=true)
    private String nonComplianceReason;

    /**
     * @return The reason for non compliance of these files.
     * 
     */
    public String nonComplianceReason() {
        return this.nonComplianceReason;
    }

    /**
     * A list of files which are violating compliance checks.
     * 
     */
    @Import(name="nonCompliantFiles", required=true)
    private List<NonCompliantFileResponse> nonCompliantFiles;

    /**
     * @return A list of files which are violating compliance checks.
     * 
     */
    public List<NonCompliantFileResponse> nonCompliantFiles() {
        return this.nonCompliantFiles;
    }

    private ComplianceOccurrenceResponse() {}

    private ComplianceOccurrenceResponse(ComplianceOccurrenceResponse $) {
        this.nonComplianceReason = $.nonComplianceReason;
        this.nonCompliantFiles = $.nonCompliantFiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComplianceOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComplianceOccurrenceResponse $;

        public Builder() {
            $ = new ComplianceOccurrenceResponse();
        }

        public Builder(ComplianceOccurrenceResponse defaults) {
            $ = new ComplianceOccurrenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param nonComplianceReason The reason for non compliance of these files.
         * 
         * @return builder
         * 
         */
        public Builder nonComplianceReason(String nonComplianceReason) {
            $.nonComplianceReason = nonComplianceReason;
            return this;
        }

        /**
         * @param nonCompliantFiles A list of files which are violating compliance checks.
         * 
         * @return builder
         * 
         */
        public Builder nonCompliantFiles(List<NonCompliantFileResponse> nonCompliantFiles) {
            $.nonCompliantFiles = nonCompliantFiles;
            return this;
        }

        /**
         * @param nonCompliantFiles A list of files which are violating compliance checks.
         * 
         * @return builder
         * 
         */
        public Builder nonCompliantFiles(NonCompliantFileResponse... nonCompliantFiles) {
            return nonCompliantFiles(List.of(nonCompliantFiles));
        }

        public ComplianceOccurrenceResponse build() {
            $.nonComplianceReason = Objects.requireNonNull($.nonComplianceReason, "expected parameter 'nonComplianceReason' to be non-null");
            $.nonCompliantFiles = Objects.requireNonNull($.nonCompliantFiles, "expected parameter 'nonCompliantFiles' to be non-null");
            return $;
        }
    }

}
