// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTargetSslProxyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTargetSslProxyArgs Empty = new GetTargetSslProxyArgs();

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="targetSslProxy", required=true)
    private Output<String> targetSslProxy;

    public Output<String> targetSslProxy() {
        return this.targetSslProxy;
    }

    private GetTargetSslProxyArgs() {}

    private GetTargetSslProxyArgs(GetTargetSslProxyArgs $) {
        this.project = $.project;
        this.targetSslProxy = $.targetSslProxy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTargetSslProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTargetSslProxyArgs $;

        public Builder() {
            $ = new GetTargetSslProxyArgs();
        }

        public Builder(GetTargetSslProxyArgs defaults) {
            $ = new GetTargetSslProxyArgs(Objects.requireNonNull(defaults));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder targetSslProxy(Output<String> targetSslProxy) {
            $.targetSslProxy = targetSslProxy;
            return this;
        }

        public Builder targetSslProxy(String targetSslProxy) {
            return targetSslProxy(Output.of(targetSslProxy));
        }

        public GetTargetSslProxyArgs build() {
            $.targetSslProxy = Objects.requireNonNull($.targetSslProxy, "expected parameter 'targetSslProxy' to be non-null");
            return $;
        }
    }

}
