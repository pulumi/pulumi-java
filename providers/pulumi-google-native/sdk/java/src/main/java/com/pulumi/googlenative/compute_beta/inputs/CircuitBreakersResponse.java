// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_beta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute_beta.inputs.DurationResponse;
import java.lang.Integer;
import java.util.Objects;


/**
 * Settings controlling the volume of requests, connections and retries to this backend service.
 * 
 */
public final class CircuitBreakersResponse extends com.pulumi.resources.InvokeArgs {

    public static final CircuitBreakersResponse Empty = new CircuitBreakersResponse();

    /**
     * The timeout for new network connections to hosts.
     * 
     */
    @Import(name="connectTimeout", required=true)
    private DurationResponse connectTimeout;

    /**
     * @return The timeout for new network connections to hosts.
     * 
     */
    public DurationResponse connectTimeout() {
        return this.connectTimeout;
    }

    /**
     * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    @Import(name="maxConnections", required=true)
    private Integer maxConnections;

    /**
     * @return Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }

    /**
     * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    @Import(name="maxPendingRequests", required=true)
    private Integer maxPendingRequests;

    /**
     * @return Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Integer maxPendingRequests() {
        return this.maxPendingRequests;
    }

    /**
     * The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
     * 
     */
    @Import(name="maxRequests", required=true)
    private Integer maxRequests;

    /**
     * @return The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
     * 
     */
    public Integer maxRequests() {
        return this.maxRequests;
    }

    /**
     * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    @Import(name="maxRequestsPerConnection", required=true)
    private Integer maxRequestsPerConnection;

    /**
     * @return Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Integer maxRequestsPerConnection() {
        return this.maxRequestsPerConnection;
    }

    /**
     * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    @Import(name="maxRetries", required=true)
    private Integer maxRetries;

    /**
     * @return Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     * 
     */
    public Integer maxRetries() {
        return this.maxRetries;
    }

    private CircuitBreakersResponse() {}

    private CircuitBreakersResponse(CircuitBreakersResponse $) {
        this.connectTimeout = $.connectTimeout;
        this.maxConnections = $.maxConnections;
        this.maxPendingRequests = $.maxPendingRequests;
        this.maxRequests = $.maxRequests;
        this.maxRequestsPerConnection = $.maxRequestsPerConnection;
        this.maxRetries = $.maxRetries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CircuitBreakersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CircuitBreakersResponse $;

        public Builder() {
            $ = new CircuitBreakersResponse();
        }

        public Builder(CircuitBreakersResponse defaults) {
            $ = new CircuitBreakersResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectTimeout The timeout for new network connections to hosts.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(DurationResponse connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param maxConnections Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxPendingRequests Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
         * 
         * @return builder
         * 
         */
        public Builder maxPendingRequests(Integer maxPendingRequests) {
            $.maxPendingRequests = maxPendingRequests;
            return this;
        }

        /**
         * @param maxRequests The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
         * 
         * @return builder
         * 
         */
        public Builder maxRequests(Integer maxRequests) {
            $.maxRequests = maxRequests;
            return this;
        }

        /**
         * @param maxRequestsPerConnection Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
         * 
         * @return builder
         * 
         */
        public Builder maxRequestsPerConnection(Integer maxRequestsPerConnection) {
            $.maxRequestsPerConnection = maxRequestsPerConnection;
            return this;
        }

        /**
         * @param maxRetries Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Integer maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        public CircuitBreakersResponse build() {
            $.connectTimeout = Objects.requireNonNull($.connectTimeout, "expected parameter 'connectTimeout' to be non-null");
            $.maxConnections = Objects.requireNonNull($.maxConnections, "expected parameter 'maxConnections' to be non-null");
            $.maxPendingRequests = Objects.requireNonNull($.maxPendingRequests, "expected parameter 'maxPendingRequests' to be non-null");
            $.maxRequests = Objects.requireNonNull($.maxRequests, "expected parameter 'maxRequests' to be non-null");
            $.maxRequestsPerConnection = Objects.requireNonNull($.maxRequestsPerConnection, "expected parameter 'maxRequestsPerConnection' to be non-null");
            $.maxRetries = Objects.requireNonNull($.maxRetries, "expected parameter 'maxRetries' to be non-null");
            return $;
        }
    }

}
