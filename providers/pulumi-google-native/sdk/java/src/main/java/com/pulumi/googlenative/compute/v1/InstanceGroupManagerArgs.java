// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.v1.inputs.DistributionPolicyArgs;
import com.pulumi.googlenative.compute.v1.inputs.InstanceGroupManagerAutoHealingPolicyArgs;
import com.pulumi.googlenative.compute.v1.inputs.InstanceGroupManagerUpdatePolicyArgs;
import com.pulumi.googlenative.compute.v1.inputs.InstanceGroupManagerVersionArgs;
import com.pulumi.googlenative.compute.v1.inputs.NamedPortArgs;
import com.pulumi.googlenative.compute.v1.inputs.StatefulPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceGroupManagerArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceGroupManagerArgs Empty = new InstanceGroupManagerArgs();

    /**
     * The autohealing policy for this managed instance group. You can specify only one value.
     * 
     */
    @Import(name="autoHealingPolicies")
    private @Nullable Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies;

    /**
     * @return The autohealing policy for this managed instance group. You can specify only one value.
     * 
     */
    public Optional<Output<List<InstanceGroupManagerAutoHealingPolicyArgs>>> autoHealingPolicies() {
        return Optional.ofNullable(this.autoHealingPolicies);
    }

    /**
     * The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
     * 
     */
    @Import(name="baseInstanceName")
    private @Nullable Output<String> baseInstanceName;

    /**
     * @return The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
     * 
     */
    public Optional<Output<String>> baseInstanceName() {
        return Optional.ofNullable(this.baseInstanceName);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
     * 
     */
    @Import(name="distributionPolicy")
    private @Nullable Output<DistributionPolicyArgs> distributionPolicy;

    /**
     * @return Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
     * 
     */
    public Optional<Output<DistributionPolicyArgs>> distributionPolicy() {
        return Optional.ofNullable(this.distributionPolicy);
    }

    /**
     * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group&#39;s updatePolicy.type to PROACTIVE.
     * 
     */
    @Import(name="instanceTemplate")
    private @Nullable Output<String> instanceTemplate;

    /**
     * @return The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group&#39;s updatePolicy.type to PROACTIVE.
     * 
     */
    public Optional<Output<String>> instanceTemplate() {
        return Optional.ofNullable(this.instanceTemplate);
    }

    /**
     * The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Named ports configured for the Instance Groups complementary to this Instance Group Manager.
     * 
     */
    @Import(name="namedPorts")
    private @Nullable Output<List<NamedPortArgs>> namedPorts;

    /**
     * @return Named ports configured for the Instance Groups complementary to this Instance Group Manager.
     * 
     */
    public Optional<Output<List<NamedPortArgs>>> namedPorts() {
        return Optional.ofNullable(this.namedPorts);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Stateful configuration for this Instanced Group Manager
     * 
     */
    @Import(name="statefulPolicy")
    private @Nullable Output<StatefulPolicyArgs> statefulPolicy;

    /**
     * @return Stateful configuration for this Instanced Group Manager
     * 
     */
    public Optional<Output<StatefulPolicyArgs>> statefulPolicy() {
        return Optional.ofNullable(this.statefulPolicy);
    }

    /**
     * The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
     * 
     */
    @Import(name="targetPools")
    private @Nullable Output<List<String>> targetPools;

    /**
     * @return The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
     * 
     */
    public Optional<Output<List<String>>> targetPools() {
        return Optional.ofNullable(this.targetPools);
    }

    /**
     * The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
     * 
     */
    @Import(name="targetSize")
    private @Nullable Output<Integer> targetSize;

    /**
     * @return The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
     * 
     */
    public Optional<Output<Integer>> targetSize() {
        return Optional.ofNullable(this.targetSize);
    }

    /**
     * The update policy for this managed instance group.
     * 
     */
    @Import(name="updatePolicy")
    private @Nullable Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy;

    /**
     * @return The update policy for this managed instance group.
     * 
     */
    public Optional<Output<InstanceGroupManagerUpdatePolicyArgs>> updatePolicy() {
        return Optional.ofNullable(this.updatePolicy);
    }

    /**
     * Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<InstanceGroupManagerVersionArgs>> versions;

    /**
     * @return Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
     * 
     */
    public Optional<Output<List<InstanceGroupManagerVersionArgs>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceGroupManagerArgs() {}

    private InstanceGroupManagerArgs(InstanceGroupManagerArgs $) {
        this.autoHealingPolicies = $.autoHealingPolicies;
        this.baseInstanceName = $.baseInstanceName;
        this.description = $.description;
        this.distributionPolicy = $.distributionPolicy;
        this.instanceTemplate = $.instanceTemplate;
        this.name = $.name;
        this.namedPorts = $.namedPorts;
        this.project = $.project;
        this.requestId = $.requestId;
        this.statefulPolicy = $.statefulPolicy;
        this.targetPools = $.targetPools;
        this.targetSize = $.targetSize;
        this.updatePolicy = $.updatePolicy;
        this.versions = $.versions;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGroupManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGroupManagerArgs $;

        public Builder() {
            $ = new InstanceGroupManagerArgs();
        }

        public Builder(InstanceGroupManagerArgs defaults) {
            $ = new InstanceGroupManagerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoHealingPolicies The autohealing policy for this managed instance group. You can specify only one value.
         * 
         * @return builder
         * 
         */
        public Builder autoHealingPolicies(@Nullable Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies) {
            $.autoHealingPolicies = autoHealingPolicies;
            return this;
        }

        /**
         * @param autoHealingPolicies The autohealing policy for this managed instance group. You can specify only one value.
         * 
         * @return builder
         * 
         */
        public Builder autoHealingPolicies(List<InstanceGroupManagerAutoHealingPolicyArgs> autoHealingPolicies) {
            return autoHealingPolicies(Output.of(autoHealingPolicies));
        }

        /**
         * @param autoHealingPolicies The autohealing policy for this managed instance group. You can specify only one value.
         * 
         * @return builder
         * 
         */
        public Builder autoHealingPolicies(InstanceGroupManagerAutoHealingPolicyArgs... autoHealingPolicies) {
            return autoHealingPolicies(List.of(autoHealingPolicies));
        }

        /**
         * @param baseInstanceName The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
         * 
         * @return builder
         * 
         */
        public Builder baseInstanceName(@Nullable Output<String> baseInstanceName) {
            $.baseInstanceName = baseInstanceName;
            return this;
        }

        /**
         * @param baseInstanceName The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
         * 
         * @return builder
         * 
         */
        public Builder baseInstanceName(String baseInstanceName) {
            return baseInstanceName(Output.of(baseInstanceName));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param distributionPolicy Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicy(@Nullable Output<DistributionPolicyArgs> distributionPolicy) {
            $.distributionPolicy = distributionPolicy;
            return this;
        }

        /**
         * @param distributionPolicy Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicy(DistributionPolicyArgs distributionPolicy) {
            return distributionPolicy(Output.of(distributionPolicy));
        }

        /**
         * @param instanceTemplate The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group&#39;s updatePolicy.type to PROACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder instanceTemplate(@Nullable Output<String> instanceTemplate) {
            $.instanceTemplate = instanceTemplate;
            return this;
        }

        /**
         * @param instanceTemplate The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group&#39;s updatePolicy.type to PROACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder instanceTemplate(String instanceTemplate) {
            return instanceTemplate(Output.of(instanceTemplate));
        }

        /**
         * @param name The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namedPorts Named ports configured for the Instance Groups complementary to this Instance Group Manager.
         * 
         * @return builder
         * 
         */
        public Builder namedPorts(@Nullable Output<List<NamedPortArgs>> namedPorts) {
            $.namedPorts = namedPorts;
            return this;
        }

        /**
         * @param namedPorts Named ports configured for the Instance Groups complementary to this Instance Group Manager.
         * 
         * @return builder
         * 
         */
        public Builder namedPorts(List<NamedPortArgs> namedPorts) {
            return namedPorts(Output.of(namedPorts));
        }

        /**
         * @param namedPorts Named ports configured for the Instance Groups complementary to this Instance Group Manager.
         * 
         * @return builder
         * 
         */
        public Builder namedPorts(NamedPortArgs... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param statefulPolicy Stateful configuration for this Instanced Group Manager
         * 
         * @return builder
         * 
         */
        public Builder statefulPolicy(@Nullable Output<StatefulPolicyArgs> statefulPolicy) {
            $.statefulPolicy = statefulPolicy;
            return this;
        }

        /**
         * @param statefulPolicy Stateful configuration for this Instanced Group Manager
         * 
         * @return builder
         * 
         */
        public Builder statefulPolicy(StatefulPolicyArgs statefulPolicy) {
            return statefulPolicy(Output.of(statefulPolicy));
        }

        /**
         * @param targetPools The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder targetPools(@Nullable Output<List<String>> targetPools) {
            $.targetPools = targetPools;
            return this;
        }

        /**
         * @param targetPools The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder targetPools(List<String> targetPools) {
            return targetPools(Output.of(targetPools));
        }

        /**
         * @param targetPools The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }

        /**
         * @param targetSize The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
         * 
         * @return builder
         * 
         */
        public Builder targetSize(@Nullable Output<Integer> targetSize) {
            $.targetSize = targetSize;
            return this;
        }

        /**
         * @param targetSize The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
         * 
         * @return builder
         * 
         */
        public Builder targetSize(Integer targetSize) {
            return targetSize(Output.of(targetSize));
        }

        /**
         * @param updatePolicy The update policy for this managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder updatePolicy(@Nullable Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy) {
            $.updatePolicy = updatePolicy;
            return this;
        }

        /**
         * @param updatePolicy The update policy for this managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder updatePolicy(InstanceGroupManagerUpdatePolicyArgs updatePolicy) {
            return updatePolicy(Output.of(updatePolicy));
        }

        /**
         * @param versions Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<InstanceGroupManagerVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<InstanceGroupManagerVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
         * 
         * @return builder
         * 
         */
        public Builder versions(InstanceGroupManagerVersionArgs... versions) {
            return versions(List.of(versions));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceGroupManagerArgs build() {
            return $;
        }
    }

}
