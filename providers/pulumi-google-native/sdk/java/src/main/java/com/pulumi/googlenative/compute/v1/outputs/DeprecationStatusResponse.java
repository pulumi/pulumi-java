// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DeprecationStatusResponse {
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    private final String deleted;
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    private final String deprecated;
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    private final String obsolete;
    /**
     * @return The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
     * 
     */
    private final String replacement;
    /**
     * @return The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private DeprecationStatusResponse(
        @CustomType.Parameter("deleted") String deleted,
        @CustomType.Parameter("deprecated") String deprecated,
        @CustomType.Parameter("obsolete") String obsolete,
        @CustomType.Parameter("replacement") String replacement,
        @CustomType.Parameter("state") String state) {
        this.deleted = deleted;
        this.deprecated = deprecated;
        this.obsolete = obsolete;
        this.replacement = replacement;
        this.state = state;
    }

    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String deleted() {
        return this.deleted;
    }
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String deprecated() {
        return this.deprecated;
    }
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String obsolete() {
        return this.obsolete;
    }
    /**
     * @return The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
     * 
     */
    public String replacement() {
        return this.replacement;
    }
    /**
     * @return The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeprecationStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String deleted;
        private String deprecated;
        private String obsolete;
        private String replacement;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(DeprecationStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleted = defaults.deleted;
    	      this.deprecated = defaults.deprecated;
    	      this.obsolete = defaults.obsolete;
    	      this.replacement = defaults.replacement;
    	      this.state = defaults.state;
        }

        public Builder deleted(String deleted) {
            this.deleted = Objects.requireNonNull(deleted);
            return this;
        }
        public Builder deprecated(String deprecated) {
            this.deprecated = Objects.requireNonNull(deprecated);
            return this;
        }
        public Builder obsolete(String obsolete) {
            this.obsolete = Objects.requireNonNull(obsolete);
            return this;
        }
        public Builder replacement(String replacement) {
            this.replacement = Objects.requireNonNull(replacement);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public DeprecationStatusResponse build() {
            return new DeprecationStatusResponse(deleted, deprecated, obsolete, replacement, state);
        }
    }
}
