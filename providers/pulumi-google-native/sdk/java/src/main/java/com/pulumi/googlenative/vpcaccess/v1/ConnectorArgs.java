// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vpcaccess.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.vpcaccess.v1.inputs.SubnetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorArgs Empty = new ConnectorArgs();

    /**
     * Required. The ID to use for this connector.
     * 
     */
    @Import(name="connectorId", required=true)
    private Output<String> connectorId;

    /**
     * @return Required. The ID to use for this connector.
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }

    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     * 
     */
    @Import(name="ipCidrRange")
    private @Nullable Output<String> ipCidrRange;

    /**
     * @return The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     * 
     */
    public Optional<Output<String>> ipCidrRange() {
        return Optional.ofNullable(this.ipCidrRange);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     * 
     */
    @Import(name="machineType")
    private @Nullable Output<String> machineType;

    /**
     * @return Machine type of VM Instance underlying connector. Default is e2-micro
     * 
     */
    public Optional<Output<String>> machineType() {
        return Optional.ofNullable(this.machineType);
    }

    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     * 
     */
    @Import(name="maxInstances")
    private @Nullable Output<Integer> maxInstances;

    /**
     * @return Maximum value of instances in autoscaling group underlying the connector.
     * 
     */
    public Optional<Output<Integer>> maxInstances() {
        return Optional.ofNullable(this.maxInstances);
    }

    /**
     * Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
     * 
     */
    @Import(name="maxThroughput")
    private @Nullable Output<Integer> maxThroughput;

    /**
     * @return Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
     * 
     */
    public Optional<Output<Integer>> maxThroughput() {
        return Optional.ofNullable(this.maxThroughput);
    }

    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     * 
     */
    @Import(name="minInstances")
    private @Nullable Output<Integer> minInstances;

    /**
     * @return Minimum value of instances in autoscaling group underlying the connector.
     * 
     */
    public Optional<Output<Integer>> minInstances() {
        return Optional.ofNullable(this.minInstances);
    }

    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     * 
     */
    @Import(name="minThroughput")
    private @Nullable Output<Integer> minThroughput;

    /**
     * @return Minimum throughput of the connector in Mbps. Default and min is 200.
     * 
     */
    public Optional<Output<Integer>> minThroughput() {
        return Optional.ofNullable(this.minThroughput);
    }

    /**
     * The resource name in the format `projects/*{@literal /}locations/*{@literal /}connectors/*`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name in the format `projects/*{@literal /}locations/*{@literal /}connectors/*`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of a VPC network.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Name of a VPC network.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The subnet in which to house the VPC Access Connector.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<SubnetArgs> subnet;

    /**
     * @return The subnet in which to house the VPC Access Connector.
     * 
     */
    public Optional<Output<SubnetArgs>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    private ConnectorArgs() {}

    private ConnectorArgs(ConnectorArgs $) {
        this.connectorId = $.connectorId;
        this.ipCidrRange = $.ipCidrRange;
        this.location = $.location;
        this.machineType = $.machineType;
        this.maxInstances = $.maxInstances;
        this.maxThroughput = $.maxThroughput;
        this.minInstances = $.minInstances;
        this.minThroughput = $.minThroughput;
        this.name = $.name;
        this.network = $.network;
        this.project = $.project;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorArgs $;

        public Builder() {
            $ = new ConnectorArgs();
        }

        public Builder(ConnectorArgs defaults) {
            $ = new ConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId Required. The ID to use for this connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId Required. The ID to use for this connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param ipCidrRange The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(@Nullable Output<String> ipCidrRange) {
            $.ipCidrRange = ipCidrRange;
            return this;
        }

        /**
         * @param ipCidrRange The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(String ipCidrRange) {
            return ipCidrRange(Output.of(ipCidrRange));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param machineType Machine type of VM Instance underlying connector. Default is e2-micro
         * 
         * @return builder
         * 
         */
        public Builder machineType(@Nullable Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineType Machine type of VM Instance underlying connector. Default is e2-micro
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        /**
         * @param maxInstances Maximum value of instances in autoscaling group underlying the connector.
         * 
         * @return builder
         * 
         */
        public Builder maxInstances(@Nullable Output<Integer> maxInstances) {
            $.maxInstances = maxInstances;
            return this;
        }

        /**
         * @param maxInstances Maximum value of instances in autoscaling group underlying the connector.
         * 
         * @return builder
         * 
         */
        public Builder maxInstances(Integer maxInstances) {
            return maxInstances(Output.of(maxInstances));
        }

        /**
         * @param maxThroughput Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
         * 
         * @return builder
         * 
         */
        public Builder maxThroughput(@Nullable Output<Integer> maxThroughput) {
            $.maxThroughput = maxThroughput;
            return this;
        }

        /**
         * @param maxThroughput Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
         * 
         * @return builder
         * 
         */
        public Builder maxThroughput(Integer maxThroughput) {
            return maxThroughput(Output.of(maxThroughput));
        }

        /**
         * @param minInstances Minimum value of instances in autoscaling group underlying the connector.
         * 
         * @return builder
         * 
         */
        public Builder minInstances(@Nullable Output<Integer> minInstances) {
            $.minInstances = minInstances;
            return this;
        }

        /**
         * @param minInstances Minimum value of instances in autoscaling group underlying the connector.
         * 
         * @return builder
         * 
         */
        public Builder minInstances(Integer minInstances) {
            return minInstances(Output.of(minInstances));
        }

        /**
         * @param minThroughput Minimum throughput of the connector in Mbps. Default and min is 200.
         * 
         * @return builder
         * 
         */
        public Builder minThroughput(@Nullable Output<Integer> minThroughput) {
            $.minThroughput = minThroughput;
            return this;
        }

        /**
         * @param minThroughput Minimum throughput of the connector in Mbps. Default and min is 200.
         * 
         * @return builder
         * 
         */
        public Builder minThroughput(Integer minThroughput) {
            return minThroughput(Output.of(minThroughput));
        }

        /**
         * @param name The resource name in the format `projects/*{@literal /}locations/*{@literal /}connectors/*`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name in the format `projects/*{@literal /}locations/*{@literal /}connectors/*`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Name of a VPC network.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Name of a VPC network.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param subnet The subnet in which to house the VPC Access Connector.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<SubnetArgs> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The subnet in which to house the VPC Access Connector.
         * 
         * @return builder
         * 
         */
        public Builder subnet(SubnetArgs subnet) {
            return subnet(Output.of(subnet));
        }

        public ConnectorArgs build() {
            $.connectorId = Objects.requireNonNull($.connectorId, "expected parameter 'connectorId' to be non-null");
            return $;
        }
    }

}
