// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigeeregistry.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.apigeeregistry.v1.inputs.ConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Config of the Instance.
     * 
     */
    @Import(name="config", required=true)
    private Output<ConfigArgs> config;

    /**
     * @return Config of the Instance.
     * 
     */
    public Output<ConfigArgs> config() {
        return this.config;
    }

    /**
     * Required. Identifier to assign to the Instance. Must be unique within scope of the parent resource.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return Required. Identifier to assign to the Instance. Must be unique within scope of the parent resource.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Format: `projects/*{@literal /}locations/*{@literal /}instance`. Currently only locations/global is supported.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Format: `projects/*{@literal /}locations/*{@literal /}instance`. Currently only locations/global is supported.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.config = $.config;
        this.instanceId = $.instanceId;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config Config of the Instance.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<ConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Config of the Instance.
         * 
         * @return builder
         * 
         */
        public Builder config(ConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param instanceId Required. Identifier to assign to the Instance. Must be unique within scope of the parent resource.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Required. Identifier to assign to the Instance. Must be unique within scope of the parent resource.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Format: `projects/*{@literal /}locations/*{@literal /}instance`. Currently only locations/global is supported.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Format: `projects/*{@literal /}locations/*{@literal /}instance`. Currently only locations/global is supported.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public InstanceArgs build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            return $;
        }
    }

}
