// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;AND&#34;ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
 * 
 */
public final class TlsRouteRouteMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsRouteRouteMatchArgs Empty = new TlsRouteRouteMatchArgs();

    /**
     * Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: &#34;http/1.1&#34;, &#34;h2&#34;. At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
     * 
     */
    @Import(name="alpn")
    private @Nullable Output<List<String>> alpn;

    /**
     * @return Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: &#34;http/1.1&#34;, &#34;h2&#34;. At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
     * 
     */
    public Optional<Output<List<String>>> alpn() {
        return Optional.ofNullable(this.alpn);
    }

    /**
     * Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
     * 
     */
    @Import(name="sniHost")
    private @Nullable Output<List<String>> sniHost;

    /**
     * @return Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
     * 
     */
    public Optional<Output<List<String>>> sniHost() {
        return Optional.ofNullable(this.sniHost);
    }

    private TlsRouteRouteMatchArgs() {}

    private TlsRouteRouteMatchArgs(TlsRouteRouteMatchArgs $) {
        this.alpn = $.alpn;
        this.sniHost = $.sniHost;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsRouteRouteMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsRouteRouteMatchArgs $;

        public Builder() {
            $ = new TlsRouteRouteMatchArgs();
        }

        public Builder(TlsRouteRouteMatchArgs defaults) {
            $ = new TlsRouteRouteMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alpn Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: &#34;http/1.1&#34;, &#34;h2&#34;. At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
         * 
         * @return builder
         * 
         */
        public Builder alpn(@Nullable Output<List<String>> alpn) {
            $.alpn = alpn;
            return this;
        }

        /**
         * @param alpn Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: &#34;http/1.1&#34;, &#34;h2&#34;. At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
         * 
         * @return builder
         * 
         */
        public Builder alpn(List<String> alpn) {
            return alpn(Output.of(alpn));
        }

        /**
         * @param alpn Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: &#34;http/1.1&#34;, &#34;h2&#34;. At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
         * 
         * @return builder
         * 
         */
        public Builder alpn(String... alpn) {
            return alpn(List.of(alpn));
        }

        /**
         * @param sniHost Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
         * 
         * @return builder
         * 
         */
        public Builder sniHost(@Nullable Output<List<String>> sniHost) {
            $.sniHost = sniHost;
            return this;
        }

        /**
         * @param sniHost Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
         * 
         * @return builder
         * 
         */
        public Builder sniHost(List<String> sniHost) {
            return sniHost(Output.of(sniHost));
        }

        /**
         * @param sniHost Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
         * 
         * @return builder
         * 
         */
        public Builder sniHost(String... sniHost) {
            return sniHost(List.of(sniHost));
        }

        public TlsRouteRouteMatchArgs build() {
            return $;
        }
    }

}
