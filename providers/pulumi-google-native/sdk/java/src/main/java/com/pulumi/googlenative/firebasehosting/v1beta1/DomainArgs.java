// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasehosting.v1beta1.inputs.DomainRedirectArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * The domain name of the association.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The domain name of the association.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * If set, the domain should redirect with the provided parameters.
     * 
     */
    @Import(name="domainRedirect")
    private @Nullable Output<DomainRedirectArgs> domainRedirect;

    /**
     * @return If set, the domain should redirect with the provided parameters.
     * 
     */
    public Optional<Output<DomainRedirectArgs>> domainRedirect() {
        return Optional.ofNullable(this.domainRedirect);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The site name of the association.
     * 
     */
    @Import(name="site", required=true)
    private Output<String> site;

    /**
     * @return The site name of the association.
     * 
     */
    public Output<String> site() {
        return this.site;
    }

    @Import(name="siteId", required=true)
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.domainName = $.domainName;
        this.domainRedirect = $.domainRedirect;
        this.project = $.project;
        this.site = $.site;
        this.siteId = $.siteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName The domain name of the association.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name of the association.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainRedirect If set, the domain should redirect with the provided parameters.
         * 
         * @return builder
         * 
         */
        public Builder domainRedirect(@Nullable Output<DomainRedirectArgs> domainRedirect) {
            $.domainRedirect = domainRedirect;
            return this;
        }

        /**
         * @param domainRedirect If set, the domain should redirect with the provided parameters.
         * 
         * @return builder
         * 
         */
        public Builder domainRedirect(DomainRedirectArgs domainRedirect) {
            return domainRedirect(Output.of(domainRedirect));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param site The site name of the association.
         * 
         * @return builder
         * 
         */
        public Builder site(Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The site name of the association.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public DomainArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.site = Objects.requireNonNull($.site, "expected parameter 'site' to be non-null");
            $.siteId = Objects.requireNonNull($.siteId, "expected parameter 'siteId' to be non-null");
            return $;
        }
    }

}
