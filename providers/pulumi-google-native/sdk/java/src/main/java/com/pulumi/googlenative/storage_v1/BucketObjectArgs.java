// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage_v1;

import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storage_v1.inputs.BucketObjectCustomerEncryptionArgs;
import com.pulumi.googlenative.storage_v1.inputs.BucketObjectOwnerArgs;
import com.pulumi.googlenative.storage_v1.inputs.ObjectAccessControlArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketObjectArgs Empty = new BucketObjectArgs();

    /**
     * Access controls on the object.
     * 
     */
    @Import(name="acl")
    private @Nullable Output<List<ObjectAccessControlArgs>> acl;

    public Optional<Output<List<ObjectAccessControlArgs>>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * The name of the bucket containing this object.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
     * 
     */
    @Import(name="cacheControl")
    private @Nullable Output<String> cacheControl;

    public Optional<Output<String>> cacheControl() {
        return Optional.ofNullable(this.cacheControl);
    }

    /**
     * Number of underlying components that make up this object. Components are accumulated by compose operations.
     * 
     */
    @Import(name="componentCount")
    private @Nullable Output<Integer> componentCount;

    public Optional<Output<Integer>> componentCount() {
        return Optional.ofNullable(this.componentCount);
    }

    /**
     * Content-Disposition of the object data.
     * 
     */
    @Import(name="contentDisposition")
    private @Nullable Output<String> contentDisposition;

    public Optional<Output<String>> contentDisposition() {
        return Optional.ofNullable(this.contentDisposition);
    }

    /**
     * Content-Encoding of the object data.
     * 
     */
    @Import(name="contentEncoding")
    private @Nullable Output<String> contentEncoding;

    public Optional<Output<String>> contentEncoding() {
        return Optional.ofNullable(this.contentEncoding);
    }

    /**
     * Content-Language of the object data.
     * 
     */
    @Import(name="contentLanguage")
    private @Nullable Output<String> contentLanguage;

    public Optional<Output<String>> contentLanguage() {
        return Optional.ofNullable(this.contentLanguage);
    }

    /**
     * Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
     * 
     */
    @Import(name="crc32c")
    private @Nullable Output<String> crc32c;

    public Optional<Output<String>> crc32c() {
        return Optional.ofNullable(this.crc32c);
    }

    /**
     * A timestamp in RFC 3339 format specified by the user for an object.
     * 
     */
    @Import(name="customTime")
    private @Nullable Output<String> customTime;

    public Optional<Output<String>> customTime() {
        return Optional.ofNullable(this.customTime);
    }

    /**
     * Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
     * 
     */
    @Import(name="customerEncryption")
    private @Nullable Output<BucketObjectCustomerEncryptionArgs> customerEncryption;

    public Optional<Output<BucketObjectCustomerEncryptionArgs>> customerEncryption() {
        return Optional.ofNullable(this.customerEncryption);
    }

    /**
     * HTTP 1.1 Entity tag for the object.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold&#39;s release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
     * 
     */
    @Import(name="eventBasedHold")
    private @Nullable Output<Boolean> eventBasedHold;

    public Optional<Output<Boolean>> eventBasedHold() {
        return Optional.ofNullable(this.eventBasedHold);
    }

    /**
     * The content generation of this object. Used for object versioning.
     * 
     */
    @Import(name="generation")
    private @Nullable Output<String> generation;

    public Optional<Output<String>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * The ID of the object, including the bucket name, object name, and generation number.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="ifGenerationMatch")
    private @Nullable Output<String> ifGenerationMatch;

    public Optional<Output<String>> ifGenerationMatch() {
        return Optional.ofNullable(this.ifGenerationMatch);
    }

    @Import(name="ifGenerationNotMatch")
    private @Nullable Output<String> ifGenerationNotMatch;

    public Optional<Output<String>> ifGenerationNotMatch() {
        return Optional.ofNullable(this.ifGenerationNotMatch);
    }

    @Import(name="ifMetagenerationMatch")
    private @Nullable Output<String> ifMetagenerationMatch;

    public Optional<Output<String>> ifMetagenerationMatch() {
        return Optional.ofNullable(this.ifMetagenerationMatch);
    }

    @Import(name="ifMetagenerationNotMatch")
    private @Nullable Output<String> ifMetagenerationNotMatch;

    public Optional<Output<String>> ifMetagenerationNotMatch() {
        return Optional.ofNullable(this.ifMetagenerationNotMatch);
    }

    /**
     * The kind of item this is. For objects, this is always storage#object.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
     * 
     */
    @Import(name="kmsKeyName")
    private @Nullable Output<String> kmsKeyName;

    public Optional<Output<String>> kmsKeyName() {
        return Optional.ofNullable(this.kmsKeyName);
    }

    /**
     * MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
     * 
     */
    @Import(name="md5Hash")
    private @Nullable Output<String> md5Hash;

    public Optional<Output<String>> md5Hash() {
        return Optional.ofNullable(this.md5Hash);
    }

    /**
     * Media download link.
     * 
     */
    @Import(name="mediaLink")
    private @Nullable Output<String> mediaLink;

    public Optional<Output<String>> mediaLink() {
        return Optional.ofNullable(this.mediaLink);
    }

    /**
     * User-provided metadata, in key/value pairs.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
     * 
     */
    @Import(name="metageneration")
    private @Nullable Output<String> metageneration;

    public Optional<Output<String>> metageneration() {
        return Optional.ofNullable(this.metageneration);
    }

    /**
     * The name of the object. Required if not specified by URL parameter.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the object. This will always be the uploader of the object.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<BucketObjectOwnerArgs> owner;

    public Optional<Output<BucketObjectOwnerArgs>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="predefinedAcl")
    private @Nullable Output<String> predefinedAcl;

    public Optional<Output<String>> predefinedAcl() {
        return Optional.ofNullable(this.predefinedAcl);
    }

    @Import(name="projection")
    private @Nullable Output<String> projection;

    public Optional<Output<String>> projection() {
        return Optional.ofNullable(this.projection);
    }

    @Import(name="provisionalUserProject")
    private @Nullable Output<String> provisionalUserProject;

    public Optional<Output<String>> provisionalUserProject() {
        return Optional.ofNullable(this.provisionalUserProject);
    }

    /**
     * A server-determined value that specifies the earliest time that the object&#39;s retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
     * 
     */
    @Import(name="retentionExpirationTime")
    private @Nullable Output<String> retentionExpirationTime;

    public Optional<Output<String>> retentionExpirationTime() {
        return Optional.ofNullable(this.retentionExpirationTime);
    }

    /**
     * The link to this object.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Content-Length of the data in bytes.
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    @Import(name="source")
    private @Nullable Output<AssetOrArchive> source;

    public Optional<Output<AssetOrArchive>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Storage class of the object.
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    /**
     * Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
     * 
     */
    @Import(name="temporaryHold")
    private @Nullable Output<Boolean> temporaryHold;

    public Optional<Output<Boolean>> temporaryHold() {
        return Optional.ofNullable(this.temporaryHold);
    }

    /**
     * The creation time of the object in RFC 3339 format.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
     * 
     */
    @Import(name="timeDeleted")
    private @Nullable Output<String> timeDeleted;

    public Optional<Output<String>> timeDeleted() {
        return Optional.ofNullable(this.timeDeleted);
    }

    /**
     * The time at which the object&#39;s storage class was last changed. When the object is initially created, it will be set to timeCreated.
     * 
     */
    @Import(name="timeStorageClassUpdated")
    private @Nullable Output<String> timeStorageClassUpdated;

    public Optional<Output<String>> timeStorageClassUpdated() {
        return Optional.ofNullable(this.timeStorageClassUpdated);
    }

    /**
     * The modification time of the object metadata in RFC 3339 format.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    @Import(name="userProject")
    private @Nullable Output<String> userProject;

    public Optional<Output<String>> userProject() {
        return Optional.ofNullable(this.userProject);
    }

    private BucketObjectArgs() {}

    private BucketObjectArgs(BucketObjectArgs $) {
        this.acl = $.acl;
        this.bucket = $.bucket;
        this.cacheControl = $.cacheControl;
        this.componentCount = $.componentCount;
        this.contentDisposition = $.contentDisposition;
        this.contentEncoding = $.contentEncoding;
        this.contentLanguage = $.contentLanguage;
        this.contentType = $.contentType;
        this.crc32c = $.crc32c;
        this.customTime = $.customTime;
        this.customerEncryption = $.customerEncryption;
        this.etag = $.etag;
        this.eventBasedHold = $.eventBasedHold;
        this.generation = $.generation;
        this.id = $.id;
        this.ifGenerationMatch = $.ifGenerationMatch;
        this.ifGenerationNotMatch = $.ifGenerationNotMatch;
        this.ifMetagenerationMatch = $.ifMetagenerationMatch;
        this.ifMetagenerationNotMatch = $.ifMetagenerationNotMatch;
        this.kind = $.kind;
        this.kmsKeyName = $.kmsKeyName;
        this.md5Hash = $.md5Hash;
        this.mediaLink = $.mediaLink;
        this.metadata = $.metadata;
        this.metageneration = $.metageneration;
        this.name = $.name;
        this.owner = $.owner;
        this.predefinedAcl = $.predefinedAcl;
        this.projection = $.projection;
        this.provisionalUserProject = $.provisionalUserProject;
        this.retentionExpirationTime = $.retentionExpirationTime;
        this.selfLink = $.selfLink;
        this.size = $.size;
        this.source = $.source;
        this.storageClass = $.storageClass;
        this.temporaryHold = $.temporaryHold;
        this.timeCreated = $.timeCreated;
        this.timeDeleted = $.timeDeleted;
        this.timeStorageClassUpdated = $.timeStorageClassUpdated;
        this.updated = $.updated;
        this.userProject = $.userProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketObjectArgs $;

        public Builder() {
            $ = new BucketObjectArgs();
        }

        public Builder(BucketObjectArgs defaults) {
            $ = new BucketObjectArgs(Objects.requireNonNull(defaults));
        }

        public Builder acl(@Nullable Output<List<ObjectAccessControlArgs>> acl) {
            $.acl = acl;
            return this;
        }

        public Builder acl(List<ObjectAccessControlArgs> acl) {
            return acl(Output.of(acl));
        }

        public Builder acl(ObjectAccessControlArgs... acl) {
            return acl(List.of(acl));
        }

        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder cacheControl(@Nullable Output<String> cacheControl) {
            $.cacheControl = cacheControl;
            return this;
        }

        public Builder cacheControl(String cacheControl) {
            return cacheControl(Output.of(cacheControl));
        }

        public Builder componentCount(@Nullable Output<Integer> componentCount) {
            $.componentCount = componentCount;
            return this;
        }

        public Builder componentCount(Integer componentCount) {
            return componentCount(Output.of(componentCount));
        }

        public Builder contentDisposition(@Nullable Output<String> contentDisposition) {
            $.contentDisposition = contentDisposition;
            return this;
        }

        public Builder contentDisposition(String contentDisposition) {
            return contentDisposition(Output.of(contentDisposition));
        }

        public Builder contentEncoding(@Nullable Output<String> contentEncoding) {
            $.contentEncoding = contentEncoding;
            return this;
        }

        public Builder contentEncoding(String contentEncoding) {
            return contentEncoding(Output.of(contentEncoding));
        }

        public Builder contentLanguage(@Nullable Output<String> contentLanguage) {
            $.contentLanguage = contentLanguage;
            return this;
        }

        public Builder contentLanguage(String contentLanguage) {
            return contentLanguage(Output.of(contentLanguage));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder crc32c(@Nullable Output<String> crc32c) {
            $.crc32c = crc32c;
            return this;
        }

        public Builder crc32c(String crc32c) {
            return crc32c(Output.of(crc32c));
        }

        public Builder customTime(@Nullable Output<String> customTime) {
            $.customTime = customTime;
            return this;
        }

        public Builder customTime(String customTime) {
            return customTime(Output.of(customTime));
        }

        public Builder customerEncryption(@Nullable Output<BucketObjectCustomerEncryptionArgs> customerEncryption) {
            $.customerEncryption = customerEncryption;
            return this;
        }

        public Builder customerEncryption(BucketObjectCustomerEncryptionArgs customerEncryption) {
            return customerEncryption(Output.of(customerEncryption));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        public Builder eventBasedHold(@Nullable Output<Boolean> eventBasedHold) {
            $.eventBasedHold = eventBasedHold;
            return this;
        }

        public Builder eventBasedHold(Boolean eventBasedHold) {
            return eventBasedHold(Output.of(eventBasedHold));
        }

        public Builder generation(@Nullable Output<String> generation) {
            $.generation = generation;
            return this;
        }

        public Builder generation(String generation) {
            return generation(Output.of(generation));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder ifGenerationMatch(@Nullable Output<String> ifGenerationMatch) {
            $.ifGenerationMatch = ifGenerationMatch;
            return this;
        }

        public Builder ifGenerationMatch(String ifGenerationMatch) {
            return ifGenerationMatch(Output.of(ifGenerationMatch));
        }

        public Builder ifGenerationNotMatch(@Nullable Output<String> ifGenerationNotMatch) {
            $.ifGenerationNotMatch = ifGenerationNotMatch;
            return this;
        }

        public Builder ifGenerationNotMatch(String ifGenerationNotMatch) {
            return ifGenerationNotMatch(Output.of(ifGenerationNotMatch));
        }

        public Builder ifMetagenerationMatch(@Nullable Output<String> ifMetagenerationMatch) {
            $.ifMetagenerationMatch = ifMetagenerationMatch;
            return this;
        }

        public Builder ifMetagenerationMatch(String ifMetagenerationMatch) {
            return ifMetagenerationMatch(Output.of(ifMetagenerationMatch));
        }

        public Builder ifMetagenerationNotMatch(@Nullable Output<String> ifMetagenerationNotMatch) {
            $.ifMetagenerationNotMatch = ifMetagenerationNotMatch;
            return this;
        }

        public Builder ifMetagenerationNotMatch(String ifMetagenerationNotMatch) {
            return ifMetagenerationNotMatch(Output.of(ifMetagenerationNotMatch));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder kmsKeyName(@Nullable Output<String> kmsKeyName) {
            $.kmsKeyName = kmsKeyName;
            return this;
        }

        public Builder kmsKeyName(String kmsKeyName) {
            return kmsKeyName(Output.of(kmsKeyName));
        }

        public Builder md5Hash(@Nullable Output<String> md5Hash) {
            $.md5Hash = md5Hash;
            return this;
        }

        public Builder md5Hash(String md5Hash) {
            return md5Hash(Output.of(md5Hash));
        }

        public Builder mediaLink(@Nullable Output<String> mediaLink) {
            $.mediaLink = mediaLink;
            return this;
        }

        public Builder mediaLink(String mediaLink) {
            return mediaLink(Output.of(mediaLink));
        }

        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder metageneration(@Nullable Output<String> metageneration) {
            $.metageneration = metageneration;
            return this;
        }

        public Builder metageneration(String metageneration) {
            return metageneration(Output.of(metageneration));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<BucketObjectOwnerArgs> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(BucketObjectOwnerArgs owner) {
            return owner(Output.of(owner));
        }

        public Builder predefinedAcl(@Nullable Output<String> predefinedAcl) {
            $.predefinedAcl = predefinedAcl;
            return this;
        }

        public Builder predefinedAcl(String predefinedAcl) {
            return predefinedAcl(Output.of(predefinedAcl));
        }

        public Builder projection(@Nullable Output<String> projection) {
            $.projection = projection;
            return this;
        }

        public Builder projection(String projection) {
            return projection(Output.of(projection));
        }

        public Builder provisionalUserProject(@Nullable Output<String> provisionalUserProject) {
            $.provisionalUserProject = provisionalUserProject;
            return this;
        }

        public Builder provisionalUserProject(String provisionalUserProject) {
            return provisionalUserProject(Output.of(provisionalUserProject));
        }

        public Builder retentionExpirationTime(@Nullable Output<String> retentionExpirationTime) {
            $.retentionExpirationTime = retentionExpirationTime;
            return this;
        }

        public Builder retentionExpirationTime(String retentionExpirationTime) {
            return retentionExpirationTime(Output.of(retentionExpirationTime));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        public Builder size(String size) {
            return size(Output.of(size));
        }

        public Builder source(@Nullable Output<AssetOrArchive> source) {
            $.source = source;
            return this;
        }

        public Builder source(AssetOrArchive source) {
            return source(Output.of(source));
        }

        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public Builder temporaryHold(@Nullable Output<Boolean> temporaryHold) {
            $.temporaryHold = temporaryHold;
            return this;
        }

        public Builder temporaryHold(Boolean temporaryHold) {
            return temporaryHold(Output.of(temporaryHold));
        }

        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public Builder timeDeleted(@Nullable Output<String> timeDeleted) {
            $.timeDeleted = timeDeleted;
            return this;
        }

        public Builder timeDeleted(String timeDeleted) {
            return timeDeleted(Output.of(timeDeleted));
        }

        public Builder timeStorageClassUpdated(@Nullable Output<String> timeStorageClassUpdated) {
            $.timeStorageClassUpdated = timeStorageClassUpdated;
            return this;
        }

        public Builder timeStorageClassUpdated(String timeStorageClassUpdated) {
            return timeStorageClassUpdated(Output.of(timeStorageClassUpdated));
        }

        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public Builder userProject(@Nullable Output<String> userProject) {
            $.userProject = userProject;
            return this;
        }

        public Builder userProject(String userProject) {
            return userProject(Output.of(userProject));
        }

        public BucketObjectArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            return $;
        }
    }

}
