// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VP9 codec settings.
 * 
 */
public final class Vp9CodecSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final Vp9CodecSettingsArgs Empty = new Vp9CodecSettingsArgs();

    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
     * 
     */
    @Import(name="bitrateBps", required=true)
    private Output<Integer> bitrateBps;

    /**
     * @return The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
     * 
     */
    public Output<Integer> bitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
     * 
     */
    @Import(name="crfLevel")
    private @Nullable Output<Integer> crfLevel;

    /**
     * @return Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
     * 
     */
    public Optional<Output<Integer>> crfLevel() {
        return Optional.ofNullable(this.crfLevel);
    }

    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    @Import(name="frameRate", required=true)
    private Output<Double> frameRate;

    /**
     * @return The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    public Output<Double> frameRate() {
        return this.frameRate;
    }

    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    @Import(name="gopDuration")
    private @Nullable Output<String> gopDuration;

    /**
     * @return Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    public Optional<Output<String>> gopDuration() {
        return Optional.ofNullable(this.gopDuration);
    }

    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    @Import(name="gopFrameCount")
    private @Nullable Output<Integer> gopFrameCount;

    /**
     * @return Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    public Optional<Output<Integer>> gopFrameCount() {
        return Optional.ofNullable(this.gopFrameCount);
    }

    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    @Import(name="heightPixels")
    private @Nullable Output<Integer> heightPixels;

    /**
     * @return The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    public Optional<Output<Integer>> heightPixels() {
        return Optional.ofNullable(this.heightPixels);
    }

    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    @Import(name="pixelFormat")
    private @Nullable Output<String> pixelFormat;

    /**
     * @return Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    public Optional<Output<String>> pixelFormat() {
        return Optional.ofNullable(this.pixelFormat);
    }

    /**
     * Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
     * 
     */
    @Import(name="rateControlMode")
    private @Nullable Output<String> rateControlMode;

    /**
     * @return Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
     * 
     */
    public Optional<Output<String>> rateControlMode() {
        return Optional.ofNullable(this.rateControlMode);
    }

    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    @Import(name="widthPixels")
    private @Nullable Output<Integer> widthPixels;

    /**
     * @return The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    public Optional<Output<Integer>> widthPixels() {
        return Optional.ofNullable(this.widthPixels);
    }

    private Vp9CodecSettingsArgs() {}

    private Vp9CodecSettingsArgs(Vp9CodecSettingsArgs $) {
        this.bitrateBps = $.bitrateBps;
        this.crfLevel = $.crfLevel;
        this.frameRate = $.frameRate;
        this.gopDuration = $.gopDuration;
        this.gopFrameCount = $.gopFrameCount;
        this.heightPixels = $.heightPixels;
        this.pixelFormat = $.pixelFormat;
        this.profile = $.profile;
        this.rateControlMode = $.rateControlMode;
        this.widthPixels = $.widthPixels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Vp9CodecSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Vp9CodecSettingsArgs $;

        public Builder() {
            $ = new Vp9CodecSettingsArgs();
        }

        public Builder(Vp9CodecSettingsArgs defaults) {
            $ = new Vp9CodecSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrateBps The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Output<Integer> bitrateBps) {
            $.bitrateBps = bitrateBps;
            return this;
        }

        /**
         * @param bitrateBps The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Integer bitrateBps) {
            return bitrateBps(Output.of(bitrateBps));
        }

        /**
         * @param crfLevel Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(@Nullable Output<Integer> crfLevel) {
            $.crfLevel = crfLevel;
            return this;
        }

        /**
         * @param crfLevel Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(Integer crfLevel) {
            return crfLevel(Output.of(crfLevel));
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Output<Double> frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Double frameRate) {
            return frameRate(Output.of(frameRate));
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(@Nullable Output<String> gopDuration) {
            $.gopDuration = gopDuration;
            return this;
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(String gopDuration) {
            return gopDuration(Output.of(gopDuration));
        }

        /**
         * @param gopFrameCount Select the GOP size based on the specified frame count. Must be greater than zero.
         * 
         * @return builder
         * 
         */
        public Builder gopFrameCount(@Nullable Output<Integer> gopFrameCount) {
            $.gopFrameCount = gopFrameCount;
            return this;
        }

        /**
         * @param gopFrameCount Select the GOP size based on the specified frame count. Must be greater than zero.
         * 
         * @return builder
         * 
         */
        public Builder gopFrameCount(Integer gopFrameCount) {
            return gopFrameCount(Output.of(gopFrameCount));
        }

        /**
         * @param heightPixels The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(@Nullable Output<Integer> heightPixels) {
            $.heightPixels = heightPixels;
            return this;
        }

        /**
         * @param heightPixels The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(Integer heightPixels) {
            return heightPixels(Output.of(heightPixels));
        }

        /**
         * @param pixelFormat Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(@Nullable Output<String> pixelFormat) {
            $.pixelFormat = pixelFormat;
            return this;
        }

        /**
         * @param pixelFormat Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(String pixelFormat) {
            return pixelFormat(Output.of(pixelFormat));
        }

        /**
         * @param profile Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param rateControlMode Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(@Nullable Output<String> rateControlMode) {
            $.rateControlMode = rateControlMode;
            return this;
        }

        /**
         * @param rateControlMode Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(String rateControlMode) {
            return rateControlMode(Output.of(rateControlMode));
        }

        /**
         * @param widthPixels The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(@Nullable Output<Integer> widthPixels) {
            $.widthPixels = widthPixels;
            return this;
        }

        /**
         * @param widthPixels The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(Integer widthPixels) {
            return widthPixels(Output.of(widthPixels));
        }

        public Vp9CodecSettingsArgs build() {
            $.bitrateBps = Objects.requireNonNull($.bitrateBps, "expected parameter 'bitrateBps' to be non-null");
            $.frameRate = Objects.requireNonNull($.frameRate, "expected parameter 'frameRate' to be non-null");
            return $;
        }
    }

}
