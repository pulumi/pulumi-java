// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The desired state of the Domain Mapping.
 * 
 */
public final class DomainMappingSpecResponse extends com.pulumi.resources.InvokeArgs {

    public static final DomainMappingSpecResponse Empty = new DomainMappingSpecResponse();

    /**
     * The mode of the certificate.
     * 
     */
    @Import(name="certificateMode", required=true)
    private String certificateMode;

    /**
     * @return The mode of the certificate.
     * 
     */
    public String certificateMode() {
        return this.certificateMode;
    }

    /**
     * If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
     * 
     */
    @Import(name="forceOverride", required=true)
    private Boolean forceOverride;

    /**
     * @return If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
     * 
     */
    public Boolean forceOverride() {
        return this.forceOverride;
    }

    /**
     * The name of the Knative Route that this DomainMapping applies to. The route must exist.
     * 
     */
    @Import(name="routeName", required=true)
    private String routeName;

    /**
     * @return The name of the Knative Route that this DomainMapping applies to. The route must exist.
     * 
     */
    public String routeName() {
        return this.routeName;
    }

    private DomainMappingSpecResponse() {}

    private DomainMappingSpecResponse(DomainMappingSpecResponse $) {
        this.certificateMode = $.certificateMode;
        this.forceOverride = $.forceOverride;
        this.routeName = $.routeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainMappingSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainMappingSpecResponse $;

        public Builder() {
            $ = new DomainMappingSpecResponse();
        }

        public Builder(DomainMappingSpecResponse defaults) {
            $ = new DomainMappingSpecResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateMode The mode of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(String certificateMode) {
            $.certificateMode = certificateMode;
            return this;
        }

        /**
         * @param forceOverride If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
         * 
         * @return builder
         * 
         */
        public Builder forceOverride(Boolean forceOverride) {
            $.forceOverride = forceOverride;
            return this;
        }

        /**
         * @param routeName The name of the Knative Route that this DomainMapping applies to. The route must exist.
         * 
         * @return builder
         * 
         */
        public Builder routeName(String routeName) {
            $.routeName = routeName;
            return this;
        }

        public DomainMappingSpecResponse build() {
            $.certificateMode = Objects.requireNonNull($.certificateMode, "expected parameter 'certificateMode' to be non-null");
            $.forceOverride = Objects.requireNonNull($.forceOverride, "expected parameter 'forceOverride' to be non-null");
            $.routeName = Objects.requireNonNull($.routeName, "expected parameter 'routeName' to be non-null");
            return $;
        }
    }

}
