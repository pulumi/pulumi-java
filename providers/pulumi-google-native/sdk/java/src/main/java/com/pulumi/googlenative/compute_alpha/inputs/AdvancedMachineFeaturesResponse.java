// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


/**
 * Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
 * 
 */
public final class AdvancedMachineFeaturesResponse extends com.pulumi.resources.InvokeArgs {

    public static final AdvancedMachineFeaturesResponse Empty = new AdvancedMachineFeaturesResponse();

    /**
     * Whether to enable nested virtualization or not (default is false).
     * 
     */
    @Import(name="enableNestedVirtualization", required=true)
    private Boolean enableNestedVirtualization;

    public Boolean enableNestedVirtualization() {
        return this.enableNestedVirtualization;
    }

    /**
     * Whether to enable UEFI networking for instance creation.
     * 
     */
    @Import(name="enableUefiNetworking", required=true)
    private Boolean enableUefiNetworking;

    public Boolean enableUefiNetworking() {
        return this.enableUefiNetworking;
    }

    /**
     * The number of vNUMA nodes.
     * 
     */
    @Import(name="numaNodeCount", required=true)
    private Integer numaNodeCount;

    public Integer numaNodeCount() {
        return this.numaNodeCount;
    }

    /**
     * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    @Import(name="threadsPerCore", required=true)
    private Integer threadsPerCore;

    public Integer threadsPerCore() {
        return this.threadsPerCore;
    }

    /**
     * The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance&#39;s nominal CPU count and the underlying platform&#39;s SMT width.
     * 
     */
    @Import(name="visibleCoreCount", required=true)
    private Integer visibleCoreCount;

    public Integer visibleCoreCount() {
        return this.visibleCoreCount;
    }

    private AdvancedMachineFeaturesResponse() {}

    private AdvancedMachineFeaturesResponse(AdvancedMachineFeaturesResponse $) {
        this.enableNestedVirtualization = $.enableNestedVirtualization;
        this.enableUefiNetworking = $.enableUefiNetworking;
        this.numaNodeCount = $.numaNodeCount;
        this.threadsPerCore = $.threadsPerCore;
        this.visibleCoreCount = $.visibleCoreCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedMachineFeaturesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedMachineFeaturesResponse $;

        public Builder() {
            $ = new AdvancedMachineFeaturesResponse();
        }

        public Builder(AdvancedMachineFeaturesResponse defaults) {
            $ = new AdvancedMachineFeaturesResponse(Objects.requireNonNull(defaults));
        }

        public Builder enableNestedVirtualization(Boolean enableNestedVirtualization) {
            $.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }

        public Builder enableUefiNetworking(Boolean enableUefiNetworking) {
            $.enableUefiNetworking = enableUefiNetworking;
            return this;
        }

        public Builder numaNodeCount(Integer numaNodeCount) {
            $.numaNodeCount = numaNodeCount;
            return this;
        }

        public Builder threadsPerCore(Integer threadsPerCore) {
            $.threadsPerCore = threadsPerCore;
            return this;
        }

        public Builder visibleCoreCount(Integer visibleCoreCount) {
            $.visibleCoreCount = visibleCoreCount;
            return this;
        }

        public AdvancedMachineFeaturesResponse build() {
            $.enableNestedVirtualization = Objects.requireNonNull($.enableNestedVirtualization, "expected parameter 'enableNestedVirtualization' to be non-null");
            $.enableUefiNetworking = Objects.requireNonNull($.enableUefiNetworking, "expected parameter 'enableUefiNetworking' to be non-null");
            $.numaNodeCount = Objects.requireNonNull($.numaNodeCount, "expected parameter 'numaNodeCount' to be non-null");
            $.threadsPerCore = Objects.requireNonNull($.threadsPerCore, "expected parameter 'threadsPerCore' to be non-null");
            $.visibleCoreCount = Objects.requireNonNull($.visibleCoreCount, "expected parameter 'visibleCoreCount' to be non-null");
            return $;
        }
    }

}
