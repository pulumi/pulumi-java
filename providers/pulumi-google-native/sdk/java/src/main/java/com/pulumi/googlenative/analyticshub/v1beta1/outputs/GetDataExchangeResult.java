// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.analyticshub.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDataExchangeResult {
    /**
     * @return Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
     * 
     */
    private final String description;
    /**
     * @return Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.
     * 
     */
    private final String displayName;
    /**
     * @return Optional. Documentation describing the data exchange.
     * 
     */
    private final String documentation;
    /**
     * @return Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
     * 
     */
    private final String icon;
    /**
     * @return Number of listings contained in the data exchange.
     * 
     */
    private final Integer listingCount;
    /**
     * @return The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.
     * 
     */
    private final String name;
    /**
     * @return Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.
     * 
     */
    private final String primaryContact;

    @CustomType.Constructor
    private GetDataExchangeResult(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("documentation") String documentation,
        @CustomType.Parameter("icon") String icon,
        @CustomType.Parameter("listingCount") Integer listingCount,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("primaryContact") String primaryContact) {
        this.description = description;
        this.displayName = displayName;
        this.documentation = documentation;
        this.icon = icon;
        this.listingCount = listingCount;
        this.name = name;
        this.primaryContact = primaryContact;
    }

    /**
     * @return Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Optional. Documentation describing the data exchange.
     * 
     */
    public String documentation() {
        return this.documentation;
    }
    /**
     * @return Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
     * 
     */
    public String icon() {
        return this.icon;
    }
    /**
     * @return Number of listings contained in the data exchange.
     * 
     */
    public Integer listingCount() {
        return this.listingCount;
    }
    /**
     * @return The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.
     * 
     */
    public String primaryContact() {
        return this.primaryContact;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataExchangeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String displayName;
        private String documentation;
        private String icon;
        private Integer listingCount;
        private String name;
        private String primaryContact;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDataExchangeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.documentation = defaults.documentation;
    	      this.icon = defaults.icon;
    	      this.listingCount = defaults.listingCount;
    	      this.name = defaults.name;
    	      this.primaryContact = defaults.primaryContact;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder documentation(String documentation) {
            this.documentation = Objects.requireNonNull(documentation);
            return this;
        }
        public Builder icon(String icon) {
            this.icon = Objects.requireNonNull(icon);
            return this;
        }
        public Builder listingCount(Integer listingCount) {
            this.listingCount = Objects.requireNonNull(listingCount);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder primaryContact(String primaryContact) {
            this.primaryContact = Objects.requireNonNull(primaryContact);
            return this;
        }        public GetDataExchangeResult build() {
            return new GetDataExchangeResult(description, displayName, documentation, icon, listingCount, name, primaryContact);
        }
    }
}
