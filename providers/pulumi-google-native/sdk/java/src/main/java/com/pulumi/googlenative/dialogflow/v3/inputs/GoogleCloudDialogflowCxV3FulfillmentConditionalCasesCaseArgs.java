// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow.v3.inputs.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively.
 * 
 */
public final class GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs Empty = new GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs();

    /**
     * A list of case content.
     * 
     */
    @Import(name="caseContent")
    private @Nullable Output<List<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentArgs>> caseContent;

    /**
     * @return A list of case content.
     * 
     */
    public Optional<Output<List<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentArgs>>> caseContent() {
        return Optional.ofNullable(this.caseContent);
    }

    /**
     * The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    private GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs() {}

    private GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs(GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs $) {
        this.caseContent = $.caseContent;
        this.condition = $.condition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs();
        }

        public Builder(GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs defaults) {
            $ = new GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caseContent A list of case content.
         * 
         * @return builder
         * 
         */
        public Builder caseContent(@Nullable Output<List<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentArgs>> caseContent) {
            $.caseContent = caseContent;
            return this;
        }

        /**
         * @param caseContent A list of case content.
         * 
         * @return builder
         * 
         */
        public Builder caseContent(List<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentArgs> caseContent) {
            return caseContent(Output.of(caseContent));
        }

        /**
         * @param caseContent A list of case content.
         * 
         * @return builder
         * 
         */
        public Builder caseContent(GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentArgs... caseContent) {
            return caseContent(List.of(caseContent));
        }

        /**
         * @param condition The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseArgs build() {
            return $;
        }
    }

}
