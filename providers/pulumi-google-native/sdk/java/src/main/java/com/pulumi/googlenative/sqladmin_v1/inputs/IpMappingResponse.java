// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Database instance IP Mapping.
 * 
 */
public final class IpMappingResponse extends com.pulumi.resources.InvokeArgs {

    public static final IpMappingResponse Empty = new IpMappingResponse();

    /**
     * The IP address assigned.
     * 
     */
    @Import(name="ipAddress", required=true)
    private String ipAddress;

    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
     * 
     */
    @Import(name="timeToRetire", required=true)
    private String timeToRetire;

    public String timeToRetire() {
        return this.timeToRetire;
    }

    /**
     * The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private IpMappingResponse() {}

    private IpMappingResponse(IpMappingResponse $) {
        this.ipAddress = $.ipAddress;
        this.timeToRetire = $.timeToRetire;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpMappingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpMappingResponse $;

        public Builder() {
            $ = new IpMappingResponse();
        }

        public Builder(IpMappingResponse defaults) {
            $ = new IpMappingResponse(Objects.requireNonNull(defaults));
        }

        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder timeToRetire(String timeToRetire) {
            $.timeToRetire = timeToRetire;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public IpMappingResponse build() {
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.timeToRetire = Objects.requireNonNull($.timeToRetire, "expected parameter 'timeToRetire' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
