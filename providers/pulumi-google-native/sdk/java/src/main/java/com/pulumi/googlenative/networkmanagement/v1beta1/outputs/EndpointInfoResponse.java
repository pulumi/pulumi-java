// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkmanagement.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class EndpointInfoResponse {
    /**
     * @return Destination IP address.
     * 
     */
    private final String destinationIp;
    /**
     * @return URI of the network where this packet is sent to.
     * 
     */
    private final String destinationNetworkUri;
    /**
     * @return Destination port. Only valid when protocol is TCP or UDP.
     * 
     */
    private final Integer destinationPort;
    /**
     * @return IP protocol in string format, for example: &#34;TCP&#34;, &#34;UDP&#34;, &#34;ICMP&#34;.
     * 
     */
    private final String protocol;
    /**
     * @return URI of the source telemetry agent this packet originates from.
     * 
     */
    private final String sourceAgentUri;
    /**
     * @return Source IP address.
     * 
     */
    private final String sourceIp;
    /**
     * @return URI of the network where this packet originates from.
     * 
     */
    private final String sourceNetworkUri;
    /**
     * @return Source port. Only valid when protocol is TCP or UDP.
     * 
     */
    private final Integer sourcePort;

    @CustomType.Constructor
    private EndpointInfoResponse(
        @CustomType.Parameter("destinationIp") String destinationIp,
        @CustomType.Parameter("destinationNetworkUri") String destinationNetworkUri,
        @CustomType.Parameter("destinationPort") Integer destinationPort,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("sourceAgentUri") String sourceAgentUri,
        @CustomType.Parameter("sourceIp") String sourceIp,
        @CustomType.Parameter("sourceNetworkUri") String sourceNetworkUri,
        @CustomType.Parameter("sourcePort") Integer sourcePort) {
        this.destinationIp = destinationIp;
        this.destinationNetworkUri = destinationNetworkUri;
        this.destinationPort = destinationPort;
        this.protocol = protocol;
        this.sourceAgentUri = sourceAgentUri;
        this.sourceIp = sourceIp;
        this.sourceNetworkUri = sourceNetworkUri;
        this.sourcePort = sourcePort;
    }

    /**
     * @return Destination IP address.
     * 
     */
    public String destinationIp() {
        return this.destinationIp;
    }
    /**
     * @return URI of the network where this packet is sent to.
     * 
     */
    public String destinationNetworkUri() {
        return this.destinationNetworkUri;
    }
    /**
     * @return Destination port. Only valid when protocol is TCP or UDP.
     * 
     */
    public Integer destinationPort() {
        return this.destinationPort;
    }
    /**
     * @return IP protocol in string format, for example: &#34;TCP&#34;, &#34;UDP&#34;, &#34;ICMP&#34;.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return URI of the source telemetry agent this packet originates from.
     * 
     */
    public String sourceAgentUri() {
        return this.sourceAgentUri;
    }
    /**
     * @return Source IP address.
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return URI of the network where this packet originates from.
     * 
     */
    public String sourceNetworkUri() {
        return this.sourceNetworkUri;
    }
    /**
     * @return Source port. Only valid when protocol is TCP or UDP.
     * 
     */
    public Integer sourcePort() {
        return this.sourcePort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String destinationIp;
        private String destinationNetworkUri;
        private Integer destinationPort;
        private String protocol;
        private String sourceAgentUri;
        private String sourceIp;
        private String sourceNetworkUri;
        private Integer sourcePort;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationIp = defaults.destinationIp;
    	      this.destinationNetworkUri = defaults.destinationNetworkUri;
    	      this.destinationPort = defaults.destinationPort;
    	      this.protocol = defaults.protocol;
    	      this.sourceAgentUri = defaults.sourceAgentUri;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceNetworkUri = defaults.sourceNetworkUri;
    	      this.sourcePort = defaults.sourcePort;
        }

        public Builder destinationIp(String destinationIp) {
            this.destinationIp = Objects.requireNonNull(destinationIp);
            return this;
        }
        public Builder destinationNetworkUri(String destinationNetworkUri) {
            this.destinationNetworkUri = Objects.requireNonNull(destinationNetworkUri);
            return this;
        }
        public Builder destinationPort(Integer destinationPort) {
            this.destinationPort = Objects.requireNonNull(destinationPort);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder sourceAgentUri(String sourceAgentUri) {
            this.sourceAgentUri = Objects.requireNonNull(sourceAgentUri);
            return this;
        }
        public Builder sourceIp(String sourceIp) {
            this.sourceIp = Objects.requireNonNull(sourceIp);
            return this;
        }
        public Builder sourceNetworkUri(String sourceNetworkUri) {
            this.sourceNetworkUri = Objects.requireNonNull(sourceNetworkUri);
            return this;
        }
        public Builder sourcePort(Integer sourcePort) {
            this.sourcePort = Objects.requireNonNull(sourcePort);
            return this;
        }        public EndpointInfoResponse build() {
            return new EndpointInfoResponse(destinationIp, destinationNetworkUri, destinationPort, protocol, sourceAgentUri, sourceIp, sourceNetworkUri, sourcePort);
        }
    }
}
