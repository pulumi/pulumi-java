// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine_v1beta.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * An SSL certificate obtained from a certificate authority.
 * 
 */
public final class CertificateRawDataResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateRawDataResponse Empty = new CertificateRawDataResponse();

    /**
     * Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
     * 
     */
    @Import(name="privateKey", required=true)
    private String privateKey;

    /**
     * @return Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }

    /**
     * PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
     * 
     */
    @Import(name="publicCertificate", required=true)
    private String publicCertificate;

    /**
     * @return PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
     * 
     */
    public String publicCertificate() {
        return this.publicCertificate;
    }

    private CertificateRawDataResponse() {}

    private CertificateRawDataResponse(CertificateRawDataResponse $) {
        this.privateKey = $.privateKey;
        this.publicCertificate = $.publicCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateRawDataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateRawDataResponse $;

        public Builder() {
            $ = new CertificateRawDataResponse();
        }

        public Builder(CertificateRawDataResponse defaults) {
            $ = new CertificateRawDataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param privateKey Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param publicCertificate PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(String publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        public CertificateRawDataResponse build() {
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.publicCertificate = Objects.requireNonNull($.publicCertificate, "expected parameter 'publicCertificate' to be non-null");
            return $;
        }
    }

}
