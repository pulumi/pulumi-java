// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.inputs.PermissionConstraintArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * [Deprecated] All fields defined in a permission are ANDed.
 * 
 */
public final class PermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionArgs Empty = new PermissionArgs();

    /**
     * Extra custom constraints. The constraints are ANDed together.
     * 
     */
    @Import(name="constraints")
    private @Nullable Output<List<PermissionConstraintArgs>> constraints;

    /**
     * @return Extra custom constraints. The constraints are ANDed together.
     * 
     */
    public Optional<Output<List<PermissionConstraintArgs>>> constraints() {
        return Optional.ofNullable(this.constraints);
    }

    /**
     * Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<String>> hosts;

    /**
     * @return Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
     * 
     */
    public Optional<Output<List<String>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * HTTP method.
     * 
     */
    @Import(name="methods")
    private @Nullable Output<List<String>> methods;

    /**
     * @return HTTP method.
     * 
     */
    public Optional<Output<List<String>>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * Negate of hosts. Specifies exclusions.
     * 
     */
    @Import(name="notHosts")
    private @Nullable Output<List<String>> notHosts;

    /**
     * @return Negate of hosts. Specifies exclusions.
     * 
     */
    public Optional<Output<List<String>>> notHosts() {
        return Optional.ofNullable(this.notHosts);
    }

    /**
     * Negate of methods. Specifies exclusions.
     * 
     */
    @Import(name="notMethods")
    private @Nullable Output<List<String>> notMethods;

    /**
     * @return Negate of methods. Specifies exclusions.
     * 
     */
    public Optional<Output<List<String>>> notMethods() {
        return Optional.ofNullable(this.notMethods);
    }

    /**
     * Negate of paths. Specifies exclusions.
     * 
     */
    @Import(name="notPaths")
    private @Nullable Output<List<String>> notPaths;

    /**
     * @return Negate of paths. Specifies exclusions.
     * 
     */
    public Optional<Output<List<String>>> notPaths() {
        return Optional.ofNullable(this.notPaths);
    }

    /**
     * Negate of ports. Specifies exclusions.
     * 
     */
    @Import(name="notPorts")
    private @Nullable Output<List<String>> notPorts;

    /**
     * @return Negate of ports. Specifies exclusions.
     * 
     */
    public Optional<Output<List<String>>> notPorts() {
        return Optional.ofNullable(this.notPorts);
    }

    /**
     * HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<List<String>> paths;

    /**
     * @return HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
     * 
     */
    public Optional<Output<List<String>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * Port names or numbers.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return Port names or numbers.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    private PermissionArgs() {}

    private PermissionArgs(PermissionArgs $) {
        this.constraints = $.constraints;
        this.hosts = $.hosts;
        this.methods = $.methods;
        this.notHosts = $.notHosts;
        this.notMethods = $.notMethods;
        this.notPaths = $.notPaths;
        this.notPorts = $.notPorts;
        this.paths = $.paths;
        this.ports = $.ports;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionArgs $;

        public Builder() {
            $ = new PermissionArgs();
        }

        public Builder(PermissionArgs defaults) {
            $ = new PermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param constraints Extra custom constraints. The constraints are ANDed together.
         * 
         * @return builder
         * 
         */
        public Builder constraints(@Nullable Output<List<PermissionConstraintArgs>> constraints) {
            $.constraints = constraints;
            return this;
        }

        /**
         * @param constraints Extra custom constraints. The constraints are ANDed together.
         * 
         * @return builder
         * 
         */
        public Builder constraints(List<PermissionConstraintArgs> constraints) {
            return constraints(Output.of(constraints));
        }

        /**
         * @param constraints Extra custom constraints. The constraints are ANDed together.
         * 
         * @return builder
         * 
         */
        public Builder constraints(PermissionConstraintArgs... constraints) {
            return constraints(List.of(constraints));
        }

        /**
         * @param hosts Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param methods HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder methods(@Nullable Output<List<String>> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder methods(List<String> methods) {
            return methods(Output.of(methods));
        }

        /**
         * @param methods HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param notHosts Negate of hosts. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notHosts(@Nullable Output<List<String>> notHosts) {
            $.notHosts = notHosts;
            return this;
        }

        /**
         * @param notHosts Negate of hosts. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notHosts(List<String> notHosts) {
            return notHosts(Output.of(notHosts));
        }

        /**
         * @param notHosts Negate of hosts. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notHosts(String... notHosts) {
            return notHosts(List.of(notHosts));
        }

        /**
         * @param notMethods Negate of methods. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notMethods(@Nullable Output<List<String>> notMethods) {
            $.notMethods = notMethods;
            return this;
        }

        /**
         * @param notMethods Negate of methods. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notMethods(List<String> notMethods) {
            return notMethods(Output.of(notMethods));
        }

        /**
         * @param notMethods Negate of methods. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notMethods(String... notMethods) {
            return notMethods(List.of(notMethods));
        }

        /**
         * @param notPaths Negate of paths. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notPaths(@Nullable Output<List<String>> notPaths) {
            $.notPaths = notPaths;
            return this;
        }

        /**
         * @param notPaths Negate of paths. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notPaths(List<String> notPaths) {
            return notPaths(Output.of(notPaths));
        }

        /**
         * @param notPaths Negate of paths. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notPaths(String... notPaths) {
            return notPaths(List.of(notPaths));
        }

        /**
         * @param notPorts Negate of ports. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notPorts(@Nullable Output<List<String>> notPorts) {
            $.notPorts = notPorts;
            return this;
        }

        /**
         * @param notPorts Negate of ports. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notPorts(List<String> notPorts) {
            return notPorts(Output.of(notPorts));
        }

        /**
         * @param notPorts Negate of ports. Specifies exclusions.
         * 
         * @return builder
         * 
         */
        public Builder notPorts(String... notPorts) {
            return notPorts(List.of(notPorts));
        }

        /**
         * @param paths HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param ports Port names or numbers.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports Port names or numbers.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports Port names or numbers.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        public PermissionArgs build() {
            return $;
        }
    }

}
