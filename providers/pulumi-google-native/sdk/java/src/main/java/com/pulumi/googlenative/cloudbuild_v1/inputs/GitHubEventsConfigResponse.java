// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PullRequestFilterResponse;
import com.pulumi.googlenative.cloudbuild_v1.inputs.PushFilterResponse;
import java.lang.String;
import java.util.Objects;


/**
 * GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
 * 
 */
public final class GitHubEventsConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitHubEventsConfigResponse Empty = new GitHubEventsConfigResponse();

    /**
     * Optional. The resource name of the github enterprise config that should be applied to this installation. For example: &#34;projects/{$project_id}/githubEnterpriseConfigs/{$config_id}&#34;
     * 
     */
    @Import(name="enterpriseConfigResourceName", required=true)
    private String enterpriseConfigResourceName;

    public String enterpriseConfigResourceName() {
        return this.enterpriseConfigResourceName;
    }

    /**
     * The installationID that emits the GitHub event.
     * 
     */
    @Import(name="installationId", required=true)
    private String installationId;

    public String installationId() {
        return this.installationId;
    }

    /**
     * Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is &#34;cloud-builders&#34;.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is &#34;googlecloudplatform&#34;.
     * 
     */
    @Import(name="owner", required=true)
    private String owner;

    public String owner() {
        return this.owner;
    }

    /**
     * filter to match changes in pull requests.
     * 
     */
    @Import(name="pullRequest", required=true)
    private PullRequestFilterResponse pullRequest;

    public PullRequestFilterResponse pullRequest() {
        return this.pullRequest;
    }

    /**
     * filter to match changes in refs like branches, tags.
     * 
     */
    @Import(name="push", required=true)
    private PushFilterResponse push;

    public PushFilterResponse push() {
        return this.push;
    }

    private GitHubEventsConfigResponse() {}

    private GitHubEventsConfigResponse(GitHubEventsConfigResponse $) {
        this.enterpriseConfigResourceName = $.enterpriseConfigResourceName;
        this.installationId = $.installationId;
        this.name = $.name;
        this.owner = $.owner;
        this.pullRequest = $.pullRequest;
        this.push = $.push;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitHubEventsConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitHubEventsConfigResponse $;

        public Builder() {
            $ = new GitHubEventsConfigResponse();
        }

        public Builder(GitHubEventsConfigResponse defaults) {
            $ = new GitHubEventsConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder enterpriseConfigResourceName(String enterpriseConfigResourceName) {
            $.enterpriseConfigResourceName = enterpriseConfigResourceName;
            return this;
        }

        public Builder installationId(String installationId) {
            $.installationId = installationId;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder owner(String owner) {
            $.owner = owner;
            return this;
        }

        public Builder pullRequest(PullRequestFilterResponse pullRequest) {
            $.pullRequest = pullRequest;
            return this;
        }

        public Builder push(PushFilterResponse push) {
            $.push = push;
            return this;
        }

        public GitHubEventsConfigResponse build() {
            $.enterpriseConfigResourceName = Objects.requireNonNull($.enterpriseConfigResourceName, "expected parameter 'enterpriseConfigResourceName' to be non-null");
            $.installationId = Objects.requireNonNull($.installationId, "expected parameter 'installationId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.owner = Objects.requireNonNull($.owner, "expected parameter 'owner' to be non-null");
            $.pullRequest = Objects.requireNonNull($.pullRequest, "expected parameter 'pullRequest' to be non-null");
            $.push = Objects.requireNonNull($.push, "expected parameter 'push' to be non-null");
            return $;
        }
    }

}
