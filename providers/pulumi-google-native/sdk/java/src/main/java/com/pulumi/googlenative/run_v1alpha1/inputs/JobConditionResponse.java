// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * JobCondition defines a readiness condition for a Revision.
 * 
 */
public final class JobConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobConditionResponse Empty = new JobConditionResponse();

    /**
     * Optional. Last time the condition transitioned from one status to another.
     * 
     */
    @Import(name="lastTransitionTime", required=true)
    private String lastTransitionTime;

    public String lastTransitionTime() {
        return this.lastTransitionTime;
    }

    /**
     * Optional. Human readable message indicating details about the current status.
     * 
     */
    @Import(name="message", required=true)
    private String message;

    public String message() {
        return this.message;
    }

    /**
     * Optional. One-word CamelCase reason for the condition&#39;s last transition.
     * 
     */
    @Import(name="reason", required=true)
    private String reason;

    public String reason() {
        return this.reason;
    }

    /**
     * Optional. How to interpret failures of this condition, one of Error, Warning, Info
     * 
     */
    @Import(name="severity", required=true)
    private String severity;

    public String severity() {
        return this.severity;
    }

    /**
     * Status of the condition, one of True, False, Unknown.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * &#34;Completed&#34;: True when the Job has successfully completed. * &#34;Started&#34;: True when the Job has successfully started running. * &#34;ResourcesAvailable&#34;: True when underlying resources have been provisioned.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private JobConditionResponse() {}

    private JobConditionResponse(JobConditionResponse $) {
        this.lastTransitionTime = $.lastTransitionTime;
        this.message = $.message;
        this.reason = $.reason;
        this.severity = $.severity;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobConditionResponse $;

        public Builder() {
            $ = new JobConditionResponse();
        }

        public Builder(JobConditionResponse defaults) {
            $ = new JobConditionResponse(Objects.requireNonNull(defaults));
        }

        public Builder lastTransitionTime(String lastTransitionTime) {
            $.lastTransitionTime = lastTransitionTime;
            return this;
        }

        public Builder message(String message) {
            $.message = message;
            return this;
        }

        public Builder reason(String reason) {
            $.reason = reason;
            return this;
        }

        public Builder severity(String severity) {
            $.severity = severity;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public JobConditionResponse build() {
            $.lastTransitionTime = Objects.requireNonNull($.lastTransitionTime, "expected parameter 'lastTransitionTime' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.reason = Objects.requireNonNull($.reason, "expected parameter 'reason' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
