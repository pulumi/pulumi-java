// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc_v1beta2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies an executable to run on a fully configured node and a timeout period for executable completion.
 * 
 */
public final class NodeInitializationActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final NodeInitializationActionResponse Empty = new NodeInitializationActionResponse();

    /**
     * Cloud Storage URI of executable file.
     * 
     */
    @Import(name="executableFile", required=true)
    private String executableFile;

    public String executableFile() {
        return this.executableFile;
    }

    /**
     * Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
     * 
     */
    @Import(name="executionTimeout", required=true)
    private String executionTimeout;

    public String executionTimeout() {
        return this.executionTimeout;
    }

    private NodeInitializationActionResponse() {}

    private NodeInitializationActionResponse(NodeInitializationActionResponse $) {
        this.executableFile = $.executableFile;
        this.executionTimeout = $.executionTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeInitializationActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeInitializationActionResponse $;

        public Builder() {
            $ = new NodeInitializationActionResponse();
        }

        public Builder(NodeInitializationActionResponse defaults) {
            $ = new NodeInitializationActionResponse(Objects.requireNonNull(defaults));
        }

        public Builder executableFile(String executableFile) {
            $.executableFile = executableFile;
            return this;
        }

        public Builder executionTimeout(String executionTimeout) {
            $.executionTimeout = executionTimeout;
            return this;
        }

        public NodeInitializationActionResponse build() {
            $.executableFile = Objects.requireNonNull($.executableFile, "expected parameter 'executableFile' to be non-null");
            $.executionTimeout = Objects.requireNonNull($.executionTimeout, "expected parameter 'executionTimeout' to be non-null");
            return $;
        }
    }

}
