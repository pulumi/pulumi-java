// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dialogflow_v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3EventHandlerArgs;
import com.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3FormArgs;
import com.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3FulfillmentArgs;
import com.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3TransitionRouteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
 * 
 */
public final class GoogleCloudDialogflowCxV3PageArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDialogflowCxV3PageArgs Empty = new GoogleCloudDialogflowCxV3PageArgs();

    /**
     * The human-readable name of the page, unique within the agent.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The fulfillment to call when the session is entering the page.
     * 
     */
    @Import(name="entryFulfillment")
    private @Nullable Output<GoogleCloudDialogflowCxV3FulfillmentArgs> entryFulfillment;

    public Optional<Output<GoogleCloudDialogflowCxV3FulfillmentArgs>> entryFulfillment() {
        return Optional.ofNullable(this.entryFulfillment);
    }

    /**
     * Handlers associated with the page to handle events such as webhook errors, no match or no input.
     * 
     */
    @Import(name="eventHandlers")
    private @Nullable Output<List<GoogleCloudDialogflowCxV3EventHandlerArgs>> eventHandlers;

    public Optional<Output<List<GoogleCloudDialogflowCxV3EventHandlerArgs>>> eventHandlers() {
        return Optional.ofNullable(this.eventHandlers);
    }

    /**
     * The form associated with the page, used for collecting parameters relevant to the page.
     * 
     */
    @Import(name="form")
    private @Nullable Output<GoogleCloudDialogflowCxV3FormArgs> form;

    public Optional<Output<GoogleCloudDialogflowCxV3FormArgs>> form() {
        return Optional.ofNullable(this.form);
    }

    /**
     * The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Ordered list of `TransitionRouteGroups` associated with the page. Transition route groups must be unique within a page. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page&#39;s transition route -&gt; page&#39;s transition route group -&gt; flow&#39;s transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/`.
     * 
     */
    @Import(name="transitionRouteGroups")
    private @Nullable Output<List<String>> transitionRouteGroups;

    public Optional<Output<List<String>>> transitionRouteGroups() {
        return Optional.ofNullable(this.transitionRouteGroups);
    }

    /**
     * A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified.
     * 
     */
    @Import(name="transitionRoutes")
    private @Nullable Output<List<GoogleCloudDialogflowCxV3TransitionRouteArgs>> transitionRoutes;

    public Optional<Output<List<GoogleCloudDialogflowCxV3TransitionRouteArgs>>> transitionRoutes() {
        return Optional.ofNullable(this.transitionRoutes);
    }

    private GoogleCloudDialogflowCxV3PageArgs() {}

    private GoogleCloudDialogflowCxV3PageArgs(GoogleCloudDialogflowCxV3PageArgs $) {
        this.displayName = $.displayName;
        this.entryFulfillment = $.entryFulfillment;
        this.eventHandlers = $.eventHandlers;
        this.form = $.form;
        this.name = $.name;
        this.transitionRouteGroups = $.transitionRouteGroups;
        this.transitionRoutes = $.transitionRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDialogflowCxV3PageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDialogflowCxV3PageArgs $;

        public Builder() {
            $ = new GoogleCloudDialogflowCxV3PageArgs();
        }

        public Builder(GoogleCloudDialogflowCxV3PageArgs defaults) {
            $ = new GoogleCloudDialogflowCxV3PageArgs(Objects.requireNonNull(defaults));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder entryFulfillment(@Nullable Output<GoogleCloudDialogflowCxV3FulfillmentArgs> entryFulfillment) {
            $.entryFulfillment = entryFulfillment;
            return this;
        }

        public Builder entryFulfillment(GoogleCloudDialogflowCxV3FulfillmentArgs entryFulfillment) {
            return entryFulfillment(Output.of(entryFulfillment));
        }

        public Builder eventHandlers(@Nullable Output<List<GoogleCloudDialogflowCxV3EventHandlerArgs>> eventHandlers) {
            $.eventHandlers = eventHandlers;
            return this;
        }

        public Builder eventHandlers(List<GoogleCloudDialogflowCxV3EventHandlerArgs> eventHandlers) {
            return eventHandlers(Output.of(eventHandlers));
        }

        public Builder eventHandlers(GoogleCloudDialogflowCxV3EventHandlerArgs... eventHandlers) {
            return eventHandlers(List.of(eventHandlers));
        }

        public Builder form(@Nullable Output<GoogleCloudDialogflowCxV3FormArgs> form) {
            $.form = form;
            return this;
        }

        public Builder form(GoogleCloudDialogflowCxV3FormArgs form) {
            return form(Output.of(form));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder transitionRouteGroups(@Nullable Output<List<String>> transitionRouteGroups) {
            $.transitionRouteGroups = transitionRouteGroups;
            return this;
        }

        public Builder transitionRouteGroups(List<String> transitionRouteGroups) {
            return transitionRouteGroups(Output.of(transitionRouteGroups));
        }

        public Builder transitionRouteGroups(String... transitionRouteGroups) {
            return transitionRouteGroups(List.of(transitionRouteGroups));
        }

        public Builder transitionRoutes(@Nullable Output<List<GoogleCloudDialogflowCxV3TransitionRouteArgs>> transitionRoutes) {
            $.transitionRoutes = transitionRoutes;
            return this;
        }

        public Builder transitionRoutes(List<GoogleCloudDialogflowCxV3TransitionRouteArgs> transitionRoutes) {
            return transitionRoutes(Output.of(transitionRoutes));
        }

        public Builder transitionRoutes(GoogleCloudDialogflowCxV3TransitionRouteArgs... transitionRoutes) {
            return transitionRoutes(List.of(transitionRoutes));
        }

        public GoogleCloudDialogflowCxV3PageArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
