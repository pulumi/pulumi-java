// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1.inputs.CVSSResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.PackageIssueResponse;
import com.pulumi.googlenative.containeranalysis_v1.inputs.RelatedUrlResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An occurrence of a severity vulnerability on a resource.
 * 
 */
public final class VulnerabilityOccurrenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final VulnerabilityOccurrenceResponse Empty = new VulnerabilityOccurrenceResponse();

    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    @Import(name="cvssScore", required=true)
    private Double cvssScore;

    public Double cvssScore() {
        return this.cvssScore;
    }

    /**
     * The cvss v3 score for the vulnerability.
     * 
     */
    @Import(name="cvssv3", required=true)
    private CVSSResponse cvssv3;

    public CVSSResponse cvssv3() {
        return this.cvssv3;
    }

    /**
     * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity", required=true)
    private String effectiveSeverity;

    public String effectiveSeverity() {
        return this.effectiveSeverity;
    }

    /**
     * Whether at least one of the affected packages has a fix available.
     * 
     */
    @Import(name="fixAvailable", required=true)
    private Boolean fixAvailable;

    public Boolean fixAvailable() {
        return this.fixAvailable;
    }

    /**
     * A detailed description of this vulnerability.
     * 
     */
    @Import(name="longDescription", required=true)
    private String longDescription;

    public String longDescription() {
        return this.longDescription;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
    private List<PackageIssueResponse> packageIssue;

    public List<PackageIssueResponse> packageIssue() {
        return this.packageIssue;
    }

    /**
     * URLs related to this vulnerability.
     * 
     */
    @Import(name="relatedUrls", required=true)
    private List<RelatedUrlResponse> relatedUrls;

    public List<RelatedUrlResponse> relatedUrls() {
        return this.relatedUrls;
    }

    /**
     * The note provider assigned severity of this vulnerability.
     * 
     */
    @Import(name="severity", required=true)
    private String severity;

    public String severity() {
        return this.severity;
    }

    /**
     * A one sentence description of this vulnerability.
     * 
     */
    @Import(name="shortDescription", required=true)
    private String shortDescription;

    public String shortDescription() {
        return this.shortDescription;
    }

    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private VulnerabilityOccurrenceResponse() {}

    private VulnerabilityOccurrenceResponse(VulnerabilityOccurrenceResponse $) {
        this.cvssScore = $.cvssScore;
        this.cvssv3 = $.cvssv3;
        this.effectiveSeverity = $.effectiveSeverity;
        this.fixAvailable = $.fixAvailable;
        this.longDescription = $.longDescription;
        this.packageIssue = $.packageIssue;
        this.relatedUrls = $.relatedUrls;
        this.severity = $.severity;
        this.shortDescription = $.shortDescription;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityOccurrenceResponse $;

        public Builder() {
            $ = new VulnerabilityOccurrenceResponse();
        }

        public Builder(VulnerabilityOccurrenceResponse defaults) {
            $ = new VulnerabilityOccurrenceResponse(Objects.requireNonNull(defaults));
        }

        public Builder cvssScore(Double cvssScore) {
            $.cvssScore = cvssScore;
            return this;
        }

        public Builder cvssv3(CVSSResponse cvssv3) {
            $.cvssv3 = cvssv3;
            return this;
        }

        public Builder effectiveSeverity(String effectiveSeverity) {
            $.effectiveSeverity = effectiveSeverity;
            return this;
        }

        public Builder fixAvailable(Boolean fixAvailable) {
            $.fixAvailable = fixAvailable;
            return this;
        }

        public Builder longDescription(String longDescription) {
            $.longDescription = longDescription;
            return this;
        }

        public Builder packageIssue(List<PackageIssueResponse> packageIssue) {
            $.packageIssue = packageIssue;
            return this;
        }

        public Builder packageIssue(PackageIssueResponse... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }

        public Builder relatedUrls(List<RelatedUrlResponse> relatedUrls) {
            $.relatedUrls = relatedUrls;
            return this;
        }

        public Builder relatedUrls(RelatedUrlResponse... relatedUrls) {
            return relatedUrls(List.of(relatedUrls));
        }

        public Builder severity(String severity) {
            $.severity = severity;
            return this;
        }

        public Builder shortDescription(String shortDescription) {
            $.shortDescription = shortDescription;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public VulnerabilityOccurrenceResponse build() {
            $.cvssScore = Objects.requireNonNull($.cvssScore, "expected parameter 'cvssScore' to be non-null");
            $.cvssv3 = Objects.requireNonNull($.cvssv3, "expected parameter 'cvssv3' to be non-null");
            $.effectiveSeverity = Objects.requireNonNull($.effectiveSeverity, "expected parameter 'effectiveSeverity' to be non-null");
            $.fixAvailable = Objects.requireNonNull($.fixAvailable, "expected parameter 'fixAvailable' to be non-null");
            $.longDescription = Objects.requireNonNull($.longDescription, "expected parameter 'longDescription' to be non-null");
            $.packageIssue = Objects.requireNonNull($.packageIssue, "expected parameter 'packageIssue' to be non-null");
            $.relatedUrls = Objects.requireNonNull($.relatedUrls, "expected parameter 'relatedUrls' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.shortDescription = Objects.requireNonNull($.shortDescription, "expected parameter 'shortDescription' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
