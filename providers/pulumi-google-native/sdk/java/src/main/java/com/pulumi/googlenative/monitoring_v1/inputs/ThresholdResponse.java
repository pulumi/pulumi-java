// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Defines a threshold for categorizing time series values.
 * 
 */
public final class ThresholdResponse extends com.pulumi.resources.InvokeArgs {

    public static final ThresholdResponse Empty = new ThresholdResponse();

    /**
     * The state color for this threshold. Color is not allowed in a XyChart.
     * 
     */
    @Import(name="color", required=true)
    private String color;

    public String color() {
        return this.color;
    }

    /**
     * The direction for the current threshold. Direction is not allowed in a XyChart.
     * 
     */
    @Import(name="direction", required=true)
    private String direction;

    public String direction() {
        return this.direction;
    }

    /**
     * A label for the threshold.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    public String label() {
        return this.label;
    }

    /**
     * The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.
     * 
     */
    @Import(name="targetAxis", required=true)
    private String targetAxis;

    public String targetAxis() {
        return this.targetAxis;
    }

    /**
     * The value of the threshold. The value should be defined in the native scale of the metric.
     * 
     */
    @Import(name="value", required=true)
    private Double value;

    public Double value() {
        return this.value;
    }

    private ThresholdResponse() {}

    private ThresholdResponse(ThresholdResponse $) {
        this.color = $.color;
        this.direction = $.direction;
        this.label = $.label;
        this.targetAxis = $.targetAxis;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThresholdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThresholdResponse $;

        public Builder() {
            $ = new ThresholdResponse();
        }

        public Builder(ThresholdResponse defaults) {
            $ = new ThresholdResponse(Objects.requireNonNull(defaults));
        }

        public Builder color(String color) {
            $.color = color;
            return this;
        }

        public Builder direction(String direction) {
            $.direction = direction;
            return this;
        }

        public Builder label(String label) {
            $.label = label;
            return this;
        }

        public Builder targetAxis(String targetAxis) {
            $.targetAxis = targetAxis;
            return this;
        }

        public Builder value(Double value) {
            $.value = value;
            return this;
        }

        public ThresholdResponse build() {
            $.color = Objects.requireNonNull($.color, "expected parameter 'color' to be non-null");
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.targetAxis = Objects.requireNonNull($.targetAxis, "expected parameter 'targetAxis' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
