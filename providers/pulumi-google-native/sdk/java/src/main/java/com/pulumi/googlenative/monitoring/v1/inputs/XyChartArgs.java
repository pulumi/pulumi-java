// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.inputs.AxisArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.ChartOptionsArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.DataSetArgs;
import com.pulumi.googlenative.monitoring.v1.inputs.ThresholdArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 * 
 */
public final class XyChartArgs extends com.pulumi.resources.ResourceArgs {

    public static final XyChartArgs Empty = new XyChartArgs();

    /**
     * Display options for the chart.
     * 
     */
    @Import(name="chartOptions")
    private @Nullable Output<ChartOptionsArgs> chartOptions;

    /**
     * @return Display options for the chart.
     * 
     */
    public Optional<Output<ChartOptionsArgs>> chartOptions() {
        return Optional.ofNullable(this.chartOptions);
    }

    /**
     * The data displayed in this chart.
     * 
     */
    @Import(name="dataSets", required=true)
    private Output<List<DataSetArgs>> dataSets;

    /**
     * @return The data displayed in this chart.
     * 
     */
    public Output<List<DataSetArgs>> dataSets() {
        return this.dataSets;
    }

    /**
     * Threshold lines drawn horizontally across the chart.
     * 
     */
    @Import(name="thresholds")
    private @Nullable Output<List<ThresholdArgs>> thresholds;

    /**
     * @return Threshold lines drawn horizontally across the chart.
     * 
     */
    public Optional<Output<List<ThresholdArgs>>> thresholds() {
        return Optional.ofNullable(this.thresholds);
    }

    /**
     * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     * 
     */
    @Import(name="timeshiftDuration")
    private @Nullable Output<String> timeshiftDuration;

    /**
     * @return The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     * 
     */
    public Optional<Output<String>> timeshiftDuration() {
        return Optional.ofNullable(this.timeshiftDuration);
    }

    /**
     * The properties applied to the X axis.
     * 
     */
    @Import(name="xAxis")
    private @Nullable Output<AxisArgs> xAxis;

    /**
     * @return The properties applied to the X axis.
     * 
     */
    public Optional<Output<AxisArgs>> xAxis() {
        return Optional.ofNullable(this.xAxis);
    }

    /**
     * The properties applied to the Y2 axis.
     * 
     */
    @Import(name="y2Axis")
    private @Nullable Output<AxisArgs> y2Axis;

    /**
     * @return The properties applied to the Y2 axis.
     * 
     */
    public Optional<Output<AxisArgs>> y2Axis() {
        return Optional.ofNullable(this.y2Axis);
    }

    /**
     * The properties applied to the Y axis.
     * 
     */
    @Import(name="yAxis")
    private @Nullable Output<AxisArgs> yAxis;

    /**
     * @return The properties applied to the Y axis.
     * 
     */
    public Optional<Output<AxisArgs>> yAxis() {
        return Optional.ofNullable(this.yAxis);
    }

    private XyChartArgs() {}

    private XyChartArgs(XyChartArgs $) {
        this.chartOptions = $.chartOptions;
        this.dataSets = $.dataSets;
        this.thresholds = $.thresholds;
        this.timeshiftDuration = $.timeshiftDuration;
        this.xAxis = $.xAxis;
        this.y2Axis = $.y2Axis;
        this.yAxis = $.yAxis;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(XyChartArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private XyChartArgs $;

        public Builder() {
            $ = new XyChartArgs();
        }

        public Builder(XyChartArgs defaults) {
            $ = new XyChartArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chartOptions Display options for the chart.
         * 
         * @return builder
         * 
         */
        public Builder chartOptions(@Nullable Output<ChartOptionsArgs> chartOptions) {
            $.chartOptions = chartOptions;
            return this;
        }

        /**
         * @param chartOptions Display options for the chart.
         * 
         * @return builder
         * 
         */
        public Builder chartOptions(ChartOptionsArgs chartOptions) {
            return chartOptions(Output.of(chartOptions));
        }

        /**
         * @param dataSets The data displayed in this chart.
         * 
         * @return builder
         * 
         */
        public Builder dataSets(Output<List<DataSetArgs>> dataSets) {
            $.dataSets = dataSets;
            return this;
        }

        /**
         * @param dataSets The data displayed in this chart.
         * 
         * @return builder
         * 
         */
        public Builder dataSets(List<DataSetArgs> dataSets) {
            return dataSets(Output.of(dataSets));
        }

        /**
         * @param dataSets The data displayed in this chart.
         * 
         * @return builder
         * 
         */
        public Builder dataSets(DataSetArgs... dataSets) {
            return dataSets(List.of(dataSets));
        }

        /**
         * @param thresholds Threshold lines drawn horizontally across the chart.
         * 
         * @return builder
         * 
         */
        public Builder thresholds(@Nullable Output<List<ThresholdArgs>> thresholds) {
            $.thresholds = thresholds;
            return this;
        }

        /**
         * @param thresholds Threshold lines drawn horizontally across the chart.
         * 
         * @return builder
         * 
         */
        public Builder thresholds(List<ThresholdArgs> thresholds) {
            return thresholds(Output.of(thresholds));
        }

        /**
         * @param thresholds Threshold lines drawn horizontally across the chart.
         * 
         * @return builder
         * 
         */
        public Builder thresholds(ThresholdArgs... thresholds) {
            return thresholds(List.of(thresholds));
        }

        /**
         * @param timeshiftDuration The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
         * 
         * @return builder
         * 
         */
        public Builder timeshiftDuration(@Nullable Output<String> timeshiftDuration) {
            $.timeshiftDuration = timeshiftDuration;
            return this;
        }

        /**
         * @param timeshiftDuration The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
         * 
         * @return builder
         * 
         */
        public Builder timeshiftDuration(String timeshiftDuration) {
            return timeshiftDuration(Output.of(timeshiftDuration));
        }

        /**
         * @param xAxis The properties applied to the X axis.
         * 
         * @return builder
         * 
         */
        public Builder xAxis(@Nullable Output<AxisArgs> xAxis) {
            $.xAxis = xAxis;
            return this;
        }

        /**
         * @param xAxis The properties applied to the X axis.
         * 
         * @return builder
         * 
         */
        public Builder xAxis(AxisArgs xAxis) {
            return xAxis(Output.of(xAxis));
        }

        /**
         * @param y2Axis The properties applied to the Y2 axis.
         * 
         * @return builder
         * 
         */
        public Builder y2Axis(@Nullable Output<AxisArgs> y2Axis) {
            $.y2Axis = y2Axis;
            return this;
        }

        /**
         * @param y2Axis The properties applied to the Y2 axis.
         * 
         * @return builder
         * 
         */
        public Builder y2Axis(AxisArgs y2Axis) {
            return y2Axis(Output.of(y2Axis));
        }

        /**
         * @param yAxis The properties applied to the Y axis.
         * 
         * @return builder
         * 
         */
        public Builder yAxis(@Nullable Output<AxisArgs> yAxis) {
            $.yAxis = yAxis;
            return this;
        }

        /**
         * @param yAxis The properties applied to the Y axis.
         * 
         * @return builder
         * 
         */
        public Builder yAxis(AxisArgs yAxis) {
            return yAxis(Output.of(yAxis));
        }

        public XyChartArgs build() {
            $.dataSets = Objects.requireNonNull($.dataSets, "expected parameter 'dataSets' to be non-null");
            return $;
        }
    }

}
