// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
 * 
 */
public final class GitSourceContextResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitSourceContextResponse Empty = new GitSourceContextResponse();

    /**
     * Git commit hash.
     * 
     */
    @Import(name="revisionId", required=true)
    private String revisionId;

    public String revisionId() {
        return this.revisionId;
    }

    /**
     * Git repository URL.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private GitSourceContextResponse() {}

    private GitSourceContextResponse(GitSourceContextResponse $) {
        this.revisionId = $.revisionId;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitSourceContextResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitSourceContextResponse $;

        public Builder() {
            $ = new GitSourceContextResponse();
        }

        public Builder(GitSourceContextResponse defaults) {
            $ = new GitSourceContextResponse(Objects.requireNonNull(defaults));
        }

        public Builder revisionId(String revisionId) {
            $.revisionId = revisionId;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public GitSourceContextResponse build() {
            $.revisionId = Objects.requireNonNull($.revisionId, "expected parameter 'revisionId' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
