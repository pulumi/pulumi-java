// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.authorization.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClientTokenResult {
    /**
     * @return The OAuth2 access token used by the client to authenticate against the Google Cloud API.
     * 
     */
    private final String accessToken;
    /**
     * @return Expiry is the optional expiration time of the access token. If zero, TokenSource implementations will reuse the same token forever and RefreshToken or equivalent mechanisms for that TokenSource will not be used.
     * 
     */
    private final @Nullable String expiry;
    /**
     * @return RefreshToken is a token that&#39;s used by the application (as opposed to the user) to refresh the access token if it expires.
     * 
     */
    private final @Nullable String refreshToken;
    /**
     * @return The type of auth token. Possible types are &#34;Bearer&#34;, &#34;MAC&#34;, &#34;Basic&#34;.
     * 
     */
    private final String tokenType;

    @CustomType.Constructor
    private GetClientTokenResult(
        @CustomType.Parameter("accessToken") String accessToken,
        @CustomType.Parameter("expiry") @Nullable String expiry,
        @CustomType.Parameter("refreshToken") @Nullable String refreshToken,
        @CustomType.Parameter("tokenType") String tokenType) {
        this.accessToken = accessToken;
        this.expiry = expiry;
        this.refreshToken = refreshToken;
        this.tokenType = tokenType;
    }

    /**
     * @return The OAuth2 access token used by the client to authenticate against the Google Cloud API.
     * 
     */
    public String accessToken() {
        return this.accessToken;
    }
    /**
     * @return Expiry is the optional expiration time of the access token. If zero, TokenSource implementations will reuse the same token forever and RefreshToken or equivalent mechanisms for that TokenSource will not be used.
     * 
     */
    public Optional<String> expiry() {
        return Optional.ofNullable(this.expiry);
    }
    /**
     * @return RefreshToken is a token that&#39;s used by the application (as opposed to the user) to refresh the access token if it expires.
     * 
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }
    /**
     * @return The type of auth token. Possible types are &#34;Bearer&#34;, &#34;MAC&#34;, &#34;Basic&#34;.
     * 
     */
    public String tokenType() {
        return this.tokenType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientTokenResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessToken;
        private @Nullable String expiry;
        private @Nullable String refreshToken;
        private String tokenType;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClientTokenResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.expiry = defaults.expiry;
    	      this.refreshToken = defaults.refreshToken;
    	      this.tokenType = defaults.tokenType;
        }

        public Builder accessToken(String accessToken) {
            this.accessToken = Objects.requireNonNull(accessToken);
            return this;
        }
        public Builder expiry(@Nullable String expiry) {
            this.expiry = expiry;
            return this;
        }
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        public Builder tokenType(String tokenType) {
            this.tokenType = Objects.requireNonNull(tokenType);
            return this;
        }        public GetClientTokenResult build() {
            return new GetClientTokenResult(accessToken, expiry, refreshToken, tokenType);
        }
    }
}
