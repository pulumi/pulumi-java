// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer_v1.inputs.AzureCredentialsResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs&#39;s name is the [Azure Blob Storage blob&#39;s key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
 * 
 */
public final class AzureBlobStorageDataResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureBlobStorageDataResponse Empty = new AzureBlobStorageDataResponse();

    /**
     * Input only. Credentials used to authenticate API requests to Azure. For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
     * 
     */
    @Import(name="azureCredentials", required=true)
    private AzureCredentialsResponse azureCredentials;

    public AzureCredentialsResponse azureCredentials() {
        return this.azureCredentials;
    }

    /**
     * The container to transfer from the Azure Storage account.
     * 
     */
    @Import(name="container", required=true)
    private String container;

    public String container() {
        return this.container;
    }

    /**
     * Root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    /**
     * The name of the Azure Storage account.
     * 
     */
    @Import(name="storageAccount", required=true)
    private String storageAccount;

    public String storageAccount() {
        return this.storageAccount;
    }

    private AzureBlobStorageDataResponse() {}

    private AzureBlobStorageDataResponse(AzureBlobStorageDataResponse $) {
        this.azureCredentials = $.azureCredentials;
        this.container = $.container;
        this.path = $.path;
        this.storageAccount = $.storageAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureBlobStorageDataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureBlobStorageDataResponse $;

        public Builder() {
            $ = new AzureBlobStorageDataResponse();
        }

        public Builder(AzureBlobStorageDataResponse defaults) {
            $ = new AzureBlobStorageDataResponse(Objects.requireNonNull(defaults));
        }

        public Builder azureCredentials(AzureCredentialsResponse azureCredentials) {
            $.azureCredentials = azureCredentials;
            return this;
        }

        public Builder container(String container) {
            $.container = container;
            return this;
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder storageAccount(String storageAccount) {
            $.storageAccount = storageAccount;
            return this;
        }

        public AzureBlobStorageDataResponse build() {
            $.azureCredentials = Objects.requireNonNull($.azureCredentials, "expected parameter 'azureCredentials' to be non-null");
            $.container = Objects.requireNonNull($.container, "expected parameter 'container' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.storageAccount = Objects.requireNonNull($.storageAccount, "expected parameter 'storageAccount' to be non-null");
            return $;
        }
    }

}
