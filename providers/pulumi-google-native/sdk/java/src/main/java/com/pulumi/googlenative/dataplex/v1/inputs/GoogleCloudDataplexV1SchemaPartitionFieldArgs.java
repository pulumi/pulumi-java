// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataplex.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.dataplex.v1.enums.GoogleCloudDataplexV1SchemaPartitionFieldType;
import java.lang.String;
import java.util.Objects;


/**
 * Represents a key field within the entity&#39;s partition structure. You could have up to 20 partition fields, but only the first 10 partitions have the filtering ability due to performance consideration. Note: Partition fields are immutable.
 * 
 */
public final class GoogleCloudDataplexV1SchemaPartitionFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDataplexV1SchemaPartitionFieldArgs Empty = new GoogleCloudDataplexV1SchemaPartitionFieldArgs();

    /**
     * Partition field name must consist of letters, numbers, and underscores only, with a maximum of length of 256 characters, and must begin with a letter or underscore..
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Partition field name must consist of letters, numbers, and underscores only, with a maximum of length of 256 characters, and must begin with a letter or underscore..
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Immutable. The type of field.
     * 
     */
    @Import(name="type", required=true)
    private Output<GoogleCloudDataplexV1SchemaPartitionFieldType> type;

    /**
     * @return Immutable. The type of field.
     * 
     */
    public Output<GoogleCloudDataplexV1SchemaPartitionFieldType> type() {
        return this.type;
    }

    private GoogleCloudDataplexV1SchemaPartitionFieldArgs() {}

    private GoogleCloudDataplexV1SchemaPartitionFieldArgs(GoogleCloudDataplexV1SchemaPartitionFieldArgs $) {
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleCloudDataplexV1SchemaPartitionFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudDataplexV1SchemaPartitionFieldArgs $;

        public Builder() {
            $ = new GoogleCloudDataplexV1SchemaPartitionFieldArgs();
        }

        public Builder(GoogleCloudDataplexV1SchemaPartitionFieldArgs defaults) {
            $ = new GoogleCloudDataplexV1SchemaPartitionFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Partition field name must consist of letters, numbers, and underscores only, with a maximum of length of 256 characters, and must begin with a letter or underscore..
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Partition field name must consist of letters, numbers, and underscores only, with a maximum of length of 256 characters, and must begin with a letter or underscore..
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Immutable. The type of field.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<GoogleCloudDataplexV1SchemaPartitionFieldType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Immutable. The type of field.
         * 
         * @return builder
         * 
         */
        public Builder type(GoogleCloudDataplexV1SchemaPartitionFieldType type) {
            return type(Output.of(type));
        }

        public GoogleCloudDataplexV1SchemaPartitionFieldArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
