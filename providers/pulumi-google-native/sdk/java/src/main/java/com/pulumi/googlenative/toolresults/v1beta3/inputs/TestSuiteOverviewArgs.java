// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.DurationArgs;
import com.pulumi.googlenative.toolresults.v1beta3.inputs.FileReferenceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A summary of a test suite result either parsed from XML or uploaded directly by a user. Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
 * 
 */
public final class TestSuiteOverviewArgs extends com.pulumi.resources.ResourceArgs {

    public static final TestSuiteOverviewArgs Empty = new TestSuiteOverviewArgs();

    /**
     * Elapsed time of test suite.
     * 
     */
    @Import(name="elapsedTime")
    private @Nullable Output<DurationArgs> elapsedTime;

    /**
     * @return Elapsed time of test suite.
     * 
     */
    public Optional<Output<DurationArgs>> elapsedTime() {
        return Optional.ofNullable(this.elapsedTime);
    }

    /**
     * Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="errorCount")
    private @Nullable Output<Integer> errorCount;

    /**
     * @return Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    public Optional<Output<Integer>> errorCount() {
        return Optional.ofNullable(this.errorCount);
    }

    /**
     * Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="failureCount")
    private @Nullable Output<Integer> failureCount;

    /**
     * @return Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     * 
     */
    public Optional<Output<Integer>> failureCount() {
        return Optional.ofNullable(this.failureCount);
    }

    /**
     * Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     * 
     */
    @Import(name="flakyCount")
    private @Nullable Output<Integer> flakyCount;

    /**
     * @return Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     * 
     */
    public Optional<Output<Integer>> flakyCount() {
        return Optional.ofNullable(this.flakyCount);
    }

    /**
     * The name of the test suite. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the test suite. - In create/response: always set - In update request: never
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="skippedCount")
    private @Nullable Output<Integer> skippedCount;

    /**
     * @return Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    public Optional<Output<Integer>> skippedCount() {
        return Optional.ofNullable(this.skippedCount);
    }

    /**
     * Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @Import(name="totalCount")
    private @Nullable Output<Integer> totalCount;

    /**
     * @return Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    public Optional<Output<Integer>> totalCount() {
        return Optional.ofNullable(this.totalCount);
    }

    /**
     * If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     * 
     */
    @Import(name="xmlSource")
    private @Nullable Output<FileReferenceArgs> xmlSource;

    /**
     * @return If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     * 
     */
    public Optional<Output<FileReferenceArgs>> xmlSource() {
        return Optional.ofNullable(this.xmlSource);
    }

    private TestSuiteOverviewArgs() {}

    private TestSuiteOverviewArgs(TestSuiteOverviewArgs $) {
        this.elapsedTime = $.elapsedTime;
        this.errorCount = $.errorCount;
        this.failureCount = $.failureCount;
        this.flakyCount = $.flakyCount;
        this.name = $.name;
        this.skippedCount = $.skippedCount;
        this.totalCount = $.totalCount;
        this.xmlSource = $.xmlSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestSuiteOverviewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestSuiteOverviewArgs $;

        public Builder() {
            $ = new TestSuiteOverviewArgs();
        }

        public Builder(TestSuiteOverviewArgs defaults) {
            $ = new TestSuiteOverviewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param elapsedTime Elapsed time of test suite.
         * 
         * @return builder
         * 
         */
        public Builder elapsedTime(@Nullable Output<DurationArgs> elapsedTime) {
            $.elapsedTime = elapsedTime;
            return this;
        }

        /**
         * @param elapsedTime Elapsed time of test suite.
         * 
         * @return builder
         * 
         */
        public Builder elapsedTime(DurationArgs elapsedTime) {
            return elapsedTime(Output.of(elapsedTime));
        }

        /**
         * @param errorCount Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder errorCount(@Nullable Output<Integer> errorCount) {
            $.errorCount = errorCount;
            return this;
        }

        /**
         * @param errorCount Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder errorCount(Integer errorCount) {
            return errorCount(Output.of(errorCount));
        }

        /**
         * @param failureCount Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder failureCount(@Nullable Output<Integer> failureCount) {
            $.failureCount = failureCount;
            return this;
        }

        /**
         * @param failureCount Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder failureCount(Integer failureCount) {
            return failureCount(Output.of(failureCount));
        }

        /**
         * @param flakyCount Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
         * 
         * @return builder
         * 
         */
        public Builder flakyCount(@Nullable Output<Integer> flakyCount) {
            $.flakyCount = flakyCount;
            return this;
        }

        /**
         * @param flakyCount Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
         * 
         * @return builder
         * 
         */
        public Builder flakyCount(Integer flakyCount) {
            return flakyCount(Output.of(flakyCount));
        }

        /**
         * @param name The name of the test suite. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the test suite. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param skippedCount Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder skippedCount(@Nullable Output<Integer> skippedCount) {
            $.skippedCount = skippedCount;
            return this;
        }

        /**
         * @param skippedCount Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder skippedCount(Integer skippedCount) {
            return skippedCount(Output.of(skippedCount));
        }

        /**
         * @param totalCount Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder totalCount(@Nullable Output<Integer> totalCount) {
            $.totalCount = totalCount;
            return this;
        }

        /**
         * @param totalCount Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder totalCount(Integer totalCount) {
            return totalCount(Output.of(totalCount));
        }

        /**
         * @param xmlSource If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder xmlSource(@Nullable Output<FileReferenceArgs> xmlSource) {
            $.xmlSource = xmlSource;
            return this;
        }

        /**
         * @param xmlSource If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
         * 
         * @return builder
         * 
         */
        public Builder xmlSource(FileReferenceArgs xmlSource) {
            return xmlSource(Output.of(xmlSource));
        }

        public TestSuiteOverviewArgs build() {
            return $;
        }
    }

}
