// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datamigration_v1.inputs.SslConfigResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies connection parameters required specifically for PostgreSQL databases.
 * 
 */
public final class PostgreSqlConnectionProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final PostgreSqlConnectionProfileResponse Empty = new PostgreSqlConnectionProfileResponse();

    /**
     * If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
     * 
     */
    @Import(name="cloudSqlId", required=true)
    private String cloudSqlId;

    /**
     * @return If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
     * 
     */
    public String cloudSqlId() {
        return this.cloudSqlId;
    }

    /**
     * The IP or hostname of the source PostgreSQL database.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    /**
     * @return The IP or hostname of the source PostgreSQL database.
     * 
     */
    public String host() {
        return this.host;
    }

    /**
     * Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    /**
     * @return Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * 
     */
    public String password() {
        return this.password;
    }

    /**
     * Indicates If this connection profile password is stored.
     * 
     */
    @Import(name="passwordSet", required=true)
    private Boolean passwordSet;

    /**
     * @return Indicates If this connection profile password is stored.
     * 
     */
    public Boolean passwordSet() {
        return this.passwordSet;
    }

    /**
     * The network port of the source PostgreSQL database.
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    /**
     * @return The network port of the source PostgreSQL database.
     * 
     */
    public Integer port() {
        return this.port;
    }

    /**
     * SSL configuration for the destination to connect to the source database.
     * 
     */
    @Import(name="ssl", required=true)
    private SslConfigResponse ssl;

    /**
     * @return SSL configuration for the destination to connect to the source database.
     * 
     */
    public SslConfigResponse ssl() {
        return this.ssl;
    }

    /**
     * The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    /**
     * @return The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    public String username() {
        return this.username;
    }

    private PostgreSqlConnectionProfileResponse() {}

    private PostgreSqlConnectionProfileResponse(PostgreSqlConnectionProfileResponse $) {
        this.cloudSqlId = $.cloudSqlId;
        this.host = $.host;
        this.password = $.password;
        this.passwordSet = $.passwordSet;
        this.port = $.port;
        this.ssl = $.ssl;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostgreSqlConnectionProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostgreSqlConnectionProfileResponse $;

        public Builder() {
            $ = new PostgreSqlConnectionProfileResponse();
        }

        public Builder(PostgreSqlConnectionProfileResponse defaults) {
            $ = new PostgreSqlConnectionProfileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudSqlId If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
         * 
         * @return builder
         * 
         */
        public Builder cloudSqlId(String cloudSqlId) {
            $.cloudSqlId = cloudSqlId;
            return this;
        }

        /**
         * @param host The IP or hostname of the source PostgreSQL database.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            $.host = host;
            return this;
        }

        /**
         * @param password Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            $.password = password;
            return this;
        }

        /**
         * @param passwordSet Indicates If this connection profile password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSet(Boolean passwordSet) {
            $.passwordSet = passwordSet;
            return this;
        }

        /**
         * @param port The network port of the source PostgreSQL database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param ssl SSL configuration for the destination to connect to the source database.
         * 
         * @return builder
         * 
         */
        public Builder ssl(SslConfigResponse ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param username The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public PostgreSqlConnectionProfileResponse build() {
            $.cloudSqlId = Objects.requireNonNull($.cloudSqlId, "expected parameter 'cloudSqlId' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.passwordSet = Objects.requireNonNull($.passwordSet, "expected parameter 'passwordSet' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.ssl = Objects.requireNonNull($.ssl, "expected parameter 'ssl' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
