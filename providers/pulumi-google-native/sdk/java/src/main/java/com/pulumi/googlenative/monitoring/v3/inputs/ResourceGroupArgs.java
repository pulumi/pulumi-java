// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v3.enums.ResourceGroupResourceType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The resource submessage for group checks. It can be used instead of a monitored resource, when multiple resources are being monitored.
 * 
 */
public final class ResourceGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceGroupArgs Empty = new ResourceGroupArgs();

    /**
     * The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The resource type of the group members.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<ResourceGroupResourceType> resourceType;

    /**
     * @return The resource type of the group members.
     * 
     */
    public Optional<Output<ResourceGroupResourceType>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    private ResourceGroupArgs() {}

    private ResourceGroupArgs(ResourceGroupArgs $) {
        this.groupId = $.groupId;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceGroupArgs $;

        public Builder() {
            $ = new ResourceGroupArgs();
        }

        public Builder(ResourceGroupArgs defaults) {
            $ = new ResourceGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param resourceType The resource type of the group members.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<ResourceGroupResourceType> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the group members.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(ResourceGroupResourceType resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public ResourceGroupArgs build() {
            return $;
        }
    }

}
