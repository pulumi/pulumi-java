// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.googlenative.compute_alpha.enums.PacketMirroringEnable;
import com.pulumi.googlenative.compute_alpha.inputs.PacketMirroringFilterArgs;
import com.pulumi.googlenative.compute_alpha.inputs.PacketMirroringForwardingRuleInfoArgs;
import com.pulumi.googlenative.compute_alpha.inputs.PacketMirroringMirroredResourceInfoArgs;
import com.pulumi.googlenative.compute_alpha.inputs.PacketMirroringNetworkInfoArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PacketMirroringArgs extends com.pulumi.resources.ResourceArgs {

    public static final PacketMirroringArgs Empty = new PacketMirroringArgs();

    /**
     * The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector set to true.
     * 
     */
    @Import(name="collectorIlb")
      private final @Nullable Output<PacketMirroringForwardingRuleInfoArgs> collectorIlb;

    public Output<PacketMirroringForwardingRuleInfoArgs> collectorIlb() {
        return this.collectorIlb == null ? Codegen.empty() : this.collectorIlb;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE.
     * 
     */
    @Import(name="enable")
      private final @Nullable Output<PacketMirroringEnable> enable;

    public Output<PacketMirroringEnable> enable() {
        return this.enable == null ? Codegen.empty() : this.enable;
    }

    /**
     * Filter for mirrored traffic. If unspecified, all traffic is mirrored.
     * 
     */
    @Import(name="filter")
      private final @Nullable Output<PacketMirroringFilterArgs> filter;

    public Output<PacketMirroringFilterArgs> filter() {
        return this.filter == null ? Codegen.empty() : this.filter;
    }

    /**
     * PacketMirroring mirroredResourceInfos. MirroredResourceInfo specifies a set of mirrored VM instances, subnetworks and/or tags for which traffic from/to all VM instances will be mirrored.
     * 
     */
    @Import(name="mirroredResources")
      private final @Nullable Output<PacketMirroringMirroredResourceInfoArgs> mirroredResources;

    public Output<PacketMirroringMirroredResourceInfoArgs> mirroredResources() {
        return this.mirroredResources == null ? Codegen.empty() : this.mirroredResources;
    }

    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<PacketMirroringNetworkInfoArgs> network;

    public Output<PacketMirroringNetworkInfoArgs> network() {
        return this.network == null ? Codegen.empty() : this.network;
    }

    /**
     * The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority == null ? Codegen.empty() : this.priority;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="region", required=true)
      private final Output<String> region;

    public Output<String> region() {
        return this.region;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    public PacketMirroringArgs(
        @Nullable Output<PacketMirroringForwardingRuleInfoArgs> collectorIlb,
        @Nullable Output<String> description,
        @Nullable Output<PacketMirroringEnable> enable,
        @Nullable Output<PacketMirroringFilterArgs> filter,
        @Nullable Output<PacketMirroringMirroredResourceInfoArgs> mirroredResources,
        @Nullable Output<String> name,
        @Nullable Output<PacketMirroringNetworkInfoArgs> network,
        @Nullable Output<Integer> priority,
        @Nullable Output<String> project,
        Output<String> region,
        @Nullable Output<String> requestId) {
        this.collectorIlb = collectorIlb;
        this.description = description;
        this.enable = enable;
        this.filter = filter;
        this.mirroredResources = mirroredResources;
        this.name = name;
        this.network = network;
        this.priority = priority;
        this.project = project;
        this.region = Objects.requireNonNull(region, "expected parameter 'region' to be non-null");
        this.requestId = requestId;
    }

    private PacketMirroringArgs() {
        this.collectorIlb = Codegen.empty();
        this.description = Codegen.empty();
        this.enable = Codegen.empty();
        this.filter = Codegen.empty();
        this.mirroredResources = Codegen.empty();
        this.name = Codegen.empty();
        this.network = Codegen.empty();
        this.priority = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.requestId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PacketMirroringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<PacketMirroringForwardingRuleInfoArgs> collectorIlb;
        private @Nullable Output<String> description;
        private @Nullable Output<PacketMirroringEnable> enable;
        private @Nullable Output<PacketMirroringFilterArgs> filter;
        private @Nullable Output<PacketMirroringMirroredResourceInfoArgs> mirroredResources;
        private @Nullable Output<String> name;
        private @Nullable Output<PacketMirroringNetworkInfoArgs> network;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<String> project;
        private Output<String> region;
        private @Nullable Output<String> requestId;

        public Builder() {
    	      // Empty
        }

        public Builder(PacketMirroringArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectorIlb = defaults.collectorIlb;
    	      this.description = defaults.description;
    	      this.enable = defaults.enable;
    	      this.filter = defaults.filter;
    	      this.mirroredResources = defaults.mirroredResources;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.priority = defaults.priority;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.requestId = defaults.requestId;
        }

        public Builder collectorIlb(@Nullable Output<PacketMirroringForwardingRuleInfoArgs> collectorIlb) {
            this.collectorIlb = collectorIlb;
            return this;
        }
        public Builder collectorIlb(@Nullable PacketMirroringForwardingRuleInfoArgs collectorIlb) {
            this.collectorIlb = Codegen.ofNullable(collectorIlb);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder enable(@Nullable Output<PacketMirroringEnable> enable) {
            this.enable = enable;
            return this;
        }
        public Builder enable(@Nullable PacketMirroringEnable enable) {
            this.enable = Codegen.ofNullable(enable);
            return this;
        }
        public Builder filter(@Nullable Output<PacketMirroringFilterArgs> filter) {
            this.filter = filter;
            return this;
        }
        public Builder filter(@Nullable PacketMirroringFilterArgs filter) {
            this.filter = Codegen.ofNullable(filter);
            return this;
        }
        public Builder mirroredResources(@Nullable Output<PacketMirroringMirroredResourceInfoArgs> mirroredResources) {
            this.mirroredResources = mirroredResources;
            return this;
        }
        public Builder mirroredResources(@Nullable PacketMirroringMirroredResourceInfoArgs mirroredResources) {
            this.mirroredResources = Codegen.ofNullable(mirroredResources);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder network(@Nullable Output<PacketMirroringNetworkInfoArgs> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable PacketMirroringNetworkInfoArgs network) {
            this.network = Codegen.ofNullable(network);
            return this;
        }
        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = Codegen.ofNullable(priority);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(Output<String> region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder region(String region) {
            this.region = Output.of(Objects.requireNonNull(region));
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }        public PacketMirroringArgs build() {
            return new PacketMirroringArgs(collectorIlb, description, enable, filter, mirroredResources, name, network, priority, project, region, requestId);
        }
    }
}
