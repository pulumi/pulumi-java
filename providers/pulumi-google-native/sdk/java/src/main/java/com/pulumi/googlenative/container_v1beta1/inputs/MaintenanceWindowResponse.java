// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1beta1.inputs.DailyMaintenanceWindowResponse;
import com.pulumi.googlenative.container_v1beta1.inputs.RecurringTimeWindowResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * MaintenanceWindow defines the maintenance window to be used for the cluster.
 * 
 */
public final class MaintenanceWindowResponse extends com.pulumi.resources.InvokeArgs {

    public static final MaintenanceWindowResponse Empty = new MaintenanceWindowResponse();

    /**
     * DailyMaintenanceWindow specifies a daily maintenance operation window.
     * 
     */
    @Import(name="dailyMaintenanceWindow", required=true)
    private DailyMaintenanceWindowResponse dailyMaintenanceWindow;

    /**
     * @return DailyMaintenanceWindow specifies a daily maintenance operation window.
     * 
     */
    public DailyMaintenanceWindowResponse dailyMaintenanceWindow() {
        return this.dailyMaintenanceWindow;
    }

    /**
     * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
     * 
     */
    @Import(name="maintenanceExclusions", required=true)
    private Map<String,String> maintenanceExclusions;

    /**
     * @return Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
     * 
     */
    public Map<String,String> maintenanceExclusions() {
        return this.maintenanceExclusions;
    }

    /**
     * RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
     * 
     */
    @Import(name="recurringWindow", required=true)
    private RecurringTimeWindowResponse recurringWindow;

    /**
     * @return RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
     * 
     */
    public RecurringTimeWindowResponse recurringWindow() {
        return this.recurringWindow;
    }

    private MaintenanceWindowResponse() {}

    private MaintenanceWindowResponse(MaintenanceWindowResponse $) {
        this.dailyMaintenanceWindow = $.dailyMaintenanceWindow;
        this.maintenanceExclusions = $.maintenanceExclusions;
        this.recurringWindow = $.recurringWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceWindowResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceWindowResponse $;

        public Builder() {
            $ = new MaintenanceWindowResponse();
        }

        public Builder(MaintenanceWindowResponse defaults) {
            $ = new MaintenanceWindowResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyMaintenanceWindow DailyMaintenanceWindow specifies a daily maintenance operation window.
         * 
         * @return builder
         * 
         */
        public Builder dailyMaintenanceWindow(DailyMaintenanceWindowResponse dailyMaintenanceWindow) {
            $.dailyMaintenanceWindow = dailyMaintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceExclusions Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceExclusions(Map<String,String> maintenanceExclusions) {
            $.maintenanceExclusions = maintenanceExclusions;
            return this;
        }

        /**
         * @param recurringWindow RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
         * 
         * @return builder
         * 
         */
        public Builder recurringWindow(RecurringTimeWindowResponse recurringWindow) {
            $.recurringWindow = recurringWindow;
            return this;
        }

        public MaintenanceWindowResponse build() {
            $.dailyMaintenanceWindow = Objects.requireNonNull($.dailyMaintenanceWindow, "expected parameter 'dailyMaintenanceWindow' to be non-null");
            $.maintenanceExclusions = Objects.requireNonNull($.maintenanceExclusions, "expected parameter 'maintenanceExclusions' to be non-null");
            $.recurringWindow = Objects.requireNonNull($.recurringWindow, "expected parameter 'recurringWindow' to be non-null");
            return $;
        }
    }

}
