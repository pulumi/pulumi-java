// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.connectors.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.connectors.v1.inputs.JwtClaimsArgs;
import com.pulumi.googlenative.connectors.v1.inputs.SecretArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
 * 
 */
public final class Oauth2JwtBearerArgs extends com.pulumi.resources.ResourceArgs {

    public static final Oauth2JwtBearerArgs Empty = new Oauth2JwtBearerArgs();

    /**
     * Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<SecretArgs> clientKey;

    /**
     * @return Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Optional<Output<SecretArgs>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * JwtClaims providers fields to generate the token.
     * 
     */
    @Import(name="jwtClaims")
    private @Nullable Output<JwtClaimsArgs> jwtClaims;

    /**
     * @return JwtClaims providers fields to generate the token.
     * 
     */
    public Optional<Output<JwtClaimsArgs>> jwtClaims() {
        return Optional.ofNullable(this.jwtClaims);
    }

    private Oauth2JwtBearerArgs() {}

    private Oauth2JwtBearerArgs(Oauth2JwtBearerArgs $) {
        this.clientKey = $.clientKey;
        this.jwtClaims = $.jwtClaims;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Oauth2JwtBearerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Oauth2JwtBearerArgs $;

        public Builder() {
            $ = new Oauth2JwtBearerArgs();
        }

        public Builder(Oauth2JwtBearerArgs defaults) {
            $ = new Oauth2JwtBearerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientKey Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<SecretArgs> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(SecretArgs clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param jwtClaims JwtClaims providers fields to generate the token.
         * 
         * @return builder
         * 
         */
        public Builder jwtClaims(@Nullable Output<JwtClaimsArgs> jwtClaims) {
            $.jwtClaims = jwtClaims;
            return this;
        }

        /**
         * @param jwtClaims JwtClaims providers fields to generate the token.
         * 
         * @return builder
         * 
         */
        public Builder jwtClaims(JwtClaimsArgs jwtClaims) {
            return jwtClaims(Output.of(jwtClaims));
        }

        public Oauth2JwtBearerArgs build() {
            return $;
        }
    }

}
