// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v3.inputs.GoogleMonitoringV3RangeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A MetricRange is used when each window is good when the value x of a single TimeSeries satisfies range.min &lt;= x &lt;= range.max. The provided TimeSeries must have ValueType = INT64 or ValueType = DOUBLE and MetricKind = GAUGE.
 * 
 */
public final class MetricRangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRangeArgs Empty = new MetricRangeArgs();

    /**
     * Range of values considered &#34;good.&#34; For a one-sided range, set one bound to an infinite value.
     * 
     */
    @Import(name="range")
    private @Nullable Output<GoogleMonitoringV3RangeArgs> range;

    /**
     * @return Range of values considered &#34;good.&#34; For a one-sided range, set one bound to an infinite value.
     * 
     */
    public Optional<Output<GoogleMonitoringV3RangeArgs>> range() {
        return Optional.ofNullable(this.range);
    }

    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
     * 
     */
    @Import(name="timeSeries")
    private @Nullable Output<String> timeSeries;

    /**
     * @return A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
     * 
     */
    public Optional<Output<String>> timeSeries() {
        return Optional.ofNullable(this.timeSeries);
    }

    private MetricRangeArgs() {}

    private MetricRangeArgs(MetricRangeArgs $) {
        this.range = $.range;
        this.timeSeries = $.timeSeries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRangeArgs $;

        public Builder() {
            $ = new MetricRangeArgs();
        }

        public Builder(MetricRangeArgs defaults) {
            $ = new MetricRangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param range Range of values considered &#34;good.&#34; For a one-sided range, set one bound to an infinite value.
         * 
         * @return builder
         * 
         */
        public Builder range(@Nullable Output<GoogleMonitoringV3RangeArgs> range) {
            $.range = range;
            return this;
        }

        /**
         * @param range Range of values considered &#34;good.&#34; For a one-sided range, set one bound to an infinite value.
         * 
         * @return builder
         * 
         */
        public Builder range(GoogleMonitoringV3RangeArgs range) {
            return range(Output.of(range));
        }

        /**
         * @param timeSeries A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
         * 
         * @return builder
         * 
         */
        public Builder timeSeries(@Nullable Output<String> timeSeries) {
            $.timeSeries = timeSeries;
            return this;
        }

        /**
         * @param timeSeries A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
         * 
         * @return builder
         * 
         */
        public Builder timeSeries(String timeSeries) {
            return timeSeries(Output.of(timeSeries));
        }

        public MetricRangeArgs build() {
            return $;
        }
    }

}
