// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults_v1beta3.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.toolresults_v1beta3.inputs.AnyResponse;
import java.lang.String;
import java.util.Objects;


/**
 * An issue detected occurring during a test execution.
 * 
 */
public final class TestIssueResponse extends com.pulumi.resources.InvokeArgs {

    public static final TestIssueResponse Empty = new TestIssueResponse();

    /**
     * Category of issue. Required.
     * 
     */
    @Import(name="category", required=true)
    private String category;

    public String category() {
        return this.category;
    }

    /**
     * A brief human-readable message describing the issue. Required.
     * 
     */
    @Import(name="errorMessage", required=true)
    private String errorMessage;

    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Severity of issue. Required.
     * 
     */
    @Import(name="severity", required=true)
    private String severity;

    public String severity() {
        return this.severity;
    }

    /**
     * Type of issue. Required.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Warning message with additional details of the issue. Should always be a message from com.google.devtools.toolresults.v1.warnings
     * 
     */
    @Import(name="warning", required=true)
    private AnyResponse warning;

    public AnyResponse warning() {
        return this.warning;
    }

    private TestIssueResponse() {}

    private TestIssueResponse(TestIssueResponse $) {
        this.category = $.category;
        this.errorMessage = $.errorMessage;
        this.severity = $.severity;
        this.type = $.type;
        this.warning = $.warning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TestIssueResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TestIssueResponse $;

        public Builder() {
            $ = new TestIssueResponse();
        }

        public Builder(TestIssueResponse defaults) {
            $ = new TestIssueResponse(Objects.requireNonNull(defaults));
        }

        public Builder category(String category) {
            $.category = category;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        public Builder severity(String severity) {
            $.severity = severity;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder warning(AnyResponse warning) {
            $.warning = warning;
            return this;
        }

        public TestIssueResponse build() {
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.errorMessage = Objects.requireNonNull($.errorMessage, "expected parameter 'errorMessage' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.warning = Objects.requireNonNull($.warning, "expected parameter 'warning' to be non-null");
            return $;
        }
    }

}
