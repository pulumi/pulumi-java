// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.testing.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.testing.v1.outputs.AccountResponse;
import com.pulumi.googlenative.testing.v1.outputs.ApkResponse;
import com.pulumi.googlenative.testing.v1.outputs.DeviceFileResponse;
import com.pulumi.googlenative.testing.v1.outputs.EnvironmentVariableResponse;
import com.pulumi.googlenative.testing.v1.outputs.SystraceSetupResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TestSetupResponse {
    /**
     * @return The device will be logged in on this account for the duration of the test.
     * 
     */
    private final AccountResponse account;
    /**
     * @return APKs to install in addition to those being directly tested. Currently capped at 100.
     * 
     */
    private final List<ApkResponse> additionalApks;
    /**
     * @return List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     * 
     */
    private final List<String> directoriesToPull;
    /**
     * @return Whether to prevent all runtime permissions to be granted at app install
     * 
     */
    private final Boolean dontAutograntPermissions;
    /**
     * @return Environment variables to set for the test (only applicable for instrumentation tests).
     * 
     */
    private final List<EnvironmentVariableResponse> environmentVariables;
    /**
     * @return List of files to push to the device before starting the test.
     * 
     */
    private final List<DeviceFileResponse> filesToPush;
    /**
     * @return The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * 
     */
    private final String networkProfile;
    /**
     * @return Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     * @deprecated
     * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     */
    @Deprecated /* Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run. */
    private final SystraceSetupResponse systrace;

    @CustomType.Constructor
    private TestSetupResponse(
        @CustomType.Parameter("account") AccountResponse account,
        @CustomType.Parameter("additionalApks") List<ApkResponse> additionalApks,
        @CustomType.Parameter("directoriesToPull") List<String> directoriesToPull,
        @CustomType.Parameter("dontAutograntPermissions") Boolean dontAutograntPermissions,
        @CustomType.Parameter("environmentVariables") List<EnvironmentVariableResponse> environmentVariables,
        @CustomType.Parameter("filesToPush") List<DeviceFileResponse> filesToPush,
        @CustomType.Parameter("networkProfile") String networkProfile,
        @CustomType.Parameter("systrace") SystraceSetupResponse systrace) {
        this.account = account;
        this.additionalApks = additionalApks;
        this.directoriesToPull = directoriesToPull;
        this.dontAutograntPermissions = dontAutograntPermissions;
        this.environmentVariables = environmentVariables;
        this.filesToPush = filesToPush;
        this.networkProfile = networkProfile;
        this.systrace = systrace;
    }

    /**
     * @return The device will be logged in on this account for the duration of the test.
     * 
     */
    public AccountResponse account() {
        return this.account;
    }
    /**
     * @return APKs to install in addition to those being directly tested. Currently capped at 100.
     * 
     */
    public List<ApkResponse> additionalApks() {
        return this.additionalApks;
    }
    /**
     * @return List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     * 
     */
    public List<String> directoriesToPull() {
        return this.directoriesToPull;
    }
    /**
     * @return Whether to prevent all runtime permissions to be granted at app install
     * 
     */
    public Boolean dontAutograntPermissions() {
        return this.dontAutograntPermissions;
    }
    /**
     * @return Environment variables to set for the test (only applicable for instrumentation tests).
     * 
     */
    public List<EnvironmentVariableResponse> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return List of files to push to the device before starting the test.
     * 
     */
    public List<DeviceFileResponse> filesToPush() {
        return this.filesToPush;
    }
    /**
     * @return The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * 
     */
    public String networkProfile() {
        return this.networkProfile;
    }
    /**
     * @return Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     * @deprecated
     * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     * 
     */
    @Deprecated /* Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run. */
    public SystraceSetupResponse systrace() {
        return this.systrace;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestSetupResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountResponse account;
        private List<ApkResponse> additionalApks;
        private List<String> directoriesToPull;
        private Boolean dontAutograntPermissions;
        private List<EnvironmentVariableResponse> environmentVariables;
        private List<DeviceFileResponse> filesToPush;
        private String networkProfile;
        private SystraceSetupResponse systrace;

        public Builder() {
    	      // Empty
        }

        public Builder(TestSetupResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.additionalApks = defaults.additionalApks;
    	      this.directoriesToPull = defaults.directoriesToPull;
    	      this.dontAutograntPermissions = defaults.dontAutograntPermissions;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.filesToPush = defaults.filesToPush;
    	      this.networkProfile = defaults.networkProfile;
    	      this.systrace = defaults.systrace;
        }

        public Builder account(AccountResponse account) {
            this.account = Objects.requireNonNull(account);
            return this;
        }
        public Builder additionalApks(List<ApkResponse> additionalApks) {
            this.additionalApks = Objects.requireNonNull(additionalApks);
            return this;
        }
        public Builder additionalApks(ApkResponse... additionalApks) {
            return additionalApks(List.of(additionalApks));
        }
        public Builder directoriesToPull(List<String> directoriesToPull) {
            this.directoriesToPull = Objects.requireNonNull(directoriesToPull);
            return this;
        }
        public Builder directoriesToPull(String... directoriesToPull) {
            return directoriesToPull(List.of(directoriesToPull));
        }
        public Builder dontAutograntPermissions(Boolean dontAutograntPermissions) {
            this.dontAutograntPermissions = Objects.requireNonNull(dontAutograntPermissions);
            return this;
        }
        public Builder environmentVariables(List<EnvironmentVariableResponse> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }
        public Builder environmentVariables(EnvironmentVariableResponse... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }
        public Builder filesToPush(List<DeviceFileResponse> filesToPush) {
            this.filesToPush = Objects.requireNonNull(filesToPush);
            return this;
        }
        public Builder filesToPush(DeviceFileResponse... filesToPush) {
            return filesToPush(List.of(filesToPush));
        }
        public Builder networkProfile(String networkProfile) {
            this.networkProfile = Objects.requireNonNull(networkProfile);
            return this;
        }
        public Builder systrace(SystraceSetupResponse systrace) {
            this.systrace = Objects.requireNonNull(systrace);
            return this;
        }        public TestSetupResponse build() {
            return new TestSetupResponse(account, additionalApks, directoriesToPull, dontAutograntPermissions, environmentVariables, filesToPush, networkProfile, systrace);
        }
    }
}
