// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_alpha.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.
 * 
 */
public final class TlsCertificatePathsResponse extends com.pulumi.resources.InvokeArgs {

    public static final TlsCertificatePathsResponse Empty = new TlsCertificatePathsResponse();

    /**
     * The path to the file holding the client or server TLS certificate to use.
     * 
     */
    @Import(name="certificatePath", required=true)
    private String certificatePath;

    /**
     * @return The path to the file holding the client or server TLS certificate to use.
     * 
     */
    public String certificatePath() {
        return this.certificatePath;
    }

    /**
     * The path to the file holding the client or server private key.
     * 
     */
    @Import(name="privateKeyPath", required=true)
    private String privateKeyPath;

    /**
     * @return The path to the file holding the client or server private key.
     * 
     */
    public String privateKeyPath() {
        return this.privateKeyPath;
    }

    private TlsCertificatePathsResponse() {}

    private TlsCertificatePathsResponse(TlsCertificatePathsResponse $) {
        this.certificatePath = $.certificatePath;
        this.privateKeyPath = $.privateKeyPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsCertificatePathsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsCertificatePathsResponse $;

        public Builder() {
            $ = new TlsCertificatePathsResponse();
        }

        public Builder(TlsCertificatePathsResponse defaults) {
            $ = new TlsCertificatePathsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificatePath The path to the file holding the client or server TLS certificate to use.
         * 
         * @return builder
         * 
         */
        public Builder certificatePath(String certificatePath) {
            $.certificatePath = certificatePath;
            return this;
        }

        /**
         * @param privateKeyPath The path to the file holding the client or server private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPath(String privateKeyPath) {
            $.privateKeyPath = privateKeyPath;
            return this;
        }

        public TlsCertificatePathsResponse build() {
            $.certificatePath = Objects.requireNonNull($.certificatePath, "expected parameter 'certificatePath' to be non-null");
            $.privateKeyPath = Objects.requireNonNull($.privateKeyPath, "expected parameter 'privateKeyPath' to be non-null");
            return $;
        }
    }

}
