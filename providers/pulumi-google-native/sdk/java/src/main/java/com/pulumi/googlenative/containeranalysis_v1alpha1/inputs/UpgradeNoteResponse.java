// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.UpgradeDistributionResponse;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.VersionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
 * 
 */
public final class UpgradeNoteResponse extends com.pulumi.resources.InvokeArgs {

    public static final UpgradeNoteResponse Empty = new UpgradeNoteResponse();

    /**
     * Metadata about the upgrade for each specific operating system.
     * 
     */
    @Import(name="distributions", required=true)
    private List<UpgradeDistributionResponse> distributions;

    /**
     * @return Metadata about the upgrade for each specific operating system.
     * 
     */
    public List<UpgradeDistributionResponse> distributions() {
        return this.distributions;
    }

    /**
     * Required - The package this Upgrade is for.
     * 
     */
    @Import(name="package", required=true)
    private String package_;

    /**
     * @return Required - The package this Upgrade is for.
     * 
     */
    public String package_() {
        return this.package_;
    }

    /**
     * Required - The version of the package in machine + human readable form.
     * 
     */
    @Import(name="version", required=true)
    private VersionResponse version;

    /**
     * @return Required - The version of the package in machine + human readable form.
     * 
     */
    public VersionResponse version() {
        return this.version;
    }

    private UpgradeNoteResponse() {}

    private UpgradeNoteResponse(UpgradeNoteResponse $) {
        this.distributions = $.distributions;
        this.package_ = $.package_;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpgradeNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpgradeNoteResponse $;

        public Builder() {
            $ = new UpgradeNoteResponse();
        }

        public Builder(UpgradeNoteResponse defaults) {
            $ = new UpgradeNoteResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param distributions Metadata about the upgrade for each specific operating system.
         * 
         * @return builder
         * 
         */
        public Builder distributions(List<UpgradeDistributionResponse> distributions) {
            $.distributions = distributions;
            return this;
        }

        /**
         * @param distributions Metadata about the upgrade for each specific operating system.
         * 
         * @return builder
         * 
         */
        public Builder distributions(UpgradeDistributionResponse... distributions) {
            return distributions(List.of(distributions));
        }

        /**
         * @param package_ Required - The package this Upgrade is for.
         * 
         * @return builder
         * 
         */
        public Builder package_(String package_) {
            $.package_ = package_;
            return this;
        }

        /**
         * @param version Required - The version of the package in machine + human readable form.
         * 
         * @return builder
         * 
         */
        public Builder version(VersionResponse version) {
            $.version = version;
            return this;
        }

        public UpgradeNoteResponse build() {
            $.distributions = Objects.requireNonNull($.distributions, "expected parameter 'distributions' to be non-null");
            $.package_ = Objects.requireNonNull($.package_, "expected parameter 'package' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
