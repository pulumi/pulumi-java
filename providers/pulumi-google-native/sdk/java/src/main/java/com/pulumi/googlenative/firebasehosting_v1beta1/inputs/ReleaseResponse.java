// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.ActingUserResponse;
import com.pulumi.googlenative.firebasehosting_v1beta1.inputs.VersionResponse;
import java.lang.String;
import java.util.Objects;


/**
 *  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
 * 
 */
public final class ReleaseResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReleaseResponse Empty = new ReleaseResponse();

    /**
     * The deploy description when the release was created. The value can be up to 512 characters.
     * 
     */
    @Import(name="message", required=true)
    private String message;

    public String message() {
        return this.message;
    }

    /**
     * The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The time at which the version is set to be public.
     * 
     */
    @Import(name="releaseTime", required=true)
    private String releaseTime;

    public String releaseTime() {
        return this.releaseTime;
    }

    /**
     * Identifies the user who created the release.
     * 
     */
    @Import(name="releaseUser", required=true)
    private ActingUserResponse releaseUser;

    public ActingUserResponse releaseUser() {
        return this.releaseUser;
    }

    /**
     * Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The configuration and content that was released.
     * 
     */
    @Import(name="version", required=true)
    private VersionResponse version;

    public VersionResponse version() {
        return this.version;
    }

    private ReleaseResponse() {}

    private ReleaseResponse(ReleaseResponse $) {
        this.message = $.message;
        this.name = $.name;
        this.releaseTime = $.releaseTime;
        this.releaseUser = $.releaseUser;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseResponse $;

        public Builder() {
            $ = new ReleaseResponse();
        }

        public Builder(ReleaseResponse defaults) {
            $ = new ReleaseResponse(Objects.requireNonNull(defaults));
        }

        public Builder message(String message) {
            $.message = message;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder releaseTime(String releaseTime) {
            $.releaseTime = releaseTime;
            return this;
        }

        public Builder releaseUser(ActingUserResponse releaseUser) {
            $.releaseUser = releaseUser;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder version(VersionResponse version) {
            $.version = version;
            return this;
        }

        public ReleaseResponse build() {
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.releaseTime = Objects.requireNonNull($.releaseTime, "expected parameter 'releaseTime' to be non-null");
            $.releaseUser = Objects.requireNonNull($.releaseUser, "expected parameter 'releaseUser' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
