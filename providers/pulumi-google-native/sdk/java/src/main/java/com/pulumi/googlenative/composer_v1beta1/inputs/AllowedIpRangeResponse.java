// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.composer_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Allowed IP range with user-provided description.
 * 
 */
public final class AllowedIpRangeResponse extends com.pulumi.resources.InvokeArgs {

    public static final AllowedIpRangeResponse Empty = new AllowedIpRangeResponse();

    /**
     * Optional. User-provided description. It must contain at most 300 characters.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Optional. User-provided description. It must contain at most 300 characters.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
     * 
     */
    @Import(name="value", required=true)
    private String value;

    /**
     * @return IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
     * 
     */
    public String value() {
        return this.value;
    }

    private AllowedIpRangeResponse() {}

    private AllowedIpRangeResponse(AllowedIpRangeResponse $) {
        this.description = $.description;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AllowedIpRangeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AllowedIpRangeResponse $;

        public Builder() {
            $ = new AllowedIpRangeResponse();
        }

        public Builder(AllowedIpRangeResponse defaults) {
            $ = new AllowedIpRangeResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. User-provided description. It must contain at most 300 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param value IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public AllowedIpRangeResponse build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
