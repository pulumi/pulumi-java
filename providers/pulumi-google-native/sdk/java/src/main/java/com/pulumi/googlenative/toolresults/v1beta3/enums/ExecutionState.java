// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.enums;

import com.pulumi.core.annotations.EnumType;
import java.lang.String;
import java.util.Objects;
import java.util.StringJoiner;

    /**
     * The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
     * 
     */
    @EnumType
    public enum ExecutionState {
        /**
         * Should never be in this state. Exists for proto deserialization backward compatibility.
         * 
         */
        UnknownState("unknownState"),
        /**
         * The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
         * 
         */
        Pending("pending"),
        /**
         * The Execution/Step is in progress.
         * 
         */
        InProgress("inProgress"),
        /**
         * The finalized, immutable state. Steps/Executions in this state cannot be modified.
         * 
         */
        Complete("complete");

        private final String value;

        ExecutionState(String value) {
            this.value = Objects.requireNonNull(value);
        }

        @EnumType.Converter
        public String getValue() {
            return this.value;
        }

        @Override
        public String toString() {
            return new StringJoiner(", ", "ExecutionState[", "]")
                .add("value='" + this.value + "'")
                .toString();
        }
    }
