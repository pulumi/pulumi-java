// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.ArtifactRuleResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.SigningKeyResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
 * 
 */
public final class InTotoResponse extends com.pulumi.resources.InvokeArgs {

    public static final InTotoResponse Empty = new InTotoResponse();

    /**
     * This field contains the expected command used to perform the step.
     * 
     */
    @Import(name="expectedCommand", required=true)
    private List<String> expectedCommand;

    /**
     * @return This field contains the expected command used to perform the step.
     * 
     */
    public List<String> expectedCommand() {
        return this.expectedCommand;
    }

    /**
     * The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
     * 
     */
    @Import(name="expectedMaterials", required=true)
    private List<ArtifactRuleResponse> expectedMaterials;

    /**
     * @return The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
     * 
     */
    public List<ArtifactRuleResponse> expectedMaterials() {
        return this.expectedMaterials;
    }

    @Import(name="expectedProducts", required=true)
    private List<ArtifactRuleResponse> expectedProducts;

    public List<ArtifactRuleResponse> expectedProducts() {
        return this.expectedProducts;
    }

    /**
     * This field contains the public keys that can be used to verify the signatures on the step metadata.
     * 
     */
    @Import(name="signingKeys", required=true)
    private List<SigningKeyResponse> signingKeys;

    /**
     * @return This field contains the public keys that can be used to verify the signatures on the step metadata.
     * 
     */
    public List<SigningKeyResponse> signingKeys() {
        return this.signingKeys;
    }

    /**
     * This field identifies the name of the step in the supply chain.
     * 
     */
    @Import(name="stepName", required=true)
    private String stepName;

    /**
     * @return This field identifies the name of the step in the supply chain.
     * 
     */
    public String stepName() {
        return this.stepName;
    }

    /**
     * This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
     * 
     */
    @Import(name="threshold", required=true)
    private String threshold;

    /**
     * @return This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
     * 
     */
    public String threshold() {
        return this.threshold;
    }

    private InTotoResponse() {}

    private InTotoResponse(InTotoResponse $) {
        this.expectedCommand = $.expectedCommand;
        this.expectedMaterials = $.expectedMaterials;
        this.expectedProducts = $.expectedProducts;
        this.signingKeys = $.signingKeys;
        this.stepName = $.stepName;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InTotoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InTotoResponse $;

        public Builder() {
            $ = new InTotoResponse();
        }

        public Builder(InTotoResponse defaults) {
            $ = new InTotoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param expectedCommand This field contains the expected command used to perform the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedCommand(List<String> expectedCommand) {
            $.expectedCommand = expectedCommand;
            return this;
        }

        /**
         * @param expectedCommand This field contains the expected command used to perform the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedCommand(String... expectedCommand) {
            return expectedCommand(List.of(expectedCommand));
        }

        /**
         * @param expectedMaterials The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedMaterials(List<ArtifactRuleResponse> expectedMaterials) {
            $.expectedMaterials = expectedMaterials;
            return this;
        }

        /**
         * @param expectedMaterials The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
         * 
         * @return builder
         * 
         */
        public Builder expectedMaterials(ArtifactRuleResponse... expectedMaterials) {
            return expectedMaterials(List.of(expectedMaterials));
        }

        public Builder expectedProducts(List<ArtifactRuleResponse> expectedProducts) {
            $.expectedProducts = expectedProducts;
            return this;
        }

        public Builder expectedProducts(ArtifactRuleResponse... expectedProducts) {
            return expectedProducts(List.of(expectedProducts));
        }

        /**
         * @param signingKeys This field contains the public keys that can be used to verify the signatures on the step metadata.
         * 
         * @return builder
         * 
         */
        public Builder signingKeys(List<SigningKeyResponse> signingKeys) {
            $.signingKeys = signingKeys;
            return this;
        }

        /**
         * @param signingKeys This field contains the public keys that can be used to verify the signatures on the step metadata.
         * 
         * @return builder
         * 
         */
        public Builder signingKeys(SigningKeyResponse... signingKeys) {
            return signingKeys(List.of(signingKeys));
        }

        /**
         * @param stepName This field identifies the name of the step in the supply chain.
         * 
         * @return builder
         * 
         */
        public Builder stepName(String stepName) {
            $.stepName = stepName;
            return this;
        }

        /**
         * @param threshold This field contains a value that indicates the minimum number of keys that need to be used to sign the step&#39;s in-toto link.
         * 
         * @return builder
         * 
         */
        public Builder threshold(String threshold) {
            $.threshold = threshold;
            return this;
        }

        public InTotoResponse build() {
            $.expectedCommand = Objects.requireNonNull($.expectedCommand, "expected parameter 'expectedCommand' to be non-null");
            $.expectedMaterials = Objects.requireNonNull($.expectedMaterials, "expected parameter 'expectedMaterials' to be non-null");
            $.expectedProducts = Objects.requireNonNull($.expectedProducts, "expected parameter 'expectedProducts' to be non-null");
            $.signingKeys = Objects.requireNonNull($.signingKeys, "expected parameter 'signingKeys' to be non-null");
            $.stepName = Objects.requireNonNull($.stepName, "expected parameter 'stepName' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            return $;
        }
    }

}
