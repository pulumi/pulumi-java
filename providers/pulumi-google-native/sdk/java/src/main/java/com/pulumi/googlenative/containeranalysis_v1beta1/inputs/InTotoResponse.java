// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.ArtifactRuleResponse;
import com.pulumi.googlenative.containeranalysis_v1beta1.inputs.SigningKeyResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
 * 
 */
public final class InTotoResponse extends com.pulumi.resources.InvokeArgs {

    public static final InTotoResponse Empty = new InTotoResponse();

    /**
     * This field contains the expected command used to perform the step.
     * 
     */
    @Import(name="expectedCommand", required=true)
      private final List<String> expectedCommand;

    public List<String> expectedCommand() {
        return this.expectedCommand;
    }

    /**
     * The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
     * 
     */
    @Import(name="expectedMaterials", required=true)
      private final List<ArtifactRuleResponse> expectedMaterials;

    public List<ArtifactRuleResponse> expectedMaterials() {
        return this.expectedMaterials;
    }

    @Import(name="expectedProducts", required=true)
      private final List<ArtifactRuleResponse> expectedProducts;

    public List<ArtifactRuleResponse> expectedProducts() {
        return this.expectedProducts;
    }

    /**
     * This field contains the public keys that can be used to verify the signatures on the step metadata.
     * 
     */
    @Import(name="signingKeys", required=true)
      private final List<SigningKeyResponse> signingKeys;

    public List<SigningKeyResponse> signingKeys() {
        return this.signingKeys;
    }

    /**
     * This field identifies the name of the step in the supply chain.
     * 
     */
    @Import(name="stepName", required=true)
      private final String stepName;

    public String stepName() {
        return this.stepName;
    }

    /**
     * This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
     * 
     */
    @Import(name="threshold", required=true)
      private final String threshold;

    public String threshold() {
        return this.threshold;
    }

    public InTotoResponse(
        List<String> expectedCommand,
        List<ArtifactRuleResponse> expectedMaterials,
        List<ArtifactRuleResponse> expectedProducts,
        List<SigningKeyResponse> signingKeys,
        String stepName,
        String threshold) {
        this.expectedCommand = Objects.requireNonNull(expectedCommand, "expected parameter 'expectedCommand' to be non-null");
        this.expectedMaterials = Objects.requireNonNull(expectedMaterials, "expected parameter 'expectedMaterials' to be non-null");
        this.expectedProducts = Objects.requireNonNull(expectedProducts, "expected parameter 'expectedProducts' to be non-null");
        this.signingKeys = Objects.requireNonNull(signingKeys, "expected parameter 'signingKeys' to be non-null");
        this.stepName = Objects.requireNonNull(stepName, "expected parameter 'stepName' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
    }

    private InTotoResponse() {
        this.expectedCommand = List.of();
        this.expectedMaterials = List.of();
        this.expectedProducts = List.of();
        this.signingKeys = List.of();
        this.stepName = null;
        this.threshold = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InTotoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> expectedCommand;
        private List<ArtifactRuleResponse> expectedMaterials;
        private List<ArtifactRuleResponse> expectedProducts;
        private List<SigningKeyResponse> signingKeys;
        private String stepName;
        private String threshold;

        public Builder() {
    	      // Empty
        }

        public Builder(InTotoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedCommand = defaults.expectedCommand;
    	      this.expectedMaterials = defaults.expectedMaterials;
    	      this.expectedProducts = defaults.expectedProducts;
    	      this.signingKeys = defaults.signingKeys;
    	      this.stepName = defaults.stepName;
    	      this.threshold = defaults.threshold;
        }

        public Builder expectedCommand(List<String> expectedCommand) {
            this.expectedCommand = Objects.requireNonNull(expectedCommand);
            return this;
        }
        public Builder expectedCommand(String... expectedCommand) {
            return expectedCommand(List.of(expectedCommand));
        }
        public Builder expectedMaterials(List<ArtifactRuleResponse> expectedMaterials) {
            this.expectedMaterials = Objects.requireNonNull(expectedMaterials);
            return this;
        }
        public Builder expectedMaterials(ArtifactRuleResponse... expectedMaterials) {
            return expectedMaterials(List.of(expectedMaterials));
        }
        public Builder expectedProducts(List<ArtifactRuleResponse> expectedProducts) {
            this.expectedProducts = Objects.requireNonNull(expectedProducts);
            return this;
        }
        public Builder expectedProducts(ArtifactRuleResponse... expectedProducts) {
            return expectedProducts(List.of(expectedProducts));
        }
        public Builder signingKeys(List<SigningKeyResponse> signingKeys) {
            this.signingKeys = Objects.requireNonNull(signingKeys);
            return this;
        }
        public Builder signingKeys(SigningKeyResponse... signingKeys) {
            return signingKeys(List.of(signingKeys));
        }
        public Builder stepName(String stepName) {
            this.stepName = Objects.requireNonNull(stepName);
            return this;
        }
        public Builder threshold(String threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }        public InTotoResponse build() {
            return new InTotoResponse(expectedCommand, expectedMaterials, expectedProducts, signingKeys, stepName, threshold);
        }
    }
}
