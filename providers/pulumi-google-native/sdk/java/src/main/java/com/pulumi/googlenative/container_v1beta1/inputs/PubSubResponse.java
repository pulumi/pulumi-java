// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1beta1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1beta1.inputs.FilterResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Pub/Sub specific notification config.
 * 
 */
public final class PubSubResponse extends com.pulumi.resources.InvokeArgs {

    public static final PubSubResponse Empty = new PubSubResponse();

    /**
     * Enable notifications for Pub/Sub.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Enable notifications for Pub/Sub.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
     * 
     */
    @Import(name="filter", required=true)
    private FilterResponse filter;

    /**
     * @return Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
     * 
     */
    public FilterResponse filter() {
        return this.filter;
    }

    /**
     * The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
     * 
     */
    @Import(name="topic", required=true)
    private String topic;

    /**
     * @return The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
     * 
     */
    public String topic() {
        return this.topic;
    }

    private PubSubResponse() {}

    private PubSubResponse(PubSubResponse $) {
        this.enabled = $.enabled;
        this.filter = $.filter;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PubSubResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PubSubResponse $;

        public Builder() {
            $ = new PubSubResponse();
        }

        public Builder(PubSubResponse defaults) {
            $ = new PubSubResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable notifications for Pub/Sub.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param filter Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
         * 
         * @return builder
         * 
         */
        public Builder filter(FilterResponse filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param topic The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            $.topic = topic;
            return this;
        }

        public PubSubResponse build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
