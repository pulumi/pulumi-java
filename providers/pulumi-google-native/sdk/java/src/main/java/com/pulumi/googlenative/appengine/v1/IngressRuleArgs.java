// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.appengine.v1.enums.IngressRuleAction;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngressRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngressRuleArgs Empty = new IngressRuleArgs();

    /**
     * The action to take on matched requests.
     * 
     */
    @Import(name="action")
    private @Nullable Output<IngressRuleAction> action;

    /**
     * @return The action to take on matched requests.
     * 
     */
    public Optional<Output<IngressRuleAction>> action() {
        return Optional.ofNullable(this.action);
    }

    @Import(name="appId", required=true)
    private Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }

    /**
     * An optional string description of this rule. This field has a maximum length of 400 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional string description of this rule. This field has a maximum length of 400 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character &#34;*&#34; to match all IPs equivalent to &#34;0/0&#34; and &#34;::/0&#34; together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
     * 
     */
    @Import(name="sourceRange")
    private @Nullable Output<String> sourceRange;

    /**
     * @return IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character &#34;*&#34; to match all IPs equivalent to &#34;0/0&#34; and &#34;::/0&#34; together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
     * 
     */
    public Optional<Output<String>> sourceRange() {
        return Optional.ofNullable(this.sourceRange);
    }

    private IngressRuleArgs() {}

    private IngressRuleArgs(IngressRuleArgs $) {
        this.action = $.action;
        this.appId = $.appId;
        this.description = $.description;
        this.priority = $.priority;
        this.sourceRange = $.sourceRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressRuleArgs $;

        public Builder() {
            $ = new IngressRuleArgs();
        }

        public Builder(IngressRuleArgs defaults) {
            $ = new IngressRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take on matched requests.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<IngressRuleAction> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take on matched requests.
         * 
         * @return builder
         * 
         */
        public Builder action(IngressRuleAction action) {
            return action(Output.of(action));
        }

        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param description An optional string description of this rule. This field has a maximum length of 400 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional string description of this rule. This field has a maximum length of 400 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param priority A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param sourceRange IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character &#34;*&#34; to match all IPs equivalent to &#34;0/0&#34; and &#34;::/0&#34; together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
         * 
         * @return builder
         * 
         */
        public Builder sourceRange(@Nullable Output<String> sourceRange) {
            $.sourceRange = sourceRange;
            return this;
        }

        /**
         * @param sourceRange IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character &#34;*&#34; to match all IPs equivalent to &#34;0/0&#34; and &#34;::/0&#34; together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
         * 
         * @return builder
         * 
         */
        public Builder sourceRange(String sourceRange) {
            return sourceRange(Output.of(sourceRange));
        }

        public IngressRuleArgs build() {
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            return $;
        }
    }

}
