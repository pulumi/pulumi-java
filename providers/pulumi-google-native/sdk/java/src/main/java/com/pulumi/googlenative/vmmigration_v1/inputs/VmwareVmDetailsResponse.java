// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * VmwareVmDetails describes a VM in vCenter.
 * 
 */
public final class VmwareVmDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final VmwareVmDetailsResponse Empty = new VmwareVmDetailsResponse();

    /**
     * The VM Boot Option.
     * 
     */
    @Import(name="bootOption", required=true)
    private String bootOption;

    public String bootOption() {
        return this.bootOption;
    }

    /**
     * The total size of the storage allocated to the VM in MB.
     * 
     */
    @Import(name="committedStorageMb", required=true)
    private String committedStorageMb;

    public String committedStorageMb() {
        return this.committedStorageMb;
    }

    /**
     * The number of cpus in the VM.
     * 
     */
    @Import(name="cpuCount", required=true)
    private Integer cpuCount;

    public Integer cpuCount() {
        return this.cpuCount;
    }

    /**
     * The descriptive name of the vCenter&#39;s datacenter this VM is contained in.
     * 
     */
    @Import(name="datacenterDescription", required=true)
    private String datacenterDescription;

    public String datacenterDescription() {
        return this.datacenterDescription;
    }

    /**
     * The id of the vCenter&#39;s datacenter this VM is contained in.
     * 
     */
    @Import(name="datacenterId", required=true)
    private String datacenterId;

    public String datacenterId() {
        return this.datacenterId;
    }

    /**
     * The number of disks the VM has.
     * 
     */
    @Import(name="diskCount", required=true)
    private Integer diskCount;

    public Integer diskCount() {
        return this.diskCount;
    }

    /**
     * The display name of the VM. Note that this is not necessarily unique.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * The VM&#39;s OS. See for example https://pubs.vmware.com/vi-sdk/visdk250/ReferenceGuide/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
     * 
     */
    @Import(name="guestDescription", required=true)
    private String guestDescription;

    public String guestDescription() {
        return this.guestDescription;
    }

    /**
     * The size of the memory of the VM in MB.
     * 
     */
    @Import(name="memoryMb", required=true)
    private Integer memoryMb;

    public Integer memoryMb() {
        return this.memoryMb;
    }

    /**
     * The power state of the VM at the moment list was taken.
     * 
     */
    @Import(name="powerState", required=true)
    private String powerState;

    public String powerState() {
        return this.powerState;
    }

    /**
     * The unique identifier of the VM in vCenter.
     * 
     */
    @Import(name="uuid", required=true)
    private String uuid;

    public String uuid() {
        return this.uuid;
    }

    /**
     * The VM&#39;s id in the source (note that this is not the MigratingVm&#39;s id). This is the moref id of the VM.
     * 
     */
    @Import(name="vmId", required=true)
    private String vmId;

    public String vmId() {
        return this.vmId;
    }

    private VmwareVmDetailsResponse() {}

    private VmwareVmDetailsResponse(VmwareVmDetailsResponse $) {
        this.bootOption = $.bootOption;
        this.committedStorageMb = $.committedStorageMb;
        this.cpuCount = $.cpuCount;
        this.datacenterDescription = $.datacenterDescription;
        this.datacenterId = $.datacenterId;
        this.diskCount = $.diskCount;
        this.displayName = $.displayName;
        this.guestDescription = $.guestDescription;
        this.memoryMb = $.memoryMb;
        this.powerState = $.powerState;
        this.uuid = $.uuid;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareVmDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareVmDetailsResponse $;

        public Builder() {
            $ = new VmwareVmDetailsResponse();
        }

        public Builder(VmwareVmDetailsResponse defaults) {
            $ = new VmwareVmDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder bootOption(String bootOption) {
            $.bootOption = bootOption;
            return this;
        }

        public Builder committedStorageMb(String committedStorageMb) {
            $.committedStorageMb = committedStorageMb;
            return this;
        }

        public Builder cpuCount(Integer cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        public Builder datacenterDescription(String datacenterDescription) {
            $.datacenterDescription = datacenterDescription;
            return this;
        }

        public Builder datacenterId(String datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        public Builder diskCount(Integer diskCount) {
            $.diskCount = diskCount;
            return this;
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder guestDescription(String guestDescription) {
            $.guestDescription = guestDescription;
            return this;
        }

        public Builder memoryMb(Integer memoryMb) {
            $.memoryMb = memoryMb;
            return this;
        }

        public Builder powerState(String powerState) {
            $.powerState = powerState;
            return this;
        }

        public Builder uuid(String uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder vmId(String vmId) {
            $.vmId = vmId;
            return this;
        }

        public VmwareVmDetailsResponse build() {
            $.bootOption = Objects.requireNonNull($.bootOption, "expected parameter 'bootOption' to be non-null");
            $.committedStorageMb = Objects.requireNonNull($.committedStorageMb, "expected parameter 'committedStorageMb' to be non-null");
            $.cpuCount = Objects.requireNonNull($.cpuCount, "expected parameter 'cpuCount' to be non-null");
            $.datacenterDescription = Objects.requireNonNull($.datacenterDescription, "expected parameter 'datacenterDescription' to be non-null");
            $.datacenterId = Objects.requireNonNull($.datacenterId, "expected parameter 'datacenterId' to be non-null");
            $.diskCount = Objects.requireNonNull($.diskCount, "expected parameter 'diskCount' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.guestDescription = Objects.requireNonNull($.guestDescription, "expected parameter 'guestDescription' to be non-null");
            $.memoryMb = Objects.requireNonNull($.memoryMb, "expected parameter 'memoryMb' to be non-null");
            $.powerState = Objects.requireNonNull($.powerState, "expected parameter 'powerState' to be non-null");
            $.uuid = Objects.requireNonNull($.uuid, "expected parameter 'uuid' to be non-null");
            $.vmId = Objects.requireNonNull($.vmId, "expected parameter 'vmId' to be non-null");
            return $;
        }
    }

}
