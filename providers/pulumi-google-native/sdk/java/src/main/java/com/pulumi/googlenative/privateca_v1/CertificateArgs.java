// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.privateca_v1.enums.CertificateSubjectMode;
import com.pulumi.googlenative.privateca_v1.inputs.CertificateConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    @Import(name="caPoolId", required=true)
    private Output<String> caPoolId;

    public Output<String> caPoolId() {
        return this.caPoolId;
    }

    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     * 
     */
    @Import(name="certificateTemplate")
    private @Nullable Output<String> certificateTemplate;

    /**
     * @return Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     * 
     */
    public Optional<Output<String>> certificateTemplate() {
        return Optional.ofNullable(this.certificateTemplate);
    }

    /**
     * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     * 
     */
    @Import(name="config")
    private @Nullable Output<CertificateConfigArgs> config;

    /**
     * @return Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     * 
     */
    public Optional<Output<CertificateConfigArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    @Import(name="issuingCertificateAuthorityId")
    private @Nullable Output<String> issuingCertificateAuthorityId;

    public Optional<Output<String>> issuingCertificateAuthorityId() {
        return Optional.ofNullable(this.issuingCertificateAuthorityId);
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels with user-defined metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Immutable. The desired lifetime of a certificate. Used to create the &#34;not_before_time&#34; and &#34;not_after_time&#34; fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     * 
     */
    @Import(name="lifetime", required=true)
    private Output<String> lifetime;

    /**
     * @return Immutable. The desired lifetime of a certificate. Used to create the &#34;not_before_time&#34; and &#34;not_after_time&#34; fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     * 
     */
    public Output<String> lifetime() {
        return this.lifetime;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    @Import(name="pemCsr")
    private @Nullable Output<String> pemCsr;

    /**
     * @return Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    public Optional<Output<String>> pemCsr() {
        return Optional.ofNullable(this.pemCsr);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Immutable. Specifies how the Certificate&#39;s identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     * 
     */
    @Import(name="subjectMode")
    private @Nullable Output<CertificateSubjectMode> subjectMode;

    /**
     * @return Immutable. Specifies how the Certificate&#39;s identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     * 
     */
    public Optional<Output<CertificateSubjectMode>> subjectMode() {
        return Optional.ofNullable(this.subjectMode);
    }

    @Import(name="validateOnly")
    private @Nullable Output<String> validateOnly;

    public Optional<Output<String>> validateOnly() {
        return Optional.ofNullable(this.validateOnly);
    }

    private CertificateArgs() {}

    private CertificateArgs(CertificateArgs $) {
        this.caPoolId = $.caPoolId;
        this.certificateId = $.certificateId;
        this.certificateTemplate = $.certificateTemplate;
        this.config = $.config;
        this.issuingCertificateAuthorityId = $.issuingCertificateAuthorityId;
        this.labels = $.labels;
        this.lifetime = $.lifetime;
        this.location = $.location;
        this.pemCsr = $.pemCsr;
        this.project = $.project;
        this.requestId = $.requestId;
        this.subjectMode = $.subjectMode;
        this.validateOnly = $.validateOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateArgs $;

        public Builder() {
            $ = new CertificateArgs();
        }

        public Builder(CertificateArgs defaults) {
            $ = new CertificateArgs(Objects.requireNonNull(defaults));
        }

        public Builder caPoolId(Output<String> caPoolId) {
            $.caPoolId = caPoolId;
            return this;
        }

        public Builder caPoolId(String caPoolId) {
            return caPoolId(Output.of(caPoolId));
        }

        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateTemplate Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateTemplate(@Nullable Output<String> certificateTemplate) {
            $.certificateTemplate = certificateTemplate;
            return this;
        }

        /**
         * @param certificateTemplate Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateTemplate(String certificateTemplate) {
            return certificateTemplate(Output.of(certificateTemplate));
        }

        /**
         * @param config Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<CertificateConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
         * 
         * @return builder
         * 
         */
        public Builder config(CertificateConfigArgs config) {
            return config(Output.of(config));
        }

        public Builder issuingCertificateAuthorityId(@Nullable Output<String> issuingCertificateAuthorityId) {
            $.issuingCertificateAuthorityId = issuingCertificateAuthorityId;
            return this;
        }

        public Builder issuingCertificateAuthorityId(String issuingCertificateAuthorityId) {
            return issuingCertificateAuthorityId(Output.of(issuingCertificateAuthorityId));
        }

        /**
         * @param labels Optional. Labels with user-defined metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels with user-defined metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lifetime Immutable. The desired lifetime of a certificate. Used to create the &#34;not_before_time&#34; and &#34;not_after_time&#34; fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
         * 
         * @return builder
         * 
         */
        public Builder lifetime(Output<String> lifetime) {
            $.lifetime = lifetime;
            return this;
        }

        /**
         * @param lifetime Immutable. The desired lifetime of a certificate. Used to create the &#34;not_before_time&#34; and &#34;not_after_time&#34; fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
         * 
         * @return builder
         * 
         */
        public Builder lifetime(String lifetime) {
            return lifetime(Output.of(lifetime));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param pemCsr Immutable. A pem-encoded X.509 certificate signing request (CSR).
         * 
         * @return builder
         * 
         */
        public Builder pemCsr(@Nullable Output<String> pemCsr) {
            $.pemCsr = pemCsr;
            return this;
        }

        /**
         * @param pemCsr Immutable. A pem-encoded X.509 certificate signing request (CSR).
         * 
         * @return builder
         * 
         */
        public Builder pemCsr(String pemCsr) {
            return pemCsr(Output.of(pemCsr));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param subjectMode Immutable. Specifies how the Certificate&#39;s identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
         * 
         * @return builder
         * 
         */
        public Builder subjectMode(@Nullable Output<CertificateSubjectMode> subjectMode) {
            $.subjectMode = subjectMode;
            return this;
        }

        /**
         * @param subjectMode Immutable. Specifies how the Certificate&#39;s identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
         * 
         * @return builder
         * 
         */
        public Builder subjectMode(CertificateSubjectMode subjectMode) {
            return subjectMode(Output.of(subjectMode));
        }

        public Builder validateOnly(@Nullable Output<String> validateOnly) {
            $.validateOnly = validateOnly;
            return this;
        }

        public Builder validateOnly(String validateOnly) {
            return validateOnly(Output.of(validateOnly));
        }

        public CertificateArgs build() {
            $.caPoolId = Objects.requireNonNull($.caPoolId, "expected parameter 'caPoolId' to be non-null");
            $.lifetime = Objects.requireNonNull($.lifetime, "expected parameter 'lifetime' to be non-null");
            return $;
        }
    }

}
