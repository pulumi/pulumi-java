// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datafusion_v1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.datafusion_v1.enums.InstanceType;
import com.pulumi.googlenative.datafusion_v1.inputs.AcceleratorArgs;
import com.pulumi.googlenative.datafusion_v1.inputs.CryptoKeyConfigArgs;
import com.pulumi.googlenative.datafusion_v1.inputs.NetworkConfigArgs;
import com.pulumi.googlenative.datafusion_v1.inputs.VersionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * List of accelerators enabled for this CDF instance.
     * 
     */
    @Import(name="accelerators")
    private @Nullable Output<List<AcceleratorArgs>> accelerators;

    public Optional<Output<List<AcceleratorArgs>>> accelerators() {
        return Optional.ofNullable(this.accelerators);
    }

    /**
     * Available versions that the instance can be upgraded to using UpdateInstanceRequest.
     * 
     */
    @Import(name="availableVersion")
    private @Nullable Output<List<VersionArgs>> availableVersion;

    public Optional<Output<List<VersionArgs>>> availableVersion() {
        return Optional.ofNullable(this.availableVersion);
    }

    /**
     * The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
     * 
     */
    @Import(name="cryptoKeyConfig")
    private @Nullable Output<CryptoKeyConfigArgs> cryptoKeyConfig;

    public Optional<Output<CryptoKeyConfigArgs>> cryptoKeyConfig() {
        return Optional.ofNullable(this.cryptoKeyConfig);
    }

    /**
     * User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc&#39;s accesses to cloud resources.
     * 
     */
    @Import(name="dataprocServiceAccount")
    private @Nullable Output<String> dataprocServiceAccount;

    public Optional<Output<String>> dataprocServiceAccount() {
        return Optional.ofNullable(this.dataprocServiceAccount);
    }

    /**
     * A description of this instance.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name for an instance.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Option to enable granular role-based access control.
     * 
     */
    @Import(name="enableRbac")
    private @Nullable Output<Boolean> enableRbac;

    public Optional<Output<Boolean>> enableRbac() {
        return Optional.ofNullable(this.enableRbac);
    }

    /**
     * Option to enable Stackdriver Logging.
     * 
     */
    @Import(name="enableStackdriverLogging")
    private @Nullable Output<Boolean> enableStackdriverLogging;

    public Optional<Output<Boolean>> enableStackdriverLogging() {
        return Optional.ofNullable(this.enableStackdriverLogging);
    }

    /**
     * Option to enable Stackdriver Monitoring.
     * 
     */
    @Import(name="enableStackdriverMonitoring")
    private @Nullable Output<Boolean> enableStackdriverMonitoring;

    public Optional<Output<Boolean>> enableStackdriverMonitoring() {
        return Optional.ofNullable(this.enableStackdriverMonitoring);
    }

    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character &#39;=&#39; is not allowed to be used within the labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Network configuration options. These are required when a private Data Fusion instance is to be created.
     * 
     */
    @Import(name="networkConfig")
    private @Nullable Output<NetworkConfigArgs> networkConfig;

    public Optional<Output<NetworkConfigArgs>> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }

    /**
     * Map of additional options used to configure the behavior of Data Fusion instance.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.
     * 
     */
    @Import(name="privateInstance")
    private @Nullable Output<Boolean> privateInstance;

    public Optional<Output<Boolean>> privateInstance() {
        return Optional.ofNullable(this.privateInstance);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Instance type.
     * 
     */
    @Import(name="type", required=true)
    private Output<InstanceType> type;

    public Output<InstanceType> type() {
        return this.type;
    }

    /**
     * Current version of the Data Fusion. Only specifiable in Update.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.accelerators = $.accelerators;
        this.availableVersion = $.availableVersion;
        this.cryptoKeyConfig = $.cryptoKeyConfig;
        this.dataprocServiceAccount = $.dataprocServiceAccount;
        this.description = $.description;
        this.displayName = $.displayName;
        this.enableRbac = $.enableRbac;
        this.enableStackdriverLogging = $.enableStackdriverLogging;
        this.enableStackdriverMonitoring = $.enableStackdriverMonitoring;
        this.instanceId = $.instanceId;
        this.labels = $.labels;
        this.location = $.location;
        this.networkConfig = $.networkConfig;
        this.options = $.options;
        this.privateInstance = $.privateInstance;
        this.project = $.project;
        this.type = $.type;
        this.version = $.version;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder accelerators(@Nullable Output<List<AcceleratorArgs>> accelerators) {
            $.accelerators = accelerators;
            return this;
        }

        public Builder accelerators(List<AcceleratorArgs> accelerators) {
            return accelerators(Output.of(accelerators));
        }

        public Builder accelerators(AcceleratorArgs... accelerators) {
            return accelerators(List.of(accelerators));
        }

        public Builder availableVersion(@Nullable Output<List<VersionArgs>> availableVersion) {
            $.availableVersion = availableVersion;
            return this;
        }

        public Builder availableVersion(List<VersionArgs> availableVersion) {
            return availableVersion(Output.of(availableVersion));
        }

        public Builder availableVersion(VersionArgs... availableVersion) {
            return availableVersion(List.of(availableVersion));
        }

        public Builder cryptoKeyConfig(@Nullable Output<CryptoKeyConfigArgs> cryptoKeyConfig) {
            $.cryptoKeyConfig = cryptoKeyConfig;
            return this;
        }

        public Builder cryptoKeyConfig(CryptoKeyConfigArgs cryptoKeyConfig) {
            return cryptoKeyConfig(Output.of(cryptoKeyConfig));
        }

        public Builder dataprocServiceAccount(@Nullable Output<String> dataprocServiceAccount) {
            $.dataprocServiceAccount = dataprocServiceAccount;
            return this;
        }

        public Builder dataprocServiceAccount(String dataprocServiceAccount) {
            return dataprocServiceAccount(Output.of(dataprocServiceAccount));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder enableRbac(@Nullable Output<Boolean> enableRbac) {
            $.enableRbac = enableRbac;
            return this;
        }

        public Builder enableRbac(Boolean enableRbac) {
            return enableRbac(Output.of(enableRbac));
        }

        public Builder enableStackdriverLogging(@Nullable Output<Boolean> enableStackdriverLogging) {
            $.enableStackdriverLogging = enableStackdriverLogging;
            return this;
        }

        public Builder enableStackdriverLogging(Boolean enableStackdriverLogging) {
            return enableStackdriverLogging(Output.of(enableStackdriverLogging));
        }

        public Builder enableStackdriverMonitoring(@Nullable Output<Boolean> enableStackdriverMonitoring) {
            $.enableStackdriverMonitoring = enableStackdriverMonitoring;
            return this;
        }

        public Builder enableStackdriverMonitoring(Boolean enableStackdriverMonitoring) {
            return enableStackdriverMonitoring(Output.of(enableStackdriverMonitoring));
        }

        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder networkConfig(@Nullable Output<NetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        public Builder networkConfig(NetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        public Builder privateInstance(@Nullable Output<Boolean> privateInstance) {
            $.privateInstance = privateInstance;
            return this;
        }

        public Builder privateInstance(Boolean privateInstance) {
            return privateInstance(Output.of(privateInstance));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder type(Output<InstanceType> type) {
            $.type = type;
            return this;
        }

        public Builder type(InstanceType type) {
            return type(Output.of(type));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
