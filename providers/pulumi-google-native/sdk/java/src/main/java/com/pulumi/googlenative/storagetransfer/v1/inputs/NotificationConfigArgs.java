// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer.v1.enums.NotificationConfigEventTypesItem;
import com.pulumi.googlenative.storagetransfer.v1.enums.NotificationConfigPayloadFormat;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following `PubsubMessage.attributes`: * `&#34;eventType&#34;`: one of the EventType values * `&#34;payloadFormat&#34;`: one of the PayloadFormat values * `&#34;projectId&#34;`: the project_id of the `TransferOperation` * `&#34;transferJobName&#34;`: the transfer_job_name of the `TransferOperation` * `&#34;transferOperationName&#34;`: the name of the `TransferOperation` The `PubsubMessage.data` contains a TransferOperation resource formatted according to the specified `PayloadFormat`.
 * 
 */
public final class NotificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationConfigArgs Empty = new NotificationConfigArgs();

    /**
     * Event types for which a notification is desired. If empty, send notifications for all event types.
     * 
     */
    @Import(name="eventTypes")
    private @Nullable Output<List<NotificationConfigEventTypesItem>> eventTypes;

    /**
     * @return Event types for which a notification is desired. If empty, send notifications for all event types.
     * 
     */
    public Optional<Output<List<NotificationConfigEventTypesItem>>> eventTypes() {
        return Optional.ofNullable(this.eventTypes);
    }

    /**
     * The desired format of the notification message payloads.
     * 
     */
    @Import(name="payloadFormat", required=true)
    private Output<NotificationConfigPayloadFormat> payloadFormat;

    /**
     * @return The desired format of the notification message payloads.
     * 
     */
    public Output<NotificationConfigPayloadFormat> payloadFormat() {
        return this.payloadFormat;
    }

    /**
     * The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
     * 
     */
    @Import(name="pubsubTopic", required=true)
    private Output<String> pubsubTopic;

    /**
     * @return The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
     * 
     */
    public Output<String> pubsubTopic() {
        return this.pubsubTopic;
    }

    private NotificationConfigArgs() {}

    private NotificationConfigArgs(NotificationConfigArgs $) {
        this.eventTypes = $.eventTypes;
        this.payloadFormat = $.payloadFormat;
        this.pubsubTopic = $.pubsubTopic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationConfigArgs $;

        public Builder() {
            $ = new NotificationConfigArgs();
        }

        public Builder(NotificationConfigArgs defaults) {
            $ = new NotificationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventTypes Event types for which a notification is desired. If empty, send notifications for all event types.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(@Nullable Output<List<NotificationConfigEventTypesItem>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        /**
         * @param eventTypes Event types for which a notification is desired. If empty, send notifications for all event types.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(List<NotificationConfigEventTypesItem> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        /**
         * @param eventTypes Event types for which a notification is desired. If empty, send notifications for all event types.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(NotificationConfigEventTypesItem... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        /**
         * @param payloadFormat The desired format of the notification message payloads.
         * 
         * @return builder
         * 
         */
        public Builder payloadFormat(Output<NotificationConfigPayloadFormat> payloadFormat) {
            $.payloadFormat = payloadFormat;
            return this;
        }

        /**
         * @param payloadFormat The desired format of the notification message payloads.
         * 
         * @return builder
         * 
         */
        public Builder payloadFormat(NotificationConfigPayloadFormat payloadFormat) {
            return payloadFormat(Output.of(payloadFormat));
        }

        /**
         * @param pubsubTopic The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
         * 
         * @return builder
         * 
         */
        public Builder pubsubTopic(Output<String> pubsubTopic) {
            $.pubsubTopic = pubsubTopic;
            return this;
        }

        /**
         * @param pubsubTopic The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
         * 
         * @return builder
         * 
         */
        public Builder pubsubTopic(String pubsubTopic) {
            return pubsubTopic(Output.of(pubsubTopic));
        }

        public NotificationConfigArgs build() {
            $.payloadFormat = Objects.requireNonNull($.payloadFormat, "expected parameter 'payloadFormat' to be non-null");
            $.pubsubTopic = Objects.requireNonNull($.pubsubTopic, "expected parameter 'pubsubTopic' to be non-null");
            return $;
        }
    }

}
