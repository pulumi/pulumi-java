// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.container_v1.inputs.NodeManagementResponse;
import com.pulumi.googlenative.container_v1.inputs.ShieldedInstanceConfigResponse;
import com.pulumi.googlenative.container_v1.inputs.UpgradeSettingsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
 * 
 */
public final class AutoprovisioningNodePoolDefaultsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutoprovisioningNodePoolDefaultsResponse Empty = new AutoprovisioningNodePoolDefaultsResponse();

    /**
     * The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
     * 
     */
    @Import(name="bootDiskKmsKey", required=true)
    private String bootDiskKmsKey;

    public String bootDiskKmsKey() {
        return this.bootDiskKmsKey;
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
     * 
     */
    @Import(name="diskSizeGb", required=true)
    private Integer diskSizeGb;

    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }

    /**
     * Type of the disk attached to each node (e.g. &#39;pd-standard&#39;, &#39;pd-ssd&#39; or &#39;pd-balanced&#39;) If unspecified, the default disk type is &#39;pd-standard&#39;
     * 
     */
    @Import(name="diskType", required=true)
    private String diskType;

    public String diskType() {
        return this.diskType;
    }

    /**
     * The image type to use for NAP created node.
     * 
     */
    @Import(name="imageType", required=true)
    private String imageType;

    public String imageType() {
        return this.imageType;
    }

    /**
     * Specifies the node management options for NAP created node-pools.
     * 
     */
    @Import(name="management", required=true)
    private NodeManagementResponse management;

    public NodeManagementResponse management() {
        return this.management;
    }

    /**
     * Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass &#34;automatic&#34; as field value.
     * 
     */
    @Import(name="minCpuPlatform", required=true)
    private String minCpuPlatform;

    public String minCpuPlatform() {
        return this.minCpuPlatform;
    }

    /**
     * Scopes that are used by NAP when creating node pools.
     * 
     */
    @Import(name="oauthScopes", required=true)
    private List<String> oauthScopes;

    public List<String> oauthScopes() {
        return this.oauthScopes;
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * Shielded Instance options.
     * 
     */
    @Import(name="shieldedInstanceConfig", required=true)
    private ShieldedInstanceConfigResponse shieldedInstanceConfig;

    public ShieldedInstanceConfigResponse shieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }

    /**
     * Specifies the upgrade settings for NAP created node pools
     * 
     */
    @Import(name="upgradeSettings", required=true)
    private UpgradeSettingsResponse upgradeSettings;

    public UpgradeSettingsResponse upgradeSettings() {
        return this.upgradeSettings;
    }

    private AutoprovisioningNodePoolDefaultsResponse() {}

    private AutoprovisioningNodePoolDefaultsResponse(AutoprovisioningNodePoolDefaultsResponse $) {
        this.bootDiskKmsKey = $.bootDiskKmsKey;
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
        this.imageType = $.imageType;
        this.management = $.management;
        this.minCpuPlatform = $.minCpuPlatform;
        this.oauthScopes = $.oauthScopes;
        this.serviceAccount = $.serviceAccount;
        this.shieldedInstanceConfig = $.shieldedInstanceConfig;
        this.upgradeSettings = $.upgradeSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoprovisioningNodePoolDefaultsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoprovisioningNodePoolDefaultsResponse $;

        public Builder() {
            $ = new AutoprovisioningNodePoolDefaultsResponse();
        }

        public Builder(AutoprovisioningNodePoolDefaultsResponse defaults) {
            $ = new AutoprovisioningNodePoolDefaultsResponse(Objects.requireNonNull(defaults));
        }

        public Builder bootDiskKmsKey(String bootDiskKmsKey) {
            $.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }

        public Builder diskSizeGb(Integer diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        public Builder imageType(String imageType) {
            $.imageType = imageType;
            return this;
        }

        public Builder management(NodeManagementResponse management) {
            $.management = management;
            return this;
        }

        public Builder minCpuPlatform(String minCpuPlatform) {
            $.minCpuPlatform = minCpuPlatform;
            return this;
        }

        public Builder oauthScopes(List<String> oauthScopes) {
            $.oauthScopes = oauthScopes;
            return this;
        }

        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }

        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder shieldedInstanceConfig(ShieldedInstanceConfigResponse shieldedInstanceConfig) {
            $.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder upgradeSettings(UpgradeSettingsResponse upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        public AutoprovisioningNodePoolDefaultsResponse build() {
            $.bootDiskKmsKey = Objects.requireNonNull($.bootDiskKmsKey, "expected parameter 'bootDiskKmsKey' to be non-null");
            $.diskSizeGb = Objects.requireNonNull($.diskSizeGb, "expected parameter 'diskSizeGb' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.imageType = Objects.requireNonNull($.imageType, "expected parameter 'imageType' to be non-null");
            $.management = Objects.requireNonNull($.management, "expected parameter 'management' to be non-null");
            $.minCpuPlatform = Objects.requireNonNull($.minCpuPlatform, "expected parameter 'minCpuPlatform' to be non-null");
            $.oauthScopes = Objects.requireNonNull($.oauthScopes, "expected parameter 'oauthScopes' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.shieldedInstanceConfig = Objects.requireNonNull($.shieldedInstanceConfig, "expected parameter 'shieldedInstanceConfig' to be non-null");
            $.upgradeSettings = Objects.requireNonNull($.upgradeSettings, "expected parameter 'upgradeSettings' to be non-null");
            return $;
        }
    }

}
