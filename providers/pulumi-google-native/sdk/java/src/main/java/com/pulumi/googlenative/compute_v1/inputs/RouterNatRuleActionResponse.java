// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute_v1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RouterNatRuleActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RouterNatRuleActionResponse Empty = new RouterNatRuleActionResponse();

    /**
     * A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
     * 
     */
    @Import(name="sourceNatActiveIps", required=true)
    private List<String> sourceNatActiveIps;

    /**
     * @return A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
     * 
     */
    public List<String> sourceNatActiveIps() {
        return this.sourceNatActiveIps;
    }

    /**
     * A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT.
     * 
     */
    @Import(name="sourceNatDrainIps", required=true)
    private List<String> sourceNatDrainIps;

    /**
     * @return A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT.
     * 
     */
    public List<String> sourceNatDrainIps() {
        return this.sourceNatDrainIps;
    }

    private RouterNatRuleActionResponse() {}

    private RouterNatRuleActionResponse(RouterNatRuleActionResponse $) {
        this.sourceNatActiveIps = $.sourceNatActiveIps;
        this.sourceNatDrainIps = $.sourceNatDrainIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatRuleActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatRuleActionResponse $;

        public Builder() {
            $ = new RouterNatRuleActionResponse();
        }

        public Builder(RouterNatRuleActionResponse defaults) {
            $ = new RouterNatRuleActionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param sourceNatActiveIps A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatActiveIps(List<String> sourceNatActiveIps) {
            $.sourceNatActiveIps = sourceNatActiveIps;
            return this;
        }

        /**
         * @param sourceNatActiveIps A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatActiveIps(String... sourceNatActiveIps) {
            return sourceNatActiveIps(List.of(sourceNatActiveIps));
        }

        /**
         * @param sourceNatDrainIps A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatDrainIps(List<String> sourceNatDrainIps) {
            $.sourceNatDrainIps = sourceNatDrainIps;
            return this;
        }

        /**
         * @param sourceNatDrainIps A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatDrainIps(String... sourceNatDrainIps) {
            return sourceNatDrainIps(List.of(sourceNatDrainIps));
        }

        public RouterNatRuleActionResponse build() {
            $.sourceNatActiveIps = Objects.requireNonNull($.sourceNatActiveIps, "expected parameter 'sourceNatActiveIps' to be non-null");
            $.sourceNatDrainIps = Objects.requireNonNull($.sourceNatDrainIps, "expected parameter 'sourceNatDrainIps' to be non-null");
            return $;
        }
    }

}
