// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ScriptStackFrameResponse extends com.pulumi.resources.InvokeArgs {

    public static final ScriptStackFrameResponse Empty = new ScriptStackFrameResponse();

    /**
     * One-based end column.
     * 
     */
    @Import(name="endColumn", required=true)
    private Integer endColumn;

    public Integer endColumn() {
        return this.endColumn;
    }

    /**
     * One-based end line.
     * 
     */
    @Import(name="endLine", required=true)
    private Integer endLine;

    public Integer endLine() {
        return this.endLine;
    }

    /**
     * Name of the active procedure, empty if in a top-level script.
     * 
     */
    @Import(name="procedureId", required=true)
    private String procedureId;

    public String procedureId() {
        return this.procedureId;
    }

    /**
     * One-based start column.
     * 
     */
    @Import(name="startColumn", required=true)
    private Integer startColumn;

    public Integer startColumn() {
        return this.startColumn;
    }

    /**
     * One-based start line.
     * 
     */
    @Import(name="startLine", required=true)
    private Integer startLine;

    public Integer startLine() {
        return this.startLine;
    }

    /**
     * Text of the current statement/expression.
     * 
     */
    @Import(name="text", required=true)
    private String text;

    public String text() {
        return this.text;
    }

    private ScriptStackFrameResponse() {}

    private ScriptStackFrameResponse(ScriptStackFrameResponse $) {
        this.endColumn = $.endColumn;
        this.endLine = $.endLine;
        this.procedureId = $.procedureId;
        this.startColumn = $.startColumn;
        this.startLine = $.startLine;
        this.text = $.text;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScriptStackFrameResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScriptStackFrameResponse $;

        public Builder() {
            $ = new ScriptStackFrameResponse();
        }

        public Builder(ScriptStackFrameResponse defaults) {
            $ = new ScriptStackFrameResponse(Objects.requireNonNull(defaults));
        }

        public Builder endColumn(Integer endColumn) {
            $.endColumn = endColumn;
            return this;
        }

        public Builder endLine(Integer endLine) {
            $.endLine = endLine;
            return this;
        }

        public Builder procedureId(String procedureId) {
            $.procedureId = procedureId;
            return this;
        }

        public Builder startColumn(Integer startColumn) {
            $.startColumn = startColumn;
            return this;
        }

        public Builder startLine(Integer startLine) {
            $.startLine = startLine;
            return this;
        }

        public Builder text(String text) {
            $.text = text;
            return this;
        }

        public ScriptStackFrameResponse build() {
            $.endColumn = Objects.requireNonNull($.endColumn, "expected parameter 'endColumn' to be non-null");
            $.endLine = Objects.requireNonNull($.endLine, "expected parameter 'endLine' to be non-null");
            $.procedureId = Objects.requireNonNull($.procedureId, "expected parameter 'procedureId' to be non-null");
            $.startColumn = Objects.requireNonNull($.startColumn, "expected parameter 'startColumn' to be non-null");
            $.startLine = Objects.requireNonNull($.startLine, "expected parameter 'startLine' to be non-null");
            $.text = Objects.requireNonNull($.text, "expected parameter 'text' to be non-null");
            return $;
        }
    }

}
