// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.accesscontextmanager.v1.outputs.ServicePerimeterConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServicePerimeterResult {
    /**
     * @return Description of the `ServicePerimeter` and its use. Does not affect behavior.
     * 
     */
    private final String description;
    /**
     * @return Resource name for the ServicePerimeter. The `short_name` component must begin with a letter and only include alphanumeric and &#39;_&#39;. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
     * 
     */
    private final String name;
    /**
     * @return Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.
     * 
     */
    private final String perimeterType;
    /**
     * @return Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter configuration without enforcing actual access restrictions. Only allowed to be set when the &#34;use_explicit_dry_run_spec&#34; flag is set.
     * 
     */
    private final ServicePerimeterConfigResponse spec;
    /**
     * @return Current ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine perimeter content and boundaries.
     * 
     */
    private final ServicePerimeterConfigResponse status;
    /**
     * @return Human readable title. Must be unique within the Policy.
     * 
     */
    private final String title;
    /**
     * @return Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration (&#34;spec&#34;) to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config (&#34;status&#34;) without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values.
     * 
     */
    private final Boolean useExplicitDryRunSpec;

    @CustomType.Constructor
    private GetServicePerimeterResult(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("perimeterType") String perimeterType,
        @CustomType.Parameter("spec") ServicePerimeterConfigResponse spec,
        @CustomType.Parameter("status") ServicePerimeterConfigResponse status,
        @CustomType.Parameter("title") String title,
        @CustomType.Parameter("useExplicitDryRunSpec") Boolean useExplicitDryRunSpec) {
        this.description = description;
        this.name = name;
        this.perimeterType = perimeterType;
        this.spec = spec;
        this.status = status;
        this.title = title;
        this.useExplicitDryRunSpec = useExplicitDryRunSpec;
    }

    /**
     * @return Description of the `ServicePerimeter` and its use. Does not affect behavior.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Resource name for the ServicePerimeter. The `short_name` component must begin with a letter and only include alphanumeric and &#39;_&#39;. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.
     * 
     */
    public String perimeterType() {
        return this.perimeterType;
    }
    /**
     * @return Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter configuration without enforcing actual access restrictions. Only allowed to be set when the &#34;use_explicit_dry_run_spec&#34; flag is set.
     * 
     */
    public ServicePerimeterConfigResponse spec() {
        return this.spec;
    }
    /**
     * @return Current ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine perimeter content and boundaries.
     * 
     */
    public ServicePerimeterConfigResponse status() {
        return this.status;
    }
    /**
     * @return Human readable title. Must be unique within the Policy.
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration (&#34;spec&#34;) to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config (&#34;status&#34;) without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values.
     * 
     */
    public Boolean useExplicitDryRunSpec() {
        return this.useExplicitDryRunSpec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicePerimeterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String name;
        private String perimeterType;
        private ServicePerimeterConfigResponse spec;
        private ServicePerimeterConfigResponse status;
        private String title;
        private Boolean useExplicitDryRunSpec;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServicePerimeterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.perimeterType = defaults.perimeterType;
    	      this.spec = defaults.spec;
    	      this.status = defaults.status;
    	      this.title = defaults.title;
    	      this.useExplicitDryRunSpec = defaults.useExplicitDryRunSpec;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder perimeterType(String perimeterType) {
            this.perimeterType = Objects.requireNonNull(perimeterType);
            return this;
        }
        public Builder spec(ServicePerimeterConfigResponse spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }
        public Builder status(ServicePerimeterConfigResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder title(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        public Builder useExplicitDryRunSpec(Boolean useExplicitDryRunSpec) {
            this.useExplicitDryRunSpec = Objects.requireNonNull(useExplicitDryRunSpec);
            return this;
        }        public GetServicePerimeterResult build() {
            return new GetServicePerimeterResult(description, name, perimeterType, spec, status, title, useExplicitDryRunSpec);
        }
    }
}
