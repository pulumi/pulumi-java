// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring.v1.inputs.TileArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.
 * 
 */
public final class MosaicLayoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final MosaicLayoutArgs Empty = new MosaicLayoutArgs();

    /**
     * The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<Integer> columns;

    /**
     * @return The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.
     * 
     */
    public Optional<Output<Integer>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * The tiles to display.
     * 
     */
    @Import(name="tiles")
    private @Nullable Output<List<TileArgs>> tiles;

    /**
     * @return The tiles to display.
     * 
     */
    public Optional<Output<List<TileArgs>>> tiles() {
        return Optional.ofNullable(this.tiles);
    }

    private MosaicLayoutArgs() {}

    private MosaicLayoutArgs(MosaicLayoutArgs $) {
        this.columns = $.columns;
        this.tiles = $.tiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MosaicLayoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MosaicLayoutArgs $;

        public Builder() {
            $ = new MosaicLayoutArgs();
        }

        public Builder(MosaicLayoutArgs defaults) {
            $ = new MosaicLayoutArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<Integer> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder columns(Integer columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param tiles The tiles to display.
         * 
         * @return builder
         * 
         */
        public Builder tiles(@Nullable Output<List<TileArgs>> tiles) {
            $.tiles = tiles;
            return this;
        }

        /**
         * @param tiles The tiles to display.
         * 
         * @return builder
         * 
         */
        public Builder tiles(List<TileArgs> tiles) {
            return tiles(Output.of(tiles));
        }

        /**
         * @param tiles The tiles to display.
         * 
         * @return builder
         * 
         */
        public Builder tiles(TileArgs... tiles) {
            return tiles(List.of(tiles));
        }

        public MosaicLayoutArgs build() {
            return $;
        }
    }

}
