// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer_v1.inputs.MetadataOptionsResponse;
import java.lang.Boolean;
import java.util.Objects;


/**
 * TransferOptions define the actions to be performed on objects in a transfer.
 * 
 */
public final class TransferOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final TransferOptionsResponse Empty = new TransferOptionsResponse();

    /**
     * Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsFromSourceAfterTransfer", required=true)
    private Boolean deleteObjectsFromSourceAfterTransfer;

    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    public Boolean deleteObjectsFromSourceAfterTransfer() {
        return this.deleteObjectsFromSourceAfterTransfer;
    }

    /**
     * Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsUniqueInSink", required=true)
    private Boolean deleteObjectsUniqueInSink;

    /**
     * @return Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    public Boolean deleteObjectsUniqueInSink() {
        return this.deleteObjectsUniqueInSink;
    }

    /**
     * Represents the selected metadata options for a transfer job.
     * 
     */
    @Import(name="metadataOptions", required=true)
    private MetadataOptionsResponse metadataOptions;

    /**
     * @return Represents the selected metadata options for a transfer job.
     * 
     */
    public MetadataOptionsResponse metadataOptions() {
        return this.metadataOptions;
    }

    /**
     * When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    @Import(name="overwriteObjectsAlreadyExistingInSink", required=true)
    private Boolean overwriteObjectsAlreadyExistingInSink;

    /**
     * @return When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    public Boolean overwriteObjectsAlreadyExistingInSink() {
        return this.overwriteObjectsAlreadyExistingInSink;
    }

    private TransferOptionsResponse() {}

    private TransferOptionsResponse(TransferOptionsResponse $) {
        this.deleteObjectsFromSourceAfterTransfer = $.deleteObjectsFromSourceAfterTransfer;
        this.deleteObjectsUniqueInSink = $.deleteObjectsUniqueInSink;
        this.metadataOptions = $.metadataOptions;
        this.overwriteObjectsAlreadyExistingInSink = $.overwriteObjectsAlreadyExistingInSink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferOptionsResponse $;

        public Builder() {
            $ = new TransferOptionsResponse();
        }

        public Builder(TransferOptionsResponse defaults) {
            $ = new TransferOptionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteObjectsFromSourceAfterTransfer Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
            $.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            return this;
        }

        /**
         * @param deleteObjectsUniqueInSink Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
            $.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            return this;
        }

        /**
         * @param metadataOptions Represents the selected metadata options for a transfer job.
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(MetadataOptionsResponse metadataOptions) {
            $.metadataOptions = metadataOptions;
            return this;
        }

        /**
         * @param overwriteObjectsAlreadyExistingInSink When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
         * 
         * @return builder
         * 
         */
        public Builder overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
            $.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            return this;
        }

        public TransferOptionsResponse build() {
            $.deleteObjectsFromSourceAfterTransfer = Objects.requireNonNull($.deleteObjectsFromSourceAfterTransfer, "expected parameter 'deleteObjectsFromSourceAfterTransfer' to be non-null");
            $.deleteObjectsUniqueInSink = Objects.requireNonNull($.deleteObjectsUniqueInSink, "expected parameter 'deleteObjectsUniqueInSink' to be non-null");
            $.metadataOptions = Objects.requireNonNull($.metadataOptions, "expected parameter 'metadataOptions' to be non-null");
            $.overwriteObjectsAlreadyExistingInSink = Objects.requireNonNull($.overwriteObjectsAlreadyExistingInSink, "expected parameter 'overwriteObjectsAlreadyExistingInSink' to be non-null");
            return $;
        }
    }

}
