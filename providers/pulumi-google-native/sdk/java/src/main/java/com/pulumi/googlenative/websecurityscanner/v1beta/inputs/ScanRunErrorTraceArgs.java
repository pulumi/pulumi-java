// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner.v1beta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.websecurityscanner.v1beta.enums.ScanRunErrorTraceCode;
import com.pulumi.googlenative.websecurityscanner.v1beta.inputs.ScanConfigErrorArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Output only. Defines an error trace message for a ScanRun.
 * 
 */
public final class ScanRunErrorTraceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScanRunErrorTraceArgs Empty = new ScanRunErrorTraceArgs();

    /**
     * Indicates the error reason code.
     * 
     */
    @Import(name="code")
    private @Nullable Output<ScanRunErrorTraceCode> code;

    /**
     * @return Indicates the error reason code.
     * 
     */
    public Optional<Output<ScanRunErrorTraceCode>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common HTTP error code, if such is available. For example, if this code is 404, the scan has encountered too many NOT_FOUND responses.
     * 
     */
    @Import(name="mostCommonHttpErrorCode")
    private @Nullable Output<Integer> mostCommonHttpErrorCode;

    /**
     * @return If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common HTTP error code, if such is available. For example, if this code is 404, the scan has encountered too many NOT_FOUND responses.
     * 
     */
    public Optional<Output<Integer>> mostCommonHttpErrorCode() {
        return Optional.ofNullable(this.mostCommonHttpErrorCode);
    }

    /**
     * If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message encountered during scan configuration validation that is performed before each scan run.
     * 
     */
    @Import(name="scanConfigError")
    private @Nullable Output<ScanConfigErrorArgs> scanConfigError;

    /**
     * @return If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message encountered during scan configuration validation that is performed before each scan run.
     * 
     */
    public Optional<Output<ScanConfigErrorArgs>> scanConfigError() {
        return Optional.ofNullable(this.scanConfigError);
    }

    private ScanRunErrorTraceArgs() {}

    private ScanRunErrorTraceArgs(ScanRunErrorTraceArgs $) {
        this.code = $.code;
        this.mostCommonHttpErrorCode = $.mostCommonHttpErrorCode;
        this.scanConfigError = $.scanConfigError;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScanRunErrorTraceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScanRunErrorTraceArgs $;

        public Builder() {
            $ = new ScanRunErrorTraceArgs();
        }

        public Builder(ScanRunErrorTraceArgs defaults) {
            $ = new ScanRunErrorTraceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param code Indicates the error reason code.
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable Output<ScanRunErrorTraceCode> code) {
            $.code = code;
            return this;
        }

        /**
         * @param code Indicates the error reason code.
         * 
         * @return builder
         * 
         */
        public Builder code(ScanRunErrorTraceCode code) {
            return code(Output.of(code));
        }

        /**
         * @param mostCommonHttpErrorCode If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common HTTP error code, if such is available. For example, if this code is 404, the scan has encountered too many NOT_FOUND responses.
         * 
         * @return builder
         * 
         */
        public Builder mostCommonHttpErrorCode(@Nullable Output<Integer> mostCommonHttpErrorCode) {
            $.mostCommonHttpErrorCode = mostCommonHttpErrorCode;
            return this;
        }

        /**
         * @param mostCommonHttpErrorCode If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common HTTP error code, if such is available. For example, if this code is 404, the scan has encountered too many NOT_FOUND responses.
         * 
         * @return builder
         * 
         */
        public Builder mostCommonHttpErrorCode(Integer mostCommonHttpErrorCode) {
            return mostCommonHttpErrorCode(Output.of(mostCommonHttpErrorCode));
        }

        /**
         * @param scanConfigError If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message encountered during scan configuration validation that is performed before each scan run.
         * 
         * @return builder
         * 
         */
        public Builder scanConfigError(@Nullable Output<ScanConfigErrorArgs> scanConfigError) {
            $.scanConfigError = scanConfigError;
            return this;
        }

        /**
         * @param scanConfigError If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message encountered during scan configuration validation that is performed before each scan run.
         * 
         * @return builder
         * 
         */
        public Builder scanConfigError(ScanConfigErrorArgs scanConfigError) {
            return scanConfigError(Output.of(scanConfigError));
        }

        public ScanRunErrorTraceArgs build() {
            return $;
        }
    }

}
