// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.secretmanager.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.secretmanager.v1.inputs.AutomaticArgs;
import com.pulumi.googlenative.secretmanager.v1.inputs.UserManagedArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A policy that defines the replication and encryption configuration of data.
 * 
 */
public final class ReplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationArgs Empty = new ReplicationArgs();

    /**
     * The Secret will automatically be replicated without any restrictions.
     * 
     */
    @Import(name="automatic")
    private @Nullable Output<AutomaticArgs> automatic;

    /**
     * @return The Secret will automatically be replicated without any restrictions.
     * 
     */
    public Optional<Output<AutomaticArgs>> automatic() {
        return Optional.ofNullable(this.automatic);
    }

    /**
     * The Secret will only be replicated into the locations specified.
     * 
     */
    @Import(name="userManaged")
    private @Nullable Output<UserManagedArgs> userManaged;

    /**
     * @return The Secret will only be replicated into the locations specified.
     * 
     */
    public Optional<Output<UserManagedArgs>> userManaged() {
        return Optional.ofNullable(this.userManaged);
    }

    private ReplicationArgs() {}

    private ReplicationArgs(ReplicationArgs $) {
        this.automatic = $.automatic;
        this.userManaged = $.userManaged;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationArgs $;

        public Builder() {
            $ = new ReplicationArgs();
        }

        public Builder(ReplicationArgs defaults) {
            $ = new ReplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automatic The Secret will automatically be replicated without any restrictions.
         * 
         * @return builder
         * 
         */
        public Builder automatic(@Nullable Output<AutomaticArgs> automatic) {
            $.automatic = automatic;
            return this;
        }

        /**
         * @param automatic The Secret will automatically be replicated without any restrictions.
         * 
         * @return builder
         * 
         */
        public Builder automatic(AutomaticArgs automatic) {
            return automatic(Output.of(automatic));
        }

        /**
         * @param userManaged The Secret will only be replicated into the locations specified.
         * 
         * @return builder
         * 
         */
        public Builder userManaged(@Nullable Output<UserManagedArgs> userManaged) {
            $.userManaged = userManaged;
            return this;
        }

        /**
         * @param userManaged The Secret will only be replicated into the locations specified.
         * 
         * @return builder
         * 
         */
        public Builder userManaged(UserManagedArgs userManaged) {
            return userManaged(Output.of(userManaged));
        }

        public ReplicationArgs build() {
            return $;
        }
    }

}
