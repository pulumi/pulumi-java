// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.monitoring_v1.inputs.RowArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.
 * 
 */
public final class RowLayoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final RowLayoutArgs Empty = new RowLayoutArgs();

    /**
     * The rows of content to display.
     * 
     */
    @Import(name="rows")
    private @Nullable Output<List<RowArgs>> rows;

    public Optional<Output<List<RowArgs>>> rows() {
        return Optional.ofNullable(this.rows);
    }

    private RowLayoutArgs() {}

    private RowLayoutArgs(RowLayoutArgs $) {
        this.rows = $.rows;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RowLayoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RowLayoutArgs $;

        public Builder() {
            $ = new RowLayoutArgs();
        }

        public Builder(RowLayoutArgs defaults) {
            $ = new RowLayoutArgs(Objects.requireNonNull(defaults));
        }

        public Builder rows(@Nullable Output<List<RowArgs>> rows) {
            $.rows = rows;
            return this;
        }

        public Builder rows(List<RowArgs> rows) {
            return rows(Output.of(rows));
        }

        public Builder rows(RowArgs... rows) {
            return rows(List.of(rows));
        }

        public RowLayoutArgs build() {
            return $;
        }
    }

}
