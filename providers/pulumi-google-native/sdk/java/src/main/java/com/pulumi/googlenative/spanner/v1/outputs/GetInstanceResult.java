// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.spanner.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return The name of the instance&#39;s configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
     * 
     */
    private final String config;
    /**
     * @return The time at which the instance was created.
     * 
     */
    private final String createTime;
    /**
     * @return The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
     * 
     */
    private final String displayName;
    /**
     * @return Deprecated. This field is not populated.
     * 
     * @deprecated
     * Deprecated. This field is not populated.
     * 
     */
    @Deprecated /* Deprecated. This field is not populated. */
    private final List<String> endpointUris;
    /**
     * @return Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer&#39;s organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn&#39;t rely upon specific characters being disallowed. For example, representing labels as the string: name + &#34;_&#34; + value would prove problematic if we were to allow &#34;_&#34; in a future release.
     * 
     */
    private final Map<String,String> labels;
    /**
     * @return A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length.
     * 
     */
    private final String name;
    /**
     * @return The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
     * 
     */
    private final Integer nodeCount;
    /**
     * @return The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
     * 
     */
    private final Integer processingUnits;
    /**
     * @return The current instance state. For CreateInstance, the state must be either omitted or set to `CREATING`. For UpdateInstance, the state must be either omitted or set to `READY`.
     * 
     */
    private final String state;
    /**
     * @return The time at which the instance was most recently updated.
     * 
     */
    private final String updateTime;

    @CustomType.Constructor
    private GetInstanceResult(
        @CustomType.Parameter("config") String config,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("endpointUris") List<String> endpointUris,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nodeCount") Integer nodeCount,
        @CustomType.Parameter("processingUnits") Integer processingUnits,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.config = config;
        this.createTime = createTime;
        this.displayName = displayName;
        this.endpointUris = endpointUris;
        this.labels = labels;
        this.name = name;
        this.nodeCount = nodeCount;
        this.processingUnits = processingUnits;
        this.state = state;
        this.updateTime = updateTime;
    }

    /**
     * @return The name of the instance&#39;s configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
     * 
     */
    public String config() {
        return this.config;
    }
    /**
     * @return The time at which the instance was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Deprecated. This field is not populated.
     * 
     * @deprecated
     * Deprecated. This field is not populated.
     * 
     */
    @Deprecated /* Deprecated. This field is not populated. */
    public List<String> endpointUris() {
        return this.endpointUris;
    }
    /**
     * @return Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer&#39;s organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn&#39;t rely upon specific characters being disallowed. For example, representing labels as the string: name + &#34;_&#34; + value would prove problematic if we were to allow &#34;_&#34; in a future release.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
     * 
     */
    public Integer processingUnits() {
        return this.processingUnits;
    }
    /**
     * @return The current instance state. For CreateInstance, the state must be either omitted or set to `CREATING`. For UpdateInstance, the state must be either omitted or set to `READY`.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time at which the instance was most recently updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String config;
        private String createTime;
        private String displayName;
        private List<String> endpointUris;
        private Map<String,String> labels;
        private String name;
        private Integer nodeCount;
        private Integer processingUnits;
        private String state;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.displayName = defaults.displayName;
    	      this.endpointUris = defaults.endpointUris;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.processingUnits = defaults.processingUnits;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder config(String config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder endpointUris(List<String> endpointUris) {
            this.endpointUris = Objects.requireNonNull(endpointUris);
            return this;
        }
        public Builder endpointUris(String... endpointUris) {
            return endpointUris(List.of(endpointUris));
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        public Builder processingUnits(Integer processingUnits) {
            this.processingUnits = Objects.requireNonNull(processingUnits);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetInstanceResult build() {
            return new GetInstanceResult(config, createTime, displayName, endpointUris, labels, name, nodeCount, processingUnits, state, updateTime);
        }
    }
}
