// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.apigee.v1.outputs.GoogleCloudApigeeV1TlsInfoCommonNameResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GoogleCloudApigeeV1TlsInfoResponse {
    /**
     * @return The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.
     * 
     */
    private final List<String> ciphers;
    /**
     * @return Optional. Enables two-way TLS.
     * 
     */
    private final Boolean clientAuthEnabled;
    /**
     * @return The TLS Common Name of the certificate.
     * 
     */
    private final GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName;
    /**
     * @return Enables TLS. If false, neither one-way nor two-way TLS will be enabled.
     * 
     */
    private final Boolean enabled;
    /**
     * @return If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
     * 
     */
    private final Boolean ignoreValidationErrors;
    /**
     * @return Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.
     * 
     */
    private final String keyAlias;
    /**
     * @return Required if `client_auth_enabled` is true. The resource ID of the keystore.
     * 
     */
    private final String keyStore;
    /**
     * @return The TLS versioins to be used.
     * 
     */
    private final List<String> protocols;
    /**
     * @return The resource ID of the truststore.
     * 
     */
    private final String trustStore;

    @CustomType.Constructor
    private GoogleCloudApigeeV1TlsInfoResponse(
        @CustomType.Parameter("ciphers") List<String> ciphers,
        @CustomType.Parameter("clientAuthEnabled") Boolean clientAuthEnabled,
        @CustomType.Parameter("commonName") GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("ignoreValidationErrors") Boolean ignoreValidationErrors,
        @CustomType.Parameter("keyAlias") String keyAlias,
        @CustomType.Parameter("keyStore") String keyStore,
        @CustomType.Parameter("protocols") List<String> protocols,
        @CustomType.Parameter("trustStore") String trustStore) {
        this.ciphers = ciphers;
        this.clientAuthEnabled = clientAuthEnabled;
        this.commonName = commonName;
        this.enabled = enabled;
        this.ignoreValidationErrors = ignoreValidationErrors;
        this.keyAlias = keyAlias;
        this.keyStore = keyStore;
        this.protocols = protocols;
        this.trustStore = trustStore;
    }

    /**
     * @return The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.
     * 
     */
    public List<String> ciphers() {
        return this.ciphers;
    }
    /**
     * @return Optional. Enables two-way TLS.
     * 
     */
    public Boolean clientAuthEnabled() {
        return this.clientAuthEnabled;
    }
    /**
     * @return The TLS Common Name of the certificate.
     * 
     */
    public GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName() {
        return this.commonName;
    }
    /**
     * @return Enables TLS. If false, neither one-way nor two-way TLS will be enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
     * 
     */
    public Boolean ignoreValidationErrors() {
        return this.ignoreValidationErrors;
    }
    /**
     * @return Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.
     * 
     */
    public String keyAlias() {
        return this.keyAlias;
    }
    /**
     * @return Required if `client_auth_enabled` is true. The resource ID of the keystore.
     * 
     */
    public String keyStore() {
        return this.keyStore;
    }
    /**
     * @return The TLS versioins to be used.
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return The resource ID of the truststore.
     * 
     */
    public String trustStore() {
        return this.trustStore;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudApigeeV1TlsInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> ciphers;
        private Boolean clientAuthEnabled;
        private GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName;
        private Boolean enabled;
        private Boolean ignoreValidationErrors;
        private String keyAlias;
        private String keyStore;
        private List<String> protocols;
        private String trustStore;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudApigeeV1TlsInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ciphers = defaults.ciphers;
    	      this.clientAuthEnabled = defaults.clientAuthEnabled;
    	      this.commonName = defaults.commonName;
    	      this.enabled = defaults.enabled;
    	      this.ignoreValidationErrors = defaults.ignoreValidationErrors;
    	      this.keyAlias = defaults.keyAlias;
    	      this.keyStore = defaults.keyStore;
    	      this.protocols = defaults.protocols;
    	      this.trustStore = defaults.trustStore;
        }

        public Builder ciphers(List<String> ciphers) {
            this.ciphers = Objects.requireNonNull(ciphers);
            return this;
        }
        public Builder ciphers(String... ciphers) {
            return ciphers(List.of(ciphers));
        }
        public Builder clientAuthEnabled(Boolean clientAuthEnabled) {
            this.clientAuthEnabled = Objects.requireNonNull(clientAuthEnabled);
            return this;
        }
        public Builder commonName(GoogleCloudApigeeV1TlsInfoCommonNameResponse commonName) {
            this.commonName = Objects.requireNonNull(commonName);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder ignoreValidationErrors(Boolean ignoreValidationErrors) {
            this.ignoreValidationErrors = Objects.requireNonNull(ignoreValidationErrors);
            return this;
        }
        public Builder keyAlias(String keyAlias) {
            this.keyAlias = Objects.requireNonNull(keyAlias);
            return this;
        }
        public Builder keyStore(String keyStore) {
            this.keyStore = Objects.requireNonNull(keyStore);
            return this;
        }
        public Builder protocols(List<String> protocols) {
            this.protocols = Objects.requireNonNull(protocols);
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        public Builder trustStore(String trustStore) {
            this.trustStore = Objects.requireNonNull(trustStore);
            return this;
        }        public GoogleCloudApigeeV1TlsInfoResponse build() {
            return new GoogleCloudApigeeV1TlsInfoResponse(ciphers, clientAuthEnabled, commonName, enabled, ignoreValidationErrors, keyAlias, keyStore, protocols, trustStore);
        }
    }
}
