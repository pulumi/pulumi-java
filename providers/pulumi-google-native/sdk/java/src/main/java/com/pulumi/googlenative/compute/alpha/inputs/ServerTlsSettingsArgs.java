// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.enums.ServerTlsSettingsTlsMode;
import com.pulumi.googlenative.compute.alpha.inputs.TlsContextArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The TLS settings for the server.
 * 
 */
public final class ServerTlsSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerTlsSettingsArgs Empty = new ServerTlsSettingsArgs();

    /**
     * Configures the mechanism to obtain security certificates and identity information.
     * 
     */
    @Import(name="proxyTlsContext")
    private @Nullable Output<TlsContextArgs> proxyTlsContext;

    /**
     * @return Configures the mechanism to obtain security certificates and identity information.
     * 
     */
    public Optional<Output<TlsContextArgs>> proxyTlsContext() {
        return Optional.ofNullable(this.proxyTlsContext);
    }

    /**
     * A list of alternate names to verify the subject identity in the certificate presented by the client.
     * 
     */
    @Import(name="subjectAltNames")
    private @Nullable Output<List<String>> subjectAltNames;

    /**
     * @return A list of alternate names to verify the subject identity in the certificate presented by the client.
     * 
     */
    public Optional<Output<List<String>>> subjectAltNames() {
        return Optional.ofNullable(this.subjectAltNames);
    }

    /**
     * Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
     * 
     */
    @Import(name="tlsMode")
    private @Nullable Output<ServerTlsSettingsTlsMode> tlsMode;

    /**
     * @return Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
     * 
     */
    public Optional<Output<ServerTlsSettingsTlsMode>> tlsMode() {
        return Optional.ofNullable(this.tlsMode);
    }

    private ServerTlsSettingsArgs() {}

    private ServerTlsSettingsArgs(ServerTlsSettingsArgs $) {
        this.proxyTlsContext = $.proxyTlsContext;
        this.subjectAltNames = $.subjectAltNames;
        this.tlsMode = $.tlsMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerTlsSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerTlsSettingsArgs $;

        public Builder() {
            $ = new ServerTlsSettingsArgs();
        }

        public Builder(ServerTlsSettingsArgs defaults) {
            $ = new ServerTlsSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param proxyTlsContext Configures the mechanism to obtain security certificates and identity information.
         * 
         * @return builder
         * 
         */
        public Builder proxyTlsContext(@Nullable Output<TlsContextArgs> proxyTlsContext) {
            $.proxyTlsContext = proxyTlsContext;
            return this;
        }

        /**
         * @param proxyTlsContext Configures the mechanism to obtain security certificates and identity information.
         * 
         * @return builder
         * 
         */
        public Builder proxyTlsContext(TlsContextArgs proxyTlsContext) {
            return proxyTlsContext(Output.of(proxyTlsContext));
        }

        /**
         * @param subjectAltNames A list of alternate names to verify the subject identity in the certificate presented by the client.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(@Nullable Output<List<String>> subjectAltNames) {
            $.subjectAltNames = subjectAltNames;
            return this;
        }

        /**
         * @param subjectAltNames A list of alternate names to verify the subject identity in the certificate presented by the client.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(List<String> subjectAltNames) {
            return subjectAltNames(Output.of(subjectAltNames));
        }

        /**
         * @param subjectAltNames A list of alternate names to verify the subject identity in the certificate presented by the client.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(String... subjectAltNames) {
            return subjectAltNames(List.of(subjectAltNames));
        }

        /**
         * @param tlsMode Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
         * 
         * @return builder
         * 
         */
        public Builder tlsMode(@Nullable Output<ServerTlsSettingsTlsMode> tlsMode) {
            $.tlsMode = tlsMode;
            return this;
        }

        /**
         * @param tlsMode Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
         * 
         * @return builder
         * 
         */
        public Builder tlsMode(ServerTlsSettingsTlsMode tlsMode) {
            return tlsMode(Output.of(tlsMode));
        }

        public ServerTlsSettingsArgs build() {
            return $;
        }
    }

}
