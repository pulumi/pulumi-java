// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.websecurityscanner.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.websecurityscanner.v1beta.outputs.ScanRunErrorTraceResponse;
import com.pulumi.googlenative.websecurityscanner.v1beta.outputs.ScanRunWarningTraceResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ScanRunResponse {
    /**
     * @return The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    private final String endTime;
    /**
     * @return If result_state is an ERROR, this field provides the primary reason for scan&#39;s termination and more details, if such are available.
     * 
     */
    private final ScanRunErrorTraceResponse errorTrace;
    /**
     * @return The execution state of the ScanRun.
     * 
     */
    private final String executionState;
    /**
     * @return Whether the scan run has found any vulnerabilities.
     * 
     */
    private final Boolean hasVulnerabilities;
    /**
     * @return The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
     * 
     */
    private final String name;
    /**
     * @return The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    private final Integer progressPercent;
    /**
     * @return The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
     * 
     */
    private final String resultState;
    /**
     * @return The time at which the ScanRun started.
     * 
     */
    private final String startTime;
    /**
     * @return The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    private final String urlsCrawledCount;
    /**
     * @return The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    private final String urlsTestedCount;
    /**
     * @return A list of warnings, if such are encountered during this scan run.
     * 
     */
    private final List<ScanRunWarningTraceResponse> warningTraces;

    @CustomType.Constructor
    private ScanRunResponse(
        @CustomType.Parameter("endTime") String endTime,
        @CustomType.Parameter("errorTrace") ScanRunErrorTraceResponse errorTrace,
        @CustomType.Parameter("executionState") String executionState,
        @CustomType.Parameter("hasVulnerabilities") Boolean hasVulnerabilities,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("progressPercent") Integer progressPercent,
        @CustomType.Parameter("resultState") String resultState,
        @CustomType.Parameter("startTime") String startTime,
        @CustomType.Parameter("urlsCrawledCount") String urlsCrawledCount,
        @CustomType.Parameter("urlsTestedCount") String urlsTestedCount,
        @CustomType.Parameter("warningTraces") List<ScanRunWarningTraceResponse> warningTraces) {
        this.endTime = endTime;
        this.errorTrace = errorTrace;
        this.executionState = executionState;
        this.hasVulnerabilities = hasVulnerabilities;
        this.name = name;
        this.progressPercent = progressPercent;
        this.resultState = resultState;
        this.startTime = startTime;
        this.urlsCrawledCount = urlsCrawledCount;
        this.urlsTestedCount = urlsTestedCount;
        this.warningTraces = warningTraces;
    }

    /**
     * @return The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return If result_state is an ERROR, this field provides the primary reason for scan&#39;s termination and more details, if such are available.
     * 
     */
    public ScanRunErrorTraceResponse errorTrace() {
        return this.errorTrace;
    }
    /**
     * @return The execution state of the ScanRun.
     * 
     */
    public String executionState() {
        return this.executionState;
    }
    /**
     * @return Whether the scan run has found any vulnerabilities.
     * 
     */
    public Boolean hasVulnerabilities() {
        return this.hasVulnerabilities;
    }
    /**
     * @return The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    public Integer progressPercent() {
        return this.progressPercent;
    }
    /**
     * @return The result state of the ScanRun. This field is only available after the execution state reaches &#34;FINISHED&#34;.
     * 
     */
    public String resultState() {
        return this.resultState;
    }
    /**
     * @return The time at which the ScanRun started.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    public String urlsCrawledCount() {
        return this.urlsCrawledCount;
    }
    /**
     * @return The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    public String urlsTestedCount() {
        return this.urlsTestedCount;
    }
    /**
     * @return A list of warnings, if such are encountered during this scan run.
     * 
     */
    public List<ScanRunWarningTraceResponse> warningTraces() {
        return this.warningTraces;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScanRunResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String endTime;
        private ScanRunErrorTraceResponse errorTrace;
        private String executionState;
        private Boolean hasVulnerabilities;
        private String name;
        private Integer progressPercent;
        private String resultState;
        private String startTime;
        private String urlsCrawledCount;
        private String urlsTestedCount;
        private List<ScanRunWarningTraceResponse> warningTraces;

        public Builder() {
    	      // Empty
        }

        public Builder(ScanRunResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.errorTrace = defaults.errorTrace;
    	      this.executionState = defaults.executionState;
    	      this.hasVulnerabilities = defaults.hasVulnerabilities;
    	      this.name = defaults.name;
    	      this.progressPercent = defaults.progressPercent;
    	      this.resultState = defaults.resultState;
    	      this.startTime = defaults.startTime;
    	      this.urlsCrawledCount = defaults.urlsCrawledCount;
    	      this.urlsTestedCount = defaults.urlsTestedCount;
    	      this.warningTraces = defaults.warningTraces;
        }

        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder errorTrace(ScanRunErrorTraceResponse errorTrace) {
            this.errorTrace = Objects.requireNonNull(errorTrace);
            return this;
        }
        public Builder executionState(String executionState) {
            this.executionState = Objects.requireNonNull(executionState);
            return this;
        }
        public Builder hasVulnerabilities(Boolean hasVulnerabilities) {
            this.hasVulnerabilities = Objects.requireNonNull(hasVulnerabilities);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder progressPercent(Integer progressPercent) {
            this.progressPercent = Objects.requireNonNull(progressPercent);
            return this;
        }
        public Builder resultState(String resultState) {
            this.resultState = Objects.requireNonNull(resultState);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder urlsCrawledCount(String urlsCrawledCount) {
            this.urlsCrawledCount = Objects.requireNonNull(urlsCrawledCount);
            return this;
        }
        public Builder urlsTestedCount(String urlsTestedCount) {
            this.urlsTestedCount = Objects.requireNonNull(urlsTestedCount);
            return this;
        }
        public Builder warningTraces(List<ScanRunWarningTraceResponse> warningTraces) {
            this.warningTraces = Objects.requireNonNull(warningTraces);
            return this;
        }
        public Builder warningTraces(ScanRunWarningTraceResponse... warningTraces) {
            return warningTraces(List.of(warningTraces));
        }        public ScanRunResponse build() {
            return new ScanRunResponse(endTime, errorTrace, executionState, hasVulnerabilities, name, progressPercent, resultState, startTime, urlsCrawledCount, urlsTestedCount, warningTraces);
        }
    }
}
