// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.containeranalysis_v1alpha1.inputs.LicenseResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 * 
 */
public final class FileOccurrenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final FileOccurrenceResponse Empty = new FileOccurrenceResponse();

    /**
     * This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
     * 
     */
    @Import(name="attributions", required=true)
    private List<String> attributions;

    public List<String> attributions() {
        return this.attributions;
    }

    /**
     * This field provides a place for the SPDX file creator to record any general comments about the file
     * 
     */
    @Import(name="comment", required=true)
    private String comment;

    public String comment() {
        return this.comment;
    }

    /**
     * This field provides a place for the SPDX file creator to record file contributors
     * 
     */
    @Import(name="contributors", required=true)
    private List<String> contributors;

    public List<String> contributors() {
        return this.contributors;
    }

    /**
     * Identify the copyright holder of the file, as well as any dates present
     * 
     */
    @Import(name="copyright", required=true)
    private String copyright;

    public String copyright() {
        return this.copyright;
    }

    /**
     * This field contains the license information actually found in the file, if any
     * 
     */
    @Import(name="filesLicenseInfo", required=true)
    private List<String> filesLicenseInfo;

    public List<String> filesLicenseInfo() {
        return this.filesLicenseInfo;
    }

    /**
     * This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
     * 
     */
    @Import(name="licenseConcluded", required=true)
    private LicenseResponse licenseConcluded;

    public LicenseResponse licenseConcluded() {
        return this.licenseConcluded;
    }

    /**
     * This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
     * 
     */
    @Import(name="notice", required=true)
    private String notice;

    public String notice() {
        return this.notice;
    }

    private FileOccurrenceResponse() {}

    private FileOccurrenceResponse(FileOccurrenceResponse $) {
        this.attributions = $.attributions;
        this.comment = $.comment;
        this.contributors = $.contributors;
        this.copyright = $.copyright;
        this.filesLicenseInfo = $.filesLicenseInfo;
        this.licenseConcluded = $.licenseConcluded;
        this.notice = $.notice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileOccurrenceResponse $;

        public Builder() {
            $ = new FileOccurrenceResponse();
        }

        public Builder(FileOccurrenceResponse defaults) {
            $ = new FileOccurrenceResponse(Objects.requireNonNull(defaults));
        }

        public Builder attributions(List<String> attributions) {
            $.attributions = attributions;
            return this;
        }

        public Builder attributions(String... attributions) {
            return attributions(List.of(attributions));
        }

        public Builder comment(String comment) {
            $.comment = comment;
            return this;
        }

        public Builder contributors(List<String> contributors) {
            $.contributors = contributors;
            return this;
        }

        public Builder contributors(String... contributors) {
            return contributors(List.of(contributors));
        }

        public Builder copyright(String copyright) {
            $.copyright = copyright;
            return this;
        }

        public Builder filesLicenseInfo(List<String> filesLicenseInfo) {
            $.filesLicenseInfo = filesLicenseInfo;
            return this;
        }

        public Builder filesLicenseInfo(String... filesLicenseInfo) {
            return filesLicenseInfo(List.of(filesLicenseInfo));
        }

        public Builder licenseConcluded(LicenseResponse licenseConcluded) {
            $.licenseConcluded = licenseConcluded;
            return this;
        }

        public Builder notice(String notice) {
            $.notice = notice;
            return this;
        }

        public FileOccurrenceResponse build() {
            $.attributions = Objects.requireNonNull($.attributions, "expected parameter 'attributions' to be non-null");
            $.comment = Objects.requireNonNull($.comment, "expected parameter 'comment' to be non-null");
            $.contributors = Objects.requireNonNull($.contributors, "expected parameter 'contributors' to be non-null");
            $.copyright = Objects.requireNonNull($.copyright, "expected parameter 'copyright' to be non-null");
            $.filesLicenseInfo = Objects.requireNonNull($.filesLicenseInfo, "expected parameter 'filesLicenseInfo' to be non-null");
            $.licenseConcluded = Objects.requireNonNull($.licenseConcluded, "expected parameter 'licenseConcluded' to be non-null");
            $.notice = Objects.requireNonNull($.notice, "expected parameter 'notice' to be non-null");
            return $;
        }
    }

}
