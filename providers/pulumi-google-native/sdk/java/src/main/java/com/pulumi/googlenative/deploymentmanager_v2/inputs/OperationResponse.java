// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.deploymentmanager_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.deploymentmanager_v2.inputs.OperationErrorResponse;
import com.pulumi.googlenative.deploymentmanager_v2.inputs.OperationWarningsItemResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
 * 
 */
public final class OperationResponse extends com.pulumi.resources.InvokeArgs {

    public static final OperationResponse Empty = new OperationResponse();

    /**
     * The value of `requestId` if you provided it in the request. Not present otherwise.
     * 
     */
    @Import(name="clientOperationId", required=true)
    private String clientOperationId;

    public String clientOperationId() {
        return this.clientOperationId;
    }

    /**
     * A textual description of the operation, which is set when the operation is created.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * The time that this operation was completed. This value is in RFC3339 text format.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    public String endTime() {
        return this.endTime;
    }

    /**
     * If errors are generated during processing of the operation, this field will be populated.
     * 
     */
    @Import(name="error", required=true)
    private OperationErrorResponse error;

    public OperationErrorResponse error() {
        return this.error;
    }

    /**
     * If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
     * 
     */
    @Import(name="httpErrorMessage", required=true)
    private String httpErrorMessage;

    public String httpErrorMessage() {
        return this.httpErrorMessage;
    }

    /**
     * If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
     * 
     */
    @Import(name="httpErrorStatusCode", required=true)
    private Integer httpErrorStatusCode;

    public Integer httpErrorStatusCode() {
        return this.httpErrorStatusCode;
    }

    /**
     * The time that this operation was requested. This value is in RFC3339 text format.
     * 
     */
    @Import(name="insertTime", required=true)
    private String insertTime;

    public String insertTime() {
        return this.insertTime;
    }

    /**
     * Type of the resource. Always `compute#operation` for Operation resources.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * Name of the operation.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
     * 
     */
    @Import(name="operationGroupId", required=true)
    private String operationGroupId;

    public String operationGroupId() {
        return this.operationGroupId;
    }

    /**
     * The type of operation, such as `insert`, `update`, or `delete`, and so on.
     * 
     */
    @Import(name="operationType", required=true)
    private String operationType;

    public String operationType() {
        return this.operationType;
    }

    /**
     * An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
     * 
     */
    @Import(name="progress", required=true)
    private Integer progress;

    public Integer progress() {
        return this.progress;
    }

    /**
     * The URL of the region where the operation resides. Only applicable when performing regional operations.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    public String region() {
        return this.region;
    }

    /**
     * Server-defined URL for the resource.
     * 
     */
    @Import(name="selfLink", required=true)
    private String selfLink;

    public String selfLink() {
        return this.selfLink;
    }

    /**
     * The time that this operation was started by the server. This value is in RFC3339 text format.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * An optional textual description of the current status of the operation.
     * 
     */
    @Import(name="statusMessage", required=true)
    private String statusMessage;

    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * The unique target ID, which identifies a specific incarnation of the target resource.
     * 
     */
    @Import(name="targetId", required=true)
    private String targetId;

    public String targetId() {
        return this.targetId;
    }

    /**
     * The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
     * 
     */
    @Import(name="targetLink", required=true)
    private String targetLink;

    public String targetLink() {
        return this.targetLink;
    }

    /**
     * User who requested the operation, for example: `user@example.com`.
     * 
     */
    @Import(name="user", required=true)
    private String user;

    public String user() {
        return this.user;
    }

    /**
     * If warning messages are generated during processing of the operation, this field will be populated.
     * 
     */
    @Import(name="warnings", required=true)
    private List<OperationWarningsItemResponse> warnings;

    public List<OperationWarningsItemResponse> warnings() {
        return this.warnings;
    }

    /**
     * The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
     * 
     */
    @Import(name="zone", required=true)
    private String zone;

    public String zone() {
        return this.zone;
    }

    private OperationResponse() {}

    private OperationResponse(OperationResponse $) {
        this.clientOperationId = $.clientOperationId;
        this.description = $.description;
        this.endTime = $.endTime;
        this.error = $.error;
        this.httpErrorMessage = $.httpErrorMessage;
        this.httpErrorStatusCode = $.httpErrorStatusCode;
        this.insertTime = $.insertTime;
        this.kind = $.kind;
        this.name = $.name;
        this.operationGroupId = $.operationGroupId;
        this.operationType = $.operationType;
        this.progress = $.progress;
        this.region = $.region;
        this.selfLink = $.selfLink;
        this.startTime = $.startTime;
        this.status = $.status;
        this.statusMessage = $.statusMessage;
        this.targetId = $.targetId;
        this.targetLink = $.targetLink;
        this.user = $.user;
        this.warnings = $.warnings;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OperationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OperationResponse $;

        public Builder() {
            $ = new OperationResponse();
        }

        public Builder(OperationResponse defaults) {
            $ = new OperationResponse(Objects.requireNonNull(defaults));
        }

        public Builder clientOperationId(String clientOperationId) {
            $.clientOperationId = clientOperationId;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder error(OperationErrorResponse error) {
            $.error = error;
            return this;
        }

        public Builder httpErrorMessage(String httpErrorMessage) {
            $.httpErrorMessage = httpErrorMessage;
            return this;
        }

        public Builder httpErrorStatusCode(Integer httpErrorStatusCode) {
            $.httpErrorStatusCode = httpErrorStatusCode;
            return this;
        }

        public Builder insertTime(String insertTime) {
            $.insertTime = insertTime;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder operationGroupId(String operationGroupId) {
            $.operationGroupId = operationGroupId;
            return this;
        }

        public Builder operationType(String operationType) {
            $.operationType = operationType;
            return this;
        }

        public Builder progress(Integer progress) {
            $.progress = progress;
            return this;
        }

        public Builder region(String region) {
            $.region = region;
            return this;
        }

        public Builder selfLink(String selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder statusMessage(String statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        public Builder targetId(String targetId) {
            $.targetId = targetId;
            return this;
        }

        public Builder targetLink(String targetLink) {
            $.targetLink = targetLink;
            return this;
        }

        public Builder user(String user) {
            $.user = user;
            return this;
        }

        public Builder warnings(List<OperationWarningsItemResponse> warnings) {
            $.warnings = warnings;
            return this;
        }

        public Builder warnings(OperationWarningsItemResponse... warnings) {
            return warnings(List.of(warnings));
        }

        public Builder zone(String zone) {
            $.zone = zone;
            return this;
        }

        public OperationResponse build() {
            $.clientOperationId = Objects.requireNonNull($.clientOperationId, "expected parameter 'clientOperationId' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.httpErrorMessage = Objects.requireNonNull($.httpErrorMessage, "expected parameter 'httpErrorMessage' to be non-null");
            $.httpErrorStatusCode = Objects.requireNonNull($.httpErrorStatusCode, "expected parameter 'httpErrorStatusCode' to be non-null");
            $.insertTime = Objects.requireNonNull($.insertTime, "expected parameter 'insertTime' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.operationGroupId = Objects.requireNonNull($.operationGroupId, "expected parameter 'operationGroupId' to be non-null");
            $.operationType = Objects.requireNonNull($.operationType, "expected parameter 'operationType' to be non-null");
            $.progress = Objects.requireNonNull($.progress, "expected parameter 'progress' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.selfLink = Objects.requireNonNull($.selfLink, "expected parameter 'selfLink' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.statusMessage = Objects.requireNonNull($.statusMessage, "expected parameter 'statusMessage' to be non-null");
            $.targetId = Objects.requireNonNull($.targetId, "expected parameter 'targetId' to be non-null");
            $.targetLink = Objects.requireNonNull($.targetLink, "expected parameter 'targetLink' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            $.warnings = Objects.requireNonNull($.warnings, "expected parameter 'warnings' to be non-null");
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
