// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.tpu_v2alpha1.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Network related configurations.
 * 
 */
public final class NetworkConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkConfigResponse Empty = new NetworkConfigResponse();

    /**
     * Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
     * 
     */
    @Import(name="canIpForward", required=true)
    private Boolean canIpForward;

    public Boolean canIpForward() {
        return this.canIpForward;
    }

    /**
     * Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
     * 
     */
    @Import(name="enableExternalIps", required=true)
    private Boolean enableExternalIps;

    public Boolean enableExternalIps() {
        return this.enableExternalIps;
    }

    /**
     * The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, &#34;default&#34; will be used.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, &#34;default&#34; will be used.
     * 
     */
    @Import(name="subnetwork", required=true)
    private String subnetwork;

    public String subnetwork() {
        return this.subnetwork;
    }

    private NetworkConfigResponse() {}

    private NetworkConfigResponse(NetworkConfigResponse $) {
        this.canIpForward = $.canIpForward;
        this.enableExternalIps = $.enableExternalIps;
        this.network = $.network;
        this.subnetwork = $.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConfigResponse $;

        public Builder() {
            $ = new NetworkConfigResponse();
        }

        public Builder(NetworkConfigResponse defaults) {
            $ = new NetworkConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder canIpForward(Boolean canIpForward) {
            $.canIpForward = canIpForward;
            return this;
        }

        public Builder enableExternalIps(Boolean enableExternalIps) {
            $.enableExternalIps = enableExternalIps;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder subnetwork(String subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        public NetworkConfigResponse build() {
            $.canIpForward = Objects.requireNonNull($.canIpForward, "expected parameter 'canIpForward' to be non-null");
            $.enableExternalIps = Objects.requireNonNull($.enableExternalIps, "expected parameter 'enableExternalIps' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.subnetwork = Objects.requireNonNull($.subnetwork, "expected parameter 'subnetwork' to be non-null");
            return $;
        }
    }

}
