// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firestore.v1beta1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.firestore.v1beta1.enums.IndexState;
import com.pulumi.googlenative.firestore.v1beta1.inputs.GoogleFirestoreAdminV1beta1IndexFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexArgs Empty = new IndexArgs();

    /**
     * The collection ID to which this index applies. Required.
     * 
     */
    @Import(name="collectionId")
    private @Nullable Output<String> collectionId;

    /**
     * @return The collection ID to which this index applies. Required.
     * 
     */
    public Optional<Output<String>> collectionId() {
        return Optional.ofNullable(this.collectionId);
    }

    @Import(name="databaseId", required=true)
    private Output<String> databaseId;

    public Output<String> databaseId() {
        return this.databaseId;
    }

    /**
     * The fields to index.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields;

    /**
     * @return The fields to index.
     * 
     */
    public Optional<Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The resource name of the index. Output only.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the index. Output only.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The state of the index. Output only.
     * 
     */
    @Import(name="state")
    private @Nullable Output<IndexState> state;

    /**
     * @return The state of the index. Output only.
     * 
     */
    public Optional<Output<IndexState>> state() {
        return Optional.ofNullable(this.state);
    }

    private IndexArgs() {}

    private IndexArgs(IndexArgs $) {
        this.collectionId = $.collectionId;
        this.databaseId = $.databaseId;
        this.fields = $.fields;
        this.name = $.name;
        this.project = $.project;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexArgs $;

        public Builder() {
            $ = new IndexArgs();
        }

        public Builder(IndexArgs defaults) {
            $ = new IndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectionId The collection ID to which this index applies. Required.
         * 
         * @return builder
         * 
         */
        public Builder collectionId(@Nullable Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        /**
         * @param collectionId The collection ID to which this index applies. Required.
         * 
         * @return builder
         * 
         */
        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        public Builder databaseId(Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param fields The fields to index.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<GoogleFirestoreAdminV1beta1IndexFieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields The fields to index.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<GoogleFirestoreAdminV1beta1IndexFieldArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields The fields to index.
         * 
         * @return builder
         * 
         */
        public Builder fields(GoogleFirestoreAdminV1beta1IndexFieldArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param name The resource name of the index. Output only.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the index. Output only.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state The state of the index. Output only.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<IndexState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the index. Output only.
         * 
         * @return builder
         * 
         */
        public Builder state(IndexState state) {
            return state(Output.of(state));
        }

        public IndexArgs build() {
            $.databaseId = Objects.requireNonNull($.databaseId, "expected parameter 'databaseId' to be non-null");
            return $;
        }
    }

}
