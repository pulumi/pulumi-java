// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.v1.enums.DiskInstantiationConfigInstantiateFrom;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
 * 
 */
public final class DiskInstantiationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskInstantiationConfigArgs Empty = new DiskInstantiationConfigArgs();

    /**
     * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     * 
     */
    @Import(name="autoDelete")
    private @Nullable Output<Boolean> autoDelete;

    /**
     * @return Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     * 
     */
    public Optional<Output<Boolean>> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }

    /**
     * The custom source image to be used to restore this disk when instantiating this instance template.
     * 
     */
    @Import(name="customImage")
    private @Nullable Output<String> customImage;

    /**
     * @return The custom source image to be used to restore this disk when instantiating this instance template.
     * 
     */
    public Optional<Output<String>> customImage() {
        return Optional.ofNullable(this.customImage);
    }

    /**
     * Specifies the device name of the disk to which the configurations apply to.
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return Specifies the device name of the disk to which the configurations apply to.
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
     * 
     */
    @Import(name="instantiateFrom")
    private @Nullable Output<DiskInstantiationConfigInstantiateFrom> instantiateFrom;

    /**
     * @return Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
     * 
     */
    public Optional<Output<DiskInstantiationConfigInstantiateFrom>> instantiateFrom() {
        return Optional.ofNullable(this.instantiateFrom);
    }

    private DiskInstantiationConfigArgs() {}

    private DiskInstantiationConfigArgs(DiskInstantiationConfigArgs $) {
        this.autoDelete = $.autoDelete;
        this.customImage = $.customImage;
        this.deviceName = $.deviceName;
        this.instantiateFrom = $.instantiateFrom;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskInstantiationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskInstantiationConfigArgs $;

        public Builder() {
            $ = new DiskInstantiationConfigArgs();
        }

        public Builder(DiskInstantiationConfigArgs defaults) {
            $ = new DiskInstantiationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoDelete Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(@Nullable Output<Boolean> autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        /**
         * @param autoDelete Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(Boolean autoDelete) {
            return autoDelete(Output.of(autoDelete));
        }

        /**
         * @param customImage The custom source image to be used to restore this disk when instantiating this instance template.
         * 
         * @return builder
         * 
         */
        public Builder customImage(@Nullable Output<String> customImage) {
            $.customImage = customImage;
            return this;
        }

        /**
         * @param customImage The custom source image to be used to restore this disk when instantiating this instance template.
         * 
         * @return builder
         * 
         */
        public Builder customImage(String customImage) {
            return customImage(Output.of(customImage));
        }

        /**
         * @param deviceName Specifies the device name of the disk to which the configurations apply to.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName Specifies the device name of the disk to which the configurations apply to.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param instantiateFrom Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
         * 
         * @return builder
         * 
         */
        public Builder instantiateFrom(@Nullable Output<DiskInstantiationConfigInstantiateFrom> instantiateFrom) {
            $.instantiateFrom = instantiateFrom;
            return this;
        }

        /**
         * @param instantiateFrom Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
         * 
         * @return builder
         * 
         */
        public Builder instantiateFrom(DiskInstantiationConfigInstantiateFrom instantiateFrom) {
            return instantiateFrom(Output.of(instantiateFrom));
        }

        public DiskInstantiationConfigArgs build() {
            return $;
        }
    }

}
