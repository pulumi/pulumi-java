// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Options relating to the publication of each CertificateAuthority&#39;s CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
 * 
 */
public final class PublishingOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublishingOptionsArgs Empty = new PublishingOptionsArgs();

    /**
     * Optional. When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34; X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
     * 
     */
    @Import(name="publishCaCert")
    private @Nullable Output<Boolean> publishCaCert;

    /**
     * @return Optional. When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34; X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
     * 
     */
    public Optional<Output<Boolean>> publishCaCert() {
        return Optional.ofNullable(this.publishCaCert);
    }

    /**
     * Optional. When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
     * 
     */
    @Import(name="publishCrl")
    private @Nullable Output<Boolean> publishCrl;

    /**
     * @return Optional. When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
     * 
     */
    public Optional<Output<Boolean>> publishCrl() {
        return Optional.ofNullable(this.publishCrl);
    }

    private PublishingOptionsArgs() {}

    private PublishingOptionsArgs(PublishingOptionsArgs $) {
        this.publishCaCert = $.publishCaCert;
        this.publishCrl = $.publishCrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublishingOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublishingOptionsArgs $;

        public Builder() {
            $ = new PublishingOptionsArgs();
        }

        public Builder(PublishingOptionsArgs defaults) {
            $ = new PublishingOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param publishCaCert Optional. When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34; X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
         * 
         * @return builder
         * 
         */
        public Builder publishCaCert(@Nullable Output<Boolean> publishCaCert) {
            $.publishCaCert = publishCaCert;
            return this;
        }

        /**
         * @param publishCaCert Optional. When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34; X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
         * 
         * @return builder
         * 
         */
        public Builder publishCaCert(Boolean publishCaCert) {
            return publishCaCert(Output.of(publishCaCert));
        }

        /**
         * @param publishCrl Optional. When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
         * 
         * @return builder
         * 
         */
        public Builder publishCrl(@Nullable Output<Boolean> publishCrl) {
            $.publishCrl = publishCrl;
            return this;
        }

        /**
         * @param publishCrl Optional. When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
         * 
         * @return builder
         * 
         */
        public Builder publishCrl(Boolean publishCrl) {
            return publishCrl(Output.of(publishCrl));
        }

        public PublishingOptionsArgs build() {
            return $;
        }
    }

}
