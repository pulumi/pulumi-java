// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery_v2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.bigquery_v2.inputs.UserDefinedFunctionResourceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ViewDefinitionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ViewDefinitionResponse Empty = new ViewDefinitionResponse();

    /**
     * [Required] A query that BigQuery executes when the view is referenced.
     * 
     */
    @Import(name="query", required=true)
    private String query;

    public String query() {
        return this.query;
    }

    /**
     * True if the column names are explicitly specified. For example by using the &#39;CREATE VIEW v(c1, c2) AS ...&#39; syntax. Can only be set using BigQuery&#39;s standard SQL: https://cloud.google.com/bigquery/sql-reference/
     * 
     */
    @Import(name="useExplicitColumnNames", required=true)
    private Boolean useExplicitColumnNames;

    public Boolean useExplicitColumnNames() {
        return this.useExplicitColumnNames;
    }

    /**
     * Specifies whether to use BigQuery&#39;s legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery&#39;s standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
     * 
     */
    @Import(name="useLegacySql", required=true)
    private Boolean useLegacySql;

    public Boolean useLegacySql() {
        return this.useLegacySql;
    }

    /**
     * Describes user-defined function resources used in the query.
     * 
     */
    @Import(name="userDefinedFunctionResources", required=true)
    private List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;

    public List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources() {
        return this.userDefinedFunctionResources;
    }

    private ViewDefinitionResponse() {}

    private ViewDefinitionResponse(ViewDefinitionResponse $) {
        this.query = $.query;
        this.useExplicitColumnNames = $.useExplicitColumnNames;
        this.useLegacySql = $.useLegacySql;
        this.userDefinedFunctionResources = $.userDefinedFunctionResources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ViewDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ViewDefinitionResponse $;

        public Builder() {
            $ = new ViewDefinitionResponse();
        }

        public Builder(ViewDefinitionResponse defaults) {
            $ = new ViewDefinitionResponse(Objects.requireNonNull(defaults));
        }

        public Builder query(String query) {
            $.query = query;
            return this;
        }

        public Builder useExplicitColumnNames(Boolean useExplicitColumnNames) {
            $.useExplicitColumnNames = useExplicitColumnNames;
            return this;
        }

        public Builder useLegacySql(Boolean useLegacySql) {
            $.useLegacySql = useLegacySql;
            return this;
        }

        public Builder userDefinedFunctionResources(List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources) {
            $.userDefinedFunctionResources = userDefinedFunctionResources;
            return this;
        }

        public Builder userDefinedFunctionResources(UserDefinedFunctionResourceResponse... userDefinedFunctionResources) {
            return userDefinedFunctionResources(List.of(userDefinedFunctionResources));
        }

        public ViewDefinitionResponse build() {
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.useExplicitColumnNames = Objects.requireNonNull($.useExplicitColumnNames, "expected parameter 'useExplicitColumnNames' to be non-null");
            $.useLegacySql = Objects.requireNonNull($.useLegacySql, "expected parameter 'useLegacySql' to be non-null");
            $.userDefinedFunctionResources = Objects.requireNonNull($.userDefinedFunctionResources, "expected parameter 'userDefinedFunctionResources' to be non-null");
            return $;
        }
    }

}
