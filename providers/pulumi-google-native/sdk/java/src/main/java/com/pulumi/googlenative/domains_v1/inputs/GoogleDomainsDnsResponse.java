// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.domains_v1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.domains_v1.inputs.DsRecordResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Configuration for using the free DNS zone provided by Google Domains as a `Registration`&#39;s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
 * 
 */
public final class GoogleDomainsDnsResponse extends com.pulumi.resources.InvokeArgs {

    public static final GoogleDomainsDnsResponse Empty = new GoogleDomainsDnsResponse();

    /**
     * The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.
     * 
     */
    @Import(name="dsRecords", required=true)
    private List<DsRecordResponse> dsRecords;

    /**
     * @return The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.
     * 
     */
    public List<DsRecordResponse> dsRecords() {
        return this.dsRecords;
    }

    /**
     * The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
     * 
     */
    @Import(name="dsState", required=true)
    private String dsState;

    /**
     * @return The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
     * 
     */
    public String dsState() {
        return this.dsState;
    }

    /**
     * A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.
     * 
     */
    @Import(name="nameServers", required=true)
    private List<String> nameServers;

    /**
     * @return A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.
     * 
     */
    public List<String> nameServers() {
        return this.nameServers;
    }

    private GoogleDomainsDnsResponse() {}

    private GoogleDomainsDnsResponse(GoogleDomainsDnsResponse $) {
        this.dsRecords = $.dsRecords;
        this.dsState = $.dsState;
        this.nameServers = $.nameServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleDomainsDnsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleDomainsDnsResponse $;

        public Builder() {
            $ = new GoogleDomainsDnsResponse();
        }

        public Builder(GoogleDomainsDnsResponse defaults) {
            $ = new GoogleDomainsDnsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dsRecords The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.
         * 
         * @return builder
         * 
         */
        public Builder dsRecords(List<DsRecordResponse> dsRecords) {
            $.dsRecords = dsRecords;
            return this;
        }

        /**
         * @param dsRecords The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.
         * 
         * @return builder
         * 
         */
        public Builder dsRecords(DsRecordResponse... dsRecords) {
            return dsRecords(List.of(dsRecords));
        }

        /**
         * @param dsState The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder dsState(String dsState) {
            $.dsState = dsState;
            return this;
        }

        /**
         * @param nameServers A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(List<String> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        /**
         * @param nameServers A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        public GoogleDomainsDnsResponse build() {
            $.dsRecords = Objects.requireNonNull($.dsRecords, "expected parameter 'dsRecords' to be non-null");
            $.dsState = Objects.requireNonNull($.dsState, "expected parameter 'dsState' to be non-null");
            $.nameServers = Objects.requireNonNull($.nameServers, "expected parameter 'nameServers' to be non-null");
            return $;
        }
    }

}
