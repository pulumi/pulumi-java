// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAlertAnalyticPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAlertAnalyticPlainArgs Empty = new GetAlertAnalyticPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
     * 
     */
    @Import(name="groupBies")
    private @Nullable List<String> groupBies;

    /**
     * @return A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
     * 
     */
    public Optional<List<String>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
     * 
     */
    @Import(name="queryTimeZone")
    private @Nullable String queryTimeZone;

    /**
     * @return Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
     * 
     */
    public Optional<String> queryTimeZone() {
        return Optional.ofNullable(this.queryTimeZone);
    }

    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * 
     */
    @Import(name="scimQuery")
    private @Nullable String scimQuery;

    /**
     * @return The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * 
     */
    public Optional<String> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }

    /**
     * Specifies a subset of summarized fields to be returned in the response.
     * 
     */
    @Import(name="summaryFields")
    private @Nullable List<String> summaryFields;

    /**
     * @return Specifies a subset of summarized fields to be returned in the response.
     * 
     */
    public Optional<List<String>> summaryFields() {
        return Optional.ofNullable(this.summaryFields);
    }

    /**
     * An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeEnded")
    private @Nullable String timeEnded;

    /**
     * @return An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }

    /**
     * An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeStarted")
    private @Nullable String timeStarted;

    /**
     * @return An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }

    private GetAlertAnalyticPlainArgs() {}

    private GetAlertAnalyticPlainArgs(GetAlertAnalyticPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.groupBies = $.groupBies;
        this.queryTimeZone = $.queryTimeZone;
        this.scimQuery = $.scimQuery;
        this.summaryFields = $.summaryFields;
        this.timeEnded = $.timeEnded;
        this.timeStarted = $.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAlertAnalyticPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAlertAnalyticPlainArgs $;

        public Builder() {
            $ = new GetAlertAnalyticPlainArgs();
        }

        public Builder(GetAlertAnalyticPlainArgs defaults) {
            $ = new GetAlertAnalyticPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param groupBies A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable List<String> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param queryTimeZone Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
         * 
         * @return builder
         * 
         */
        public Builder queryTimeZone(@Nullable String queryTimeZone) {
            $.queryTimeZone = queryTimeZone;
            return this;
        }

        /**
         * @param scimQuery The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
         * 
         * @return builder
         * 
         */
        public Builder scimQuery(@Nullable String scimQuery) {
            $.scimQuery = scimQuery;
            return this;
        }

        /**
         * @param summaryFields Specifies a subset of summarized fields to be returned in the response.
         * 
         * @return builder
         * 
         */
        public Builder summaryFields(@Nullable List<String> summaryFields) {
            $.summaryFields = summaryFields;
            return this;
        }

        /**
         * @param summaryFields Specifies a subset of summarized fields to be returned in the response.
         * 
         * @return builder
         * 
         */
        public Builder summaryFields(String... summaryFields) {
            return summaryFields(List.of(summaryFields));
        }

        /**
         * @param timeEnded An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(@Nullable String timeEnded) {
            $.timeEnded = timeEnded;
            return this;
        }

        /**
         * @param timeStarted An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(@Nullable String timeStarted) {
            $.timeStarted = timeStarted;
            return this;
        }

        public GetAlertAnalyticPlainArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
