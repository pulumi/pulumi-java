// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceCredentialProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitoredResourceCredential {
    /**
     * @return Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED. * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential. * PLAINTEXT - The credential properties will have credentials in plain text format. * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
     * 
     */
    private final String credentialType;
    /**
     * @return The user-specified textual description of the credential.
     * 
     */
    private final String description;
    /**
     * @return The master key OCID and applicable only for property value type ENCRYPTION. Key OCID is passed as input to Key management service decrypt API to retrieve the encrypted property value text.
     * 
     */
    private final String keyId;
    /**
     * @return property name
     * 
     */
    private final String name;
    /**
     * @return List of monitored resource properties
     * 
     */
    private final List<GetMonitoredResourceCredentialProperty> properties;
    /**
     * @return The source type and source name combination,delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
     * 
     */
    private final String source;
    /**
     * @return Monitored resource type
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetMonitoredResourceCredential(
        @CustomType.Parameter("credentialType") String credentialType,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("keyId") String keyId,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("properties") List<GetMonitoredResourceCredentialProperty> properties,
        @CustomType.Parameter("source") String source,
        @CustomType.Parameter("type") String type) {
        this.credentialType = credentialType;
        this.description = description;
        this.keyId = keyId;
        this.name = name;
        this.properties = properties;
        this.source = source;
        this.type = type;
    }

    /**
     * @return Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED. * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential. * PLAINTEXT - The credential properties will have credentials in plain text format. * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
     * 
     */
    public String credentialType() {
        return this.credentialType;
    }
    /**
     * @return The user-specified textual description of the credential.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The master key OCID and applicable only for property value type ENCRYPTION. Key OCID is passed as input to Key management service decrypt API to retrieve the encrypted property value text.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return property name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of monitored resource properties
     * 
     */
    public List<GetMonitoredResourceCredentialProperty> properties() {
        return this.properties;
    }
    /**
     * @return The source type and source name combination,delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Monitored resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceCredential defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String credentialType;
        private String description;
        private String keyId;
        private String name;
        private List<GetMonitoredResourceCredentialProperty> properties;
        private String source;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMonitoredResourceCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialType = defaults.credentialType;
    	      this.description = defaults.description;
    	      this.keyId = defaults.keyId;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.source = defaults.source;
    	      this.type = defaults.type;
        }

        public Builder credentialType(String credentialType) {
            this.credentialType = Objects.requireNonNull(credentialType);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder properties(List<GetMonitoredResourceCredentialProperty> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder properties(GetMonitoredResourceCredentialProperty... properties) {
            return properties(List.of(properties));
        }
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetMonitoredResourceCredential build() {
            return new GetMonitoredResourceCredential(credentialType, description, keyId, name, properties, source, type);
        }
    }
}
