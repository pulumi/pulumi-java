// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ManagementAgent.inputs.GetManagementAgentInstallKeysFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetManagementAgentInstallKeysArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagementAgentInstallKeysArgs Empty = new GetManagementAgentInstallKeysArgs();

    /**
     * Value of this is always &#34;ACCESSIBLE&#34; and any other value is not supported.
     * 
     */
    @Import(name="accessLevel")
    private Output</* @Nullable */ String> accessLevel;

    /**
     * @return Value of this is always &#34;ACCESSIBLE&#34; and any other value is not supported.
     * 
     */
    public Output</* @Nullable */ String> accessLevel() {
        return this.accessLevel;
    }

    /**
     * The OCID of the compartment to which a request will be scoped.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment to which a request will be scoped.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private Output</* @Nullable */ Boolean> compartmentIdInSubtree;

    /**
     * @return if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
     * 
     */
    public Output</* @Nullable */ Boolean> compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    /**
     * The display name for which the Key needs to be listed.
     * 
     */
    @Import(name="displayName")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The display name for which the Key needs to be listed.
     * 
     */
    public Output</* @Nullable */ String> displayName() {
        return this.displayName;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetManagementAgentInstallKeysFilter>> filters;

    public Output</* @Nullable */ List<GetManagementAgentInstallKeysFilter>> filters() {
        return this.filters;
    }

    /**
     * Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetManagementAgentInstallKeysArgs() {}

    private GetManagementAgentInstallKeysArgs(GetManagementAgentInstallKeysArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagementAgentInstallKeysArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagementAgentInstallKeysArgs $;

        public Builder() {
            $ = new GetManagementAgentInstallKeysArgs();
        }

        public Builder(GetManagementAgentInstallKeysArgs defaults) {
            $ = new GetManagementAgentInstallKeysArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Value of this is always &#34;ACCESSIBLE&#34; and any other value is not supported.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(Output</* @Nullable */ String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Value of this is always &#34;ACCESSIBLE&#34; and any other value is not supported.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Output</* @Nullable */ Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param displayName The display name for which the Key needs to be listed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output</* @Nullable */ String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for which the Key needs to be listed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(Output</* @Nullable */ List<GetManagementAgentInstallKeysFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetManagementAgentInstallKeysFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagementAgentInstallKeysFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state Filter to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Filter to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetManagementAgentInstallKeysArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
