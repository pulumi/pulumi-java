// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuditPolicyAuditConditionEnableConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuditPolicyAuditConditionEnableConditionArgs Empty = new AuditPolicyAuditConditionEnableConditionArgs();

    /**
     * List of users or roles that the policy must be enabled for.
     * 
     */
    @Import(name="entityNames")
    private @Nullable Output<List<String>> entityNames;

    /**
     * @return List of users or roles that the policy must be enabled for.
     * 
     */
    public Optional<Output<List<String>>> entityNames() {
        return Optional.ofNullable(this.entityNames);
    }

    /**
     * The entity include or exclude selection.
     * 
     */
    @Import(name="entitySelection")
    private @Nullable Output<String> entitySelection;

    /**
     * @return The entity include or exclude selection.
     * 
     */
    public Optional<Output<String>> entitySelection() {
        return Optional.ofNullable(this.entitySelection);
    }

    /**
     * The entity type that the policy must be enabled for.
     * 
     */
    @Import(name="entityType")
    private @Nullable Output<String> entityType;

    /**
     * @return The entity type that the policy must be enabled for.
     * 
     */
    public Optional<Output<String>> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    /**
     * The operation status that the policy must be enabled for.
     * 
     */
    @Import(name="operationStatus")
    private @Nullable Output<String> operationStatus;

    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    public Optional<Output<String>> operationStatus() {
        return Optional.ofNullable(this.operationStatus);
    }

    private AuditPolicyAuditConditionEnableConditionArgs() {}

    private AuditPolicyAuditConditionEnableConditionArgs(AuditPolicyAuditConditionEnableConditionArgs $) {
        this.entityNames = $.entityNames;
        this.entitySelection = $.entitySelection;
        this.entityType = $.entityType;
        this.operationStatus = $.operationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuditPolicyAuditConditionEnableConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuditPolicyAuditConditionEnableConditionArgs $;

        public Builder() {
            $ = new AuditPolicyAuditConditionEnableConditionArgs();
        }

        public Builder(AuditPolicyAuditConditionEnableConditionArgs defaults) {
            $ = new AuditPolicyAuditConditionEnableConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityNames List of users or roles that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder entityNames(@Nullable Output<List<String>> entityNames) {
            $.entityNames = entityNames;
            return this;
        }

        /**
         * @param entityNames List of users or roles that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder entityNames(List<String> entityNames) {
            return entityNames(Output.of(entityNames));
        }

        /**
         * @param entityNames List of users or roles that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder entityNames(String... entityNames) {
            return entityNames(List.of(entityNames));
        }

        /**
         * @param entitySelection The entity include or exclude selection.
         * 
         * @return builder
         * 
         */
        public Builder entitySelection(@Nullable Output<String> entitySelection) {
            $.entitySelection = entitySelection;
            return this;
        }

        /**
         * @param entitySelection The entity include or exclude selection.
         * 
         * @return builder
         * 
         */
        public Builder entitySelection(String entitySelection) {
            return entitySelection(Output.of(entitySelection));
        }

        /**
         * @param entityType The entity type that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder entityType(@Nullable Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType The entity type that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        /**
         * @param operationStatus The operation status that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder operationStatus(@Nullable Output<String> operationStatus) {
            $.operationStatus = operationStatus;
            return this;
        }

        /**
         * @param operationStatus The operation status that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder operationStatus(String operationStatus) {
            return operationStatus(Output.of(operationStatus));
        }

        public AuditPolicyAuditConditionEnableConditionArgs build() {
            return $;
        }
    }

}
