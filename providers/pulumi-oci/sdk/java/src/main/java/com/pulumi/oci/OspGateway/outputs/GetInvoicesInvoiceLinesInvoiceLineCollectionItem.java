// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInvoicesInvoiceLinesInvoiceLineCollectionItem {
    /**
     * @return Currency details model
     * 
     */
    private final List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies;
    /**
     * @return Unit price of the ordered product
     * 
     */
    private final Double netUnitPrice;
    /**
     * @return Product of the item
     * 
     */
    private final String orderNo;
    /**
     * @return Part number
     * 
     */
    private final String partNumber;
    /**
     * @return Product of the item
     * 
     */
    private final String product;
    /**
     * @return Quantity of the ordered product
     * 
     */
    private final Double quantity;
    /**
     * @return End date
     * 
     */
    private final String timeEnd;
    /**
     * @return Start date
     * 
     */
    private final String timeStart;
    /**
     * @return Total price of the ordered product (Net unit price x quantity)
     * 
     */
    private final Double totalPrice;

    @CustomType.Constructor
    private GetInvoicesInvoiceLinesInvoiceLineCollectionItem(
        @CustomType.Parameter("currencies") List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies,
        @CustomType.Parameter("netUnitPrice") Double netUnitPrice,
        @CustomType.Parameter("orderNo") String orderNo,
        @CustomType.Parameter("partNumber") String partNumber,
        @CustomType.Parameter("product") String product,
        @CustomType.Parameter("quantity") Double quantity,
        @CustomType.Parameter("timeEnd") String timeEnd,
        @CustomType.Parameter("timeStart") String timeStart,
        @CustomType.Parameter("totalPrice") Double totalPrice) {
        this.currencies = currencies;
        this.netUnitPrice = netUnitPrice;
        this.orderNo = orderNo;
        this.partNumber = partNumber;
        this.product = product;
        this.quantity = quantity;
        this.timeEnd = timeEnd;
        this.timeStart = timeStart;
        this.totalPrice = totalPrice;
    }

    /**
     * @return Currency details model
     * 
     */
    public List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies() {
        return this.currencies;
    }
    /**
     * @return Unit price of the ordered product
     * 
     */
    public Double netUnitPrice() {
        return this.netUnitPrice;
    }
    /**
     * @return Product of the item
     * 
     */
    public String orderNo() {
        return this.orderNo;
    }
    /**
     * @return Part number
     * 
     */
    public String partNumber() {
        return this.partNumber;
    }
    /**
     * @return Product of the item
     * 
     */
    public String product() {
        return this.product;
    }
    /**
     * @return Quantity of the ordered product
     * 
     */
    public Double quantity() {
        return this.quantity;
    }
    /**
     * @return End date
     * 
     */
    public String timeEnd() {
        return this.timeEnd;
    }
    /**
     * @return Start date
     * 
     */
    public String timeStart() {
        return this.timeStart;
    }
    /**
     * @return Total price of the ordered product (Net unit price x quantity)
     * 
     */
    public Double totalPrice() {
        return this.totalPrice;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesInvoiceLinesInvoiceLineCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies;
        private Double netUnitPrice;
        private String orderNo;
        private String partNumber;
        private String product;
        private Double quantity;
        private String timeEnd;
        private String timeStart;
        private Double totalPrice;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInvoicesInvoiceLinesInvoiceLineCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currencies = defaults.currencies;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.orderNo = defaults.orderNo;
    	      this.partNumber = defaults.partNumber;
    	      this.product = defaults.product;
    	      this.quantity = defaults.quantity;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.totalPrice = defaults.totalPrice;
        }

        public Builder currencies(List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies) {
            this.currencies = Objects.requireNonNull(currencies);
            return this;
        }
        public Builder currencies(GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency... currencies) {
            return currencies(List.of(currencies));
        }
        public Builder netUnitPrice(Double netUnitPrice) {
            this.netUnitPrice = Objects.requireNonNull(netUnitPrice);
            return this;
        }
        public Builder orderNo(String orderNo) {
            this.orderNo = Objects.requireNonNull(orderNo);
            return this;
        }
        public Builder partNumber(String partNumber) {
            this.partNumber = Objects.requireNonNull(partNumber);
            return this;
        }
        public Builder product(String product) {
            this.product = Objects.requireNonNull(product);
            return this;
        }
        public Builder quantity(Double quantity) {
            this.quantity = Objects.requireNonNull(quantity);
            return this;
        }
        public Builder timeEnd(String timeEnd) {
            this.timeEnd = Objects.requireNonNull(timeEnd);
            return this;
        }
        public Builder timeStart(String timeStart) {
            this.timeStart = Objects.requireNonNull(timeStart);
            return this;
        }
        public Builder totalPrice(Double totalPrice) {
            this.totalPrice = Objects.requireNonNull(totalPrice);
            return this;
        }        public GetInvoicesInvoiceLinesInvoiceLineCollectionItem build() {
            return new GetInvoicesInvoiceLinesInvoiceLineCollectionItem(currencies, netUnitPrice, orderNo, partNumber, product, quantity, timeEnd, timeStart, totalPrice);
        }
    }
}
