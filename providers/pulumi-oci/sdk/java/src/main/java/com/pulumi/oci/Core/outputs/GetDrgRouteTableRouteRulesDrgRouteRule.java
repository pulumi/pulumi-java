// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDrgRouteTableRouteRulesDrgRouteRule {
    /**
     * @return Additional properties for the route, computed by the service.
     * 
     */
    private final Map<String,Object> attributes;
    /**
     * @return Represents the range of IP addresses to match against when routing traffic.
     * 
     */
    private final String destination;
    /**
     * @return The type of destination for the rule. the type is required if `direction` = `EGRESS`.
     * 
     */
    private final String destinationType;
    /**
     * @return The Oracle-assigned ID of the DRG route rule.
     * 
     */
    private final String id;
    /**
     * @return Indicates that if the next hop attachment does not exist, so traffic for this route is discarded without notification.
     * 
     */
    private final Boolean isBlackhole;
    /**
     * @return Indicates that the route was not imported due to a conflict between route rules.
     * 
     */
    private final Boolean isConflict;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment responsible for reaching the network destination.
     * 
     */
    private final String nextHopDrgAttachmentId;
    /**
     * @return The earliest origin of a route. If a route is advertised to a DRG through an IPsec tunnel attachment, and is propagated to peered DRGs via RPC attachments, the route&#39;s provenance in the peered DRGs remains `IPSEC_TUNNEL`, because that is the earliest origin.
     * 
     */
    private final String routeProvenance;
    /**
     * @return Static routes are specified through the DRG route table API. Dynamic routes are learned by the DRG from the DRG attachments through various routing protocols.
     * 
     */
    private final String routeType;

    @CustomType.Constructor
    private GetDrgRouteTableRouteRulesDrgRouteRule(
        @CustomType.Parameter("attributes") Map<String,Object> attributes,
        @CustomType.Parameter("destination") String destination,
        @CustomType.Parameter("destinationType") String destinationType,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isBlackhole") Boolean isBlackhole,
        @CustomType.Parameter("isConflict") Boolean isConflict,
        @CustomType.Parameter("nextHopDrgAttachmentId") String nextHopDrgAttachmentId,
        @CustomType.Parameter("routeProvenance") String routeProvenance,
        @CustomType.Parameter("routeType") String routeType) {
        this.attributes = attributes;
        this.destination = destination;
        this.destinationType = destinationType;
        this.id = id;
        this.isBlackhole = isBlackhole;
        this.isConflict = isConflict;
        this.nextHopDrgAttachmentId = nextHopDrgAttachmentId;
        this.routeProvenance = routeProvenance;
        this.routeType = routeType;
    }

    /**
     * @return Additional properties for the route, computed by the service.
     * 
     */
    public Map<String,Object> attributes() {
        return this.attributes;
    }
    /**
     * @return Represents the range of IP addresses to match against when routing traffic.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return The type of destination for the rule. the type is required if `direction` = `EGRESS`.
     * 
     */
    public String destinationType() {
        return this.destinationType;
    }
    /**
     * @return The Oracle-assigned ID of the DRG route rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates that if the next hop attachment does not exist, so traffic for this route is discarded without notification.
     * 
     */
    public Boolean isBlackhole() {
        return this.isBlackhole;
    }
    /**
     * @return Indicates that the route was not imported due to a conflict between route rules.
     * 
     */
    public Boolean isConflict() {
        return this.isConflict;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment responsible for reaching the network destination.
     * 
     */
    public String nextHopDrgAttachmentId() {
        return this.nextHopDrgAttachmentId;
    }
    /**
     * @return The earliest origin of a route. If a route is advertised to a DRG through an IPsec tunnel attachment, and is propagated to peered DRGs via RPC attachments, the route&#39;s provenance in the peered DRGs remains `IPSEC_TUNNEL`, because that is the earliest origin.
     * 
     */
    public String routeProvenance() {
        return this.routeProvenance;
    }
    /**
     * @return Static routes are specified through the DRG route table API. Dynamic routes are learned by the DRG from the DRG attachments through various routing protocols.
     * 
     */
    public String routeType() {
        return this.routeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDrgRouteTableRouteRulesDrgRouteRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,Object> attributes;
        private String destination;
        private String destinationType;
        private String id;
        private Boolean isBlackhole;
        private Boolean isConflict;
        private String nextHopDrgAttachmentId;
        private String routeProvenance;
        private String routeType;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDrgRouteTableRouteRulesDrgRouteRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.destination = defaults.destination;
    	      this.destinationType = defaults.destinationType;
    	      this.id = defaults.id;
    	      this.isBlackhole = defaults.isBlackhole;
    	      this.isConflict = defaults.isConflict;
    	      this.nextHopDrgAttachmentId = defaults.nextHopDrgAttachmentId;
    	      this.routeProvenance = defaults.routeProvenance;
    	      this.routeType = defaults.routeType;
        }

        public Builder attributes(Map<String,Object> attributes) {
            this.attributes = Objects.requireNonNull(attributes);
            return this;
        }
        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        public Builder destinationType(String destinationType) {
            this.destinationType = Objects.requireNonNull(destinationType);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isBlackhole(Boolean isBlackhole) {
            this.isBlackhole = Objects.requireNonNull(isBlackhole);
            return this;
        }
        public Builder isConflict(Boolean isConflict) {
            this.isConflict = Objects.requireNonNull(isConflict);
            return this;
        }
        public Builder nextHopDrgAttachmentId(String nextHopDrgAttachmentId) {
            this.nextHopDrgAttachmentId = Objects.requireNonNull(nextHopDrgAttachmentId);
            return this;
        }
        public Builder routeProvenance(String routeProvenance) {
            this.routeProvenance = Objects.requireNonNull(routeProvenance);
            return this;
        }
        public Builder routeType(String routeType) {
            this.routeType = Objects.requireNonNull(routeType);
            return this;
        }        public GetDrgRouteTableRouteRulesDrgRouteRule build() {
            return new GetDrgRouteTableRouteRulesDrgRouteRule(attributes, destination, destinationType, id, isBlackhole, isConflict, nextHopDrgAttachmentId, routeProvenance, routeType);
        }
    }
}
