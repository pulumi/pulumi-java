// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class QueryQueryDefinitionReportQueryForecast {
    /**
     * @return (Updatable) BASIC uses the exponential smoothing (ETS) model to project future usage/costs based on history data. The basis for projections is a periodic set of equivalent historical days for which the projection is being made.
     * 
     */
    private final @Nullable String forecastType;
    /**
     * @return (Updatable) The forecast end time.
     * 
     */
    private final String timeForecastEnded;
    /**
     * @return (Updatable) The forecast start time. Defaults to UTC-1 if not specified.
     * 
     */
    private final @Nullable String timeForecastStarted;

    @CustomType.Constructor
    private QueryQueryDefinitionReportQueryForecast(
        @CustomType.Parameter("forecastType") @Nullable String forecastType,
        @CustomType.Parameter("timeForecastEnded") String timeForecastEnded,
        @CustomType.Parameter("timeForecastStarted") @Nullable String timeForecastStarted) {
        this.forecastType = forecastType;
        this.timeForecastEnded = timeForecastEnded;
        this.timeForecastStarted = timeForecastStarted;
    }

    /**
     * @return (Updatable) BASIC uses the exponential smoothing (ETS) model to project future usage/costs based on history data. The basis for projections is a periodic set of equivalent historical days for which the projection is being made.
     * 
     */
    public Optional<String> forecastType() {
        return Optional.ofNullable(this.forecastType);
    }
    /**
     * @return (Updatable) The forecast end time.
     * 
     */
    public String timeForecastEnded() {
        return this.timeForecastEnded;
    }
    /**
     * @return (Updatable) The forecast start time. Defaults to UTC-1 if not specified.
     * 
     */
    public Optional<String> timeForecastStarted() {
        return Optional.ofNullable(this.timeForecastStarted);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueryQueryDefinitionReportQueryForecast defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String forecastType;
        private String timeForecastEnded;
        private @Nullable String timeForecastStarted;

        public Builder() {
    	      // Empty
        }

        public Builder(QueryQueryDefinitionReportQueryForecast defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.forecastType = defaults.forecastType;
    	      this.timeForecastEnded = defaults.timeForecastEnded;
    	      this.timeForecastStarted = defaults.timeForecastStarted;
        }

        public Builder forecastType(@Nullable String forecastType) {
            this.forecastType = forecastType;
            return this;
        }
        public Builder timeForecastEnded(String timeForecastEnded) {
            this.timeForecastEnded = Objects.requireNonNull(timeForecastEnded);
            return this;
        }
        public Builder timeForecastStarted(@Nullable String timeForecastStarted) {
            this.timeForecastStarted = timeForecastStarted;
            return this;
        }        public QueryQueryDefinitionReportQueryForecast build() {
            return new QueryQueryDefinitionReportQueryForecast(forecastType, timeForecastEnded, timeForecastStarted);
        }
    }
}
