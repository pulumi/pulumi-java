// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseWalletState extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseWalletState Empty = new AutonomousDatabaseWalletState();

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="autonomousDatabaseId")
    private @Nullable Output<String> autonomousDatabaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> autonomousDatabaseId() {
        return Optional.ofNullable(this.autonomousDatabaseId);
    }

    @Import(name="base64EncodeContent")
    private @Nullable Output<Boolean> base64EncodeContent;

    public Optional<Output<Boolean>> base64EncodeContent() {
        return Optional.ofNullable(this.base64EncodeContent);
    }

    /**
     * content of the downloaded zipped wallet for the Autonomous Database. If `base64_encode_content` is set to `true`, then this content will be base64 encoded.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return content of the downloaded zipped wallet for the Autonomous Database. If `base64_encode_content` is set to `true`, then this content will be base64 encoded.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The type of wallet to generate.
     * 
     */
    @Import(name="generateType")
    private @Nullable Output<String> generateType;

    /**
     * @return The type of wallet to generate.
     * 
     */
    public Optional<Output<String>> generateType() {
        return Optional.ofNullable(this.generateType);
    }

    /**
     * The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    private AutonomousDatabaseWalletState() {}

    private AutonomousDatabaseWalletState(AutonomousDatabaseWalletState $) {
        this.autonomousDatabaseId = $.autonomousDatabaseId;
        this.base64EncodeContent = $.base64EncodeContent;
        this.content = $.content;
        this.generateType = $.generateType;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseWalletState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseWalletState $;

        public Builder() {
            $ = new AutonomousDatabaseWalletState();
        }

        public Builder(AutonomousDatabaseWalletState defaults) {
            $ = new AutonomousDatabaseWalletState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autonomousDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(@Nullable Output<String> autonomousDatabaseId) {
            $.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }

        /**
         * @param autonomousDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            return autonomousDatabaseId(Output.of(autonomousDatabaseId));
        }

        public Builder base64EncodeContent(@Nullable Output<Boolean> base64EncodeContent) {
            $.base64EncodeContent = base64EncodeContent;
            return this;
        }

        public Builder base64EncodeContent(Boolean base64EncodeContent) {
            return base64EncodeContent(Output.of(base64EncodeContent));
        }

        /**
         * @param content content of the downloaded zipped wallet for the Autonomous Database. If `base64_encode_content` is set to `true`, then this content will be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content content of the downloaded zipped wallet for the Autonomous Database. If `base64_encode_content` is set to `true`, then this content will be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param generateType The type of wallet to generate.
         * 
         * @return builder
         * 
         */
        public Builder generateType(@Nullable Output<String> generateType) {
            $.generateType = generateType;
            return this;
        }

        /**
         * @param generateType The type of wallet to generate.
         * 
         * @return builder
         * 
         */
        public Builder generateType(String generateType) {
            return generateType(Output.of(generateType));
        }

        /**
         * @param password The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public AutonomousDatabaseWalletState build() {
            return $;
        }
    }

}
