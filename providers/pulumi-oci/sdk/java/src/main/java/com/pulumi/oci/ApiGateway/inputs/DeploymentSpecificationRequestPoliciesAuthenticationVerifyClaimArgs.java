// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs Empty = new DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs();

    /**
     * (Updatable) Whether the claim is required to be present in the JWT or not. If set to &#34;false&#34;, the claim values will be matched only if the claim is present in the JWT.
     * 
     */
    @Import(name="isRequired")
    private @Nullable Output<Boolean> isRequired;

    /**
     * @return (Updatable) Whether the claim is required to be present in the JWT or not. If set to &#34;false&#34;, the claim values will be matched only if the claim is present in the JWT.
     * 
     */
    public Optional<Output<Boolean>> isRequired() {
        return Optional.ofNullable(this.isRequired);
    }

    /**
     * (Updatable) Name of the claim.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) Name of the claim.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs() {}

    private DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs $) {
        this.isRequired = $.isRequired;
        this.key = $.key;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs();
        }

        public Builder(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs defaults) {
            $ = new DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isRequired (Updatable) Whether the claim is required to be present in the JWT or not. If set to &#34;false&#34;, the claim values will be matched only if the claim is present in the JWT.
         * 
         * @return builder
         * 
         */
        public Builder isRequired(@Nullable Output<Boolean> isRequired) {
            $.isRequired = isRequired;
            return this;
        }

        /**
         * @param isRequired (Updatable) Whether the claim is required to be present in the JWT or not. If set to &#34;false&#34;, the claim values will be matched only if the claim is present in the JWT.
         * 
         * @return builder
         * 
         */
        public Builder isRequired(Boolean isRequired) {
            return isRequired(Output.of(isRequired));
        }

        /**
         * @param key (Updatable) Name of the claim.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) Name of the claim.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param values (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs build() {
            return $;
        }
    }

}
