// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Marketplace.inputs.GetPublicationPackagesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPublicationPackagesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPublicationPackagesArgs Empty = new GetPublicationPackagesArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetPublicationPackagesFilterArgs>> filters;

    public Optional<Output<List<GetPublicationPackagesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only packages that match the given package type exactly.
     * 
     */
    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    /**
     * @return A filter to return only packages that match the given package type exactly.
     * 
     */
    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * The version of the package. Package versions are unique within a listing.
     * 
     */
    @Import(name="packageVersion")
    private @Nullable Output<String> packageVersion;

    /**
     * @return The version of the package. Package versions are unique within a listing.
     * 
     */
    public Optional<Output<String>> packageVersion() {
        return Optional.ofNullable(this.packageVersion);
    }

    /**
     * The unique identifier for the publication.
     * 
     */
    @Import(name="publicationId", required=true)
    private Output<String> publicationId;

    /**
     * @return The unique identifier for the publication.
     * 
     */
    public Output<String> publicationId() {
        return this.publicationId;
    }

    private GetPublicationPackagesArgs() {}

    private GetPublicationPackagesArgs(GetPublicationPackagesArgs $) {
        this.filters = $.filters;
        this.packageType = $.packageType;
        this.packageVersion = $.packageVersion;
        this.publicationId = $.publicationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPublicationPackagesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPublicationPackagesArgs $;

        public Builder() {
            $ = new GetPublicationPackagesArgs();
        }

        public Builder(GetPublicationPackagesArgs defaults) {
            $ = new GetPublicationPackagesArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetPublicationPackagesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetPublicationPackagesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetPublicationPackagesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param packageType A filter to return only packages that match the given package type exactly.
         * 
         * @return builder
         * 
         */
        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType A filter to return only packages that match the given package type exactly.
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param packageVersion The version of the package. Package versions are unique within a listing.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(@Nullable Output<String> packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        /**
         * @param packageVersion The version of the package. Package versions are unique within a listing.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(String packageVersion) {
            return packageVersion(Output.of(packageVersion));
        }

        /**
         * @param publicationId The unique identifier for the publication.
         * 
         * @return builder
         * 
         */
        public Builder publicationId(Output<String> publicationId) {
            $.publicationId = publicationId;
            return this;
        }

        /**
         * @param publicationId The unique identifier for the publication.
         * 
         * @return builder
         * 
         */
        public Builder publicationId(String publicationId) {
            return publicationId(Output.of(publicationId));
        }

        public GetPublicationPackagesArgs build() {
            $.publicationId = Objects.requireNonNull($.publicationId, "expected parameter 'publicationId' to be non-null");
            return $;
        }
    }

}
