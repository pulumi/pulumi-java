// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataCatalog.outputs.GetCatalogTypesFilter;
import com.pulumi.oci.DataCatalog.outputs.GetCatalogTypesTypeCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCatalogTypesResult {
    /**
     * @return The data catalog&#39;s OCID.
     * 
     */
    private final String catalogId;
    /**
     * @return Mapping type equivalence in the external system.
     * 
     */
    private final @Nullable String externalTypeName;
    private final @Nullable List<String> fields;
    private final @Nullable List<GetCatalogTypesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Indicates whether the type is approved for use as a classifying object.
     * 
     */
    private final @Nullable String isApproved;
    /**
     * @return Indicates whether the type is internal, making it unavailable for use by metadata elements.
     * 
     */
    private final @Nullable String isInternal;
    /**
     * @return Indicates whether the type can be used for tagging metadata elements.
     * 
     */
    private final @Nullable String isTag;
    /**
     * @return The immutable name of the type.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The current state of the type.
     * 
     */
    private final @Nullable String state;
    /**
     * @return Indicates the category this type belongs to. For instance, data assets, connections.
     * 
     */
    private final @Nullable String typeCategory;
    /**
     * @return The list of type_collection.
     * 
     */
    private final List<GetCatalogTypesTypeCollection> typeCollections;

    @CustomType.Constructor
    private GetCatalogTypesResult(
        @CustomType.Parameter("catalogId") String catalogId,
        @CustomType.Parameter("externalTypeName") @Nullable String externalTypeName,
        @CustomType.Parameter("fields") @Nullable List<String> fields,
        @CustomType.Parameter("filters") @Nullable List<GetCatalogTypesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isApproved") @Nullable String isApproved,
        @CustomType.Parameter("isInternal") @Nullable String isInternal,
        @CustomType.Parameter("isTag") @Nullable String isTag,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("typeCategory") @Nullable String typeCategory,
        @CustomType.Parameter("typeCollections") List<GetCatalogTypesTypeCollection> typeCollections) {
        this.catalogId = catalogId;
        this.externalTypeName = externalTypeName;
        this.fields = fields;
        this.filters = filters;
        this.id = id;
        this.isApproved = isApproved;
        this.isInternal = isInternal;
        this.isTag = isTag;
        this.name = name;
        this.state = state;
        this.typeCategory = typeCategory;
        this.typeCollections = typeCollections;
    }

    /**
     * @return The data catalog&#39;s OCID.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return Mapping type equivalence in the external system.
     * 
     */
    public Optional<String> externalTypeName() {
        return Optional.ofNullable(this.externalTypeName);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public List<GetCatalogTypesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the type is approved for use as a classifying object.
     * 
     */
    public Optional<String> isApproved() {
        return Optional.ofNullable(this.isApproved);
    }
    /**
     * @return Indicates whether the type is internal, making it unavailable for use by metadata elements.
     * 
     */
    public Optional<String> isInternal() {
        return Optional.ofNullable(this.isInternal);
    }
    /**
     * @return Indicates whether the type can be used for tagging metadata elements.
     * 
     */
    public Optional<String> isTag() {
        return Optional.ofNullable(this.isTag);
    }
    /**
     * @return The immutable name of the type.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The current state of the type.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Indicates the category this type belongs to. For instance, data assets, connections.
     * 
     */
    public Optional<String> typeCategory() {
        return Optional.ofNullable(this.typeCategory);
    }
    /**
     * @return The list of type_collection.
     * 
     */
    public List<GetCatalogTypesTypeCollection> typeCollections() {
        return this.typeCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogTypesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String catalogId;
        private @Nullable String externalTypeName;
        private @Nullable List<String> fields;
        private @Nullable List<GetCatalogTypesFilter> filters;
        private String id;
        private @Nullable String isApproved;
        private @Nullable String isInternal;
        private @Nullable String isTag;
        private @Nullable String name;
        private @Nullable String state;
        private @Nullable String typeCategory;
        private List<GetCatalogTypesTypeCollection> typeCollections;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCatalogTypesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.externalTypeName = defaults.externalTypeName;
    	      this.fields = defaults.fields;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isApproved = defaults.isApproved;
    	      this.isInternal = defaults.isInternal;
    	      this.isTag = defaults.isTag;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.typeCategory = defaults.typeCategory;
    	      this.typeCollections = defaults.typeCollections;
        }

        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        public Builder externalTypeName(@Nullable String externalTypeName) {
            this.externalTypeName = externalTypeName;
            return this;
        }
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        public Builder filters(@Nullable List<GetCatalogTypesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetCatalogTypesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isApproved(@Nullable String isApproved) {
            this.isApproved = isApproved;
            return this;
        }
        public Builder isInternal(@Nullable String isInternal) {
            this.isInternal = isInternal;
            return this;
        }
        public Builder isTag(@Nullable String isTag) {
            this.isTag = isTag;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder typeCategory(@Nullable String typeCategory) {
            this.typeCategory = typeCategory;
            return this;
        }
        public Builder typeCollections(List<GetCatalogTypesTypeCollection> typeCollections) {
            this.typeCollections = Objects.requireNonNull(typeCollections);
            return this;
        }
        public Builder typeCollections(GetCatalogTypesTypeCollection... typeCollections) {
            return typeCollections(List.of(typeCollections));
        }        public GetCatalogTypesResult build() {
            return new GetCatalogTypesResult(catalogId, externalTypeName, fields, filters, id, isApproved, isInternal, isTag, name, state, typeCategory, typeCollections);
        }
    }
}
