// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.DrgAttachmentsListDrgAllAttachmentArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DrgAttachmentsListState extends com.pulumi.resources.ResourceArgs {

    public static final DrgAttachmentsListState Empty = new DrgAttachmentsListState();

    /**
     * The type for the network resource attached to the DRG.
     * 
     */
    @Import(name="attachmentType")
    private @Nullable Output<String> attachmentType;

    /**
     * @return The type for the network resource attached to the DRG.
     * 
     */
    public Optional<Output<String>> attachmentType() {
        return Optional.ofNullable(this.attachmentType);
    }

    /**
     * The list of drg_attachments.
     * 
     */
    @Import(name="drgAllAttachments")
    private @Nullable Output<List<DrgAttachmentsListDrgAllAttachmentArgs>> drgAllAttachments;

    /**
     * @return The list of drg_attachments.
     * 
     */
    public Optional<Output<List<DrgAttachmentsListDrgAllAttachmentArgs>>> drgAllAttachments() {
        return Optional.ofNullable(this.drgAllAttachments);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
     * 
     */
    @Import(name="drgId")
    private @Nullable Output<String> drgId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
     * 
     */
    public Optional<Output<String>> drgId() {
        return Optional.ofNullable(this.drgId);
    }

    /**
     * Whether the DRG attachment lives in a different tenancy than the DRG.
     * 
     */
    @Import(name="isCrossTenancy")
    private @Nullable Output<Boolean> isCrossTenancy;

    /**
     * @return Whether the DRG attachment lives in a different tenancy than the DRG.
     * 
     */
    public Optional<Output<Boolean>> isCrossTenancy() {
        return Optional.ofNullable(this.isCrossTenancy);
    }

    private DrgAttachmentsListState() {}

    private DrgAttachmentsListState(DrgAttachmentsListState $) {
        this.attachmentType = $.attachmentType;
        this.drgAllAttachments = $.drgAllAttachments;
        this.drgId = $.drgId;
        this.isCrossTenancy = $.isCrossTenancy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DrgAttachmentsListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DrgAttachmentsListState $;

        public Builder() {
            $ = new DrgAttachmentsListState();
        }

        public Builder(DrgAttachmentsListState defaults) {
            $ = new DrgAttachmentsListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachmentType The type for the network resource attached to the DRG.
         * 
         * @return builder
         * 
         */
        public Builder attachmentType(@Nullable Output<String> attachmentType) {
            $.attachmentType = attachmentType;
            return this;
        }

        /**
         * @param attachmentType The type for the network resource attached to the DRG.
         * 
         * @return builder
         * 
         */
        public Builder attachmentType(String attachmentType) {
            return attachmentType(Output.of(attachmentType));
        }

        /**
         * @param drgAllAttachments The list of drg_attachments.
         * 
         * @return builder
         * 
         */
        public Builder drgAllAttachments(@Nullable Output<List<DrgAttachmentsListDrgAllAttachmentArgs>> drgAllAttachments) {
            $.drgAllAttachments = drgAllAttachments;
            return this;
        }

        /**
         * @param drgAllAttachments The list of drg_attachments.
         * 
         * @return builder
         * 
         */
        public Builder drgAllAttachments(List<DrgAttachmentsListDrgAllAttachmentArgs> drgAllAttachments) {
            return drgAllAttachments(Output.of(drgAllAttachments));
        }

        /**
         * @param drgAllAttachments The list of drg_attachments.
         * 
         * @return builder
         * 
         */
        public Builder drgAllAttachments(DrgAttachmentsListDrgAllAttachmentArgs... drgAllAttachments) {
            return drgAllAttachments(List.of(drgAllAttachments));
        }

        /**
         * @param drgId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
         * 
         * @return builder
         * 
         */
        public Builder drgId(@Nullable Output<String> drgId) {
            $.drgId = drgId;
            return this;
        }

        /**
         * @param drgId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
         * 
         * @return builder
         * 
         */
        public Builder drgId(String drgId) {
            return drgId(Output.of(drgId));
        }

        /**
         * @param isCrossTenancy Whether the DRG attachment lives in a different tenancy than the DRG.
         * 
         * @return builder
         * 
         */
        public Builder isCrossTenancy(@Nullable Output<Boolean> isCrossTenancy) {
            $.isCrossTenancy = isCrossTenancy;
            return this;
        }

        /**
         * @param isCrossTenancy Whether the DRG attachment lives in a different tenancy than the DRG.
         * 
         * @return builder
         * 
         */
        public Builder isCrossTenancy(Boolean isCrossTenancy) {
            return isCrossTenancy(Output.of(isCrossTenancy));
        }

        public DrgAttachmentsListState build() {
            return $;
        }
    }

}
