// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataCatalog.inputs.GetCatalogTypesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetCatalogTypesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCatalogTypesArgs Empty = new GetCatalogTypesArgs();

    /**
     * Unique catalog identifier.
     * 
     */
    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    /**
     * @return Unique catalog identifier.
     * 
     */
    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * Data type as defined in an external system.
     * 
     */
    @Import(name="externalTypeName")
    private Output</* @Nullable */ String> externalTypeName;

    /**
     * @return Data type as defined in an external system.
     * 
     */
    public Output</* @Nullable */ String> externalTypeName() {
        return this.externalTypeName;
    }

    /**
     * Specifies the fields to return in a type summary response.
     * 
     */
    @Import(name="fields")
    private Output</* @Nullable */ List<String>> fields;

    /**
     * @return Specifies the fields to return in a type summary response.
     * 
     */
    public Output</* @Nullable */ List<String>> fields() {
        return this.fields;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetCatalogTypesFilter>> filters;

    public Output</* @Nullable */ List<GetCatalogTypesFilter>> filters() {
        return this.filters;
    }

    /**
     * Indicates whether the type is approved for use as a classifying object.
     * 
     */
    @Import(name="isApproved")
    private Output</* @Nullable */ String> isApproved;

    /**
     * @return Indicates whether the type is approved for use as a classifying object.
     * 
     */
    public Output</* @Nullable */ String> isApproved() {
        return this.isApproved;
    }

    /**
     * Indicates whether the type is internal, making it unavailable for use by metadata elements.
     * 
     */
    @Import(name="isInternal")
    private Output</* @Nullable */ String> isInternal;

    /**
     * @return Indicates whether the type is internal, making it unavailable for use by metadata elements.
     * 
     */
    public Output</* @Nullable */ String> isInternal() {
        return this.isInternal;
    }

    /**
     * Indicates whether the type can be used for tagging metadata elements.
     * 
     */
    @Import(name="isTag")
    private Output</* @Nullable */ String> isTag;

    /**
     * @return Indicates whether the type can be used for tagging metadata elements.
     * 
     */
    public Output</* @Nullable */ String> isTag() {
        return this.isTag;
    }

    /**
     * Immutable resource name.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return Immutable resource name.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    /**
     * Indicates the category of this type . For example, data assets or connections.
     * 
     */
    @Import(name="typeCategory")
    private Output</* @Nullable */ String> typeCategory;

    /**
     * @return Indicates the category of this type . For example, data assets or connections.
     * 
     */
    public Output</* @Nullable */ String> typeCategory() {
        return this.typeCategory;
    }

    private GetCatalogTypesArgs() {}

    private GetCatalogTypesArgs(GetCatalogTypesArgs $) {
        this.catalogId = $.catalogId;
        this.externalTypeName = $.externalTypeName;
        this.fields = $.fields;
        this.filters = $.filters;
        this.isApproved = $.isApproved;
        this.isInternal = $.isInternal;
        this.isTag = $.isTag;
        this.name = $.name;
        this.state = $.state;
        this.typeCategory = $.typeCategory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogTypesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogTypesArgs $;

        public Builder() {
            $ = new GetCatalogTypesArgs();
        }

        public Builder(GetCatalogTypesArgs defaults) {
            $ = new GetCatalogTypesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param externalTypeName Data type as defined in an external system.
         * 
         * @return builder
         * 
         */
        public Builder externalTypeName(Output</* @Nullable */ String> externalTypeName) {
            $.externalTypeName = externalTypeName;
            return this;
        }

        /**
         * @param externalTypeName Data type as defined in an external system.
         * 
         * @return builder
         * 
         */
        public Builder externalTypeName(@Nullable String externalTypeName) {
            return externalTypeName(Output.of(externalTypeName));
        }

        /**
         * @param fields Specifies the fields to return in a type summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(Output</* @Nullable */ List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to return in a type summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Specifies the fields to return in a type summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(Output</* @Nullable */ List<GetCatalogTypesFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetCatalogTypesFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetCatalogTypesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isApproved Indicates whether the type is approved for use as a classifying object.
         * 
         * @return builder
         * 
         */
        public Builder isApproved(Output</* @Nullable */ String> isApproved) {
            $.isApproved = isApproved;
            return this;
        }

        /**
         * @param isApproved Indicates whether the type is approved for use as a classifying object.
         * 
         * @return builder
         * 
         */
        public Builder isApproved(@Nullable String isApproved) {
            return isApproved(Output.of(isApproved));
        }

        /**
         * @param isInternal Indicates whether the type is internal, making it unavailable for use by metadata elements.
         * 
         * @return builder
         * 
         */
        public Builder isInternal(Output</* @Nullable */ String> isInternal) {
            $.isInternal = isInternal;
            return this;
        }

        /**
         * @param isInternal Indicates whether the type is internal, making it unavailable for use by metadata elements.
         * 
         * @return builder
         * 
         */
        public Builder isInternal(@Nullable String isInternal) {
            return isInternal(Output.of(isInternal));
        }

        /**
         * @param isTag Indicates whether the type can be used for tagging metadata elements.
         * 
         * @return builder
         * 
         */
        public Builder isTag(Output</* @Nullable */ String> isTag) {
            $.isTag = isTag;
            return this;
        }

        /**
         * @param isTag Indicates whether the type can be used for tagging metadata elements.
         * 
         * @return builder
         * 
         */
        public Builder isTag(@Nullable String isTag) {
            return isTag(Output.of(isTag));
        }

        /**
         * @param name Immutable resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param state A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        /**
         * @param typeCategory Indicates the category of this type . For example, data assets or connections.
         * 
         * @return builder
         * 
         */
        public Builder typeCategory(Output</* @Nullable */ String> typeCategory) {
            $.typeCategory = typeCategory;
            return this;
        }

        /**
         * @param typeCategory Indicates the category of this type . For example, data assets or connections.
         * 
         * @return builder
         * 
         */
        public Builder typeCategory(@Nullable String typeCategory) {
            return typeCategory(Output.of(typeCategory));
        }

        public GetCatalogTypesArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            return $;
        }
    }

}
