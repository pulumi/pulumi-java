// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetUsersUserCapability {
    /**
     * @return Indicates if the user can use API keys.
     * 
     */
    private final Boolean canUseApiKeys;
    /**
     * @return Indicates if the user can use SWIFT passwords / auth tokens.
     * 
     */
    private final Boolean canUseAuthTokens;
    /**
     * @return Indicates if the user can log in to the console.
     * 
     */
    private final Boolean canUseConsolePassword;
    /**
     * @return Indicates if the user can use SigV4 symmetric keys.
     * 
     */
    private final Boolean canUseCustomerSecretKeys;
    /**
     * @return Indicates if the user can use DB passwords.
     * 
     */
    private final Boolean canUseDbCredentials;
    /**
     * @return Indicates if the user can use OAuth2 credentials and tokens.
     * 
     */
    private final Boolean canUseOauth2clientCredentials;
    /**
     * @return Indicates if the user can use SMTP passwords.
     * 
     */
    private final Boolean canUseSmtpCredentials;

    @CustomType.Constructor
    private GetUsersUserCapability(
        @CustomType.Parameter("canUseApiKeys") Boolean canUseApiKeys,
        @CustomType.Parameter("canUseAuthTokens") Boolean canUseAuthTokens,
        @CustomType.Parameter("canUseConsolePassword") Boolean canUseConsolePassword,
        @CustomType.Parameter("canUseCustomerSecretKeys") Boolean canUseCustomerSecretKeys,
        @CustomType.Parameter("canUseDbCredentials") Boolean canUseDbCredentials,
        @CustomType.Parameter("canUseOauth2clientCredentials") Boolean canUseOauth2clientCredentials,
        @CustomType.Parameter("canUseSmtpCredentials") Boolean canUseSmtpCredentials) {
        this.canUseApiKeys = canUseApiKeys;
        this.canUseAuthTokens = canUseAuthTokens;
        this.canUseConsolePassword = canUseConsolePassword;
        this.canUseCustomerSecretKeys = canUseCustomerSecretKeys;
        this.canUseDbCredentials = canUseDbCredentials;
        this.canUseOauth2clientCredentials = canUseOauth2clientCredentials;
        this.canUseSmtpCredentials = canUseSmtpCredentials;
    }

    /**
     * @return Indicates if the user can use API keys.
     * 
     */
    public Boolean canUseApiKeys() {
        return this.canUseApiKeys;
    }
    /**
     * @return Indicates if the user can use SWIFT passwords / auth tokens.
     * 
     */
    public Boolean canUseAuthTokens() {
        return this.canUseAuthTokens;
    }
    /**
     * @return Indicates if the user can log in to the console.
     * 
     */
    public Boolean canUseConsolePassword() {
        return this.canUseConsolePassword;
    }
    /**
     * @return Indicates if the user can use SigV4 symmetric keys.
     * 
     */
    public Boolean canUseCustomerSecretKeys() {
        return this.canUseCustomerSecretKeys;
    }
    /**
     * @return Indicates if the user can use DB passwords.
     * 
     */
    public Boolean canUseDbCredentials() {
        return this.canUseDbCredentials;
    }
    /**
     * @return Indicates if the user can use OAuth2 credentials and tokens.
     * 
     */
    public Boolean canUseOauth2clientCredentials() {
        return this.canUseOauth2clientCredentials;
    }
    /**
     * @return Indicates if the user can use SMTP passwords.
     * 
     */
    public Boolean canUseSmtpCredentials() {
        return this.canUseSmtpCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUserCapability defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean canUseApiKeys;
        private Boolean canUseAuthTokens;
        private Boolean canUseConsolePassword;
        private Boolean canUseCustomerSecretKeys;
        private Boolean canUseDbCredentials;
        private Boolean canUseOauth2clientCredentials;
        private Boolean canUseSmtpCredentials;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersUserCapability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canUseApiKeys = defaults.canUseApiKeys;
    	      this.canUseAuthTokens = defaults.canUseAuthTokens;
    	      this.canUseConsolePassword = defaults.canUseConsolePassword;
    	      this.canUseCustomerSecretKeys = defaults.canUseCustomerSecretKeys;
    	      this.canUseDbCredentials = defaults.canUseDbCredentials;
    	      this.canUseOauth2clientCredentials = defaults.canUseOauth2clientCredentials;
    	      this.canUseSmtpCredentials = defaults.canUseSmtpCredentials;
        }

        public Builder canUseApiKeys(Boolean canUseApiKeys) {
            this.canUseApiKeys = Objects.requireNonNull(canUseApiKeys);
            return this;
        }
        public Builder canUseAuthTokens(Boolean canUseAuthTokens) {
            this.canUseAuthTokens = Objects.requireNonNull(canUseAuthTokens);
            return this;
        }
        public Builder canUseConsolePassword(Boolean canUseConsolePassword) {
            this.canUseConsolePassword = Objects.requireNonNull(canUseConsolePassword);
            return this;
        }
        public Builder canUseCustomerSecretKeys(Boolean canUseCustomerSecretKeys) {
            this.canUseCustomerSecretKeys = Objects.requireNonNull(canUseCustomerSecretKeys);
            return this;
        }
        public Builder canUseDbCredentials(Boolean canUseDbCredentials) {
            this.canUseDbCredentials = Objects.requireNonNull(canUseDbCredentials);
            return this;
        }
        public Builder canUseOauth2clientCredentials(Boolean canUseOauth2clientCredentials) {
            this.canUseOauth2clientCredentials = Objects.requireNonNull(canUseOauth2clientCredentials);
            return this;
        }
        public Builder canUseSmtpCredentials(Boolean canUseSmtpCredentials) {
            this.canUseSmtpCredentials = Objects.requireNonNull(canUseSmtpCredentials);
            return this;
        }        public GetUsersUserCapability build() {
            return new GetUsersUserCapability(canUseApiKeys, canUseAuthTokens, canUseConsolePassword, canUseCustomerSecretKeys, canUseDbCredentials, canUseOauth2clientCredentials, canUseSmtpCredentials);
        }
    }
}
