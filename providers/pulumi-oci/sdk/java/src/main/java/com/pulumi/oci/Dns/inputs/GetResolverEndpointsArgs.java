// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dns.inputs.GetResolverEndpointsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetResolverEndpointsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResolverEndpointsArgs Empty = new GetResolverEndpointsArgs();

    @Import(name="filters")
    private Output</* @Nullable */ List<GetResolverEndpointsFilter>> filters;

    public Output</* @Nullable */ List<GetResolverEndpointsFilter>> filters() {
        return this.filters;
    }

    /**
     * The name of a resource.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return The name of a resource.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * The OCID of the target resolver.
     * 
     */
    @Import(name="resolverId", required=true)
    private Output<String> resolverId;

    /**
     * @return The OCID of the target resolver.
     * 
     */
    public Output<String> resolverId() {
        return this.resolverId;
    }

    /**
     * Value must be `PRIVATE` when listing private name resolver endpoints.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Value must be `PRIVATE` when listing private name resolver endpoints.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The state of a resource.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return The state of a resource.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetResolverEndpointsArgs() {}

    private GetResolverEndpointsArgs(GetResolverEndpointsArgs $) {
        this.filters = $.filters;
        this.name = $.name;
        this.resolverId = $.resolverId;
        this.scope = $.scope;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResolverEndpointsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResolverEndpointsArgs $;

        public Builder() {
            $ = new GetResolverEndpointsArgs();
        }

        public Builder(GetResolverEndpointsArgs defaults) {
            $ = new GetResolverEndpointsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(Output</* @Nullable */ List<GetResolverEndpointsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetResolverEndpointsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetResolverEndpointsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name The name of a resource.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of a resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param resolverId The OCID of the target resolver.
         * 
         * @return builder
         * 
         */
        public Builder resolverId(Output<String> resolverId) {
            $.resolverId = resolverId;
            return this;
        }

        /**
         * @param resolverId The OCID of the target resolver.
         * 
         * @return builder
         * 
         */
        public Builder resolverId(String resolverId) {
            return resolverId(Output.of(resolverId));
        }

        /**
         * @param scope Value must be `PRIVATE` when listing private name resolver endpoints.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Value must be `PRIVATE` when listing private name resolver endpoints.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param state The state of a resource.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of a resource.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetResolverEndpointsArgs build() {
            $.resolverId = Objects.requireNonNull($.resolverId, "expected parameter 'resolverId' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
