// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationDatapumpSettingsDataPumpParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationDatapumpSettingsDataPumpParametersArgs Empty = new MigrationDatapumpSettingsDataPumpParametersArgs();

    /**
     * (Updatable) Estimate size of dumps that will be generated.
     * 
     */
    @Import(name="estimate")
    private @Nullable Output<String> estimate;

    /**
     * @return (Updatable) Estimate size of dumps that will be generated.
     * 
     */
    public Optional<Output<String>> estimate() {
        return Optional.ofNullable(this.estimate);
    }

    /**
     * (Updatable) Exclude paratemers for Export and Import.
     * 
     */
    @Import(name="excludeParameters")
    private @Nullable Output<List<String>> excludeParameters;

    /**
     * @return (Updatable) Exclude paratemers for Export and Import.
     * 
     */
    public Optional<Output<List<String>>> excludeParameters() {
        return Optional.ofNullable(this.excludeParameters);
    }

    /**
     * (Updatable) Maximum number of worker processes that can be used for a Data Pump Export job.
     * 
     */
    @Import(name="exportParallelismDegree")
    private @Nullable Output<Integer> exportParallelismDegree;

    /**
     * @return (Updatable) Maximum number of worker processes that can be used for a Data Pump Export job.
     * 
     */
    public Optional<Output<Integer>> exportParallelismDegree() {
        return Optional.ofNullable(this.exportParallelismDegree);
    }

    /**
     * (Updatable) Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
     * 
     */
    @Import(name="importParallelismDegree")
    private @Nullable Output<Integer> importParallelismDegree;

    /**
     * @return (Updatable) Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
     * 
     */
    public Optional<Output<Integer>> importParallelismDegree() {
        return Optional.ofNullable(this.importParallelismDegree);
    }

    /**
     * (Updatable) Set to false to force Data Pump worker process to run on one instance.
     * 
     */
    @Import(name="isCluster")
    private @Nullable Output<Boolean> isCluster;

    /**
     * @return (Updatable) Set to false to force Data Pump worker process to run on one instance.
     * 
     */
    public Optional<Output<Boolean>> isCluster() {
        return Optional.ofNullable(this.isCluster);
    }

    /**
     * (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
     * 
     */
    @Import(name="tableExistsAction")
    private @Nullable Output<String> tableExistsAction;

    /**
     * @return (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
     * 
     */
    public Optional<Output<String>> tableExistsAction() {
        return Optional.ofNullable(this.tableExistsAction);
    }

    private MigrationDatapumpSettingsDataPumpParametersArgs() {}

    private MigrationDatapumpSettingsDataPumpParametersArgs(MigrationDatapumpSettingsDataPumpParametersArgs $) {
        this.estimate = $.estimate;
        this.excludeParameters = $.excludeParameters;
        this.exportParallelismDegree = $.exportParallelismDegree;
        this.importParallelismDegree = $.importParallelismDegree;
        this.isCluster = $.isCluster;
        this.tableExistsAction = $.tableExistsAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationDatapumpSettingsDataPumpParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationDatapumpSettingsDataPumpParametersArgs $;

        public Builder() {
            $ = new MigrationDatapumpSettingsDataPumpParametersArgs();
        }

        public Builder(MigrationDatapumpSettingsDataPumpParametersArgs defaults) {
            $ = new MigrationDatapumpSettingsDataPumpParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param estimate (Updatable) Estimate size of dumps that will be generated.
         * 
         * @return builder
         * 
         */
        public Builder estimate(@Nullable Output<String> estimate) {
            $.estimate = estimate;
            return this;
        }

        /**
         * @param estimate (Updatable) Estimate size of dumps that will be generated.
         * 
         * @return builder
         * 
         */
        public Builder estimate(String estimate) {
            return estimate(Output.of(estimate));
        }

        /**
         * @param excludeParameters (Updatable) Exclude paratemers for Export and Import.
         * 
         * @return builder
         * 
         */
        public Builder excludeParameters(@Nullable Output<List<String>> excludeParameters) {
            $.excludeParameters = excludeParameters;
            return this;
        }

        /**
         * @param excludeParameters (Updatable) Exclude paratemers for Export and Import.
         * 
         * @return builder
         * 
         */
        public Builder excludeParameters(List<String> excludeParameters) {
            return excludeParameters(Output.of(excludeParameters));
        }

        /**
         * @param excludeParameters (Updatable) Exclude paratemers for Export and Import.
         * 
         * @return builder
         * 
         */
        public Builder excludeParameters(String... excludeParameters) {
            return excludeParameters(List.of(excludeParameters));
        }

        /**
         * @param exportParallelismDegree (Updatable) Maximum number of worker processes that can be used for a Data Pump Export job.
         * 
         * @return builder
         * 
         */
        public Builder exportParallelismDegree(@Nullable Output<Integer> exportParallelismDegree) {
            $.exportParallelismDegree = exportParallelismDegree;
            return this;
        }

        /**
         * @param exportParallelismDegree (Updatable) Maximum number of worker processes that can be used for a Data Pump Export job.
         * 
         * @return builder
         * 
         */
        public Builder exportParallelismDegree(Integer exportParallelismDegree) {
            return exportParallelismDegree(Output.of(exportParallelismDegree));
        }

        /**
         * @param importParallelismDegree (Updatable) Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
         * 
         * @return builder
         * 
         */
        public Builder importParallelismDegree(@Nullable Output<Integer> importParallelismDegree) {
            $.importParallelismDegree = importParallelismDegree;
            return this;
        }

        /**
         * @param importParallelismDegree (Updatable) Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
         * 
         * @return builder
         * 
         */
        public Builder importParallelismDegree(Integer importParallelismDegree) {
            return importParallelismDegree(Output.of(importParallelismDegree));
        }

        /**
         * @param isCluster (Updatable) Set to false to force Data Pump worker process to run on one instance.
         * 
         * @return builder
         * 
         */
        public Builder isCluster(@Nullable Output<Boolean> isCluster) {
            $.isCluster = isCluster;
            return this;
        }

        /**
         * @param isCluster (Updatable) Set to false to force Data Pump worker process to run on one instance.
         * 
         * @return builder
         * 
         */
        public Builder isCluster(Boolean isCluster) {
            return isCluster(Output.of(isCluster));
        }

        /**
         * @param tableExistsAction (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
         * 
         * @return builder
         * 
         */
        public Builder tableExistsAction(@Nullable Output<String> tableExistsAction) {
            $.tableExistsAction = tableExistsAction;
            return this;
        }

        /**
         * @param tableExistsAction (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
         * 
         * @return builder
         * 
         */
        public Builder tableExistsAction(String tableExistsAction) {
            return tableExistsAction(Output.of(tableExistsAction));
        }

        public MigrationDatapumpSettingsDataPumpParametersArgs build() {
            return $;
        }
    }

}
