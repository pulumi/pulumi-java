// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesAsmPropertiesAsmPropertyCollection;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesAsmPropertiesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabasesAsmPropertiesResult {
    /**
     * @return The list of asm_property_collection.
     * 
     */
    private final List<GetManagedDatabasesAsmPropertiesAsmPropertyCollection> asmPropertyCollections;
    private final @Nullable List<GetManagedDatabasesAsmPropertiesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String managedDatabaseId;
    private final @Nullable String name;

    @CustomType.Constructor
    private GetManagedDatabasesAsmPropertiesResult(
        @CustomType.Parameter("asmPropertyCollections") List<GetManagedDatabasesAsmPropertiesAsmPropertyCollection> asmPropertyCollections,
        @CustomType.Parameter("filters") @Nullable List<GetManagedDatabasesAsmPropertiesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("managedDatabaseId") String managedDatabaseId,
        @CustomType.Parameter("name") @Nullable String name) {
        this.asmPropertyCollections = asmPropertyCollections;
        this.filters = filters;
        this.id = id;
        this.managedDatabaseId = managedDatabaseId;
        this.name = name;
    }

    /**
     * @return The list of asm_property_collection.
     * 
     */
    public List<GetManagedDatabasesAsmPropertiesAsmPropertyCollection> asmPropertyCollections() {
        return this.asmPropertyCollections;
    }
    public List<GetManagedDatabasesAsmPropertiesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesAsmPropertiesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetManagedDatabasesAsmPropertiesAsmPropertyCollection> asmPropertyCollections;
        private @Nullable List<GetManagedDatabasesAsmPropertiesFilter> filters;
        private String id;
        private String managedDatabaseId;
        private @Nullable String name;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabasesAsmPropertiesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asmPropertyCollections = defaults.asmPropertyCollections;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
        }

        public Builder asmPropertyCollections(List<GetManagedDatabasesAsmPropertiesAsmPropertyCollection> asmPropertyCollections) {
            this.asmPropertyCollections = Objects.requireNonNull(asmPropertyCollections);
            return this;
        }
        public Builder asmPropertyCollections(GetManagedDatabasesAsmPropertiesAsmPropertyCollection... asmPropertyCollections) {
            return asmPropertyCollections(List.of(asmPropertyCollections));
        }
        public Builder filters(@Nullable List<GetManagedDatabasesAsmPropertiesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabasesAsmPropertiesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }        public GetManagedDatabasesAsmPropertiesResult build() {
            return new GetManagedDatabasesAsmPropertiesResult(asmPropertyCollections, filters, id, managedDatabaseId, name);
        }
    }
}
