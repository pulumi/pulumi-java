// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.OsManagement.ManagedInstanceManagementArgs;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementState;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceManagementChildSoftwareSource;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceManagementManagedInstanceGroup;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceManagementParentSoftwareSource;
import com.pulumi.oci.Utilities;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource provides the Managed Instance Management in Oracle Cloud Infrastructure OS Management service.
 * The resource can be used to attach/detach parent software source, child software sources and managed instance groups from managed instances.
 * 
 * Adds a parent software source to a managed instance. After the software source has been added, then packages from that software source can be installed on the managed instance. Software sources that have this software source as a parent will be able to be added to this managed instance.
 * Removes a software source from a managed instance. All child software sources will also be removed from the managed instance. Packages will no longer be able to be installed from these software sources.
 * 
 * Adds a child software source to a managed instance. After the software source has been added, then packages from that software source can be installed on the managed instance.\
 * Removes a child software source from a managed instance. Packages will no longer be able to be installed from these software sources.
 * 
 * Adds a Managed Instance to a Managed Instance Group. After the Managed Instance has been added, then operations can be performed on the Managed Instance Group which will then apply to all Managed Instances in the group.
 * Removes a Managed Instance from a Managed Instance Group.
 * 
 * **NOTE** The resource on CREATE will detach any already attached parent software source, child software sources, managed instance groups to the managed instance.
 * Destroying this resource will not delete any associations.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Import is not supported for this resource.
 * 
 */
@ResourceType(type="oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement")
public class ManagedInstanceManagement extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) list of child Software Sources attached to the Managed Instance
     * 
     */
    @Export(name="childSoftwareSources", type=List.class, parameters={ManagedInstanceManagementChildSoftwareSource.class})
    private Output<List<ManagedInstanceManagementChildSoftwareSource>> childSoftwareSources;

    /**
     * @return (Updatable) list of child Software Sources attached to the Managed Instance
     * 
     */
    public Output<List<ManagedInstanceManagementChildSoftwareSource>> childSoftwareSources() {
        return this.childSoftwareSources;
    }
    /**
     * OCID for the Compartment
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return OCID for the Compartment
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * Information specified by the user about the managed instance
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * User friendly name
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return User friendly name
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Time at which the instance last booted
     * 
     */
    @Export(name="lastBoot", type=String.class, parameters={})
    private Output<String> lastBoot;

    /**
     * @return Time at which the instance last booted
     * 
     */
    public Output<String> lastBoot() {
        return this.lastBoot;
    }
    /**
     * Time at which the instance last checked in
     * 
     */
    @Export(name="lastCheckin", type=String.class, parameters={})
    private Output<String> lastCheckin;

    /**
     * @return Time at which the instance last checked in
     * 
     */
    public Output<String> lastCheckin() {
        return this.lastCheckin;
    }
    /**
     * (Updatable) The ids of the managed instance groups of which this instance is a member.
     * 
     */
    @Export(name="managedInstanceGroups", type=List.class, parameters={ManagedInstanceManagementManagedInstanceGroup.class})
    private Output<List<ManagedInstanceManagementManagedInstanceGroup>> managedInstanceGroups;

    /**
     * @return (Updatable) The ids of the managed instance groups of which this instance is a member.
     * 
     */
    public Output<List<ManagedInstanceManagementManagedInstanceGroup>> managedInstanceGroups() {
        return this.managedInstanceGroups;
    }
    /**
     * OCID for the managed instance
     * 
     */
    @Export(name="managedInstanceId", type=String.class, parameters={})
    private Output<String> managedInstanceId;

    /**
     * @return OCID for the managed instance
     * 
     */
    public Output<String> managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * Operating System Kernel Version
     * 
     */
    @Export(name="osKernelVersion", type=String.class, parameters={})
    private Output<String> osKernelVersion;

    /**
     * @return Operating System Kernel Version
     * 
     */
    public Output<String> osKernelVersion() {
        return this.osKernelVersion;
    }
    /**
     * Operating System Name
     * 
     */
    @Export(name="osName", type=String.class, parameters={})
    private Output<String> osName;

    /**
     * @return Operating System Name
     * 
     */
    public Output<String> osName() {
        return this.osName;
    }
    /**
     * Operating System Version
     * 
     */
    @Export(name="osVersion", type=String.class, parameters={})
    private Output<String> osVersion;

    /**
     * @return Operating System Version
     * 
     */
    public Output<String> osVersion() {
        return this.osVersion;
    }
    /**
     * (Updatable) the parent (base) Software Source attached to the Managed Instance
     * 
     */
    @Export(name="parentSoftwareSource", type=ManagedInstanceManagementParentSoftwareSource.class, parameters={})
    private Output<ManagedInstanceManagementParentSoftwareSource> parentSoftwareSource;

    /**
     * @return (Updatable) the parent (base) Software Source attached to the Managed Instance
     * 
     */
    public Output<ManagedInstanceManagementParentSoftwareSource> parentSoftwareSource() {
        return this.parentSoftwareSource;
    }
    /**
     * status of the managed instance.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return status of the managed instance.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Number of updates available to be installed
     * 
     */
    @Export(name="updatesAvailable", type=Integer.class, parameters={})
    private Output<Integer> updatesAvailable;

    /**
     * @return Number of updates available to be installed
     * 
     */
    public Output<Integer> updatesAvailable() {
        return this.updatesAvailable;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedInstanceManagement(String name) {
        this(name, ManagedInstanceManagementArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedInstanceManagement(String name, ManagedInstanceManagementArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedInstanceManagement(String name, ManagedInstanceManagementArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement", name, args == null ? ManagedInstanceManagementArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ManagedInstanceManagement(String name, Output<String> id, @Nullable ManagedInstanceManagementState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedInstanceManagement get(String name, Output<String> id, @Nullable ManagedInstanceManagementState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedInstanceManagement(name, id, state, options);
    }
}
