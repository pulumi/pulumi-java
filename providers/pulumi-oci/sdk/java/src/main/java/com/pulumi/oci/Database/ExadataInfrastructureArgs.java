// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.ExadataInfrastructureContactArgs;
import com.pulumi.oci.Database.inputs.ExadataInfrastructureMaintenanceWindowArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExadataInfrastructureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExadataInfrastructureArgs Empty = new ExadataInfrastructureArgs();

    /**
     * (Updatable) The activation zip file. If provided in config, exadata infrastructure will be activated after creation. Updates are not allowed on activated exadata infrastructure.
     * 
     */
    @Import(name="activationFile")
    private @Nullable Output<String> activationFile;

    /**
     * @return (Updatable) The activation zip file. If provided in config, exadata infrastructure will be activated after creation. Updates are not allowed on activated exadata infrastructure.
     * 
     */
    public Optional<Output<String>> activationFile() {
        return Optional.ofNullable(this.activationFile);
    }

    /**
     * The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    @Import(name="additionalStorageCount")
    private @Nullable Output<Integer> additionalStorageCount;

    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    public Optional<Output<Integer>> additionalStorageCount() {
        return Optional.ofNullable(this.additionalStorageCount);
    }

    /**
     * (Updatable) The CIDR block for the Exadata administration network.
     * 
     */
    @Import(name="adminNetworkCidr", required=true)
    private Output<String> adminNetworkCidr;

    /**
     * @return (Updatable) The CIDR block for the Exadata administration network.
     * 
     */
    public Output<String> adminNetworkCidr() {
        return this.adminNetworkCidr;
    }

    /**
     * (Updatable) The IP address for the first control plane server.
     * 
     */
    @Import(name="cloudControlPlaneServer1", required=true)
    private Output<String> cloudControlPlaneServer1;

    /**
     * @return (Updatable) The IP address for the first control plane server.
     * 
     */
    public Output<String> cloudControlPlaneServer1() {
        return this.cloudControlPlaneServer1;
    }

    /**
     * (Updatable) The IP address for the second control plane server.
     * 
     */
    @Import(name="cloudControlPlaneServer2", required=true)
    private Output<String> cloudControlPlaneServer2;

    /**
     * @return (Updatable) The IP address for the second control plane server.
     * 
     */
    public Output<String> cloudControlPlaneServer2() {
        return this.cloudControlPlaneServer2;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The number of compute servers for the Exadata infrastructure.
     * 
     */
    @Import(name="computeCount")
    private @Nullable Output<Integer> computeCount;

    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    public Optional<Output<Integer>> computeCount() {
        return Optional.ofNullable(this.computeCount);
    }

    /**
     * (Updatable) The list of contacts for the Exadata infrastructure.
     * 
     */
    @Import(name="contacts")
    private @Nullable Output<List<ExadataInfrastructureContactArgs>> contacts;

    /**
     * @return (Updatable) The list of contacts for the Exadata infrastructure.
     * 
     */
    public Optional<Output<List<ExadataInfrastructureContactArgs>>> contacts() {
        return Optional.ofNullable(this.contacts);
    }

    /**
     * (Updatable) The corporate network proxy for access to the control plane network. Oracle recommends using an HTTPS proxy when possible for enhanced security.
     * 
     */
    @Import(name="corporateProxy")
    private @Nullable Output<String> corporateProxy;

    /**
     * @return (Updatable) The corporate network proxy for access to the control plane network. Oracle recommends using an HTTPS proxy when possible for enhanced security.
     * 
     */
    public Optional<Output<String>> corporateProxy() {
        return Optional.ofNullable(this.corporateProxy);
    }

    @Import(name="createAsync")
    private @Nullable Output<Boolean> createAsync;

    public Optional<Output<Boolean>> createAsync() {
        return Optional.ofNullable(this.createAsync);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * The user-friendly name for the Exadata infrastructure. The name does not need to be unique.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The user-friendly name for the Exadata infrastructure. The name does not need to be unique.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    @Import(name="dnsServers", required=true)
    private Output<List<String>> dnsServers;

    /**
     * @return (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    public Output<List<String>> dnsServers() {
        return this.dnsServers;
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The gateway for the control plane network.
     * 
     */
    @Import(name="gateway", required=true)
    private Output<String> gateway;

    /**
     * @return (Updatable) The gateway for the control plane network.
     * 
     */
    public Output<String> gateway() {
        return this.gateway;
    }

    /**
     * (Updatable) The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    @Import(name="infiniBandNetworkCidr", required=true)
    private Output<String> infiniBandNetworkCidr;

    /**
     * @return (Updatable) The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    public Output<String> infiniBandNetworkCidr() {
        return this.infiniBandNetworkCidr;
    }

    /**
     * (Updatable) The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<ExadataInfrastructureMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return (Updatable) The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public Optional<Output<ExadataInfrastructureMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * (Updatable) The netmask for the control plane network.
     * 
     */
    @Import(name="netmask", required=true)
    private Output<String> netmask;

    /**
     * @return (Updatable) The netmask for the control plane network.
     * 
     */
    public Output<String> netmask() {
        return this.netmask;
    }

    /**
     * (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    @Import(name="ntpServers", required=true)
    private Output<List<String>> ntpServers;

    /**
     * @return (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    public Output<List<String>> ntpServers() {
        return this.ntpServers;
    }

    /**
     * The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    @Import(name="shape", required=true)
    private Output<String> shape;

    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }

    /**
     * The number of storage servers for the Exadata infrastructure.
     * 
     */
    @Import(name="storageCount")
    private @Nullable Output<Integer> storageCount;

    /**
     * @return The number of storage servers for the Exadata infrastructure.
     * 
     */
    public Optional<Output<Integer>> storageCount() {
        return Optional.ofNullable(this.storageCount);
    }

    /**
     * (Updatable) The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    /**
     * @return (Updatable) The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    private ExadataInfrastructureArgs() {}

    private ExadataInfrastructureArgs(ExadataInfrastructureArgs $) {
        this.activationFile = $.activationFile;
        this.additionalStorageCount = $.additionalStorageCount;
        this.adminNetworkCidr = $.adminNetworkCidr;
        this.cloudControlPlaneServer1 = $.cloudControlPlaneServer1;
        this.cloudControlPlaneServer2 = $.cloudControlPlaneServer2;
        this.compartmentId = $.compartmentId;
        this.computeCount = $.computeCount;
        this.contacts = $.contacts;
        this.corporateProxy = $.corporateProxy;
        this.createAsync = $.createAsync;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.dnsServers = $.dnsServers;
        this.freeformTags = $.freeformTags;
        this.gateway = $.gateway;
        this.infiniBandNetworkCidr = $.infiniBandNetworkCidr;
        this.maintenanceWindow = $.maintenanceWindow;
        this.netmask = $.netmask;
        this.ntpServers = $.ntpServers;
        this.shape = $.shape;
        this.storageCount = $.storageCount;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExadataInfrastructureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExadataInfrastructureArgs $;

        public Builder() {
            $ = new ExadataInfrastructureArgs();
        }

        public Builder(ExadataInfrastructureArgs defaults) {
            $ = new ExadataInfrastructureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationFile (Updatable) The activation zip file. If provided in config, exadata infrastructure will be activated after creation. Updates are not allowed on activated exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder activationFile(@Nullable Output<String> activationFile) {
            $.activationFile = activationFile;
            return this;
        }

        /**
         * @param activationFile (Updatable) The activation zip file. If provided in config, exadata infrastructure will be activated after creation. Updates are not allowed on activated exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder activationFile(String activationFile) {
            return activationFile(Output.of(activationFile));
        }

        /**
         * @param additionalStorageCount The requested number of additional storage servers for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder additionalStorageCount(@Nullable Output<Integer> additionalStorageCount) {
            $.additionalStorageCount = additionalStorageCount;
            return this;
        }

        /**
         * @param additionalStorageCount The requested number of additional storage servers for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            return additionalStorageCount(Output.of(additionalStorageCount));
        }

        /**
         * @param adminNetworkCidr (Updatable) The CIDR block for the Exadata administration network.
         * 
         * @return builder
         * 
         */
        public Builder adminNetworkCidr(Output<String> adminNetworkCidr) {
            $.adminNetworkCidr = adminNetworkCidr;
            return this;
        }

        /**
         * @param adminNetworkCidr (Updatable) The CIDR block for the Exadata administration network.
         * 
         * @return builder
         * 
         */
        public Builder adminNetworkCidr(String adminNetworkCidr) {
            return adminNetworkCidr(Output.of(adminNetworkCidr));
        }

        /**
         * @param cloudControlPlaneServer1 (Updatable) The IP address for the first control plane server.
         * 
         * @return builder
         * 
         */
        public Builder cloudControlPlaneServer1(Output<String> cloudControlPlaneServer1) {
            $.cloudControlPlaneServer1 = cloudControlPlaneServer1;
            return this;
        }

        /**
         * @param cloudControlPlaneServer1 (Updatable) The IP address for the first control plane server.
         * 
         * @return builder
         * 
         */
        public Builder cloudControlPlaneServer1(String cloudControlPlaneServer1) {
            return cloudControlPlaneServer1(Output.of(cloudControlPlaneServer1));
        }

        /**
         * @param cloudControlPlaneServer2 (Updatable) The IP address for the second control plane server.
         * 
         * @return builder
         * 
         */
        public Builder cloudControlPlaneServer2(Output<String> cloudControlPlaneServer2) {
            $.cloudControlPlaneServer2 = cloudControlPlaneServer2;
            return this;
        }

        /**
         * @param cloudControlPlaneServer2 (Updatable) The IP address for the second control plane server.
         * 
         * @return builder
         * 
         */
        public Builder cloudControlPlaneServer2(String cloudControlPlaneServer2) {
            return cloudControlPlaneServer2(Output.of(cloudControlPlaneServer2));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param computeCount The number of compute servers for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(@Nullable Output<Integer> computeCount) {
            $.computeCount = computeCount;
            return this;
        }

        /**
         * @param computeCount The number of compute servers for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Integer computeCount) {
            return computeCount(Output.of(computeCount));
        }

        /**
         * @param contacts (Updatable) The list of contacts for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder contacts(@Nullable Output<List<ExadataInfrastructureContactArgs>> contacts) {
            $.contacts = contacts;
            return this;
        }

        /**
         * @param contacts (Updatable) The list of contacts for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder contacts(List<ExadataInfrastructureContactArgs> contacts) {
            return contacts(Output.of(contacts));
        }

        /**
         * @param contacts (Updatable) The list of contacts for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder contacts(ExadataInfrastructureContactArgs... contacts) {
            return contacts(List.of(contacts));
        }

        /**
         * @param corporateProxy (Updatable) The corporate network proxy for access to the control plane network. Oracle recommends using an HTTPS proxy when possible for enhanced security.
         * 
         * @return builder
         * 
         */
        public Builder corporateProxy(@Nullable Output<String> corporateProxy) {
            $.corporateProxy = corporateProxy;
            return this;
        }

        /**
         * @param corporateProxy (Updatable) The corporate network proxy for access to the control plane network. Oracle recommends using an HTTPS proxy when possible for enhanced security.
         * 
         * @return builder
         * 
         */
        public Builder corporateProxy(String corporateProxy) {
            return corporateProxy(Output.of(corporateProxy));
        }

        public Builder createAsync(@Nullable Output<Boolean> createAsync) {
            $.createAsync = createAsync;
            return this;
        }

        public Builder createAsync(Boolean createAsync) {
            return createAsync(Output.of(createAsync));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName The user-friendly name for the Exadata infrastructure. The name does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-friendly name for the Exadata infrastructure. The name does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dnsServers (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param gateway (Updatable) The gateway for the control plane network.
         * 
         * @return builder
         * 
         */
        public Builder gateway(Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway (Updatable) The gateway for the control plane network.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param infiniBandNetworkCidr (Updatable) The CIDR block for the Exadata InfiniBand interconnect.
         * 
         * @return builder
         * 
         */
        public Builder infiniBandNetworkCidr(Output<String> infiniBandNetworkCidr) {
            $.infiniBandNetworkCidr = infiniBandNetworkCidr;
            return this;
        }

        /**
         * @param infiniBandNetworkCidr (Updatable) The CIDR block for the Exadata InfiniBand interconnect.
         * 
         * @return builder
         * 
         */
        public Builder infiniBandNetworkCidr(String infiniBandNetworkCidr) {
            return infiniBandNetworkCidr(Output.of(infiniBandNetworkCidr));
        }

        /**
         * @param maintenanceWindow (Updatable) The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<ExadataInfrastructureMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow (Updatable) The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(ExadataInfrastructureMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param netmask (Updatable) The netmask for the control plane network.
         * 
         * @return builder
         * 
         */
        public Builder netmask(Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        /**
         * @param netmask (Updatable) The netmask for the control plane network.
         * 
         * @return builder
         * 
         */
        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        /**
         * @param ntpServers (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        /**
         * @param ntpServers (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        /**
         * @param ntpServers (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        /**
         * @param shape The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
         * 
         * @return builder
         * 
         */
        public Builder shape(Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param storageCount The number of storage servers for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder storageCount(@Nullable Output<Integer> storageCount) {
            $.storageCount = storageCount;
            return this;
        }

        /**
         * @param storageCount The number of storage servers for the Exadata infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder storageCount(Integer storageCount) {
            return storageCount(Output.of(storageCount));
        }

        /**
         * @param timeZone (Updatable) The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone (Updatable) The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public ExadataInfrastructureArgs build() {
            $.adminNetworkCidr = Objects.requireNonNull($.adminNetworkCidr, "expected parameter 'adminNetworkCidr' to be non-null");
            $.cloudControlPlaneServer1 = Objects.requireNonNull($.cloudControlPlaneServer1, "expected parameter 'cloudControlPlaneServer1' to be non-null");
            $.cloudControlPlaneServer2 = Objects.requireNonNull($.cloudControlPlaneServer2, "expected parameter 'cloudControlPlaneServer2' to be non-null");
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.dnsServers = Objects.requireNonNull($.dnsServers, "expected parameter 'dnsServers' to be non-null");
            $.gateway = Objects.requireNonNull($.gateway, "expected parameter 'gateway' to be non-null");
            $.infiniBandNetworkCidr = Objects.requireNonNull($.infiniBandNetworkCidr, "expected parameter 'infiniBandNetworkCidr' to be non-null");
            $.netmask = Objects.requireNonNull($.netmask, "expected parameter 'netmask' to be non-null");
            $.ntpServers = Objects.requireNonNull($.ntpServers, "expected parameter 'ntpServers' to be non-null");
            $.shape = Objects.requireNonNull($.shape, "expected parameter 'shape' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            return $;
        }
    }

}
