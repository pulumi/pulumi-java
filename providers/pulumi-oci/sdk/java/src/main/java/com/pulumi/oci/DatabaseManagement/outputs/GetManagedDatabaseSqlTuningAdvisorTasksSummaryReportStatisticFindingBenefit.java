// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit {
    /**
     * @return The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are implemented.
     * 
     */
    private final Integer dbTimeAfterImplemented;
    /**
     * @return The estimated database time of the above SQL statements, if SQL Tuning Advisor recommendations are implemented.
     * 
     */
    private final Integer dbTimeAfterRecommended;
    /**
     * @return The actual database time of the above SQL statements, before SQL Tuning Advisor recommendations are implemented.
     * 
     */
    private final Integer dbTimeBeforeImplemented;
    /**
     * @return The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are not implemented.
     * 
     */
    private final Integer dbTimeBeforeRecommended;

    @CustomType.Constructor
    private GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit(
        @CustomType.Parameter("dbTimeAfterImplemented") Integer dbTimeAfterImplemented,
        @CustomType.Parameter("dbTimeAfterRecommended") Integer dbTimeAfterRecommended,
        @CustomType.Parameter("dbTimeBeforeImplemented") Integer dbTimeBeforeImplemented,
        @CustomType.Parameter("dbTimeBeforeRecommended") Integer dbTimeBeforeRecommended) {
        this.dbTimeAfterImplemented = dbTimeAfterImplemented;
        this.dbTimeAfterRecommended = dbTimeAfterRecommended;
        this.dbTimeBeforeImplemented = dbTimeBeforeImplemented;
        this.dbTimeBeforeRecommended = dbTimeBeforeRecommended;
    }

    /**
     * @return The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are implemented.
     * 
     */
    public Integer dbTimeAfterImplemented() {
        return this.dbTimeAfterImplemented;
    }
    /**
     * @return The estimated database time of the above SQL statements, if SQL Tuning Advisor recommendations are implemented.
     * 
     */
    public Integer dbTimeAfterRecommended() {
        return this.dbTimeAfterRecommended;
    }
    /**
     * @return The actual database time of the above SQL statements, before SQL Tuning Advisor recommendations are implemented.
     * 
     */
    public Integer dbTimeBeforeImplemented() {
        return this.dbTimeBeforeImplemented;
    }
    /**
     * @return The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are not implemented.
     * 
     */
    public Integer dbTimeBeforeRecommended() {
        return this.dbTimeBeforeRecommended;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer dbTimeAfterImplemented;
        private Integer dbTimeAfterRecommended;
        private Integer dbTimeBeforeImplemented;
        private Integer dbTimeBeforeRecommended;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbTimeAfterImplemented = defaults.dbTimeAfterImplemented;
    	      this.dbTimeAfterRecommended = defaults.dbTimeAfterRecommended;
    	      this.dbTimeBeforeImplemented = defaults.dbTimeBeforeImplemented;
    	      this.dbTimeBeforeRecommended = defaults.dbTimeBeforeRecommended;
        }

        public Builder dbTimeAfterImplemented(Integer dbTimeAfterImplemented) {
            this.dbTimeAfterImplemented = Objects.requireNonNull(dbTimeAfterImplemented);
            return this;
        }
        public Builder dbTimeAfterRecommended(Integer dbTimeAfterRecommended) {
            this.dbTimeAfterRecommended = Objects.requireNonNull(dbTimeAfterRecommended);
            return this;
        }
        public Builder dbTimeBeforeImplemented(Integer dbTimeBeforeImplemented) {
            this.dbTimeBeforeImplemented = Objects.requireNonNull(dbTimeBeforeImplemented);
            return this;
        }
        public Builder dbTimeBeforeRecommended(Integer dbTimeBeforeRecommended) {
            this.dbTimeBeforeRecommended = Objects.requireNonNull(dbTimeBeforeRecommended);
            return this;
        }        public GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit build() {
            return new GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit(dbTimeAfterImplemented, dbTimeAfterRecommended, dbTimeBeforeImplemented, dbTimeBeforeRecommended);
        }
    }
}
