// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateExtensionArgs Empty = new CertificateExtensionArgs();

    /**
     * The critical flag of the extension. Critical extensions must be processed, non-critical extensions can be ignored.
     * 
     */
    @Import(name="isCritical")
    private @Nullable Output<Boolean> isCritical;

    /**
     * @return The critical flag of the extension. Critical extensions must be processed, non-critical extensions can be ignored.
     * 
     */
    public Optional<Output<Boolean>> isCritical() {
        return Optional.ofNullable(this.isCritical);
    }

    /**
     * The certificate extension name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The certificate extension name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The certificate extension value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The certificate extension value.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private CertificateExtensionArgs() {}

    private CertificateExtensionArgs(CertificateExtensionArgs $) {
        this.isCritical = $.isCritical;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateExtensionArgs $;

        public Builder() {
            $ = new CertificateExtensionArgs();
        }

        public Builder(CertificateExtensionArgs defaults) {
            $ = new CertificateExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isCritical The critical flag of the extension. Critical extensions must be processed, non-critical extensions can be ignored.
         * 
         * @return builder
         * 
         */
        public Builder isCritical(@Nullable Output<Boolean> isCritical) {
            $.isCritical = isCritical;
            return this;
        }

        /**
         * @param isCritical The critical flag of the extension. Critical extensions must be processed, non-critical extensions can be ignored.
         * 
         * @return builder
         * 
         */
        public Builder isCritical(Boolean isCritical) {
            return isCritical(Output.of(isCritical));
        }

        /**
         * @param name The certificate extension name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The certificate extension name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value The certificate extension value.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The certificate extension value.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public CertificateExtensionArgs build() {
            return $;
        }
    }

}
