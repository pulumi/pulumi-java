// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretSecretContentArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretSecretContentArgs Empty = new SecretSecretContentArgs();

    /**
     * (Updatable) The base64-encoded content of the secret.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return (Updatable) The base64-encoded content of the secret.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * (Updatable) content type . Example `BASE64` .
     * 
     */
    @Import(name="contentType", required=true)
    private Output<String> contentType;

    /**
     * @return (Updatable) content type . Example `BASE64` .
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * (Updatable) Names should be unique within a secret. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Names should be unique within a secret. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The rotation state of the secret content. The default is `CURRENT`, meaning that the secret is currently in use. A secret version that you mark as `PENDING` is staged and available for use, but you don&#39;t yet want to rotate it into current, active use. For example, you might create or update a secret and mark its rotation state as `PENDING` if you haven&#39;t yet updated the secret on the target system. When creating a secret, only the value `CURRENT` is applicable, although the value `LATEST` is also automatically applied. When updating  a secret, you can specify a version&#39;s rotation state as either `CURRENT` or `PENDING`.
     * 
     */
    @Import(name="stage")
    private @Nullable Output<String> stage;

    /**
     * @return (Updatable) The rotation state of the secret content. The default is `CURRENT`, meaning that the secret is currently in use. A secret version that you mark as `PENDING` is staged and available for use, but you don&#39;t yet want to rotate it into current, active use. For example, you might create or update a secret and mark its rotation state as `PENDING` if you haven&#39;t yet updated the secret on the target system. When creating a secret, only the value `CURRENT` is applicable, although the value `LATEST` is also automatically applied. When updating  a secret, you can specify a version&#39;s rotation state as either `CURRENT` or `PENDING`.
     * 
     */
    public Optional<Output<String>> stage() {
        return Optional.ofNullable(this.stage);
    }

    private SecretSecretContentArgs() {}

    private SecretSecretContentArgs(SecretSecretContentArgs $) {
        this.content = $.content;
        this.contentType = $.contentType;
        this.name = $.name;
        this.stage = $.stage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretSecretContentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretSecretContentArgs $;

        public Builder() {
            $ = new SecretSecretContentArgs();
        }

        public Builder(SecretSecretContentArgs defaults) {
            $ = new SecretSecretContentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content (Updatable) The base64-encoded content of the secret.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content (Updatable) The base64-encoded content of the secret.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentType (Updatable) content type . Example `BASE64` .
         * 
         * @return builder
         * 
         */
        public Builder contentType(Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType (Updatable) content type . Example `BASE64` .
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param name (Updatable) Names should be unique within a secret. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Names should be unique within a secret. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param stage (Updatable) The rotation state of the secret content. The default is `CURRENT`, meaning that the secret is currently in use. A secret version that you mark as `PENDING` is staged and available for use, but you don&#39;t yet want to rotate it into current, active use. For example, you might create or update a secret and mark its rotation state as `PENDING` if you haven&#39;t yet updated the secret on the target system. When creating a secret, only the value `CURRENT` is applicable, although the value `LATEST` is also automatically applied. When updating  a secret, you can specify a version&#39;s rotation state as either `CURRENT` or `PENDING`.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage (Updatable) The rotation state of the secret content. The default is `CURRENT`, meaning that the secret is currently in use. A secret version that you mark as `PENDING` is staged and available for use, but you don&#39;t yet want to rotate it into current, active use. For example, you might create or update a secret and mark its rotation state as `PENDING` if you haven&#39;t yet updated the secret on the target system. When creating a secret, only the value `CURRENT` is applicable, although the value `LATEST` is also automatically applied. When updating  a secret, you can specify a version&#39;s rotation state as either `CURRENT` or `PENDING`.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        public SecretSecretContentArgs build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.contentType = Objects.requireNonNull($.contentType, "expected parameter 'contentType' to be non-null");
            return $;
        }
    }

}
