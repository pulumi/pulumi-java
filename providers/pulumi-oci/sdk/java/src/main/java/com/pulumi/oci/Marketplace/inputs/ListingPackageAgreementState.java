// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingPackageAgreementState extends com.pulumi.resources.ResourceArgs {

    public static final ListingPackageAgreementState Empty = new ListingPackageAgreementState();

    /**
     * The unique identifier for the agreement.
     * 
     */
    @Import(name="agreementId")
    private @Nullable Output<String> agreementId;

    /**
     * @return The unique identifier for the agreement.
     * 
     */
    public Optional<Output<String>> agreementId() {
        return Optional.ofNullable(this.agreementId);
    }

    /**
     * Who authored the agreement.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return Who authored the agreement.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * The unique identifier for the compartment, required in gov regions.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The unique identifier for the compartment, required in gov regions.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The content URL of the agreement.
     * 
     */
    @Import(name="contentUrl")
    private @Nullable Output<String> contentUrl;

    /**
     * @return The content URL of the agreement.
     * 
     */
    public Optional<Output<String>> contentUrl() {
        return Optional.ofNullable(this.contentUrl);
    }

    /**
     * The unique identifier for the listing.
     * 
     */
    @Import(name="listingId")
    private @Nullable Output<String> listingId;

    /**
     * @return The unique identifier for the listing.
     * 
     */
    public Optional<Output<String>> listingId() {
        return Optional.ofNullable(this.listingId);
    }

    /**
     * The version of the package. Package versions are unique within a listing.
     * 
     */
    @Import(name="packageVersion")
    private @Nullable Output<String> packageVersion;

    /**
     * @return The version of the package. Package versions are unique within a listing.
     * 
     */
    public Optional<Output<String>> packageVersion() {
        return Optional.ofNullable(this.packageVersion);
    }

    /**
     * Textual prompt to read and accept the agreement.
     * 
     */
    @Import(name="prompt")
    private @Nullable Output<String> prompt;

    /**
     * @return Textual prompt to read and accept the agreement.
     * 
     */
    public Optional<Output<String>> prompt() {
        return Optional.ofNullable(this.prompt);
    }

    /**
     * A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
     * 
     */
    @Import(name="signature")
    private @Nullable Output<String> signature;

    /**
     * @return A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
     * 
     */
    public Optional<Output<String>> signature() {
        return Optional.ofNullable(this.signature);
    }

    private ListingPackageAgreementState() {}

    private ListingPackageAgreementState(ListingPackageAgreementState $) {
        this.agreementId = $.agreementId;
        this.author = $.author;
        this.compartmentId = $.compartmentId;
        this.contentUrl = $.contentUrl;
        this.listingId = $.listingId;
        this.packageVersion = $.packageVersion;
        this.prompt = $.prompt;
        this.signature = $.signature;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingPackageAgreementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingPackageAgreementState $;

        public Builder() {
            $ = new ListingPackageAgreementState();
        }

        public Builder(ListingPackageAgreementState defaults) {
            $ = new ListingPackageAgreementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param agreementId The unique identifier for the agreement.
         * 
         * @return builder
         * 
         */
        public Builder agreementId(@Nullable Output<String> agreementId) {
            $.agreementId = agreementId;
            return this;
        }

        /**
         * @param agreementId The unique identifier for the agreement.
         * 
         * @return builder
         * 
         */
        public Builder agreementId(String agreementId) {
            return agreementId(Output.of(agreementId));
        }

        /**
         * @param author Who authored the agreement.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author Who authored the agreement.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param compartmentId The unique identifier for the compartment, required in gov regions.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The unique identifier for the compartment, required in gov regions.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param contentUrl The content URL of the agreement.
         * 
         * @return builder
         * 
         */
        public Builder contentUrl(@Nullable Output<String> contentUrl) {
            $.contentUrl = contentUrl;
            return this;
        }

        /**
         * @param contentUrl The content URL of the agreement.
         * 
         * @return builder
         * 
         */
        public Builder contentUrl(String contentUrl) {
            return contentUrl(Output.of(contentUrl));
        }

        /**
         * @param listingId The unique identifier for the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingId(@Nullable Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId The unique identifier for the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param packageVersion The version of the package. Package versions are unique within a listing.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(@Nullable Output<String> packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        /**
         * @param packageVersion The version of the package. Package versions are unique within a listing.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(String packageVersion) {
            return packageVersion(Output.of(packageVersion));
        }

        /**
         * @param prompt Textual prompt to read and accept the agreement.
         * 
         * @return builder
         * 
         */
        public Builder prompt(@Nullable Output<String> prompt) {
            $.prompt = prompt;
            return this;
        }

        /**
         * @param prompt Textual prompt to read and accept the agreement.
         * 
         * @return builder
         * 
         */
        public Builder prompt(String prompt) {
            return prompt(Output.of(prompt));
        }

        /**
         * @param signature A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
         * 
         * @return builder
         * 
         */
        public Builder signature(@Nullable Output<String> signature) {
            $.signature = signature;
            return this;
        }

        /**
         * @param signature A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
         * 
         * @return builder
         * 
         */
        public Builder signature(String signature) {
            return signature(Output.of(signature));
        }

        public ListingPackageAgreementState build() {
            return $;
        }
    }

}
