// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredResourceDatabaseConnectionDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredResourceDatabaseConnectionDetailsArgs Empty = new MonitoredResourceDatabaseConnectionDetailsArgs();

    /**
     * (Updatable) Database connector Identifier
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return (Updatable) Database connector Identifier
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * (Updatable) dbId of the database
     * 
     */
    @Import(name="dbId")
    private @Nullable Output<String> dbId;

    /**
     * @return (Updatable) dbId of the database
     * 
     */
    public Optional<Output<String>> dbId() {
        return Optional.ofNullable(this.dbId);
    }

    /**
     * (Updatable) UniqueName used for database connection requests.
     * 
     */
    @Import(name="dbUniqueName")
    private @Nullable Output<String> dbUniqueName;

    /**
     * @return (Updatable) UniqueName used for database connection requests.
     * 
     */
    public Optional<Output<String>> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }

    /**
     * (Updatable) Listener Port number used for connection requests.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return (Updatable) Listener Port number used for connection requests.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * (Updatable) Protocol used in DB connection string when connecting to external database service.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return (Updatable) Protocol used in DB connection string when connecting to external database service.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * (Updatable) Service name used for connection requests.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return (Updatable) Service name used for connection requests.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private MonitoredResourceDatabaseConnectionDetailsArgs() {}

    private MonitoredResourceDatabaseConnectionDetailsArgs(MonitoredResourceDatabaseConnectionDetailsArgs $) {
        this.connectorId = $.connectorId;
        this.dbId = $.dbId;
        this.dbUniqueName = $.dbUniqueName;
        this.port = $.port;
        this.protocol = $.protocol;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredResourceDatabaseConnectionDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredResourceDatabaseConnectionDetailsArgs $;

        public Builder() {
            $ = new MonitoredResourceDatabaseConnectionDetailsArgs();
        }

        public Builder(MonitoredResourceDatabaseConnectionDetailsArgs defaults) {
            $ = new MonitoredResourceDatabaseConnectionDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId (Updatable) Database connector Identifier
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId (Updatable) Database connector Identifier
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param dbId (Updatable) dbId of the database
         * 
         * @return builder
         * 
         */
        public Builder dbId(@Nullable Output<String> dbId) {
            $.dbId = dbId;
            return this;
        }

        /**
         * @param dbId (Updatable) dbId of the database
         * 
         * @return builder
         * 
         */
        public Builder dbId(String dbId) {
            return dbId(Output.of(dbId));
        }

        /**
         * @param dbUniqueName (Updatable) UniqueName used for database connection requests.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(@Nullable Output<String> dbUniqueName) {
            $.dbUniqueName = dbUniqueName;
            return this;
        }

        /**
         * @param dbUniqueName (Updatable) UniqueName used for database connection requests.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(String dbUniqueName) {
            return dbUniqueName(Output.of(dbUniqueName));
        }

        /**
         * @param port (Updatable) Listener Port number used for connection requests.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) Listener Port number used for connection requests.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol (Updatable) Protocol used in DB connection string when connecting to external database service.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) Protocol used in DB connection string when connecting to external database service.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param serviceName (Updatable) Service name used for connection requests.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName (Updatable) Service name used for connection requests.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public MonitoredResourceDatabaseConnectionDetailsArgs build() {
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
