// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Oce.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetOceInstancesOceInstance {
    /**
     * @return a list of add-on features for the ocm instance
     * 
     */
    private final List<String> addOnFeatures;
    /**
     * @return Admin Email for Notification
     * 
     */
    private final String adminEmail;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private final String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return OceInstance description, can be updated
     * 
     */
    private final String description;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return Unique GUID identifier that is immutable on creation
     * 
     */
    private final String guid;
    /**
     * @return Unique identifier that is immutable on creation
     * 
     */
    private final String id;
    private final String idcsAccessToken;
    /**
     * @return IDCS Tenancy Identifier
     * 
     */
    private final String idcsTenancy;
    /**
     * @return Flag indicating whether the instance access is private or public
     * 
     */
    private final String instanceAccessType;
    /**
     * @return Flag indicating whether the instance license is new cloud or bring your own license
     * 
     */
    private final String instanceLicenseType;
    /**
     * @return Instance type based on its usage
     * 
     */
    private final String instanceUsageType;
    /**
     * @return Details of the current state of the instance lifecycle
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return OceInstance Name
     * 
     */
    private final String name;
    /**
     * @return Object Storage Namespace of tenancy
     * 
     */
    private final String objectStorageNamespace;
    /**
     * @return SERVICE data. Example: `{&#34;service&#34;: {&#34;IDCS&#34;: &#34;value&#34;}}`
     * 
     */
    private final Map<String,Object> service;
    /**
     * @return Filter results on lifecycleState.
     * 
     */
    private final String state;
    /**
     * @return An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private final String stateMessage;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The ID of the tenancy in which to list resources.
     * 
     */
    private final String tenancyId;
    /**
     * @return Tenancy Name
     * 
     */
    private final String tenancyName;
    /**
     * @return The time the the OceInstance was created. An RFC3339 formatted datetime string
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the OceInstance was updated. An RFC3339 formatted datetime string
     * 
     */
    private final String timeUpdated;
    /**
     * @return Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
     * 
     */
    private final String upgradeSchedule;
    /**
     * @return Web Application Firewall(WAF) primary domain
     * 
     */
    private final String wafPrimaryDomain;

    @CustomType.Constructor
    private GetOceInstancesOceInstance(
        @CustomType.Parameter("addOnFeatures") List<String> addOnFeatures,
        @CustomType.Parameter("adminEmail") String adminEmail,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("guid") String guid,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("idcsAccessToken") String idcsAccessToken,
        @CustomType.Parameter("idcsTenancy") String idcsTenancy,
        @CustomType.Parameter("instanceAccessType") String instanceAccessType,
        @CustomType.Parameter("instanceLicenseType") String instanceLicenseType,
        @CustomType.Parameter("instanceUsageType") String instanceUsageType,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("objectStorageNamespace") String objectStorageNamespace,
        @CustomType.Parameter("service") Map<String,Object> service,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("stateMessage") String stateMessage,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("tenancyId") String tenancyId,
        @CustomType.Parameter("tenancyName") String tenancyName,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("upgradeSchedule") String upgradeSchedule,
        @CustomType.Parameter("wafPrimaryDomain") String wafPrimaryDomain) {
        this.addOnFeatures = addOnFeatures;
        this.adminEmail = adminEmail;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.description = description;
        this.freeformTags = freeformTags;
        this.guid = guid;
        this.id = id;
        this.idcsAccessToken = idcsAccessToken;
        this.idcsTenancy = idcsTenancy;
        this.instanceAccessType = instanceAccessType;
        this.instanceLicenseType = instanceLicenseType;
        this.instanceUsageType = instanceUsageType;
        this.lifecycleDetails = lifecycleDetails;
        this.name = name;
        this.objectStorageNamespace = objectStorageNamespace;
        this.service = service;
        this.state = state;
        this.stateMessage = stateMessage;
        this.systemTags = systemTags;
        this.tenancyId = tenancyId;
        this.tenancyName = tenancyName;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
        this.upgradeSchedule = upgradeSchedule;
        this.wafPrimaryDomain = wafPrimaryDomain;
    }

    /**
     * @return a list of add-on features for the ocm instance
     * 
     */
    public List<String> addOnFeatures() {
        return this.addOnFeatures;
    }
    /**
     * @return Admin Email for Notification
     * 
     */
    public String adminEmail() {
        return this.adminEmail;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return OceInstance description, can be updated
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique GUID identifier that is immutable on creation
     * 
     */
    public String guid() {
        return this.guid;
    }
    /**
     * @return Unique identifier that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    public String idcsAccessToken() {
        return this.idcsAccessToken;
    }
    /**
     * @return IDCS Tenancy Identifier
     * 
     */
    public String idcsTenancy() {
        return this.idcsTenancy;
    }
    /**
     * @return Flag indicating whether the instance access is private or public
     * 
     */
    public String instanceAccessType() {
        return this.instanceAccessType;
    }
    /**
     * @return Flag indicating whether the instance license is new cloud or bring your own license
     * 
     */
    public String instanceLicenseType() {
        return this.instanceLicenseType;
    }
    /**
     * @return Instance type based on its usage
     * 
     */
    public String instanceUsageType() {
        return this.instanceUsageType;
    }
    /**
     * @return Details of the current state of the instance lifecycle
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return OceInstance Name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object Storage Namespace of tenancy
     * 
     */
    public String objectStorageNamespace() {
        return this.objectStorageNamespace;
    }
    /**
     * @return SERVICE data. Example: `{&#34;service&#34;: {&#34;IDCS&#34;: &#34;value&#34;}}`
     * 
     */
    public Map<String,Object> service() {
        return this.service;
    }
    /**
     * @return Filter results on lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String stateMessage() {
        return this.stateMessage;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The ID of the tenancy in which to list resources.
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return Tenancy Name
     * 
     */
    public String tenancyName() {
        return this.tenancyName;
    }
    /**
     * @return The time the the OceInstance was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the OceInstance was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
     * 
     */
    public String upgradeSchedule() {
        return this.upgradeSchedule;
    }
    /**
     * @return Web Application Firewall(WAF) primary domain
     * 
     */
    public String wafPrimaryDomain() {
        return this.wafPrimaryDomain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOceInstancesOceInstance defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> addOnFeatures;
        private String adminEmail;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private Map<String,Object> freeformTags;
        private String guid;
        private String id;
        private String idcsAccessToken;
        private String idcsTenancy;
        private String instanceAccessType;
        private String instanceLicenseType;
        private String instanceUsageType;
        private String lifecycleDetails;
        private String name;
        private String objectStorageNamespace;
        private Map<String,Object> service;
        private String state;
        private String stateMessage;
        private Map<String,Object> systemTags;
        private String tenancyId;
        private String tenancyName;
        private String timeCreated;
        private String timeUpdated;
        private String upgradeSchedule;
        private String wafPrimaryDomain;

        public Builder() {
    	      // Empty
        }

        public Builder(GetOceInstancesOceInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addOnFeatures = defaults.addOnFeatures;
    	      this.adminEmail = defaults.adminEmail;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.guid = defaults.guid;
    	      this.id = defaults.id;
    	      this.idcsAccessToken = defaults.idcsAccessToken;
    	      this.idcsTenancy = defaults.idcsTenancy;
    	      this.instanceAccessType = defaults.instanceAccessType;
    	      this.instanceLicenseType = defaults.instanceLicenseType;
    	      this.instanceUsageType = defaults.instanceUsageType;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.objectStorageNamespace = defaults.objectStorageNamespace;
    	      this.service = defaults.service;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.systemTags = defaults.systemTags;
    	      this.tenancyId = defaults.tenancyId;
    	      this.tenancyName = defaults.tenancyName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.upgradeSchedule = defaults.upgradeSchedule;
    	      this.wafPrimaryDomain = defaults.wafPrimaryDomain;
        }

        public Builder addOnFeatures(List<String> addOnFeatures) {
            this.addOnFeatures = Objects.requireNonNull(addOnFeatures);
            return this;
        }
        public Builder addOnFeatures(String... addOnFeatures) {
            return addOnFeatures(List.of(addOnFeatures));
        }
        public Builder adminEmail(String adminEmail) {
            this.adminEmail = Objects.requireNonNull(adminEmail);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder guid(String guid) {
            this.guid = Objects.requireNonNull(guid);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder idcsAccessToken(String idcsAccessToken) {
            this.idcsAccessToken = Objects.requireNonNull(idcsAccessToken);
            return this;
        }
        public Builder idcsTenancy(String idcsTenancy) {
            this.idcsTenancy = Objects.requireNonNull(idcsTenancy);
            return this;
        }
        public Builder instanceAccessType(String instanceAccessType) {
            this.instanceAccessType = Objects.requireNonNull(instanceAccessType);
            return this;
        }
        public Builder instanceLicenseType(String instanceLicenseType) {
            this.instanceLicenseType = Objects.requireNonNull(instanceLicenseType);
            return this;
        }
        public Builder instanceUsageType(String instanceUsageType) {
            this.instanceUsageType = Objects.requireNonNull(instanceUsageType);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder objectStorageNamespace(String objectStorageNamespace) {
            this.objectStorageNamespace = Objects.requireNonNull(objectStorageNamespace);
            return this;
        }
        public Builder service(Map<String,Object> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder stateMessage(String stateMessage) {
            this.stateMessage = Objects.requireNonNull(stateMessage);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder tenancyId(String tenancyId) {
            this.tenancyId = Objects.requireNonNull(tenancyId);
            return this;
        }
        public Builder tenancyName(String tenancyName) {
            this.tenancyName = Objects.requireNonNull(tenancyName);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder upgradeSchedule(String upgradeSchedule) {
            this.upgradeSchedule = Objects.requireNonNull(upgradeSchedule);
            return this;
        }
        public Builder wafPrimaryDomain(String wafPrimaryDomain) {
            this.wafPrimaryDomain = Objects.requireNonNull(wafPrimaryDomain);
            return this;
        }        public GetOceInstancesOceInstance build() {
            return new GetOceInstancesOceInstance(addOnFeatures, adminEmail, compartmentId, definedTags, description, freeformTags, guid, id, idcsAccessToken, idcsTenancy, instanceAccessType, instanceLicenseType, instanceUsageType, lifecycleDetails, name, objectStorageNamespace, service, state, stateMessage, systemTags, tenancyId, tenancyName, timeCreated, timeUpdated, upgradeSchedule, wafPrimaryDomain);
        }
    }
}
