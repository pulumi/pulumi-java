// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Optimizer.inputs.GetHistoriesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetHistoriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHistoriesArgs Empty = new GetHistoriesArgs();

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     */
    @Import(name="compartmentIdInSubtree", required=true)
    private Output<Boolean> compartmentIdInSubtree;

    /**
     * @return When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     */
    public Output<Boolean> compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetHistoriesFilter>> filters;

    public Output</* @Nullable */ List<GetHistoriesFilter>> filters() {
        return this.filters;
    }

    /**
     * Optional. A filter that returns results that match the name specified.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * The unique OCID associated with the recommendation.
     * 
     */
    @Import(name="recommendationId")
    private Output</* @Nullable */ String> recommendationId;

    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    public Output</* @Nullable */ String> recommendationId() {
        return this.recommendationId;
    }

    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     * 
     */
    @Import(name="recommendationName")
    private Output</* @Nullable */ String> recommendationName;

    /**
     * @return Optional. A filter that returns results that match the recommendation name specified.
     * 
     */
    public Output</* @Nullable */ String> recommendationName() {
        return this.recommendationName;
    }

    /**
     * Optional. A filter that returns results that match the resource type specified.
     * 
     */
    @Import(name="resourceType")
    private Output</* @Nullable */ String> resourceType;

    /**
     * @return Optional. A filter that returns results that match the resource type specified.
     * 
     */
    public Output</* @Nullable */ String> resourceType() {
        return this.resourceType;
    }

    /**
     * A filter that returns results that match the lifecycle state specified.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    /**
     * A filter that returns recommendations that match the status specified.
     * 
     */
    @Import(name="status")
    private Output</* @Nullable */ String> status;

    /**
     * @return A filter that returns recommendations that match the status specified.
     * 
     */
    public Output</* @Nullable */ String> status() {
        return this.status;
    }

    private GetHistoriesArgs() {}

    private GetHistoriesArgs(GetHistoriesArgs $) {
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.name = $.name;
        this.recommendationId = $.recommendationId;
        this.recommendationName = $.recommendationName;
        this.resourceType = $.resourceType;
        this.state = $.state;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHistoriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHistoriesArgs $;

        public Builder() {
            $ = new GetHistoriesArgs();
        }

        public Builder(GetHistoriesArgs defaults) {
            $ = new GetHistoriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(Output</* @Nullable */ List<GetHistoriesFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetHistoriesFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetHistoriesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name Optional. A filter that returns results that match the name specified.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Optional. A filter that returns results that match the name specified.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param recommendationId The unique OCID associated with the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder recommendationId(Output</* @Nullable */ String> recommendationId) {
            $.recommendationId = recommendationId;
            return this;
        }

        /**
         * @param recommendationId The unique OCID associated with the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder recommendationId(@Nullable String recommendationId) {
            return recommendationId(Output.of(recommendationId));
        }

        /**
         * @param recommendationName Optional. A filter that returns results that match the recommendation name specified.
         * 
         * @return builder
         * 
         */
        public Builder recommendationName(Output</* @Nullable */ String> recommendationName) {
            $.recommendationName = recommendationName;
            return this;
        }

        /**
         * @param recommendationName Optional. A filter that returns results that match the recommendation name specified.
         * 
         * @return builder
         * 
         */
        public Builder recommendationName(@Nullable String recommendationName) {
            return recommendationName(Output.of(recommendationName));
        }

        /**
         * @param resourceType Optional. A filter that returns results that match the resource type specified.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output</* @Nullable */ String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Optional. A filter that returns results that match the resource type specified.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param state A filter that returns results that match the lifecycle state specified.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter that returns results that match the lifecycle state specified.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        /**
         * @param status A filter that returns recommendations that match the status specified.
         * 
         * @return builder
         * 
         */
        public Builder status(Output</* @Nullable */ String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status A filter that returns recommendations that match the status specified.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            return status(Output.of(status));
        }

        public GetHistoriesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.compartmentIdInSubtree = Objects.requireNonNull($.compartmentIdInSubtree, "expected parameter 'compartmentIdInSubtree' to be non-null");
            return $;
        }
    }

}
