// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableSchemaColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableSchemaColumnArgs Empty = new TableSchemaColumnArgs();

    /**
     * The column default value.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return The column default value.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The column nullable flag.
     * 
     */
    @Import(name="isNullable")
    private @Nullable Output<Boolean> isNullable;

    /**
     * @return The column nullable flag.
     * 
     */
    public Optional<Output<Boolean>> isNullable() {
        return Optional.ofNullable(this.isNullable);
    }

    /**
     * Table name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Table name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The column type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The column type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TableSchemaColumnArgs() {}

    private TableSchemaColumnArgs(TableSchemaColumnArgs $) {
        this.defaultValue = $.defaultValue;
        this.isNullable = $.isNullable;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableSchemaColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableSchemaColumnArgs $;

        public Builder() {
            $ = new TableSchemaColumnArgs();
        }

        public Builder(TableSchemaColumnArgs defaults) {
            $ = new TableSchemaColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue The column default value.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The column default value.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param isNullable The column nullable flag.
         * 
         * @return builder
         * 
         */
        public Builder isNullable(@Nullable Output<Boolean> isNullable) {
            $.isNullable = isNullable;
            return this;
        }

        /**
         * @param isNullable The column nullable flag.
         * 
         * @return builder
         * 
         */
        public Builder isNullable(Boolean isNullable) {
            return isNullable(Output.of(isNullable));
        }

        /**
         * @param name Table name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Table name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The column type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The column type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableSchemaColumnArgs build() {
            return $;
        }
    }

}
