// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemChannelSourceSslCaCertificateArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlDbSystemChannelSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlDbSystemChannelSourceArgs Empty = new MysqlDbSystemChannelSourceArgs();

    /**
     * The network address of the DB System.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The network address of the DB System.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
     * 
     */
    @Import(name="sslCaCertificates")
    private @Nullable Output<List<MysqlDbSystemChannelSourceSslCaCertificateArgs>> sslCaCertificates;

    /**
     * @return The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
     * 
     */
    public Optional<Output<List<MysqlDbSystemChannelSourceSslCaCertificateArgs>>> sslCaCertificates() {
        return Optional.ofNullable(this.sslCaCertificates);
    }

    /**
     * The SSL mode of the Channel.
     * 
     */
    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    /**
     * @return The SSL mode of the Channel.
     * 
     */
    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    /**
     * The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private MysqlDbSystemChannelSourceArgs() {}

    private MysqlDbSystemChannelSourceArgs(MysqlDbSystemChannelSourceArgs $) {
        this.hostname = $.hostname;
        this.port = $.port;
        this.sourceType = $.sourceType;
        this.sslCaCertificates = $.sslCaCertificates;
        this.sslMode = $.sslMode;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlDbSystemChannelSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlDbSystemChannelSourceArgs $;

        public Builder() {
            $ = new MysqlDbSystemChannelSourceArgs();
        }

        public Builder(MysqlDbSystemChannelSourceArgs defaults) {
            $ = new MysqlDbSystemChannelSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname The network address of the DB System.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The network address of the DB System.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sourceType The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param sslCaCertificates The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificates(@Nullable Output<List<MysqlDbSystemChannelSourceSslCaCertificateArgs>> sslCaCertificates) {
            $.sslCaCertificates = sslCaCertificates;
            return this;
        }

        /**
         * @param sslCaCertificates The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificates(List<MysqlDbSystemChannelSourceSslCaCertificateArgs> sslCaCertificates) {
            return sslCaCertificates(Output.of(sslCaCertificates));
        }

        /**
         * @param sslCaCertificates The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificates(MysqlDbSystemChannelSourceSslCaCertificateArgs... sslCaCertificates) {
            return sslCaCertificates(List.of(sslCaCertificates));
        }

        /**
         * @param sslMode The SSL mode of the Channel.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode The SSL mode of the Channel.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param username The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public MysqlDbSystemChannelSourceArgs build() {
            return $;
        }
    }

}
