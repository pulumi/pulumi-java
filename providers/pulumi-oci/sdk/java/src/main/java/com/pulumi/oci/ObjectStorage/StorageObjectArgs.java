// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ObjectStorage.inputs.StorageObjectSourceUriDetailsArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageObjectArgs Empty = new StorageObjectArgs();

    /**
     * The name of the bucket for the source object.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the bucket for the source object.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * The optional Cache-Control header that defines the caching behavior value to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify objects that require caching restrictions.
     * 
     */
    @Import(name="cacheControl")
    private @Nullable Output<String> cacheControl;

    /**
     * @return The optional Cache-Control header that defines the caching behavior value to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify objects that require caching restrictions.
     * 
     */
    public Optional<Output<String>> cacheControl() {
        return Optional.ofNullable(this.cacheControl);
    }

    /**
     * The object to upload to the object store. Cannot be defined if `source` or `source_uri_details` is defined.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The object to upload to the object store. Cannot be defined if `source` or `source_uri_details` is defined.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The optional Content-Disposition header that defines presentational information for the object to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to let users download objects with custom filenames in a browser.
     * 
     */
    @Import(name="contentDisposition")
    private @Nullable Output<String> contentDisposition;

    /**
     * @return The optional Content-Disposition header that defines presentational information for the object to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to let users download objects with custom filenames in a browser.
     * 
     */
    public Optional<Output<String>> contentDisposition() {
        return Optional.ofNullable(this.contentDisposition);
    }

    /**
     * The optional Content-Encoding header that defines the content encodings that were applied to the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to determine what decoding mechanisms need to be applied to obtain the media-type specified by the Content-Type header of the object.
     * 
     */
    @Import(name="contentEncoding")
    private @Nullable Output<String> contentEncoding;

    /**
     * @return The optional Content-Encoding header that defines the content encodings that were applied to the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to determine what decoding mechanisms need to be applied to obtain the media-type specified by the Content-Type header of the object.
     * 
     */
    public Optional<Output<String>> contentEncoding() {
        return Optional.ofNullable(this.contentEncoding);
    }

    /**
     * The optional Content-Language header that defines the content language of the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and differentiate objects based on a particular language.
     * 
     */
    @Import(name="contentLanguage")
    private @Nullable Output<String> contentLanguage;

    /**
     * @return The optional Content-Language header that defines the content language of the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and differentiate objects based on a particular language.
     * 
     */
    public Optional<Output<String>> contentLanguage() {
        return Optional.ofNullable(this.contentLanguage);
    }

    /**
     * (Updatable) The optional base-64 header that defines the encoded MD5 hash of the body. If the optional Content-MD5 header is present, Object Storage performs an integrity check on the body of the HTTP request by computing the MD5 hash for the body and comparing it to the MD5 hash supplied in the header. If the two hashes do not match, the object is rejected and an HTTP-400 Unmatched Content MD5 error is returned with the message:
     * 
     */
    @Import(name="contentMd5")
    private @Nullable Output<String> contentMd5;

    /**
     * @return (Updatable) The optional base-64 header that defines the encoded MD5 hash of the body. If the optional Content-MD5 header is present, Object Storage performs an integrity check on the body of the HTTP request by computing the MD5 hash for the body and comparing it to the MD5 hash supplied in the header. If the two hashes do not match, the object is rejected and an HTTP-400 Unmatched Content MD5 error is returned with the message:
     * 
     */
    public Optional<Output<String>> contentMd5() {
        return Optional.ofNullable(this.contentMd5);
    }

    /**
     * The optional Content-Type header that defines the standard MIME type format of the object. Content type defaults to &#39;application/octet-stream&#39; if not specified in the PutObject call. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and perform special operations on text only objects.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The optional Content-Type header that defines the standard MIME type format of the object. Content type defaults to &#39;application/octet-stream&#39; if not specified in the PutObject call. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and perform special operations on text only objects.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * (Updatable) A boolean to delete all object versions for an object in a bucket that has or ever had versioning enabled.
     * 
     */
    @Import(name="deleteAllObjectVersions")
    private @Nullable Output<Boolean> deleteAllObjectVersions;

    /**
     * @return (Updatable) A boolean to delete all object versions for an object in a bucket that has or ever had versioning enabled.
     * 
     */
    public Optional<Output<Boolean>> deleteAllObjectVersions() {
        return Optional.ofNullable(this.deleteAllObjectVersions);
    }

    /**
     * Optional user-defined metadata key and value.
     * Note: All specified keys must be in lower case.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,Object>> metadata;

    /**
     * @return Optional user-defined metadata key and value.
     * Note: All specified keys must be in lower case.
     * 
     */
    public Optional<Output<Map<String,Object>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The top-level namespace of the source object.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The top-level namespace of the source object.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The name of the source object.
     * 
     */
    @Import(name="object", required=true)
    private Output<String> object;

    /**
     * @return The name of the source object.
     * 
     */
    public Output<String> object() {
        return this.object;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a master encryption key used to call the Key Management service to generate a data encryption key or to encrypt or decrypt a data encryption key.
     * 
     */
    @Import(name="opcSseKmsKeyId")
    private @Nullable Output<String> opcSseKmsKeyId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a master encryption key used to call the Key Management service to generate a data encryption key or to encrypt or decrypt a data encryption key.
     * 
     */
    public Optional<Output<String>> opcSseKmsKeyId() {
        return Optional.ofNullable(this.opcSseKmsKeyId);
    }

    /**
     * An absolute path to a file on the local system. Cannot be defined if `content` or `source_uri_details` is defined.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return An absolute path to a file on the local system. Cannot be defined if `content` or `source_uri_details` is defined.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Details of the source URI of the object in the cloud. Cannot be defined if `content` or `source` is defined.
     * Note: To enable object copy, you must authorize the service to manage objects on your behalf.
     * 
     */
    @Import(name="sourceUriDetails")
    private @Nullable Output<StorageObjectSourceUriDetailsArgs> sourceUriDetails;

    /**
     * @return Details of the source URI of the object in the cloud. Cannot be defined if `content` or `source` is defined.
     * Note: To enable object copy, you must authorize the service to manage objects on your behalf.
     * 
     */
    public Optional<Output<StorageObjectSourceUriDetailsArgs>> sourceUriDetails() {
        return Optional.ofNullable(this.sourceUriDetails);
    }

    /**
     * (Updatable) The storage tier that the object should be stored in. If not specified, the object will be stored in the same storage tier as the bucket.
     * 
     */
    @Import(name="storageTier")
    private @Nullable Output<String> storageTier;

    /**
     * @return (Updatable) The storage tier that the object should be stored in. If not specified, the object will be stored in the same storage tier as the bucket.
     * 
     */
    public Optional<Output<String>> storageTier() {
        return Optional.ofNullable(this.storageTier);
    }

    private StorageObjectArgs() {}

    private StorageObjectArgs(StorageObjectArgs $) {
        this.bucket = $.bucket;
        this.cacheControl = $.cacheControl;
        this.content = $.content;
        this.contentDisposition = $.contentDisposition;
        this.contentEncoding = $.contentEncoding;
        this.contentLanguage = $.contentLanguage;
        this.contentMd5 = $.contentMd5;
        this.contentType = $.contentType;
        this.deleteAllObjectVersions = $.deleteAllObjectVersions;
        this.metadata = $.metadata;
        this.namespace = $.namespace;
        this.object = $.object;
        this.opcSseKmsKeyId = $.opcSseKmsKeyId;
        this.source = $.source;
        this.sourceUriDetails = $.sourceUriDetails;
        this.storageTier = $.storageTier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageObjectArgs $;

        public Builder() {
            $ = new StorageObjectArgs();
        }

        public Builder(StorageObjectArgs defaults) {
            $ = new StorageObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the bucket for the source object.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the bucket for the source object.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param cacheControl The optional Cache-Control header that defines the caching behavior value to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify objects that require caching restrictions.
         * 
         * @return builder
         * 
         */
        public Builder cacheControl(@Nullable Output<String> cacheControl) {
            $.cacheControl = cacheControl;
            return this;
        }

        /**
         * @param cacheControl The optional Cache-Control header that defines the caching behavior value to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify objects that require caching restrictions.
         * 
         * @return builder
         * 
         */
        public Builder cacheControl(String cacheControl) {
            return cacheControl(Output.of(cacheControl));
        }

        /**
         * @param content The object to upload to the object store. Cannot be defined if `source` or `source_uri_details` is defined.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The object to upload to the object store. Cannot be defined if `source` or `source_uri_details` is defined.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentDisposition The optional Content-Disposition header that defines presentational information for the object to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to let users download objects with custom filenames in a browser.
         * 
         * @return builder
         * 
         */
        public Builder contentDisposition(@Nullable Output<String> contentDisposition) {
            $.contentDisposition = contentDisposition;
            return this;
        }

        /**
         * @param contentDisposition The optional Content-Disposition header that defines presentational information for the object to be returned in GetObject and HeadObject responses. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to let users download objects with custom filenames in a browser.
         * 
         * @return builder
         * 
         */
        public Builder contentDisposition(String contentDisposition) {
            return contentDisposition(Output.of(contentDisposition));
        }

        /**
         * @param contentEncoding The optional Content-Encoding header that defines the content encodings that were applied to the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to determine what decoding mechanisms need to be applied to obtain the media-type specified by the Content-Type header of the object.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(@Nullable Output<String> contentEncoding) {
            $.contentEncoding = contentEncoding;
            return this;
        }

        /**
         * @param contentEncoding The optional Content-Encoding header that defines the content encodings that were applied to the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to determine what decoding mechanisms need to be applied to obtain the media-type specified by the Content-Type header of the object.
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(String contentEncoding) {
            return contentEncoding(Output.of(contentEncoding));
        }

        /**
         * @param contentLanguage The optional Content-Language header that defines the content language of the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and differentiate objects based on a particular language.
         * 
         * @return builder
         * 
         */
        public Builder contentLanguage(@Nullable Output<String> contentLanguage) {
            $.contentLanguage = contentLanguage;
            return this;
        }

        /**
         * @param contentLanguage The optional Content-Language header that defines the content language of the object to upload. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and differentiate objects based on a particular language.
         * 
         * @return builder
         * 
         */
        public Builder contentLanguage(String contentLanguage) {
            return contentLanguage(Output.of(contentLanguage));
        }

        /**
         * @param contentMd5 (Updatable) The optional base-64 header that defines the encoded MD5 hash of the body. If the optional Content-MD5 header is present, Object Storage performs an integrity check on the body of the HTTP request by computing the MD5 hash for the body and comparing it to the MD5 hash supplied in the header. If the two hashes do not match, the object is rejected and an HTTP-400 Unmatched Content MD5 error is returned with the message:
         * 
         * @return builder
         * 
         */
        public Builder contentMd5(@Nullable Output<String> contentMd5) {
            $.contentMd5 = contentMd5;
            return this;
        }

        /**
         * @param contentMd5 (Updatable) The optional base-64 header that defines the encoded MD5 hash of the body. If the optional Content-MD5 header is present, Object Storage performs an integrity check on the body of the HTTP request by computing the MD5 hash for the body and comparing it to the MD5 hash supplied in the header. If the two hashes do not match, the object is rejected and an HTTP-400 Unmatched Content MD5 error is returned with the message:
         * 
         * @return builder
         * 
         */
        public Builder contentMd5(String contentMd5) {
            return contentMd5(Output.of(contentMd5));
        }

        /**
         * @param contentType The optional Content-Type header that defines the standard MIME type format of the object. Content type defaults to &#39;application/octet-stream&#39; if not specified in the PutObject call. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and perform special operations on text only objects.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The optional Content-Type header that defines the standard MIME type format of the object. Content type defaults to &#39;application/octet-stream&#39; if not specified in the PutObject call. Specifying values for this header has no effect on Object Storage behavior. Programs that read the object determine what to do based on the value provided. For example, you could use this header to identify and perform special operations on text only objects.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param deleteAllObjectVersions (Updatable) A boolean to delete all object versions for an object in a bucket that has or ever had versioning enabled.
         * 
         * @return builder
         * 
         */
        public Builder deleteAllObjectVersions(@Nullable Output<Boolean> deleteAllObjectVersions) {
            $.deleteAllObjectVersions = deleteAllObjectVersions;
            return this;
        }

        /**
         * @param deleteAllObjectVersions (Updatable) A boolean to delete all object versions for an object in a bucket that has or ever had versioning enabled.
         * 
         * @return builder
         * 
         */
        public Builder deleteAllObjectVersions(Boolean deleteAllObjectVersions) {
            return deleteAllObjectVersions(Output.of(deleteAllObjectVersions));
        }

        /**
         * @param metadata Optional user-defined metadata key and value.
         * Note: All specified keys must be in lower case.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,Object>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Optional user-defined metadata key and value.
         * Note: All specified keys must be in lower case.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,Object> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param namespace The top-level namespace of the source object.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The top-level namespace of the source object.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param object The name of the source object.
         * 
         * @return builder
         * 
         */
        public Builder object(Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object The name of the source object.
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param opcSseKmsKeyId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a master encryption key used to call the Key Management service to generate a data encryption key or to encrypt or decrypt a data encryption key.
         * 
         * @return builder
         * 
         */
        public Builder opcSseKmsKeyId(@Nullable Output<String> opcSseKmsKeyId) {
            $.opcSseKmsKeyId = opcSseKmsKeyId;
            return this;
        }

        /**
         * @param opcSseKmsKeyId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a master encryption key used to call the Key Management service to generate a data encryption key or to encrypt or decrypt a data encryption key.
         * 
         * @return builder
         * 
         */
        public Builder opcSseKmsKeyId(String opcSseKmsKeyId) {
            return opcSseKmsKeyId(Output.of(opcSseKmsKeyId));
        }

        /**
         * @param source An absolute path to a file on the local system. Cannot be defined if `content` or `source_uri_details` is defined.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source An absolute path to a file on the local system. Cannot be defined if `content` or `source_uri_details` is defined.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceUriDetails Details of the source URI of the object in the cloud. Cannot be defined if `content` or `source` is defined.
         * Note: To enable object copy, you must authorize the service to manage objects on your behalf.
         * 
         * @return builder
         * 
         */
        public Builder sourceUriDetails(@Nullable Output<StorageObjectSourceUriDetailsArgs> sourceUriDetails) {
            $.sourceUriDetails = sourceUriDetails;
            return this;
        }

        /**
         * @param sourceUriDetails Details of the source URI of the object in the cloud. Cannot be defined if `content` or `source` is defined.
         * Note: To enable object copy, you must authorize the service to manage objects on your behalf.
         * 
         * @return builder
         * 
         */
        public Builder sourceUriDetails(StorageObjectSourceUriDetailsArgs sourceUriDetails) {
            return sourceUriDetails(Output.of(sourceUriDetails));
        }

        /**
         * @param storageTier (Updatable) The storage tier that the object should be stored in. If not specified, the object will be stored in the same storage tier as the bucket.
         * 
         * @return builder
         * 
         */
        public Builder storageTier(@Nullable Output<String> storageTier) {
            $.storageTier = storageTier;
            return this;
        }

        /**
         * @param storageTier (Updatable) The storage tier that the object should be stored in. If not specified, the object will be stored in the same storage tier as the bucket.
         * 
         * @return builder
         * 
         */
        public Builder storageTier(String storageTier) {
            return storageTier(Output.of(storageTier));
        }

        public StorageObjectArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.object = Objects.requireNonNull($.object, "expected parameter 'object' to be non-null");
            return $;
        }
    }

}
