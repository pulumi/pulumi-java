// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.BuildPipelineStageBuildPipelineStagePredecessorCollectionItemArgs;
import java.util.List;
import java.util.Objects;


public final class BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs Empty = new BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs();

    /**
     * (Updatable) Collection of artifacts that were generated in the Build stage and need to be pushed to the artifactory stores. In case of UPDATE operation, replaces existing artifacts list. Merging with existing artifacts is not supported.
     * 
     */
    @Import(name="items", required=true)
    private Output<List<BuildPipelineStageBuildPipelineStagePredecessorCollectionItemArgs>> items;

    /**
     * @return (Updatable) Collection of artifacts that were generated in the Build stage and need to be pushed to the artifactory stores. In case of UPDATE operation, replaces existing artifacts list. Merging with existing artifacts is not supported.
     * 
     */
    public Output<List<BuildPipelineStageBuildPipelineStagePredecessorCollectionItemArgs>> items() {
        return this.items;
    }

    private BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs() {}

    private BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs(BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs $) {
        this.items = $.items;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs $;

        public Builder() {
            $ = new BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs();
        }

        public Builder(BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs defaults) {
            $ = new BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param items (Updatable) Collection of artifacts that were generated in the Build stage and need to be pushed to the artifactory stores. In case of UPDATE operation, replaces existing artifacts list. Merging with existing artifacts is not supported.
         * 
         * @return builder
         * 
         */
        public Builder items(Output<List<BuildPipelineStageBuildPipelineStagePredecessorCollectionItemArgs>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items (Updatable) Collection of artifacts that were generated in the Build stage and need to be pushed to the artifactory stores. In case of UPDATE operation, replaces existing artifacts list. Merging with existing artifacts is not supported.
         * 
         * @return builder
         * 
         */
        public Builder items(List<BuildPipelineStageBuildPipelineStagePredecessorCollectionItemArgs> items) {
            return items(Output.of(items));
        }

        /**
         * @param items (Updatable) Collection of artifacts that were generated in the Build stage and need to be pushed to the artifactory stores. In case of UPDATE operation, replaces existing artifacts list. Merging with existing artifacts is not supported.
         * 
         * @return builder
         * 
         */
        public Builder items(BuildPipelineStageBuildPipelineStagePredecessorCollectionItemArgs... items) {
            return items(List.of(items));
        }

        public BuildPipelineStageBuildPipelineStagePredecessorCollectionArgs build() {
            $.items = Objects.requireNonNull($.items, "expected parameter 'items' to be non-null");
            return $;
        }
    }

}
