// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs Empty = new DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs();

    /**
     * (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
     * 
     */
    @Import(name="ifExists")
    private @Nullable Output<String> ifExists;

    /**
     * @return (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
     * 
     */
    public Optional<Output<String>> ifExists() {
        return Optional.ofNullable(this.ifExists);
    }

    /**
     * (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs() {}

    private DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs(DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs $) {
        this.ifExists = $.ifExists;
        this.name = $.name;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs();
        }

        public Builder(DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs defaults) {
            $ = new DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ifExists (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
         * 
         * @return builder
         * 
         */
        public Builder ifExists(@Nullable Output<String> ifExists) {
            $.ifExists = ifExists;
            return this;
        }

        /**
         * @param ifExists (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
         * 
         * @return builder
         * 
         */
        public Builder ifExists(String ifExists) {
            return ifExists(Output.of(ifExists));
        }

        /**
         * @param name (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param values (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
