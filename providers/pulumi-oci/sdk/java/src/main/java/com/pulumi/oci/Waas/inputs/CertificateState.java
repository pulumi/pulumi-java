// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Waas.inputs.CertificateExtensionArgs;
import com.pulumi.oci.Waas.inputs.CertificateIssuerNameArgs;
import com.pulumi.oci.Waas.inputs.CertificatePublicKeyInfoArgs;
import com.pulumi.oci.Waas.inputs.CertificateSubjectNameArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * The data of the SSL certificate.
     * 
     */
    @Import(name="certificateData")
    private @Nullable Output<String> certificateData;

    /**
     * @return The data of the SSL certificate.
     * 
     */
    public Optional<Output<String>> certificateData() {
        return Optional.ofNullable(this.certificateData);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<List<CertificateExtensionArgs>> extensions;

    /**
     * @return Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
     * 
     */
    public Optional<Output<List<CertificateExtensionArgs>>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Set to `true` if the SSL certificate is self-signed.
     * 
     */
    @Import(name="isTrustVerificationDisabled")
    private @Nullable Output<Boolean> isTrustVerificationDisabled;

    /**
     * @return Set to `true` if the SSL certificate is self-signed.
     * 
     */
    public Optional<Output<Boolean>> isTrustVerificationDisabled() {
        return Optional.ofNullable(this.isTrustVerificationDisabled);
    }

    @Import(name="issuedBy")
    private @Nullable Output<String> issuedBy;

    public Optional<Output<String>> issuedBy() {
        return Optional.ofNullable(this.issuedBy);
    }

    /**
     * The issuer of the certificate.
     * 
     */
    @Import(name="issuerNames")
    private @Nullable Output<List<CertificateIssuerNameArgs>> issuerNames;

    /**
     * @return The issuer of the certificate.
     * 
     */
    public Optional<Output<List<CertificateIssuerNameArgs>>> issuerNames() {
        return Optional.ofNullable(this.issuerNames);
    }

    /**
     * The private key of the SSL certificate.
     * 
     */
    @Import(name="privateKeyData")
    private @Nullable Output<String> privateKeyData;

    /**
     * @return The private key of the SSL certificate.
     * 
     */
    public Optional<Output<String>> privateKeyData() {
        return Optional.ofNullable(this.privateKeyData);
    }

    /**
     * Information about the public key and the algorithm used by the public key.
     * 
     */
    @Import(name="publicKeyInfos")
    private @Nullable Output<List<CertificatePublicKeyInfoArgs>> publicKeyInfos;

    /**
     * @return Information about the public key and the algorithm used by the public key.
     * 
     */
    public Optional<Output<List<CertificatePublicKeyInfoArgs>>> publicKeyInfos() {
        return Optional.ofNullable(this.publicKeyInfos);
    }

    /**
     * A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<String> serialNumber;

    /**
     * @return A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
     * 
     */
    public Optional<Output<String>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    /**
     * The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * The current lifecycle state of the SSL certificate.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the SSL certificate.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The entity to be secured by the certificate.
     * 
     */
    @Import(name="subjectNames")
    private @Nullable Output<List<CertificateSubjectNameArgs>> subjectNames;

    /**
     * @return The entity to be secured by the certificate.
     * 
     */
    public Optional<Output<List<CertificateSubjectNameArgs>>> subjectNames() {
        return Optional.ofNullable(this.subjectNames);
    }

    /**
     * The date and time the certificate was created, expressed in RFC 3339 timestamp format.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the certificate was created, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
     * 
     */
    @Import(name="timeNotValidAfter")
    private @Nullable Output<String> timeNotValidAfter;

    /**
     * @return The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<Output<String>> timeNotValidAfter() {
        return Optional.ofNullable(this.timeNotValidAfter);
    }

    /**
     * The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
     * 
     */
    @Import(name="timeNotValidBefore")
    private @Nullable Output<String> timeNotValidBefore;

    /**
     * @return The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<Output<String>> timeNotValidBefore() {
        return Optional.ofNullable(this.timeNotValidBefore);
    }

    /**
     * The version of the encoded certificate.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the encoded certificate.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificateData = $.certificateData;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.extensions = $.extensions;
        this.freeformTags = $.freeformTags;
        this.isTrustVerificationDisabled = $.isTrustVerificationDisabled;
        this.issuedBy = $.issuedBy;
        this.issuerNames = $.issuerNames;
        this.privateKeyData = $.privateKeyData;
        this.publicKeyInfos = $.publicKeyInfos;
        this.serialNumber = $.serialNumber;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.state = $.state;
        this.subjectNames = $.subjectNames;
        this.timeCreated = $.timeCreated;
        this.timeNotValidAfter = $.timeNotValidAfter;
        this.timeNotValidBefore = $.timeNotValidBefore;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateData The data of the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateData(@Nullable Output<String> certificateData) {
            $.certificateData = certificateData;
            return this;
        }

        /**
         * @param certificateData The data of the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateData(String certificateData) {
            return certificateData(Output.of(certificateData));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param extensions Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<List<CertificateExtensionArgs>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
         * 
         * @return builder
         * 
         */
        public Builder extensions(List<CertificateExtensionArgs> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param extensions Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
         * 
         * @return builder
         * 
         */
        public Builder extensions(CertificateExtensionArgs... extensions) {
            return extensions(List.of(extensions));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isTrustVerificationDisabled Set to `true` if the SSL certificate is self-signed.
         * 
         * @return builder
         * 
         */
        public Builder isTrustVerificationDisabled(@Nullable Output<Boolean> isTrustVerificationDisabled) {
            $.isTrustVerificationDisabled = isTrustVerificationDisabled;
            return this;
        }

        /**
         * @param isTrustVerificationDisabled Set to `true` if the SSL certificate is self-signed.
         * 
         * @return builder
         * 
         */
        public Builder isTrustVerificationDisabled(Boolean isTrustVerificationDisabled) {
            return isTrustVerificationDisabled(Output.of(isTrustVerificationDisabled));
        }

        public Builder issuedBy(@Nullable Output<String> issuedBy) {
            $.issuedBy = issuedBy;
            return this;
        }

        public Builder issuedBy(String issuedBy) {
            return issuedBy(Output.of(issuedBy));
        }

        /**
         * @param issuerNames The issuer of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuerNames(@Nullable Output<List<CertificateIssuerNameArgs>> issuerNames) {
            $.issuerNames = issuerNames;
            return this;
        }

        /**
         * @param issuerNames The issuer of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuerNames(List<CertificateIssuerNameArgs> issuerNames) {
            return issuerNames(Output.of(issuerNames));
        }

        /**
         * @param issuerNames The issuer of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuerNames(CertificateIssuerNameArgs... issuerNames) {
            return issuerNames(List.of(issuerNames));
        }

        /**
         * @param privateKeyData The private key of the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyData(@Nullable Output<String> privateKeyData) {
            $.privateKeyData = privateKeyData;
            return this;
        }

        /**
         * @param privateKeyData The private key of the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyData(String privateKeyData) {
            return privateKeyData(Output.of(privateKeyData));
        }

        /**
         * @param publicKeyInfos Information about the public key and the algorithm used by the public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyInfos(@Nullable Output<List<CertificatePublicKeyInfoArgs>> publicKeyInfos) {
            $.publicKeyInfos = publicKeyInfos;
            return this;
        }

        /**
         * @param publicKeyInfos Information about the public key and the algorithm used by the public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyInfos(List<CertificatePublicKeyInfoArgs> publicKeyInfos) {
            return publicKeyInfos(Output.of(publicKeyInfos));
        }

        /**
         * @param publicKeyInfos Information about the public key and the algorithm used by the public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyInfos(CertificatePublicKeyInfoArgs... publicKeyInfos) {
            return publicKeyInfos(List.of(publicKeyInfos));
        }

        /**
         * @param serialNumber A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<String> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        /**
         * @param signatureAlgorithm The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param state The current lifecycle state of the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subjectNames The entity to be secured by the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectNames(@Nullable Output<List<CertificateSubjectNameArgs>> subjectNames) {
            $.subjectNames = subjectNames;
            return this;
        }

        /**
         * @param subjectNames The entity to be secured by the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectNames(List<CertificateSubjectNameArgs> subjectNames) {
            return subjectNames(Output.of(subjectNames));
        }

        /**
         * @param subjectNames The entity to be secured by the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectNames(CertificateSubjectNameArgs... subjectNames) {
            return subjectNames(List.of(subjectNames));
        }

        /**
         * @param timeCreated The date and time the certificate was created, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the certificate was created, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeNotValidAfter The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeNotValidAfter(@Nullable Output<String> timeNotValidAfter) {
            $.timeNotValidAfter = timeNotValidAfter;
            return this;
        }

        /**
         * @param timeNotValidAfter The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeNotValidAfter(String timeNotValidAfter) {
            return timeNotValidAfter(Output.of(timeNotValidAfter));
        }

        /**
         * @param timeNotValidBefore The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeNotValidBefore(@Nullable Output<String> timeNotValidBefore) {
            $.timeNotValidBefore = timeNotValidBefore;
            return this;
        }

        /**
         * @param timeNotValidBefore The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeNotValidBefore(String timeNotValidBefore) {
            return timeNotValidBefore(Output.of(timeNotValidBefore));
        }

        /**
         * @param version The version of the encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CertificateState build() {
            return $;
        }
    }

}
