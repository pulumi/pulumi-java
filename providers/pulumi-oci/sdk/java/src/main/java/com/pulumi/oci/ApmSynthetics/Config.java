// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.ApmSynthetics.ConfigArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigState;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigScriptParameter;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Monitor resource in Oracle Cloud Infrastructure Apm Synthetics service.
 * 
 * Creates a new monitor.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Monitors can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:ApmSynthetics/config:Config test_monitor &#34;monitors/{monitorId}/apmDomainId/{apmDomainId}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:ApmSynthetics/config:Config")
public class Config extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     * 
     */
    @Export(name="apmDomainId", type=String.class, parameters={})
    private Output<String> apmDomainId;

    /**
     * @return (Updatable) The APM domain ID the request is intended for.
     * 
     */
    public Output<String> apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * (Updatable) Details of monitor configuration.
     * 
     */
    @Export(name="configuration", type=ConfigConfiguration.class, parameters={})
    private Output<ConfigConfiguration> configuration;

    /**
     * @return (Updatable) Details of monitor configuration.
     * 
     */
    public Output<ConfigConfiguration> configuration() {
        return this.configuration;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     * 
     */
    @Export(name="isRunOnce", type=Boolean.class, parameters={})
    private Output<Boolean> isRunOnce;

    /**
     * @return (Updatable) If runOnce is enabled, then the monitor will run once.
     * 
     */
    public Output<Boolean> isRunOnce() {
        return this.isRunOnce;
    }
    /**
     * Type of monitor.
     * 
     */
    @Export(name="monitorType", type=String.class, parameters={})
    private Output<String> monitorType;

    /**
     * @return Type of monitor.
     * 
     */
    public Output<String> monitorType() {
        return this.monitorType;
    }
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     * 
     */
    @Export(name="repeatIntervalInSeconds", type=Integer.class, parameters={})
    private Output<Integer> repeatIntervalInSeconds;

    /**
     * @return (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     * 
     */
    public Output<Integer> repeatIntervalInSeconds() {
        return this.repeatIntervalInSeconds;
    }
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    @Export(name="scriptId", type=String.class, parameters={})
    private Output<String> scriptId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    public Output<String> scriptId() {
        return this.scriptId;
    }
    /**
     * Name of the script.
     * 
     */
    @Export(name="scriptName", type=String.class, parameters={})
    private Output<String> scriptName;

    /**
     * @return Name of the script.
     * 
     */
    public Output<String> scriptName() {
        return this.scriptName;
    }
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
     * 
     */
    @Export(name="scriptParameters", type=List.class, parameters={ConfigScriptParameter.class})
    private Output<List<ConfigScriptParameter>> scriptParameters;

    /**
     * @return (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
     * 
     */
    public Output<List<ConfigScriptParameter>> scriptParameters() {
        return this.scriptParameters;
    }
    /**
     * (Updatable) Enables or disables the monitor.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return (Updatable) Enables or disables the monitor.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     * 
     */
    @Export(name="target", type=String.class, parameters={})
    private Output<String> target;

    /**
     * @return (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     * 
     */
    public Output<String> target() {
        return this.target;
    }
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    @Export(name="timeUpdated", type=String.class, parameters={})
    private Output<String> timeUpdated;

    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     * 
     */
    @Export(name="timeoutInSeconds", type=Integer.class, parameters={})
    private Output<Integer> timeoutInSeconds;

    /**
     * @return (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     * 
     */
    public Output<Integer> timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * Number of vantage points where monitor is running.
     * 
     */
    @Export(name="vantagePointCount", type=Integer.class, parameters={})
    private Output<Integer> vantagePointCount;

    /**
     * @return Number of vantage points where monitor is running.
     * 
     */
    public Output<Integer> vantagePointCount() {
        return this.vantagePointCount;
    }
    /**
     * (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     * 
     */
    @Export(name="vantagePoints", type=List.class, parameters={String.class})
    private Output<List<String>> vantagePoints;

    /**
     * @return (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     * 
     */
    public Output<List<String>> vantagePoints() {
        return this.vantagePoints;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Config(String name) {
        this(name, ConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Config(String name, ConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Config(String name, ConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:ApmSynthetics/config:Config", name, args == null ? ConfigArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Config(String name, Output<String> id, @Nullable ConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:ApmSynthetics/config:Config", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Config get(String name, Output<String> id, @Nullable ConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Config(name, id, state, options);
    }
}
