// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetRepositoriesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetRepositoriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoriesArgs Empty = new GetRepositoriesArgs();

    /**
     * The OCID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private Output</* @Nullable */ String> compartmentId;

    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    public Output</* @Nullable */ String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetRepositoriesFilter>> filters;

    public Output</* @Nullable */ List<GetRepositoriesFilter>> filters() {
        return this.filters;
    }

    /**
     * A filter to return only resources that match the entire name given.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * unique project identifier
     * 
     */
    @Import(name="projectId")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return unique project identifier
     * 
     */
    public Output</* @Nullable */ String> projectId() {
        return this.projectId;
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId")
    private Output</* @Nullable */ String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Output</* @Nullable */ String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * A filter to return only resources whose lifecycle state matches the given lifecycle state.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter to return only resources whose lifecycle state matches the given lifecycle state.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetRepositoriesArgs() {}

    private GetRepositoriesArgs(GetRepositoriesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.name = $.name;
        this.projectId = $.projectId;
        this.repositoryId = $.repositoryId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoriesArgs $;

        public Builder() {
            $ = new GetRepositoriesArgs();
        }

        public Builder(GetRepositoriesArgs defaults) {
            $ = new GetRepositoriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output</* @Nullable */ String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(Output</* @Nullable */ List<GetRepositoriesFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetRepositoriesFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRepositoriesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId unique project identifier
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output</* @Nullable */ String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId unique project identifier
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output</* @Nullable */ String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param state A filter to return only resources whose lifecycle state matches the given lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources whose lifecycle state matches the given lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetRepositoriesArgs build() {
            return $;
        }
    }

}
