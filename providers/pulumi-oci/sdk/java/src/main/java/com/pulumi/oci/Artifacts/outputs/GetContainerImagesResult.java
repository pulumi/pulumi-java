// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Artifacts.outputs.GetContainerImagesContainerImageCollection;
import com.pulumi.oci.Artifacts.outputs.GetContainerImagesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerImagesResult {
    /**
     * @return The compartment OCID to which the container image belongs. Inferred from the container repository.
     * 
     */
    private final String compartmentId;
    private final @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The list of container_image_collection.
     * 
     */
    private final List<GetContainerImagesContainerImageCollection> containerImageCollections;
    /**
     * @return The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then &#39;unknown&#39; is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`
     * 
     */
    private final @Nullable String displayName;
    private final @Nullable List<GetContainerImagesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String imageId;
    private final @Nullable Boolean isVersioned;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.
     * 
     */
    private final @Nullable String repositoryId;
    /**
     * @return The container repository name.
     * 
     */
    private final @Nullable String repositoryName;
    /**
     * @return The current state of the container image.
     * 
     */
    private final @Nullable String state;
    /**
     * @return The version name.
     * 
     */
    private final @Nullable String version;

    @CustomType.Constructor
    private GetContainerImagesResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("compartmentIdInSubtree") @Nullable Boolean compartmentIdInSubtree,
        @CustomType.Parameter("containerImageCollections") List<GetContainerImagesContainerImageCollection> containerImageCollections,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("filters") @Nullable List<GetContainerImagesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageId") @Nullable String imageId,
        @CustomType.Parameter("isVersioned") @Nullable Boolean isVersioned,
        @CustomType.Parameter("repositoryId") @Nullable String repositoryId,
        @CustomType.Parameter("repositoryName") @Nullable String repositoryName,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("version") @Nullable String version) {
        this.compartmentId = compartmentId;
        this.compartmentIdInSubtree = compartmentIdInSubtree;
        this.containerImageCollections = containerImageCollections;
        this.displayName = displayName;
        this.filters = filters;
        this.id = id;
        this.imageId = imageId;
        this.isVersioned = isVersioned;
        this.repositoryId = repositoryId;
        this.repositoryName = repositoryName;
        this.state = state;
        this.version = version;
    }

    /**
     * @return The compartment OCID to which the container image belongs. Inferred from the container repository.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The list of container_image_collection.
     * 
     */
    public List<GetContainerImagesContainerImageCollection> containerImageCollections() {
        return this.containerImageCollections;
    }
    /**
     * @return The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then &#39;unknown&#39; is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetContainerImagesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    public Optional<Boolean> isVersioned() {
        return Optional.ofNullable(this.isVersioned);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }
    /**
     * @return The container repository name.
     * 
     */
    public Optional<String> repositoryName() {
        return Optional.ofNullable(this.repositoryName);
    }
    /**
     * @return The current state of the container image.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The version name.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerImagesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private List<GetContainerImagesContainerImageCollection> containerImageCollections;
        private @Nullable String displayName;
        private @Nullable List<GetContainerImagesFilter> filters;
        private String id;
        private @Nullable String imageId;
        private @Nullable Boolean isVersioned;
        private @Nullable String repositoryId;
        private @Nullable String repositoryName;
        private @Nullable String state;
        private @Nullable String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetContainerImagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.containerImageCollections = defaults.containerImageCollections;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.isVersioned = defaults.isVersioned;
    	      this.repositoryId = defaults.repositoryId;
    	      this.repositoryName = defaults.repositoryName;
    	      this.state = defaults.state;
    	      this.version = defaults.version;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        public Builder containerImageCollections(List<GetContainerImagesContainerImageCollection> containerImageCollections) {
            this.containerImageCollections = Objects.requireNonNull(containerImageCollections);
            return this;
        }
        public Builder containerImageCollections(GetContainerImagesContainerImageCollection... containerImageCollections) {
            return containerImageCollections(List.of(containerImageCollections));
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder filters(@Nullable List<GetContainerImagesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetContainerImagesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        public Builder isVersioned(@Nullable Boolean isVersioned) {
            this.isVersioned = isVersioned;
            return this;
        }
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        public Builder repositoryName(@Nullable String repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }        public GetContainerImagesResult build() {
            return new GetContainerImagesResult(compartmentId, compartmentIdInSubtree, containerImageCollections, displayName, filters, id, imageId, isVersioned, repositoryId, repositoryName, state, version);
        }
    }
}
