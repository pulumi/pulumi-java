// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationAdvisorSetting;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDataTransferMediumDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDatapumpSetting;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDumpTransferDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationExcludeObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationGoldenGateDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationIncludeObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationVaultDetail;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMigrationResult {
    /**
     * @return Optional Pre-Migration advisor settings.
     * 
     */
    private final List<GetMigrationAdvisorSetting> advisorSettings;
    /**
     * @return The OCID of the registered on-premises ODMS Agent. Only valid for Offline Migrations.
     * 
     */
    private final String agentId;
    /**
     * @return OCID of the compartment where the secret containing the credentials will be created.
     * 
     */
    private final String compartmentId;
    /**
     * @return OCID of the Secret in the Oracle Cloud Infrastructure vault containing the Migration credentials. Used to store GoldenGate administrator user credentials.
     * 
     */
    private final String credentialsSecretId;
    /**
     * @return Data Transfer Medium details for the Migration.
     * 
     */
    private final List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails;
    /**
     * @return Optional settings for Data Pump Export and Import jobs
     * 
     */
    private final List<GetMigrationDatapumpSetting> datapumpSettings;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Migration Display Name
     * 
     */
    private final String displayName;
    /**
     * @return Optional additional properties for dump transfer.
     * 
     */
    private final List<GetMigrationDumpTransferDetail> dumpTransferDetails;
    /**
     * @return Database objects to exclude from migration. If &#39;includeObjects&#39; are specified, only exclude object types can be specified with general wildcards (.*) for owner and objectName.
     * 
     */
    private final List<GetMigrationExcludeObject> excludeObjects;
    /**
     * @return OCID of the current ODMS Job in execution for the Migration, if any.
     * 
     */
    private final String executingJobId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return Details about Oracle GoldenGate Microservices.
     * 
     */
    private final List<GetMigrationGoldenGateDetail> goldenGateDetails;
    /**
     * @return The OCID of the resource
     * 
     */
    private final String id;
    /**
     * @return Database objects to include from migration.
     * 
     */
    private final List<GetMigrationIncludeObject> includeObjects;
    /**
     * @return Additional status related to the execution and current state of the Migration.
     * 
     */
    private final String lifecycleDetails;
    private final String migrationId;
    /**
     * @return The OCID of the Source Container Database Connection.
     * 
     */
    private final String sourceContainerDatabaseConnectionId;
    /**
     * @return The OCID of the Source Database Connection.
     * 
     */
    private final String sourceDatabaseConnectionId;
    /**
     * @return The current state of the Migration resource.
     * 
     */
    private final String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The OCID of the Target Database Connection.
     * 
     */
    private final String targetDatabaseConnectionId;
    /**
     * @return The time the Migration was created. An RFC3339 formatted datetime string.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time of last Migration. An RFC3339 formatted datetime string.
     * 
     */
    private final String timeLastMigration;
    /**
     * @return The time of the last Migration details update. An RFC3339 formatted datetime string.
     * 
     */
    private final String timeUpdated;
    /**
     * @return Migration type.
     * 
     */
    private final String type;
    /**
     * @return Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
     * 
     */
    private final List<GetMigrationVaultDetail> vaultDetails;
    /**
     * @return Name of a migration phase. The Job will wait after executing this phase until the Resume Job endpoint is called.
     * 
     */
    private final String waitAfter;

    @CustomType.Constructor
    private GetMigrationResult(
        @CustomType.Parameter("advisorSettings") List<GetMigrationAdvisorSetting> advisorSettings,
        @CustomType.Parameter("agentId") String agentId,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("credentialsSecretId") String credentialsSecretId,
        @CustomType.Parameter("dataTransferMediumDetails") List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails,
        @CustomType.Parameter("datapumpSettings") List<GetMigrationDatapumpSetting> datapumpSettings,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("dumpTransferDetails") List<GetMigrationDumpTransferDetail> dumpTransferDetails,
        @CustomType.Parameter("excludeObjects") List<GetMigrationExcludeObject> excludeObjects,
        @CustomType.Parameter("executingJobId") String executingJobId,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("goldenGateDetails") List<GetMigrationGoldenGateDetail> goldenGateDetails,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("includeObjects") List<GetMigrationIncludeObject> includeObjects,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("migrationId") String migrationId,
        @CustomType.Parameter("sourceContainerDatabaseConnectionId") String sourceContainerDatabaseConnectionId,
        @CustomType.Parameter("sourceDatabaseConnectionId") String sourceDatabaseConnectionId,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("targetDatabaseConnectionId") String targetDatabaseConnectionId,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeLastMigration") String timeLastMigration,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("vaultDetails") List<GetMigrationVaultDetail> vaultDetails,
        @CustomType.Parameter("waitAfter") String waitAfter) {
        this.advisorSettings = advisorSettings;
        this.agentId = agentId;
        this.compartmentId = compartmentId;
        this.credentialsSecretId = credentialsSecretId;
        this.dataTransferMediumDetails = dataTransferMediumDetails;
        this.datapumpSettings = datapumpSettings;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.dumpTransferDetails = dumpTransferDetails;
        this.excludeObjects = excludeObjects;
        this.executingJobId = executingJobId;
        this.freeformTags = freeformTags;
        this.goldenGateDetails = goldenGateDetails;
        this.id = id;
        this.includeObjects = includeObjects;
        this.lifecycleDetails = lifecycleDetails;
        this.migrationId = migrationId;
        this.sourceContainerDatabaseConnectionId = sourceContainerDatabaseConnectionId;
        this.sourceDatabaseConnectionId = sourceDatabaseConnectionId;
        this.state = state;
        this.systemTags = systemTags;
        this.targetDatabaseConnectionId = targetDatabaseConnectionId;
        this.timeCreated = timeCreated;
        this.timeLastMigration = timeLastMigration;
        this.timeUpdated = timeUpdated;
        this.type = type;
        this.vaultDetails = vaultDetails;
        this.waitAfter = waitAfter;
    }

    /**
     * @return Optional Pre-Migration advisor settings.
     * 
     */
    public List<GetMigrationAdvisorSetting> advisorSettings() {
        return this.advisorSettings;
    }
    /**
     * @return The OCID of the registered on-premises ODMS Agent. Only valid for Offline Migrations.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return OCID of the compartment where the secret containing the credentials will be created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return OCID of the Secret in the Oracle Cloud Infrastructure vault containing the Migration credentials. Used to store GoldenGate administrator user credentials.
     * 
     */
    public String credentialsSecretId() {
        return this.credentialsSecretId;
    }
    /**
     * @return Data Transfer Medium details for the Migration.
     * 
     */
    public List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails() {
        return this.dataTransferMediumDetails;
    }
    /**
     * @return Optional settings for Data Pump Export and Import jobs
     * 
     */
    public List<GetMigrationDatapumpSetting> datapumpSettings() {
        return this.datapumpSettings;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Migration Display Name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Optional additional properties for dump transfer.
     * 
     */
    public List<GetMigrationDumpTransferDetail> dumpTransferDetails() {
        return this.dumpTransferDetails;
    }
    /**
     * @return Database objects to exclude from migration. If &#39;includeObjects&#39; are specified, only exclude object types can be specified with general wildcards (.*) for owner and objectName.
     * 
     */
    public List<GetMigrationExcludeObject> excludeObjects() {
        return this.excludeObjects;
    }
    /**
     * @return OCID of the current ODMS Job in execution for the Migration, if any.
     * 
     */
    public String executingJobId() {
        return this.executingJobId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Details about Oracle GoldenGate Microservices.
     * 
     */
    public List<GetMigrationGoldenGateDetail> goldenGateDetails() {
        return this.goldenGateDetails;
    }
    /**
     * @return The OCID of the resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Database objects to include from migration.
     * 
     */
    public List<GetMigrationIncludeObject> includeObjects() {
        return this.includeObjects;
    }
    /**
     * @return Additional status related to the execution and current state of the Migration.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String migrationId() {
        return this.migrationId;
    }
    /**
     * @return The OCID of the Source Container Database Connection.
     * 
     */
    public String sourceContainerDatabaseConnectionId() {
        return this.sourceContainerDatabaseConnectionId;
    }
    /**
     * @return The OCID of the Source Database Connection.
     * 
     */
    public String sourceDatabaseConnectionId() {
        return this.sourceDatabaseConnectionId;
    }
    /**
     * @return The current state of the Migration resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The OCID of the Target Database Connection.
     * 
     */
    public String targetDatabaseConnectionId() {
        return this.targetDatabaseConnectionId;
    }
    /**
     * @return The time the Migration was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time of last Migration. An RFC3339 formatted datetime string.
     * 
     */
    public String timeLastMigration() {
        return this.timeLastMigration;
    }
    /**
     * @return The time of the last Migration details update. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Migration type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
     * 
     */
    public List<GetMigrationVaultDetail> vaultDetails() {
        return this.vaultDetails;
    }
    /**
     * @return Name of a migration phase. The Job will wait after executing this phase until the Resume Job endpoint is called.
     * 
     */
    public String waitAfter() {
        return this.waitAfter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetMigrationAdvisorSetting> advisorSettings;
        private String agentId;
        private String compartmentId;
        private String credentialsSecretId;
        private List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails;
        private List<GetMigrationDatapumpSetting> datapumpSettings;
        private Map<String,Object> definedTags;
        private String displayName;
        private List<GetMigrationDumpTransferDetail> dumpTransferDetails;
        private List<GetMigrationExcludeObject> excludeObjects;
        private String executingJobId;
        private Map<String,Object> freeformTags;
        private List<GetMigrationGoldenGateDetail> goldenGateDetails;
        private String id;
        private List<GetMigrationIncludeObject> includeObjects;
        private String lifecycleDetails;
        private String migrationId;
        private String sourceContainerDatabaseConnectionId;
        private String sourceDatabaseConnectionId;
        private String state;
        private Map<String,Object> systemTags;
        private String targetDatabaseConnectionId;
        private String timeCreated;
        private String timeLastMigration;
        private String timeUpdated;
        private String type;
        private List<GetMigrationVaultDetail> vaultDetails;
        private String waitAfter;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMigrationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advisorSettings = defaults.advisorSettings;
    	      this.agentId = defaults.agentId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.credentialsSecretId = defaults.credentialsSecretId;
    	      this.dataTransferMediumDetails = defaults.dataTransferMediumDetails;
    	      this.datapumpSettings = defaults.datapumpSettings;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dumpTransferDetails = defaults.dumpTransferDetails;
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.executingJobId = defaults.executingJobId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.goldenGateDetails = defaults.goldenGateDetails;
    	      this.id = defaults.id;
    	      this.includeObjects = defaults.includeObjects;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationId = defaults.migrationId;
    	      this.sourceContainerDatabaseConnectionId = defaults.sourceContainerDatabaseConnectionId;
    	      this.sourceDatabaseConnectionId = defaults.sourceDatabaseConnectionId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetDatabaseConnectionId = defaults.targetDatabaseConnectionId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastMigration = defaults.timeLastMigration;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.vaultDetails = defaults.vaultDetails;
    	      this.waitAfter = defaults.waitAfter;
        }

        public Builder advisorSettings(List<GetMigrationAdvisorSetting> advisorSettings) {
            this.advisorSettings = Objects.requireNonNull(advisorSettings);
            return this;
        }
        public Builder advisorSettings(GetMigrationAdvisorSetting... advisorSettings) {
            return advisorSettings(List.of(advisorSettings));
        }
        public Builder agentId(String agentId) {
            this.agentId = Objects.requireNonNull(agentId);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder credentialsSecretId(String credentialsSecretId) {
            this.credentialsSecretId = Objects.requireNonNull(credentialsSecretId);
            return this;
        }
        public Builder dataTransferMediumDetails(List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails) {
            this.dataTransferMediumDetails = Objects.requireNonNull(dataTransferMediumDetails);
            return this;
        }
        public Builder dataTransferMediumDetails(GetMigrationDataTransferMediumDetail... dataTransferMediumDetails) {
            return dataTransferMediumDetails(List.of(dataTransferMediumDetails));
        }
        public Builder datapumpSettings(List<GetMigrationDatapumpSetting> datapumpSettings) {
            this.datapumpSettings = Objects.requireNonNull(datapumpSettings);
            return this;
        }
        public Builder datapumpSettings(GetMigrationDatapumpSetting... datapumpSettings) {
            return datapumpSettings(List.of(datapumpSettings));
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder dumpTransferDetails(List<GetMigrationDumpTransferDetail> dumpTransferDetails) {
            this.dumpTransferDetails = Objects.requireNonNull(dumpTransferDetails);
            return this;
        }
        public Builder dumpTransferDetails(GetMigrationDumpTransferDetail... dumpTransferDetails) {
            return dumpTransferDetails(List.of(dumpTransferDetails));
        }
        public Builder excludeObjects(List<GetMigrationExcludeObject> excludeObjects) {
            this.excludeObjects = Objects.requireNonNull(excludeObjects);
            return this;
        }
        public Builder excludeObjects(GetMigrationExcludeObject... excludeObjects) {
            return excludeObjects(List.of(excludeObjects));
        }
        public Builder executingJobId(String executingJobId) {
            this.executingJobId = Objects.requireNonNull(executingJobId);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder goldenGateDetails(List<GetMigrationGoldenGateDetail> goldenGateDetails) {
            this.goldenGateDetails = Objects.requireNonNull(goldenGateDetails);
            return this;
        }
        public Builder goldenGateDetails(GetMigrationGoldenGateDetail... goldenGateDetails) {
            return goldenGateDetails(List.of(goldenGateDetails));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder includeObjects(List<GetMigrationIncludeObject> includeObjects) {
            this.includeObjects = Objects.requireNonNull(includeObjects);
            return this;
        }
        public Builder includeObjects(GetMigrationIncludeObject... includeObjects) {
            return includeObjects(List.of(includeObjects));
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder migrationId(String migrationId) {
            this.migrationId = Objects.requireNonNull(migrationId);
            return this;
        }
        public Builder sourceContainerDatabaseConnectionId(String sourceContainerDatabaseConnectionId) {
            this.sourceContainerDatabaseConnectionId = Objects.requireNonNull(sourceContainerDatabaseConnectionId);
            return this;
        }
        public Builder sourceDatabaseConnectionId(String sourceDatabaseConnectionId) {
            this.sourceDatabaseConnectionId = Objects.requireNonNull(sourceDatabaseConnectionId);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder targetDatabaseConnectionId(String targetDatabaseConnectionId) {
            this.targetDatabaseConnectionId = Objects.requireNonNull(targetDatabaseConnectionId);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeLastMigration(String timeLastMigration) {
            this.timeLastMigration = Objects.requireNonNull(timeLastMigration);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder vaultDetails(List<GetMigrationVaultDetail> vaultDetails) {
            this.vaultDetails = Objects.requireNonNull(vaultDetails);
            return this;
        }
        public Builder vaultDetails(GetMigrationVaultDetail... vaultDetails) {
            return vaultDetails(List.of(vaultDetails));
        }
        public Builder waitAfter(String waitAfter) {
            this.waitAfter = Objects.requireNonNull(waitAfter);
            return this;
        }        public GetMigrationResult build() {
            return new GetMigrationResult(advisorSettings, agentId, compartmentId, credentialsSecretId, dataTransferMediumDetails, datapumpSettings, definedTags, displayName, dumpTransferDetails, excludeObjects, executingJobId, freeformTags, goldenGateDetails, id, includeObjects, lifecycleDetails, migrationId, sourceContainerDatabaseConnectionId, sourceDatabaseConnectionId, state, systemTags, targetDatabaseConnectionId, timeCreated, timeLastMigration, timeUpdated, type, vaultDetails, waitAfter);
        }
    }
}
