// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataCatalog.inputs.GetDataAssetsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataAssetsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataAssetsArgs Empty = new GetDataAssetsArgs();

    /**
     * Unique catalog identifier.
     * 
     */
    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    /**
     * @return Unique catalog identifier.
     * 
     */
    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * OCID of the user who created the resource.
     * 
     */
    @Import(name="createdById")
    private @Nullable Output<String> createdById;

    /**
     * @return OCID of the user who created the resource.
     * 
     */
    public Optional<Output<String>> createdById() {
        return Optional.ofNullable(this.createdById);
    }

    /**
     * A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable Output<String> displayNameContains;

    /**
     * @return A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
     * 
     */
    public Optional<Output<String>> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * Unique external identifier of this resource in the external source system.
     * 
     */
    @Import(name="externalKey")
    private @Nullable Output<String> externalKey;

    /**
     * @return Unique external identifier of this resource in the external source system.
     * 
     */
    public Optional<Output<String>> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }

    /**
     * Specifies the fields to return in a data asset summary response.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Specifies the fields to return in a data asset summary response.
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDataAssetsFilterArgs>> filters;

    public Optional<Output<List<GetDataAssetsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The key of the object type.
     * 
     */
    @Import(name="typeKey")
    private @Nullable Output<String> typeKey;

    /**
     * @return The key of the object type.
     * 
     */
    public Optional<Output<String>> typeKey() {
        return Optional.ofNullable(this.typeKey);
    }

    private GetDataAssetsArgs() {}

    private GetDataAssetsArgs(GetDataAssetsArgs $) {
        this.catalogId = $.catalogId;
        this.createdById = $.createdById;
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.externalKey = $.externalKey;
        this.fields = $.fields;
        this.filters = $.filters;
        this.state = $.state;
        this.typeKey = $.typeKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataAssetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataAssetsArgs $;

        public Builder() {
            $ = new GetDataAssetsArgs();
        }

        public Builder(GetDataAssetsArgs defaults) {
            $ = new GetDataAssetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param createdById OCID of the user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdById(@Nullable Output<String> createdById) {
            $.createdById = createdById;
            return this;
        }

        /**
         * @param createdById OCID of the user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdById(String createdById) {
            return createdById(Output.of(createdById));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given. The match is not case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given. The match is not case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param displayNameContains A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable Output<String> displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNameContains A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(String displayNameContains) {
            return displayNameContains(Output.of(displayNameContains));
        }

        /**
         * @param externalKey Unique external identifier of this resource in the external source system.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(@Nullable Output<String> externalKey) {
            $.externalKey = externalKey;
            return this;
        }

        /**
         * @param externalKey Unique external identifier of this resource in the external source system.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(String externalKey) {
            return externalKey(Output.of(externalKey));
        }

        /**
         * @param fields Specifies the fields to return in a data asset summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to return in a data asset summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Specifies the fields to return in a data asset summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable Output<List<GetDataAssetsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDataAssetsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDataAssetsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param typeKey The key of the object type.
         * 
         * @return builder
         * 
         */
        public Builder typeKey(@Nullable Output<String> typeKey) {
            $.typeKey = typeKey;
            return this;
        }

        /**
         * @param typeKey The key of the object type.
         * 
         * @return builder
         * 
         */
        public Builder typeKey(String typeKey) {
            return typeKey(Output.of(typeKey));
        }

        public GetDataAssetsArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            return $;
        }
    }

}
