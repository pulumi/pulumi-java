// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.MaskingPoliciesMaskingColumnMaskingFormatArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaskingPoliciesMaskingColumnState extends com.pulumi.resources.ResourceArgs {

    public static final MaskingPoliciesMaskingColumnState Empty = new MaskingPoliciesMaskingColumnState();

    /**
     * An array of child columns that are in referential relationship with the masking column.
     * 
     */
    @Import(name="childColumns")
    private @Nullable Output<List<String>> childColumns;

    /**
     * @return An array of child columns that are in referential relationship with the masking column.
     * 
     */
    public Optional<Output<List<String>>> childColumns() {
        return Optional.ofNullable(this.childColumns);
    }

    /**
     * (Updatable) The name of the substitution column.
     * 
     */
    @Import(name="columnName")
    private @Nullable Output<String> columnName;

    /**
     * @return (Updatable) The name of the substitution column.
     * 
     */
    public Optional<Output<String>> columnName() {
        return Optional.ofNullable(this.columnName);
    }

    /**
     * The data type of the masking column.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return The data type of the masking column.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * (Updatable) Indicates if data masking is enabled for the masking column. Set it to false if  you don&#39;t want to mask the column.
     * 
     */
    @Import(name="isMaskingEnabled")
    private @Nullable Output<Boolean> isMaskingEnabled;

    /**
     * @return (Updatable) Indicates if data masking is enabled for the masking column. Set it to false if  you don&#39;t want to mask the column.
     * 
     */
    public Optional<Output<Boolean>> isMaskingEnabled() {
        return Optional.ofNullable(this.isMaskingEnabled);
    }

    /**
     * The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Details about the current state of the masking column.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Details about the current state of the masking column.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * (Updatable) The group of the masking column. It&#39;s a masking group identifier and can be any string  of acceptable length. All the columns in a group are masked together to ensure that  the masked data across these columns continue to retain the same logical relationship.  For more details, check  &lt;a href=https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037&gt;Group Masking in the Data Safe documentation.&lt;/a&gt;
     * 
     */
    @Import(name="maskingColumnGroup")
    private @Nullable Output<String> maskingColumnGroup;

    /**
     * @return (Updatable) The group of the masking column. It&#39;s a masking group identifier and can be any string  of acceptable length. All the columns in a group are masked together to ensure that  the masked data across these columns continue to retain the same logical relationship.  For more details, check  &lt;a href=https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037&gt;Group Masking in the Data Safe documentation.&lt;/a&gt;
     * 
     */
    public Optional<Output<String>> maskingColumnGroup() {
        return Optional.ofNullable(this.maskingColumnGroup);
    }

    /**
     * (Updatable) The masking formats to be assigned to the masking column. You can specify a condition  as part of each masking format. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions. A masking format can have one or more format  entries. The combined output of all the format entries is used for masking. It  provides the flexibility to define a masking format that can generate different parts  of a data value separately and then combine them to get the final data value for masking.
     * 
     */
    @Import(name="maskingFormats")
    private @Nullable Output<List<MaskingPoliciesMaskingColumnMaskingFormatArgs>> maskingFormats;

    /**
     * @return (Updatable) The masking formats to be assigned to the masking column. You can specify a condition  as part of each masking format. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions. A masking format can have one or more format  entries. The combined output of all the format entries is used for masking. It  provides the flexibility to define a masking format that can generate different parts  of a data value separately and then combine them to get the final data value for masking.
     * 
     */
    public Optional<Output<List<MaskingPoliciesMaskingColumnMaskingFormatArgs>>> maskingFormats() {
        return Optional.ofNullable(this.maskingFormats);
    }

    /**
     * The OCID of the masking policy.
     * 
     */
    @Import(name="maskingPolicyId")
    private @Nullable Output<String> maskingPolicyId;

    /**
     * @return The OCID of the masking policy.
     * 
     */
    public Optional<Output<String>> maskingPolicyId() {
        return Optional.ofNullable(this.maskingPolicyId);
    }

    /**
     * The name of the object (table or editioning view) that contains the database column. This attribute cannot be updated for an existing masking column.
     * 
     */
    @Import(name="object")
    private @Nullable Output<String> object;

    /**
     * @return The name of the object (table or editioning view) that contains the database column. This attribute cannot be updated for an existing masking column.
     * 
     */
    public Optional<Output<String>> object() {
        return Optional.ofNullable(this.object);
    }

    /**
     * (Updatable) The type of the object that contains the database column.
     * 
     */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @return (Updatable) The type of the object that contains the database column.
     * 
     */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    /**
     * The name of the schema that contains the database column. This attribute cannot be updated for an existing masking column.
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    /**
     * @return The name of the schema that contains the database column. This attribute cannot be updated for an existing masking column.
     * 
     */
    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * (Updatable) The OCID of the sensitive type to be associated with the masking column. Note that  if the maskingFormats attribute isn&#39;t provided while creating a masking column,   the default masking format associated with the specified sensitive type is assigned  to the masking column.
     * 
     */
    @Import(name="sensitiveTypeId")
    private @Nullable Output<String> sensitiveTypeId;

    /**
     * @return (Updatable) The OCID of the sensitive type to be associated with the masking column. Note that  if the maskingFormats attribute isn&#39;t provided while creating a masking column,   the default masking format associated with the specified sensitive type is assigned  to the masking column.
     * 
     */
    public Optional<Output<String>> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }

    /**
     * The current state of the masking column.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the masking column.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private MaskingPoliciesMaskingColumnState() {}

    private MaskingPoliciesMaskingColumnState(MaskingPoliciesMaskingColumnState $) {
        this.childColumns = $.childColumns;
        this.columnName = $.columnName;
        this.dataType = $.dataType;
        this.isMaskingEnabled = $.isMaskingEnabled;
        this.key = $.key;
        this.lifecycleDetails = $.lifecycleDetails;
        this.maskingColumnGroup = $.maskingColumnGroup;
        this.maskingFormats = $.maskingFormats;
        this.maskingPolicyId = $.maskingPolicyId;
        this.object = $.object;
        this.objectType = $.objectType;
        this.schemaName = $.schemaName;
        this.sensitiveTypeId = $.sensitiveTypeId;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaskingPoliciesMaskingColumnState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaskingPoliciesMaskingColumnState $;

        public Builder() {
            $ = new MaskingPoliciesMaskingColumnState();
        }

        public Builder(MaskingPoliciesMaskingColumnState defaults) {
            $ = new MaskingPoliciesMaskingColumnState(Objects.requireNonNull(defaults));
        }

        /**
         * @param childColumns An array of child columns that are in referential relationship with the masking column.
         * 
         * @return builder
         * 
         */
        public Builder childColumns(@Nullable Output<List<String>> childColumns) {
            $.childColumns = childColumns;
            return this;
        }

        /**
         * @param childColumns An array of child columns that are in referential relationship with the masking column.
         * 
         * @return builder
         * 
         */
        public Builder childColumns(List<String> childColumns) {
            return childColumns(Output.of(childColumns));
        }

        /**
         * @param childColumns An array of child columns that are in referential relationship with the masking column.
         * 
         * @return builder
         * 
         */
        public Builder childColumns(String... childColumns) {
            return childColumns(List.of(childColumns));
        }

        /**
         * @param columnName (Updatable) The name of the substitution column.
         * 
         * @return builder
         * 
         */
        public Builder columnName(@Nullable Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName (Updatable) The name of the substitution column.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param dataType The data type of the masking column.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The data type of the masking column.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param isMaskingEnabled (Updatable) Indicates if data masking is enabled for the masking column. Set it to false if  you don&#39;t want to mask the column.
         * 
         * @return builder
         * 
         */
        public Builder isMaskingEnabled(@Nullable Output<Boolean> isMaskingEnabled) {
            $.isMaskingEnabled = isMaskingEnabled;
            return this;
        }

        /**
         * @param isMaskingEnabled (Updatable) Indicates if data masking is enabled for the masking column. Set it to false if  you don&#39;t want to mask the column.
         * 
         * @return builder
         * 
         */
        public Builder isMaskingEnabled(Boolean isMaskingEnabled) {
            return isMaskingEnabled(Output.of(isMaskingEnabled));
        }

        /**
         * @param key The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param lifecycleDetails Details about the current state of the masking column.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Details about the current state of the masking column.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param maskingColumnGroup (Updatable) The group of the masking column. It&#39;s a masking group identifier and can be any string  of acceptable length. All the columns in a group are masked together to ensure that  the masked data across these columns continue to retain the same logical relationship.  For more details, check  &lt;a href=https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037&gt;Group Masking in the Data Safe documentation.&lt;/a&gt;
         * 
         * @return builder
         * 
         */
        public Builder maskingColumnGroup(@Nullable Output<String> maskingColumnGroup) {
            $.maskingColumnGroup = maskingColumnGroup;
            return this;
        }

        /**
         * @param maskingColumnGroup (Updatable) The group of the masking column. It&#39;s a masking group identifier and can be any string  of acceptable length. All the columns in a group are masked together to ensure that  the masked data across these columns continue to retain the same logical relationship.  For more details, check  &lt;a href=https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037&gt;Group Masking in the Data Safe documentation.&lt;/a&gt;
         * 
         * @return builder
         * 
         */
        public Builder maskingColumnGroup(String maskingColumnGroup) {
            return maskingColumnGroup(Output.of(maskingColumnGroup));
        }

        /**
         * @param maskingFormats (Updatable) The masking formats to be assigned to the masking column. You can specify a condition  as part of each masking format. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions. A masking format can have one or more format  entries. The combined output of all the format entries is used for masking. It  provides the flexibility to define a masking format that can generate different parts  of a data value separately and then combine them to get the final data value for masking.
         * 
         * @return builder
         * 
         */
        public Builder maskingFormats(@Nullable Output<List<MaskingPoliciesMaskingColumnMaskingFormatArgs>> maskingFormats) {
            $.maskingFormats = maskingFormats;
            return this;
        }

        /**
         * @param maskingFormats (Updatable) The masking formats to be assigned to the masking column. You can specify a condition  as part of each masking format. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions. A masking format can have one or more format  entries. The combined output of all the format entries is used for masking. It  provides the flexibility to define a masking format that can generate different parts  of a data value separately and then combine them to get the final data value for masking.
         * 
         * @return builder
         * 
         */
        public Builder maskingFormats(List<MaskingPoliciesMaskingColumnMaskingFormatArgs> maskingFormats) {
            return maskingFormats(Output.of(maskingFormats));
        }

        /**
         * @param maskingFormats (Updatable) The masking formats to be assigned to the masking column. You can specify a condition  as part of each masking format. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions. A masking format can have one or more format  entries. The combined output of all the format entries is used for masking. It  provides the flexibility to define a masking format that can generate different parts  of a data value separately and then combine them to get the final data value for masking.
         * 
         * @return builder
         * 
         */
        public Builder maskingFormats(MaskingPoliciesMaskingColumnMaskingFormatArgs... maskingFormats) {
            return maskingFormats(List.of(maskingFormats));
        }

        /**
         * @param maskingPolicyId The OCID of the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicyId(@Nullable Output<String> maskingPolicyId) {
            $.maskingPolicyId = maskingPolicyId;
            return this;
        }

        /**
         * @param maskingPolicyId The OCID of the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicyId(String maskingPolicyId) {
            return maskingPolicyId(Output.of(maskingPolicyId));
        }

        /**
         * @param object The name of the object (table or editioning view) that contains the database column. This attribute cannot be updated for an existing masking column.
         * 
         * @return builder
         * 
         */
        public Builder object(@Nullable Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object The name of the object (table or editioning view) that contains the database column. This attribute cannot be updated for an existing masking column.
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param objectType (Updatable) The type of the object that contains the database column.
         * 
         * @return builder
         * 
         */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType (Updatable) The type of the object that contains the database column.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        /**
         * @param schemaName The name of the schema that contains the database column. This attribute cannot be updated for an existing masking column.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The name of the schema that contains the database column. This attribute cannot be updated for an existing masking column.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param sensitiveTypeId (Updatable) The OCID of the sensitive type to be associated with the masking column. Note that  if the maskingFormats attribute isn&#39;t provided while creating a masking column,   the default masking format associated with the specified sensitive type is assigned  to the masking column.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeId(@Nullable Output<String> sensitiveTypeId) {
            $.sensitiveTypeId = sensitiveTypeId;
            return this;
        }

        /**
         * @param sensitiveTypeId (Updatable) The OCID of the sensitive type to be associated with the masking column. Note that  if the maskingFormats attribute isn&#39;t provided while creating a masking column,   the default masking format associated with the specified sensitive type is assigned  to the masking column.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeId(String sensitiveTypeId) {
            return sensitiveTypeId(Output.of(sensitiveTypeId));
        }

        /**
         * @param state The current state of the masking column.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the masking column.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public MaskingPoliciesMaskingColumnState build() {
            return $;
        }
    }

}
