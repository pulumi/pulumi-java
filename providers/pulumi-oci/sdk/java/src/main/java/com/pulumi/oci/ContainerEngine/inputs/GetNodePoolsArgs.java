// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ContainerEngine.inputs.GetNodePoolsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetNodePoolsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodePoolsArgs Empty = new GetNodePoolsArgs();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="clusterId")
    private Output</* @Nullable */ String> clusterId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output</* @Nullable */ String> clusterId() {
        return this.clusterId;
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetNodePoolsFilter>> filters;

    public Output</* @Nullable */ List<GetNodePoolsFilter>> filters() {
        return this.filters;
    }

    /**
     * The name to filter on.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return The name to filter on.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    private GetNodePoolsArgs() {}

    private GetNodePoolsArgs(GetNodePoolsArgs $) {
        this.clusterId = $.clusterId;
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodePoolsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodePoolsArgs $;

        public Builder() {
            $ = new GetNodePoolsArgs();
        }

        public Builder(GetNodePoolsArgs defaults) {
            $ = new GetNodePoolsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output</* @Nullable */ String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(Output</* @Nullable */ List<GetNodePoolsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetNodePoolsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetNodePoolsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name The name to filter on.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name to filter on.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        public GetNodePoolsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
