// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionSshDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionSshDetailsArgs Empty = new ConnectionSshDetailsArgs();

    /**
     * (Updatable) Name of the host the SSH key is valid for.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return (Updatable) Name of the host the SSH key is valid for.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * (Updatable) Private SSH key string.
     * 
     */
    @Import(name="sshkey", required=true)
    private Output<String> sshkey;

    /**
     * @return (Updatable) Private SSH key string.
     * 
     */
    public Output<String> sshkey() {
        return this.sshkey;
    }

    /**
     * (Updatable) Sudo location
     * 
     */
    @Import(name="sudoLocation")
    private @Nullable Output<String> sudoLocation;

    /**
     * @return (Updatable) Sudo location
     * 
     */
    public Optional<Output<String>> sudoLocation() {
        return Optional.ofNullable(this.sudoLocation);
    }

    /**
     * (Updatable) SSH user
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return (Updatable) SSH user
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    private ConnectionSshDetailsArgs() {}

    private ConnectionSshDetailsArgs(ConnectionSshDetailsArgs $) {
        this.host = $.host;
        this.sshkey = $.sshkey;
        this.sudoLocation = $.sudoLocation;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionSshDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionSshDetailsArgs $;

        public Builder() {
            $ = new ConnectionSshDetailsArgs();
        }

        public Builder(ConnectionSshDetailsArgs defaults) {
            $ = new ConnectionSshDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host (Updatable) Name of the host the SSH key is valid for.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) Name of the host the SSH key is valid for.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param sshkey (Updatable) Private SSH key string.
         * 
         * @return builder
         * 
         */
        public Builder sshkey(Output<String> sshkey) {
            $.sshkey = sshkey;
            return this;
        }

        /**
         * @param sshkey (Updatable) Private SSH key string.
         * 
         * @return builder
         * 
         */
        public Builder sshkey(String sshkey) {
            return sshkey(Output.of(sshkey));
        }

        /**
         * @param sudoLocation (Updatable) Sudo location
         * 
         * @return builder
         * 
         */
        public Builder sudoLocation(@Nullable Output<String> sudoLocation) {
            $.sudoLocation = sudoLocation;
            return this;
        }

        /**
         * @param sudoLocation (Updatable) Sudo location
         * 
         * @return builder
         * 
         */
        public Builder sudoLocation(String sudoLocation) {
            return sudoLocation(Output.of(sudoLocation));
        }

        /**
         * @param user (Updatable) SSH user
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user (Updatable) SSH user
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ConnectionSshDetailsArgs build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.sshkey = Objects.requireNonNull($.sshkey, "expected parameter 'sshkey' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            return $;
        }
    }

}
