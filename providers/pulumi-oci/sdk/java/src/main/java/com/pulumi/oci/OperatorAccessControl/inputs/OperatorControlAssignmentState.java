// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OperatorControlAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final OperatorControlAssignmentState Empty = new OperatorControlAssignmentState();

    /**
     * The OCID of the user who created this operator control assignment.
     * 
     */
    @Import(name="assignerId")
    private @Nullable Output<String> assignerId;

    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    public Optional<Output<String>> assignerId() {
        return Optional.ofNullable(this.assignerId);
    }

    /**
     * (Updatable) Comment about the assignment of the operator control to this target resource.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return (Updatable) Comment about the assignment of the operator control to this target resource.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (Updatable) The OCID of the compartment that contains the operator control assignment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment that contains the operator control assignment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * description containing reason for releasing of OperatorControl.
     * 
     */
    @Import(name="detachmentDescription")
    private @Nullable Output<String> detachmentDescription;

    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    public Optional<Output<String>> detachmentDescription() {
        return Optional.ofNullable(this.detachmentDescription);
    }

    /**
     * The code identifying the error occurred during Assignment operation.
     * 
     */
    @Import(name="errorCode")
    private @Nullable Output<Integer> errorCode;

    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    public Optional<Output<Integer>> errorCode() {
        return Optional.ofNullable(this.errorCode);
    }

    /**
     * The message describing the error occurred during Assignment operation.
     * 
     */
    @Import(name="errorMessage")
    private @Nullable Output<String> errorMessage;

    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    public Optional<Output<String>> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The boolean if true would autoApprove during maintenance.
     * 
     */
    @Import(name="isAutoApproveDuringMaintenance")
    private @Nullable Output<Boolean> isAutoApproveDuringMaintenance;

    /**
     * @return (Updatable) The boolean if true would autoApprove during maintenance.
     * 
     */
    public Optional<Output<Boolean>> isAutoApproveDuringMaintenance() {
        return Optional.ofNullable(this.isAutoApproveDuringMaintenance);
    }

    /**
     * (Updatable) If set, then the target resource is always governed by the operator control.
     * 
     */
    @Import(name="isEnforcedAlways")
    private @Nullable Output<Boolean> isEnforcedAlways;

    /**
     * @return (Updatable) If set, then the target resource is always governed by the operator control.
     * 
     */
    public Optional<Output<Boolean>> isEnforcedAlways() {
        return Optional.ofNullable(this.isEnforcedAlways);
    }

    /**
     * (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
     * 
     */
    @Import(name="isLogForwarded")
    private @Nullable Output<Boolean> isLogForwarded;

    /**
     * @return (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
     * 
     */
    public Optional<Output<Boolean>> isLogForwarded() {
        return Optional.ofNullable(this.isLogForwarded);
    }

    /**
     * The OCID of the operator control that is being assigned to a target resource.
     * 
     */
    @Import(name="operatorControlId")
    private @Nullable Output<String> operatorControlId;

    /**
     * @return The OCID of the operator control that is being assigned to a target resource.
     * 
     */
    public Optional<Output<String>> operatorControlId() {
        return Optional.ofNullable(this.operatorControlId);
    }

    /**
     * (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
     * 
     */
    @Import(name="remoteSyslogServerAddress")
    private @Nullable Output<String> remoteSyslogServerAddress;

    /**
     * @return (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
     * 
     */
    public Optional<Output<String>> remoteSyslogServerAddress() {
        return Optional.ofNullable(this.remoteSyslogServerAddress);
    }

    /**
     * (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
     * 
     */
    @Import(name="remoteSyslogServerCaCert")
    private @Nullable Output<String> remoteSyslogServerCaCert;

    /**
     * @return (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
     * 
     */
    public Optional<Output<String>> remoteSyslogServerCaCert() {
        return Optional.ofNullable(this.remoteSyslogServerCaCert);
    }

    /**
     * (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    @Import(name="remoteSyslogServerPort")
    private @Nullable Output<Integer> remoteSyslogServerPort;

    /**
     * @return (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    public Optional<Output<Integer>> remoteSyslogServerPort() {
        return Optional.ofNullable(this.remoteSyslogServerPort);
    }

    /**
     * The OCID of the compartment that contains the target resource.
     * 
     */
    @Import(name="resourceCompartmentId")
    private @Nullable Output<String> resourceCompartmentId;

    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    public Optional<Output<String>> resourceCompartmentId() {
        return Optional.ofNullable(this.resourceCompartmentId);
    }

    /**
     * The OCID of the target resource being brought under the governance of the operator control.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The OCID of the target resource being brought under the governance of the operator control.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Name of the target resource.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return Name of the target resource.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * Type of the target resource.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return Type of the target resource.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The current lifcycle state of the OperatorControl.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifcycle state of the OperatorControl.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    @Import(name="timeAssignmentFrom")
    private @Nullable Output<String> timeAssignmentFrom;

    /**
     * @return (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<Output<String>> timeAssignmentFrom() {
        return Optional.ofNullable(this.timeAssignmentFrom);
    }

    /**
     * (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    @Import(name="timeAssignmentTo")
    private @Nullable Output<String> timeAssignmentTo;

    /**
     * @return (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<Output<String>> timeAssignmentTo() {
        return Optional.ofNullable(this.timeAssignmentTo);
    }

    /**
     * Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    @Import(name="timeOfAssignment")
    private @Nullable Output<String> timeOfAssignment;

    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<Output<String>> timeOfAssignment() {
        return Optional.ofNullable(this.timeOfAssignment);
    }

    /**
     * Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    @Import(name="timeOfDeletion")
    private @Nullable Output<String> timeOfDeletion;

    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<Output<String>> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }

    /**
     * User id who released the operatorControl.
     * 
     */
    @Import(name="unassignerId")
    private @Nullable Output<String> unassignerId;

    /**
     * @return User id who released the operatorControl.
     * 
     */
    public Optional<Output<String>> unassignerId() {
        return Optional.ofNullable(this.unassignerId);
    }

    private OperatorControlAssignmentState() {}

    private OperatorControlAssignmentState(OperatorControlAssignmentState $) {
        this.assignerId = $.assignerId;
        this.comment = $.comment;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.detachmentDescription = $.detachmentDescription;
        this.errorCode = $.errorCode;
        this.errorMessage = $.errorMessage;
        this.freeformTags = $.freeformTags;
        this.isAutoApproveDuringMaintenance = $.isAutoApproveDuringMaintenance;
        this.isEnforcedAlways = $.isEnforcedAlways;
        this.isLogForwarded = $.isLogForwarded;
        this.operatorControlId = $.operatorControlId;
        this.remoteSyslogServerAddress = $.remoteSyslogServerAddress;
        this.remoteSyslogServerCaCert = $.remoteSyslogServerCaCert;
        this.remoteSyslogServerPort = $.remoteSyslogServerPort;
        this.resourceCompartmentId = $.resourceCompartmentId;
        this.resourceId = $.resourceId;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
        this.state = $.state;
        this.timeAssignmentFrom = $.timeAssignmentFrom;
        this.timeAssignmentTo = $.timeAssignmentTo;
        this.timeOfAssignment = $.timeOfAssignment;
        this.timeOfDeletion = $.timeOfDeletion;
        this.unassignerId = $.unassignerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OperatorControlAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OperatorControlAssignmentState $;

        public Builder() {
            $ = new OperatorControlAssignmentState();
        }

        public Builder(OperatorControlAssignmentState defaults) {
            $ = new OperatorControlAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignerId The OCID of the user who created this operator control assignment.
         * 
         * @return builder
         * 
         */
        public Builder assignerId(@Nullable Output<String> assignerId) {
            $.assignerId = assignerId;
            return this;
        }

        /**
         * @param assignerId The OCID of the user who created this operator control assignment.
         * 
         * @return builder
         * 
         */
        public Builder assignerId(String assignerId) {
            return assignerId(Output.of(assignerId));
        }

        /**
         * @param comment (Updatable) Comment about the assignment of the operator control to this target resource.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment (Updatable) Comment about the assignment of the operator control to this target resource.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment that contains the operator control assignment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment that contains the operator control assignment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param detachmentDescription description containing reason for releasing of OperatorControl.
         * 
         * @return builder
         * 
         */
        public Builder detachmentDescription(@Nullable Output<String> detachmentDescription) {
            $.detachmentDescription = detachmentDescription;
            return this;
        }

        /**
         * @param detachmentDescription description containing reason for releasing of OperatorControl.
         * 
         * @return builder
         * 
         */
        public Builder detachmentDescription(String detachmentDescription) {
            return detachmentDescription(Output.of(detachmentDescription));
        }

        /**
         * @param errorCode The code identifying the error occurred during Assignment operation.
         * 
         * @return builder
         * 
         */
        public Builder errorCode(@Nullable Output<Integer> errorCode) {
            $.errorCode = errorCode;
            return this;
        }

        /**
         * @param errorCode The code identifying the error occurred during Assignment operation.
         * 
         * @return builder
         * 
         */
        public Builder errorCode(Integer errorCode) {
            return errorCode(Output.of(errorCode));
        }

        /**
         * @param errorMessage The message describing the error occurred during Assignment operation.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(@Nullable Output<String> errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        /**
         * @param errorMessage The message describing the error occurred during Assignment operation.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(String errorMessage) {
            return errorMessage(Output.of(errorMessage));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isAutoApproveDuringMaintenance (Updatable) The boolean if true would autoApprove during maintenance.
         * 
         * @return builder
         * 
         */
        public Builder isAutoApproveDuringMaintenance(@Nullable Output<Boolean> isAutoApproveDuringMaintenance) {
            $.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
            return this;
        }

        /**
         * @param isAutoApproveDuringMaintenance (Updatable) The boolean if true would autoApprove during maintenance.
         * 
         * @return builder
         * 
         */
        public Builder isAutoApproveDuringMaintenance(Boolean isAutoApproveDuringMaintenance) {
            return isAutoApproveDuringMaintenance(Output.of(isAutoApproveDuringMaintenance));
        }

        /**
         * @param isEnforcedAlways (Updatable) If set, then the target resource is always governed by the operator control.
         * 
         * @return builder
         * 
         */
        public Builder isEnforcedAlways(@Nullable Output<Boolean> isEnforcedAlways) {
            $.isEnforcedAlways = isEnforcedAlways;
            return this;
        }

        /**
         * @param isEnforcedAlways (Updatable) If set, then the target resource is always governed by the operator control.
         * 
         * @return builder
         * 
         */
        public Builder isEnforcedAlways(Boolean isEnforcedAlways) {
            return isEnforcedAlways(Output.of(isEnforcedAlways));
        }

        /**
         * @param isLogForwarded (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
         * 
         * @return builder
         * 
         */
        public Builder isLogForwarded(@Nullable Output<Boolean> isLogForwarded) {
            $.isLogForwarded = isLogForwarded;
            return this;
        }

        /**
         * @param isLogForwarded (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
         * 
         * @return builder
         * 
         */
        public Builder isLogForwarded(Boolean isLogForwarded) {
            return isLogForwarded(Output.of(isLogForwarded));
        }

        /**
         * @param operatorControlId The OCID of the operator control that is being assigned to a target resource.
         * 
         * @return builder
         * 
         */
        public Builder operatorControlId(@Nullable Output<String> operatorControlId) {
            $.operatorControlId = operatorControlId;
            return this;
        }

        /**
         * @param operatorControlId The OCID of the operator control that is being assigned to a target resource.
         * 
         * @return builder
         * 
         */
        public Builder operatorControlId(String operatorControlId) {
            return operatorControlId(Output.of(operatorControlId));
        }

        /**
         * @param remoteSyslogServerAddress (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerAddress(@Nullable Output<String> remoteSyslogServerAddress) {
            $.remoteSyslogServerAddress = remoteSyslogServerAddress;
            return this;
        }

        /**
         * @param remoteSyslogServerAddress (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerAddress(String remoteSyslogServerAddress) {
            return remoteSyslogServerAddress(Output.of(remoteSyslogServerAddress));
        }

        /**
         * @param remoteSyslogServerCaCert (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerCaCert(@Nullable Output<String> remoteSyslogServerCaCert) {
            $.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
            return this;
        }

        /**
         * @param remoteSyslogServerCaCert (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerCaCert(String remoteSyslogServerCaCert) {
            return remoteSyslogServerCaCert(Output.of(remoteSyslogServerCaCert));
        }

        /**
         * @param remoteSyslogServerPort (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerPort(@Nullable Output<Integer> remoteSyslogServerPort) {
            $.remoteSyslogServerPort = remoteSyslogServerPort;
            return this;
        }

        /**
         * @param remoteSyslogServerPort (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerPort(Integer remoteSyslogServerPort) {
            return remoteSyslogServerPort(Output.of(remoteSyslogServerPort));
        }

        /**
         * @param resourceCompartmentId The OCID of the compartment that contains the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCompartmentId(@Nullable Output<String> resourceCompartmentId) {
            $.resourceCompartmentId = resourceCompartmentId;
            return this;
        }

        /**
         * @param resourceCompartmentId The OCID of the compartment that contains the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCompartmentId(String resourceCompartmentId) {
            return resourceCompartmentId(Output.of(resourceCompartmentId));
        }

        /**
         * @param resourceId The OCID of the target resource being brought under the governance of the operator control.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The OCID of the target resource being brought under the governance of the operator control.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceName Name of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName Name of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType Type of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Type of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param state The current lifcycle state of the OperatorControl.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifcycle state of the OperatorControl.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeAssignmentFrom (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentFrom(@Nullable Output<String> timeAssignmentFrom) {
            $.timeAssignmentFrom = timeAssignmentFrom;
            return this;
        }

        /**
         * @param timeAssignmentFrom (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentFrom(String timeAssignmentFrom) {
            return timeAssignmentFrom(Output.of(timeAssignmentFrom));
        }

        /**
         * @param timeAssignmentTo (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentTo(@Nullable Output<String> timeAssignmentTo) {
            $.timeAssignmentTo = timeAssignmentTo;
            return this;
        }

        /**
         * @param timeAssignmentTo (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentTo(String timeAssignmentTo) {
            return timeAssignmentTo(Output.of(timeAssignmentTo));
        }

        /**
         * @param timeOfAssignment Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeOfAssignment(@Nullable Output<String> timeOfAssignment) {
            $.timeOfAssignment = timeOfAssignment;
            return this;
        }

        /**
         * @param timeOfAssignment Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeOfAssignment(String timeOfAssignment) {
            return timeOfAssignment(Output.of(timeOfAssignment));
        }

        /**
         * @param timeOfDeletion Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(@Nullable Output<String> timeOfDeletion) {
            $.timeOfDeletion = timeOfDeletion;
            return this;
        }

        /**
         * @param timeOfDeletion Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(String timeOfDeletion) {
            return timeOfDeletion(Output.of(timeOfDeletion));
        }

        /**
         * @param unassignerId User id who released the operatorControl.
         * 
         * @return builder
         * 
         */
        public Builder unassignerId(@Nullable Output<String> unassignerId) {
            $.unassignerId = unassignerId;
            return this;
        }

        /**
         * @param unassignerId User id who released the operatorControl.
         * 
         * @return builder
         * 
         */
        public Builder unassignerId(String unassignerId) {
            return unassignerId(Output.of(unassignerId));
        }

        public OperatorControlAssignmentState build() {
            return $;
        }
    }

}
