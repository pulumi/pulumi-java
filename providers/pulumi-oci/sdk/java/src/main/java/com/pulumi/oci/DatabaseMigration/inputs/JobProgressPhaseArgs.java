// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseMigration.inputs.JobProgressPhaseExtractArgs;
import com.pulumi.oci.DatabaseMigration.inputs.JobProgressPhaseLogLocationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobProgressPhaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobProgressPhaseArgs Empty = new JobProgressPhaseArgs();

    /**
     * Duration of the phase in milliseconds
     * 
     */
    @Import(name="durationInMs")
    private @Nullable Output<Integer> durationInMs;

    /**
     * @return Duration of the phase in milliseconds
     * 
     */
    public Optional<Output<Integer>> durationInMs() {
        return Optional.ofNullable(this.durationInMs);
    }

    /**
     * Summary of phase status results.
     * 
     */
    @Import(name="extracts")
    private @Nullable Output<List<JobProgressPhaseExtractArgs>> extracts;

    /**
     * @return Summary of phase status results.
     * 
     */
    public Optional<Output<List<JobProgressPhaseExtractArgs>>> extracts() {
        return Optional.ofNullable(this.extracts);
    }

    /**
     * True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
     * 
     */
    @Import(name="isAdvisorReportAvailable")
    private @Nullable Output<Boolean> isAdvisorReportAvailable;

    /**
     * @return True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
     * 
     */
    public Optional<Output<Boolean>> isAdvisorReportAvailable() {
        return Optional.ofNullable(this.isAdvisorReportAvailable);
    }

    /**
     * Details to access log file in the specified Object Storage bucket, if any.
     * 
     */
    @Import(name="logLocations")
    private @Nullable Output<List<JobProgressPhaseLogLocationArgs>> logLocations;

    /**
     * @return Details to access log file in the specified Object Storage bucket, if any.
     * 
     */
    public Optional<Output<List<JobProgressPhaseLogLocationArgs>>> logLocations() {
        return Optional.ofNullable(this.logLocations);
    }

    /**
     * Phase name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Phase name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Percent progress of job phase.
     * 
     */
    @Import(name="progress")
    private @Nullable Output<Integer> progress;

    /**
     * @return Percent progress of job phase.
     * 
     */
    public Optional<Output<Integer>> progress() {
        return Optional.ofNullable(this.progress);
    }

    /**
     * Phase status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Phase status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private JobProgressPhaseArgs() {}

    private JobProgressPhaseArgs(JobProgressPhaseArgs $) {
        this.durationInMs = $.durationInMs;
        this.extracts = $.extracts;
        this.isAdvisorReportAvailable = $.isAdvisorReportAvailable;
        this.logLocations = $.logLocations;
        this.name = $.name;
        this.progress = $.progress;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobProgressPhaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobProgressPhaseArgs $;

        public Builder() {
            $ = new JobProgressPhaseArgs();
        }

        public Builder(JobProgressPhaseArgs defaults) {
            $ = new JobProgressPhaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param durationInMs Duration of the phase in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder durationInMs(@Nullable Output<Integer> durationInMs) {
            $.durationInMs = durationInMs;
            return this;
        }

        /**
         * @param durationInMs Duration of the phase in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder durationInMs(Integer durationInMs) {
            return durationInMs(Output.of(durationInMs));
        }

        /**
         * @param extracts Summary of phase status results.
         * 
         * @return builder
         * 
         */
        public Builder extracts(@Nullable Output<List<JobProgressPhaseExtractArgs>> extracts) {
            $.extracts = extracts;
            return this;
        }

        /**
         * @param extracts Summary of phase status results.
         * 
         * @return builder
         * 
         */
        public Builder extracts(List<JobProgressPhaseExtractArgs> extracts) {
            return extracts(Output.of(extracts));
        }

        /**
         * @param extracts Summary of phase status results.
         * 
         * @return builder
         * 
         */
        public Builder extracts(JobProgressPhaseExtractArgs... extracts) {
            return extracts(List.of(extracts));
        }

        /**
         * @param isAdvisorReportAvailable True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
         * 
         * @return builder
         * 
         */
        public Builder isAdvisorReportAvailable(@Nullable Output<Boolean> isAdvisorReportAvailable) {
            $.isAdvisorReportAvailable = isAdvisorReportAvailable;
            return this;
        }

        /**
         * @param isAdvisorReportAvailable True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
         * 
         * @return builder
         * 
         */
        public Builder isAdvisorReportAvailable(Boolean isAdvisorReportAvailable) {
            return isAdvisorReportAvailable(Output.of(isAdvisorReportAvailable));
        }

        /**
         * @param logLocations Details to access log file in the specified Object Storage bucket, if any.
         * 
         * @return builder
         * 
         */
        public Builder logLocations(@Nullable Output<List<JobProgressPhaseLogLocationArgs>> logLocations) {
            $.logLocations = logLocations;
            return this;
        }

        /**
         * @param logLocations Details to access log file in the specified Object Storage bucket, if any.
         * 
         * @return builder
         * 
         */
        public Builder logLocations(List<JobProgressPhaseLogLocationArgs> logLocations) {
            return logLocations(Output.of(logLocations));
        }

        /**
         * @param logLocations Details to access log file in the specified Object Storage bucket, if any.
         * 
         * @return builder
         * 
         */
        public Builder logLocations(JobProgressPhaseLogLocationArgs... logLocations) {
            return logLocations(List.of(logLocations));
        }

        /**
         * @param name Phase name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Phase name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param progress Percent progress of job phase.
         * 
         * @return builder
         * 
         */
        public Builder progress(@Nullable Output<Integer> progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param progress Percent progress of job phase.
         * 
         * @return builder
         * 
         */
        public Builder progress(Integer progress) {
            return progress(Output.of(progress));
        }

        /**
         * @param status Phase status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Phase status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public JobProgressPhaseArgs build() {
            return $;
        }
    }

}
