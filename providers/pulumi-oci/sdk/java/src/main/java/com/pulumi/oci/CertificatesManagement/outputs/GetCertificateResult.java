// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCertificateConfig;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCertificateRevocationListDetail;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCertificateRule;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCurrentVersion;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateSubject;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificateResult {
    private final List<GetCertificateCertificateConfig> certificateConfigs;
    /**
     * @return The OCID of the certificate.
     * 
     */
    private final String certificateId;
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    private final String certificateProfileType;
    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    private final List<GetCertificateCertificateRevocationListDetail> certificateRevocationListDetails;
    /**
     * @return A list of rules that control how the certificate is used and managed.
     * 
     */
    private final List<GetCertificateCertificateRule> certificateRules;
    /**
     * @return The OCID of the compartment where you want to create the certificate.
     * 
     */
    private final String compartmentId;
    /**
     * @return The origin of the certificate.
     * 
     */
    private final String configType;
    /**
     * @return The details of the certificate version. This object does not contain the certificate contents.
     * 
     */
    private final List<GetCertificateCurrentVersion> currentVersions;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A brief description of the certificate. Avoid entering confidential information.
     * 
     */
    private final String description;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the certificate.
     * 
     */
    private final String id;
    /**
     * @return The OCID of the certificate authority (CA) that issued the certificate.
     * 
     */
    private final String issuerCertificateAuthorityId;
    /**
     * @return The algorithm used to create key pairs.
     * 
     */
    private final String keyAlgorithm;
    /**
     * @return Additional information about the current lifecycle state of the certificate.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    private final String name;
    /**
     * @return The algorithm used to sign the public key certificate.
     * 
     */
    private final String signatureAlgorithm;
    /**
     * @return The current lifecycle state of the certificate.
     * 
     */
    private final String state;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private final List<GetCertificateSubject> subjects;
    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeOfDeletion;

    @CustomType.Constructor
    private GetCertificateResult(
        @CustomType.Parameter("certificateConfigs") List<GetCertificateCertificateConfig> certificateConfigs,
        @CustomType.Parameter("certificateId") String certificateId,
        @CustomType.Parameter("certificateProfileType") String certificateProfileType,
        @CustomType.Parameter("certificateRevocationListDetails") List<GetCertificateCertificateRevocationListDetail> certificateRevocationListDetails,
        @CustomType.Parameter("certificateRules") List<GetCertificateCertificateRule> certificateRules,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("configType") String configType,
        @CustomType.Parameter("currentVersions") List<GetCertificateCurrentVersion> currentVersions,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("issuerCertificateAuthorityId") String issuerCertificateAuthorityId,
        @CustomType.Parameter("keyAlgorithm") String keyAlgorithm,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("signatureAlgorithm") String signatureAlgorithm,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("subjects") List<GetCertificateSubject> subjects,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeOfDeletion") String timeOfDeletion) {
        this.certificateConfigs = certificateConfigs;
        this.certificateId = certificateId;
        this.certificateProfileType = certificateProfileType;
        this.certificateRevocationListDetails = certificateRevocationListDetails;
        this.certificateRules = certificateRules;
        this.compartmentId = compartmentId;
        this.configType = configType;
        this.currentVersions = currentVersions;
        this.definedTags = definedTags;
        this.description = description;
        this.freeformTags = freeformTags;
        this.id = id;
        this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
        this.keyAlgorithm = keyAlgorithm;
        this.lifecycleDetails = lifecycleDetails;
        this.name = name;
        this.signatureAlgorithm = signatureAlgorithm;
        this.state = state;
        this.subjects = subjects;
        this.timeCreated = timeCreated;
        this.timeOfDeletion = timeOfDeletion;
    }

    public List<GetCertificateCertificateConfig> certificateConfigs() {
        return this.certificateConfigs;
    }
    /**
     * @return The OCID of the certificate.
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    public String certificateProfileType() {
        return this.certificateProfileType;
    }
    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    public List<GetCertificateCertificateRevocationListDetail> certificateRevocationListDetails() {
        return this.certificateRevocationListDetails;
    }
    /**
     * @return A list of rules that control how the certificate is used and managed.
     * 
     */
    public List<GetCertificateCertificateRule> certificateRules() {
        return this.certificateRules;
    }
    /**
     * @return The OCID of the compartment where you want to create the certificate.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The origin of the certificate.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return The details of the certificate version. This object does not contain the certificate contents.
     * 
     */
    public List<GetCertificateCurrentVersion> currentVersions() {
        return this.currentVersions;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A brief description of the certificate. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the certificate.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the certificate authority (CA) that issued the certificate.
     * 
     */
    public String issuerCertificateAuthorityId() {
        return this.issuerCertificateAuthorityId;
    }
    /**
     * @return The algorithm used to create key pairs.
     * 
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }
    /**
     * @return Additional information about the current lifecycle state of the certificate.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The algorithm used to sign the public key certificate.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return The current lifecycle state of the certificate.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public List<GetCertificateSubject> subjects() {
        return this.subjects;
    }
    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetCertificateCertificateConfig> certificateConfigs;
        private String certificateId;
        private String certificateProfileType;
        private List<GetCertificateCertificateRevocationListDetail> certificateRevocationListDetails;
        private List<GetCertificateCertificateRule> certificateRules;
        private String compartmentId;
        private String configType;
        private List<GetCertificateCurrentVersion> currentVersions;
        private Map<String,Object> definedTags;
        private String description;
        private Map<String,Object> freeformTags;
        private String id;
        private String issuerCertificateAuthorityId;
        private String keyAlgorithm;
        private String lifecycleDetails;
        private String name;
        private String signatureAlgorithm;
        private String state;
        private List<GetCertificateSubject> subjects;
        private String timeCreated;
        private String timeOfDeletion;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateConfigs = defaults.certificateConfigs;
    	      this.certificateId = defaults.certificateId;
    	      this.certificateProfileType = defaults.certificateProfileType;
    	      this.certificateRevocationListDetails = defaults.certificateRevocationListDetails;
    	      this.certificateRules = defaults.certificateRules;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configType = defaults.configType;
    	      this.currentVersions = defaults.currentVersions;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.state = defaults.state;
    	      this.subjects = defaults.subjects;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
        }

        public Builder certificateConfigs(List<GetCertificateCertificateConfig> certificateConfigs) {
            this.certificateConfigs = Objects.requireNonNull(certificateConfigs);
            return this;
        }
        public Builder certificateConfigs(GetCertificateCertificateConfig... certificateConfigs) {
            return certificateConfigs(List.of(certificateConfigs));
        }
        public Builder certificateId(String certificateId) {
            this.certificateId = Objects.requireNonNull(certificateId);
            return this;
        }
        public Builder certificateProfileType(String certificateProfileType) {
            this.certificateProfileType = Objects.requireNonNull(certificateProfileType);
            return this;
        }
        public Builder certificateRevocationListDetails(List<GetCertificateCertificateRevocationListDetail> certificateRevocationListDetails) {
            this.certificateRevocationListDetails = Objects.requireNonNull(certificateRevocationListDetails);
            return this;
        }
        public Builder certificateRevocationListDetails(GetCertificateCertificateRevocationListDetail... certificateRevocationListDetails) {
            return certificateRevocationListDetails(List.of(certificateRevocationListDetails));
        }
        public Builder certificateRules(List<GetCertificateCertificateRule> certificateRules) {
            this.certificateRules = Objects.requireNonNull(certificateRules);
            return this;
        }
        public Builder certificateRules(GetCertificateCertificateRule... certificateRules) {
            return certificateRules(List.of(certificateRules));
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder configType(String configType) {
            this.configType = Objects.requireNonNull(configType);
            return this;
        }
        public Builder currentVersions(List<GetCertificateCurrentVersion> currentVersions) {
            this.currentVersions = Objects.requireNonNull(currentVersions);
            return this;
        }
        public Builder currentVersions(GetCertificateCurrentVersion... currentVersions) {
            return currentVersions(List.of(currentVersions));
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder issuerCertificateAuthorityId(String issuerCertificateAuthorityId) {
            this.issuerCertificateAuthorityId = Objects.requireNonNull(issuerCertificateAuthorityId);
            return this;
        }
        public Builder keyAlgorithm(String keyAlgorithm) {
            this.keyAlgorithm = Objects.requireNonNull(keyAlgorithm);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder subjects(List<GetCertificateSubject> subjects) {
            this.subjects = Objects.requireNonNull(subjects);
            return this;
        }
        public Builder subjects(GetCertificateSubject... subjects) {
            return subjects(List.of(subjects));
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }        public GetCertificateResult build() {
            return new GetCertificateResult(certificateConfigs, certificateId, certificateProfileType, certificateRevocationListDetails, certificateRules, compartmentId, configType, currentVersions, definedTags, description, freeformTags, id, issuerCertificateAuthorityId, keyAlgorithm, lifecycleDetails, name, signatureAlgorithm, state, subjects, timeCreated, timeOfDeletion);
        }
    }
}
