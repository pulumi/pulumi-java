// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MeteringComputation.inputs.UsageForecastArgs;
import com.pulumi.oci.MeteringComputation.inputs.UsageGroupByTagArgs;
import com.pulumi.oci.MeteringComputation.inputs.UsageItemArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsageState extends com.pulumi.resources.ResourceArgs {

    public static final UsageState Empty = new UsageState();

    /**
     * The compartment depth level.
     * 
     */
    @Import(name="compartmentDepth")
    private @Nullable Output<Double> compartmentDepth;

    /**
     * @return The compartment depth level.
     * 
     */
    public Optional<Output<Double>> compartmentDepth() {
        return Optional.ofNullable(this.compartmentDepth);
    }

    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Forecast configuration of usage/cost.
     * 
     */
    @Import(name="forecast")
    private @Nullable Output<UsageForecastArgs> forecast;

    /**
     * @return Forecast configuration of usage/cost.
     * 
     */
    public Optional<Output<UsageForecastArgs>> forecast() {
        return Optional.ofNullable(this.forecast);
    }

    /**
     * The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
     * 
     */
    @Import(name="granularity")
    private @Nullable Output<String> granularity;

    /**
     * @return The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
     * 
     */
    public Optional<Output<String>> granularity() {
        return Optional.ofNullable(this.granularity);
    }

    /**
     * Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<String>> groupBies;

    /**
     * @return Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    public Optional<Output<List<String>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    @Import(name="groupByTags")
    private @Nullable Output<List<UsageGroupByTagArgs>> groupByTags;

    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public Optional<Output<List<UsageGroupByTagArgs>>> groupByTags() {
        return Optional.ofNullable(this.groupByTags);
    }

    /**
     * Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
     * 
     */
    @Import(name="isAggregateByTime")
    private @Nullable Output<Boolean> isAggregateByTime;

    /**
     * @return Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
     * 
     */
    public Optional<Output<Boolean>> isAggregateByTime() {
        return Optional.ofNullable(this.isAggregateByTime);
    }

    /**
     * A list of usage items.
     * 
     */
    @Import(name="items")
    private @Nullable Output<List<UsageItemArgs>> items;

    /**
     * @return A list of usage items.
     * 
     */
    public Optional<Output<List<UsageItemArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data. AllCredit - Query the credit adjustments and expired credit.
     * 
     */
    @Import(name="queryType")
    private @Nullable Output<String> queryType;

    /**
     * @return The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data. AllCredit - Query the credit adjustments and expired credit.
     * 
     */
    public Optional<Output<String>> queryType() {
        return Optional.ofNullable(this.queryType);
    }

    /**
     * Tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Tenant ID.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The usage end time.
     * 
     */
    @Import(name="timeUsageEnded")
    private @Nullable Output<String> timeUsageEnded;

    /**
     * @return The usage end time.
     * 
     */
    public Optional<Output<String>> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }

    /**
     * The usage start time.
     * 
     */
    @Import(name="timeUsageStarted")
    private @Nullable Output<String> timeUsageStarted;

    /**
     * @return The usage start time.
     * 
     */
    public Optional<Output<String>> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }

    private UsageState() {}

    private UsageState(UsageState $) {
        this.compartmentDepth = $.compartmentDepth;
        this.filter = $.filter;
        this.forecast = $.forecast;
        this.granularity = $.granularity;
        this.groupBies = $.groupBies;
        this.groupByTags = $.groupByTags;
        this.isAggregateByTime = $.isAggregateByTime;
        this.items = $.items;
        this.queryType = $.queryType;
        this.tenantId = $.tenantId;
        this.timeUsageEnded = $.timeUsageEnded;
        this.timeUsageStarted = $.timeUsageStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageState $;

        public Builder() {
            $ = new UsageState();
        }

        public Builder(UsageState defaults) {
            $ = new UsageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentDepth The compartment depth level.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(@Nullable Output<Double> compartmentDepth) {
            $.compartmentDepth = compartmentDepth;
            return this;
        }

        /**
         * @param compartmentDepth The compartment depth level.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(Double compartmentDepth) {
            return compartmentDepth(Output.of(compartmentDepth));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param forecast Forecast configuration of usage/cost.
         * 
         * @return builder
         * 
         */
        public Builder forecast(@Nullable Output<UsageForecastArgs> forecast) {
            $.forecast = forecast;
            return this;
        }

        /**
         * @param forecast Forecast configuration of usage/cost.
         * 
         * @return builder
         * 
         */
        public Builder forecast(UsageForecastArgs forecast) {
            return forecast(Output.of(forecast));
        }

        /**
         * @param granularity The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
         * 
         * @return builder
         * 
         */
        public Builder granularity(@Nullable Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param granularity The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
         * 
         * @return builder
         * 
         */
        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        /**
         * @param groupBies Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(@Nullable Output<List<UsageGroupByTagArgs>> groupByTags) {
            $.groupByTags = groupByTags;
            return this;
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(List<UsageGroupByTagArgs> groupByTags) {
            return groupByTags(Output.of(groupByTags));
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(UsageGroupByTagArgs... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }

        /**
         * @param isAggregateByTime Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(@Nullable Output<Boolean> isAggregateByTime) {
            $.isAggregateByTime = isAggregateByTime;
            return this;
        }

        /**
         * @param isAggregateByTime Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(Boolean isAggregateByTime) {
            return isAggregateByTime(Output.of(isAggregateByTime));
        }

        /**
         * @param items A list of usage items.
         * 
         * @return builder
         * 
         */
        public Builder items(@Nullable Output<List<UsageItemArgs>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items A list of usage items.
         * 
         * @return builder
         * 
         */
        public Builder items(List<UsageItemArgs> items) {
            return items(Output.of(items));
        }

        /**
         * @param items A list of usage items.
         * 
         * @return builder
         * 
         */
        public Builder items(UsageItemArgs... items) {
            return items(List.of(items));
        }

        /**
         * @param queryType The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data. AllCredit - Query the credit adjustments and expired credit.
         * 
         * @return builder
         * 
         */
        public Builder queryType(@Nullable Output<String> queryType) {
            $.queryType = queryType;
            return this;
        }

        /**
         * @param queryType The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data. AllCredit - Query the credit adjustments and expired credit.
         * 
         * @return builder
         * 
         */
        public Builder queryType(String queryType) {
            return queryType(Output.of(queryType));
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(@Nullable Output<String> timeUsageEnded) {
            $.timeUsageEnded = timeUsageEnded;
            return this;
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(String timeUsageEnded) {
            return timeUsageEnded(Output.of(timeUsageEnded));
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(@Nullable Output<String> timeUsageStarted) {
            $.timeUsageStarted = timeUsageStarted;
            return this;
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(String timeUsageStarted) {
            return timeUsageStarted(Output.of(timeUsageStarted));
        }

        public UsageState build() {
            return $;
        }
    }

}
