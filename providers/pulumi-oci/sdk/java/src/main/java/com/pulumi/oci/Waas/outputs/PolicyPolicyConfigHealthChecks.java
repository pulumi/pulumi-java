// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyPolicyConfigHealthChecks {
    /**
     * @return (Updatable) The HTTP response codes that signify a healthy state.
     * * **2XX:** Success response code group.
     * * **3XX:** Redirection response code group.
     * * **4XX:** Client errors response code group.
     * * **5XX:** Server errors response code group.
     * 
     */
    private final @Nullable List<String> expectedResponseCodeGroups;
    /**
     * @return (Updatable) Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
     * 
     */
    private final @Nullable String expectedResponseText;
    /**
     * @return (Updatable) HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
     * 
     */
    private final @Nullable Map<String,Object> headers;
    /**
     * @return (Updatable) Number of successful health checks after which the server is marked up.
     * 
     */
    private final @Nullable Integer healthyThreshold;
    /**
     * @return (Updatable) Time between health checks of an individual origin server, in seconds.
     * 
     */
    private final @Nullable Integer intervalInSeconds;
    /**
     * @return (Updatable) Enables or disables the JavaScript challenge Web Application Firewall feature.
     * 
     */
    private final @Nullable Boolean isEnabled;
    /**
     * @return (Updatable) Enables or disables additional check for predefined text in addition to response code.
     * 
     */
    private final @Nullable Boolean isResponseTextCheckEnabled;
    /**
     * @return (Updatable) Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
     * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
     * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
     * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
     * 
     */
    private final @Nullable String method;
    /**
     * @return (Updatable) Path to visit on your origins when performing the health check.
     * 
     */
    private final @Nullable String path;
    /**
     * @return (Updatable) Response timeout represents wait time until request is considered failed, in seconds.
     * 
     */
    private final @Nullable Integer timeoutInSeconds;
    /**
     * @return (Updatable) Number of failed health checks after which the server is marked down.
     * 
     */
    private final @Nullable Integer unhealthyThreshold;

    @CustomType.Constructor
    private PolicyPolicyConfigHealthChecks(
        @CustomType.Parameter("expectedResponseCodeGroups") @Nullable List<String> expectedResponseCodeGroups,
        @CustomType.Parameter("expectedResponseText") @Nullable String expectedResponseText,
        @CustomType.Parameter("headers") @Nullable Map<String,Object> headers,
        @CustomType.Parameter("healthyThreshold") @Nullable Integer healthyThreshold,
        @CustomType.Parameter("intervalInSeconds") @Nullable Integer intervalInSeconds,
        @CustomType.Parameter("isEnabled") @Nullable Boolean isEnabled,
        @CustomType.Parameter("isResponseTextCheckEnabled") @Nullable Boolean isResponseTextCheckEnabled,
        @CustomType.Parameter("method") @Nullable String method,
        @CustomType.Parameter("path") @Nullable String path,
        @CustomType.Parameter("timeoutInSeconds") @Nullable Integer timeoutInSeconds,
        @CustomType.Parameter("unhealthyThreshold") @Nullable Integer unhealthyThreshold) {
        this.expectedResponseCodeGroups = expectedResponseCodeGroups;
        this.expectedResponseText = expectedResponseText;
        this.headers = headers;
        this.healthyThreshold = healthyThreshold;
        this.intervalInSeconds = intervalInSeconds;
        this.isEnabled = isEnabled;
        this.isResponseTextCheckEnabled = isResponseTextCheckEnabled;
        this.method = method;
        this.path = path;
        this.timeoutInSeconds = timeoutInSeconds;
        this.unhealthyThreshold = unhealthyThreshold;
    }

    /**
     * @return (Updatable) The HTTP response codes that signify a healthy state.
     * * **2XX:** Success response code group.
     * * **3XX:** Redirection response code group.
     * * **4XX:** Client errors response code group.
     * * **5XX:** Server errors response code group.
     * 
     */
    public List<String> expectedResponseCodeGroups() {
        return this.expectedResponseCodeGroups == null ? List.of() : this.expectedResponseCodeGroups;
    }
    /**
     * @return (Updatable) Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
     * 
     */
    public Optional<String> expectedResponseText() {
        return Optional.ofNullable(this.expectedResponseText);
    }
    /**
     * @return (Updatable) HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
     * 
     */
    public Map<String,Object> headers() {
        return this.headers == null ? Map.of() : this.headers;
    }
    /**
     * @return (Updatable) Number of successful health checks after which the server is marked up.
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return (Updatable) Time between health checks of an individual origin server, in seconds.
     * 
     */
    public Optional<Integer> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }
    /**
     * @return (Updatable) Enables or disables the JavaScript challenge Web Application Firewall feature.
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return (Updatable) Enables or disables additional check for predefined text in addition to response code.
     * 
     */
    public Optional<Boolean> isResponseTextCheckEnabled() {
        return Optional.ofNullable(this.isResponseTextCheckEnabled);
    }
    /**
     * @return (Updatable) Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
     * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
     * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
     * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return (Updatable) Path to visit on your origins when performing the health check.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return (Updatable) Response timeout represents wait time until request is considered failed, in seconds.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return (Updatable) Number of failed health checks after which the server is marked down.
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyPolicyConfigHealthChecks defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> expectedResponseCodeGroups;
        private @Nullable String expectedResponseText;
        private @Nullable Map<String,Object> headers;
        private @Nullable Integer healthyThreshold;
        private @Nullable Integer intervalInSeconds;
        private @Nullable Boolean isEnabled;
        private @Nullable Boolean isResponseTextCheckEnabled;
        private @Nullable String method;
        private @Nullable String path;
        private @Nullable Integer timeoutInSeconds;
        private @Nullable Integer unhealthyThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyPolicyConfigHealthChecks defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedResponseCodeGroups = defaults.expectedResponseCodeGroups;
    	      this.expectedResponseText = defaults.expectedResponseText;
    	      this.headers = defaults.headers;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isResponseTextCheckEnabled = defaults.isResponseTextCheckEnabled;
    	      this.method = defaults.method;
    	      this.path = defaults.path;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        public Builder expectedResponseCodeGroups(@Nullable List<String> expectedResponseCodeGroups) {
            this.expectedResponseCodeGroups = expectedResponseCodeGroups;
            return this;
        }
        public Builder expectedResponseCodeGroups(String... expectedResponseCodeGroups) {
            return expectedResponseCodeGroups(List.of(expectedResponseCodeGroups));
        }
        public Builder expectedResponseText(@Nullable String expectedResponseText) {
            this.expectedResponseText = expectedResponseText;
            return this;
        }
        public Builder headers(@Nullable Map<String,Object> headers) {
            this.headers = headers;
            return this;
        }
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        public Builder intervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        public Builder isResponseTextCheckEnabled(@Nullable Boolean isResponseTextCheckEnabled) {
            this.isResponseTextCheckEnabled = isResponseTextCheckEnabled;
            return this;
        }
        public Builder method(@Nullable String method) {
            this.method = method;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }        public PolicyPolicyConfigHealthChecks build() {
            return new PolicyPolicyConfigHealthChecks(expectedResponseCodeGroups, expectedResponseText, headers, healthyThreshold, intervalInSeconds, isEnabled, isResponseTextCheckEnabled, method, path, timeoutInSeconds, unhealthyThreshold);
        }
    }
}
