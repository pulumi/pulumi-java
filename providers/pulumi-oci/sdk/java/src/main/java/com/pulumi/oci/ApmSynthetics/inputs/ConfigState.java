// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigScriptParameterArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigState extends com.pulumi.resources.ResourceArgs {

    public static final ConfigState Empty = new ConfigState();

    /**
     * (Updatable) The APM domain ID the request is intended for.
     * 
     */
    @Import(name="apmDomainId")
    private @Nullable Output<String> apmDomainId;

    /**
     * @return (Updatable) The APM domain ID the request is intended for.
     * 
     */
    public Optional<Output<String>> apmDomainId() {
        return Optional.ofNullable(this.apmDomainId);
    }

    /**
     * (Updatable) Details of monitor configuration.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<ConfigConfigurationArgs> configuration;

    /**
     * @return (Updatable) Details of monitor configuration.
     * 
     */
    public Optional<Output<ConfigConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     * 
     */
    @Import(name="isRunOnce")
    private @Nullable Output<Boolean> isRunOnce;

    /**
     * @return (Updatable) If runOnce is enabled, then the monitor will run once.
     * 
     */
    public Optional<Output<Boolean>> isRunOnce() {
        return Optional.ofNullable(this.isRunOnce);
    }

    /**
     * Type of monitor.
     * 
     */
    @Import(name="monitorType")
    private @Nullable Output<String> monitorType;

    /**
     * @return Type of monitor.
     * 
     */
    public Optional<Output<String>> monitorType() {
        return Optional.ofNullable(this.monitorType);
    }

    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     * 
     */
    @Import(name="repeatIntervalInSeconds")
    private @Nullable Output<Integer> repeatIntervalInSeconds;

    /**
     * @return (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     * 
     */
    public Optional<Output<Integer>> repeatIntervalInSeconds() {
        return Optional.ofNullable(this.repeatIntervalInSeconds);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    @Import(name="scriptId")
    private @Nullable Output<String> scriptId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    public Optional<Output<String>> scriptId() {
        return Optional.ofNullable(this.scriptId);
    }

    /**
     * Name of the script.
     * 
     */
    @Import(name="scriptName")
    private @Nullable Output<String> scriptName;

    /**
     * @return Name of the script.
     * 
     */
    public Optional<Output<String>> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }

    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
     * 
     */
    @Import(name="scriptParameters")
    private @Nullable Output<List<ConfigScriptParameterArgs>> scriptParameters;

    /**
     * @return (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
     * 
     */
    public Optional<Output<List<ConfigScriptParameterArgs>>> scriptParameters() {
        return Optional.ofNullable(this.scriptParameters);
    }

    /**
     * (Updatable) Enables or disables the monitor.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Updatable) Enables or disables the monitor.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * Number of vantage points where monitor is running.
     * 
     */
    @Import(name="vantagePointCount")
    private @Nullable Output<Integer> vantagePointCount;

    /**
     * @return Number of vantage points where monitor is running.
     * 
     */
    public Optional<Output<Integer>> vantagePointCount() {
        return Optional.ofNullable(this.vantagePointCount);
    }

    /**
     * (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     * 
     */
    @Import(name="vantagePoints")
    private @Nullable Output<List<String>> vantagePoints;

    /**
     * @return (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     * 
     */
    public Optional<Output<List<String>>> vantagePoints() {
        return Optional.ofNullable(this.vantagePoints);
    }

    private ConfigState() {}

    private ConfigState(ConfigState $) {
        this.apmDomainId = $.apmDomainId;
        this.configuration = $.configuration;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isRunOnce = $.isRunOnce;
        this.monitorType = $.monitorType;
        this.repeatIntervalInSeconds = $.repeatIntervalInSeconds;
        this.scriptId = $.scriptId;
        this.scriptName = $.scriptName;
        this.scriptParameters = $.scriptParameters;
        this.status = $.status;
        this.target = $.target;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.vantagePointCount = $.vantagePointCount;
        this.vantagePoints = $.vantagePoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigState $;

        public Builder() {
            $ = new ConfigState();
        }

        public Builder(ConfigState defaults) {
            $ = new ConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmDomainId (Updatable) The APM domain ID the request is intended for.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(@Nullable Output<String> apmDomainId) {
            $.apmDomainId = apmDomainId;
            return this;
        }

        /**
         * @param apmDomainId (Updatable) The APM domain ID the request is intended for.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(String apmDomainId) {
            return apmDomainId(Output.of(apmDomainId));
        }

        /**
         * @param configuration (Updatable) Details of monitor configuration.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<ConfigConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration (Updatable) Details of monitor configuration.
         * 
         * @return builder
         * 
         */
        public Builder configuration(ConfigConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) Unique name that can be edited. The name should not contain any confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Unique name that can be edited. The name should not contain any confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isRunOnce (Updatable) If runOnce is enabled, then the monitor will run once.
         * 
         * @return builder
         * 
         */
        public Builder isRunOnce(@Nullable Output<Boolean> isRunOnce) {
            $.isRunOnce = isRunOnce;
            return this;
        }

        /**
         * @param isRunOnce (Updatable) If runOnce is enabled, then the monitor will run once.
         * 
         * @return builder
         * 
         */
        public Builder isRunOnce(Boolean isRunOnce) {
            return isRunOnce(Output.of(isRunOnce));
        }

        /**
         * @param monitorType Type of monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorType(@Nullable Output<String> monitorType) {
            $.monitorType = monitorType;
            return this;
        }

        /**
         * @param monitorType Type of monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorType(String monitorType) {
            return monitorType(Output.of(monitorType));
        }

        /**
         * @param repeatIntervalInSeconds (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder repeatIntervalInSeconds(@Nullable Output<Integer> repeatIntervalInSeconds) {
            $.repeatIntervalInSeconds = repeatIntervalInSeconds;
            return this;
        }

        /**
         * @param repeatIntervalInSeconds (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder repeatIntervalInSeconds(Integer repeatIntervalInSeconds) {
            return repeatIntervalInSeconds(Output.of(repeatIntervalInSeconds));
        }

        /**
         * @param scriptId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
         * 
         * @return builder
         * 
         */
        public Builder scriptId(@Nullable Output<String> scriptId) {
            $.scriptId = scriptId;
            return this;
        }

        /**
         * @param scriptId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
         * 
         * @return builder
         * 
         */
        public Builder scriptId(String scriptId) {
            return scriptId(Output.of(scriptId));
        }

        /**
         * @param scriptName Name of the script.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(@Nullable Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName Name of the script.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        /**
         * @param scriptParameters (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder scriptParameters(@Nullable Output<List<ConfigScriptParameterArgs>> scriptParameters) {
            $.scriptParameters = scriptParameters;
            return this;
        }

        /**
         * @param scriptParameters (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder scriptParameters(List<ConfigScriptParameterArgs> scriptParameters) {
            return scriptParameters(Output.of(scriptParameters));
        }

        /**
         * @param scriptParameters (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder scriptParameters(ConfigScriptParameterArgs... scriptParameters) {
            return scriptParameters(List.of(scriptParameters));
        }

        /**
         * @param status (Updatable) Enables or disables the monitor.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Updatable) Enables or disables the monitor.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param target (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param timeCreated The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param timeoutInSeconds (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param vantagePointCount Number of vantage points where monitor is running.
         * 
         * @return builder
         * 
         */
        public Builder vantagePointCount(@Nullable Output<Integer> vantagePointCount) {
            $.vantagePointCount = vantagePointCount;
            return this;
        }

        /**
         * @param vantagePointCount Number of vantage points where monitor is running.
         * 
         * @return builder
         * 
         */
        public Builder vantagePointCount(Integer vantagePointCount) {
            return vantagePointCount(Output.of(vantagePointCount));
        }

        /**
         * @param vantagePoints (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
         * 
         * @return builder
         * 
         */
        public Builder vantagePoints(@Nullable Output<List<String>> vantagePoints) {
            $.vantagePoints = vantagePoints;
            return this;
        }

        /**
         * @param vantagePoints (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
         * 
         * @return builder
         * 
         */
        public Builder vantagePoints(List<String> vantagePoints) {
            return vantagePoints(Output.of(vantagePoints));
        }

        /**
         * @param vantagePoints (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
         * 
         * @return builder
         * 
         */
        public Builder vantagePoints(String... vantagePoints) {
            return vantagePoints(List.of(vantagePoints));
        }

        public ConfigState build() {
            return $;
        }
    }

}
