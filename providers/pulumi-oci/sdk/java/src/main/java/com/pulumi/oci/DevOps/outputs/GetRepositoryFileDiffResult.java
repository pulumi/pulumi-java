// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoryFileDiffChange;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryFileDiffResult {
    /**
     * @return Indicates whether the changed file contains conflicts.
     * 
     */
    private final Boolean areConflictsInFile;
    private final String baseVersion;
    /**
     * @return List of changed section in the file.
     * 
     */
    private final List<GetRepositoryFileDiffChange> changes;
    private final String filePath;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Indicates whether the file is binary.
     * 
     */
    private final Boolean isBinary;
    private final @Nullable Boolean isComparisonFromMergeBase;
    /**
     * @return Indicates whether the file is large.
     * 
     */
    private final Boolean isLarge;
    /**
     * @return The ID of the changed object on the target version.
     * 
     */
    private final String newId;
    /**
     * @return The path on the target version to the changed object.
     * 
     */
    private final String newPath;
    /**
     * @return The ID of the changed object on the base version.
     * 
     */
    private final String oldId;
    /**
     * @return The path on the base version to the changed object.
     * 
     */
    private final String oldPath;
    private final String repositoryId;
    private final String targetVersion;

    @CustomType.Constructor
    private GetRepositoryFileDiffResult(
        @CustomType.Parameter("areConflictsInFile") Boolean areConflictsInFile,
        @CustomType.Parameter("baseVersion") String baseVersion,
        @CustomType.Parameter("changes") List<GetRepositoryFileDiffChange> changes,
        @CustomType.Parameter("filePath") String filePath,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isBinary") Boolean isBinary,
        @CustomType.Parameter("isComparisonFromMergeBase") @Nullable Boolean isComparisonFromMergeBase,
        @CustomType.Parameter("isLarge") Boolean isLarge,
        @CustomType.Parameter("newId") String newId,
        @CustomType.Parameter("newPath") String newPath,
        @CustomType.Parameter("oldId") String oldId,
        @CustomType.Parameter("oldPath") String oldPath,
        @CustomType.Parameter("repositoryId") String repositoryId,
        @CustomType.Parameter("targetVersion") String targetVersion) {
        this.areConflictsInFile = areConflictsInFile;
        this.baseVersion = baseVersion;
        this.changes = changes;
        this.filePath = filePath;
        this.id = id;
        this.isBinary = isBinary;
        this.isComparisonFromMergeBase = isComparisonFromMergeBase;
        this.isLarge = isLarge;
        this.newId = newId;
        this.newPath = newPath;
        this.oldId = oldId;
        this.oldPath = oldPath;
        this.repositoryId = repositoryId;
        this.targetVersion = targetVersion;
    }

    /**
     * @return Indicates whether the changed file contains conflicts.
     * 
     */
    public Boolean areConflictsInFile() {
        return this.areConflictsInFile;
    }
    public String baseVersion() {
        return this.baseVersion;
    }
    /**
     * @return List of changed section in the file.
     * 
     */
    public List<GetRepositoryFileDiffChange> changes() {
        return this.changes;
    }
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the file is binary.
     * 
     */
    public Boolean isBinary() {
        return this.isBinary;
    }
    public Optional<Boolean> isComparisonFromMergeBase() {
        return Optional.ofNullable(this.isComparisonFromMergeBase);
    }
    /**
     * @return Indicates whether the file is large.
     * 
     */
    public Boolean isLarge() {
        return this.isLarge;
    }
    /**
     * @return The ID of the changed object on the target version.
     * 
     */
    public String newId() {
        return this.newId;
    }
    /**
     * @return The path on the target version to the changed object.
     * 
     */
    public String newPath() {
        return this.newPath;
    }
    /**
     * @return The ID of the changed object on the base version.
     * 
     */
    public String oldId() {
        return this.oldId;
    }
    /**
     * @return The path on the base version to the changed object.
     * 
     */
    public String oldPath() {
        return this.oldPath;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    public String targetVersion() {
        return this.targetVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryFileDiffResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean areConflictsInFile;
        private String baseVersion;
        private List<GetRepositoryFileDiffChange> changes;
        private String filePath;
        private String id;
        private Boolean isBinary;
        private @Nullable Boolean isComparisonFromMergeBase;
        private Boolean isLarge;
        private String newId;
        private String newPath;
        private String oldId;
        private String oldPath;
        private String repositoryId;
        private String targetVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRepositoryFileDiffResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areConflictsInFile = defaults.areConflictsInFile;
    	      this.baseVersion = defaults.baseVersion;
    	      this.changes = defaults.changes;
    	      this.filePath = defaults.filePath;
    	      this.id = defaults.id;
    	      this.isBinary = defaults.isBinary;
    	      this.isComparisonFromMergeBase = defaults.isComparisonFromMergeBase;
    	      this.isLarge = defaults.isLarge;
    	      this.newId = defaults.newId;
    	      this.newPath = defaults.newPath;
    	      this.oldId = defaults.oldId;
    	      this.oldPath = defaults.oldPath;
    	      this.repositoryId = defaults.repositoryId;
    	      this.targetVersion = defaults.targetVersion;
        }

        public Builder areConflictsInFile(Boolean areConflictsInFile) {
            this.areConflictsInFile = Objects.requireNonNull(areConflictsInFile);
            return this;
        }
        public Builder baseVersion(String baseVersion) {
            this.baseVersion = Objects.requireNonNull(baseVersion);
            return this;
        }
        public Builder changes(List<GetRepositoryFileDiffChange> changes) {
            this.changes = Objects.requireNonNull(changes);
            return this;
        }
        public Builder changes(GetRepositoryFileDiffChange... changes) {
            return changes(List.of(changes));
        }
        public Builder filePath(String filePath) {
            this.filePath = Objects.requireNonNull(filePath);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isBinary(Boolean isBinary) {
            this.isBinary = Objects.requireNonNull(isBinary);
            return this;
        }
        public Builder isComparisonFromMergeBase(@Nullable Boolean isComparisonFromMergeBase) {
            this.isComparisonFromMergeBase = isComparisonFromMergeBase;
            return this;
        }
        public Builder isLarge(Boolean isLarge) {
            this.isLarge = Objects.requireNonNull(isLarge);
            return this;
        }
        public Builder newId(String newId) {
            this.newId = Objects.requireNonNull(newId);
            return this;
        }
        public Builder newPath(String newPath) {
            this.newPath = Objects.requireNonNull(newPath);
            return this;
        }
        public Builder oldId(String oldId) {
            this.oldId = Objects.requireNonNull(oldId);
            return this;
        }
        public Builder oldPath(String oldPath) {
            this.oldPath = Objects.requireNonNull(oldPath);
            return this;
        }
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        public Builder targetVersion(String targetVersion) {
            this.targetVersion = Objects.requireNonNull(targetVersion);
            return this;
        }        public GetRepositoryFileDiffResult build() {
            return new GetRepositoryFileDiffResult(areConflictsInFile, baseVersion, changes, filePath, id, isBinary, isComparisonFromMergeBase, isLarge, newId, newPath, oldId, oldPath, repositoryId, targetVersion);
        }
    }
}
