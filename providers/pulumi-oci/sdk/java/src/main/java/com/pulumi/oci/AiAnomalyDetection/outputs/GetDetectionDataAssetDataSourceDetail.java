// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.AiAnomalyDetection.outputs.GetDetectionDataAssetDataSourceDetailVersionSpecificDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDetectionDataAssetDataSourceDetail {
    /**
     * @return atp db password Secret Id
     * 
     */
    private final String atpPasswordSecretId;
    /**
     * @return atp db user name
     * 
     */
    private final String atpUserName;
    /**
     * @return Bucket Name for influx connection
     * 
     */
    private final String bucket;
    /**
     * @return OCID of the secret containing the containers certificates of ATP wallet
     * 
     */
    private final String cwalletFileSecretId;
    /**
     * @return Data source type where actually data asset is being stored
     * 
     */
    private final String dataSourceType;
    /**
     * @return DB Name for influx connection
     * 
     */
    private final String databaseName;
    /**
     * @return OCID of the secret containing the PDB&#39;S certificates of ATP wallet
     * 
     */
    private final String ewalletFileSecretId;
    /**
     * @return OCID of the secret containing Keystore.jks file of the ATP wallet
     * 
     */
    private final String keyStoreFileSecretId;
    /**
     * @return Measurement name for influx
     * 
     */
    private final String measurementName;
    /**
     * @return Object storage namespace
     * 
     */
    private final String namespace;
    /**
     * @return File name
     * 
     */
    private final String object;
    /**
     * @return OCID of the secret that contains jdbc properties file of ATP wallet
     * 
     */
    private final String ojdbcFileSecretId;
    /**
     * @return Password Secret Id for the influx connection
     * 
     */
    private final String passwordSecretId;
    /**
     * @return atp database table name
     * 
     */
    private final String tableName;
    /**
     * @return OCID of the secret that contains the tnsnames file of ATP wallet
     * 
     */
    private final String tnsnamesFileSecretId;
    /**
     * @return OCID of the secret containing truststore.jks file of the ATP wallet
     * 
     */
    private final String truststoreFileSecretId;
    /**
     * @return public IP address and port to influx DB
     * 
     */
    private final String url;
    /**
     * @return Username for connection to Influx
     * 
     */
    private final String userName;
    /**
     * @return Possible data sources
     * 
     */
    private final List<GetDetectionDataAssetDataSourceDetailVersionSpecificDetail> versionSpecificDetails;
    /**
     * @return wallet password Secret ID in String format
     * 
     */
    private final String walletPasswordSecretId;

    @CustomType.Constructor
    private GetDetectionDataAssetDataSourceDetail(
        @CustomType.Parameter("atpPasswordSecretId") String atpPasswordSecretId,
        @CustomType.Parameter("atpUserName") String atpUserName,
        @CustomType.Parameter("bucket") String bucket,
        @CustomType.Parameter("cwalletFileSecretId") String cwalletFileSecretId,
        @CustomType.Parameter("dataSourceType") String dataSourceType,
        @CustomType.Parameter("databaseName") String databaseName,
        @CustomType.Parameter("ewalletFileSecretId") String ewalletFileSecretId,
        @CustomType.Parameter("keyStoreFileSecretId") String keyStoreFileSecretId,
        @CustomType.Parameter("measurementName") String measurementName,
        @CustomType.Parameter("namespace") String namespace,
        @CustomType.Parameter("object") String object,
        @CustomType.Parameter("ojdbcFileSecretId") String ojdbcFileSecretId,
        @CustomType.Parameter("passwordSecretId") String passwordSecretId,
        @CustomType.Parameter("tableName") String tableName,
        @CustomType.Parameter("tnsnamesFileSecretId") String tnsnamesFileSecretId,
        @CustomType.Parameter("truststoreFileSecretId") String truststoreFileSecretId,
        @CustomType.Parameter("url") String url,
        @CustomType.Parameter("userName") String userName,
        @CustomType.Parameter("versionSpecificDetails") List<GetDetectionDataAssetDataSourceDetailVersionSpecificDetail> versionSpecificDetails,
        @CustomType.Parameter("walletPasswordSecretId") String walletPasswordSecretId) {
        this.atpPasswordSecretId = atpPasswordSecretId;
        this.atpUserName = atpUserName;
        this.bucket = bucket;
        this.cwalletFileSecretId = cwalletFileSecretId;
        this.dataSourceType = dataSourceType;
        this.databaseName = databaseName;
        this.ewalletFileSecretId = ewalletFileSecretId;
        this.keyStoreFileSecretId = keyStoreFileSecretId;
        this.measurementName = measurementName;
        this.namespace = namespace;
        this.object = object;
        this.ojdbcFileSecretId = ojdbcFileSecretId;
        this.passwordSecretId = passwordSecretId;
        this.tableName = tableName;
        this.tnsnamesFileSecretId = tnsnamesFileSecretId;
        this.truststoreFileSecretId = truststoreFileSecretId;
        this.url = url;
        this.userName = userName;
        this.versionSpecificDetails = versionSpecificDetails;
        this.walletPasswordSecretId = walletPasswordSecretId;
    }

    /**
     * @return atp db password Secret Id
     * 
     */
    public String atpPasswordSecretId() {
        return this.atpPasswordSecretId;
    }
    /**
     * @return atp db user name
     * 
     */
    public String atpUserName() {
        return this.atpUserName;
    }
    /**
     * @return Bucket Name for influx connection
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return OCID of the secret containing the containers certificates of ATP wallet
     * 
     */
    public String cwalletFileSecretId() {
        return this.cwalletFileSecretId;
    }
    /**
     * @return Data source type where actually data asset is being stored
     * 
     */
    public String dataSourceType() {
        return this.dataSourceType;
    }
    /**
     * @return DB Name for influx connection
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return OCID of the secret containing the PDB&#39;S certificates of ATP wallet
     * 
     */
    public String ewalletFileSecretId() {
        return this.ewalletFileSecretId;
    }
    /**
     * @return OCID of the secret containing Keystore.jks file of the ATP wallet
     * 
     */
    public String keyStoreFileSecretId() {
        return this.keyStoreFileSecretId;
    }
    /**
     * @return Measurement name for influx
     * 
     */
    public String measurementName() {
        return this.measurementName;
    }
    /**
     * @return Object storage namespace
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return File name
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return OCID of the secret that contains jdbc properties file of ATP wallet
     * 
     */
    public String ojdbcFileSecretId() {
        return this.ojdbcFileSecretId;
    }
    /**
     * @return Password Secret Id for the influx connection
     * 
     */
    public String passwordSecretId() {
        return this.passwordSecretId;
    }
    /**
     * @return atp database table name
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return OCID of the secret that contains the tnsnames file of ATP wallet
     * 
     */
    public String tnsnamesFileSecretId() {
        return this.tnsnamesFileSecretId;
    }
    /**
     * @return OCID of the secret containing truststore.jks file of the ATP wallet
     * 
     */
    public String truststoreFileSecretId() {
        return this.truststoreFileSecretId;
    }
    /**
     * @return public IP address and port to influx DB
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return Username for connection to Influx
     * 
     */
    public String userName() {
        return this.userName;
    }
    /**
     * @return Possible data sources
     * 
     */
    public List<GetDetectionDataAssetDataSourceDetailVersionSpecificDetail> versionSpecificDetails() {
        return this.versionSpecificDetails;
    }
    /**
     * @return wallet password Secret ID in String format
     * 
     */
    public String walletPasswordSecretId() {
        return this.walletPasswordSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDetectionDataAssetDataSourceDetail defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String atpPasswordSecretId;
        private String atpUserName;
        private String bucket;
        private String cwalletFileSecretId;
        private String dataSourceType;
        private String databaseName;
        private String ewalletFileSecretId;
        private String keyStoreFileSecretId;
        private String measurementName;
        private String namespace;
        private String object;
        private String ojdbcFileSecretId;
        private String passwordSecretId;
        private String tableName;
        private String tnsnamesFileSecretId;
        private String truststoreFileSecretId;
        private String url;
        private String userName;
        private List<GetDetectionDataAssetDataSourceDetailVersionSpecificDetail> versionSpecificDetails;
        private String walletPasswordSecretId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDetectionDataAssetDataSourceDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atpPasswordSecretId = defaults.atpPasswordSecretId;
    	      this.atpUserName = defaults.atpUserName;
    	      this.bucket = defaults.bucket;
    	      this.cwalletFileSecretId = defaults.cwalletFileSecretId;
    	      this.dataSourceType = defaults.dataSourceType;
    	      this.databaseName = defaults.databaseName;
    	      this.ewalletFileSecretId = defaults.ewalletFileSecretId;
    	      this.keyStoreFileSecretId = defaults.keyStoreFileSecretId;
    	      this.measurementName = defaults.measurementName;
    	      this.namespace = defaults.namespace;
    	      this.object = defaults.object;
    	      this.ojdbcFileSecretId = defaults.ojdbcFileSecretId;
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.tableName = defaults.tableName;
    	      this.tnsnamesFileSecretId = defaults.tnsnamesFileSecretId;
    	      this.truststoreFileSecretId = defaults.truststoreFileSecretId;
    	      this.url = defaults.url;
    	      this.userName = defaults.userName;
    	      this.versionSpecificDetails = defaults.versionSpecificDetails;
    	      this.walletPasswordSecretId = defaults.walletPasswordSecretId;
        }

        public Builder atpPasswordSecretId(String atpPasswordSecretId) {
            this.atpPasswordSecretId = Objects.requireNonNull(atpPasswordSecretId);
            return this;
        }
        public Builder atpUserName(String atpUserName) {
            this.atpUserName = Objects.requireNonNull(atpUserName);
            return this;
        }
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder cwalletFileSecretId(String cwalletFileSecretId) {
            this.cwalletFileSecretId = Objects.requireNonNull(cwalletFileSecretId);
            return this;
        }
        public Builder dataSourceType(String dataSourceType) {
            this.dataSourceType = Objects.requireNonNull(dataSourceType);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder ewalletFileSecretId(String ewalletFileSecretId) {
            this.ewalletFileSecretId = Objects.requireNonNull(ewalletFileSecretId);
            return this;
        }
        public Builder keyStoreFileSecretId(String keyStoreFileSecretId) {
            this.keyStoreFileSecretId = Objects.requireNonNull(keyStoreFileSecretId);
            return this;
        }
        public Builder measurementName(String measurementName) {
            this.measurementName = Objects.requireNonNull(measurementName);
            return this;
        }
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        public Builder ojdbcFileSecretId(String ojdbcFileSecretId) {
            this.ojdbcFileSecretId = Objects.requireNonNull(ojdbcFileSecretId);
            return this;
        }
        public Builder passwordSecretId(String passwordSecretId) {
            this.passwordSecretId = Objects.requireNonNull(passwordSecretId);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder tnsnamesFileSecretId(String tnsnamesFileSecretId) {
            this.tnsnamesFileSecretId = Objects.requireNonNull(tnsnamesFileSecretId);
            return this;
        }
        public Builder truststoreFileSecretId(String truststoreFileSecretId) {
            this.truststoreFileSecretId = Objects.requireNonNull(truststoreFileSecretId);
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }
        public Builder versionSpecificDetails(List<GetDetectionDataAssetDataSourceDetailVersionSpecificDetail> versionSpecificDetails) {
            this.versionSpecificDetails = Objects.requireNonNull(versionSpecificDetails);
            return this;
        }
        public Builder versionSpecificDetails(GetDetectionDataAssetDataSourceDetailVersionSpecificDetail... versionSpecificDetails) {
            return versionSpecificDetails(List.of(versionSpecificDetails));
        }
        public Builder walletPasswordSecretId(String walletPasswordSecretId) {
            this.walletPasswordSecretId = Objects.requireNonNull(walletPasswordSecretId);
            return this;
        }        public GetDetectionDataAssetDataSourceDetail build() {
            return new GetDetectionDataAssetDataSourceDetail(atpPasswordSecretId, atpUserName, bucket, cwalletFileSecretId, dataSourceType, databaseName, ewalletFileSecretId, keyStoreFileSecretId, measurementName, namespace, object, ojdbcFileSecretId, passwordSecretId, tableName, tnsnamesFileSecretId, truststoreFileSecretId, url, userName, versionSpecificDetails, walletPasswordSecretId);
        }
    }
}
