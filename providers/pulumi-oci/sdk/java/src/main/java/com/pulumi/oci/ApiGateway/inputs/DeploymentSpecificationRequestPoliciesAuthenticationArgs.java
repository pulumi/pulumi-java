// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRequestPoliciesAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRequestPoliciesAuthenticationArgs Empty = new DeploymentSpecificationRequestPoliciesAuthenticationArgs();

    /**
     * (Updatable) The list of intended recipients for the token.
     * 
     */
    @Import(name="audiences")
    private @Nullable Output<List<String>> audiences;

    /**
     * @return (Updatable) The list of intended recipients for the token.
     * 
     */
    public Optional<Output<List<String>>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    /**
     * (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    @Import(name="isAnonymousAccessAllowed")
    private @Nullable Output<Boolean> isAnonymousAccessAllowed;

    /**
     * @return (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    public Optional<Output<Boolean>> isAnonymousAccessAllowed() {
        return Optional.ofNullable(this.isAnonymousAccessAllowed);
    }

    /**
     * (Updatable) A list of parties that could have issued the token.
     * 
     */
    @Import(name="issuers")
    private @Nullable Output<List<String>> issuers;

    /**
     * @return (Updatable) A list of parties that could have issued the token.
     * 
     */
    public Optional<Output<List<String>>> issuers() {
        return Optional.ofNullable(this.issuers);
    }

    /**
     * (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    @Import(name="maxClockSkewInSeconds")
    private @Nullable Output<Double> maxClockSkewInSeconds;

    /**
     * @return (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    public Optional<Output<Double>> maxClockSkewInSeconds() {
        return Optional.ofNullable(this.maxClockSkewInSeconds);
    }

    /**
     * (Updatable) A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    @Import(name="publicKeys")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs> publicKeys;

    /**
     * @return (Updatable) A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs>> publicKeys() {
        return Optional.ofNullable(this.publicKeys);
    }

    /**
     * (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    @Import(name="tokenAuthScheme")
    private @Nullable Output<String> tokenAuthScheme;

    /**
     * @return (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    public Optional<Output<String>> tokenAuthScheme() {
        return Optional.ofNullable(this.tokenAuthScheme);
    }

    /**
     * (Updatable) The name of the header containing the authentication token.
     * 
     */
    @Import(name="tokenHeader")
    private @Nullable Output<String> tokenHeader;

    /**
     * @return (Updatable) The name of the header containing the authentication token.
     * 
     */
    public Optional<Output<String>> tokenHeader() {
        return Optional.ofNullable(this.tokenHeader);
    }

    /**
     * (Updatable) The name of the query parameter containing the authentication token.
     * 
     */
    @Import(name="tokenQueryParam")
    private @Nullable Output<String> tokenQueryParam;

    /**
     * @return (Updatable) The name of the query parameter containing the authentication token.
     * 
     */
    public Optional<Output<String>> tokenQueryParam() {
        return Optional.ofNullable(this.tokenQueryParam);
    }

    /**
     * (Updatable) Type of the Response Cache Store Policy.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of the Response Cache Store Policy.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) A list of claims which should be validated to consider the token valid.
     * 
     */
    @Import(name="verifyClaims")
    private @Nullable Output<List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs>> verifyClaims;

    /**
     * @return (Updatable) A list of claims which should be validated to consider the token valid.
     * 
     */
    public Optional<Output<List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs>>> verifyClaims() {
        return Optional.ofNullable(this.verifyClaims);
    }

    private DeploymentSpecificationRequestPoliciesAuthenticationArgs() {}

    private DeploymentSpecificationRequestPoliciesAuthenticationArgs(DeploymentSpecificationRequestPoliciesAuthenticationArgs $) {
        this.audiences = $.audiences;
        this.functionId = $.functionId;
        this.isAnonymousAccessAllowed = $.isAnonymousAccessAllowed;
        this.issuers = $.issuers;
        this.maxClockSkewInSeconds = $.maxClockSkewInSeconds;
        this.publicKeys = $.publicKeys;
        this.tokenAuthScheme = $.tokenAuthScheme;
        this.tokenHeader = $.tokenHeader;
        this.tokenQueryParam = $.tokenQueryParam;
        this.type = $.type;
        this.verifyClaims = $.verifyClaims;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRequestPoliciesAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRequestPoliciesAuthenticationArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRequestPoliciesAuthenticationArgs();
        }

        public Builder(DeploymentSpecificationRequestPoliciesAuthenticationArgs defaults) {
            $ = new DeploymentSpecificationRequestPoliciesAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audiences (Updatable) The list of intended recipients for the token.
         * 
         * @return builder
         * 
         */
        public Builder audiences(@Nullable Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences (Updatable) The list of intended recipients for the token.
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences (Updatable) The list of intended recipients for the token.
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param functionId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
         * 
         * @return builder
         * 
         */
        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        /**
         * @param functionId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
         * 
         * @return builder
         * 
         */
        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        /**
         * @param isAnonymousAccessAllowed (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
         * 
         * @return builder
         * 
         */
        public Builder isAnonymousAccessAllowed(@Nullable Output<Boolean> isAnonymousAccessAllowed) {
            $.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            return this;
        }

        /**
         * @param isAnonymousAccessAllowed (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
         * 
         * @return builder
         * 
         */
        public Builder isAnonymousAccessAllowed(Boolean isAnonymousAccessAllowed) {
            return isAnonymousAccessAllowed(Output.of(isAnonymousAccessAllowed));
        }

        /**
         * @param issuers (Updatable) A list of parties that could have issued the token.
         * 
         * @return builder
         * 
         */
        public Builder issuers(@Nullable Output<List<String>> issuers) {
            $.issuers = issuers;
            return this;
        }

        /**
         * @param issuers (Updatable) A list of parties that could have issued the token.
         * 
         * @return builder
         * 
         */
        public Builder issuers(List<String> issuers) {
            return issuers(Output.of(issuers));
        }

        /**
         * @param issuers (Updatable) A list of parties that could have issued the token.
         * 
         * @return builder
         * 
         */
        public Builder issuers(String... issuers) {
            return issuers(List.of(issuers));
        }

        /**
         * @param maxClockSkewInSeconds (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
         * 
         * @return builder
         * 
         */
        public Builder maxClockSkewInSeconds(@Nullable Output<Double> maxClockSkewInSeconds) {
            $.maxClockSkewInSeconds = maxClockSkewInSeconds;
            return this;
        }

        /**
         * @param maxClockSkewInSeconds (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
         * 
         * @return builder
         * 
         */
        public Builder maxClockSkewInSeconds(Double maxClockSkewInSeconds) {
            return maxClockSkewInSeconds(Output.of(maxClockSkewInSeconds));
        }

        /**
         * @param publicKeys (Updatable) A set of Public Keys that will be used to verify the JWT signature.
         * 
         * @return builder
         * 
         */
        public Builder publicKeys(@Nullable Output<DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs> publicKeys) {
            $.publicKeys = publicKeys;
            return this;
        }

        /**
         * @param publicKeys (Updatable) A set of Public Keys that will be used to verify the JWT signature.
         * 
         * @return builder
         * 
         */
        public Builder publicKeys(DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs publicKeys) {
            return publicKeys(Output.of(publicKeys));
        }

        /**
         * @param tokenAuthScheme (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
         * 
         * @return builder
         * 
         */
        public Builder tokenAuthScheme(@Nullable Output<String> tokenAuthScheme) {
            $.tokenAuthScheme = tokenAuthScheme;
            return this;
        }

        /**
         * @param tokenAuthScheme (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
         * 
         * @return builder
         * 
         */
        public Builder tokenAuthScheme(String tokenAuthScheme) {
            return tokenAuthScheme(Output.of(tokenAuthScheme));
        }

        /**
         * @param tokenHeader (Updatable) The name of the header containing the authentication token.
         * 
         * @return builder
         * 
         */
        public Builder tokenHeader(@Nullable Output<String> tokenHeader) {
            $.tokenHeader = tokenHeader;
            return this;
        }

        /**
         * @param tokenHeader (Updatable) The name of the header containing the authentication token.
         * 
         * @return builder
         * 
         */
        public Builder tokenHeader(String tokenHeader) {
            return tokenHeader(Output.of(tokenHeader));
        }

        /**
         * @param tokenQueryParam (Updatable) The name of the query parameter containing the authentication token.
         * 
         * @return builder
         * 
         */
        public Builder tokenQueryParam(@Nullable Output<String> tokenQueryParam) {
            $.tokenQueryParam = tokenQueryParam;
            return this;
        }

        /**
         * @param tokenQueryParam (Updatable) The name of the query parameter containing the authentication token.
         * 
         * @return builder
         * 
         */
        public Builder tokenQueryParam(String tokenQueryParam) {
            return tokenQueryParam(Output.of(tokenQueryParam));
        }

        /**
         * @param type (Updatable) Type of the Response Cache Store Policy.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of the Response Cache Store Policy.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param verifyClaims (Updatable) A list of claims which should be validated to consider the token valid.
         * 
         * @return builder
         * 
         */
        public Builder verifyClaims(@Nullable Output<List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs>> verifyClaims) {
            $.verifyClaims = verifyClaims;
            return this;
        }

        /**
         * @param verifyClaims (Updatable) A list of claims which should be validated to consider the token valid.
         * 
         * @return builder
         * 
         */
        public Builder verifyClaims(List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs> verifyClaims) {
            return verifyClaims(Output.of(verifyClaims));
        }

        /**
         * @param verifyClaims (Updatable) A list of claims which should be validated to consider the token valid.
         * 
         * @return builder
         * 
         */
        public Builder verifyClaims(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs... verifyClaims) {
            return verifyClaims(List.of(verifyClaims));
        }

        public DeploymentSpecificationRequestPoliciesAuthenticationArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
