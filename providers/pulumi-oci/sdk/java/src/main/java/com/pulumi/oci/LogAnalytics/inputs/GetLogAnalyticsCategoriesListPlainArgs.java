// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsCategoriesListPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsCategoriesListPlainArgs Empty = new GetLogAnalyticsCategoriesListPlainArgs();

    /**
     * The category display text used for filtering. Only categories matching the specified display name or description will be returned.
     * 
     */
    @Import(name="categoryDisplayText")
    private @Nullable String categoryDisplayText;

    /**
     * @return The category display text used for filtering. Only categories matching the specified display name or description will be returned.
     * 
     */
    public Optional<String> categoryDisplayText() {
        return Optional.ofNullable(this.categoryDisplayText);
    }

    /**
     * A comma-separated list of category types used for filtering. Only categories of the specified types will be returned.
     * 
     */
    @Import(name="categoryType")
    private @Nullable String categoryType;

    /**
     * @return A comma-separated list of category types used for filtering. Only categories of the specified types will be returned.
     * 
     */
    public Optional<String> categoryType() {
        return Optional.ofNullable(this.categoryType);
    }

    /**
     * A filter to return only log analytics category whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to return only log analytics category whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    private GetLogAnalyticsCategoriesListPlainArgs() {}

    private GetLogAnalyticsCategoriesListPlainArgs(GetLogAnalyticsCategoriesListPlainArgs $) {
        this.categoryDisplayText = $.categoryDisplayText;
        this.categoryType = $.categoryType;
        this.name = $.name;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsCategoriesListPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsCategoriesListPlainArgs $;

        public Builder() {
            $ = new GetLogAnalyticsCategoriesListPlainArgs();
        }

        public Builder(GetLogAnalyticsCategoriesListPlainArgs defaults) {
            $ = new GetLogAnalyticsCategoriesListPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryDisplayText The category display text used for filtering. Only categories matching the specified display name or description will be returned.
         * 
         * @return builder
         * 
         */
        public Builder categoryDisplayText(@Nullable String categoryDisplayText) {
            $.categoryDisplayText = categoryDisplayText;
            return this;
        }

        /**
         * @param categoryType A comma-separated list of category types used for filtering. Only categories of the specified types will be returned.
         * 
         * @return builder
         * 
         */
        public Builder categoryType(@Nullable String categoryType) {
            $.categoryType = categoryType;
            return this;
        }

        /**
         * @param name A filter to return only log analytics category whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        public GetLogAnalyticsCategoriesListPlainArgs build() {
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
