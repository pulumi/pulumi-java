// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensitiveDataModelsSensitiveColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitiveDataModelsSensitiveColumnArgs Empty = new SensitiveDataModelsSensitiveColumnArgs();

    /**
     * (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    @Import(name="appDefinedChildColumnKeys")
    private @Nullable Output<List<String>> appDefinedChildColumnKeys;

    /**
     * @return (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    public Optional<Output<List<String>>> appDefinedChildColumnKeys() {
        return Optional.ofNullable(this.appDefinedChildColumnKeys);
    }

    /**
     * The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it&#39;s automatically populated with the value provided for the schemaName attribute.
     * 
     */
    @Import(name="appName")
    private @Nullable Output<String> appName;

    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it&#39;s automatically populated with the value provided for the schemaName attribute.
     * 
     */
    public Optional<Output<String>> appName() {
        return Optional.ofNullable(this.appName);
    }

    /**
     * The name of the sensitive column.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return The name of the sensitive column.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * (Updatable) The data type of the sensitive column.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return (Updatable) The data type of the sensitive column.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    @Import(name="dbDefinedChildColumnKeys")
    private @Nullable Output<List<String>> dbDefinedChildColumnKeys;

    /**
     * @return (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    public Optional<Output<List<String>>> dbDefinedChildColumnKeys() {
        return Optional.ofNullable(this.dbDefinedChildColumnKeys);
    }

    /**
     * The database object that contains the sensitive column.
     * 
     */
    @Import(name="object", required=true)
    private Output<String> object;

    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    public Output<String> object() {
        return this.object;
    }

    /**
     * The type of the database object that contains the sensitive column.
     * 
     */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    /**
     * (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     * 
     */
    @Import(name="parentColumnKeys")
    private @Nullable Output<List<String>> parentColumnKeys;

    /**
     * @return (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     * 
     */
    public Optional<Output<List<String>>> parentColumnKeys() {
        return Optional.ofNullable(this.parentColumnKeys);
    }

    /**
     * (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    @Import(name="relationType")
    private @Nullable Output<String> relationType;

    /**
     * @return (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public Optional<Output<String>> relationType() {
        return Optional.ofNullable(this.relationType);
    }

    /**
     * The database schema that contains the sensitive column.
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }

    /**
     * The OCID of the sensitive data model.
     * 
     */
    @Import(name="sensitiveDataModelId", required=true)
    private Output<String> sensitiveDataModelId;

    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public Output<String> sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }

    /**
     * (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     * 
     */
    @Import(name="sensitiveTypeId")
    private @Nullable Output<String> sensitiveTypeId;

    /**
     * @return (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     * 
     */
    public Optional<Output<String>> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }

    /**
     * (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private SensitiveDataModelsSensitiveColumnArgs() {}

    private SensitiveDataModelsSensitiveColumnArgs(SensitiveDataModelsSensitiveColumnArgs $) {
        this.appDefinedChildColumnKeys = $.appDefinedChildColumnKeys;
        this.appName = $.appName;
        this.columnName = $.columnName;
        this.dataType = $.dataType;
        this.dbDefinedChildColumnKeys = $.dbDefinedChildColumnKeys;
        this.object = $.object;
        this.objectType = $.objectType;
        this.parentColumnKeys = $.parentColumnKeys;
        this.relationType = $.relationType;
        this.schemaName = $.schemaName;
        this.sensitiveDataModelId = $.sensitiveDataModelId;
        this.sensitiveTypeId = $.sensitiveTypeId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitiveDataModelsSensitiveColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitiveDataModelsSensitiveColumnArgs $;

        public Builder() {
            $ = new SensitiveDataModelsSensitiveColumnArgs();
        }

        public Builder(SensitiveDataModelsSensitiveColumnArgs defaults) {
            $ = new SensitiveDataModelsSensitiveColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appDefinedChildColumnKeys (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder appDefinedChildColumnKeys(@Nullable Output<List<String>> appDefinedChildColumnKeys) {
            $.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            return this;
        }

        /**
         * @param appDefinedChildColumnKeys (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder appDefinedChildColumnKeys(List<String> appDefinedChildColumnKeys) {
            return appDefinedChildColumnKeys(Output.of(appDefinedChildColumnKeys));
        }

        /**
         * @param appDefinedChildColumnKeys (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder appDefinedChildColumnKeys(String... appDefinedChildColumnKeys) {
            return appDefinedChildColumnKeys(List.of(appDefinedChildColumnKeys));
        }

        /**
         * @param appName The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it&#39;s automatically populated with the value provided for the schemaName attribute.
         * 
         * @return builder
         * 
         */
        public Builder appName(@Nullable Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it&#39;s automatically populated with the value provided for the schemaName attribute.
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param columnName The name of the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName The name of the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param dataType (Updatable) The data type of the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType (Updatable) The data type of the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param dbDefinedChildColumnKeys (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder dbDefinedChildColumnKeys(@Nullable Output<List<String>> dbDefinedChildColumnKeys) {
            $.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            return this;
        }

        /**
         * @param dbDefinedChildColumnKeys (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder dbDefinedChildColumnKeys(List<String> dbDefinedChildColumnKeys) {
            return dbDefinedChildColumnKeys(Output.of(dbDefinedChildColumnKeys));
        }

        /**
         * @param dbDefinedChildColumnKeys (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder dbDefinedChildColumnKeys(String... dbDefinedChildColumnKeys) {
            return dbDefinedChildColumnKeys(List.of(dbDefinedChildColumnKeys));
        }

        /**
         * @param object The database object that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder object(Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object The database object that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param objectType The type of the database object that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType The type of the database object that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        /**
         * @param parentColumnKeys (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder parentColumnKeys(@Nullable Output<List<String>> parentColumnKeys) {
            $.parentColumnKeys = parentColumnKeys;
            return this;
        }

        /**
         * @param parentColumnKeys (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder parentColumnKeys(List<String> parentColumnKeys) {
            return parentColumnKeys(Output.of(parentColumnKeys));
        }

        /**
         * @param parentColumnKeys (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
         * 
         * @return builder
         * 
         */
        public Builder parentColumnKeys(String... parentColumnKeys) {
            return parentColumnKeys(List.of(parentColumnKeys));
        }

        /**
         * @param relationType (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
         * 
         * @return builder
         * 
         */
        public Builder relationType(@Nullable Output<String> relationType) {
            $.relationType = relationType;
            return this;
        }

        /**
         * @param relationType (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
         * 
         * @return builder
         * 
         */
        public Builder relationType(String relationType) {
            return relationType(Output.of(relationType));
        }

        /**
         * @param schemaName The database schema that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The database schema that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param sensitiveDataModelId The OCID of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(Output<String> sensitiveDataModelId) {
            $.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }

        /**
         * @param sensitiveDataModelId The OCID of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            return sensitiveDataModelId(Output.of(sensitiveDataModelId));
        }

        /**
         * @param sensitiveTypeId (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeId(@Nullable Output<String> sensitiveTypeId) {
            $.sensitiveTypeId = sensitiveTypeId;
            return this;
        }

        /**
         * @param sensitiveTypeId (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeId(String sensitiveTypeId) {
            return sensitiveTypeId(Output.of(sensitiveTypeId));
        }

        /**
         * @param status (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SensitiveDataModelsSensitiveColumnArgs build() {
            $.columnName = Objects.requireNonNull($.columnName, "expected parameter 'columnName' to be non-null");
            $.object = Objects.requireNonNull($.object, "expected parameter 'object' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            $.sensitiveDataModelId = Objects.requireNonNull($.sensitiveDataModelId, "expected parameter 'sensitiveDataModelId' to be non-null");
            return $;
        }
    }

}
