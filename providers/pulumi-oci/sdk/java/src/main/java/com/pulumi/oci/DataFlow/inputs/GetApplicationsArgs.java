// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataFlow.inputs.GetApplicationsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetApplicationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetApplicationsArgs Empty = new GetApplicationsArgs();

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The query parameter for the Spark application name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The query parameter for the Spark application name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The displayName prefix.
     * 
     */
    @Import(name="displayNameStartsWith")
    private @Nullable Output<String> displayNameStartsWith;

    /**
     * @return The displayName prefix.
     * 
     */
    public Optional<Output<String>> displayNameStartsWith() {
        return Optional.ofNullable(this.displayNameStartsWith);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetApplicationsFilterArgs>> filters;

    public Optional<Output<List<GetApplicationsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the user who created the resource.
     * 
     */
    @Import(name="ownerPrincipalId")
    private @Nullable Output<String> ownerPrincipalId;

    /**
     * @return The OCID of the user who created the resource.
     * 
     */
    public Optional<Output<String>> ownerPrincipalId() {
        return Optional.ofNullable(this.ownerPrincipalId);
    }

    /**
     * The Spark version utilized to run the application.
     * 
     */
    @Import(name="sparkVersion")
    private @Nullable Output<String> sparkVersion;

    /**
     * @return The Spark version utilized to run the application.
     * 
     */
    public Optional<Output<String>> sparkVersion() {
        return Optional.ofNullable(this.sparkVersion);
    }

    private GetApplicationsArgs() {}

    private GetApplicationsArgs(GetApplicationsArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.displayNameStartsWith = $.displayNameStartsWith;
        this.filters = $.filters;
        this.ownerPrincipalId = $.ownerPrincipalId;
        this.sparkVersion = $.sparkVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetApplicationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetApplicationsArgs $;

        public Builder() {
            $ = new GetApplicationsArgs();
        }

        public Builder(GetApplicationsArgs defaults) {
            $ = new GetApplicationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName The query parameter for the Spark application name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The query parameter for the Spark application name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param displayNameStartsWith The displayName prefix.
         * 
         * @return builder
         * 
         */
        public Builder displayNameStartsWith(@Nullable Output<String> displayNameStartsWith) {
            $.displayNameStartsWith = displayNameStartsWith;
            return this;
        }

        /**
         * @param displayNameStartsWith The displayName prefix.
         * 
         * @return builder
         * 
         */
        public Builder displayNameStartsWith(String displayNameStartsWith) {
            return displayNameStartsWith(Output.of(displayNameStartsWith));
        }

        public Builder filters(@Nullable Output<List<GetApplicationsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetApplicationsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetApplicationsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param ownerPrincipalId The OCID of the user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder ownerPrincipalId(@Nullable Output<String> ownerPrincipalId) {
            $.ownerPrincipalId = ownerPrincipalId;
            return this;
        }

        /**
         * @param ownerPrincipalId The OCID of the user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder ownerPrincipalId(String ownerPrincipalId) {
            return ownerPrincipalId(Output.of(ownerPrincipalId));
        }

        /**
         * @param sparkVersion The Spark version utilized to run the application.
         * 
         * @return builder
         * 
         */
        public Builder sparkVersion(@Nullable Output<String> sparkVersion) {
            $.sparkVersion = sparkVersion;
            return this;
        }

        /**
         * @param sparkVersion The Spark version utilized to run the application.
         * 
         * @return builder
         * 
         */
        public Builder sparkVersion(String sparkVersion) {
            return sparkVersion(Output.of(sparkVersion));
        }

        public GetApplicationsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
