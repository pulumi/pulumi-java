// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile {
    /**
     * @return Consumer group used by the connection.
     * 
     */
    private final String consumerGroup;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private final String displayName;
    /**
     * @return Host format used in connection string.
     * 
     */
    private final String hostFormat;
    /**
     * @return Protocol used by the connection.
     * 
     */
    private final String protocol;
    /**
     * @return Specifies whether the listener performs a direct hand-off of the session, or redirects the session. In RAC deployments where SCAN is used, sessions are redirected to a Node VIP. Use `DIRECT` for direct hand-offs. Use `REDIRECT` to redirect the session.
     * 
     */
    private final String sessionMode;
    /**
     * @return Specifies whether the connection string is using the long (`LONG`), Easy Connect (`EZCONNECT`), or Easy Connect Plus (`EZCONNECTPLUS`) format. Autonomous Databases on shared Exadata infrastructure always use the long format.
     * 
     */
    private final String syntaxFormat;
    /**
     * @return Specifies whether the TLS handshake is using one-way (`SERVER`) or mutual (`MUTUAL`) authentication.
     * 
     */
    private final String tlsAuthentication;
    /**
     * @return Connection string value.
     * 
     */
    private final String value;

    @CustomType.Constructor
    private GetAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile(
        @CustomType.Parameter("consumerGroup") String consumerGroup,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("hostFormat") String hostFormat,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("sessionMode") String sessionMode,
        @CustomType.Parameter("syntaxFormat") String syntaxFormat,
        @CustomType.Parameter("tlsAuthentication") String tlsAuthentication,
        @CustomType.Parameter("value") String value) {
        this.consumerGroup = consumerGroup;
        this.displayName = displayName;
        this.hostFormat = hostFormat;
        this.protocol = protocol;
        this.sessionMode = sessionMode;
        this.syntaxFormat = syntaxFormat;
        this.tlsAuthentication = tlsAuthentication;
        this.value = value;
    }

    /**
     * @return Consumer group used by the connection.
     * 
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Host format used in connection string.
     * 
     */
    public String hostFormat() {
        return this.hostFormat;
    }
    /**
     * @return Protocol used by the connection.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Specifies whether the listener performs a direct hand-off of the session, or redirects the session. In RAC deployments where SCAN is used, sessions are redirected to a Node VIP. Use `DIRECT` for direct hand-offs. Use `REDIRECT` to redirect the session.
     * 
     */
    public String sessionMode() {
        return this.sessionMode;
    }
    /**
     * @return Specifies whether the connection string is using the long (`LONG`), Easy Connect (`EZCONNECT`), or Easy Connect Plus (`EZCONNECTPLUS`) format. Autonomous Databases on shared Exadata infrastructure always use the long format.
     * 
     */
    public String syntaxFormat() {
        return this.syntaxFormat;
    }
    /**
     * @return Specifies whether the TLS handshake is using one-way (`SERVER`) or mutual (`MUTUAL`) authentication.
     * 
     */
    public String tlsAuthentication() {
        return this.tlsAuthentication;
    }
    /**
     * @return Connection string value.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String consumerGroup;
        private String displayName;
        private String hostFormat;
        private String protocol;
        private String sessionMode;
        private String syntaxFormat;
        private String tlsAuthentication;
        private String value;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.displayName = defaults.displayName;
    	      this.hostFormat = defaults.hostFormat;
    	      this.protocol = defaults.protocol;
    	      this.sessionMode = defaults.sessionMode;
    	      this.syntaxFormat = defaults.syntaxFormat;
    	      this.tlsAuthentication = defaults.tlsAuthentication;
    	      this.value = defaults.value;
        }

        public Builder consumerGroup(String consumerGroup) {
            this.consumerGroup = Objects.requireNonNull(consumerGroup);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder hostFormat(String hostFormat) {
            this.hostFormat = Objects.requireNonNull(hostFormat);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder sessionMode(String sessionMode) {
            this.sessionMode = Objects.requireNonNull(sessionMode);
            return this;
        }
        public Builder syntaxFormat(String syntaxFormat) {
            this.syntaxFormat = Objects.requireNonNull(syntaxFormat);
            return this;
        }
        public Builder tlsAuthentication(String tlsAuthentication) {
            this.tlsAuthentication = Objects.requireNonNull(tlsAuthentication);
            return this;
        }
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public GetAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile build() {
            return new GetAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile(consumerGroup, displayName, hostFormat, protocol, sessionMode, syntaxFormat, tlsAuthentication, value);
        }
    }
}
