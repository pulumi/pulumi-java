// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.HealthChecks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPingMonitorsPingMonitor {
    /**
     * @return Filters results by compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Filters results that exactly match the `displayName` field.
     * 
     */
    private final String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return Filters results that match the `homeRegion`.
     * 
     */
    private final String homeRegion;
    /**
     * @return The OCID of the resource.
     * 
     */
    private final String id;
    /**
     * @return The monitor interval in seconds. Valid values: 10, 30, and 60.
     * 
     */
    private final Integer intervalInSeconds;
    /**
     * @return Enables or disables the monitor. Set to &#39;true&#39; to launch monitoring.
     * 
     */
    private final Boolean isEnabled;
    /**
     * @return The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     * 
     */
    private final Integer port;
    /**
     * @return The protocols for ping probes.
     * 
     */
    private final String protocol;
    /**
     * @return A URL for fetching the probe results.
     * 
     */
    private final String resultsUrl;
    /**
     * @return A list of targets (hostnames or IP addresses) of the probe.
     * 
     */
    private final List<String> targets;
    /**
     * @return The RFC 3339-formatted creation date and time of the probe.
     * 
     */
    private final String timeCreated;
    /**
     * @return The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     * 
     */
    private final Integer timeoutInSeconds;
    /**
     * @return A list of names of vantage points from which to execute the probe.
     * 
     */
    private final List<String> vantagePointNames;

    @CustomType.Constructor
    private GetPingMonitorsPingMonitor(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("homeRegion") String homeRegion,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("intervalInSeconds") Integer intervalInSeconds,
        @CustomType.Parameter("isEnabled") Boolean isEnabled,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("resultsUrl") String resultsUrl,
        @CustomType.Parameter("targets") List<String> targets,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeoutInSeconds") Integer timeoutInSeconds,
        @CustomType.Parameter("vantagePointNames") List<String> vantagePointNames) {
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.homeRegion = homeRegion;
        this.id = id;
        this.intervalInSeconds = intervalInSeconds;
        this.isEnabled = isEnabled;
        this.port = port;
        this.protocol = protocol;
        this.resultsUrl = resultsUrl;
        this.targets = targets;
        this.timeCreated = timeCreated;
        this.timeoutInSeconds = timeoutInSeconds;
        this.vantagePointNames = vantagePointNames;
    }

    /**
     * @return Filters results by compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Filters results that exactly match the `displayName` field.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Filters results that match the `homeRegion`.
     * 
     */
    public String homeRegion() {
        return this.homeRegion;
    }
    /**
     * @return The OCID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The monitor interval in seconds. Valid values: 10, 30, and 60.
     * 
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }
    /**
     * @return Enables or disables the monitor. Set to &#39;true&#39; to launch monitoring.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocols for ping probes.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return A URL for fetching the probe results.
     * 
     */
    public String resultsUrl() {
        return this.resultsUrl;
    }
    /**
     * @return A list of targets (hostnames or IP addresses) of the probe.
     * 
     */
    public List<String> targets() {
        return this.targets;
    }
    /**
     * @return The RFC 3339-formatted creation date and time of the probe.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     * 
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * @return A list of names of vantage points from which to execute the probe.
     * 
     */
    public List<String> vantagePointNames() {
        return this.vantagePointNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPingMonitorsPingMonitor defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String homeRegion;
        private String id;
        private Integer intervalInSeconds;
        private Boolean isEnabled;
        private Integer port;
        private String protocol;
        private String resultsUrl;
        private List<String> targets;
        private String timeCreated;
        private Integer timeoutInSeconds;
        private List<String> vantagePointNames;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPingMonitorsPingMonitor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.homeRegion = defaults.homeRegion;
    	      this.id = defaults.id;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.isEnabled = defaults.isEnabled;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.resultsUrl = defaults.resultsUrl;
    	      this.targets = defaults.targets;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.vantagePointNames = defaults.vantagePointNames;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder homeRegion(String homeRegion) {
            this.homeRegion = Objects.requireNonNull(homeRegion);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            this.intervalInSeconds = Objects.requireNonNull(intervalInSeconds);
            return this;
        }
        public Builder isEnabled(Boolean isEnabled) {
            this.isEnabled = Objects.requireNonNull(isEnabled);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder resultsUrl(String resultsUrl) {
            this.resultsUrl = Objects.requireNonNull(resultsUrl);
            return this;
        }
        public Builder targets(List<String> targets) {
            this.targets = Objects.requireNonNull(targets);
            return this;
        }
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            this.timeoutInSeconds = Objects.requireNonNull(timeoutInSeconds);
            return this;
        }
        public Builder vantagePointNames(List<String> vantagePointNames) {
            this.vantagePointNames = Objects.requireNonNull(vantagePointNames);
            return this;
        }
        public Builder vantagePointNames(String... vantagePointNames) {
            return vantagePointNames(List.of(vantagePointNames));
        }        public GetPingMonitorsPingMonitor build() {
            return new GetPingMonitorsPingMonitor(compartmentId, definedTags, displayName, freeformTags, homeRegion, id, intervalInSeconds, isEnabled, port, protocol, resultsUrl, targets, timeCreated, timeoutInSeconds, vantagePointNames);
        }
    }
}
