// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorTargetDimension;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceConnectorTarget {
    /**
     * @return The batch rollover size in megabytes.
     * 
     */
    private final Integer batchRolloverSizeInMbs;
    /**
     * @return The batch rollover time in milliseconds.
     * 
     */
    private final Integer batchRolloverTimeInMs;
    /**
     * @return The name of the bucket. Avoid entering confidential information.
     * 
     */
    private final String bucket;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric.
     * 
     */
    private final String compartmentId;
    /**
     * @return List of dimension names and values.
     * 
     */
    private final List<GetServiceConnectorTargetDimension> dimensions;
    /**
     * @return Whether to apply a simplified, user-friendly format to the message. Applies only when friendly formatting is supported by the service connector source and the subscription protocol.  Example: `true`
     * 
     */
    private final Boolean enableFormattedMessaging;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function to be used as a task.
     * 
     */
    private final String functionId;
    /**
     * @return The type descriminator.
     * 
     */
    private final String kind;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Logging Analytics log group.
     * 
     */
    private final String logGroupId;
    /**
     * @return The name of the metric.  Example: `CpuUtilization`
     * 
     */
    private final String metric;
    /**
     * @return The namespace of the metric.  Example: `oci_computeagent`
     * 
     */
    private final String metricNamespace;
    /**
     * @return The namespace.
     * 
     */
    private final String namespace;
    /**
     * @return The prefix of the objects. Avoid entering confidential information.
     * 
     */
    private final String objectNamePrefix;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    private final String streamId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic.
     * 
     */
    private final String topicId;

    @CustomType.Constructor
    private GetServiceConnectorTarget(
        @CustomType.Parameter("batchRolloverSizeInMbs") Integer batchRolloverSizeInMbs,
        @CustomType.Parameter("batchRolloverTimeInMs") Integer batchRolloverTimeInMs,
        @CustomType.Parameter("bucket") String bucket,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("dimensions") List<GetServiceConnectorTargetDimension> dimensions,
        @CustomType.Parameter("enableFormattedMessaging") Boolean enableFormattedMessaging,
        @CustomType.Parameter("functionId") String functionId,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("logGroupId") String logGroupId,
        @CustomType.Parameter("metric") String metric,
        @CustomType.Parameter("metricNamespace") String metricNamespace,
        @CustomType.Parameter("namespace") String namespace,
        @CustomType.Parameter("objectNamePrefix") String objectNamePrefix,
        @CustomType.Parameter("streamId") String streamId,
        @CustomType.Parameter("topicId") String topicId) {
        this.batchRolloverSizeInMbs = batchRolloverSizeInMbs;
        this.batchRolloverTimeInMs = batchRolloverTimeInMs;
        this.bucket = bucket;
        this.compartmentId = compartmentId;
        this.dimensions = dimensions;
        this.enableFormattedMessaging = enableFormattedMessaging;
        this.functionId = functionId;
        this.kind = kind;
        this.logGroupId = logGroupId;
        this.metric = metric;
        this.metricNamespace = metricNamespace;
        this.namespace = namespace;
        this.objectNamePrefix = objectNamePrefix;
        this.streamId = streamId;
        this.topicId = topicId;
    }

    /**
     * @return The batch rollover size in megabytes.
     * 
     */
    public Integer batchRolloverSizeInMbs() {
        return this.batchRolloverSizeInMbs;
    }
    /**
     * @return The batch rollover time in milliseconds.
     * 
     */
    public Integer batchRolloverTimeInMs() {
        return this.batchRolloverTimeInMs;
    }
    /**
     * @return The name of the bucket. Avoid entering confidential information.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of dimension names and values.
     * 
     */
    public List<GetServiceConnectorTargetDimension> dimensions() {
        return this.dimensions;
    }
    /**
     * @return Whether to apply a simplified, user-friendly format to the message. Applies only when friendly formatting is supported by the service connector source and the subscription protocol.  Example: `true`
     * 
     */
    public Boolean enableFormattedMessaging() {
        return this.enableFormattedMessaging;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function to be used as a task.
     * 
     */
    public String functionId() {
        return this.functionId;
    }
    /**
     * @return The type descriminator.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Logging Analytics log group.
     * 
     */
    public String logGroupId() {
        return this.logGroupId;
    }
    /**
     * @return The name of the metric.  Example: `CpuUtilization`
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return The namespace of the metric.  Example: `oci_computeagent`
     * 
     */
    public String metricNamespace() {
        return this.metricNamespace;
    }
    /**
     * @return The namespace.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The prefix of the objects. Avoid entering confidential information.
     * 
     */
    public String objectNamePrefix() {
        return this.objectNamePrefix;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    public String streamId() {
        return this.streamId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic.
     * 
     */
    public String topicId() {
        return this.topicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceConnectorTarget defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer batchRolloverSizeInMbs;
        private Integer batchRolloverTimeInMs;
        private String bucket;
        private String compartmentId;
        private List<GetServiceConnectorTargetDimension> dimensions;
        private Boolean enableFormattedMessaging;
        private String functionId;
        private String kind;
        private String logGroupId;
        private String metric;
        private String metricNamespace;
        private String namespace;
        private String objectNamePrefix;
        private String streamId;
        private String topicId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceConnectorTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchRolloverSizeInMbs = defaults.batchRolloverSizeInMbs;
    	      this.batchRolloverTimeInMs = defaults.batchRolloverTimeInMs;
    	      this.bucket = defaults.bucket;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dimensions = defaults.dimensions;
    	      this.enableFormattedMessaging = defaults.enableFormattedMessaging;
    	      this.functionId = defaults.functionId;
    	      this.kind = defaults.kind;
    	      this.logGroupId = defaults.logGroupId;
    	      this.metric = defaults.metric;
    	      this.metricNamespace = defaults.metricNamespace;
    	      this.namespace = defaults.namespace;
    	      this.objectNamePrefix = defaults.objectNamePrefix;
    	      this.streamId = defaults.streamId;
    	      this.topicId = defaults.topicId;
        }

        public Builder batchRolloverSizeInMbs(Integer batchRolloverSizeInMbs) {
            this.batchRolloverSizeInMbs = Objects.requireNonNull(batchRolloverSizeInMbs);
            return this;
        }
        public Builder batchRolloverTimeInMs(Integer batchRolloverTimeInMs) {
            this.batchRolloverTimeInMs = Objects.requireNonNull(batchRolloverTimeInMs);
            return this;
        }
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder dimensions(List<GetServiceConnectorTargetDimension> dimensions) {
            this.dimensions = Objects.requireNonNull(dimensions);
            return this;
        }
        public Builder dimensions(GetServiceConnectorTargetDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        public Builder enableFormattedMessaging(Boolean enableFormattedMessaging) {
            this.enableFormattedMessaging = Objects.requireNonNull(enableFormattedMessaging);
            return this;
        }
        public Builder functionId(String functionId) {
            this.functionId = Objects.requireNonNull(functionId);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder logGroupId(String logGroupId) {
            this.logGroupId = Objects.requireNonNull(logGroupId);
            return this;
        }
        public Builder metric(String metric) {
            this.metric = Objects.requireNonNull(metric);
            return this;
        }
        public Builder metricNamespace(String metricNamespace) {
            this.metricNamespace = Objects.requireNonNull(metricNamespace);
            return this;
        }
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        public Builder objectNamePrefix(String objectNamePrefix) {
            this.objectNamePrefix = Objects.requireNonNull(objectNamePrefix);
            return this;
        }
        public Builder streamId(String streamId) {
            this.streamId = Objects.requireNonNull(streamId);
            return this;
        }
        public Builder topicId(String topicId) {
            this.topicId = Objects.requireNonNull(topicId);
            return this;
        }        public GetServiceConnectorTarget build() {
            return new GetServiceConnectorTarget(batchRolloverSizeInMbs, batchRolloverTimeInMs, bucket, compartmentId, dimensions, enableFormattedMessaging, functionId, kind, logGroupId, metric, metricNamespace, namespace, objectNamePrefix, streamId, topicId);
        }
    }
}
