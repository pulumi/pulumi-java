// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIpsecConnectionTunnelsIpSecConnectionTunnel {
    /**
     * @return Information for establishing a BGP session for the IPSec tunnel.
     * 
     */
    private final List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
     * 
     */
    private final String compartmentId;
    /**
     * @return The IP address of the CPE device&#39;s VPN headend.  Example: `203.0.113.22`
     * 
     */
    private final String cpeIp;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private final String displayName;
    /**
     * @return Dead peer detection (DPD) mode set on the Oracle side of the connection. This mode sets whether Oracle can only respond to a request from the CPE device to start DPD, or both respond to and initiate requests.
     * 
     */
    private final String dpdMode;
    /**
     * @return DPD timeout in seconds.
     * 
     */
    private final Integer dpdTimeoutInSec;
    /**
     * @return Configuration information used by the encryption domain policy.
     * 
     */
    private final List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tunnel.
     * 
     */
    private final String id;
    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    private final String ikeVersion;
    /**
     * @return By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
     * 
     */
    private final String natTranslationEnabled;
    /**
     * @return Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
     * 
     */
    private final String oracleCanInitiate;
    /**
     * @return IPSec tunnel details specific to ISAKMP phase one.
     * 
     */
    private final List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails;
    /**
     * @return IPsec tunnel detail information specific to phase two.
     * 
     */
    private final List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails;
    /**
     * @return The type of routing used for this tunnel (BGP dynamic routing, static routing, or policy-based routing).
     * 
     */
    private final String routing;
    /**
     * @return The tunnel&#39;s lifecycle state.
     * 
     */
    private final String state;
    /**
     * @return The status of the tunnel based on IPSec protocol characteristics.
     * 
     */
    private final String status;
    /**
     * @return The date and time the IPSec tunnel was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return When the status of the IPSec tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeStatusUpdated;
    /**
     * @return The IP address of the Oracle VPN headend for the connection.  Example: `203.0.113.21`
     * 
     */
    private final String vpnIp;

    @CustomType.Constructor
    private GetIpsecConnectionTunnelsIpSecConnectionTunnel(
        @CustomType.Parameter("bgpSessionInfos") List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("cpeIp") String cpeIp,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("dpdMode") String dpdMode,
        @CustomType.Parameter("dpdTimeoutInSec") Integer dpdTimeoutInSec,
        @CustomType.Parameter("encryptionDomainConfigs") List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ikeVersion") String ikeVersion,
        @CustomType.Parameter("natTranslationEnabled") String natTranslationEnabled,
        @CustomType.Parameter("oracleCanInitiate") String oracleCanInitiate,
        @CustomType.Parameter("phaseOneDetails") List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails,
        @CustomType.Parameter("phaseTwoDetails") List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails,
        @CustomType.Parameter("routing") String routing,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeStatusUpdated") String timeStatusUpdated,
        @CustomType.Parameter("vpnIp") String vpnIp) {
        this.bgpSessionInfos = bgpSessionInfos;
        this.compartmentId = compartmentId;
        this.cpeIp = cpeIp;
        this.displayName = displayName;
        this.dpdMode = dpdMode;
        this.dpdTimeoutInSec = dpdTimeoutInSec;
        this.encryptionDomainConfigs = encryptionDomainConfigs;
        this.id = id;
        this.ikeVersion = ikeVersion;
        this.natTranslationEnabled = natTranslationEnabled;
        this.oracleCanInitiate = oracleCanInitiate;
        this.phaseOneDetails = phaseOneDetails;
        this.phaseTwoDetails = phaseTwoDetails;
        this.routing = routing;
        this.state = state;
        this.status = status;
        this.timeCreated = timeCreated;
        this.timeStatusUpdated = timeStatusUpdated;
        this.vpnIp = vpnIp;
    }

    /**
     * @return Information for establishing a BGP session for the IPSec tunnel.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos() {
        return this.bgpSessionInfos;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The IP address of the CPE device&#39;s VPN headend.  Example: `203.0.113.22`
     * 
     */
    public String cpeIp() {
        return this.cpeIp;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Dead peer detection (DPD) mode set on the Oracle side of the connection. This mode sets whether Oracle can only respond to a request from the CPE device to start DPD, or both respond to and initiate requests.
     * 
     */
    public String dpdMode() {
        return this.dpdMode;
    }
    /**
     * @return DPD timeout in seconds.
     * 
     */
    public Integer dpdTimeoutInSec() {
        return this.dpdTimeoutInSec;
    }
    /**
     * @return Configuration information used by the encryption domain policy.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs() {
        return this.encryptionDomainConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tunnel.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    public String ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
     * 
     */
    public String natTranslationEnabled() {
        return this.natTranslationEnabled;
    }
    /**
     * @return Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
     * 
     */
    public String oracleCanInitiate() {
        return this.oracleCanInitiate;
    }
    /**
     * @return IPSec tunnel details specific to ISAKMP phase one.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails() {
        return this.phaseOneDetails;
    }
    /**
     * @return IPsec tunnel detail information specific to phase two.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails() {
        return this.phaseTwoDetails;
    }
    /**
     * @return The type of routing used for this tunnel (BGP dynamic routing, static routing, or policy-based routing).
     * 
     */
    public String routing() {
        return this.routing;
    }
    /**
     * @return The tunnel&#39;s lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the tunnel based on IPSec protocol characteristics.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time the IPSec tunnel was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return When the status of the IPSec tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeStatusUpdated() {
        return this.timeStatusUpdated;
    }
    /**
     * @return The IP address of the Oracle VPN headend for the connection.  Example: `203.0.113.21`
     * 
     */
    public String vpnIp() {
        return this.vpnIp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpsecConnectionTunnelsIpSecConnectionTunnel defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos;
        private String compartmentId;
        private String cpeIp;
        private String displayName;
        private String dpdMode;
        private Integer dpdTimeoutInSec;
        private List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs;
        private String id;
        private String ikeVersion;
        private String natTranslationEnabled;
        private String oracleCanInitiate;
        private List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails;
        private List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails;
        private String routing;
        private String state;
        private String status;
        private String timeCreated;
        private String timeStatusUpdated;
        private String vpnIp;

        public Builder() {
    	      // Empty
        }

        public Builder(GetIpsecConnectionTunnelsIpSecConnectionTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgpSessionInfos = defaults.bgpSessionInfos;
    	      this.compartmentId = defaults.compartmentId;
    	      this.cpeIp = defaults.cpeIp;
    	      this.displayName = defaults.displayName;
    	      this.dpdMode = defaults.dpdMode;
    	      this.dpdTimeoutInSec = defaults.dpdTimeoutInSec;
    	      this.encryptionDomainConfigs = defaults.encryptionDomainConfigs;
    	      this.id = defaults.id;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.natTranslationEnabled = defaults.natTranslationEnabled;
    	      this.oracleCanInitiate = defaults.oracleCanInitiate;
    	      this.phaseOneDetails = defaults.phaseOneDetails;
    	      this.phaseTwoDetails = defaults.phaseTwoDetails;
    	      this.routing = defaults.routing;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStatusUpdated = defaults.timeStatusUpdated;
    	      this.vpnIp = defaults.vpnIp;
        }

        public Builder bgpSessionInfos(List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos) {
            this.bgpSessionInfos = Objects.requireNonNull(bgpSessionInfos);
            return this;
        }
        public Builder bgpSessionInfos(GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo... bgpSessionInfos) {
            return bgpSessionInfos(List.of(bgpSessionInfos));
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder cpeIp(String cpeIp) {
            this.cpeIp = Objects.requireNonNull(cpeIp);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder dpdMode(String dpdMode) {
            this.dpdMode = Objects.requireNonNull(dpdMode);
            return this;
        }
        public Builder dpdTimeoutInSec(Integer dpdTimeoutInSec) {
            this.dpdTimeoutInSec = Objects.requireNonNull(dpdTimeoutInSec);
            return this;
        }
        public Builder encryptionDomainConfigs(List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs) {
            this.encryptionDomainConfigs = Objects.requireNonNull(encryptionDomainConfigs);
            return this;
        }
        public Builder encryptionDomainConfigs(GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig... encryptionDomainConfigs) {
            return encryptionDomainConfigs(List.of(encryptionDomainConfigs));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ikeVersion(String ikeVersion) {
            this.ikeVersion = Objects.requireNonNull(ikeVersion);
            return this;
        }
        public Builder natTranslationEnabled(String natTranslationEnabled) {
            this.natTranslationEnabled = Objects.requireNonNull(natTranslationEnabled);
            return this;
        }
        public Builder oracleCanInitiate(String oracleCanInitiate) {
            this.oracleCanInitiate = Objects.requireNonNull(oracleCanInitiate);
            return this;
        }
        public Builder phaseOneDetails(List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails) {
            this.phaseOneDetails = Objects.requireNonNull(phaseOneDetails);
            return this;
        }
        public Builder phaseOneDetails(GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail... phaseOneDetails) {
            return phaseOneDetails(List.of(phaseOneDetails));
        }
        public Builder phaseTwoDetails(List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails) {
            this.phaseTwoDetails = Objects.requireNonNull(phaseTwoDetails);
            return this;
        }
        public Builder phaseTwoDetails(GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail... phaseTwoDetails) {
            return phaseTwoDetails(List.of(phaseTwoDetails));
        }
        public Builder routing(String routing) {
            this.routing = Objects.requireNonNull(routing);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeStatusUpdated(String timeStatusUpdated) {
            this.timeStatusUpdated = Objects.requireNonNull(timeStatusUpdated);
            return this;
        }
        public Builder vpnIp(String vpnIp) {
            this.vpnIp = Objects.requireNonNull(vpnIp);
            return this;
        }        public GetIpsecConnectionTunnelsIpSecConnectionTunnel build() {
            return new GetIpsecConnectionTunnelsIpSecConnectionTunnel(bgpSessionInfos, compartmentId, cpeIp, displayName, dpdMode, dpdTimeoutInSec, encryptionDomainConfigs, id, ikeVersion, natTranslationEnabled, oracleCanInitiate, phaseOneDetails, phaseTwoDetails, routing, state, status, timeCreated, timeStatusUpdated, vpnIp);
        }
    }
}
