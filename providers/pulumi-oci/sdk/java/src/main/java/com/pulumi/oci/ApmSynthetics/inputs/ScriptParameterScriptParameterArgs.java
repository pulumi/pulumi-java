// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScriptParameterScriptParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptParameterScriptParameterArgs Empty = new ScriptParameterScriptParameterArgs();

    /**
     * (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
     * 
     */
    @Import(name="isSecret")
    private @Nullable Output<Boolean> isSecret;

    /**
     * @return (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
     * 
     */
    public Optional<Output<Boolean>> isSecret() {
        return Optional.ofNullable(this.isSecret);
    }

    /**
     * (Updatable) Name of the parameter.
     * 
     */
    @Import(name="paramName")
    private @Nullable Output<String> paramName;

    /**
     * @return (Updatable) Name of the parameter.
     * 
     */
    public Optional<Output<String>> paramName() {
        return Optional.ofNullable(this.paramName);
    }

    /**
     * (Updatable) Value of the parameter.
     * 
     */
    @Import(name="paramValue")
    private @Nullable Output<String> paramValue;

    /**
     * @return (Updatable) Value of the parameter.
     * 
     */
    public Optional<Output<String>> paramValue() {
        return Optional.ofNullable(this.paramValue);
    }

    private ScriptParameterScriptParameterArgs() {}

    private ScriptParameterScriptParameterArgs(ScriptParameterScriptParameterArgs $) {
        this.isSecret = $.isSecret;
        this.paramName = $.paramName;
        this.paramValue = $.paramValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScriptParameterScriptParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScriptParameterScriptParameterArgs $;

        public Builder() {
            $ = new ScriptParameterScriptParameterArgs();
        }

        public Builder(ScriptParameterScriptParameterArgs defaults) {
            $ = new ScriptParameterScriptParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isSecret (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
         * 
         * @return builder
         * 
         */
        public Builder isSecret(@Nullable Output<Boolean> isSecret) {
            $.isSecret = isSecret;
            return this;
        }

        /**
         * @param isSecret (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
         * 
         * @return builder
         * 
         */
        public Builder isSecret(Boolean isSecret) {
            return isSecret(Output.of(isSecret));
        }

        /**
         * @param paramName (Updatable) Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramName(@Nullable Output<String> paramName) {
            $.paramName = paramName;
            return this;
        }

        /**
         * @param paramName (Updatable) Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramName(String paramName) {
            return paramName(Output.of(paramName));
        }

        /**
         * @param paramValue (Updatable) Value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramValue(@Nullable Output<String> paramValue) {
            $.paramValue = paramValue;
            return this;
        }

        /**
         * @param paramValue (Updatable) Value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramValue(String paramValue) {
            return paramValue(Output.of(paramValue));
        }

        public ScriptParameterScriptParameterArgs build() {
            return $;
        }
    }

}
