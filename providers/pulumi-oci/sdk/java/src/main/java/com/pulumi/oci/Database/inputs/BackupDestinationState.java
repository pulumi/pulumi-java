// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.BackupDestinationAssociatedDatabaseArgs;
import com.pulumi.oci.Database.inputs.BackupDestinationMountTypeDetailsArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupDestinationState extends com.pulumi.resources.ResourceArgs {

    public static final BackupDestinationState Empty = new BackupDestinationState();

    /**
     * List of databases associated with the backup destination.
     * 
     */
    @Import(name="associatedDatabases")
    private @Nullable Output<List<BackupDestinationAssociatedDatabaseArgs>> associatedDatabases;

    /**
     * @return List of databases associated with the backup destination.
     * 
     */
    public Optional<Output<List<BackupDestinationAssociatedDatabaseArgs>>> associatedDatabases() {
        return Optional.ofNullable(this.associatedDatabases);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The connection string for connecting to the Recovery Appliance.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return (Updatable) The connection string for connecting to the Recovery Appliance.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * The user-provided name of the backup destination.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The user-provided name of the backup destination.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A descriptive text associated with the lifecycleState. Typically contains additional displayable text
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     * @deprecated
     * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
     * 
     */
    @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
    @Import(name="localMountPointPath")
    private @Nullable Output<String> localMountPointPath;

    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     * @deprecated
     * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
     * 
     */
    @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
    public Optional<Output<String>> localMountPointPath() {
        return Optional.ofNullable(this.localMountPointPath);
    }

    /**
     * Mount type details for backup destination.
     * 
     */
    @Import(name="mountTypeDetails")
    private @Nullable Output<BackupDestinationMountTypeDetailsArgs> mountTypeDetails;

    /**
     * @return Mount type details for backup destination.
     * 
     */
    public Optional<Output<BackupDestinationMountTypeDetailsArgs>> mountTypeDetails() {
        return Optional.ofNullable(this.mountTypeDetails);
    }

    /**
     * NFS Mount type for backup destination.
     * 
     */
    @Import(name="nfsMountType")
    private @Nullable Output<String> nfsMountType;

    /**
     * @return NFS Mount type for backup destination.
     * 
     */
    public Optional<Output<String>> nfsMountType() {
        return Optional.ofNullable(this.nfsMountType);
    }

    /**
     * Specifies the directory on which to mount the file system
     * 
     */
    @Import(name="nfsServerExport")
    private @Nullable Output<String> nfsServerExport;

    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    public Optional<Output<String>> nfsServerExport() {
        return Optional.ofNullable(this.nfsServerExport);
    }

    /**
     * IP addresses for NFS Auto mount.
     * 
     */
    @Import(name="nfsServers")
    private @Nullable Output<List<String>> nfsServers;

    /**
     * @return IP addresses for NFS Auto mount.
     * 
     */
    public Optional<Output<List<String>>> nfsServers() {
        return Optional.ofNullable(this.nfsServers);
    }

    /**
     * The current lifecycle state of the backup destination.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the backup destination.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the backup destination was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the backup destination was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Type of the backup destination.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the backup destination.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (Updatable) The Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
     * 
     */
    @Import(name="vpcUsers")
    private @Nullable Output<List<String>> vpcUsers;

    /**
     * @return (Updatable) The Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
     * 
     */
    public Optional<Output<List<String>>> vpcUsers() {
        return Optional.ofNullable(this.vpcUsers);
    }

    private BackupDestinationState() {}

    private BackupDestinationState(BackupDestinationState $) {
        this.associatedDatabases = $.associatedDatabases;
        this.compartmentId = $.compartmentId;
        this.connectionString = $.connectionString;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.lifecycleDetails = $.lifecycleDetails;
        this.localMountPointPath = $.localMountPointPath;
        this.mountTypeDetails = $.mountTypeDetails;
        this.nfsMountType = $.nfsMountType;
        this.nfsServerExport = $.nfsServerExport;
        this.nfsServers = $.nfsServers;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.type = $.type;
        this.vpcUsers = $.vpcUsers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupDestinationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupDestinationState $;

        public Builder() {
            $ = new BackupDestinationState();
        }

        public Builder(BackupDestinationState defaults) {
            $ = new BackupDestinationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedDatabases List of databases associated with the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder associatedDatabases(@Nullable Output<List<BackupDestinationAssociatedDatabaseArgs>> associatedDatabases) {
            $.associatedDatabases = associatedDatabases;
            return this;
        }

        /**
         * @param associatedDatabases List of databases associated with the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder associatedDatabases(List<BackupDestinationAssociatedDatabaseArgs> associatedDatabases) {
            return associatedDatabases(Output.of(associatedDatabases));
        }

        /**
         * @param associatedDatabases List of databases associated with the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder associatedDatabases(BackupDestinationAssociatedDatabaseArgs... associatedDatabases) {
            return associatedDatabases(List.of(associatedDatabases));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionString (Updatable) The connection string for connecting to the Recovery Appliance.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString (Updatable) The connection string for connecting to the Recovery Appliance.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName The user-provided name of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-provided name of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param lifecycleDetails A descriptive text associated with the lifecycleState. Typically contains additional displayable text
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A descriptive text associated with the lifecycleState. Typically contains additional displayable text
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param localMountPointPath The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
         * 
         */
        @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
        public Builder localMountPointPath(@Nullable Output<String> localMountPointPath) {
            $.localMountPointPath = localMountPointPath;
            return this;
        }

        /**
         * @param localMountPointPath The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
         * 
         */
        @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
        public Builder localMountPointPath(String localMountPointPath) {
            return localMountPointPath(Output.of(localMountPointPath));
        }

        /**
         * @param mountTypeDetails Mount type details for backup destination.
         * 
         * @return builder
         * 
         */
        public Builder mountTypeDetails(@Nullable Output<BackupDestinationMountTypeDetailsArgs> mountTypeDetails) {
            $.mountTypeDetails = mountTypeDetails;
            return this;
        }

        /**
         * @param mountTypeDetails Mount type details for backup destination.
         * 
         * @return builder
         * 
         */
        public Builder mountTypeDetails(BackupDestinationMountTypeDetailsArgs mountTypeDetails) {
            return mountTypeDetails(Output.of(mountTypeDetails));
        }

        /**
         * @param nfsMountType NFS Mount type for backup destination.
         * 
         * @return builder
         * 
         */
        public Builder nfsMountType(@Nullable Output<String> nfsMountType) {
            $.nfsMountType = nfsMountType;
            return this;
        }

        /**
         * @param nfsMountType NFS Mount type for backup destination.
         * 
         * @return builder
         * 
         */
        public Builder nfsMountType(String nfsMountType) {
            return nfsMountType(Output.of(nfsMountType));
        }

        /**
         * @param nfsServerExport Specifies the directory on which to mount the file system
         * 
         * @return builder
         * 
         */
        public Builder nfsServerExport(@Nullable Output<String> nfsServerExport) {
            $.nfsServerExport = nfsServerExport;
            return this;
        }

        /**
         * @param nfsServerExport Specifies the directory on which to mount the file system
         * 
         * @return builder
         * 
         */
        public Builder nfsServerExport(String nfsServerExport) {
            return nfsServerExport(Output.of(nfsServerExport));
        }

        /**
         * @param nfsServers IP addresses for NFS Auto mount.
         * 
         * @return builder
         * 
         */
        public Builder nfsServers(@Nullable Output<List<String>> nfsServers) {
            $.nfsServers = nfsServers;
            return this;
        }

        /**
         * @param nfsServers IP addresses for NFS Auto mount.
         * 
         * @return builder
         * 
         */
        public Builder nfsServers(List<String> nfsServers) {
            return nfsServers(Output.of(nfsServers));
        }

        /**
         * @param nfsServers IP addresses for NFS Auto mount.
         * 
         * @return builder
         * 
         */
        public Builder nfsServers(String... nfsServers) {
            return nfsServers(List.of(nfsServers));
        }

        /**
         * @param state The current lifecycle state of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the backup destination was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the backup destination was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param type Type of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpcUsers (Updatable) The Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
         * 
         * @return builder
         * 
         */
        public Builder vpcUsers(@Nullable Output<List<String>> vpcUsers) {
            $.vpcUsers = vpcUsers;
            return this;
        }

        /**
         * @param vpcUsers (Updatable) The Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
         * 
         * @return builder
         * 
         */
        public Builder vpcUsers(List<String> vpcUsers) {
            return vpcUsers(Output.of(vpcUsers));
        }

        /**
         * @param vpcUsers (Updatable) The Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
         * 
         * @return builder
         * 
         */
        public Builder vpcUsers(String... vpcUsers) {
            return vpcUsers(List.of(vpcUsers));
        }

        public BackupDestinationState build() {
            return $;
        }
    }

}
