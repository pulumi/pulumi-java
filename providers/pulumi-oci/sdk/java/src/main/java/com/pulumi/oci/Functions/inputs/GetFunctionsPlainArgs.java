// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Functions.inputs.GetFunctionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFunctionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFunctionsPlainArgs Empty = new GetFunctionsPlainArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the application to which this function belongs.
     * 
     */
    @Import(name="applicationId", required=true)
    private String applicationId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the application to which this function belongs.
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * A filter to return only functions with display names that match the display name string. Matching is exact.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only functions with display names that match the display name string. Matching is exact.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetFunctionsFilter> filters;

    public Optional<List<GetFunctionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only functions with the specified OCID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return A filter to return only functions with the specified OCID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only functions that match the lifecycle state in this parameter. Example: `Creating`
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only functions that match the lifecycle state in this parameter. Example: `Creating`
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetFunctionsPlainArgs() {}

    private GetFunctionsPlainArgs(GetFunctionsPlainArgs $) {
        this.applicationId = $.applicationId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.id = $.id;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFunctionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFunctionsPlainArgs $;

        public Builder() {
            $ = new GetFunctionsPlainArgs();
        }

        public Builder(GetFunctionsPlainArgs defaults) {
            $ = new GetFunctionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the application to which this function belongs.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param displayName A filter to return only functions with display names that match the display name string. Matching is exact.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetFunctionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetFunctionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id A filter to return only functions with the specified OCID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param state A filter to return only functions that match the lifecycle state in this parameter. Example: `Creating`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetFunctionsPlainArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            return $;
        }
    }

}
