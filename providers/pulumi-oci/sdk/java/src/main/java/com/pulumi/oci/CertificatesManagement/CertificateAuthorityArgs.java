// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateAuthorityConfigArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateAuthorityRuleArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateRevocationListDetailsArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthorityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityArgs Empty = new CertificateAuthorityArgs();

    /**
     * (Updatable) The configuration details for creating a certificate authority (CA).
     * 
     */
    @Import(name="certificateAuthorityConfig", required=true)
    private Output<CertificateAuthorityCertificateAuthorityConfigArgs> certificateAuthorityConfig;

    /**
     * @return (Updatable) The configuration details for creating a certificate authority (CA).
     * 
     */
    public Output<CertificateAuthorityCertificateAuthorityConfigArgs> certificateAuthorityConfig() {
        return this.certificateAuthorityConfig;
    }

    /**
     * (Updatable) A list of rules that control how the CA is used and managed.
     * 
     */
    @Import(name="certificateAuthorityRules")
    private @Nullable Output<List<CertificateAuthorityCertificateAuthorityRuleArgs>> certificateAuthorityRules;

    /**
     * @return (Updatable) A list of rules that control how the CA is used and managed.
     * 
     */
    public Optional<Output<List<CertificateAuthorityCertificateAuthorityRuleArgs>>> certificateAuthorityRules() {
        return Optional.ofNullable(this.certificateAuthorityRules);
    }

    /**
     * (Updatable) The details of the certificate revocation list (CRL).
     * 
     */
    @Import(name="certificateRevocationListDetails")
    private @Nullable Output<CertificateAuthorityCertificateRevocationListDetailsArgs> certificateRevocationListDetails;

    /**
     * @return (Updatable) The details of the certificate revocation list (CRL).
     * 
     */
    public Optional<Output<CertificateAuthorityCertificateRevocationListDetailsArgs>> certificateRevocationListDetails() {
        return Optional.ofNullable(this.certificateRevocationListDetails);
    }

    /**
     * (Updatable) The compartment in which you want to create the CA.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment in which you want to create the CA.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A brief description of the CA.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A brief description of the CA.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     * 
     */
    @Import(name="kmsKeyId", required=true)
    private Output<String> kmsKeyId;

    /**
     * @return The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     * 
     */
    public Output<String> kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CertificateAuthorityArgs() {}

    private CertificateAuthorityArgs(CertificateAuthorityArgs $) {
        this.certificateAuthorityConfig = $.certificateAuthorityConfig;
        this.certificateAuthorityRules = $.certificateAuthorityRules;
        this.certificateRevocationListDetails = $.certificateRevocationListDetails;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.freeformTags = $.freeformTags;
        this.kmsKeyId = $.kmsKeyId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityArgs $;

        public Builder() {
            $ = new CertificateAuthorityArgs();
        }

        public Builder(CertificateAuthorityArgs defaults) {
            $ = new CertificateAuthorityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthorityConfig (Updatable) The configuration details for creating a certificate authority (CA).
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityConfig(Output<CertificateAuthorityCertificateAuthorityConfigArgs> certificateAuthorityConfig) {
            $.certificateAuthorityConfig = certificateAuthorityConfig;
            return this;
        }

        /**
         * @param certificateAuthorityConfig (Updatable) The configuration details for creating a certificate authority (CA).
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityConfig(CertificateAuthorityCertificateAuthorityConfigArgs certificateAuthorityConfig) {
            return certificateAuthorityConfig(Output.of(certificateAuthorityConfig));
        }

        /**
         * @param certificateAuthorityRules (Updatable) A list of rules that control how the CA is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityRules(@Nullable Output<List<CertificateAuthorityCertificateAuthorityRuleArgs>> certificateAuthorityRules) {
            $.certificateAuthorityRules = certificateAuthorityRules;
            return this;
        }

        /**
         * @param certificateAuthorityRules (Updatable) A list of rules that control how the CA is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityRules(List<CertificateAuthorityCertificateAuthorityRuleArgs> certificateAuthorityRules) {
            return certificateAuthorityRules(Output.of(certificateAuthorityRules));
        }

        /**
         * @param certificateAuthorityRules (Updatable) A list of rules that control how the CA is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityRules(CertificateAuthorityCertificateAuthorityRuleArgs... certificateAuthorityRules) {
            return certificateAuthorityRules(List.of(certificateAuthorityRules));
        }

        /**
         * @param certificateRevocationListDetails (Updatable) The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(@Nullable Output<CertificateAuthorityCertificateRevocationListDetailsArgs> certificateRevocationListDetails) {
            $.certificateRevocationListDetails = certificateRevocationListDetails;
            return this;
        }

        /**
         * @param certificateRevocationListDetails (Updatable) The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(CertificateAuthorityCertificateRevocationListDetailsArgs certificateRevocationListDetails) {
            return certificateRevocationListDetails(Output.of(certificateRevocationListDetails));
        }

        /**
         * @param compartmentId (Updatable) The compartment in which you want to create the CA.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The compartment in which you want to create the CA.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A brief description of the CA.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A brief description of the CA.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param kmsKeyId The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param name A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CertificateAuthorityArgs build() {
            $.certificateAuthorityConfig = Objects.requireNonNull($.certificateAuthorityConfig, "expected parameter 'certificateAuthorityConfig' to be non-null");
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.kmsKeyId = Objects.requireNonNull($.kmsKeyId, "expected parameter 'kmsKeyId' to be non-null");
            return $;
        }
    }

}
