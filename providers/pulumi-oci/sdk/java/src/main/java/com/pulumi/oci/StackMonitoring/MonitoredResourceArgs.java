// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourceAliasesArgs;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourceCredentialsArgs;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourceDatabaseConnectionDetailsArgs;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourcePropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredResourceArgs Empty = new MonitoredResourceArgs();

    /**
     * (Updatable) Monitored Resource Alias Credential Details
     * 
     */
    @Import(name="aliases")
    private @Nullable Output<MonitoredResourceAliasesArgs> aliases;

    /**
     * @return (Updatable) Monitored Resource Alias Credential Details
     * 
     */
    public Optional<Output<MonitoredResourceAliasesArgs>> aliases() {
        return Optional.ofNullable(this.aliases);
    }

    /**
     * (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Monitored Resource Credential Details
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<MonitoredResourceCredentialsArgs> credentials;

    /**
     * @return (Updatable) Monitored Resource Credential Details
     * 
     */
    public Optional<Output<MonitoredResourceCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * (Updatable) Connection details to connect to the database. HostName, protocol, and port should be specified.
     * 
     */
    @Import(name="databaseConnectionDetails")
    private @Nullable Output<MonitoredResourceDatabaseConnectionDetailsArgs> databaseConnectionDetails;

    /**
     * @return (Updatable) Connection details to connect to the database. HostName, protocol, and port should be specified.
     * 
     */
    public Optional<Output<MonitoredResourceDatabaseConnectionDetailsArgs>> databaseConnectionDetails() {
        return Optional.ofNullable(this.databaseConnectionDetails);
    }

    /**
     * (Updatable) Monitored resource display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Monitored resource display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Generally used by DBaaS to send the Database OCID stored on the DBaaS. The same will be passed to resource service to enable Stack Monitoring Service on DBM. This will be stored in Stack Monitoring Resource Service data store as identifier for monitored resource. If this header is not set as part of the request, then an id will be generated and stored for the resource.
     * 
     */
    @Import(name="externalResourceId")
    private @Nullable Output<String> externalResourceId;

    /**
     * @return Generally used by DBaaS to send the Database OCID stored on the DBaaS. The same will be passed to resource service to enable Stack Monitoring Service on DBM. This will be stored in Stack Monitoring Resource Service data store as identifier for monitored resource. If this header is not set as part of the request, then an id will be generated and stored for the resource.
     * 
     */
    public Optional<Output<String>> externalResourceId() {
        return Optional.ofNullable(this.externalResourceId);
    }

    /**
     * (Updatable) Host name of the monitored resource
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return (Updatable) Host name of the monitored resource
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="managementAgentId")
    private @Nullable Output<String> managementAgentId;

    /**
     * @return Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> managementAgentId() {
        return Optional.ofNullable(this.managementAgentId);
    }

    /**
     * (Updatable) property name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) property name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) List of monitored resource properties
     * 
     */
    @Import(name="properties")
    private @Nullable Output<List<MonitoredResourcePropertyArgs>> properties;

    /**
     * @return (Updatable) List of monitored resource properties
     * 
     */
    public Optional<Output<List<MonitoredResourcePropertyArgs>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * (Updatable) Time zone in the form of tz database canonical zone ID.
     * 
     */
    @Import(name="resourceTimeZone")
    private @Nullable Output<String> resourceTimeZone;

    /**
     * @return (Updatable) Time zone in the form of tz database canonical zone ID.
     * 
     */
    public Optional<Output<String>> resourceTimeZone() {
        return Optional.ofNullable(this.resourceTimeZone);
    }

    /**
     * Monitored resource type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Monitored resource type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MonitoredResourceArgs() {}

    private MonitoredResourceArgs(MonitoredResourceArgs $) {
        this.aliases = $.aliases;
        this.compartmentId = $.compartmentId;
        this.credentials = $.credentials;
        this.databaseConnectionDetails = $.databaseConnectionDetails;
        this.displayName = $.displayName;
        this.externalResourceId = $.externalResourceId;
        this.hostName = $.hostName;
        this.managementAgentId = $.managementAgentId;
        this.name = $.name;
        this.properties = $.properties;
        this.resourceTimeZone = $.resourceTimeZone;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredResourceArgs $;

        public Builder() {
            $ = new MonitoredResourceArgs();
        }

        public Builder(MonitoredResourceArgs defaults) {
            $ = new MonitoredResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliases (Updatable) Monitored Resource Alias Credential Details
         * 
         * @return builder
         * 
         */
        public Builder aliases(@Nullable Output<MonitoredResourceAliasesArgs> aliases) {
            $.aliases = aliases;
            return this;
        }

        /**
         * @param aliases (Updatable) Monitored Resource Alias Credential Details
         * 
         * @return builder
         * 
         */
        public Builder aliases(MonitoredResourceAliasesArgs aliases) {
            return aliases(Output.of(aliases));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param credentials (Updatable) Monitored Resource Credential Details
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<MonitoredResourceCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials (Updatable) Monitored Resource Credential Details
         * 
         * @return builder
         * 
         */
        public Builder credentials(MonitoredResourceCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param databaseConnectionDetails (Updatable) Connection details to connect to the database. HostName, protocol, and port should be specified.
         * 
         * @return builder
         * 
         */
        public Builder databaseConnectionDetails(@Nullable Output<MonitoredResourceDatabaseConnectionDetailsArgs> databaseConnectionDetails) {
            $.databaseConnectionDetails = databaseConnectionDetails;
            return this;
        }

        /**
         * @param databaseConnectionDetails (Updatable) Connection details to connect to the database. HostName, protocol, and port should be specified.
         * 
         * @return builder
         * 
         */
        public Builder databaseConnectionDetails(MonitoredResourceDatabaseConnectionDetailsArgs databaseConnectionDetails) {
            return databaseConnectionDetails(Output.of(databaseConnectionDetails));
        }

        /**
         * @param displayName (Updatable) Monitored resource display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Monitored resource display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param externalResourceId Generally used by DBaaS to send the Database OCID stored on the DBaaS. The same will be passed to resource service to enable Stack Monitoring Service on DBM. This will be stored in Stack Monitoring Resource Service data store as identifier for monitored resource. If this header is not set as part of the request, then an id will be generated and stored for the resource.
         * 
         * @return builder
         * 
         */
        public Builder externalResourceId(@Nullable Output<String> externalResourceId) {
            $.externalResourceId = externalResourceId;
            return this;
        }

        /**
         * @param externalResourceId Generally used by DBaaS to send the Database OCID stored on the DBaaS. The same will be passed to resource service to enable Stack Monitoring Service on DBM. This will be stored in Stack Monitoring Resource Service data store as identifier for monitored resource. If this header is not set as part of the request, then an id will be generated and stored for the resource.
         * 
         * @return builder
         * 
         */
        public Builder externalResourceId(String externalResourceId) {
            return externalResourceId(Output.of(externalResourceId));
        }

        /**
         * @param hostName (Updatable) Host name of the monitored resource
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName (Updatable) Host name of the monitored resource
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param managementAgentId Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(@Nullable Output<String> managementAgentId) {
            $.managementAgentId = managementAgentId;
            return this;
        }

        /**
         * @param managementAgentId Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(String managementAgentId) {
            return managementAgentId(Output.of(managementAgentId));
        }

        /**
         * @param name (Updatable) property name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) property name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param properties (Updatable) List of monitored resource properties
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<List<MonitoredResourcePropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties (Updatable) List of monitored resource properties
         * 
         * @return builder
         * 
         */
        public Builder properties(List<MonitoredResourcePropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties (Updatable) List of monitored resource properties
         * 
         * @return builder
         * 
         */
        public Builder properties(MonitoredResourcePropertyArgs... properties) {
            return properties(List.of(properties));
        }

        /**
         * @param resourceTimeZone (Updatable) Time zone in the form of tz database canonical zone ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceTimeZone(@Nullable Output<String> resourceTimeZone) {
            $.resourceTimeZone = resourceTimeZone;
            return this;
        }

        /**
         * @param resourceTimeZone (Updatable) Time zone in the form of tz database canonical zone ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceTimeZone(String resourceTimeZone) {
            return resourceTimeZone(Output.of(resourceTimeZone));
        }

        /**
         * @param type Monitored resource type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Monitored resource type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MonitoredResourceArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
