// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.BuildRunBuildRunSourceTriggerInfo;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BuildRunBuildRunSource {
    /**
     * @return The DevOps code repository identifier that invoked the build run.
     * 
     */
    private final @Nullable String repositoryId;
    /**
     * @return The source from which the build run is triggered.
     * 
     */
    private final @Nullable String sourceType;
    /**
     * @return The trigger that invoked the build run.
     * 
     */
    private final @Nullable String triggerId;
    /**
     * @return Trigger details that need to be used for the BuildRun
     * 
     */
    private final @Nullable List<BuildRunBuildRunSourceTriggerInfo> triggerInfos;

    @CustomType.Constructor
    private BuildRunBuildRunSource(
        @CustomType.Parameter("repositoryId") @Nullable String repositoryId,
        @CustomType.Parameter("sourceType") @Nullable String sourceType,
        @CustomType.Parameter("triggerId") @Nullable String triggerId,
        @CustomType.Parameter("triggerInfos") @Nullable List<BuildRunBuildRunSourceTriggerInfo> triggerInfos) {
        this.repositoryId = repositoryId;
        this.sourceType = sourceType;
        this.triggerId = triggerId;
        this.triggerInfos = triggerInfos;
    }

    /**
     * @return The DevOps code repository identifier that invoked the build run.
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }
    /**
     * @return The source from which the build run is triggered.
     * 
     */
    public Optional<String> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    /**
     * @return The trigger that invoked the build run.
     * 
     */
    public Optional<String> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }
    /**
     * @return Trigger details that need to be used for the BuildRun
     * 
     */
    public List<BuildRunBuildRunSourceTriggerInfo> triggerInfos() {
        return this.triggerInfos == null ? List.of() : this.triggerInfos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildRunBuildRunSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String repositoryId;
        private @Nullable String sourceType;
        private @Nullable String triggerId;
        private @Nullable List<BuildRunBuildRunSourceTriggerInfo> triggerInfos;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildRunBuildRunSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.repositoryId = defaults.repositoryId;
    	      this.sourceType = defaults.sourceType;
    	      this.triggerId = defaults.triggerId;
    	      this.triggerInfos = defaults.triggerInfos;
        }

        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        public Builder sourceType(@Nullable String sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        public Builder triggerId(@Nullable String triggerId) {
            this.triggerId = triggerId;
            return this;
        }
        public Builder triggerInfos(@Nullable List<BuildRunBuildRunSourceTriggerInfo> triggerInfos) {
            this.triggerInfos = triggerInfos;
            return this;
        }
        public Builder triggerInfos(BuildRunBuildRunSourceTriggerInfo... triggerInfos) {
            return triggerInfos(List.of(triggerInfos));
        }        public BuildRunBuildRunSource build() {
            return new BuildRunBuildRunSource(repositoryId, sourceType, triggerId, triggerInfos);
        }
    }
}
