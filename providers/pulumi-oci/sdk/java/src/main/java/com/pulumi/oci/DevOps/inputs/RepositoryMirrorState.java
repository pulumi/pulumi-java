// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryMirrorState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryMirrorState Empty = new RepositoryMirrorState();

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private RepositoryMirrorState() {}

    private RepositoryMirrorState(RepositoryMirrorState $) {
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryMirrorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryMirrorState $;

        public Builder() {
            $ = new RepositoryMirrorState();
        }

        public Builder(RepositoryMirrorState defaults) {
            $ = new RepositoryMirrorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public RepositoryMirrorState build() {
            return $;
        }
    }

}
