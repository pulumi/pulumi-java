// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasesPluggableDatabaseConnectionString;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPluggableDatabasesPluggableDatabase {
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private final String compartmentId;
    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    private final List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    private final String containerDatabaseId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
     * 
     */
    private final String id;
    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    private final Boolean isRestricted;
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    private final String openMode;
    private final String pdbAdminPassword;
    /**
     * @return A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
     * 
     */
    private final String pdbName;
    private final Boolean shouldPdbAdminAccountBeLocked;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private final String state;
    private final String tdeWalletPassword;
    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    private final String timeCreated;

    @CustomType.Constructor
    private GetPluggableDatabasesPluggableDatabase(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionStrings") List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings,
        @CustomType.Parameter("containerDatabaseId") String containerDatabaseId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isRestricted") Boolean isRestricted,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("openMode") String openMode,
        @CustomType.Parameter("pdbAdminPassword") String pdbAdminPassword,
        @CustomType.Parameter("pdbName") String pdbName,
        @CustomType.Parameter("shouldPdbAdminAccountBeLocked") Boolean shouldPdbAdminAccountBeLocked,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("tdeWalletPassword") String tdeWalletPassword,
        @CustomType.Parameter("timeCreated") String timeCreated) {
        this.compartmentId = compartmentId;
        this.connectionStrings = connectionStrings;
        this.containerDatabaseId = containerDatabaseId;
        this.definedTags = definedTags;
        this.freeformTags = freeformTags;
        this.id = id;
        this.isRestricted = isRestricted;
        this.lifecycleDetails = lifecycleDetails;
        this.openMode = openMode;
        this.pdbAdminPassword = pdbAdminPassword;
        this.pdbName = pdbName;
        this.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
        this.state = state;
        this.tdeWalletPassword = tdeWalletPassword;
        this.timeCreated = timeCreated;
    }

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    public List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    public String containerDatabaseId() {
        return this.containerDatabaseId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    public Boolean isRestricted() {
        return this.isRestricted;
    }
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public String openMode() {
        return this.openMode;
    }
    public String pdbAdminPassword() {
        return this.pdbAdminPassword;
    }
    /**
     * @return A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
     * 
     */
    public String pdbName() {
        return this.pdbName;
    }
    public Boolean shouldPdbAdminAccountBeLocked() {
        return this.shouldPdbAdminAccountBeLocked;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    public String tdeWalletPassword() {
        return this.tdeWalletPassword;
    }
    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluggableDatabasesPluggableDatabase defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings;
        private String containerDatabaseId;
        private Map<String,Object> definedTags;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isRestricted;
        private String lifecycleDetails;
        private String openMode;
        private String pdbAdminPassword;
        private String pdbName;
        private Boolean shouldPdbAdminAccountBeLocked;
        private String state;
        private String tdeWalletPassword;
        private String timeCreated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPluggableDatabasesPluggableDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.containerDatabaseId = defaults.containerDatabaseId;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isRestricted = defaults.isRestricted;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.openMode = defaults.openMode;
    	      this.pdbAdminPassword = defaults.pdbAdminPassword;
    	      this.pdbName = defaults.pdbName;
    	      this.shouldPdbAdminAccountBeLocked = defaults.shouldPdbAdminAccountBeLocked;
    	      this.state = defaults.state;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.timeCreated = defaults.timeCreated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionStrings(List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetPluggableDatabasesPluggableDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        public Builder containerDatabaseId(String containerDatabaseId) {
            this.containerDatabaseId = Objects.requireNonNull(containerDatabaseId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isRestricted(Boolean isRestricted) {
            this.isRestricted = Objects.requireNonNull(isRestricted);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder openMode(String openMode) {
            this.openMode = Objects.requireNonNull(openMode);
            return this;
        }
        public Builder pdbAdminPassword(String pdbAdminPassword) {
            this.pdbAdminPassword = Objects.requireNonNull(pdbAdminPassword);
            return this;
        }
        public Builder pdbName(String pdbName) {
            this.pdbName = Objects.requireNonNull(pdbName);
            return this;
        }
        public Builder shouldPdbAdminAccountBeLocked(Boolean shouldPdbAdminAccountBeLocked) {
            this.shouldPdbAdminAccountBeLocked = Objects.requireNonNull(shouldPdbAdminAccountBeLocked);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            this.tdeWalletPassword = Objects.requireNonNull(tdeWalletPassword);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }        public GetPluggableDatabasesPluggableDatabase build() {
            return new GetPluggableDatabasesPluggableDatabase(compartmentId, connectionStrings, containerDatabaseId, definedTags, freeformTags, id, isRestricted, lifecycleDetails, openMode, pdbAdminPassword, pdbName, shouldPdbAdminAccountBeLocked, state, tdeWalletPassword, timeCreated);
        }
    }
}
