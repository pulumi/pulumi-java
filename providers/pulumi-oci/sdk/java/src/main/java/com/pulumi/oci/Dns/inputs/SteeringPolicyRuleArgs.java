// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dns.inputs.SteeringPolicyRuleCaseArgs;
import com.pulumi.oci.Dns.inputs.SteeringPolicyRuleDefaultAnswerDataArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SteeringPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SteeringPolicyRuleArgs Empty = new SteeringPolicyRuleArgs();

    /**
     * An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
     * 
     */
    @Import(name="cases")
    private @Nullable Output<List<SteeringPolicyRuleCaseArgs>> cases;

    /**
     * @return An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
     * 
     */
    public Optional<Output<List<SteeringPolicyRuleCaseArgs>>> cases() {
        return Optional.ofNullable(this.cases);
    }

    /**
     * Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
     * 
     */
    @Import(name="defaultAnswerDatas")
    private @Nullable Output<List<SteeringPolicyRuleDefaultAnswerDataArgs>> defaultAnswerDatas;

    /**
     * @return Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
     * 
     */
    public Optional<Output<List<SteeringPolicyRuleDefaultAnswerDataArgs>>> defaultAnswerDatas() {
        return Optional.ofNullable(this.defaultAnswerDatas);
    }

    /**
     * Defines a default count if `cases` is not defined for the rule or a matching case does not define `count`. `defaultCount` is **not** applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed. If no rules remain to be processed, the answer will be chosen from the remaining list of answers.
     * 
     */
    @Import(name="defaultCount")
    private @Nullable Output<Integer> defaultCount;

    /**
     * @return Defines a default count if `cases` is not defined for the rule or a matching case does not define `count`. `defaultCount` is **not** applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed. If no rules remain to be processed, the answer will be chosen from the remaining list of answers.
     * 
     */
    public Optional<Output<Integer>> defaultCount() {
        return Optional.ofNullable(this.defaultCount);
    }

    /**
     * A user-defined description of the rule&#39;s purpose or behavior.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A user-defined description of the rule&#39;s purpose or behavior.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The type of a rule determines its sorting/filtering behavior.
     * 
     */
    @Import(name="ruleType", required=true)
    private Output<String> ruleType;

    /**
     * @return The type of a rule determines its sorting/filtering behavior.
     * 
     */
    public Output<String> ruleType() {
        return this.ruleType;
    }

    private SteeringPolicyRuleArgs() {}

    private SteeringPolicyRuleArgs(SteeringPolicyRuleArgs $) {
        this.cases = $.cases;
        this.defaultAnswerDatas = $.defaultAnswerDatas;
        this.defaultCount = $.defaultCount;
        this.description = $.description;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SteeringPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SteeringPolicyRuleArgs $;

        public Builder() {
            $ = new SteeringPolicyRuleArgs();
        }

        public Builder(SteeringPolicyRuleArgs defaults) {
            $ = new SteeringPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cases An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
         * 
         * @return builder
         * 
         */
        public Builder cases(@Nullable Output<List<SteeringPolicyRuleCaseArgs>> cases) {
            $.cases = cases;
            return this;
        }

        /**
         * @param cases An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
         * 
         * @return builder
         * 
         */
        public Builder cases(List<SteeringPolicyRuleCaseArgs> cases) {
            return cases(Output.of(cases));
        }

        /**
         * @param cases An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
         * 
         * @return builder
         * 
         */
        public Builder cases(SteeringPolicyRuleCaseArgs... cases) {
            return cases(List.of(cases));
        }

        /**
         * @param defaultAnswerDatas Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
         * 
         * @return builder
         * 
         */
        public Builder defaultAnswerDatas(@Nullable Output<List<SteeringPolicyRuleDefaultAnswerDataArgs>> defaultAnswerDatas) {
            $.defaultAnswerDatas = defaultAnswerDatas;
            return this;
        }

        /**
         * @param defaultAnswerDatas Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
         * 
         * @return builder
         * 
         */
        public Builder defaultAnswerDatas(List<SteeringPolicyRuleDefaultAnswerDataArgs> defaultAnswerDatas) {
            return defaultAnswerDatas(Output.of(defaultAnswerDatas));
        }

        /**
         * @param defaultAnswerDatas Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
         * 
         * @return builder
         * 
         */
        public Builder defaultAnswerDatas(SteeringPolicyRuleDefaultAnswerDataArgs... defaultAnswerDatas) {
            return defaultAnswerDatas(List.of(defaultAnswerDatas));
        }

        /**
         * @param defaultCount Defines a default count if `cases` is not defined for the rule or a matching case does not define `count`. `defaultCount` is **not** applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed. If no rules remain to be processed, the answer will be chosen from the remaining list of answers.
         * 
         * @return builder
         * 
         */
        public Builder defaultCount(@Nullable Output<Integer> defaultCount) {
            $.defaultCount = defaultCount;
            return this;
        }

        /**
         * @param defaultCount Defines a default count if `cases` is not defined for the rule or a matching case does not define `count`. `defaultCount` is **not** applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed. If no rules remain to be processed, the answer will be chosen from the remaining list of answers.
         * 
         * @return builder
         * 
         */
        public Builder defaultCount(Integer defaultCount) {
            return defaultCount(Output.of(defaultCount));
        }

        /**
         * @param description A user-defined description of the rule&#39;s purpose or behavior.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A user-defined description of the rule&#39;s purpose or behavior.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ruleType The type of a rule determines its sorting/filtering behavior.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType The type of a rule determines its sorting/filtering behavior.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public SteeringPolicyRuleArgs build() {
            $.ruleType = Objects.requireNonNull($.ruleType, "expected parameter 'ruleType' to be non-null");
            return $;
        }
    }

}
