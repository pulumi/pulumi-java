// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Identity.DbCredentialArgs;
import com.pulumi.oci.Identity.inputs.DbCredentialState;
import com.pulumi.oci.Utilities;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * This resource provides the Db Credential resource in Oracle Cloud Infrastructure Identity service.
 * 
 * Creates a new DB credential for the specified user.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Import is not supported for this resource.
 * 
 */
@ResourceType(type="oci:Identity/dbCredential:DbCredential")
public class DbCredential extends com.pulumi.resources.CustomResource {
    /**
     * The description you assign to the DB credentials during creation.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The description you assign to the DB credentials during creation.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The detailed status of INACTIVE lifecycleState.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return The detailed status of INACTIVE lifecycleState.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * The password for the DB credentials during creation.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output<String> password;

    /**
     * @return The password for the DB credentials during creation.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * The credential&#39;s current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The credential&#39;s current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Export(name="timeExpires", type=String.class, parameters={})
    private Output<String> timeExpires;

    /**
     * @return Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Output<String> timeExpires() {
        return this.timeExpires;
    }
    /**
     * The OCID of the user.
     * 
     */
    @Export(name="userId", type=String.class, parameters={})
    private Output<String> userId;

    /**
     * @return The OCID of the user.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DbCredential(String name) {
        this(name, DbCredentialArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DbCredential(String name, DbCredentialArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DbCredential(String name, DbCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Identity/dbCredential:DbCredential", name, args == null ? DbCredentialArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DbCredential(String name, Output<String> id, @Nullable DbCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Identity/dbCredential:DbCredential", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DbCredential get(String name, Output<String> id, @Nullable DbCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DbCredential(name, id, state, options);
    }
}
