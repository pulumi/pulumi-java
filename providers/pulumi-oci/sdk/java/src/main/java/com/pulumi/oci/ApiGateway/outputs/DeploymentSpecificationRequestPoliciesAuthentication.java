// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSpecificationRequestPoliciesAuthentication {
    /**
     * @return (Updatable) The list of intended recipients for the token.
     * 
     */
    private final @Nullable List<String> audiences;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    private final @Nullable String functionId;
    /**
     * @return (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    private final @Nullable Boolean isAnonymousAccessAllowed;
    /**
     * @return (Updatable) A list of parties that could have issued the token.
     * 
     */
    private final @Nullable List<String> issuers;
    /**
     * @return (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    private final @Nullable Double maxClockSkewInSeconds;
    /**
     * @return (Updatable) A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    private final @Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys;
    /**
     * @return (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    private final @Nullable String tokenAuthScheme;
    /**
     * @return (Updatable) The name of the header containing the authentication token.
     * 
     */
    private final @Nullable String tokenHeader;
    /**
     * @return (Updatable) The name of the query parameter containing the authentication token.
     * 
     */
    private final @Nullable String tokenQueryParam;
    /**
     * @return (Updatable) Type of the Response Cache Store Policy.
     * 
     */
    private final String type;
    /**
     * @return (Updatable) A list of claims which should be validated to consider the token valid.
     * 
     */
    private final @Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims;

    @CustomType.Constructor
    private DeploymentSpecificationRequestPoliciesAuthentication(
        @CustomType.Parameter("audiences") @Nullable List<String> audiences,
        @CustomType.Parameter("functionId") @Nullable String functionId,
        @CustomType.Parameter("isAnonymousAccessAllowed") @Nullable Boolean isAnonymousAccessAllowed,
        @CustomType.Parameter("issuers") @Nullable List<String> issuers,
        @CustomType.Parameter("maxClockSkewInSeconds") @Nullable Double maxClockSkewInSeconds,
        @CustomType.Parameter("publicKeys") @Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys,
        @CustomType.Parameter("tokenAuthScheme") @Nullable String tokenAuthScheme,
        @CustomType.Parameter("tokenHeader") @Nullable String tokenHeader,
        @CustomType.Parameter("tokenQueryParam") @Nullable String tokenQueryParam,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("verifyClaims") @Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims) {
        this.audiences = audiences;
        this.functionId = functionId;
        this.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
        this.issuers = issuers;
        this.maxClockSkewInSeconds = maxClockSkewInSeconds;
        this.publicKeys = publicKeys;
        this.tokenAuthScheme = tokenAuthScheme;
        this.tokenHeader = tokenHeader;
        this.tokenQueryParam = tokenQueryParam;
        this.type = type;
        this.verifyClaims = verifyClaims;
    }

    /**
     * @return (Updatable) The list of intended recipients for the token.
     * 
     */
    public List<String> audiences() {
        return this.audiences == null ? List.of() : this.audiences;
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    public Optional<String> functionId() {
        return Optional.ofNullable(this.functionId);
    }
    /**
     * @return (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    public Optional<Boolean> isAnonymousAccessAllowed() {
        return Optional.ofNullable(this.isAnonymousAccessAllowed);
    }
    /**
     * @return (Updatable) A list of parties that could have issued the token.
     * 
     */
    public List<String> issuers() {
        return this.issuers == null ? List.of() : this.issuers;
    }
    /**
     * @return (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    public Optional<Double> maxClockSkewInSeconds() {
        return Optional.ofNullable(this.maxClockSkewInSeconds);
    }
    /**
     * @return (Updatable) A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys> publicKeys() {
        return Optional.ofNullable(this.publicKeys);
    }
    /**
     * @return (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    public Optional<String> tokenAuthScheme() {
        return Optional.ofNullable(this.tokenAuthScheme);
    }
    /**
     * @return (Updatable) The name of the header containing the authentication token.
     * 
     */
    public Optional<String> tokenHeader() {
        return Optional.ofNullable(this.tokenHeader);
    }
    /**
     * @return (Updatable) The name of the query parameter containing the authentication token.
     * 
     */
    public Optional<String> tokenQueryParam() {
        return Optional.ofNullable(this.tokenQueryParam);
    }
    /**
     * @return (Updatable) Type of the Response Cache Store Policy.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return (Updatable) A list of claims which should be validated to consider the token valid.
     * 
     */
    public List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims() {
        return this.verifyClaims == null ? List.of() : this.verifyClaims;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSpecificationRequestPoliciesAuthentication defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> audiences;
        private @Nullable String functionId;
        private @Nullable Boolean isAnonymousAccessAllowed;
        private @Nullable List<String> issuers;
        private @Nullable Double maxClockSkewInSeconds;
        private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys;
        private @Nullable String tokenAuthScheme;
        private @Nullable String tokenHeader;
        private @Nullable String tokenQueryParam;
        private String type;
        private @Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentSpecificationRequestPoliciesAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.functionId = defaults.functionId;
    	      this.isAnonymousAccessAllowed = defaults.isAnonymousAccessAllowed;
    	      this.issuers = defaults.issuers;
    	      this.maxClockSkewInSeconds = defaults.maxClockSkewInSeconds;
    	      this.publicKeys = defaults.publicKeys;
    	      this.tokenAuthScheme = defaults.tokenAuthScheme;
    	      this.tokenHeader = defaults.tokenHeader;
    	      this.tokenQueryParam = defaults.tokenQueryParam;
    	      this.type = defaults.type;
    	      this.verifyClaims = defaults.verifyClaims;
        }

        public Builder audiences(@Nullable List<String> audiences) {
            this.audiences = audiences;
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        public Builder functionId(@Nullable String functionId) {
            this.functionId = functionId;
            return this;
        }
        public Builder isAnonymousAccessAllowed(@Nullable Boolean isAnonymousAccessAllowed) {
            this.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            return this;
        }
        public Builder issuers(@Nullable List<String> issuers) {
            this.issuers = issuers;
            return this;
        }
        public Builder issuers(String... issuers) {
            return issuers(List.of(issuers));
        }
        public Builder maxClockSkewInSeconds(@Nullable Double maxClockSkewInSeconds) {
            this.maxClockSkewInSeconds = maxClockSkewInSeconds;
            return this;
        }
        public Builder publicKeys(@Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys) {
            this.publicKeys = publicKeys;
            return this;
        }
        public Builder tokenAuthScheme(@Nullable String tokenAuthScheme) {
            this.tokenAuthScheme = tokenAuthScheme;
            return this;
        }
        public Builder tokenHeader(@Nullable String tokenHeader) {
            this.tokenHeader = tokenHeader;
            return this;
        }
        public Builder tokenQueryParam(@Nullable String tokenQueryParam) {
            this.tokenQueryParam = tokenQueryParam;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder verifyClaims(@Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims) {
            this.verifyClaims = verifyClaims;
            return this;
        }
        public Builder verifyClaims(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim... verifyClaims) {
            return verifyClaims(List.of(verifyClaims));
        }        public DeploymentSpecificationRequestPoliciesAuthentication build() {
            return new DeploymentSpecificationRequestPoliciesAuthentication(audiences, functionId, isAnonymousAccessAllowed, issuers, maxClockSkewInSeconds, publicKeys, tokenAuthScheme, tokenHeader, tokenQueryParam, type, verifyClaims);
        }
    }
}
