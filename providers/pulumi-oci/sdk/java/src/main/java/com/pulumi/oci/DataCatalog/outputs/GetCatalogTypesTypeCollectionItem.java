// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCatalogTypesTypeCollectionItem {
    /**
     * @return Unique catalog identifier.
     * 
     */
    private final String catalogId;
    /**
     * @return Detailed description of the type.
     * 
     */
    private final String description;
    /**
     * @return Unique type key that is immutable.
     * 
     */
    private final String key;
    /**
     * @return Immutable resource name.
     * 
     */
    private final String name;
    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    private final String state;
    /**
     * @return Indicates the category of this type . For example, data assets or connections.
     * 
     */
    private final String typeCategory;
    /**
     * @return URI to the type instance in the API.
     * 
     */
    private final String uri;

    @CustomType.Constructor
    private GetCatalogTypesTypeCollectionItem(
        @CustomType.Parameter("catalogId") String catalogId,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("typeCategory") String typeCategory,
        @CustomType.Parameter("uri") String uri) {
        this.catalogId = catalogId;
        this.description = description;
        this.key = key;
        this.name = name;
        this.state = state;
        this.typeCategory = typeCategory;
        this.uri = uri;
    }

    /**
     * @return Unique catalog identifier.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return Detailed description of the type.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Unique type key that is immutable.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Immutable resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Indicates the category of this type . For example, data assets or connections.
     * 
     */
    public String typeCategory() {
        return this.typeCategory;
    }
    /**
     * @return URI to the type instance in the API.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogTypesTypeCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String catalogId;
        private String description;
        private String key;
        private String name;
        private String state;
        private String typeCategory;
        private String uri;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCatalogTypesTypeCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.description = defaults.description;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.typeCategory = defaults.typeCategory;
    	      this.uri = defaults.uri;
        }

        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder typeCategory(String typeCategory) {
            this.typeCategory = Objects.requireNonNull(typeCategory);
            return this;
        }
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }        public GetCatalogTypesTypeCollectionItem build() {
            return new GetCatalogTypesTypeCollectionItem(catalogId, description, key, name, state, typeCategory, uri);
        }
    }
}
