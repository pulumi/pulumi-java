// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoScalingConfigurationPolicyCapacityArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoScalingConfigurationPolicyCapacityArgs Empty = new AutoScalingConfigurationPolicyCapacityArgs();

    /**
     * For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the instance pool immediately after autoscaling is enabled. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
     * 
     */
    @Import(name="initial")
    private @Nullable Output<Integer> initial;

    /**
     * @return For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the instance pool immediately after autoscaling is enabled. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
     * 
     */
    public Optional<Output<Integer>> initial() {
        return Optional.ofNullable(this.initial);
    }

    /**
     * For a threshold-based autoscaling policy, this value is the maximum number of instances the instance pool is allowed to increase to (scale out).
     * 
     */
    @Import(name="max")
    private @Nullable Output<Integer> max;

    /**
     * @return For a threshold-based autoscaling policy, this value is the maximum number of instances the instance pool is allowed to increase to (scale out).
     * 
     */
    public Optional<Output<Integer>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * For a threshold-based autoscaling policy, this value is the minimum number of instances the instance pool is allowed to decrease to (scale in).
     * 
     */
    @Import(name="min")
    private @Nullable Output<Integer> min;

    /**
     * @return For a threshold-based autoscaling policy, this value is the minimum number of instances the instance pool is allowed to decrease to (scale in).
     * 
     */
    public Optional<Output<Integer>> min() {
        return Optional.ofNullable(this.min);
    }

    private AutoScalingConfigurationPolicyCapacityArgs() {}

    private AutoScalingConfigurationPolicyCapacityArgs(AutoScalingConfigurationPolicyCapacityArgs $) {
        this.initial = $.initial;
        this.max = $.max;
        this.min = $.min;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoScalingConfigurationPolicyCapacityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoScalingConfigurationPolicyCapacityArgs $;

        public Builder() {
            $ = new AutoScalingConfigurationPolicyCapacityArgs();
        }

        public Builder(AutoScalingConfigurationPolicyCapacityArgs defaults) {
            $ = new AutoScalingConfigurationPolicyCapacityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param initial For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the instance pool immediately after autoscaling is enabled. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
         * 
         * @return builder
         * 
         */
        public Builder initial(@Nullable Output<Integer> initial) {
            $.initial = initial;
            return this;
        }

        /**
         * @param initial For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the instance pool immediately after autoscaling is enabled. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
         * 
         * @return builder
         * 
         */
        public Builder initial(Integer initial) {
            return initial(Output.of(initial));
        }

        /**
         * @param max For a threshold-based autoscaling policy, this value is the maximum number of instances the instance pool is allowed to increase to (scale out).
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<Integer> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max For a threshold-based autoscaling policy, this value is the maximum number of instances the instance pool is allowed to increase to (scale out).
         * 
         * @return builder
         * 
         */
        public Builder max(Integer max) {
            return max(Output.of(max));
        }

        /**
         * @param min For a threshold-based autoscaling policy, this value is the minimum number of instances the instance pool is allowed to decrease to (scale in).
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<Integer> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min For a threshold-based autoscaling policy, this value is the minimum number of instances the instance pool is allowed to decrease to (scale in).
         * 
         * @return builder
         * 
         */
        public Builder min(Integer min) {
            return min(Output.of(min));
        }

        public AutoScalingConfigurationPolicyCapacityArgs build() {
            return $;
        }
    }

}
