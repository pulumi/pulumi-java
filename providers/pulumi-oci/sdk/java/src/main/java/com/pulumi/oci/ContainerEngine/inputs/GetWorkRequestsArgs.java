// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ContainerEngine.inputs.GetWorkRequestsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkRequestsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkRequestsArgs Empty = new GetWorkRequestsArgs();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable String clusterId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetWorkRequestsFilter> filters;

    public Optional<List<GetWorkRequestsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the resource associated with a work request
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return The OCID of the resource associated with a work request
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Type of the resource associated with a work request
     * 
     */
    @Import(name="resourceType")
    private @Nullable String resourceType;

    /**
     * @return Type of the resource associated with a work request
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * A work request status to filter on. Can have multiple parameters of this name.
     * 
     */
    @Import(name="statuses")
    private @Nullable List<String> statuses;

    /**
     * @return A work request status to filter on. Can have multiple parameters of this name.
     * 
     */
    public Optional<List<String>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    private GetWorkRequestsArgs() {}

    private GetWorkRequestsArgs(GetWorkRequestsArgs $) {
        this.clusterId = $.clusterId;
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
        this.statuses = $.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkRequestsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkRequestsArgs $;

        public Builder() {
            $ = new GetWorkRequestsArgs();
        }

        public Builder(GetWorkRequestsArgs defaults) {
            $ = new GetWorkRequestsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetWorkRequestsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetWorkRequestsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param resourceId The OCID of the resource associated with a work request
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceType Type of the resource associated with a work request
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param statuses A work request status to filter on. Can have multiple parameters of this name.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable List<String> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses A work request status to filter on. Can have multiple parameters of this name.
         * 
         * @return builder
         * 
         */
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }

        public GetWorkRequestsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
