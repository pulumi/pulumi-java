// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMysqlDbSystemsDbSystemEndpoint {
    /**
     * @return The network address of the DB System.
     * 
     */
    private final String hostname;
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    private final String ipAddress;
    /**
     * @return The access modes from the client that this endpoint supports.
     * 
     */
    private final List<String> modes;
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    private final Integer port;
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    private final Integer portX;
    /**
     * @return The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
     * 
     */
    private final String status;
    /**
     * @return Additional information about the current endpoint status.
     * 
     */
    private final String statusDetails;

    @CustomType.Constructor
    private GetMysqlDbSystemsDbSystemEndpoint(
        @CustomType.Parameter("hostname") String hostname,
        @CustomType.Parameter("ipAddress") String ipAddress,
        @CustomType.Parameter("modes") List<String> modes,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("portX") Integer portX,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("statusDetails") String statusDetails) {
        this.hostname = hostname;
        this.ipAddress = ipAddress;
        this.modes = modes;
        this.port = port;
        this.portX = portX;
        this.status = status;
        this.statusDetails = statusDetails;
    }

    /**
     * @return The network address of the DB System.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The access modes from the client that this endpoint supports.
     * 
     */
    public List<String> modes() {
        return this.modes;
    }
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Integer portX() {
        return this.portX;
    }
    /**
     * @return The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Additional information about the current endpoint status.
     * 
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlDbSystemsDbSystemEndpoint defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String hostname;
        private String ipAddress;
        private List<String> modes;
        private Integer port;
        private Integer portX;
        private String status;
        private String statusDetails;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlDbSystemsDbSystemEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.ipAddress = defaults.ipAddress;
    	      this.modes = defaults.modes;
    	      this.port = defaults.port;
    	      this.portX = defaults.portX;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
        }

        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder modes(List<String> modes) {
            this.modes = Objects.requireNonNull(modes);
            return this;
        }
        public Builder modes(String... modes) {
            return modes(List.of(modes));
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder portX(Integer portX) {
            this.portX = Objects.requireNonNull(portX);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder statusDetails(String statusDetails) {
            this.statusDetails = Objects.requireNonNull(statusDetails);
            return this;
        }        public GetMysqlDbSystemsDbSystemEndpoint build() {
            return new GetMysqlDbSystemsDbSystemEndpoint(hostname, ipAddress, modes, port, portX, status, statusDetails);
        }
    }
}
