// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRedirectTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRedirectTargetArgs Empty = new HttpRedirectTargetArgs();

    /**
     * (Updatable) The host portion of the redirect.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return (Updatable) The host portion of the redirect.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * (Updatable) The path component of the target URL (e.g., &#34;/path/to/resource&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying, or request-prefixing. Use of \ is not permitted except to escape a following \, {, or }. An empty value is treated the same as static &#34;/&#34;. A static value must begin with a leading &#34;/&#34;, optionally followed by other path characters. A request-copying value must exactly match &#34;{path}&#34;, and will be replaced with the path component of the request URL (including its initial &#34;/&#34;). A request-prefixing value must start with &#34;/&#34; and end with a non-escaped &#34;{path}&#34;, which will be replaced with the path component of the request URL (including its initial &#34;/&#34;). Only one such replacement token is allowed.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return (Updatable) The path component of the target URL (e.g., &#34;/path/to/resource&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying, or request-prefixing. Use of \ is not permitted except to escape a following \, {, or }. An empty value is treated the same as static &#34;/&#34;. A static value must begin with a leading &#34;/&#34;, optionally followed by other path characters. A request-copying value must exactly match &#34;{path}&#34;, and will be replaced with the path component of the request URL (including its initial &#34;/&#34;). A request-prefixing value must start with &#34;/&#34; and end with a non-escaped &#34;{path}&#34;, which will be replaced with the path component of the request URL (including its initial &#34;/&#34;). Only one such replacement token is allowed.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * (Updatable) Port number of the target destination of the redirect, default to match protocol
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) Port number of the target destination of the redirect, default to match protocol
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Updatable) The protocol used for the target, http or https.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return (Updatable) The protocol used for the target, http or https.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * (Updatable) The query component of the target URL (e.g., &#34;?redirected&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying. Use of \ is not permitted except to escape a following \, {, or }. An empty value results in a redirection target URL with no query component. A static value must begin with a leading &#34;?&#34;, optionally followed by other query characters. A request-copying value must exactly match &#34;{query}&#34;, and will be replaced with the query component of the request URL (including a leading &#34;?&#34; if and only if the request URL includes a query component).
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return (Updatable) The query component of the target URL (e.g., &#34;?redirected&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying. Use of \ is not permitted except to escape a following \, {, or }. An empty value results in a redirection target URL with no query component. A static value must begin with a leading &#34;?&#34;, optionally followed by other query characters. A request-copying value must exactly match &#34;{query}&#34;, and will be replaced with the query component of the request URL (including a leading &#34;?&#34; if and only if the request URL includes a query component).
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    private HttpRedirectTargetArgs() {}

    private HttpRedirectTargetArgs(HttpRedirectTargetArgs $) {
        this.host = $.host;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRedirectTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRedirectTargetArgs $;

        public Builder() {
            $ = new HttpRedirectTargetArgs();
        }

        public Builder(HttpRedirectTargetArgs defaults) {
            $ = new HttpRedirectTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host (Updatable) The host portion of the redirect.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) The host portion of the redirect.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param path (Updatable) The path component of the target URL (e.g., &#34;/path/to/resource&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying, or request-prefixing. Use of \ is not permitted except to escape a following \, {, or }. An empty value is treated the same as static &#34;/&#34;. A static value must begin with a leading &#34;/&#34;, optionally followed by other path characters. A request-copying value must exactly match &#34;{path}&#34;, and will be replaced with the path component of the request URL (including its initial &#34;/&#34;). A request-prefixing value must start with &#34;/&#34; and end with a non-escaped &#34;{path}&#34;, which will be replaced with the path component of the request URL (including its initial &#34;/&#34;). Only one such replacement token is allowed.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Updatable) The path component of the target URL (e.g., &#34;/path/to/resource&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying, or request-prefixing. Use of \ is not permitted except to escape a following \, {, or }. An empty value is treated the same as static &#34;/&#34;. A static value must begin with a leading &#34;/&#34;, optionally followed by other path characters. A request-copying value must exactly match &#34;{path}&#34;, and will be replaced with the path component of the request URL (including its initial &#34;/&#34;). A request-prefixing value must start with &#34;/&#34; and end with a non-escaped &#34;{path}&#34;, which will be replaced with the path component of the request URL (including its initial &#34;/&#34;). Only one such replacement token is allowed.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port (Updatable) Port number of the target destination of the redirect, default to match protocol
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) Port number of the target destination of the redirect, default to match protocol
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol (Updatable) The protocol used for the target, http or https.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) The protocol used for the target, http or https.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param query (Updatable) The query component of the target URL (e.g., &#34;?redirected&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying. Use of \ is not permitted except to escape a following \, {, or }. An empty value results in a redirection target URL with no query component. A static value must begin with a leading &#34;?&#34;, optionally followed by other query characters. A request-copying value must exactly match &#34;{query}&#34;, and will be replaced with the query component of the request URL (including a leading &#34;?&#34; if and only if the request URL includes a query component).
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query (Updatable) The query component of the target URL (e.g., &#34;?redirected&#34; in &#34;https://target.example.com/path/to/resource?redirected&#34;), which can be empty, static, or request-copying. Use of \ is not permitted except to escape a following \, {, or }. An empty value results in a redirection target URL with no query component. A static value must begin with a leading &#34;?&#34;, optionally followed by other query characters. A request-copying value must exactly match &#34;{query}&#34;, and will be replaced with the query component of the request URL (including a leading &#34;?&#34; if and only if the request URL includes a query component).
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public HttpRedirectTargetArgs build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            return $;
        }
    }

}
