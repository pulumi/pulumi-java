// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ObjectStorage.inputs.GetBucketSummariesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBucketSummariesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketSummariesArgs Empty = new GetBucketSummariesArgs();

    /**
     * The ID of the compartment in which to list buckets.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list buckets.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetBucketSummariesFilterArgs>> filters;

    public Optional<Output<List<GetBucketSummariesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The Object Storage namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Object Storage namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    private GetBucketSummariesArgs() {}

    private GetBucketSummariesArgs(GetBucketSummariesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBucketSummariesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBucketSummariesArgs $;

        public Builder() {
            $ = new GetBucketSummariesArgs();
        }

        public Builder(GetBucketSummariesArgs defaults) {
            $ = new GetBucketSummariesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list buckets.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list buckets.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetBucketSummariesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetBucketSummariesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetBucketSummariesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param namespace The Object Storage namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Object Storage namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public GetBucketSummariesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
