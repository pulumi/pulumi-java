// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.UsageProxy;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.UsageProxy.inputs.SubscriptionRedeemableUserItemArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionRedeemableUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionRedeemableUserArgs Empty = new SubscriptionRedeemableUserArgs();

    /**
     * The list of email IDs to be added to the list of users that can redeem rewards.
     * 
     */
    @Import(name="items", required=true)
    private Output<List<SubscriptionRedeemableUserItemArgs>> items;

    /**
     * @return The list of email IDs to be added to the list of users that can redeem rewards.
     * 
     */
    public Output<List<SubscriptionRedeemableUserItemArgs>> items() {
        return this.items;
    }

    /**
     * The subscription ID for which rewards information is requested for.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return The subscription ID for which rewards information is requested for.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * The OCID of the tenancy.
     * 
     */
    @Import(name="tenancyId", required=true)
    private Output<String> tenancyId;

    /**
     * @return The OCID of the tenancy.
     * 
     */
    public Output<String> tenancyId() {
        return this.tenancyId;
    }

    /**
     * The user ID of the person to send a copy of an email.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The user ID of the person to send a copy of an email.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private SubscriptionRedeemableUserArgs() {}

    private SubscriptionRedeemableUserArgs(SubscriptionRedeemableUserArgs $) {
        this.items = $.items;
        this.subscriptionId = $.subscriptionId;
        this.tenancyId = $.tenancyId;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionRedeemableUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionRedeemableUserArgs $;

        public Builder() {
            $ = new SubscriptionRedeemableUserArgs();
        }

        public Builder(SubscriptionRedeemableUserArgs defaults) {
            $ = new SubscriptionRedeemableUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param items The list of email IDs to be added to the list of users that can redeem rewards.
         * 
         * @return builder
         * 
         */
        public Builder items(Output<List<SubscriptionRedeemableUserItemArgs>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items The list of email IDs to be added to the list of users that can redeem rewards.
         * 
         * @return builder
         * 
         */
        public Builder items(List<SubscriptionRedeemableUserItemArgs> items) {
            return items(Output.of(items));
        }

        /**
         * @param items The list of email IDs to be added to the list of users that can redeem rewards.
         * 
         * @return builder
         * 
         */
        public Builder items(SubscriptionRedeemableUserItemArgs... items) {
            return items(List.of(items));
        }

        /**
         * @param subscriptionId The subscription ID for which rewards information is requested for.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The subscription ID for which rewards information is requested for.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tenancyId The OCID of the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(Output<String> tenancyId) {
            $.tenancyId = tenancyId;
            return this;
        }

        /**
         * @param tenancyId The OCID of the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(String tenancyId) {
            return tenancyId(Output.of(tenancyId));
        }

        /**
         * @param userId The user ID of the person to send a copy of an email.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user ID of the person to send a copy of an email.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public SubscriptionRedeemableUserArgs build() {
            $.items = Objects.requireNonNull($.items, "expected parameter 'items' to be non-null");
            $.subscriptionId = Objects.requireNonNull($.subscriptionId, "expected parameter 'subscriptionId' to be non-null");
            $.tenancyId = Objects.requireNonNull($.tenancyId, "expected parameter 'tenancyId' to be non-null");
            return $;
        }
    }

}
