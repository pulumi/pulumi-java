// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseRegistrationResult {
    /**
     * @return Credential store alias.
     * 
     */
    private final String aliasName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    private final String compartmentId;
    /**
     * @return Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
     * 
     */
    private final String connectionString;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
     * 
     */
    private final String databaseId;
    private final String databaseRegistrationId;
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Metadata about this specific object.
     * 
     */
    private final String description;
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    private final String displayName;
    /**
     * @return A three-label Fully Qualified Domain Name (FQDN) for a resource.
     * 
     */
    private final String fqdn;
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
     * 
     */
    private final String id;
    /**
     * @return The private IP address in the customer&#39;s VCN of the customer&#39;s endpoint, typically a database.
     * 
     */
    private final String ipAddress;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer &#34;Master&#34; key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
     * 
     */
    private final String keyId;
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    private final String lifecycleDetails;
    private final String password;
    /**
     * @return A Private Endpoint IP Address created in the customer&#39;s subnet.  A customer database can expect network traffic initiated by GGS from this IP address and send network traffic to this IP address, typically in response to requests from GGS (OGG).  The customer may utilize this IP address in Security Lists or Network Security Groups (NSG) as needed.
     * 
     */
    private final String rcePrivateIp;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
     * 
     */
    private final String secretCompartmentId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer GGS Secret being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Secret
     * 
     */
    private final String secretId;
    /**
     * @return The mode of the database connection session to be established by the data client. REDIRECT - for a RAC database, DIRECT - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    private final String sessionMode;
    /**
     * @return Possible lifecycle states.
     * 
     */
    private final String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
     * 
     */
    private final String subnetId;
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private final String timeUpdated;
    /**
     * @return The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
     * 
     */
    private final String username;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
     * 
     */
    private final String vaultId;
    private final String wallet;

    @CustomType.Constructor
    private GetDatabaseRegistrationResult(
        @CustomType.Parameter("aliasName") String aliasName,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("databaseId") String databaseId,
        @CustomType.Parameter("databaseRegistrationId") String databaseRegistrationId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("fqdn") String fqdn,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipAddress") String ipAddress,
        @CustomType.Parameter("keyId") String keyId,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("password") String password,
        @CustomType.Parameter("rcePrivateIp") String rcePrivateIp,
        @CustomType.Parameter("secretCompartmentId") String secretCompartmentId,
        @CustomType.Parameter("secretId") String secretId,
        @CustomType.Parameter("sessionMode") String sessionMode,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("username") String username,
        @CustomType.Parameter("vaultId") String vaultId,
        @CustomType.Parameter("wallet") String wallet) {
        this.aliasName = aliasName;
        this.compartmentId = compartmentId;
        this.connectionString = connectionString;
        this.databaseId = databaseId;
        this.databaseRegistrationId = databaseRegistrationId;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.fqdn = fqdn;
        this.freeformTags = freeformTags;
        this.id = id;
        this.ipAddress = ipAddress;
        this.keyId = keyId;
        this.lifecycleDetails = lifecycleDetails;
        this.password = password;
        this.rcePrivateIp = rcePrivateIp;
        this.secretCompartmentId = secretCompartmentId;
        this.secretId = secretId;
        this.sessionMode = sessionMode;
        this.state = state;
        this.subnetId = subnetId;
        this.systemTags = systemTags;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
        this.username = username;
        this.vaultId = vaultId;
        this.wallet = wallet;
    }

    /**
     * @return Credential store alias.
     * 
     */
    public String aliasName() {
        return this.aliasName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    public String databaseRegistrationId() {
        return this.databaseRegistrationId;
    }
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Metadata about this specific object.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A three-label Fully Qualified Domain Name (FQDN) for a resource.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The private IP address in the customer&#39;s VCN of the customer&#39;s endpoint, typically a database.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer &#34;Master&#34; key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String password() {
        return this.password;
    }
    /**
     * @return A Private Endpoint IP Address created in the customer&#39;s subnet.  A customer database can expect network traffic initiated by GGS from this IP address and send network traffic to this IP address, typically in response to requests from GGS (OGG).  The customer may utilize this IP address in Security Lists or Network Security Groups (NSG) as needed.
     * 
     */
    public String rcePrivateIp() {
        return this.rcePrivateIp;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
     * 
     */
    public String secretCompartmentId() {
        return this.secretCompartmentId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer GGS Secret being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Secret
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return The mode of the database connection session to be established by the data client. REDIRECT - for a RAC database, DIRECT - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    public String sessionMode() {
        return this.sessionMode;
    }
    /**
     * @return Possible lifecycle states.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }
    public String wallet() {
        return this.wallet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseRegistrationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String aliasName;
        private String compartmentId;
        private String connectionString;
        private String databaseId;
        private String databaseRegistrationId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private String fqdn;
        private Map<String,Object> freeformTags;
        private String id;
        private String ipAddress;
        private String keyId;
        private String lifecycleDetails;
        private String password;
        private String rcePrivateIp;
        private String secretCompartmentId;
        private String secretId;
        private String sessionMode;
        private String state;
        private String subnetId;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String username;
        private String vaultId;
        private String wallet;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseRegistrationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliasName = defaults.aliasName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseRegistrationId = defaults.databaseRegistrationId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.fqdn = defaults.fqdn;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.keyId = defaults.keyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.password = defaults.password;
    	      this.rcePrivateIp = defaults.rcePrivateIp;
    	      this.secretCompartmentId = defaults.secretCompartmentId;
    	      this.secretId = defaults.secretId;
    	      this.sessionMode = defaults.sessionMode;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.username = defaults.username;
    	      this.vaultId = defaults.vaultId;
    	      this.wallet = defaults.wallet;
        }

        public Builder aliasName(String aliasName) {
            this.aliasName = Objects.requireNonNull(aliasName);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder databaseRegistrationId(String databaseRegistrationId) {
            this.databaseRegistrationId = Objects.requireNonNull(databaseRegistrationId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder fqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder rcePrivateIp(String rcePrivateIp) {
            this.rcePrivateIp = Objects.requireNonNull(rcePrivateIp);
            return this;
        }
        public Builder secretCompartmentId(String secretCompartmentId) {
            this.secretCompartmentId = Objects.requireNonNull(secretCompartmentId);
            return this;
        }
        public Builder secretId(String secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }
        public Builder sessionMode(String sessionMode) {
            this.sessionMode = Objects.requireNonNull(sessionMode);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        public Builder wallet(String wallet) {
            this.wallet = Objects.requireNonNull(wallet);
            return this;
        }        public GetDatabaseRegistrationResult build() {
            return new GetDatabaseRegistrationResult(aliasName, compartmentId, connectionString, databaseId, databaseRegistrationId, definedTags, description, displayName, fqdn, freeformTags, id, ipAddress, keyId, lifecycleDetails, password, rcePrivateIp, secretCompartmentId, secretId, sessionMode, state, subnetId, systemTags, timeCreated, timeUpdated, username, vaultId, wallet);
        }
    }
}
