// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Limits.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Limits.inputs.GetLimitValuesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLimitValuesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLimitValuesPlainArgs Empty = new GetLimitValuesPlainArgs();

    /**
     * Filter entries by availability domain. This implies that only AD-specific values are returned.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable String availabilityDomain;

    /**
     * @return Filter entries by availability domain. This implies that only AD-specific values are returned.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetLimitValuesFilter> filters;

    public Optional<List<GetLimitValuesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Optional field, can be used to see a specific resource limit value.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Optional field, can be used to see a specific resource limit value.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Filter entries by scope type.
     * 
     */
    @Import(name="scopeType")
    private @Nullable String scopeType;

    /**
     * @return Filter entries by scope type.
     * 
     */
    public Optional<String> scopeType() {
        return Optional.ofNullable(this.scopeType);
    }

    /**
     * The target service name.
     * 
     */
    @Import(name="serviceName", required=true)
    private String serviceName;

    /**
     * @return The target service name.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }

    private GetLimitValuesPlainArgs() {}

    private GetLimitValuesPlainArgs(GetLimitValuesPlainArgs $) {
        this.availabilityDomain = $.availabilityDomain;
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.name = $.name;
        this.scopeType = $.scopeType;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLimitValuesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLimitValuesPlainArgs $;

        public Builder() {
            $ = new GetLimitValuesPlainArgs();
        }

        public Builder(GetLimitValuesPlainArgs defaults) {
            $ = new GetLimitValuesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityDomain Filter entries by availability domain. This implies that only AD-specific values are returned.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param compartmentId The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetLimitValuesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetLimitValuesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name Optional field, can be used to see a specific resource limit value.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param scopeType Filter entries by scope type.
         * 
         * @return builder
         * 
         */
        public Builder scopeType(@Nullable String scopeType) {
            $.scopeType = scopeType;
            return this;
        }

        /**
         * @param serviceName The target service name.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public GetLimitValuesPlainArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
