// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDeployStagesDeployStageCollectionItemRolloutPolicy {
    /**
     * @return The number that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    private final Integer batchCount;
    /**
     * @return The duration of delay between batch rollout. The default delay is 1 minute.
     * 
     */
    private final Integer batchDelayInSeconds;
    /**
     * @return The percentage that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    private final Integer batchPercentage;
    /**
     * @return The type of policy used for rolling out a deployment stage.
     * 
     */
    private final String policyType;
    /**
     * @return Indicates the criteria to stop.
     * 
     */
    private final Double rampLimitPercent;

    @CustomType.Constructor
    private GetDeployStagesDeployStageCollectionItemRolloutPolicy(
        @CustomType.Parameter("batchCount") Integer batchCount,
        @CustomType.Parameter("batchDelayInSeconds") Integer batchDelayInSeconds,
        @CustomType.Parameter("batchPercentage") Integer batchPercentage,
        @CustomType.Parameter("policyType") String policyType,
        @CustomType.Parameter("rampLimitPercent") Double rampLimitPercent) {
        this.batchCount = batchCount;
        this.batchDelayInSeconds = batchDelayInSeconds;
        this.batchPercentage = batchPercentage;
        this.policyType = policyType;
        this.rampLimitPercent = rampLimitPercent;
    }

    /**
     * @return The number that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    public Integer batchCount() {
        return this.batchCount;
    }
    /**
     * @return The duration of delay between batch rollout. The default delay is 1 minute.
     * 
     */
    public Integer batchDelayInSeconds() {
        return this.batchDelayInSeconds;
    }
    /**
     * @return The percentage that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    public Integer batchPercentage() {
        return this.batchPercentage;
    }
    /**
     * @return The type of policy used for rolling out a deployment stage.
     * 
     */
    public String policyType() {
        return this.policyType;
    }
    /**
     * @return Indicates the criteria to stop.
     * 
     */
    public Double rampLimitPercent() {
        return this.rampLimitPercent;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeployStagesDeployStageCollectionItemRolloutPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer batchCount;
        private Integer batchDelayInSeconds;
        private Integer batchPercentage;
        private String policyType;
        private Double rampLimitPercent;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDeployStagesDeployStageCollectionItemRolloutPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchCount = defaults.batchCount;
    	      this.batchDelayInSeconds = defaults.batchDelayInSeconds;
    	      this.batchPercentage = defaults.batchPercentage;
    	      this.policyType = defaults.policyType;
    	      this.rampLimitPercent = defaults.rampLimitPercent;
        }

        public Builder batchCount(Integer batchCount) {
            this.batchCount = Objects.requireNonNull(batchCount);
            return this;
        }
        public Builder batchDelayInSeconds(Integer batchDelayInSeconds) {
            this.batchDelayInSeconds = Objects.requireNonNull(batchDelayInSeconds);
            return this;
        }
        public Builder batchPercentage(Integer batchPercentage) {
            this.batchPercentage = Objects.requireNonNull(batchPercentage);
            return this;
        }
        public Builder policyType(String policyType) {
            this.policyType = Objects.requireNonNull(policyType);
            return this;
        }
        public Builder rampLimitPercent(Double rampLimitPercent) {
            this.rampLimitPercent = Objects.requireNonNull(rampLimitPercent);
            return this;
        }        public GetDeployStagesDeployStageCollectionItemRolloutPolicy build() {
            return new GetDeployStagesDeployStageCollectionItemRolloutPolicy(batchCount, batchDelayInSeconds, batchPercentage, policyType, rampLimitPercent);
        }
    }
}
