// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceScheduledTaskActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceScheduledTaskActionArgs Empty = new NamespaceScheduledTaskActionArgs();

    /**
     * if true, purge child compartments data
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return if true, purge child compartments data
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * the type of the log data to be purged
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return the type of the log data to be purged
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * the compartment OCID under which the data will be purged
     * 
     */
    @Import(name="purgeCompartmentId")
    private @Nullable Output<String> purgeCompartmentId;

    /**
     * @return the compartment OCID under which the data will be purged
     * 
     */
    public Optional<Output<String>> purgeCompartmentId() {
        return Optional.ofNullable(this.purgeCompartmentId);
    }

    /**
     * The duration of data to be retained, which is used to calculate the timeDataEnded when the task fires. The value should be negative. Purge duration in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. -P365D (not -P1Y) or -P14D (not -P2W).
     * 
     */
    @Import(name="purgeDuration")
    private @Nullable Output<String> purgeDuration;

    /**
     * @return The duration of data to be retained, which is used to calculate the timeDataEnded when the task fires. The value should be negative. Purge duration in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. -P365D (not -P1Y) or -P14D (not -P2W).
     * 
     */
    public Optional<Output<String>> purgeDuration() {
        return Optional.ofNullable(this.purgeDuration);
    }

    /**
     * Purge query string.
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    /**
     * @return Purge query string.
     * 
     */
    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * The ManagementSavedSearch id [OCID] to be accelerated.
     * 
     */
    @Import(name="savedSearchId")
    private @Nullable Output<String> savedSearchId;

    /**
     * @return The ManagementSavedSearch id [OCID] to be accelerated.
     * 
     */
    public Optional<Output<String>> savedSearchId() {
        return Optional.ofNullable(this.savedSearchId);
    }

    /**
     * (Updatable) Schedule type discriminator.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Schedule type discriminator.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NamespaceScheduledTaskActionArgs() {}

    private NamespaceScheduledTaskActionArgs(NamespaceScheduledTaskActionArgs $) {
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.dataType = $.dataType;
        this.purgeCompartmentId = $.purgeCompartmentId;
        this.purgeDuration = $.purgeDuration;
        this.queryString = $.queryString;
        this.savedSearchId = $.savedSearchId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceScheduledTaskActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceScheduledTaskActionArgs $;

        public Builder() {
            $ = new NamespaceScheduledTaskActionArgs();
        }

        public Builder(NamespaceScheduledTaskActionArgs defaults) {
            $ = new NamespaceScheduledTaskActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentIdInSubtree if true, purge child compartments data
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree if true, purge child compartments data
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param dataType the type of the log data to be purged
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType the type of the log data to be purged
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param purgeCompartmentId the compartment OCID under which the data will be purged
         * 
         * @return builder
         * 
         */
        public Builder purgeCompartmentId(@Nullable Output<String> purgeCompartmentId) {
            $.purgeCompartmentId = purgeCompartmentId;
            return this;
        }

        /**
         * @param purgeCompartmentId the compartment OCID under which the data will be purged
         * 
         * @return builder
         * 
         */
        public Builder purgeCompartmentId(String purgeCompartmentId) {
            return purgeCompartmentId(Output.of(purgeCompartmentId));
        }

        /**
         * @param purgeDuration The duration of data to be retained, which is used to calculate the timeDataEnded when the task fires. The value should be negative. Purge duration in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. -P365D (not -P1Y) or -P14D (not -P2W).
         * 
         * @return builder
         * 
         */
        public Builder purgeDuration(@Nullable Output<String> purgeDuration) {
            $.purgeDuration = purgeDuration;
            return this;
        }

        /**
         * @param purgeDuration The duration of data to be retained, which is used to calculate the timeDataEnded when the task fires. The value should be negative. Purge duration in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. -P365D (not -P1Y) or -P14D (not -P2W).
         * 
         * @return builder
         * 
         */
        public Builder purgeDuration(String purgeDuration) {
            return purgeDuration(Output.of(purgeDuration));
        }

        /**
         * @param queryString Purge query string.
         * 
         * @return builder
         * 
         */
        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString Purge query string.
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param savedSearchId The ManagementSavedSearch id [OCID] to be accelerated.
         * 
         * @return builder
         * 
         */
        public Builder savedSearchId(@Nullable Output<String> savedSearchId) {
            $.savedSearchId = savedSearchId;
            return this;
        }

        /**
         * @param savedSearchId The ManagementSavedSearch id [OCID] to be accelerated.
         * 
         * @return builder
         * 
         */
        public Builder savedSearchId(String savedSearchId) {
            return savedSearchId(Output.of(savedSearchId));
        }

        /**
         * @param type (Updatable) Schedule type discriminator.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Schedule type discriminator.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NamespaceScheduledTaskActionArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
