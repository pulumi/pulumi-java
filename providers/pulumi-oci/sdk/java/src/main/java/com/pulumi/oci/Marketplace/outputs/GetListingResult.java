// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Marketplace.outputs.GetListingBanner;
import com.pulumi.oci.Marketplace.outputs.GetListingDocumentationLink;
import com.pulumi.oci.Marketplace.outputs.GetListingIcon;
import com.pulumi.oci.Marketplace.outputs.GetListingLanguage;
import com.pulumi.oci.Marketplace.outputs.GetListingLink;
import com.pulumi.oci.Marketplace.outputs.GetListingPublisher;
import com.pulumi.oci.Marketplace.outputs.GetListingRegion;
import com.pulumi.oci.Marketplace.outputs.GetListingScreenshot;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportContact;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportLink;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportedOperatingSystem;
import com.pulumi.oci.Marketplace.outputs.GetListingVideo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetListingResult {
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private final List<GetListingBanner> banners;
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    private final List<String> categories;
    private final @Nullable String compartmentId;
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    private final List<String> compatibleArchitectures;
    /**
     * @return The default package version.
     * 
     */
    private final String defaultPackageVersion;
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    private final List<GetListingDocumentationLink> documentationLinks;
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private final List<GetListingIcon> icons;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    private final Boolean isFeatured;
    /**
     * @return Keywords associated with the listing.
     * 
     */
    private final String keywords;
    /**
     * @return Languages supported by the listing.
     * 
     */
    private final List<GetListingLanguage> languages;
    /**
     * @return A description of the publisher&#39;s licensing model for the listing.
     * 
     */
    private final String licenseModelDescription;
    /**
     * @return Reference links.
     * 
     */
    private final List<GetListingLink> links;
    private final String listingId;
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    private final String listingType;
    /**
     * @return A long description of the listing.
     * 
     */
    private final String longDescription;
    /**
     * @return Text that describes the resource.
     * 
     */
    private final String name;
    /**
     * @return The listing&#39;s package type.
     * 
     */
    private final String packageType;
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    private final List<GetListingPublisher> publishers;
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    private final List<GetListingRegion> regions;
    /**
     * @return Release notes for the listing.
     * 
     */
    private final String releaseNotes;
    /**
     * @return Screenshots of the listing.
     * 
     */
    private final List<GetListingScreenshot> screenshots;
    /**
     * @return A short description of the listing.
     * 
     */
    private final String shortDescription;
    /**
     * @return Contact information to use to get support from the publisher for the listing.
     * 
     */
    private final List<GetListingSupportContact> supportContacts;
    /**
     * @return Links to support resources for the listing.
     * 
     */
    private final List<GetListingSupportLink> supportLinks;
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    private final List<GetListingSupportedOperatingSystem> supportedOperatingSystems;
    /**
     * @return System requirements for the listing.
     * 
     */
    private final String systemRequirements;
    /**
     * @return The tagline of the listing.
     * 
     */
    private final String tagline;
    /**
     * @return The release date of the listing.
     * 
     */
    private final String timeReleased;
    /**
     * @return Usage information for the listing.
     * 
     */
    private final String usageInformation;
    /**
     * @return The version of the listing.
     * 
     */
    private final String version;
    /**
     * @return Videos of the listing.
     * 
     */
    private final List<GetListingVideo> videos;

    @CustomType.Constructor
    private GetListingResult(
        @CustomType.Parameter("banners") List<GetListingBanner> banners,
        @CustomType.Parameter("categories") List<String> categories,
        @CustomType.Parameter("compartmentId") @Nullable String compartmentId,
        @CustomType.Parameter("compatibleArchitectures") List<String> compatibleArchitectures,
        @CustomType.Parameter("defaultPackageVersion") String defaultPackageVersion,
        @CustomType.Parameter("documentationLinks") List<GetListingDocumentationLink> documentationLinks,
        @CustomType.Parameter("icons") List<GetListingIcon> icons,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isFeatured") Boolean isFeatured,
        @CustomType.Parameter("keywords") String keywords,
        @CustomType.Parameter("languages") List<GetListingLanguage> languages,
        @CustomType.Parameter("licenseModelDescription") String licenseModelDescription,
        @CustomType.Parameter("links") List<GetListingLink> links,
        @CustomType.Parameter("listingId") String listingId,
        @CustomType.Parameter("listingType") String listingType,
        @CustomType.Parameter("longDescription") String longDescription,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("packageType") String packageType,
        @CustomType.Parameter("publishers") List<GetListingPublisher> publishers,
        @CustomType.Parameter("regions") List<GetListingRegion> regions,
        @CustomType.Parameter("releaseNotes") String releaseNotes,
        @CustomType.Parameter("screenshots") List<GetListingScreenshot> screenshots,
        @CustomType.Parameter("shortDescription") String shortDescription,
        @CustomType.Parameter("supportContacts") List<GetListingSupportContact> supportContacts,
        @CustomType.Parameter("supportLinks") List<GetListingSupportLink> supportLinks,
        @CustomType.Parameter("supportedOperatingSystems") List<GetListingSupportedOperatingSystem> supportedOperatingSystems,
        @CustomType.Parameter("systemRequirements") String systemRequirements,
        @CustomType.Parameter("tagline") String tagline,
        @CustomType.Parameter("timeReleased") String timeReleased,
        @CustomType.Parameter("usageInformation") String usageInformation,
        @CustomType.Parameter("version") String version,
        @CustomType.Parameter("videos") List<GetListingVideo> videos) {
        this.banners = banners;
        this.categories = categories;
        this.compartmentId = compartmentId;
        this.compatibleArchitectures = compatibleArchitectures;
        this.defaultPackageVersion = defaultPackageVersion;
        this.documentationLinks = documentationLinks;
        this.icons = icons;
        this.id = id;
        this.isFeatured = isFeatured;
        this.keywords = keywords;
        this.languages = languages;
        this.licenseModelDescription = licenseModelDescription;
        this.links = links;
        this.listingId = listingId;
        this.listingType = listingType;
        this.longDescription = longDescription;
        this.name = name;
        this.packageType = packageType;
        this.publishers = publishers;
        this.regions = regions;
        this.releaseNotes = releaseNotes;
        this.screenshots = screenshots;
        this.shortDescription = shortDescription;
        this.supportContacts = supportContacts;
        this.supportLinks = supportLinks;
        this.supportedOperatingSystems = supportedOperatingSystems;
        this.systemRequirements = systemRequirements;
        this.tagline = tagline;
        this.timeReleased = timeReleased;
        this.usageInformation = usageInformation;
        this.version = version;
        this.videos = videos;
    }

    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingBanner> banners() {
        return this.banners;
    }
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    public List<String> compatibleArchitectures() {
        return this.compatibleArchitectures;
    }
    /**
     * @return The default package version.
     * 
     */
    public String defaultPackageVersion() {
        return this.defaultPackageVersion;
    }
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    public List<GetListingDocumentationLink> documentationLinks() {
        return this.documentationLinks;
    }
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingIcon> icons() {
        return this.icons;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    public Boolean isFeatured() {
        return this.isFeatured;
    }
    /**
     * @return Keywords associated with the listing.
     * 
     */
    public String keywords() {
        return this.keywords;
    }
    /**
     * @return Languages supported by the listing.
     * 
     */
    public List<GetListingLanguage> languages() {
        return this.languages;
    }
    /**
     * @return A description of the publisher&#39;s licensing model for the listing.
     * 
     */
    public String licenseModelDescription() {
        return this.licenseModelDescription;
    }
    /**
     * @return Reference links.
     * 
     */
    public List<GetListingLink> links() {
        return this.links;
    }
    public String listingId() {
        return this.listingId;
    }
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    public String listingType() {
        return this.listingType;
    }
    /**
     * @return A long description of the listing.
     * 
     */
    public String longDescription() {
        return this.longDescription;
    }
    /**
     * @return Text that describes the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The listing&#39;s package type.
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    public List<GetListingPublisher> publishers() {
        return this.publishers;
    }
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    public List<GetListingRegion> regions() {
        return this.regions;
    }
    /**
     * @return Release notes for the listing.
     * 
     */
    public String releaseNotes() {
        return this.releaseNotes;
    }
    /**
     * @return Screenshots of the listing.
     * 
     */
    public List<GetListingScreenshot> screenshots() {
        return this.screenshots;
    }
    /**
     * @return A short description of the listing.
     * 
     */
    public String shortDescription() {
        return this.shortDescription;
    }
    /**
     * @return Contact information to use to get support from the publisher for the listing.
     * 
     */
    public List<GetListingSupportContact> supportContacts() {
        return this.supportContacts;
    }
    /**
     * @return Links to support resources for the listing.
     * 
     */
    public List<GetListingSupportLink> supportLinks() {
        return this.supportLinks;
    }
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    public List<GetListingSupportedOperatingSystem> supportedOperatingSystems() {
        return this.supportedOperatingSystems;
    }
    /**
     * @return System requirements for the listing.
     * 
     */
    public String systemRequirements() {
        return this.systemRequirements;
    }
    /**
     * @return The tagline of the listing.
     * 
     */
    public String tagline() {
        return this.tagline;
    }
    /**
     * @return The release date of the listing.
     * 
     */
    public String timeReleased() {
        return this.timeReleased;
    }
    /**
     * @return Usage information for the listing.
     * 
     */
    public String usageInformation() {
        return this.usageInformation;
    }
    /**
     * @return The version of the listing.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Videos of the listing.
     * 
     */
    public List<GetListingVideo> videos() {
        return this.videos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetListingBanner> banners;
        private List<String> categories;
        private @Nullable String compartmentId;
        private List<String> compatibleArchitectures;
        private String defaultPackageVersion;
        private List<GetListingDocumentationLink> documentationLinks;
        private List<GetListingIcon> icons;
        private String id;
        private Boolean isFeatured;
        private String keywords;
        private List<GetListingLanguage> languages;
        private String licenseModelDescription;
        private List<GetListingLink> links;
        private String listingId;
        private String listingType;
        private String longDescription;
        private String name;
        private String packageType;
        private List<GetListingPublisher> publishers;
        private List<GetListingRegion> regions;
        private String releaseNotes;
        private List<GetListingScreenshot> screenshots;
        private String shortDescription;
        private List<GetListingSupportContact> supportContacts;
        private List<GetListingSupportLink> supportLinks;
        private List<GetListingSupportedOperatingSystem> supportedOperatingSystems;
        private String systemRequirements;
        private String tagline;
        private String timeReleased;
        private String usageInformation;
        private String version;
        private List<GetListingVideo> videos;

        public Builder() {
    	      // Empty
        }

        public Builder(GetListingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banners = defaults.banners;
    	      this.categories = defaults.categories;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compatibleArchitectures = defaults.compatibleArchitectures;
    	      this.defaultPackageVersion = defaults.defaultPackageVersion;
    	      this.documentationLinks = defaults.documentationLinks;
    	      this.icons = defaults.icons;
    	      this.id = defaults.id;
    	      this.isFeatured = defaults.isFeatured;
    	      this.keywords = defaults.keywords;
    	      this.languages = defaults.languages;
    	      this.licenseModelDescription = defaults.licenseModelDescription;
    	      this.links = defaults.links;
    	      this.listingId = defaults.listingId;
    	      this.listingType = defaults.listingType;
    	      this.longDescription = defaults.longDescription;
    	      this.name = defaults.name;
    	      this.packageType = defaults.packageType;
    	      this.publishers = defaults.publishers;
    	      this.regions = defaults.regions;
    	      this.releaseNotes = defaults.releaseNotes;
    	      this.screenshots = defaults.screenshots;
    	      this.shortDescription = defaults.shortDescription;
    	      this.supportContacts = defaults.supportContacts;
    	      this.supportLinks = defaults.supportLinks;
    	      this.supportedOperatingSystems = defaults.supportedOperatingSystems;
    	      this.systemRequirements = defaults.systemRequirements;
    	      this.tagline = defaults.tagline;
    	      this.timeReleased = defaults.timeReleased;
    	      this.usageInformation = defaults.usageInformation;
    	      this.version = defaults.version;
    	      this.videos = defaults.videos;
        }

        public Builder banners(List<GetListingBanner> banners) {
            this.banners = Objects.requireNonNull(banners);
            return this;
        }
        public Builder banners(GetListingBanner... banners) {
            return banners(List.of(banners));
        }
        public Builder categories(List<String> categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        public Builder compatibleArchitectures(List<String> compatibleArchitectures) {
            this.compatibleArchitectures = Objects.requireNonNull(compatibleArchitectures);
            return this;
        }
        public Builder compatibleArchitectures(String... compatibleArchitectures) {
            return compatibleArchitectures(List.of(compatibleArchitectures));
        }
        public Builder defaultPackageVersion(String defaultPackageVersion) {
            this.defaultPackageVersion = Objects.requireNonNull(defaultPackageVersion);
            return this;
        }
        public Builder documentationLinks(List<GetListingDocumentationLink> documentationLinks) {
            this.documentationLinks = Objects.requireNonNull(documentationLinks);
            return this;
        }
        public Builder documentationLinks(GetListingDocumentationLink... documentationLinks) {
            return documentationLinks(List.of(documentationLinks));
        }
        public Builder icons(List<GetListingIcon> icons) {
            this.icons = Objects.requireNonNull(icons);
            return this;
        }
        public Builder icons(GetListingIcon... icons) {
            return icons(List.of(icons));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isFeatured(Boolean isFeatured) {
            this.isFeatured = Objects.requireNonNull(isFeatured);
            return this;
        }
        public Builder keywords(String keywords) {
            this.keywords = Objects.requireNonNull(keywords);
            return this;
        }
        public Builder languages(List<GetListingLanguage> languages) {
            this.languages = Objects.requireNonNull(languages);
            return this;
        }
        public Builder languages(GetListingLanguage... languages) {
            return languages(List.of(languages));
        }
        public Builder licenseModelDescription(String licenseModelDescription) {
            this.licenseModelDescription = Objects.requireNonNull(licenseModelDescription);
            return this;
        }
        public Builder links(List<GetListingLink> links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }
        public Builder links(GetListingLink... links) {
            return links(List.of(links));
        }
        public Builder listingId(String listingId) {
            this.listingId = Objects.requireNonNull(listingId);
            return this;
        }
        public Builder listingType(String listingType) {
            this.listingType = Objects.requireNonNull(listingType);
            return this;
        }
        public Builder longDescription(String longDescription) {
            this.longDescription = Objects.requireNonNull(longDescription);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder packageType(String packageType) {
            this.packageType = Objects.requireNonNull(packageType);
            return this;
        }
        public Builder publishers(List<GetListingPublisher> publishers) {
            this.publishers = Objects.requireNonNull(publishers);
            return this;
        }
        public Builder publishers(GetListingPublisher... publishers) {
            return publishers(List.of(publishers));
        }
        public Builder regions(List<GetListingRegion> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }
        public Builder regions(GetListingRegion... regions) {
            return regions(List.of(regions));
        }
        public Builder releaseNotes(String releaseNotes) {
            this.releaseNotes = Objects.requireNonNull(releaseNotes);
            return this;
        }
        public Builder screenshots(List<GetListingScreenshot> screenshots) {
            this.screenshots = Objects.requireNonNull(screenshots);
            return this;
        }
        public Builder screenshots(GetListingScreenshot... screenshots) {
            return screenshots(List.of(screenshots));
        }
        public Builder shortDescription(String shortDescription) {
            this.shortDescription = Objects.requireNonNull(shortDescription);
            return this;
        }
        public Builder supportContacts(List<GetListingSupportContact> supportContacts) {
            this.supportContacts = Objects.requireNonNull(supportContacts);
            return this;
        }
        public Builder supportContacts(GetListingSupportContact... supportContacts) {
            return supportContacts(List.of(supportContacts));
        }
        public Builder supportLinks(List<GetListingSupportLink> supportLinks) {
            this.supportLinks = Objects.requireNonNull(supportLinks);
            return this;
        }
        public Builder supportLinks(GetListingSupportLink... supportLinks) {
            return supportLinks(List.of(supportLinks));
        }
        public Builder supportedOperatingSystems(List<GetListingSupportedOperatingSystem> supportedOperatingSystems) {
            this.supportedOperatingSystems = Objects.requireNonNull(supportedOperatingSystems);
            return this;
        }
        public Builder supportedOperatingSystems(GetListingSupportedOperatingSystem... supportedOperatingSystems) {
            return supportedOperatingSystems(List.of(supportedOperatingSystems));
        }
        public Builder systemRequirements(String systemRequirements) {
            this.systemRequirements = Objects.requireNonNull(systemRequirements);
            return this;
        }
        public Builder tagline(String tagline) {
            this.tagline = Objects.requireNonNull(tagline);
            return this;
        }
        public Builder timeReleased(String timeReleased) {
            this.timeReleased = Objects.requireNonNull(timeReleased);
            return this;
        }
        public Builder usageInformation(String usageInformation) {
            this.usageInformation = Objects.requireNonNull(usageInformation);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder videos(List<GetListingVideo> videos) {
            this.videos = Objects.requireNonNull(videos);
            return this;
        }
        public Builder videos(GetListingVideo... videos) {
            return videos(List.of(videos));
        }        public GetListingResult build() {
            return new GetListingResult(banners, categories, compartmentId, compatibleArchitectures, defaultPackageVersion, documentationLinks, icons, id, isFeatured, keywords, languages, licenseModelDescription, links, listingId, listingType, longDescription, name, packageType, publishers, regions, releaseNotes, screenshots, shortDescription, supportContacts, supportLinks, supportedOperatingSystems, systemRequirements, tagline, timeReleased, usageInformation, version, videos);
        }
    }
}
