// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseUsersUserCollectionItem {
    /**
     * @return In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
     * 
     */
    private final String allShared;
    /**
     * @return The authentication mechanism for the user.
     * 
     */
    private final String authentication;
    /**
     * @return Indicates whether a given user is common(Y) or local(N).
     * 
     */
    private final String common;
    /**
     * @return The initial resource consumer group for the User.
     * 
     */
    private final String consumerGroup;
    /**
     * @return The default collation for the user schema.
     * 
     */
    private final String defaultCollation;
    /**
     * @return The default tablespace for data.
     * 
     */
    private final String defaultTablespace;
    /**
     * @return Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
     * 
     */
    private final String editionsEnabled;
    /**
     * @return The external name of the user.
     * 
     */
    private final String externalName;
    /**
     * @return In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
     * 
     */
    private final String externalShared;
    /**
     * @return Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
     * 
     */
    private final String implicit;
    /**
     * @return Indicates whether the user definition is inherited from another container (YES) or not (NO).
     * 
     */
    private final String inherited;
    /**
     * @return The default local temporary tablespace for the user.
     * 
     */
    private final String localTempTablespace;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private final String name;
    /**
     * @return Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
     * 
     */
    private final String oracleMaintained;
    /**
     * @return The list of existing versions of the password hashes (also known as &#34;verifiers&#34;) for the account.
     * 
     */
    private final String passwordVersions;
    /**
     * @return The User resource profile name.
     * 
     */
    private final String profile;
    /**
     * @return Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the &#34;connect through&#34; privilege for this account).
     * 
     */
    private final String proxyConnect;
    /**
     * @return The status of the user account.
     * 
     */
    private final String status;
    /**
     * @return The name of the default tablespace for temporary tables or the name of a tablespace group.
     * 
     */
    private final String tempTablespace;
    /**
     * @return The date and time the user was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return The date and time of the expiration of the user account.
     * 
     */
    private final String timeExpiring;
    /**
     * @return The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
     * 
     */
    private final String timeLastLogin;
    /**
     * @return The date the account was locked if account status was LOCKED.
     * 
     */
    private final String timeLocked;
    /**
     * @return The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
     * 
     */
    private final String timePasswordChanged;

    @CustomType.Constructor
    private GetManagedDatabaseUsersUserCollectionItem(
        @CustomType.Parameter("allShared") String allShared,
        @CustomType.Parameter("authentication") String authentication,
        @CustomType.Parameter("common") String common,
        @CustomType.Parameter("consumerGroup") String consumerGroup,
        @CustomType.Parameter("defaultCollation") String defaultCollation,
        @CustomType.Parameter("defaultTablespace") String defaultTablespace,
        @CustomType.Parameter("editionsEnabled") String editionsEnabled,
        @CustomType.Parameter("externalName") String externalName,
        @CustomType.Parameter("externalShared") String externalShared,
        @CustomType.Parameter("implicit") String implicit,
        @CustomType.Parameter("inherited") String inherited,
        @CustomType.Parameter("localTempTablespace") String localTempTablespace,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("oracleMaintained") String oracleMaintained,
        @CustomType.Parameter("passwordVersions") String passwordVersions,
        @CustomType.Parameter("profile") String profile,
        @CustomType.Parameter("proxyConnect") String proxyConnect,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tempTablespace") String tempTablespace,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeExpiring") String timeExpiring,
        @CustomType.Parameter("timeLastLogin") String timeLastLogin,
        @CustomType.Parameter("timeLocked") String timeLocked,
        @CustomType.Parameter("timePasswordChanged") String timePasswordChanged) {
        this.allShared = allShared;
        this.authentication = authentication;
        this.common = common;
        this.consumerGroup = consumerGroup;
        this.defaultCollation = defaultCollation;
        this.defaultTablespace = defaultTablespace;
        this.editionsEnabled = editionsEnabled;
        this.externalName = externalName;
        this.externalShared = externalShared;
        this.implicit = implicit;
        this.inherited = inherited;
        this.localTempTablespace = localTempTablespace;
        this.name = name;
        this.oracleMaintained = oracleMaintained;
        this.passwordVersions = passwordVersions;
        this.profile = profile;
        this.proxyConnect = proxyConnect;
        this.status = status;
        this.tempTablespace = tempTablespace;
        this.timeCreated = timeCreated;
        this.timeExpiring = timeExpiring;
        this.timeLastLogin = timeLastLogin;
        this.timeLocked = timeLocked;
        this.timePasswordChanged = timePasswordChanged;
    }

    /**
     * @return In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
     * 
     */
    public String allShared() {
        return this.allShared;
    }
    /**
     * @return The authentication mechanism for the user.
     * 
     */
    public String authentication() {
        return this.authentication;
    }
    /**
     * @return Indicates whether a given user is common(Y) or local(N).
     * 
     */
    public String common() {
        return this.common;
    }
    /**
     * @return The initial resource consumer group for the User.
     * 
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }
    /**
     * @return The default collation for the user schema.
     * 
     */
    public String defaultCollation() {
        return this.defaultCollation;
    }
    /**
     * @return The default tablespace for data.
     * 
     */
    public String defaultTablespace() {
        return this.defaultTablespace;
    }
    /**
     * @return Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
     * 
     */
    public String editionsEnabled() {
        return this.editionsEnabled;
    }
    /**
     * @return The external name of the user.
     * 
     */
    public String externalName() {
        return this.externalName;
    }
    /**
     * @return In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
     * 
     */
    public String externalShared() {
        return this.externalShared;
    }
    /**
     * @return Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
     * 
     */
    public String implicit() {
        return this.implicit;
    }
    /**
     * @return Indicates whether the user definition is inherited from another container (YES) or not (NO).
     * 
     */
    public String inherited() {
        return this.inherited;
    }
    /**
     * @return The default local temporary tablespace for the user.
     * 
     */
    public String localTempTablespace() {
        return this.localTempTablespace;
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
     * 
     */
    public String oracleMaintained() {
        return this.oracleMaintained;
    }
    /**
     * @return The list of existing versions of the password hashes (also known as &#34;verifiers&#34;) for the account.
     * 
     */
    public String passwordVersions() {
        return this.passwordVersions;
    }
    /**
     * @return The User resource profile name.
     * 
     */
    public String profile() {
        return this.profile;
    }
    /**
     * @return Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the &#34;connect through&#34; privilege for this account).
     * 
     */
    public String proxyConnect() {
        return this.proxyConnect;
    }
    /**
     * @return The status of the user account.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The name of the default tablespace for temporary tables or the name of a tablespace group.
     * 
     */
    public String tempTablespace() {
        return this.tempTablespace;
    }
    /**
     * @return The date and time the user was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time of the expiration of the user account.
     * 
     */
    public String timeExpiring() {
        return this.timeExpiring;
    }
    /**
     * @return The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
     * 
     */
    public String timeLastLogin() {
        return this.timeLastLogin;
    }
    /**
     * @return The date the account was locked if account status was LOCKED.
     * 
     */
    public String timeLocked() {
        return this.timeLocked;
    }
    /**
     * @return The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
     * 
     */
    public String timePasswordChanged() {
        return this.timePasswordChanged;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUsersUserCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String allShared;
        private String authentication;
        private String common;
        private String consumerGroup;
        private String defaultCollation;
        private String defaultTablespace;
        private String editionsEnabled;
        private String externalName;
        private String externalShared;
        private String implicit;
        private String inherited;
        private String localTempTablespace;
        private String name;
        private String oracleMaintained;
        private String passwordVersions;
        private String profile;
        private String proxyConnect;
        private String status;
        private String tempTablespace;
        private String timeCreated;
        private String timeExpiring;
        private String timeLastLogin;
        private String timeLocked;
        private String timePasswordChanged;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseUsersUserCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allShared = defaults.allShared;
    	      this.authentication = defaults.authentication;
    	      this.common = defaults.common;
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.defaultCollation = defaults.defaultCollation;
    	      this.defaultTablespace = defaults.defaultTablespace;
    	      this.editionsEnabled = defaults.editionsEnabled;
    	      this.externalName = defaults.externalName;
    	      this.externalShared = defaults.externalShared;
    	      this.implicit = defaults.implicit;
    	      this.inherited = defaults.inherited;
    	      this.localTempTablespace = defaults.localTempTablespace;
    	      this.name = defaults.name;
    	      this.oracleMaintained = defaults.oracleMaintained;
    	      this.passwordVersions = defaults.passwordVersions;
    	      this.profile = defaults.profile;
    	      this.proxyConnect = defaults.proxyConnect;
    	      this.status = defaults.status;
    	      this.tempTablespace = defaults.tempTablespace;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpiring = defaults.timeExpiring;
    	      this.timeLastLogin = defaults.timeLastLogin;
    	      this.timeLocked = defaults.timeLocked;
    	      this.timePasswordChanged = defaults.timePasswordChanged;
        }

        public Builder allShared(String allShared) {
            this.allShared = Objects.requireNonNull(allShared);
            return this;
        }
        public Builder authentication(String authentication) {
            this.authentication = Objects.requireNonNull(authentication);
            return this;
        }
        public Builder common(String common) {
            this.common = Objects.requireNonNull(common);
            return this;
        }
        public Builder consumerGroup(String consumerGroup) {
            this.consumerGroup = Objects.requireNonNull(consumerGroup);
            return this;
        }
        public Builder defaultCollation(String defaultCollation) {
            this.defaultCollation = Objects.requireNonNull(defaultCollation);
            return this;
        }
        public Builder defaultTablespace(String defaultTablespace) {
            this.defaultTablespace = Objects.requireNonNull(defaultTablespace);
            return this;
        }
        public Builder editionsEnabled(String editionsEnabled) {
            this.editionsEnabled = Objects.requireNonNull(editionsEnabled);
            return this;
        }
        public Builder externalName(String externalName) {
            this.externalName = Objects.requireNonNull(externalName);
            return this;
        }
        public Builder externalShared(String externalShared) {
            this.externalShared = Objects.requireNonNull(externalShared);
            return this;
        }
        public Builder implicit(String implicit) {
            this.implicit = Objects.requireNonNull(implicit);
            return this;
        }
        public Builder inherited(String inherited) {
            this.inherited = Objects.requireNonNull(inherited);
            return this;
        }
        public Builder localTempTablespace(String localTempTablespace) {
            this.localTempTablespace = Objects.requireNonNull(localTempTablespace);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder oracleMaintained(String oracleMaintained) {
            this.oracleMaintained = Objects.requireNonNull(oracleMaintained);
            return this;
        }
        public Builder passwordVersions(String passwordVersions) {
            this.passwordVersions = Objects.requireNonNull(passwordVersions);
            return this;
        }
        public Builder profile(String profile) {
            this.profile = Objects.requireNonNull(profile);
            return this;
        }
        public Builder proxyConnect(String proxyConnect) {
            this.proxyConnect = Objects.requireNonNull(proxyConnect);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tempTablespace(String tempTablespace) {
            this.tempTablespace = Objects.requireNonNull(tempTablespace);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeExpiring(String timeExpiring) {
            this.timeExpiring = Objects.requireNonNull(timeExpiring);
            return this;
        }
        public Builder timeLastLogin(String timeLastLogin) {
            this.timeLastLogin = Objects.requireNonNull(timeLastLogin);
            return this;
        }
        public Builder timeLocked(String timeLocked) {
            this.timeLocked = Objects.requireNonNull(timeLocked);
            return this;
        }
        public Builder timePasswordChanged(String timePasswordChanged) {
            this.timePasswordChanged = Objects.requireNonNull(timePasswordChanged);
            return this;
        }        public GetManagedDatabaseUsersUserCollectionItem build() {
            return new GetManagedDatabaseUsersUserCollectionItem(allShared, authentication, common, consumerGroup, defaultCollation, defaultTablespace, editionsEnabled, externalName, externalShared, implicit, inherited, localTempTablespace, name, oracleMaintained, passwordVersions, profile, proxyConnect, status, tempTablespace, timeCreated, timeExpiring, timeLastLogin, timeLocked, timePasswordChanged);
        }
    }
}
