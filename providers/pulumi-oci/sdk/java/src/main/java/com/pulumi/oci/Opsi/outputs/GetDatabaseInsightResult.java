// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opsi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Opsi.outputs.GetDatabaseInsightConnectionCredentialDetail;
import com.pulumi.oci.Opsi.outputs.GetDatabaseInsightConnectionDetail;
import com.pulumi.oci.Opsi.outputs.GetDatabaseInsightCredentialDetail;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseInsightResult {
    /**
     * @return Compartment identifier of the database
     * 
     */
    private final String compartmentId;
    /**
     * @return User credential details to connect to the database. This is supplied via the External Database Service.
     * 
     */
    private final List<GetDatabaseInsightConnectionCredentialDetail> connectionCredentialDetails;
    /**
     * @return Connection details to connect to the database. HostName, protocol, and port should be specified.
     * 
     */
    private final List<GetDatabaseInsightConnectionDetail> connectionDetails;
    /**
     * @return User credential details to connect to the database.
     * 
     */
    private final List<GetDatabaseInsightCredentialDetail> credentialDetails;
    /**
     * @return A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
     * 
     */
    private final String databaseConnectionStatusDetails;
    /**
     * @return Display name of database
     * 
     */
    private final String databaseDisplayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private final String databaseId;
    private final String databaseInsightId;
    /**
     * @return Name of database
     * 
     */
    private final String databaseName;
    /**
     * @return Oracle Cloud Infrastructure database resource type
     * 
     */
    private final String databaseResourceType;
    /**
     * @return Operations Insights internal representation of the database type.
     * 
     */
    private final String databaseType;
    /**
     * @return The version of the database.
     * 
     */
    private final String databaseVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    private final String deploymentType;
    /**
     * @return OPSI Enterprise Manager Bridge OCID
     * 
     */
    private final String enterpriseManagerBridgeId;
    /**
     * @return Enterprise Manager Entity Display Name
     * 
     */
    private final String enterpriseManagerEntityDisplayName;
    /**
     * @return Enterprise Manager Entity Unique Identifier
     * 
     */
    private final String enterpriseManagerEntityIdentifier;
    /**
     * @return Enterprise Manager Entity Name
     * 
     */
    private final String enterpriseManagerEntityName;
    /**
     * @return Enterprise Manager Entity Type
     * 
     */
    private final String enterpriseManagerEntityType;
    /**
     * @return Enterprise Manager Unqiue Identifier
     * 
     */
    private final String enterpriseManagerIdentifier;
    /**
     * @return Source of the database entity.
     * 
     */
    private final String entitySource;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata insight.
     * 
     */
    private final String exadataInsightId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return Database insight identifier
     * 
     */
    private final String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
     * 
     */
    private final String opsiPrivateEndpointId;
    /**
     * @return Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
     * 
     */
    private final Integer processorCount;
    /**
     * @return Database service name used for connection requests.
     * 
     */
    private final String serviceName;
    /**
     * @return The current state of the database.
     * 
     */
    private final String state;
    /**
     * @return Indicates the status of a database insight in Operations Insights
     * 
     */
    private final String status;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The time the the database insight was first enabled. An RFC3339 formatted datetime string
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the database insight was updated. An RFC3339 formatted datetime string
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetDatabaseInsightResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionCredentialDetails") List<GetDatabaseInsightConnectionCredentialDetail> connectionCredentialDetails,
        @CustomType.Parameter("connectionDetails") List<GetDatabaseInsightConnectionDetail> connectionDetails,
        @CustomType.Parameter("credentialDetails") List<GetDatabaseInsightCredentialDetail> credentialDetails,
        @CustomType.Parameter("databaseConnectionStatusDetails") String databaseConnectionStatusDetails,
        @CustomType.Parameter("databaseDisplayName") String databaseDisplayName,
        @CustomType.Parameter("databaseId") String databaseId,
        @CustomType.Parameter("databaseInsightId") String databaseInsightId,
        @CustomType.Parameter("databaseName") String databaseName,
        @CustomType.Parameter("databaseResourceType") String databaseResourceType,
        @CustomType.Parameter("databaseType") String databaseType,
        @CustomType.Parameter("databaseVersion") String databaseVersion,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("deploymentType") String deploymentType,
        @CustomType.Parameter("enterpriseManagerBridgeId") String enterpriseManagerBridgeId,
        @CustomType.Parameter("enterpriseManagerEntityDisplayName") String enterpriseManagerEntityDisplayName,
        @CustomType.Parameter("enterpriseManagerEntityIdentifier") String enterpriseManagerEntityIdentifier,
        @CustomType.Parameter("enterpriseManagerEntityName") String enterpriseManagerEntityName,
        @CustomType.Parameter("enterpriseManagerEntityType") String enterpriseManagerEntityType,
        @CustomType.Parameter("enterpriseManagerIdentifier") String enterpriseManagerIdentifier,
        @CustomType.Parameter("entitySource") String entitySource,
        @CustomType.Parameter("exadataInsightId") String exadataInsightId,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("opsiPrivateEndpointId") String opsiPrivateEndpointId,
        @CustomType.Parameter("processorCount") Integer processorCount,
        @CustomType.Parameter("serviceName") String serviceName,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.compartmentId = compartmentId;
        this.connectionCredentialDetails = connectionCredentialDetails;
        this.connectionDetails = connectionDetails;
        this.credentialDetails = credentialDetails;
        this.databaseConnectionStatusDetails = databaseConnectionStatusDetails;
        this.databaseDisplayName = databaseDisplayName;
        this.databaseId = databaseId;
        this.databaseInsightId = databaseInsightId;
        this.databaseName = databaseName;
        this.databaseResourceType = databaseResourceType;
        this.databaseType = databaseType;
        this.databaseVersion = databaseVersion;
        this.definedTags = definedTags;
        this.deploymentType = deploymentType;
        this.enterpriseManagerBridgeId = enterpriseManagerBridgeId;
        this.enterpriseManagerEntityDisplayName = enterpriseManagerEntityDisplayName;
        this.enterpriseManagerEntityIdentifier = enterpriseManagerEntityIdentifier;
        this.enterpriseManagerEntityName = enterpriseManagerEntityName;
        this.enterpriseManagerEntityType = enterpriseManagerEntityType;
        this.enterpriseManagerIdentifier = enterpriseManagerIdentifier;
        this.entitySource = entitySource;
        this.exadataInsightId = exadataInsightId;
        this.freeformTags = freeformTags;
        this.id = id;
        this.lifecycleDetails = lifecycleDetails;
        this.opsiPrivateEndpointId = opsiPrivateEndpointId;
        this.processorCount = processorCount;
        this.serviceName = serviceName;
        this.state = state;
        this.status = status;
        this.systemTags = systemTags;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return Compartment identifier of the database
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return User credential details to connect to the database. This is supplied via the External Database Service.
     * 
     */
    public List<GetDatabaseInsightConnectionCredentialDetail> connectionCredentialDetails() {
        return this.connectionCredentialDetails;
    }
    /**
     * @return Connection details to connect to the database. HostName, protocol, and port should be specified.
     * 
     */
    public List<GetDatabaseInsightConnectionDetail> connectionDetails() {
        return this.connectionDetails;
    }
    /**
     * @return User credential details to connect to the database.
     * 
     */
    public List<GetDatabaseInsightCredentialDetail> credentialDetails() {
        return this.credentialDetails;
    }
    /**
     * @return A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
     * 
     */
    public String databaseConnectionStatusDetails() {
        return this.databaseConnectionStatusDetails;
    }
    /**
     * @return Display name of database
     * 
     */
    public String databaseDisplayName() {
        return this.databaseDisplayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    public String databaseInsightId() {
        return this.databaseInsightId;
    }
    /**
     * @return Name of database
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Oracle Cloud Infrastructure database resource type
     * 
     */
    public String databaseResourceType() {
        return this.databaseResourceType;
    }
    /**
     * @return Operations Insights internal representation of the database type.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The version of the database.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return OPSI Enterprise Manager Bridge OCID
     * 
     */
    public String enterpriseManagerBridgeId() {
        return this.enterpriseManagerBridgeId;
    }
    /**
     * @return Enterprise Manager Entity Display Name
     * 
     */
    public String enterpriseManagerEntityDisplayName() {
        return this.enterpriseManagerEntityDisplayName;
    }
    /**
     * @return Enterprise Manager Entity Unique Identifier
     * 
     */
    public String enterpriseManagerEntityIdentifier() {
        return this.enterpriseManagerEntityIdentifier;
    }
    /**
     * @return Enterprise Manager Entity Name
     * 
     */
    public String enterpriseManagerEntityName() {
        return this.enterpriseManagerEntityName;
    }
    /**
     * @return Enterprise Manager Entity Type
     * 
     */
    public String enterpriseManagerEntityType() {
        return this.enterpriseManagerEntityType;
    }
    /**
     * @return Enterprise Manager Unqiue Identifier
     * 
     */
    public String enterpriseManagerIdentifier() {
        return this.enterpriseManagerIdentifier;
    }
    /**
     * @return Source of the database entity.
     * 
     */
    public String entitySource() {
        return this.entitySource;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata insight.
     * 
     */
    public String exadataInsightId() {
        return this.exadataInsightId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Database insight identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
     * 
     */
    public String opsiPrivateEndpointId() {
        return this.opsiPrivateEndpointId;
    }
    /**
     * @return Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
     * 
     */
    public Integer processorCount() {
        return this.processorCount;
    }
    /**
     * @return Database service name used for connection requests.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return The current state of the database.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Indicates the status of a database insight in Operations Insights
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the database insight was first enabled. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the database insight was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInsightResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private List<GetDatabaseInsightConnectionCredentialDetail> connectionCredentialDetails;
        private List<GetDatabaseInsightConnectionDetail> connectionDetails;
        private List<GetDatabaseInsightCredentialDetail> credentialDetails;
        private String databaseConnectionStatusDetails;
        private String databaseDisplayName;
        private String databaseId;
        private String databaseInsightId;
        private String databaseName;
        private String databaseResourceType;
        private String databaseType;
        private String databaseVersion;
        private Map<String,Object> definedTags;
        private String deploymentType;
        private String enterpriseManagerBridgeId;
        private String enterpriseManagerEntityDisplayName;
        private String enterpriseManagerEntityIdentifier;
        private String enterpriseManagerEntityName;
        private String enterpriseManagerEntityType;
        private String enterpriseManagerIdentifier;
        private String entitySource;
        private String exadataInsightId;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String opsiPrivateEndpointId;
        private Integer processorCount;
        private String serviceName;
        private String state;
        private String status;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseInsightResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionCredentialDetails = defaults.connectionCredentialDetails;
    	      this.connectionDetails = defaults.connectionDetails;
    	      this.credentialDetails = defaults.credentialDetails;
    	      this.databaseConnectionStatusDetails = defaults.databaseConnectionStatusDetails;
    	      this.databaseDisplayName = defaults.databaseDisplayName;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseInsightId = defaults.databaseInsightId;
    	      this.databaseName = defaults.databaseName;
    	      this.databaseResourceType = defaults.databaseResourceType;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.deploymentType = defaults.deploymentType;
    	      this.enterpriseManagerBridgeId = defaults.enterpriseManagerBridgeId;
    	      this.enterpriseManagerEntityDisplayName = defaults.enterpriseManagerEntityDisplayName;
    	      this.enterpriseManagerEntityIdentifier = defaults.enterpriseManagerEntityIdentifier;
    	      this.enterpriseManagerEntityName = defaults.enterpriseManagerEntityName;
    	      this.enterpriseManagerEntityType = defaults.enterpriseManagerEntityType;
    	      this.enterpriseManagerIdentifier = defaults.enterpriseManagerIdentifier;
    	      this.entitySource = defaults.entitySource;
    	      this.exadataInsightId = defaults.exadataInsightId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.opsiPrivateEndpointId = defaults.opsiPrivateEndpointId;
    	      this.processorCount = defaults.processorCount;
    	      this.serviceName = defaults.serviceName;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionCredentialDetails(List<GetDatabaseInsightConnectionCredentialDetail> connectionCredentialDetails) {
            this.connectionCredentialDetails = Objects.requireNonNull(connectionCredentialDetails);
            return this;
        }
        public Builder connectionCredentialDetails(GetDatabaseInsightConnectionCredentialDetail... connectionCredentialDetails) {
            return connectionCredentialDetails(List.of(connectionCredentialDetails));
        }
        public Builder connectionDetails(List<GetDatabaseInsightConnectionDetail> connectionDetails) {
            this.connectionDetails = Objects.requireNonNull(connectionDetails);
            return this;
        }
        public Builder connectionDetails(GetDatabaseInsightConnectionDetail... connectionDetails) {
            return connectionDetails(List.of(connectionDetails));
        }
        public Builder credentialDetails(List<GetDatabaseInsightCredentialDetail> credentialDetails) {
            this.credentialDetails = Objects.requireNonNull(credentialDetails);
            return this;
        }
        public Builder credentialDetails(GetDatabaseInsightCredentialDetail... credentialDetails) {
            return credentialDetails(List.of(credentialDetails));
        }
        public Builder databaseConnectionStatusDetails(String databaseConnectionStatusDetails) {
            this.databaseConnectionStatusDetails = Objects.requireNonNull(databaseConnectionStatusDetails);
            return this;
        }
        public Builder databaseDisplayName(String databaseDisplayName) {
            this.databaseDisplayName = Objects.requireNonNull(databaseDisplayName);
            return this;
        }
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder databaseInsightId(String databaseInsightId) {
            this.databaseInsightId = Objects.requireNonNull(databaseInsightId);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseResourceType(String databaseResourceType) {
            this.databaseResourceType = Objects.requireNonNull(databaseResourceType);
            return this;
        }
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        public Builder databaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        public Builder enterpriseManagerBridgeId(String enterpriseManagerBridgeId) {
            this.enterpriseManagerBridgeId = Objects.requireNonNull(enterpriseManagerBridgeId);
            return this;
        }
        public Builder enterpriseManagerEntityDisplayName(String enterpriseManagerEntityDisplayName) {
            this.enterpriseManagerEntityDisplayName = Objects.requireNonNull(enterpriseManagerEntityDisplayName);
            return this;
        }
        public Builder enterpriseManagerEntityIdentifier(String enterpriseManagerEntityIdentifier) {
            this.enterpriseManagerEntityIdentifier = Objects.requireNonNull(enterpriseManagerEntityIdentifier);
            return this;
        }
        public Builder enterpriseManagerEntityName(String enterpriseManagerEntityName) {
            this.enterpriseManagerEntityName = Objects.requireNonNull(enterpriseManagerEntityName);
            return this;
        }
        public Builder enterpriseManagerEntityType(String enterpriseManagerEntityType) {
            this.enterpriseManagerEntityType = Objects.requireNonNull(enterpriseManagerEntityType);
            return this;
        }
        public Builder enterpriseManagerIdentifier(String enterpriseManagerIdentifier) {
            this.enterpriseManagerIdentifier = Objects.requireNonNull(enterpriseManagerIdentifier);
            return this;
        }
        public Builder entitySource(String entitySource) {
            this.entitySource = Objects.requireNonNull(entitySource);
            return this;
        }
        public Builder exadataInsightId(String exadataInsightId) {
            this.exadataInsightId = Objects.requireNonNull(exadataInsightId);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder opsiPrivateEndpointId(String opsiPrivateEndpointId) {
            this.opsiPrivateEndpointId = Objects.requireNonNull(opsiPrivateEndpointId);
            return this;
        }
        public Builder processorCount(Integer processorCount) {
            this.processorCount = Objects.requireNonNull(processorCount);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetDatabaseInsightResult build() {
            return new GetDatabaseInsightResult(compartmentId, connectionCredentialDetails, connectionDetails, credentialDetails, databaseConnectionStatusDetails, databaseDisplayName, databaseId, databaseInsightId, databaseName, databaseResourceType, databaseType, databaseVersion, definedTags, deploymentType, enterpriseManagerBridgeId, enterpriseManagerEntityDisplayName, enterpriseManagerEntityIdentifier, enterpriseManagerEntityName, enterpriseManagerEntityType, enterpriseManagerIdentifier, entitySource, exadataInsightId, freeformTags, id, lifecycleDetails, opsiPrivateEndpointId, processorCount, serviceName, state, status, systemTags, timeCreated, timeUpdated);
        }
    }
}
