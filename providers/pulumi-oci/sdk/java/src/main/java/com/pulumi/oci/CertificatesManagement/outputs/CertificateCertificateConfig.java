// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.CertificateCertificateConfigSubject;
import com.pulumi.oci.CertificatesManagement.outputs.CertificateCertificateConfigSubjectAlternativeName;
import com.pulumi.oci.CertificatesManagement.outputs.CertificateCertificateConfigValidity;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificateCertificateConfig {
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    private final @Nullable String certificateProfileType;
    /**
     * @return (Updatable) The origin of the certificate.
     * 
     */
    private final String configType;
    /**
     * @return (Updatable) The certificate signing request (in PEM format).
     * 
     */
    private final @Nullable String csrPem;
    /**
     * @return The OCID of the private CA.
     * 
     */
    private final @Nullable String issuerCertificateAuthorityId;
    /**
     * @return The algorithm to use to create key pairs.
     * 
     */
    private final @Nullable String keyAlgorithm;
    /**
     * @return The algorithm to use to sign the public key certificate.
     * 
     */
    private final @Nullable String signatureAlgorithm;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private final @Nullable CertificateCertificateConfigSubject subject;
    /**
     * @return A list of subject alternative names.
     * 
     */
    private final @Nullable List<CertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames;
    /**
     * @return (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    private final @Nullable CertificateCertificateConfigValidity validity;
    /**
     * @return (Updatable) A name for the certificate. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    private final @Nullable String versionName;

    @CustomType.Constructor
    private CertificateCertificateConfig(
        @CustomType.Parameter("certificateProfileType") @Nullable String certificateProfileType,
        @CustomType.Parameter("configType") String configType,
        @CustomType.Parameter("csrPem") @Nullable String csrPem,
        @CustomType.Parameter("issuerCertificateAuthorityId") @Nullable String issuerCertificateAuthorityId,
        @CustomType.Parameter("keyAlgorithm") @Nullable String keyAlgorithm,
        @CustomType.Parameter("signatureAlgorithm") @Nullable String signatureAlgorithm,
        @CustomType.Parameter("subject") @Nullable CertificateCertificateConfigSubject subject,
        @CustomType.Parameter("subjectAlternativeNames") @Nullable List<CertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames,
        @CustomType.Parameter("validity") @Nullable CertificateCertificateConfigValidity validity,
        @CustomType.Parameter("versionName") @Nullable String versionName) {
        this.certificateProfileType = certificateProfileType;
        this.configType = configType;
        this.csrPem = csrPem;
        this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
        this.keyAlgorithm = keyAlgorithm;
        this.signatureAlgorithm = signatureAlgorithm;
        this.subject = subject;
        this.subjectAlternativeNames = subjectAlternativeNames;
        this.validity = validity;
        this.versionName = versionName;
    }

    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    public Optional<String> certificateProfileType() {
        return Optional.ofNullable(this.certificateProfileType);
    }
    /**
     * @return (Updatable) The origin of the certificate.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return (Updatable) The certificate signing request (in PEM format).
     * 
     */
    public Optional<String> csrPem() {
        return Optional.ofNullable(this.csrPem);
    }
    /**
     * @return The OCID of the private CA.
     * 
     */
    public Optional<String> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }
    /**
     * @return The algorithm to use to create key pairs.
     * 
     */
    public Optional<String> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }
    /**
     * @return The algorithm to use to sign the public key certificate.
     * 
     */
    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public Optional<CertificateCertificateConfigSubject> subject() {
        return Optional.ofNullable(this.subject);
    }
    /**
     * @return A list of subject alternative names.
     * 
     */
    public List<CertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? List.of() : this.subjectAlternativeNames;
    }
    /**
     * @return (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public Optional<CertificateCertificateConfigValidity> validity() {
        return Optional.ofNullable(this.validity);
    }
    /**
     * @return (Updatable) A name for the certificate. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateCertificateConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String certificateProfileType;
        private String configType;
        private @Nullable String csrPem;
        private @Nullable String issuerCertificateAuthorityId;
        private @Nullable String keyAlgorithm;
        private @Nullable String signatureAlgorithm;
        private @Nullable CertificateCertificateConfigSubject subject;
        private @Nullable List<CertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames;
        private @Nullable CertificateCertificateConfigValidity validity;
        private @Nullable String versionName;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateCertificateConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateProfileType = defaults.certificateProfileType;
    	      this.configType = defaults.configType;
    	      this.csrPem = defaults.csrPem;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.subject = defaults.subject;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.validity = defaults.validity;
    	      this.versionName = defaults.versionName;
        }

        public Builder certificateProfileType(@Nullable String certificateProfileType) {
            this.certificateProfileType = certificateProfileType;
            return this;
        }
        public Builder configType(String configType) {
            this.configType = Objects.requireNonNull(configType);
            return this;
        }
        public Builder csrPem(@Nullable String csrPem) {
            this.csrPem = csrPem;
            return this;
        }
        public Builder issuerCertificateAuthorityId(@Nullable String issuerCertificateAuthorityId) {
            this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }
        public Builder keyAlgorithm(@Nullable String keyAlgorithm) {
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        public Builder subject(@Nullable CertificateCertificateConfigSubject subject) {
            this.subject = subject;
            return this;
        }
        public Builder subjectAlternativeNames(@Nullable List<CertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames) {
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }
        public Builder subjectAlternativeNames(CertificateCertificateConfigSubjectAlternativeName... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        public Builder validity(@Nullable CertificateCertificateConfigValidity validity) {
            this.validity = validity;
            return this;
        }
        public Builder versionName(@Nullable String versionName) {
            this.versionName = versionName;
            return this;
        }        public CertificateCertificateConfig build() {
            return new CertificateCertificateConfig(certificateProfileType, configType, csrPem, issuerCertificateAuthorityId, keyAlgorithm, signatureAlgorithm, subject, subjectAlternativeNames, validity, versionName);
        }
    }
}
