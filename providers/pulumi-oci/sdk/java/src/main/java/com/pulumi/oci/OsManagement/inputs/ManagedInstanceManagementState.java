// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementChildSoftwareSourceArgs;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementManagedInstanceGroupArgs;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementParentSoftwareSourceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceManagementState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceManagementState Empty = new ManagedInstanceManagementState();

    /**
     * (Updatable) list of child Software Sources attached to the Managed Instance
     * 
     */
    @Import(name="childSoftwareSources")
    private @Nullable Output<List<ManagedInstanceManagementChildSoftwareSourceArgs>> childSoftwareSources;

    /**
     * @return (Updatable) list of child Software Sources attached to the Managed Instance
     * 
     */
    public Optional<Output<List<ManagedInstanceManagementChildSoftwareSourceArgs>>> childSoftwareSources() {
        return Optional.ofNullable(this.childSoftwareSources);
    }

    /**
     * OCID for the Compartment
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return OCID for the Compartment
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Information specified by the user about the managed instance
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User friendly name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User friendly name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Time at which the instance last booted
     * 
     */
    @Import(name="lastBoot")
    private @Nullable Output<String> lastBoot;

    /**
     * @return Time at which the instance last booted
     * 
     */
    public Optional<Output<String>> lastBoot() {
        return Optional.ofNullable(this.lastBoot);
    }

    /**
     * Time at which the instance last checked in
     * 
     */
    @Import(name="lastCheckin")
    private @Nullable Output<String> lastCheckin;

    /**
     * @return Time at which the instance last checked in
     * 
     */
    public Optional<Output<String>> lastCheckin() {
        return Optional.ofNullable(this.lastCheckin);
    }

    /**
     * (Updatable) The ids of the managed instance groups of which this instance is a member.
     * 
     */
    @Import(name="managedInstanceGroups")
    private @Nullable Output<List<ManagedInstanceManagementManagedInstanceGroupArgs>> managedInstanceGroups;

    /**
     * @return (Updatable) The ids of the managed instance groups of which this instance is a member.
     * 
     */
    public Optional<Output<List<ManagedInstanceManagementManagedInstanceGroupArgs>>> managedInstanceGroups() {
        return Optional.ofNullable(this.managedInstanceGroups);
    }

    /**
     * OCID for the managed instance
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable Output<String> managedInstanceId;

    /**
     * @return OCID for the managed instance
     * 
     */
    public Optional<Output<String>> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    /**
     * Operating System Kernel Version
     * 
     */
    @Import(name="osKernelVersion")
    private @Nullable Output<String> osKernelVersion;

    /**
     * @return Operating System Kernel Version
     * 
     */
    public Optional<Output<String>> osKernelVersion() {
        return Optional.ofNullable(this.osKernelVersion);
    }

    /**
     * Operating System Name
     * 
     */
    @Import(name="osName")
    private @Nullable Output<String> osName;

    /**
     * @return Operating System Name
     * 
     */
    public Optional<Output<String>> osName() {
        return Optional.ofNullable(this.osName);
    }

    /**
     * Operating System Version
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return Operating System Version
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * (Updatable) the parent (base) Software Source attached to the Managed Instance
     * 
     */
    @Import(name="parentSoftwareSource")
    private @Nullable Output<ManagedInstanceManagementParentSoftwareSourceArgs> parentSoftwareSource;

    /**
     * @return (Updatable) the parent (base) Software Source attached to the Managed Instance
     * 
     */
    public Optional<Output<ManagedInstanceManagementParentSoftwareSourceArgs>> parentSoftwareSource() {
        return Optional.ofNullable(this.parentSoftwareSource);
    }

    /**
     * status of the managed instance.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return status of the managed instance.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Number of updates available to be installed
     * 
     */
    @Import(name="updatesAvailable")
    private @Nullable Output<Integer> updatesAvailable;

    /**
     * @return Number of updates available to be installed
     * 
     */
    public Optional<Output<Integer>> updatesAvailable() {
        return Optional.ofNullable(this.updatesAvailable);
    }

    private ManagedInstanceManagementState() {}

    private ManagedInstanceManagementState(ManagedInstanceManagementState $) {
        this.childSoftwareSources = $.childSoftwareSources;
        this.compartmentId = $.compartmentId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.lastBoot = $.lastBoot;
        this.lastCheckin = $.lastCheckin;
        this.managedInstanceGroups = $.managedInstanceGroups;
        this.managedInstanceId = $.managedInstanceId;
        this.osKernelVersion = $.osKernelVersion;
        this.osName = $.osName;
        this.osVersion = $.osVersion;
        this.parentSoftwareSource = $.parentSoftwareSource;
        this.status = $.status;
        this.updatesAvailable = $.updatesAvailable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceManagementState $;

        public Builder() {
            $ = new ManagedInstanceManagementState();
        }

        public Builder(ManagedInstanceManagementState defaults) {
            $ = new ManagedInstanceManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param childSoftwareSources (Updatable) list of child Software Sources attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder childSoftwareSources(@Nullable Output<List<ManagedInstanceManagementChildSoftwareSourceArgs>> childSoftwareSources) {
            $.childSoftwareSources = childSoftwareSources;
            return this;
        }

        /**
         * @param childSoftwareSources (Updatable) list of child Software Sources attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder childSoftwareSources(List<ManagedInstanceManagementChildSoftwareSourceArgs> childSoftwareSources) {
            return childSoftwareSources(Output.of(childSoftwareSources));
        }

        /**
         * @param childSoftwareSources (Updatable) list of child Software Sources attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder childSoftwareSources(ManagedInstanceManagementChildSoftwareSourceArgs... childSoftwareSources) {
            return childSoftwareSources(List.of(childSoftwareSources));
        }

        /**
         * @param compartmentId OCID for the Compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId OCID for the Compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param description Information specified by the user about the managed instance
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Information specified by the user about the managed instance
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User friendly name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User friendly name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param lastBoot Time at which the instance last booted
         * 
         * @return builder
         * 
         */
        public Builder lastBoot(@Nullable Output<String> lastBoot) {
            $.lastBoot = lastBoot;
            return this;
        }

        /**
         * @param lastBoot Time at which the instance last booted
         * 
         * @return builder
         * 
         */
        public Builder lastBoot(String lastBoot) {
            return lastBoot(Output.of(lastBoot));
        }

        /**
         * @param lastCheckin Time at which the instance last checked in
         * 
         * @return builder
         * 
         */
        public Builder lastCheckin(@Nullable Output<String> lastCheckin) {
            $.lastCheckin = lastCheckin;
            return this;
        }

        /**
         * @param lastCheckin Time at which the instance last checked in
         * 
         * @return builder
         * 
         */
        public Builder lastCheckin(String lastCheckin) {
            return lastCheckin(Output.of(lastCheckin));
        }

        /**
         * @param managedInstanceGroups (Updatable) The ids of the managed instance groups of which this instance is a member.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroups(@Nullable Output<List<ManagedInstanceManagementManagedInstanceGroupArgs>> managedInstanceGroups) {
            $.managedInstanceGroups = managedInstanceGroups;
            return this;
        }

        /**
         * @param managedInstanceGroups (Updatable) The ids of the managed instance groups of which this instance is a member.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroups(List<ManagedInstanceManagementManagedInstanceGroupArgs> managedInstanceGroups) {
            return managedInstanceGroups(Output.of(managedInstanceGroups));
        }

        /**
         * @param managedInstanceGroups (Updatable) The ids of the managed instance groups of which this instance is a member.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroups(ManagedInstanceManagementManagedInstanceGroupArgs... managedInstanceGroups) {
            return managedInstanceGroups(List.of(managedInstanceGroups));
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param osKernelVersion Operating System Kernel Version
         * 
         * @return builder
         * 
         */
        public Builder osKernelVersion(@Nullable Output<String> osKernelVersion) {
            $.osKernelVersion = osKernelVersion;
            return this;
        }

        /**
         * @param osKernelVersion Operating System Kernel Version
         * 
         * @return builder
         * 
         */
        public Builder osKernelVersion(String osKernelVersion) {
            return osKernelVersion(Output.of(osKernelVersion));
        }

        /**
         * @param osName Operating System Name
         * 
         * @return builder
         * 
         */
        public Builder osName(@Nullable Output<String> osName) {
            $.osName = osName;
            return this;
        }

        /**
         * @param osName Operating System Name
         * 
         * @return builder
         * 
         */
        public Builder osName(String osName) {
            return osName(Output.of(osName));
        }

        /**
         * @param osVersion Operating System Version
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion Operating System Version
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        /**
         * @param parentSoftwareSource (Updatable) the parent (base) Software Source attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder parentSoftwareSource(@Nullable Output<ManagedInstanceManagementParentSoftwareSourceArgs> parentSoftwareSource) {
            $.parentSoftwareSource = parentSoftwareSource;
            return this;
        }

        /**
         * @param parentSoftwareSource (Updatable) the parent (base) Software Source attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder parentSoftwareSource(ManagedInstanceManagementParentSoftwareSourceArgs parentSoftwareSource) {
            return parentSoftwareSource(Output.of(parentSoftwareSource));
        }

        /**
         * @param status status of the managed instance.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status status of the managed instance.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updatesAvailable Number of updates available to be installed
         * 
         * @return builder
         * 
         */
        public Builder updatesAvailable(@Nullable Output<Integer> updatesAvailable) {
            $.updatesAvailable = updatesAvailable;
            return this;
        }

        /**
         * @param updatesAvailable Number of updates available to be installed
         * 
         * @return builder
         * 
         */
        public Builder updatesAvailable(Integer updatesAvailable) {
            return updatesAvailable(Output.of(updatesAvailable));
        }

        public ManagedInstanceManagementState build() {
            return $;
        }
    }

}
