// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Email.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Email.inputs.GetSendersFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetSendersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSendersArgs Empty = new GetSendersArgs();

    /**
     * The OCID for the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID for the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to only return resources that match the given domain exactly.
     * 
     */
    @Import(name="domain")
    private Output</* @Nullable */ String> domain;

    /**
     * @return A filter to only return resources that match the given domain exactly.
     * 
     */
    public Output</* @Nullable */ String> domain() {
        return this.domain;
    }

    /**
     * The email address of the approved sender.
     * 
     */
    @Import(name="emailAddress")
    private Output</* @Nullable */ String> emailAddress;

    /**
     * @return The email address of the approved sender.
     * 
     */
    public Output</* @Nullable */ String> emailAddress() {
        return this.emailAddress;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetSendersFilter>> filters;

    public Output</* @Nullable */ List<GetSendersFilter>> filters() {
        return this.filters;
    }

    /**
     * The current state of a sender.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return The current state of a sender.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetSendersArgs() {}

    private GetSendersArgs(GetSendersArgs $) {
        this.compartmentId = $.compartmentId;
        this.domain = $.domain;
        this.emailAddress = $.emailAddress;
        this.filters = $.filters;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSendersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSendersArgs $;

        public Builder() {
            $ = new GetSendersArgs();
        }

        public Builder(GetSendersArgs defaults) {
            $ = new GetSendersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID for the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID for the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param domain A filter to only return resources that match the given domain exactly.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output</* @Nullable */ String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain A filter to only return resources that match the given domain exactly.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param emailAddress The email address of the approved sender.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(Output</* @Nullable */ String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress The email address of the approved sender.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(@Nullable String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        public Builder filters(Output</* @Nullable */ List<GetSendersFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetSendersFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSendersFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state The current state of a sender.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of a sender.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetSendersArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
