// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseUserObjectPrivilegeItem {
    /**
     * @return Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    private final String common;
    /**
     * @return Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
     * 
     */
    private final String grantOption;
    /**
     * @return The name of the user who granted the object privilege.
     * 
     */
    private final String grantor;
    /**
     * @return Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
     * 
     */
    private final String hierarchy;
    /**
     * @return Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
     * 
     */
    private final String inherited;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private final String name;
    /**
     * @return The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
     * 
     */
    private final String object;
    /**
     * @return The owner of the object.
     * 
     */
    private final String owner;
    /**
     * @return The type of object.
     * 
     */
    private final String schemaType;

    @CustomType.Constructor
    private GetManagedDatabaseUserObjectPrivilegeItem(
        @CustomType.Parameter("common") String common,
        @CustomType.Parameter("grantOption") String grantOption,
        @CustomType.Parameter("grantor") String grantor,
        @CustomType.Parameter("hierarchy") String hierarchy,
        @CustomType.Parameter("inherited") String inherited,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("object") String object,
        @CustomType.Parameter("owner") String owner,
        @CustomType.Parameter("schemaType") String schemaType) {
        this.common = common;
        this.grantOption = grantOption;
        this.grantor = grantor;
        this.hierarchy = hierarchy;
        this.inherited = inherited;
        this.name = name;
        this.object = object;
        this.owner = owner;
        this.schemaType = schemaType;
    }

    /**
     * @return Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    public String common() {
        return this.common;
    }
    /**
     * @return Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
     * 
     */
    public String grantOption() {
        return this.grantOption;
    }
    /**
     * @return The name of the user who granted the object privilege.
     * 
     */
    public String grantor() {
        return this.grantor;
    }
    /**
     * @return Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
     * 
     */
    public String hierarchy() {
        return this.hierarchy;
    }
    /**
     * @return Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
     * 
     */
    public String inherited() {
        return this.inherited;
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return The owner of the object.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return The type of object.
     * 
     */
    public String schemaType() {
        return this.schemaType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserObjectPrivilegeItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String common;
        private String grantOption;
        private String grantor;
        private String hierarchy;
        private String inherited;
        private String name;
        private String object;
        private String owner;
        private String schemaType;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseUserObjectPrivilegeItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.common = defaults.common;
    	      this.grantOption = defaults.grantOption;
    	      this.grantor = defaults.grantor;
    	      this.hierarchy = defaults.hierarchy;
    	      this.inherited = defaults.inherited;
    	      this.name = defaults.name;
    	      this.object = defaults.object;
    	      this.owner = defaults.owner;
    	      this.schemaType = defaults.schemaType;
        }

        public Builder common(String common) {
            this.common = Objects.requireNonNull(common);
            return this;
        }
        public Builder grantOption(String grantOption) {
            this.grantOption = Objects.requireNonNull(grantOption);
            return this;
        }
        public Builder grantor(String grantor) {
            this.grantor = Objects.requireNonNull(grantor);
            return this;
        }
        public Builder hierarchy(String hierarchy) {
            this.hierarchy = Objects.requireNonNull(hierarchy);
            return this;
        }
        public Builder inherited(String inherited) {
            this.inherited = Objects.requireNonNull(inherited);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        public Builder schemaType(String schemaType) {
            this.schemaType = Objects.requireNonNull(schemaType);
            return this;
        }        public GetManagedDatabaseUserObjectPrivilegeItem build() {
            return new GetManagedDatabaseUserObjectPrivilegeItem(common, grantOption, grantor, hierarchy, inherited, name, object, owner, schemaType);
        }
    }
}
