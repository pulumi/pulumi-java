// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementChildSoftwareSourceArgs;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementManagedInstanceGroupArgs;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceManagementParentSoftwareSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceManagementArgs Empty = new ManagedInstanceManagementArgs();

    /**
     * (Updatable) list of child Software Sources attached to the Managed Instance
     * 
     */
    @Import(name="childSoftwareSources")
    private @Nullable Output<List<ManagedInstanceManagementChildSoftwareSourceArgs>> childSoftwareSources;

    /**
     * @return (Updatable) list of child Software Sources attached to the Managed Instance
     * 
     */
    public Optional<Output<List<ManagedInstanceManagementChildSoftwareSourceArgs>>> childSoftwareSources() {
        return Optional.ofNullable(this.childSoftwareSources);
    }

    /**
     * (Updatable) The ids of the managed instance groups of which this instance is a member.
     * 
     */
    @Import(name="managedInstanceGroups")
    private @Nullable Output<List<ManagedInstanceManagementManagedInstanceGroupArgs>> managedInstanceGroups;

    /**
     * @return (Updatable) The ids of the managed instance groups of which this instance is a member.
     * 
     */
    public Optional<Output<List<ManagedInstanceManagementManagedInstanceGroupArgs>>> managedInstanceGroups() {
        return Optional.ofNullable(this.managedInstanceGroups);
    }

    /**
     * OCID for the managed instance
     * 
     */
    @Import(name="managedInstanceId", required=true)
    private Output<String> managedInstanceId;

    /**
     * @return OCID for the managed instance
     * 
     */
    public Output<String> managedInstanceId() {
        return this.managedInstanceId;
    }

    /**
     * (Updatable) the parent (base) Software Source attached to the Managed Instance
     * 
     */
    @Import(name="parentSoftwareSource")
    private @Nullable Output<ManagedInstanceManagementParentSoftwareSourceArgs> parentSoftwareSource;

    /**
     * @return (Updatable) the parent (base) Software Source attached to the Managed Instance
     * 
     */
    public Optional<Output<ManagedInstanceManagementParentSoftwareSourceArgs>> parentSoftwareSource() {
        return Optional.ofNullable(this.parentSoftwareSource);
    }

    private ManagedInstanceManagementArgs() {}

    private ManagedInstanceManagementArgs(ManagedInstanceManagementArgs $) {
        this.childSoftwareSources = $.childSoftwareSources;
        this.managedInstanceGroups = $.managedInstanceGroups;
        this.managedInstanceId = $.managedInstanceId;
        this.parentSoftwareSource = $.parentSoftwareSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceManagementArgs $;

        public Builder() {
            $ = new ManagedInstanceManagementArgs();
        }

        public Builder(ManagedInstanceManagementArgs defaults) {
            $ = new ManagedInstanceManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param childSoftwareSources (Updatable) list of child Software Sources attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder childSoftwareSources(@Nullable Output<List<ManagedInstanceManagementChildSoftwareSourceArgs>> childSoftwareSources) {
            $.childSoftwareSources = childSoftwareSources;
            return this;
        }

        /**
         * @param childSoftwareSources (Updatable) list of child Software Sources attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder childSoftwareSources(List<ManagedInstanceManagementChildSoftwareSourceArgs> childSoftwareSources) {
            return childSoftwareSources(Output.of(childSoftwareSources));
        }

        /**
         * @param childSoftwareSources (Updatable) list of child Software Sources attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder childSoftwareSources(ManagedInstanceManagementChildSoftwareSourceArgs... childSoftwareSources) {
            return childSoftwareSources(List.of(childSoftwareSources));
        }

        /**
         * @param managedInstanceGroups (Updatable) The ids of the managed instance groups of which this instance is a member.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroups(@Nullable Output<List<ManagedInstanceManagementManagedInstanceGroupArgs>> managedInstanceGroups) {
            $.managedInstanceGroups = managedInstanceGroups;
            return this;
        }

        /**
         * @param managedInstanceGroups (Updatable) The ids of the managed instance groups of which this instance is a member.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroups(List<ManagedInstanceManagementManagedInstanceGroupArgs> managedInstanceGroups) {
            return managedInstanceGroups(Output.of(managedInstanceGroups));
        }

        /**
         * @param managedInstanceGroups (Updatable) The ids of the managed instance groups of which this instance is a member.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroups(ManagedInstanceManagementManagedInstanceGroupArgs... managedInstanceGroups) {
            return managedInstanceGroups(List.of(managedInstanceGroups));
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param parentSoftwareSource (Updatable) the parent (base) Software Source attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder parentSoftwareSource(@Nullable Output<ManagedInstanceManagementParentSoftwareSourceArgs> parentSoftwareSource) {
            $.parentSoftwareSource = parentSoftwareSource;
            return this;
        }

        /**
         * @param parentSoftwareSource (Updatable) the parent (base) Software Source attached to the Managed Instance
         * 
         * @return builder
         * 
         */
        public Builder parentSoftwareSource(ManagedInstanceManagementParentSoftwareSourceArgs parentSoftwareSource) {
            return parentSoftwareSource(Output.of(parentSoftwareSource));
        }

        public ManagedInstanceManagementArgs build() {
            $.managedInstanceId = Objects.requireNonNull($.managedInstanceId, "expected parameter 'managedInstanceId' to be non-null");
            return $;
        }
    }

}
