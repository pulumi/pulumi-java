// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverEndpointArgs Empty = new ResolverEndpointArgs();

    /**
     * (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    @Import(name="endpointType")
    private @Nullable Output<String> endpointType;

    /**
     * @return (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    public Optional<Output<String>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    /**
     * An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    @Import(name="forwardingAddress")
    private @Nullable Output<String> forwardingAddress;

    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    public Optional<Output<String>> forwardingAddress() {
        return Optional.ofNullable(this.forwardingAddress);
    }

    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    @Import(name="isForwarding", required=true)
    private Output<Boolean> isForwarding;

    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    public Output<Boolean> isForwarding() {
        return this.isForwarding;
    }

    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    @Import(name="isListening", required=true)
    private Output<Boolean> isListening;

    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    public Output<Boolean> isListening() {
        return this.isListening;
    }

    /**
     * An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    @Import(name="listeningAddress")
    private @Nullable Output<String> listeningAddress;

    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    public Optional<Output<String>> listeningAddress() {
        return Optional.ofNullable(this.listeningAddress);
    }

    /**
     * The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * The OCID of the target resolver.
     * 
     */
    @Import(name="resolverId", required=true)
    private Output<String> resolverId;

    /**
     * @return The OCID of the target resolver.
     * 
     */
    public Output<String> resolverId() {
        return this.resolverId;
    }

    /**
     * Value must be `PRIVATE` when creating private name resolver endpoints.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Value must be `PRIVATE` when creating private name resolver endpoints.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private ResolverEndpointArgs() {}

    private ResolverEndpointArgs(ResolverEndpointArgs $) {
        this.endpointType = $.endpointType;
        this.forwardingAddress = $.forwardingAddress;
        this.isForwarding = $.isForwarding;
        this.isListening = $.isListening;
        this.listeningAddress = $.listeningAddress;
        this.name = $.name;
        this.nsgIds = $.nsgIds;
        this.resolverId = $.resolverId;
        this.scope = $.scope;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverEndpointArgs $;

        public Builder() {
            $ = new ResolverEndpointArgs();
        }

        public Builder(ResolverEndpointArgs defaults) {
            $ = new ResolverEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointType (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(@Nullable Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointType (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        /**
         * @param forwardingAddress An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
         * 
         * @return builder
         * 
         */
        public Builder forwardingAddress(@Nullable Output<String> forwardingAddress) {
            $.forwardingAddress = forwardingAddress;
            return this;
        }

        /**
         * @param forwardingAddress An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
         * 
         * @return builder
         * 
         */
        public Builder forwardingAddress(String forwardingAddress) {
            return forwardingAddress(Output.of(forwardingAddress));
        }

        /**
         * @param isForwarding A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
         * 
         * @return builder
         * 
         */
        public Builder isForwarding(Output<Boolean> isForwarding) {
            $.isForwarding = isForwarding;
            return this;
        }

        /**
         * @param isForwarding A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
         * 
         * @return builder
         * 
         */
        public Builder isForwarding(Boolean isForwarding) {
            return isForwarding(Output.of(isForwarding));
        }

        /**
         * @param isListening A Boolean flag indicating whether or not the resolver endpoint is for listening.
         * 
         * @return builder
         * 
         */
        public Builder isListening(Output<Boolean> isListening) {
            $.isListening = isListening;
            return this;
        }

        /**
         * @param isListening A Boolean flag indicating whether or not the resolver endpoint is for listening.
         * 
         * @return builder
         * 
         */
        public Builder isListening(Boolean isListening) {
            return isListening(Output.of(isListening));
        }

        /**
         * @param listeningAddress An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
         * 
         * @return builder
         * 
         */
        public Builder listeningAddress(@Nullable Output<String> listeningAddress) {
            $.listeningAddress = listeningAddress;
            return this;
        }

        /**
         * @param listeningAddress An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
         * 
         * @return builder
         * 
         */
        public Builder listeningAddress(String listeningAddress) {
            return listeningAddress(Output.of(listeningAddress));
        }

        /**
         * @param name The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nsgIds An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param resolverId The OCID of the target resolver.
         * 
         * @return builder
         * 
         */
        public Builder resolverId(Output<String> resolverId) {
            $.resolverId = resolverId;
            return this;
        }

        /**
         * @param resolverId The OCID of the target resolver.
         * 
         * @return builder
         * 
         */
        public Builder resolverId(String resolverId) {
            return resolverId(Output.of(resolverId));
        }

        /**
         * @param scope Value must be `PRIVATE` when creating private name resolver endpoints.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Value must be `PRIVATE` when creating private name resolver endpoints.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param subnetId The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public ResolverEndpointArgs build() {
            $.isForwarding = Objects.requireNonNull($.isForwarding, "expected parameter 'isForwarding' to be non-null");
            $.isListening = Objects.requireNonNull($.isListening, "expected parameter 'isListening' to be non-null");
            $.resolverId = Objects.requireNonNull($.resolverId, "expected parameter 'resolverId' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            return $;
        }
    }

}
