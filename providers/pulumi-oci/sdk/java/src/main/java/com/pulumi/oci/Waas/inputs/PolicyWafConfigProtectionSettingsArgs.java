// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyWafConfigProtectionSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyWafConfigProtectionSettingsArgs Empty = new PolicyWafConfigProtectionSettingsArgs();

    /**
     * (Updatable) The list of allowed HTTP methods. If unspecified, default to `[OPTIONS, GET, HEAD, POST]`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Restrict HTTP Request Methods&#34; rule (key: 911100).
     * 
     */
    @Import(name="allowedHttpMethods")
    private @Nullable Output<List<String>> allowedHttpMethods;

    /**
     * @return (Updatable) The list of allowed HTTP methods. If unspecified, default to `[OPTIONS, GET, HEAD, POST]`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Restrict HTTP Request Methods&#34; rule (key: 911100).
     * 
     */
    public Optional<Output<List<String>>> allowedHttpMethods() {
        return Optional.ofNullable(this.allowedHttpMethods);
    }

    /**
     * (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
     * 
     */
    @Import(name="blockAction")
    private @Nullable Output<String> blockAction;

    /**
     * @return (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
     * 
     */
    public Optional<Output<String>> blockAction() {
        return Optional.ofNullable(this.blockAction);
    }

    /**
     * (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
     * 
     */
    @Import(name="blockErrorPageCode")
    private @Nullable Output<String> blockErrorPageCode;

    /**
     * @return (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
     * 
     */
    public Optional<Output<String>> blockErrorPageCode() {
        return Optional.ofNullable(this.blockErrorPageCode);
    }

    /**
     * (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
     * 
     */
    @Import(name="blockErrorPageDescription")
    private @Nullable Output<String> blockErrorPageDescription;

    /**
     * @return (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
     * 
     */
    public Optional<Output<String>> blockErrorPageDescription() {
        return Optional.ofNullable(this.blockErrorPageDescription);
    }

    /**
     * (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to &#39;Access to the website is blocked.&#39;
     * 
     */
    @Import(name="blockErrorPageMessage")
    private @Nullable Output<String> blockErrorPageMessage;

    /**
     * @return (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to &#39;Access to the website is blocked.&#39;
     * 
     */
    public Optional<Output<String>> blockErrorPageMessage() {
        return Optional.ofNullable(this.blockErrorPageMessage);
    }

    /**
     * (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
     * 
     */
    @Import(name="blockResponseCode")
    private @Nullable Output<Integer> blockResponseCode;

    /**
     * @return (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
     * 
     */
    public Optional<Output<Integer>> blockResponseCode() {
        return Optional.ofNullable(this.blockResponseCode);
    }

    /**
     * (Updatable) Inspects the response body of origin responses. Can be used to detect leakage of sensitive data. If unspecified, defaults to `false`.
     * 
     */
    @Import(name="isResponseInspected")
    private @Nullable Output<Boolean> isResponseInspected;

    /**
     * @return (Updatable) Inspects the response body of origin responses. Can be used to detect leakage of sensitive data. If unspecified, defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> isResponseInspected() {
        return Optional.ofNullable(this.isResponseInspected);
    }

    /**
     * (Updatable) The maximum number of arguments allowed to be passed to your application before an action is taken. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `255`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Number of Arguments Limits&#34; rule (key: 960335).  Example: If `maxArgumentCount` to `2` for the Max Number of Arguments protection rule (key: 960335), the following requests would be blocked: `GET /myapp/path?query=one&amp;query=two&amp;query=three` `POST /myapp/path` with Body `{&#34;argument1&#34;:&#34;one&#34;,&#34;argument2&#34;:&#34;two&#34;,&#34;argument3&#34;:&#34;three&#34;}`
     * 
     */
    @Import(name="maxArgumentCount")
    private @Nullable Output<Integer> maxArgumentCount;

    /**
     * @return (Updatable) The maximum number of arguments allowed to be passed to your application before an action is taken. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `255`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Number of Arguments Limits&#34; rule (key: 960335).  Example: If `maxArgumentCount` to `2` for the Max Number of Arguments protection rule (key: 960335), the following requests would be blocked: `GET /myapp/path?query=one&amp;query=two&amp;query=three` `POST /myapp/path` with Body `{&#34;argument1&#34;:&#34;one&#34;,&#34;argument2&#34;:&#34;two&#34;,&#34;argument3&#34;:&#34;three&#34;}`
     * 
     */
    public Optional<Output<Integer>> maxArgumentCount() {
        return Optional.ofNullable(this.maxArgumentCount);
    }

    /**
     * (Updatable) The maximum length allowed for each argument name, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `400`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Values Limits&#34; rule (key: 960208).
     * 
     */
    @Import(name="maxNameLengthPerArgument")
    private @Nullable Output<Integer> maxNameLengthPerArgument;

    /**
     * @return (Updatable) The maximum length allowed for each argument name, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `400`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Values Limits&#34; rule (key: 960208).
     * 
     */
    public Optional<Output<Integer>> maxNameLengthPerArgument() {
        return Optional.ofNullable(this.maxNameLengthPerArgument);
    }

    /**
     * (Updatable) The maximum response size to be fully inspected, in binary kilobytes (KiB). Anything over this limit will be partially inspected. If unspecified, defaults to `1024`.
     * 
     */
    @Import(name="maxResponseSizeInKiB")
    private @Nullable Output<Integer> maxResponseSizeInKiB;

    /**
     * @return (Updatable) The maximum response size to be fully inspected, in binary kilobytes (KiB). Anything over this limit will be partially inspected. If unspecified, defaults to `1024`.
     * 
     */
    public Optional<Output<Integer>> maxResponseSizeInKiB() {
        return Optional.ofNullable(this.maxResponseSizeInKiB);
    }

    /**
     * (Updatable) The maximum length allowed for the sum of the argument name and value, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `64000`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Total Arguments Limits&#34; rule (key: 960341).
     * 
     */
    @Import(name="maxTotalNameLengthOfArguments")
    private @Nullable Output<Integer> maxTotalNameLengthOfArguments;

    /**
     * @return (Updatable) The maximum length allowed for the sum of the argument name and value, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `64000`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Total Arguments Limits&#34; rule (key: 960341).
     * 
     */
    public Optional<Output<Integer>> maxTotalNameLengthOfArguments() {
        return Optional.ofNullable(this.maxTotalNameLengthOfArguments);
    }

    /**
     * (Updatable) The list of media types to allow for inspection, if `isResponseInspected` is enabled. Only responses with MIME types in this list will be inspected. If unspecified, defaults to `[&#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;]`.
     * 
     */
    @Import(name="mediaTypes")
    private @Nullable Output<List<String>> mediaTypes;

    /**
     * @return (Updatable) The list of media types to allow for inspection, if `isResponseInspected` is enabled. Only responses with MIME types in this list will be inspected. If unspecified, defaults to `[&#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;]`.
     * 
     */
    public Optional<Output<List<String>>> mediaTypes() {
        return Optional.ofNullable(this.mediaTypes);
    }

    /**
     * (Updatable) The length of time to analyze traffic traffic, in days. After the analysis period, `WafRecommendations` will be populated. If unspecified, defaults to `10`.
     * 
     */
    @Import(name="recommendationsPeriodInDays")
    private @Nullable Output<Integer> recommendationsPeriodInDays;

    /**
     * @return (Updatable) The length of time to analyze traffic traffic, in days. After the analysis period, `WafRecommendations` will be populated. If unspecified, defaults to `10`.
     * 
     */
    public Optional<Output<Integer>> recommendationsPeriodInDays() {
        return Optional.ofNullable(this.recommendationsPeriodInDays);
    }

    private PolicyWafConfigProtectionSettingsArgs() {}

    private PolicyWafConfigProtectionSettingsArgs(PolicyWafConfigProtectionSettingsArgs $) {
        this.allowedHttpMethods = $.allowedHttpMethods;
        this.blockAction = $.blockAction;
        this.blockErrorPageCode = $.blockErrorPageCode;
        this.blockErrorPageDescription = $.blockErrorPageDescription;
        this.blockErrorPageMessage = $.blockErrorPageMessage;
        this.blockResponseCode = $.blockResponseCode;
        this.isResponseInspected = $.isResponseInspected;
        this.maxArgumentCount = $.maxArgumentCount;
        this.maxNameLengthPerArgument = $.maxNameLengthPerArgument;
        this.maxResponseSizeInKiB = $.maxResponseSizeInKiB;
        this.maxTotalNameLengthOfArguments = $.maxTotalNameLengthOfArguments;
        this.mediaTypes = $.mediaTypes;
        this.recommendationsPeriodInDays = $.recommendationsPeriodInDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyWafConfigProtectionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyWafConfigProtectionSettingsArgs $;

        public Builder() {
            $ = new PolicyWafConfigProtectionSettingsArgs();
        }

        public Builder(PolicyWafConfigProtectionSettingsArgs defaults) {
            $ = new PolicyWafConfigProtectionSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedHttpMethods (Updatable) The list of allowed HTTP methods. If unspecified, default to `[OPTIONS, GET, HEAD, POST]`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Restrict HTTP Request Methods&#34; rule (key: 911100).
         * 
         * @return builder
         * 
         */
        public Builder allowedHttpMethods(@Nullable Output<List<String>> allowedHttpMethods) {
            $.allowedHttpMethods = allowedHttpMethods;
            return this;
        }

        /**
         * @param allowedHttpMethods (Updatable) The list of allowed HTTP methods. If unspecified, default to `[OPTIONS, GET, HEAD, POST]`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Restrict HTTP Request Methods&#34; rule (key: 911100).
         * 
         * @return builder
         * 
         */
        public Builder allowedHttpMethods(List<String> allowedHttpMethods) {
            return allowedHttpMethods(Output.of(allowedHttpMethods));
        }

        /**
         * @param allowedHttpMethods (Updatable) The list of allowed HTTP methods. If unspecified, default to `[OPTIONS, GET, HEAD, POST]`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Restrict HTTP Request Methods&#34; rule (key: 911100).
         * 
         * @return builder
         * 
         */
        public Builder allowedHttpMethods(String... allowedHttpMethods) {
            return allowedHttpMethods(List.of(allowedHttpMethods));
        }

        /**
         * @param blockAction (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
         * 
         * @return builder
         * 
         */
        public Builder blockAction(@Nullable Output<String> blockAction) {
            $.blockAction = blockAction;
            return this;
        }

        /**
         * @param blockAction (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
         * 
         * @return builder
         * 
         */
        public Builder blockAction(String blockAction) {
            return blockAction(Output.of(blockAction));
        }

        /**
         * @param blockErrorPageCode (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
         * 
         * @return builder
         * 
         */
        public Builder blockErrorPageCode(@Nullable Output<String> blockErrorPageCode) {
            $.blockErrorPageCode = blockErrorPageCode;
            return this;
        }

        /**
         * @param blockErrorPageCode (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
         * 
         * @return builder
         * 
         */
        public Builder blockErrorPageCode(String blockErrorPageCode) {
            return blockErrorPageCode(Output.of(blockErrorPageCode));
        }

        /**
         * @param blockErrorPageDescription (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
         * 
         * @return builder
         * 
         */
        public Builder blockErrorPageDescription(@Nullable Output<String> blockErrorPageDescription) {
            $.blockErrorPageDescription = blockErrorPageDescription;
            return this;
        }

        /**
         * @param blockErrorPageDescription (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
         * 
         * @return builder
         * 
         */
        public Builder blockErrorPageDescription(String blockErrorPageDescription) {
            return blockErrorPageDescription(Output.of(blockErrorPageDescription));
        }

        /**
         * @param blockErrorPageMessage (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to &#39;Access to the website is blocked.&#39;
         * 
         * @return builder
         * 
         */
        public Builder blockErrorPageMessage(@Nullable Output<String> blockErrorPageMessage) {
            $.blockErrorPageMessage = blockErrorPageMessage;
            return this;
        }

        /**
         * @param blockErrorPageMessage (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to &#39;Access to the website is blocked.&#39;
         * 
         * @return builder
         * 
         */
        public Builder blockErrorPageMessage(String blockErrorPageMessage) {
            return blockErrorPageMessage(Output.of(blockErrorPageMessage));
        }

        /**
         * @param blockResponseCode (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
         * 
         * @return builder
         * 
         */
        public Builder blockResponseCode(@Nullable Output<Integer> blockResponseCode) {
            $.blockResponseCode = blockResponseCode;
            return this;
        }

        /**
         * @param blockResponseCode (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
         * 
         * @return builder
         * 
         */
        public Builder blockResponseCode(Integer blockResponseCode) {
            return blockResponseCode(Output.of(blockResponseCode));
        }

        /**
         * @param isResponseInspected (Updatable) Inspects the response body of origin responses. Can be used to detect leakage of sensitive data. If unspecified, defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isResponseInspected(@Nullable Output<Boolean> isResponseInspected) {
            $.isResponseInspected = isResponseInspected;
            return this;
        }

        /**
         * @param isResponseInspected (Updatable) Inspects the response body of origin responses. Can be used to detect leakage of sensitive data. If unspecified, defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isResponseInspected(Boolean isResponseInspected) {
            return isResponseInspected(Output.of(isResponseInspected));
        }

        /**
         * @param maxArgumentCount (Updatable) The maximum number of arguments allowed to be passed to your application before an action is taken. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `255`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Number of Arguments Limits&#34; rule (key: 960335).  Example: If `maxArgumentCount` to `2` for the Max Number of Arguments protection rule (key: 960335), the following requests would be blocked: `GET /myapp/path?query=one&amp;query=two&amp;query=three` `POST /myapp/path` with Body `{&#34;argument1&#34;:&#34;one&#34;,&#34;argument2&#34;:&#34;two&#34;,&#34;argument3&#34;:&#34;three&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder maxArgumentCount(@Nullable Output<Integer> maxArgumentCount) {
            $.maxArgumentCount = maxArgumentCount;
            return this;
        }

        /**
         * @param maxArgumentCount (Updatable) The maximum number of arguments allowed to be passed to your application before an action is taken. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `255`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Number of Arguments Limits&#34; rule (key: 960335).  Example: If `maxArgumentCount` to `2` for the Max Number of Arguments protection rule (key: 960335), the following requests would be blocked: `GET /myapp/path?query=one&amp;query=two&amp;query=three` `POST /myapp/path` with Body `{&#34;argument1&#34;:&#34;one&#34;,&#34;argument2&#34;:&#34;two&#34;,&#34;argument3&#34;:&#34;three&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder maxArgumentCount(Integer maxArgumentCount) {
            return maxArgumentCount(Output.of(maxArgumentCount));
        }

        /**
         * @param maxNameLengthPerArgument (Updatable) The maximum length allowed for each argument name, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `400`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Values Limits&#34; rule (key: 960208).
         * 
         * @return builder
         * 
         */
        public Builder maxNameLengthPerArgument(@Nullable Output<Integer> maxNameLengthPerArgument) {
            $.maxNameLengthPerArgument = maxNameLengthPerArgument;
            return this;
        }

        /**
         * @param maxNameLengthPerArgument (Updatable) The maximum length allowed for each argument name, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `400`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Values Limits&#34; rule (key: 960208).
         * 
         * @return builder
         * 
         */
        public Builder maxNameLengthPerArgument(Integer maxNameLengthPerArgument) {
            return maxNameLengthPerArgument(Output.of(maxNameLengthPerArgument));
        }

        /**
         * @param maxResponseSizeInKiB (Updatable) The maximum response size to be fully inspected, in binary kilobytes (KiB). Anything over this limit will be partially inspected. If unspecified, defaults to `1024`.
         * 
         * @return builder
         * 
         */
        public Builder maxResponseSizeInKiB(@Nullable Output<Integer> maxResponseSizeInKiB) {
            $.maxResponseSizeInKiB = maxResponseSizeInKiB;
            return this;
        }

        /**
         * @param maxResponseSizeInKiB (Updatable) The maximum response size to be fully inspected, in binary kilobytes (KiB). Anything over this limit will be partially inspected. If unspecified, defaults to `1024`.
         * 
         * @return builder
         * 
         */
        public Builder maxResponseSizeInKiB(Integer maxResponseSizeInKiB) {
            return maxResponseSizeInKiB(Output.of(maxResponseSizeInKiB));
        }

        /**
         * @param maxTotalNameLengthOfArguments (Updatable) The maximum length allowed for the sum of the argument name and value, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `64000`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Total Arguments Limits&#34; rule (key: 960341).
         * 
         * @return builder
         * 
         */
        public Builder maxTotalNameLengthOfArguments(@Nullable Output<Integer> maxTotalNameLengthOfArguments) {
            $.maxTotalNameLengthOfArguments = maxTotalNameLengthOfArguments;
            return this;
        }

        /**
         * @param maxTotalNameLengthOfArguments (Updatable) The maximum length allowed for the sum of the argument name and value, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `64000`. This setting only applies if a corresponding protection rule is enabled, such as the &#34;Total Arguments Limits&#34; rule (key: 960341).
         * 
         * @return builder
         * 
         */
        public Builder maxTotalNameLengthOfArguments(Integer maxTotalNameLengthOfArguments) {
            return maxTotalNameLengthOfArguments(Output.of(maxTotalNameLengthOfArguments));
        }

        /**
         * @param mediaTypes (Updatable) The list of media types to allow for inspection, if `isResponseInspected` is enabled. Only responses with MIME types in this list will be inspected. If unspecified, defaults to `[&#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder mediaTypes(@Nullable Output<List<String>> mediaTypes) {
            $.mediaTypes = mediaTypes;
            return this;
        }

        /**
         * @param mediaTypes (Updatable) The list of media types to allow for inspection, if `isResponseInspected` is enabled. Only responses with MIME types in this list will be inspected. If unspecified, defaults to `[&#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder mediaTypes(List<String> mediaTypes) {
            return mediaTypes(Output.of(mediaTypes));
        }

        /**
         * @param mediaTypes (Updatable) The list of media types to allow for inspection, if `isResponseInspected` is enabled. Only responses with MIME types in this list will be inspected. If unspecified, defaults to `[&#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder mediaTypes(String... mediaTypes) {
            return mediaTypes(List.of(mediaTypes));
        }

        /**
         * @param recommendationsPeriodInDays (Updatable) The length of time to analyze traffic traffic, in days. After the analysis period, `WafRecommendations` will be populated. If unspecified, defaults to `10`.
         * 
         * @return builder
         * 
         */
        public Builder recommendationsPeriodInDays(@Nullable Output<Integer> recommendationsPeriodInDays) {
            $.recommendationsPeriodInDays = recommendationsPeriodInDays;
            return this;
        }

        /**
         * @param recommendationsPeriodInDays (Updatable) The length of time to analyze traffic traffic, in days. After the analysis period, `WafRecommendations` will be populated. If unspecified, defaults to `10`.
         * 
         * @return builder
         * 
         */
        public Builder recommendationsPeriodInDays(Integer recommendationsPeriodInDays) {
            return recommendationsPeriodInDays(Output.of(recommendationsPeriodInDays));
        }

        public PolicyWafConfigProtectionSettingsArgs build() {
            return $;
        }
    }

}
