// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.GetTargetDatabasesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTargetDatabasesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTargetDatabasesArgs Empty = new GetTargetDatabasesArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return the target databases that are associated to the resource id passed in as a parameter value.
     * 
     */
    @Import(name="associatedResourceId")
    private @Nullable String associatedResourceId;

    /**
     * @return A filter to return the target databases that are associated to the resource id passed in as a parameter value.
     * 
     */
    public Optional<String> associatedResourceId() {
        return Optional.ofNullable(this.associatedResourceId);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A filter to return target databases that match the database type of the target database.
     * 
     */
    @Import(name="databaseType")
    private @Nullable String databaseType;

    /**
     * @return A filter to return target databases that match the database type of the target database.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * A filter to return only resources that match the specified display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetTargetDatabasesFilter> filters;

    public Optional<List<GetTargetDatabasesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return target databases that match the infrastructure type of the target database.
     * 
     */
    @Import(name="infrastructureType")
    private @Nullable String infrastructureType;

    /**
     * @return A filter to return target databases that match the infrastructure type of the target database.
     * 
     */
    public Optional<String> infrastructureType() {
        return Optional.ofNullable(this.infrastructureType);
    }

    /**
     * A filter to return the target databases that matches the current state of the target database.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return the target databases that matches the current state of the target database.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return the target database that matches the specified OCID.
     * 
     */
    @Import(name="targetDatabaseId")
    private @Nullable String targetDatabaseId;

    /**
     * @return A filter to return the target database that matches the specified OCID.
     * 
     */
    public Optional<String> targetDatabaseId() {
        return Optional.ofNullable(this.targetDatabaseId);
    }

    private GetTargetDatabasesArgs() {}

    private GetTargetDatabasesArgs(GetTargetDatabasesArgs $) {
        this.accessLevel = $.accessLevel;
        this.associatedResourceId = $.associatedResourceId;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.databaseType = $.databaseType;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.infrastructureType = $.infrastructureType;
        this.state = $.state;
        this.targetDatabaseId = $.targetDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTargetDatabasesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTargetDatabasesArgs $;

        public Builder() {
            $ = new GetTargetDatabasesArgs();
        }

        public Builder(GetTargetDatabasesArgs defaults) {
            $ = new GetTargetDatabasesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param associatedResourceId A filter to return the target databases that are associated to the resource id passed in as a parameter value.
         * 
         * @return builder
         * 
         */
        public Builder associatedResourceId(@Nullable String associatedResourceId) {
            $.associatedResourceId = associatedResourceId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param databaseType A filter to return target databases that match the database type of the target database.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetTargetDatabasesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetTargetDatabasesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param infrastructureType A filter to return target databases that match the infrastructure type of the target database.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureType(@Nullable String infrastructureType) {
            $.infrastructureType = infrastructureType;
            return this;
        }

        /**
         * @param state A filter to return the target databases that matches the current state of the target database.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param targetDatabaseId A filter to return the target database that matches the specified OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseId(@Nullable String targetDatabaseId) {
            $.targetDatabaseId = targetDatabaseId;
            return this;
        }

        public GetTargetDatabasesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
