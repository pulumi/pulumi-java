// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.BigDataService.inputs.GetBdsInstanceMetastoreConfigsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetBdsInstanceMetastoreConfigsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBdsInstanceMetastoreConfigsArgs Empty = new GetBdsInstanceMetastoreConfigsArgs();

    /**
     * The ID of the API key that is associated with the external metastore in the metastore configuration
     * 
     */
    @Import(name="bdsApiKeyId")
    private Output</* @Nullable */ String> bdsApiKeyId;

    /**
     * @return The ID of the API key that is associated with the external metastore in the metastore configuration
     * 
     */
    public Output</* @Nullable */ String> bdsApiKeyId() {
        return this.bdsApiKeyId;
    }

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="bdsInstanceId", required=true)
    private Output<String> bdsInstanceId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output<String> bdsInstanceId() {
        return this.bdsInstanceId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Output</* @Nullable */ String> displayName() {
        return this.displayName;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetBdsInstanceMetastoreConfigsFilter>> filters;

    public Output</* @Nullable */ List<GetBdsInstanceMetastoreConfigsFilter>> filters() {
        return this.filters;
    }

    /**
     * The OCID of the Data Catalog metastore in the metastore configuration
     * 
     */
    @Import(name="metastoreId")
    private Output</* @Nullable */ String> metastoreId;

    /**
     * @return The OCID of the Data Catalog metastore in the metastore configuration
     * 
     */
    public Output</* @Nullable */ String> metastoreId() {
        return this.metastoreId;
    }

    /**
     * The type of the metastore in the metastore configuration
     * 
     */
    @Import(name="metastoreType")
    private Output</* @Nullable */ String> metastoreType;

    /**
     * @return The type of the metastore in the metastore configuration
     * 
     */
    public Output</* @Nullable */ String> metastoreType() {
        return this.metastoreType;
    }

    /**
     * The lifecycle state of the metastore in the metastore configuration
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return The lifecycle state of the metastore in the metastore configuration
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetBdsInstanceMetastoreConfigsArgs() {}

    private GetBdsInstanceMetastoreConfigsArgs(GetBdsInstanceMetastoreConfigsArgs $) {
        this.bdsApiKeyId = $.bdsApiKeyId;
        this.bdsInstanceId = $.bdsInstanceId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.metastoreId = $.metastoreId;
        this.metastoreType = $.metastoreType;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBdsInstanceMetastoreConfigsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBdsInstanceMetastoreConfigsArgs $;

        public Builder() {
            $ = new GetBdsInstanceMetastoreConfigsArgs();
        }

        public Builder(GetBdsInstanceMetastoreConfigsArgs defaults) {
            $ = new GetBdsInstanceMetastoreConfigsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bdsApiKeyId The ID of the API key that is associated with the external metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder bdsApiKeyId(Output</* @Nullable */ String> bdsApiKeyId) {
            $.bdsApiKeyId = bdsApiKeyId;
            return this;
        }

        /**
         * @param bdsApiKeyId The ID of the API key that is associated with the external metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder bdsApiKeyId(@Nullable String bdsApiKeyId) {
            return bdsApiKeyId(Output.of(bdsApiKeyId));
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(Output<String> bdsInstanceId) {
            $.bdsInstanceId = bdsInstanceId;
            return this;
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(String bdsInstanceId) {
            return bdsInstanceId(Output.of(bdsInstanceId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output</* @Nullable */ String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(Output</* @Nullable */ List<GetBdsInstanceMetastoreConfigsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetBdsInstanceMetastoreConfigsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetBdsInstanceMetastoreConfigsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param metastoreId The OCID of the Data Catalog metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(Output</* @Nullable */ String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        /**
         * @param metastoreId The OCID of the Data Catalog metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        /**
         * @param metastoreType The type of the metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder metastoreType(Output</* @Nullable */ String> metastoreType) {
            $.metastoreType = metastoreType;
            return this;
        }

        /**
         * @param metastoreType The type of the metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder metastoreType(@Nullable String metastoreType) {
            return metastoreType(Output.of(metastoreType));
        }

        /**
         * @param state The lifecycle state of the metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The lifecycle state of the metastore in the metastore configuration
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetBdsInstanceMetastoreConfigsArgs build() {
            $.bdsInstanceId = Objects.requireNonNull($.bdsInstanceId, "expected parameter 'bdsInstanceId' to be non-null");
            return $;
        }
    }

}
