// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Budget.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetState extends com.pulumi.resources.ResourceArgs {

    public static final BudgetState Empty = new BudgetState();

    /**
     * The actual spend in currency for the current budget cycle
     * 
     */
    @Import(name="actualSpend")
    private @Nullable Output<Double> actualSpend;

    /**
     * @return The actual spend in currency for the current budget cycle
     * 
     */
    public Optional<Output<Double>> actualSpend() {
        return Optional.ofNullable(this.actualSpend);
    }

    /**
     * Total number of alert rules in the budget
     * 
     */
    @Import(name="alertRuleCount")
    private @Nullable Output<Integer> alertRuleCount;

    /**
     * @return Total number of alert rules in the budget
     * 
     */
    public Optional<Output<Integer>> alertRuleCount() {
        return Optional.ofNullable(this.alertRuleCount);
    }

    /**
     * (Updatable) The amount of the budget expressed as a whole number in the currency of the customer&#39;s rate card.
     * 
     */
    @Import(name="amount")
    private @Nullable Output<Integer> amount;

    /**
     * @return (Updatable) The amount of the budget expressed as a whole number in the currency of the customer&#39;s rate card.
     * 
     */
    public Optional<Output<Integer>> amount() {
        return Optional.ofNullable(this.amount);
    }

    /**
     * (Updatable) The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    @Import(name="budgetProcessingPeriodStartOffset")
    private @Nullable Output<Integer> budgetProcessingPeriodStartOffset;

    /**
     * @return (Updatable) The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    public Optional<Output<Integer>> budgetProcessingPeriodStartOffset() {
        return Optional.ofNullable(this.budgetProcessingPeriodStartOffset);
    }

    /**
     * The OCID of the tenancy
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the tenancy
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The description of the budget.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the budget.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The displayName of the budget.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The displayName of the budget.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The forecasted spend in currency by the end of the current budget cycle
     * 
     */
    @Import(name="forecastedSpend")
    private @Nullable Output<Double> forecastedSpend;

    /**
     * @return The forecasted spend in currency by the end of the current budget cycle
     * 
     */
    public Optional<Output<Double>> forecastedSpend() {
        return Optional.ofNullable(this.forecastedSpend);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The reset period for the budget. Valid value is MONTHLY.
     * 
     */
    @Import(name="resetPeriod")
    private @Nullable Output<String> resetPeriod;

    /**
     * @return (Updatable) The reset period for the budget. Valid value is MONTHLY.
     * 
     */
    public Optional<Output<String>> resetPeriod() {
        return Optional.ofNullable(this.resetPeriod);
    }

    /**
     * The current state of the budget.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the budget.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * This is DEPRECTAED. Set the target compartment id in targets instead.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;target_type&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'target_type' instead. */
    @Import(name="targetCompartmentId")
    private @Nullable Output<String> targetCompartmentId;

    /**
     * @return This is DEPRECTAED. Set the target compartment id in targets instead.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;target_type&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'target_type' instead. */
    public Optional<Output<String>> targetCompartmentId() {
        return Optional.ofNullable(this.targetCompartmentId);
    }

    /**
     * The type of target on which the budget is applied.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The type of target on which the budget is applied.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    /**
     * The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;. Curerntly, the array should contain EXACT ONE item.
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<String>> targets;

    /**
     * @return The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;. Curerntly, the array should contain EXACT ONE item.
     * 
     */
    public Optional<Output<List<String>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    /**
     * Time that budget was created
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Time that budget was created
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time that the budget spend was last computed
     * 
     */
    @Import(name="timeSpendComputed")
    private @Nullable Output<String> timeSpendComputed;

    /**
     * @return The time that the budget spend was last computed
     * 
     */
    public Optional<Output<String>> timeSpendComputed() {
        return Optional.ofNullable(this.timeSpendComputed);
    }

    /**
     * Time that budget was updated
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return Time that budget was updated
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * Version of the budget. Starts from 1 and increments by 1.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Version of the budget. Starts from 1 and increments by 1.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private BudgetState() {}

    private BudgetState(BudgetState $) {
        this.actualSpend = $.actualSpend;
        this.alertRuleCount = $.alertRuleCount;
        this.amount = $.amount;
        this.budgetProcessingPeriodStartOffset = $.budgetProcessingPeriodStartOffset;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.forecastedSpend = $.forecastedSpend;
        this.freeformTags = $.freeformTags;
        this.resetPeriod = $.resetPeriod;
        this.state = $.state;
        this.targetCompartmentId = $.targetCompartmentId;
        this.targetType = $.targetType;
        this.targets = $.targets;
        this.timeCreated = $.timeCreated;
        this.timeSpendComputed = $.timeSpendComputed;
        this.timeUpdated = $.timeUpdated;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetState $;

        public Builder() {
            $ = new BudgetState();
        }

        public Builder(BudgetState defaults) {
            $ = new BudgetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actualSpend The actual spend in currency for the current budget cycle
         * 
         * @return builder
         * 
         */
        public Builder actualSpend(@Nullable Output<Double> actualSpend) {
            $.actualSpend = actualSpend;
            return this;
        }

        /**
         * @param actualSpend The actual spend in currency for the current budget cycle
         * 
         * @return builder
         * 
         */
        public Builder actualSpend(Double actualSpend) {
            return actualSpend(Output.of(actualSpend));
        }

        /**
         * @param alertRuleCount Total number of alert rules in the budget
         * 
         * @return builder
         * 
         */
        public Builder alertRuleCount(@Nullable Output<Integer> alertRuleCount) {
            $.alertRuleCount = alertRuleCount;
            return this;
        }

        /**
         * @param alertRuleCount Total number of alert rules in the budget
         * 
         * @return builder
         * 
         */
        public Builder alertRuleCount(Integer alertRuleCount) {
            return alertRuleCount(Output.of(alertRuleCount));
        }

        /**
         * @param amount (Updatable) The amount of the budget expressed as a whole number in the currency of the customer&#39;s rate card.
         * 
         * @return builder
         * 
         */
        public Builder amount(@Nullable Output<Integer> amount) {
            $.amount = amount;
            return this;
        }

        /**
         * @param amount (Updatable) The amount of the budget expressed as a whole number in the currency of the customer&#39;s rate card.
         * 
         * @return builder
         * 
         */
        public Builder amount(Integer amount) {
            return amount(Output.of(amount));
        }

        /**
         * @param budgetProcessingPeriodStartOffset (Updatable) The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
         * 
         * @return builder
         * 
         */
        public Builder budgetProcessingPeriodStartOffset(@Nullable Output<Integer> budgetProcessingPeriodStartOffset) {
            $.budgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
            return this;
        }

        /**
         * @param budgetProcessingPeriodStartOffset (Updatable) The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
         * 
         * @return builder
         * 
         */
        public Builder budgetProcessingPeriodStartOffset(Integer budgetProcessingPeriodStartOffset) {
            return budgetProcessingPeriodStartOffset(Output.of(budgetProcessingPeriodStartOffset));
        }

        /**
         * @param compartmentId The OCID of the tenancy
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the tenancy
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The description of the budget.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the budget.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The displayName of the budget.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The displayName of the budget.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param forecastedSpend The forecasted spend in currency by the end of the current budget cycle
         * 
         * @return builder
         * 
         */
        public Builder forecastedSpend(@Nullable Output<Double> forecastedSpend) {
            $.forecastedSpend = forecastedSpend;
            return this;
        }

        /**
         * @param forecastedSpend The forecasted spend in currency by the end of the current budget cycle
         * 
         * @return builder
         * 
         */
        public Builder forecastedSpend(Double forecastedSpend) {
            return forecastedSpend(Output.of(forecastedSpend));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param resetPeriod (Updatable) The reset period for the budget. Valid value is MONTHLY.
         * 
         * @return builder
         * 
         */
        public Builder resetPeriod(@Nullable Output<String> resetPeriod) {
            $.resetPeriod = resetPeriod;
            return this;
        }

        /**
         * @param resetPeriod (Updatable) The reset period for the budget. Valid value is MONTHLY.
         * 
         * @return builder
         * 
         */
        public Builder resetPeriod(String resetPeriod) {
            return resetPeriod(Output.of(resetPeriod));
        }

        /**
         * @param state The current state of the budget.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the budget.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetCompartmentId This is DEPRECTAED. Set the target compartment id in targets instead.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;target_type&#39; instead.
         * 
         */
        @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'target_type' instead. */
        public Builder targetCompartmentId(@Nullable Output<String> targetCompartmentId) {
            $.targetCompartmentId = targetCompartmentId;
            return this;
        }

        /**
         * @param targetCompartmentId This is DEPRECTAED. Set the target compartment id in targets instead.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;target_type&#39; instead.
         * 
         */
        @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'target_type' instead. */
        public Builder targetCompartmentId(String targetCompartmentId) {
            return targetCompartmentId(Output.of(targetCompartmentId));
        }

        /**
         * @param targetType The type of target on which the budget is applied.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The type of target on which the budget is applied.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        /**
         * @param targets The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;. Curerntly, the array should contain EXACT ONE item.
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<String>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;. Curerntly, the array should contain EXACT ONE item.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<String> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;. Curerntly, the array should contain EXACT ONE item.
         * 
         * @return builder
         * 
         */
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param timeCreated Time that budget was created
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Time that budget was created
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeSpendComputed The time that the budget spend was last computed
         * 
         * @return builder
         * 
         */
        public Builder timeSpendComputed(@Nullable Output<String> timeSpendComputed) {
            $.timeSpendComputed = timeSpendComputed;
            return this;
        }

        /**
         * @param timeSpendComputed The time that the budget spend was last computed
         * 
         * @return builder
         * 
         */
        public Builder timeSpendComputed(String timeSpendComputed) {
            return timeSpendComputed(Output.of(timeSpendComputed));
        }

        /**
         * @param timeUpdated Time that budget was updated
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated Time that budget was updated
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param version Version of the budget. Starts from 1 and increments by 1.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the budget. Starts from 1 and increments by 1.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public BudgetState build() {
            return $;
        }
    }

}
