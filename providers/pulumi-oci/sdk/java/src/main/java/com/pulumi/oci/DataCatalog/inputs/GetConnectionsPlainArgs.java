// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataCatalog.inputs.GetConnectionsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConnectionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectionsPlainArgs Empty = new GetConnectionsPlainArgs();

    /**
     * Unique catalog identifier.
     * 
     */
    @Import(name="catalogId", required=true)
    private String catalogId;

    /**
     * @return Unique catalog identifier.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }

    /**
     * OCID of the user who created the resource.
     * 
     */
    @Import(name="createdById")
    private @Nullable String createdById;

    /**
     * @return OCID of the user who created the resource.
     * 
     */
    public Optional<String> createdById() {
        return Optional.ofNullable(this.createdById);
    }

    /**
     * Unique data asset key.
     * 
     */
    @Import(name="dataAssetKey", required=true)
    private String dataAssetKey;

    /**
     * @return Unique data asset key.
     * 
     */
    public String dataAssetKey() {
        return this.dataAssetKey;
    }

    /**
     * A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * Unique external identifier of this resource in the external source system.
     * 
     */
    @Import(name="externalKey")
    private @Nullable String externalKey;

    /**
     * @return Unique external identifier of this resource in the external source system.
     * 
     */
    public Optional<String> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }

    /**
     * Specifies the fields to return in a connection summary response.
     * 
     */
    @Import(name="fields")
    private @Nullable List<String> fields;

    /**
     * @return Specifies the fields to return in a connection summary response.
     * 
     */
    public Optional<List<String>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable List<GetConnectionsFilter> filters;

    public Optional<List<GetConnectionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Indicates whether this connection is the default connection.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Boolean isDefault;

    /**
     * @return Indicates whether this connection is the default connection.
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Time that the resource was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable String timeCreated;

    /**
     * @return Time that the resource was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Time that the resource&#39;s status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeStatusUpdated")
    private @Nullable String timeStatusUpdated;

    /**
     * @return Time that the resource&#39;s status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<String> timeStatusUpdated() {
        return Optional.ofNullable(this.timeStatusUpdated);
    }

    /**
     * Time that the resource was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable String timeUpdated;

    /**
     * @return Time that the resource was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * OCID of the user who updated the resource.
     * 
     */
    @Import(name="updatedById")
    private @Nullable String updatedById;

    /**
     * @return OCID of the user who updated the resource.
     * 
     */
    public Optional<String> updatedById() {
        return Optional.ofNullable(this.updatedById);
    }

    private GetConnectionsPlainArgs() {}

    private GetConnectionsPlainArgs(GetConnectionsPlainArgs $) {
        this.catalogId = $.catalogId;
        this.createdById = $.createdById;
        this.dataAssetKey = $.dataAssetKey;
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.externalKey = $.externalKey;
        this.fields = $.fields;
        this.filters = $.filters;
        this.isDefault = $.isDefault;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeStatusUpdated = $.timeStatusUpdated;
        this.timeUpdated = $.timeUpdated;
        this.updatedById = $.updatedById;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectionsPlainArgs $;

        public Builder() {
            $ = new GetConnectionsPlainArgs();
        }

        public Builder(GetConnectionsPlainArgs defaults) {
            $ = new GetConnectionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param createdById OCID of the user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdById(@Nullable String createdById) {
            $.createdById = createdById;
            return this;
        }

        /**
         * @param dataAssetKey Unique data asset key.
         * 
         * @return builder
         * 
         */
        public Builder dataAssetKey(String dataAssetKey) {
            $.dataAssetKey = dataAssetKey;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given. The match is not case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayNameContains A filter to return only resources that match display name pattern given. The match is not case sensitive. For Example : /folders?displayNameContains=Cu.* The above would match all folders with display name that starts with &#34;Cu&#34; or has the pattern &#34;Cu&#34; anywhere in between.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param externalKey Unique external identifier of this resource in the external source system.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(@Nullable String externalKey) {
            $.externalKey = externalKey;
            return this;
        }

        /**
         * @param fields Specifies the fields to return in a connection summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable List<String> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to return in a connection summary response.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable List<GetConnectionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetConnectionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isDefault Indicates whether this connection is the default connection.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Boolean isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param timeCreated Time that the resource was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable String timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeStatusUpdated Time that the resource&#39;s status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusUpdated(@Nullable String timeStatusUpdated) {
            $.timeStatusUpdated = timeStatusUpdated;
            return this;
        }

        /**
         * @param timeUpdated Time that the resource was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable String timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param updatedById OCID of the user who updated the resource.
         * 
         * @return builder
         * 
         */
        public Builder updatedById(@Nullable String updatedById) {
            $.updatedById = updatedById;
            return this;
        }

        public GetConnectionsPlainArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            $.dataAssetKey = Objects.requireNonNull($.dataAssetKey, "expected parameter 'dataAssetKey' to be non-null");
            return $;
        }
    }

}
