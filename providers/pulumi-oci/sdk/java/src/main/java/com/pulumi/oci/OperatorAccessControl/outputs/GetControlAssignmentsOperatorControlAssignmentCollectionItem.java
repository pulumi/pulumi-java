// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetControlAssignmentsOperatorControlAssignmentCollectionItem {
    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    private final String assignerId;
    /**
     * @return Comment about the assignment of the operator control to this target resource.
     * 
     */
    private final String comment;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    private final String detachmentDescription;
    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    private final Integer errorCode;
    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    private final String errorMessage;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the operator control assignment.
     * 
     */
    private final String id;
    /**
     * @return The boolean if true would autoApprove during maintenance.
     * 
     */
    private final Boolean isAutoApproveDuringMaintenance;
    /**
     * @return If set, then the target resource is always governed by the operator control.
     * 
     */
    private final Boolean isEnforcedAlways;
    /**
     * @return If set indicates that the audit logs are being forwarded to the relevant remote logging server
     * 
     */
    private final Boolean isLogForwarded;
    /**
     * @return The OCID of the operator control.
     * 
     */
    private final String operatorControlId;
    /**
     * @return The address of the remote syslog server where the audit logs are being forwarded to. Address in host or IP format.
     * 
     */
    private final String remoteSyslogServerAddress;
    /**
     * @return The CA certificate of the remote syslog server.
     * 
     */
    private final String remoteSyslogServerCaCert;
    /**
     * @return The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    private final Integer remoteSyslogServerPort;
    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    private final String resourceCompartmentId;
    /**
     * @return The OCID of the target resource.
     * 
     */
    private final String resourceId;
    /**
     * @return A filter to return only resources that match the given ResourceName.
     * 
     */
    private final String resourceName;
    /**
     * @return A filter to return only lists of resources that match the entire given service type.
     * 
     */
    private final String resourceType;
    /**
     * @return A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
     * 
     */
    private final String state;
    /**
     * @return The time at which the target resource will be brought under the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private final String timeAssignmentFrom;
    /**
     * @return The time at which the target resource will leave the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private final String timeAssignmentTo;
    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private final String timeOfAssignment;
    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private final String timeOfDeletion;
    /**
     * @return User id who released the operatorControl.
     * 
     */
    private final String unassignerId;

    @CustomType.Constructor
    private GetControlAssignmentsOperatorControlAssignmentCollectionItem(
        @CustomType.Parameter("assignerId") String assignerId,
        @CustomType.Parameter("comment") String comment,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("detachmentDescription") String detachmentDescription,
        @CustomType.Parameter("errorCode") Integer errorCode,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isAutoApproveDuringMaintenance") Boolean isAutoApproveDuringMaintenance,
        @CustomType.Parameter("isEnforcedAlways") Boolean isEnforcedAlways,
        @CustomType.Parameter("isLogForwarded") Boolean isLogForwarded,
        @CustomType.Parameter("operatorControlId") String operatorControlId,
        @CustomType.Parameter("remoteSyslogServerAddress") String remoteSyslogServerAddress,
        @CustomType.Parameter("remoteSyslogServerCaCert") String remoteSyslogServerCaCert,
        @CustomType.Parameter("remoteSyslogServerPort") Integer remoteSyslogServerPort,
        @CustomType.Parameter("resourceCompartmentId") String resourceCompartmentId,
        @CustomType.Parameter("resourceId") String resourceId,
        @CustomType.Parameter("resourceName") String resourceName,
        @CustomType.Parameter("resourceType") String resourceType,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeAssignmentFrom") String timeAssignmentFrom,
        @CustomType.Parameter("timeAssignmentTo") String timeAssignmentTo,
        @CustomType.Parameter("timeOfAssignment") String timeOfAssignment,
        @CustomType.Parameter("timeOfDeletion") String timeOfDeletion,
        @CustomType.Parameter("unassignerId") String unassignerId) {
        this.assignerId = assignerId;
        this.comment = comment;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.detachmentDescription = detachmentDescription;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
        this.freeformTags = freeformTags;
        this.id = id;
        this.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
        this.isEnforcedAlways = isEnforcedAlways;
        this.isLogForwarded = isLogForwarded;
        this.operatorControlId = operatorControlId;
        this.remoteSyslogServerAddress = remoteSyslogServerAddress;
        this.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
        this.remoteSyslogServerPort = remoteSyslogServerPort;
        this.resourceCompartmentId = resourceCompartmentId;
        this.resourceId = resourceId;
        this.resourceName = resourceName;
        this.resourceType = resourceType;
        this.state = state;
        this.timeAssignmentFrom = timeAssignmentFrom;
        this.timeAssignmentTo = timeAssignmentTo;
        this.timeOfAssignment = timeOfAssignment;
        this.timeOfDeletion = timeOfDeletion;
        this.unassignerId = unassignerId;
    }

    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    public String assignerId() {
        return this.assignerId;
    }
    /**
     * @return Comment about the assignment of the operator control to this target resource.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    public String detachmentDescription() {
        return this.detachmentDescription;
    }
    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    public Integer errorCode() {
        return this.errorCode;
    }
    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the operator control assignment.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The boolean if true would autoApprove during maintenance.
     * 
     */
    public Boolean isAutoApproveDuringMaintenance() {
        return this.isAutoApproveDuringMaintenance;
    }
    /**
     * @return If set, then the target resource is always governed by the operator control.
     * 
     */
    public Boolean isEnforcedAlways() {
        return this.isEnforcedAlways;
    }
    /**
     * @return If set indicates that the audit logs are being forwarded to the relevant remote logging server
     * 
     */
    public Boolean isLogForwarded() {
        return this.isLogForwarded;
    }
    /**
     * @return The OCID of the operator control.
     * 
     */
    public String operatorControlId() {
        return this.operatorControlId;
    }
    /**
     * @return The address of the remote syslog server where the audit logs are being forwarded to. Address in host or IP format.
     * 
     */
    public String remoteSyslogServerAddress() {
        return this.remoteSyslogServerAddress;
    }
    /**
     * @return The CA certificate of the remote syslog server.
     * 
     */
    public String remoteSyslogServerCaCert() {
        return this.remoteSyslogServerCaCert;
    }
    /**
     * @return The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    public Integer remoteSyslogServerPort() {
        return this.remoteSyslogServerPort;
    }
    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    public String resourceCompartmentId() {
        return this.resourceCompartmentId;
    }
    /**
     * @return The OCID of the target resource.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return A filter to return only resources that match the given ResourceName.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return A filter to return only lists of resources that match the entire given service type.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time at which the target resource will be brought under the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeAssignmentFrom() {
        return this.timeAssignmentFrom;
    }
    /**
     * @return The time at which the target resource will leave the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeAssignmentTo() {
        return this.timeAssignmentTo;
    }
    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfAssignment() {
        return this.timeOfAssignment;
    }
    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return User id who released the operatorControl.
     * 
     */
    public String unassignerId() {
        return this.unassignerId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetControlAssignmentsOperatorControlAssignmentCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String assignerId;
        private String comment;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String detachmentDescription;
        private Integer errorCode;
        private String errorMessage;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isAutoApproveDuringMaintenance;
        private Boolean isEnforcedAlways;
        private Boolean isLogForwarded;
        private String operatorControlId;
        private String remoteSyslogServerAddress;
        private String remoteSyslogServerCaCert;
        private Integer remoteSyslogServerPort;
        private String resourceCompartmentId;
        private String resourceId;
        private String resourceName;
        private String resourceType;
        private String state;
        private String timeAssignmentFrom;
        private String timeAssignmentTo;
        private String timeOfAssignment;
        private String timeOfDeletion;
        private String unassignerId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetControlAssignmentsOperatorControlAssignmentCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignerId = defaults.assignerId;
    	      this.comment = defaults.comment;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.detachmentDescription = defaults.detachmentDescription;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAutoApproveDuringMaintenance = defaults.isAutoApproveDuringMaintenance;
    	      this.isEnforcedAlways = defaults.isEnforcedAlways;
    	      this.isLogForwarded = defaults.isLogForwarded;
    	      this.operatorControlId = defaults.operatorControlId;
    	      this.remoteSyslogServerAddress = defaults.remoteSyslogServerAddress;
    	      this.remoteSyslogServerCaCert = defaults.remoteSyslogServerCaCert;
    	      this.remoteSyslogServerPort = defaults.remoteSyslogServerPort;
    	      this.resourceCompartmentId = defaults.resourceCompartmentId;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.timeAssignmentFrom = defaults.timeAssignmentFrom;
    	      this.timeAssignmentTo = defaults.timeAssignmentTo;
    	      this.timeOfAssignment = defaults.timeOfAssignment;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.unassignerId = defaults.unassignerId;
        }

        public Builder assignerId(String assignerId) {
            this.assignerId = Objects.requireNonNull(assignerId);
            return this;
        }
        public Builder comment(String comment) {
            this.comment = Objects.requireNonNull(comment);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder detachmentDescription(String detachmentDescription) {
            this.detachmentDescription = Objects.requireNonNull(detachmentDescription);
            return this;
        }
        public Builder errorCode(Integer errorCode) {
            this.errorCode = Objects.requireNonNull(errorCode);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isAutoApproveDuringMaintenance(Boolean isAutoApproveDuringMaintenance) {
            this.isAutoApproveDuringMaintenance = Objects.requireNonNull(isAutoApproveDuringMaintenance);
            return this;
        }
        public Builder isEnforcedAlways(Boolean isEnforcedAlways) {
            this.isEnforcedAlways = Objects.requireNonNull(isEnforcedAlways);
            return this;
        }
        public Builder isLogForwarded(Boolean isLogForwarded) {
            this.isLogForwarded = Objects.requireNonNull(isLogForwarded);
            return this;
        }
        public Builder operatorControlId(String operatorControlId) {
            this.operatorControlId = Objects.requireNonNull(operatorControlId);
            return this;
        }
        public Builder remoteSyslogServerAddress(String remoteSyslogServerAddress) {
            this.remoteSyslogServerAddress = Objects.requireNonNull(remoteSyslogServerAddress);
            return this;
        }
        public Builder remoteSyslogServerCaCert(String remoteSyslogServerCaCert) {
            this.remoteSyslogServerCaCert = Objects.requireNonNull(remoteSyslogServerCaCert);
            return this;
        }
        public Builder remoteSyslogServerPort(Integer remoteSyslogServerPort) {
            this.remoteSyslogServerPort = Objects.requireNonNull(remoteSyslogServerPort);
            return this;
        }
        public Builder resourceCompartmentId(String resourceCompartmentId) {
            this.resourceCompartmentId = Objects.requireNonNull(resourceCompartmentId);
            return this;
        }
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        public Builder resourceName(String resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeAssignmentFrom(String timeAssignmentFrom) {
            this.timeAssignmentFrom = Objects.requireNonNull(timeAssignmentFrom);
            return this;
        }
        public Builder timeAssignmentTo(String timeAssignmentTo) {
            this.timeAssignmentTo = Objects.requireNonNull(timeAssignmentTo);
            return this;
        }
        public Builder timeOfAssignment(String timeOfAssignment) {
            this.timeOfAssignment = Objects.requireNonNull(timeOfAssignment);
            return this;
        }
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }
        public Builder unassignerId(String unassignerId) {
            this.unassignerId = Objects.requireNonNull(unassignerId);
            return this;
        }        public GetControlAssignmentsOperatorControlAssignmentCollectionItem build() {
            return new GetControlAssignmentsOperatorControlAssignmentCollectionItem(assignerId, comment, compartmentId, definedTags, detachmentDescription, errorCode, errorMessage, freeformTags, id, isAutoApproveDuringMaintenance, isEnforcedAlways, isLogForwarded, operatorControlId, remoteSyslogServerAddress, remoteSyslogServerCaCert, remoteSyslogServerPort, resourceCompartmentId, resourceId, resourceName, resourceType, state, timeAssignmentFrom, timeAssignmentTo, timeOfAssignment, timeOfDeletion, unassignerId);
        }
    }
}
