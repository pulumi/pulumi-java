// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitoredResourceDatabaseConnectionDetails {
    /**
     * @return (Updatable) Database connector Identifier
     * 
     */
    private final @Nullable String connectorId;
    /**
     * @return (Updatable) dbId of the database
     * 
     */
    private final @Nullable String dbId;
    /**
     * @return (Updatable) UniqueName used for database connection requests.
     * 
     */
    private final @Nullable String dbUniqueName;
    /**
     * @return (Updatable) Listener Port number used for connection requests.
     * 
     */
    private final Integer port;
    /**
     * @return (Updatable) Protocol used in DB connection string when connecting to external database service.
     * 
     */
    private final String protocol;
    /**
     * @return (Updatable) Service name used for connection requests.
     * 
     */
    private final String serviceName;

    @CustomType.Constructor
    private MonitoredResourceDatabaseConnectionDetails(
        @CustomType.Parameter("connectorId") @Nullable String connectorId,
        @CustomType.Parameter("dbId") @Nullable String dbId,
        @CustomType.Parameter("dbUniqueName") @Nullable String dbUniqueName,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("serviceName") String serviceName) {
        this.connectorId = connectorId;
        this.dbId = dbId;
        this.dbUniqueName = dbUniqueName;
        this.port = port;
        this.protocol = protocol;
        this.serviceName = serviceName;
    }

    /**
     * @return (Updatable) Database connector Identifier
     * 
     */
    public Optional<String> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }
    /**
     * @return (Updatable) dbId of the database
     * 
     */
    public Optional<String> dbId() {
        return Optional.ofNullable(this.dbId);
    }
    /**
     * @return (Updatable) UniqueName used for database connection requests.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return (Updatable) Listener Port number used for connection requests.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return (Updatable) Protocol used in DB connection string when connecting to external database service.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return (Updatable) Service name used for connection requests.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitoredResourceDatabaseConnectionDetails defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String connectorId;
        private @Nullable String dbId;
        private @Nullable String dbUniqueName;
        private Integer port;
        private String protocol;
        private String serviceName;

        public Builder() {
    	      // Empty
        }

        public Builder(MonitoredResourceDatabaseConnectionDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.dbId = defaults.dbId;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.serviceName = defaults.serviceName;
        }

        public Builder connectorId(@Nullable String connectorId) {
            this.connectorId = connectorId;
            return this;
        }
        public Builder dbId(@Nullable String dbId) {
            this.dbId = dbId;
            return this;
        }
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }        public MonitoredResourceDatabaseConnectionDetails build() {
            return new MonitoredResourceDatabaseConnectionDetails(connectorId, dbId, dbUniqueName, port, protocol, serviceName);
        }
    }
}
