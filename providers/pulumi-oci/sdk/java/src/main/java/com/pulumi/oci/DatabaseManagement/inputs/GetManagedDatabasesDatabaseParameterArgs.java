// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetManagedDatabasesDatabaseParameterArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedDatabasesDatabaseParameterArgs Empty = new GetManagedDatabasesDatabaseParameterArgs();

    /**
     * When true, results include a list of valid values for parameters (if applicable).
     * 
     */
    @Import(name="isAllowedValuesIncluded")
    private Output</* @Nullable */ Boolean> isAllowedValuesIncluded;

    /**
     * @return When true, results include a list of valid values for parameters (if applicable).
     * 
     */
    public Output</* @Nullable */ Boolean> isAllowedValuesIncluded() {
        return this.isAllowedValuesIncluded;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    @Import(name="managedDatabaseId", required=true)
    private Output<String> managedDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public Output<String> managedDatabaseId() {
        return this.managedDatabaseId;
    }

    /**
     * A filter to return all parameters that have the text given in their names.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return A filter to return all parameters that have the text given in their names.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * The source used to list database parameters. `CURRENT` is used to get the database parameters that are currently in effect for the database instance. `SPFILE` is used to list parameters from the server parameter file. Default is `CURRENT`.
     * 
     */
    @Import(name="source")
    private Output</* @Nullable */ String> source;

    /**
     * @return The source used to list database parameters. `CURRENT` is used to get the database parameters that are currently in effect for the database instance. `SPFILE` is used to list parameters from the server parameter file. Default is `CURRENT`.
     * 
     */
    public Output</* @Nullable */ String> source() {
        return this.source;
    }

    private GetManagedDatabasesDatabaseParameterArgs() {}

    private GetManagedDatabasesDatabaseParameterArgs(GetManagedDatabasesDatabaseParameterArgs $) {
        this.isAllowedValuesIncluded = $.isAllowedValuesIncluded;
        this.managedDatabaseId = $.managedDatabaseId;
        this.name = $.name;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabasesDatabaseParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabasesDatabaseParameterArgs $;

        public Builder() {
            $ = new GetManagedDatabasesDatabaseParameterArgs();
        }

        public Builder(GetManagedDatabasesDatabaseParameterArgs defaults) {
            $ = new GetManagedDatabasesDatabaseParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isAllowedValuesIncluded When true, results include a list of valid values for parameters (if applicable).
         * 
         * @return builder
         * 
         */
        public Builder isAllowedValuesIncluded(Output</* @Nullable */ Boolean> isAllowedValuesIncluded) {
            $.isAllowedValuesIncluded = isAllowedValuesIncluded;
            return this;
        }

        /**
         * @param isAllowedValuesIncluded When true, results include a list of valid values for parameters (if applicable).
         * 
         * @return builder
         * 
         */
        public Builder isAllowedValuesIncluded(@Nullable Boolean isAllowedValuesIncluded) {
            return isAllowedValuesIncluded(Output.of(isAllowedValuesIncluded));
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(Output<String> managedDatabaseId) {
            $.managedDatabaseId = managedDatabaseId;
            return this;
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(String managedDatabaseId) {
            return managedDatabaseId(Output.of(managedDatabaseId));
        }

        /**
         * @param name A filter to return all parameters that have the text given in their names.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return all parameters that have the text given in their names.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param source The source used to list database parameters. `CURRENT` is used to get the database parameters that are currently in effect for the database instance. `SPFILE` is used to list parameters from the server parameter file. Default is `CURRENT`.
         * 
         * @return builder
         * 
         */
        public Builder source(Output</* @Nullable */ String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source used to list database parameters. `CURRENT` is used to get the database parameters that are currently in effect for the database instance. `SPFILE` is used to list parameters from the server parameter file. Default is `CURRENT`.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable String source) {
            return source(Output.of(source));
        }

        public GetManagedDatabasesDatabaseParameterArgs build() {
            $.managedDatabaseId = Objects.requireNonNull($.managedDatabaseId, "expected parameter 'managedDatabaseId' to be non-null");
            return $;
        }
    }

}
