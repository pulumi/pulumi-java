// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionState Empty = new ConnectionState();

    /**
     * Unique catalog identifier.
     * 
     */
    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    /**
     * @return Unique catalog identifier.
     * 
     */
    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * OCID of the user who created the connection.
     * 
     */
    @Import(name="createdById")
    private @Nullable Output<String> createdById;

    /**
     * @return OCID of the user who created the connection.
     * 
     */
    public Optional<Output<String>> createdById() {
        return Optional.ofNullable(this.createdById);
    }

    /**
     * Unique data asset key.
     * 
     */
    @Import(name="dataAssetKey")
    private @Nullable Output<String> dataAssetKey;

    /**
     * @return Unique data asset key.
     * 
     */
    public Optional<Output<String>> dataAssetKey() {
        return Optional.ofNullable(this.dataAssetKey);
    }

    /**
     * (Updatable) A description of the connection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A description of the connection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. To determine the set of optional and required properties for a connection type, a query can be done on &#39;/types?type=connection&#39; that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it&#39;s properties, can be identified from this collection. Example: `{&#34;encProperties&#34;: { &#34;default&#34;: { &#34;password&#34;: &#34;example-password&#34;}}}`
     * 
     */
    @Import(name="encProperties")
    private @Nullable Output<Map<String,Object>> encProperties;

    /**
     * @return (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. To determine the set of optional and required properties for a connection type, a query can be done on &#39;/types?type=connection&#39; that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it&#39;s properties, can be identified from this collection. Example: `{&#34;encProperties&#34;: { &#34;default&#34;: { &#34;password&#34;: &#34;example-password&#34;}}}`
     * 
     */
    public Optional<Output<Map<String,Object>>> encProperties() {
        return Optional.ofNullable(this.encProperties);
    }

    /**
     * Unique external key of this object from the source system.
     * 
     */
    @Import(name="externalKey")
    private @Nullable Output<String> externalKey;

    /**
     * @return Unique external key of this object from the source system.
     * 
     */
    public Optional<Output<String>> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }

    /**
     * (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Unique connection key that is immutable.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Unique connection key that is immutable.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,Object>> properties;

    /**
     * @return A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
     * 
     */
    public Optional<Output<Map<String,Object>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The current state of the connection.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the connection.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeStatusUpdated")
    private @Nullable Output<String> timeStatusUpdated;

    /**
     * @return Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeStatusUpdated() {
        return Optional.ofNullable(this.timeStatusUpdated);
    }

    /**
     * The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    @Import(name="typeKey")
    private @Nullable Output<String> typeKey;

    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    public Optional<Output<String>> typeKey() {
        return Optional.ofNullable(this.typeKey);
    }

    /**
     * OCID of the user who modified the connection.
     * 
     */
    @Import(name="updatedById")
    private @Nullable Output<String> updatedById;

    /**
     * @return OCID of the user who modified the connection.
     * 
     */
    public Optional<Output<String>> updatedById() {
        return Optional.ofNullable(this.updatedById);
    }

    /**
     * URI to the connection instance in the API.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return URI to the connection instance in the API.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private ConnectionState() {}

    private ConnectionState(ConnectionState $) {
        this.catalogId = $.catalogId;
        this.createdById = $.createdById;
        this.dataAssetKey = $.dataAssetKey;
        this.description = $.description;
        this.displayName = $.displayName;
        this.encProperties = $.encProperties;
        this.externalKey = $.externalKey;
        this.isDefault = $.isDefault;
        this.key = $.key;
        this.properties = $.properties;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeStatusUpdated = $.timeStatusUpdated;
        this.timeUpdated = $.timeUpdated;
        this.typeKey = $.typeKey;
        this.updatedById = $.updatedById;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionState $;

        public Builder() {
            $ = new ConnectionState();
        }

        public Builder(ConnectionState defaults) {
            $ = new ConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param createdById OCID of the user who created the connection.
         * 
         * @return builder
         * 
         */
        public Builder createdById(@Nullable Output<String> createdById) {
            $.createdById = createdById;
            return this;
        }

        /**
         * @param createdById OCID of the user who created the connection.
         * 
         * @return builder
         * 
         */
        public Builder createdById(String createdById) {
            return createdById(Output.of(createdById));
        }

        /**
         * @param dataAssetKey Unique data asset key.
         * 
         * @return builder
         * 
         */
        public Builder dataAssetKey(@Nullable Output<String> dataAssetKey) {
            $.dataAssetKey = dataAssetKey;
            return this;
        }

        /**
         * @param dataAssetKey Unique data asset key.
         * 
         * @return builder
         * 
         */
        public Builder dataAssetKey(String dataAssetKey) {
            return dataAssetKey(Output.of(dataAssetKey));
        }

        /**
         * @param description (Updatable) A description of the connection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A description of the connection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param encProperties (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. To determine the set of optional and required properties for a connection type, a query can be done on &#39;/types?type=connection&#39; that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it&#39;s properties, can be identified from this collection. Example: `{&#34;encProperties&#34;: { &#34;default&#34;: { &#34;password&#34;: &#34;example-password&#34;}}}`
         * 
         * @return builder
         * 
         */
        public Builder encProperties(@Nullable Output<Map<String,Object>> encProperties) {
            $.encProperties = encProperties;
            return this;
        }

        /**
         * @param encProperties (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. To determine the set of optional and required properties for a connection type, a query can be done on &#39;/types?type=connection&#39; that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it&#39;s properties, can be identified from this collection. Example: `{&#34;encProperties&#34;: { &#34;default&#34;: { &#34;password&#34;: &#34;example-password&#34;}}}`
         * 
         * @return builder
         * 
         */
        public Builder encProperties(Map<String,Object> encProperties) {
            return encProperties(Output.of(encProperties));
        }

        /**
         * @param externalKey Unique external key of this object from the source system.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(@Nullable Output<String> externalKey) {
            $.externalKey = externalKey;
            return this;
        }

        /**
         * @param externalKey Unique external key of this object from the source system.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(String externalKey) {
            return externalKey(Output.of(externalKey));
        }

        /**
         * @param isDefault (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param key Unique connection key that is immutable.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Unique connection key that is immutable.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param properties A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,Object>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,Object> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param state The current state of the connection.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the connection.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeStatusUpdated Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusUpdated(@Nullable Output<String> timeStatusUpdated) {
            $.timeStatusUpdated = timeStatusUpdated;
            return this;
        }

        /**
         * @param timeStatusUpdated Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusUpdated(String timeStatusUpdated) {
            return timeStatusUpdated(Output.of(timeStatusUpdated));
        }

        /**
         * @param timeUpdated The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param typeKey The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
         * 
         * @return builder
         * 
         */
        public Builder typeKey(@Nullable Output<String> typeKey) {
            $.typeKey = typeKey;
            return this;
        }

        /**
         * @param typeKey The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
         * 
         * @return builder
         * 
         */
        public Builder typeKey(String typeKey) {
            return typeKey(Output.of(typeKey));
        }

        /**
         * @param updatedById OCID of the user who modified the connection.
         * 
         * @return builder
         * 
         */
        public Builder updatedById(@Nullable Output<String> updatedById) {
            $.updatedById = updatedById;
            return this;
        }

        /**
         * @param updatedById OCID of the user who modified the connection.
         * 
         * @return builder
         * 
         */
        public Builder updatedById(String updatedById) {
            return updatedById(Output.of(updatedById));
        }

        /**
         * @param uri URI to the connection instance in the API.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI to the connection instance in the API.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public ConnectionState build() {
            return $;
        }
    }

}
