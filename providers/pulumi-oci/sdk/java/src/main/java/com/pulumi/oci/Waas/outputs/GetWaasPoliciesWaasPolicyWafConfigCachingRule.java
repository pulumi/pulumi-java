// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Waas.outputs.GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWaasPoliciesWaasPolicyWafConfigCachingRule {
    /**
     * @return The action to take against requests from detected bots. If unspecified, defaults to `DETECT`.
     * 
     */
    private final String action;
    /**
     * @return The duration to cache content for the caching rule, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    private final String cachingDuration;
    /**
     * @return The duration to cache content in the user&#39;s browser, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    private final String clientCachingDuration;
    /**
     * @return When defined, the JavaScript Challenge would be applied only for the requests that matched all the listed conditions.
     * 
     */
    private final List<GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria> criterias;
    /**
     * @return Enables or disables client caching. Browsers use the `Cache-Control` header value for caching content locally in the browser. This setting overrides the addition of a `Cache-Control` header in responses.
     * 
     */
    private final Boolean isClientCachingEnabled;
    /**
     * @return The unique key for the caching rule.
     * 
     */
    private final String key;
    /**
     * @return The unique name of the whitelist.
     * 
     */
    private final String name;

    @CustomType.Constructor
    private GetWaasPoliciesWaasPolicyWafConfigCachingRule(
        @CustomType.Parameter("action") String action,
        @CustomType.Parameter("cachingDuration") String cachingDuration,
        @CustomType.Parameter("clientCachingDuration") String clientCachingDuration,
        @CustomType.Parameter("criterias") List<GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria> criterias,
        @CustomType.Parameter("isClientCachingEnabled") Boolean isClientCachingEnabled,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("name") String name) {
        this.action = action;
        this.cachingDuration = cachingDuration;
        this.clientCachingDuration = clientCachingDuration;
        this.criterias = criterias;
        this.isClientCachingEnabled = isClientCachingEnabled;
        this.key = key;
        this.name = name;
    }

    /**
     * @return The action to take against requests from detected bots. If unspecified, defaults to `DETECT`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The duration to cache content for the caching rule, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    public String cachingDuration() {
        return this.cachingDuration;
    }
    /**
     * @return The duration to cache content in the user&#39;s browser, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    public String clientCachingDuration() {
        return this.clientCachingDuration;
    }
    /**
     * @return When defined, the JavaScript Challenge would be applied only for the requests that matched all the listed conditions.
     * 
     */
    public List<GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria> criterias() {
        return this.criterias;
    }
    /**
     * @return Enables or disables client caching. Browsers use the `Cache-Control` header value for caching content locally in the browser. This setting overrides the addition of a `Cache-Control` header in responses.
     * 
     */
    public Boolean isClientCachingEnabled() {
        return this.isClientCachingEnabled;
    }
    /**
     * @return The unique key for the caching rule.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The unique name of the whitelist.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWaasPoliciesWaasPolicyWafConfigCachingRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private String cachingDuration;
        private String clientCachingDuration;
        private List<GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria> criterias;
        private Boolean isClientCachingEnabled;
        private String key;
        private String name;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWaasPoliciesWaasPolicyWafConfigCachingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.cachingDuration = defaults.cachingDuration;
    	      this.clientCachingDuration = defaults.clientCachingDuration;
    	      this.criterias = defaults.criterias;
    	      this.isClientCachingEnabled = defaults.isClientCachingEnabled;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder cachingDuration(String cachingDuration) {
            this.cachingDuration = Objects.requireNonNull(cachingDuration);
            return this;
        }
        public Builder clientCachingDuration(String clientCachingDuration) {
            this.clientCachingDuration = Objects.requireNonNull(clientCachingDuration);
            return this;
        }
        public Builder criterias(List<GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria> criterias) {
            this.criterias = Objects.requireNonNull(criterias);
            return this;
        }
        public Builder criterias(GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria... criterias) {
            return criterias(List.of(criterias));
        }
        public Builder isClientCachingEnabled(Boolean isClientCachingEnabled) {
            this.isClientCachingEnabled = Objects.requireNonNull(isClientCachingEnabled);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }        public GetWaasPoliciesWaasPolicyWafConfigCachingRule build() {
            return new GetWaasPoliciesWaasPolicyWafConfigCachingRule(action, cachingDuration, clientCachingDuration, criterias, isClientCachingEnabled, key, name);
        }
    }
}
