// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class NamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceArgs Empty = new NamespaceArgs();

    /**
     * The OCID of the root compartment i.e. OCID of the tenancy.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the root compartment i.e. OCID of the tenancy.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     * 
     */
    @Import(name="isOnboarded", required=true)
    private Output<Boolean> isOnboarded;

    /**
     * @return Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     * 
     */
    public Output<Boolean> isOnboarded() {
        return this.isOnboarded;
    }

    /**
     * The Log Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Log Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    private NamespaceArgs() {}

    private NamespaceArgs(NamespaceArgs $) {
        this.compartmentId = $.compartmentId;
        this.isOnboarded = $.isOnboarded;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceArgs $;

        public Builder() {
            $ = new NamespaceArgs();
        }

        public Builder(NamespaceArgs defaults) {
            $ = new NamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the root compartment i.e. OCID of the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the root compartment i.e. OCID of the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param isOnboarded Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
         * 
         * @return builder
         * 
         */
        public Builder isOnboarded(Output<Boolean> isOnboarded) {
            $.isOnboarded = isOnboarded;
            return this;
        }

        /**
         * @param isOnboarded Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
         * 
         * @return builder
         * 
         */
        public Builder isOnboarded(Boolean isOnboarded) {
            return isOnboarded(Output.of(isOnboarded));
        }

        /**
         * @param namespace The Log Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Log Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public NamespaceArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.isOnboarded = Objects.requireNonNull($.isOnboarded, "expected parameter 'isOnboarded' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
