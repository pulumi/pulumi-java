// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Marketplace.inputs.GetPublicationsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPublicationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPublicationsArgs Empty = new GetPublicationsArgs();

    /**
     * The unique identifier for the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The unique identifier for the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetPublicationsFilter> filters;

    public Optional<List<GetPublicationsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The type of the listing.
     * 
     */
    @Import(name="listingType", required=true)
    private String listingType;

    /**
     * @return The type of the listing.
     * 
     */
    public String listingType() {
        return this.listingType;
    }

    /**
     * The name of the publication.
     * 
     */
    @Import(name="names")
    private @Nullable List<String> names;

    /**
     * @return The name of the publication.
     * 
     */
    public Optional<List<String>> names() {
        return Optional.ofNullable(this.names);
    }

    /**
     * The operating system of the listing.
     * 
     */
    @Import(name="operatingSystems")
    private @Nullable List<String> operatingSystems;

    /**
     * @return The operating system of the listing.
     * 
     */
    public Optional<List<String>> operatingSystems() {
        return Optional.ofNullable(this.operatingSystems);
    }

    /**
     * The unique identifier for the publication.
     * 
     */
    @Import(name="publicationId")
    private @Nullable String publicationId;

    /**
     * @return The unique identifier for the publication.
     * 
     */
    public Optional<String> publicationId() {
        return Optional.ofNullable(this.publicationId);
    }

    private GetPublicationsArgs() {}

    private GetPublicationsArgs(GetPublicationsArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.listingType = $.listingType;
        this.names = $.names;
        this.operatingSystems = $.operatingSystems;
        this.publicationId = $.publicationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPublicationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPublicationsArgs $;

        public Builder() {
            $ = new GetPublicationsArgs();
        }

        public Builder(GetPublicationsArgs defaults) {
            $ = new GetPublicationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The unique identifier for the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetPublicationsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetPublicationsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param listingType The type of the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingType(String listingType) {
            $.listingType = listingType;
            return this;
        }

        /**
         * @param names The name of the publication.
         * 
         * @return builder
         * 
         */
        public Builder names(@Nullable List<String> names) {
            $.names = names;
            return this;
        }

        /**
         * @param names The name of the publication.
         * 
         * @return builder
         * 
         */
        public Builder names(String... names) {
            return names(List.of(names));
        }

        /**
         * @param operatingSystems The operating system of the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystems(@Nullable List<String> operatingSystems) {
            $.operatingSystems = operatingSystems;
            return this;
        }

        /**
         * @param operatingSystems The operating system of the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystems(String... operatingSystems) {
            return operatingSystems(List.of(operatingSystems));
        }

        /**
         * @param publicationId The unique identifier for the publication.
         * 
         * @return builder
         * 
         */
        public Builder publicationId(@Nullable String publicationId) {
            $.publicationId = publicationId;
            return this;
        }

        public GetPublicationsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.listingType = Objects.requireNonNull($.listingType, "expected parameter 'listingType' to be non-null");
            return $;
        }
    }

}
