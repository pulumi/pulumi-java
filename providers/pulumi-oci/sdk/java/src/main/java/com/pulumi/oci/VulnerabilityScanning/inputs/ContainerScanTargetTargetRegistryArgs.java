// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerScanTargetTargetRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerScanTargetTargetRegistryArgs Empty = new ContainerScanTargetTargetRegistryArgs();

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
     * 
     */
    @Import(name="repositories")
    private @Nullable Output<List<String>> repositories;

    /**
     * @return (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
     * 
     */
    public Optional<Output<List<String>>> repositories() {
        return Optional.ofNullable(this.repositories);
    }

    /**
     * (Updatable) The scan level
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The scan level
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return (Updatable) URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ContainerScanTargetTargetRegistryArgs() {}

    private ContainerScanTargetTargetRegistryArgs(ContainerScanTargetTargetRegistryArgs $) {
        this.compartmentId = $.compartmentId;
        this.repositories = $.repositories;
        this.type = $.type;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerScanTargetTargetRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerScanTargetTargetRegistryArgs $;

        public Builder() {
            $ = new ContainerScanTargetTargetRegistryArgs();
        }

        public Builder(ContainerScanTargetTargetRegistryArgs defaults) {
            $ = new ContainerScanTargetTargetRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param repositories (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
         * 
         * @return builder
         * 
         */
        public Builder repositories(@Nullable Output<List<String>> repositories) {
            $.repositories = repositories;
            return this;
        }

        /**
         * @param repositories (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
         * 
         * @return builder
         * 
         */
        public Builder repositories(List<String> repositories) {
            return repositories(Output.of(repositories));
        }

        /**
         * @param repositories (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
         * 
         * @return builder
         * 
         */
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }

        /**
         * @param type (Updatable) The scan level
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The scan level
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param url (Updatable) URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url (Updatable) URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ContainerScanTargetTargetRegistryArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
