// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRouteBackendArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRouteLoggingPoliciesArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRouteRequestPoliciesArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRouteResponsePoliciesArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteArgs Empty = new DeploymentSpecificationRouteArgs();

    /**
     * (Updatable) The backend to forward requests to.
     * 
     */
    @Import(name="backend", required=true)
    private Output<DeploymentSpecificationRouteBackendArgs> backend;

    /**
     * @return (Updatable) The backend to forward requests to.
     * 
     */
    public Output<DeploymentSpecificationRouteBackendArgs> backend() {
        return this.backend;
    }

    /**
     * (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
     * 
     */
    @Import(name="loggingPolicies")
    private @Nullable Output<DeploymentSpecificationRouteLoggingPoliciesArgs> loggingPolicies;

    /**
     * @return (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
     * 
     */
    public Optional<Output<DeploymentSpecificationRouteLoggingPoliciesArgs>> loggingPolicies() {
        return Optional.ofNullable(this.loggingPolicies);
    }

    /**
     * (Updatable) A list of allowed methods on this route.
     * 
     */
    @Import(name="methods")
    private @Nullable Output<List<String>> methods;

    /**
     * @return (Updatable) A list of allowed methods on this route.
     * 
     */
    public Optional<Output<List<String>>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * (Updatable) Behavior applied to any requests received by the API on this route.
     * 
     */
    @Import(name="requestPolicies")
    private @Nullable Output<DeploymentSpecificationRouteRequestPoliciesArgs> requestPolicies;

    /**
     * @return (Updatable) Behavior applied to any requests received by the API on this route.
     * 
     */
    public Optional<Output<DeploymentSpecificationRouteRequestPoliciesArgs>> requestPolicies() {
        return Optional.ofNullable(this.requestPolicies);
    }

    /**
     * (Updatable) Behavior applied to any responses sent by the API for requests on this route.
     * 
     */
    @Import(name="responsePolicies")
    private @Nullable Output<DeploymentSpecificationRouteResponsePoliciesArgs> responsePolicies;

    /**
     * @return (Updatable) Behavior applied to any responses sent by the API for requests on this route.
     * 
     */
    public Optional<Output<DeploymentSpecificationRouteResponsePoliciesArgs>> responsePolicies() {
        return Optional.ofNullable(this.responsePolicies);
    }

    private DeploymentSpecificationRouteArgs() {}

    private DeploymentSpecificationRouteArgs(DeploymentSpecificationRouteArgs $) {
        this.backend = $.backend;
        this.loggingPolicies = $.loggingPolicies;
        this.methods = $.methods;
        this.path = $.path;
        this.requestPolicies = $.requestPolicies;
        this.responsePolicies = $.responsePolicies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteArgs();
        }

        public Builder(DeploymentSpecificationRouteArgs defaults) {
            $ = new DeploymentSpecificationRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend (Updatable) The backend to forward requests to.
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<DeploymentSpecificationRouteBackendArgs> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend (Updatable) The backend to forward requests to.
         * 
         * @return builder
         * 
         */
        public Builder backend(DeploymentSpecificationRouteBackendArgs backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param loggingPolicies (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
         * 
         * @return builder
         * 
         */
        public Builder loggingPolicies(@Nullable Output<DeploymentSpecificationRouteLoggingPoliciesArgs> loggingPolicies) {
            $.loggingPolicies = loggingPolicies;
            return this;
        }

        /**
         * @param loggingPolicies (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
         * 
         * @return builder
         * 
         */
        public Builder loggingPolicies(DeploymentSpecificationRouteLoggingPoliciesArgs loggingPolicies) {
            return loggingPolicies(Output.of(loggingPolicies));
        }

        /**
         * @param methods (Updatable) A list of allowed methods on this route.
         * 
         * @return builder
         * 
         */
        public Builder methods(@Nullable Output<List<String>> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods (Updatable) A list of allowed methods on this route.
         * 
         * @return builder
         * 
         */
        public Builder methods(List<String> methods) {
            return methods(Output.of(methods));
        }

        /**
         * @param methods (Updatable) A list of allowed methods on this route.
         * 
         * @return builder
         * 
         */
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param path (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param requestPolicies (Updatable) Behavior applied to any requests received by the API on this route.
         * 
         * @return builder
         * 
         */
        public Builder requestPolicies(@Nullable Output<DeploymentSpecificationRouteRequestPoliciesArgs> requestPolicies) {
            $.requestPolicies = requestPolicies;
            return this;
        }

        /**
         * @param requestPolicies (Updatable) Behavior applied to any requests received by the API on this route.
         * 
         * @return builder
         * 
         */
        public Builder requestPolicies(DeploymentSpecificationRouteRequestPoliciesArgs requestPolicies) {
            return requestPolicies(Output.of(requestPolicies));
        }

        /**
         * @param responsePolicies (Updatable) Behavior applied to any responses sent by the API for requests on this route.
         * 
         * @return builder
         * 
         */
        public Builder responsePolicies(@Nullable Output<DeploymentSpecificationRouteResponsePoliciesArgs> responsePolicies) {
            $.responsePolicies = responsePolicies;
            return this;
        }

        /**
         * @param responsePolicies (Updatable) Behavior applied to any responses sent by the API for requests on this route.
         * 
         * @return builder
         * 
         */
        public Builder responsePolicies(DeploymentSpecificationRouteResponsePoliciesArgs responsePolicies) {
            return responsePolicies(Output.of(responsePolicies));
        }

        public DeploymentSpecificationRouteArgs build() {
            $.backend = Objects.requireNonNull($.backend, "expected parameter 'backend' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
