// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryRefState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryRefState Empty = new RepositoryRefState();

    /**
     * (Updatable) Commit ID pointed to by the new branch.
     * 
     */
    @Import(name="commitId")
    private @Nullable Output<String> commitId;

    /**
     * @return (Updatable) Commit ID pointed to by the new branch.
     * 
     */
    public Optional<Output<String>> commitId() {
        return Optional.ofNullable(this.commitId);
    }

    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Unique full reference name inside a repository.
     * 
     */
    @Import(name="fullRefName")
    private @Nullable Output<String> fullRefName;

    /**
     * @return Unique full reference name inside a repository.
     * 
     */
    public Optional<Output<String>> fullRefName() {
        return Optional.ofNullable(this.fullRefName);
    }

    /**
     * (Updatable) SHA-1 hash value of the object pointed to by the tag.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return (Updatable) SHA-1 hash value of the object pointed to by the tag.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * A filter to return only resources that match the given reference name.
     * 
     */
    @Import(name="refName")
    private @Nullable Output<String> refName;

    /**
     * @return A filter to return only resources that match the given reference name.
     * 
     */
    public Optional<Output<String>> refName() {
        return Optional.ofNullable(this.refName);
    }

    /**
     * (Updatable) The type of reference (BRANCH or TAG).
     * 
     */
    @Import(name="refType")
    private @Nullable Output<String> refType;

    /**
     * @return (Updatable) The type of reference (BRANCH or TAG).
     * 
     */
    public Optional<Output<String>> refType() {
        return Optional.ofNullable(this.refType);
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private RepositoryRefState() {}

    private RepositoryRefState(RepositoryRefState $) {
        this.commitId = $.commitId;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.fullRefName = $.fullRefName;
        this.objectId = $.objectId;
        this.refName = $.refName;
        this.refType = $.refType;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryRefState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryRefState $;

        public Builder() {
            $ = new RepositoryRefState();
        }

        public Builder(RepositoryRefState defaults) {
            $ = new RepositoryRefState(Objects.requireNonNull(defaults));
        }

        /**
         * @param commitId (Updatable) Commit ID pointed to by the new branch.
         * 
         * @return builder
         * 
         */
        public Builder commitId(@Nullable Output<String> commitId) {
            $.commitId = commitId;
            return this;
        }

        /**
         * @param commitId (Updatable) Commit ID pointed to by the new branch.
         * 
         * @return builder
         * 
         */
        public Builder commitId(String commitId) {
            return commitId(Output.of(commitId));
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param fullRefName Unique full reference name inside a repository.
         * 
         * @return builder
         * 
         */
        public Builder fullRefName(@Nullable Output<String> fullRefName) {
            $.fullRefName = fullRefName;
            return this;
        }

        /**
         * @param fullRefName Unique full reference name inside a repository.
         * 
         * @return builder
         * 
         */
        public Builder fullRefName(String fullRefName) {
            return fullRefName(Output.of(fullRefName));
        }

        /**
         * @param objectId (Updatable) SHA-1 hash value of the object pointed to by the tag.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId (Updatable) SHA-1 hash value of the object pointed to by the tag.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(@Nullable Output<String> refName) {
            $.refName = refName;
            return this;
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(String refName) {
            return refName(Output.of(refName));
        }

        /**
         * @param refType (Updatable) The type of reference (BRANCH or TAG).
         * 
         * @return builder
         * 
         */
        public Builder refType(@Nullable Output<String> refType) {
            $.refType = refType;
            return this;
        }

        /**
         * @param refType (Updatable) The type of reference (BRANCH or TAG).
         * 
         * @return builder
         * 
         */
        public Builder refType(String refType) {
            return refType(Output.of(refType));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public RepositoryRefState build() {
            return $;
        }
    }

}
