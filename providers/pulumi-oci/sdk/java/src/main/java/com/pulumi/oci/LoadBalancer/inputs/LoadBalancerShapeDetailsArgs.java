// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class LoadBalancerShapeDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerShapeDetailsArgs Empty = new LoadBalancerShapeDetailsArgs();

    /**
     * (Updatable) Bandwidth in Mbps that determines the maximum bandwidth (ingress plus egress) that the load balancer can achieve. This bandwidth cannot be always guaranteed. For a guaranteed bandwidth use the minimumBandwidthInMbps parameter.
     * 
     */
    @Import(name="maximumBandwidthInMbps", required=true)
    private Output<Integer> maximumBandwidthInMbps;

    /**
     * @return (Updatable) Bandwidth in Mbps that determines the maximum bandwidth (ingress plus egress) that the load balancer can achieve. This bandwidth cannot be always guaranteed. For a guaranteed bandwidth use the minimumBandwidthInMbps parameter.
     * 
     */
    public Output<Integer> maximumBandwidthInMbps() {
        return this.maximumBandwidthInMbps;
    }

    /**
     * (Updatable) Bandwidth in Mbps that determines the total pre-provisioned bandwidth (ingress plus egress). The values must be between 10 and the maximumBandwidthInMbps.  Example: `150`
     * 
     */
    @Import(name="minimumBandwidthInMbps", required=true)
    private Output<Integer> minimumBandwidthInMbps;

    /**
     * @return (Updatable) Bandwidth in Mbps that determines the total pre-provisioned bandwidth (ingress plus egress). The values must be between 10 and the maximumBandwidthInMbps.  Example: `150`
     * 
     */
    public Output<Integer> minimumBandwidthInMbps() {
        return this.minimumBandwidthInMbps;
    }

    private LoadBalancerShapeDetailsArgs() {}

    private LoadBalancerShapeDetailsArgs(LoadBalancerShapeDetailsArgs $) {
        this.maximumBandwidthInMbps = $.maximumBandwidthInMbps;
        this.minimumBandwidthInMbps = $.minimumBandwidthInMbps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerShapeDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerShapeDetailsArgs $;

        public Builder() {
            $ = new LoadBalancerShapeDetailsArgs();
        }

        public Builder(LoadBalancerShapeDetailsArgs defaults) {
            $ = new LoadBalancerShapeDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumBandwidthInMbps (Updatable) Bandwidth in Mbps that determines the maximum bandwidth (ingress plus egress) that the load balancer can achieve. This bandwidth cannot be always guaranteed. For a guaranteed bandwidth use the minimumBandwidthInMbps parameter.
         * 
         * @return builder
         * 
         */
        public Builder maximumBandwidthInMbps(Output<Integer> maximumBandwidthInMbps) {
            $.maximumBandwidthInMbps = maximumBandwidthInMbps;
            return this;
        }

        /**
         * @param maximumBandwidthInMbps (Updatable) Bandwidth in Mbps that determines the maximum bandwidth (ingress plus egress) that the load balancer can achieve. This bandwidth cannot be always guaranteed. For a guaranteed bandwidth use the minimumBandwidthInMbps parameter.
         * 
         * @return builder
         * 
         */
        public Builder maximumBandwidthInMbps(Integer maximumBandwidthInMbps) {
            return maximumBandwidthInMbps(Output.of(maximumBandwidthInMbps));
        }

        /**
         * @param minimumBandwidthInMbps (Updatable) Bandwidth in Mbps that determines the total pre-provisioned bandwidth (ingress plus egress). The values must be between 10 and the maximumBandwidthInMbps.  Example: `150`
         * 
         * @return builder
         * 
         */
        public Builder minimumBandwidthInMbps(Output<Integer> minimumBandwidthInMbps) {
            $.minimumBandwidthInMbps = minimumBandwidthInMbps;
            return this;
        }

        /**
         * @param minimumBandwidthInMbps (Updatable) Bandwidth in Mbps that determines the total pre-provisioned bandwidth (ingress plus egress). The values must be between 10 and the maximumBandwidthInMbps.  Example: `150`
         * 
         * @return builder
         * 
         */
        public Builder minimumBandwidthInMbps(Integer minimumBandwidthInMbps) {
            return minimumBandwidthInMbps(Output.of(minimumBandwidthInMbps));
        }

        public LoadBalancerShapeDetailsArgs build() {
            $.maximumBandwidthInMbps = Objects.requireNonNull($.maximumBandwidthInMbps, "expected parameter 'maximumBandwidthInMbps' to be non-null");
            $.minimumBandwidthInMbps = Objects.requireNonNull($.minimumBandwidthInMbps, "expected parameter 'minimumBandwidthInMbps' to be non-null");
            return $;
        }
    }

}
